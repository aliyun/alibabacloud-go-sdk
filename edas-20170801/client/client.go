// This file is auto-generated, don't edit it. Thanks.
package client

import (
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	roautil "github.com/alibabacloud-go/tea-roa-utils/service"
	roa "github.com/alibabacloud-go/tea-roa/client"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AbortAndRollbackChangeOrderQuery struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
}

func (s AbortAndRollbackChangeOrderQuery) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderQuery) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderQuery) SetChangeOrderId(v string) *AbortAndRollbackChangeOrderQuery {
	s.ChangeOrderId = &v
	return s
}

type AbortAndRollbackChangeOrderRequest struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *AbortAndRollbackChangeOrderQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s AbortAndRollbackChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderRequest) SetHeaders(v map[string]*string) *AbortAndRollbackChangeOrderRequest {
	s.Headers = v
	return s
}

func (s *AbortAndRollbackChangeOrderRequest) SetQuery(v *AbortAndRollbackChangeOrderQuery) *AbortAndRollbackChangeOrderRequest {
	s.Query = v
	return s
}

type AbortAndRollbackChangeOrderResponseBody struct {
	Code      *int                                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorCode *string                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty" require:"true"`
	Message   *string                                      `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TraceId   *string                                      `json:"TraceId,omitempty" xml:"TraceId,omitempty" require:"true"`
	Data      *AbortAndRollbackChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s AbortAndRollbackChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetCode(v int) *AbortAndRollbackChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetErrorCode(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetMessage(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetRequestId(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetTraceId(v string) *AbortAndRollbackChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

func (s *AbortAndRollbackChangeOrderResponseBody) SetData(v *AbortAndRollbackChangeOrderResponseBodyData) *AbortAndRollbackChangeOrderResponseBody {
	s.Data = v
	return s
}

type AbortAndRollbackChangeOrderResponseBodyData struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
}

func (s AbortAndRollbackChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponseBodyData) SetChangeOrderId(v string) *AbortAndRollbackChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type AbortAndRollbackChangeOrderResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AbortAndRollbackChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AbortAndRollbackChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s AbortAndRollbackChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *AbortAndRollbackChangeOrderResponse) SetHeaders(v map[string]*string) *AbortAndRollbackChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *AbortAndRollbackChangeOrderResponse) SetBody(v *AbortAndRollbackChangeOrderResponseBody) *AbortAndRollbackChangeOrderResponse {
	s.Body = v
	return s
}

type AbortChangeOrderQuery struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
}

func (s AbortChangeOrderQuery) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderQuery) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderQuery) SetChangeOrderId(v string) *AbortChangeOrderQuery {
	s.ChangeOrderId = &v
	return s
}

type AbortChangeOrderRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *AbortChangeOrderQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s AbortChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderRequest) SetHeaders(v map[string]*string) *AbortChangeOrderRequest {
	s.Headers = v
	return s
}

func (s *AbortChangeOrderRequest) SetQuery(v *AbortChangeOrderQuery) *AbortChangeOrderRequest {
	s.Query = v
	return s
}

type AbortChangeOrderResponseBody struct {
	Code      *int                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorCode *string                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty" require:"true"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TraceId   *string                           `json:"TraceId,omitempty" xml:"TraceId,omitempty" require:"true"`
	Data      *AbortChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s AbortChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponseBody) SetCode(v int) *AbortChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetErrorCode(v string) *AbortChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetMessage(v string) *AbortChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetRequestId(v string) *AbortChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetTraceId(v string) *AbortChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

func (s *AbortChangeOrderResponseBody) SetData(v *AbortChangeOrderResponseBodyData) *AbortChangeOrderResponseBody {
	s.Data = v
	return s
}

type AbortChangeOrderResponseBodyData struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
}

func (s AbortChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponseBodyData) SetChangeOrderId(v string) *AbortChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type AbortChangeOrderResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AbortChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AbortChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s AbortChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *AbortChangeOrderResponse) SetHeaders(v map[string]*string) *AbortChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *AbortChangeOrderResponse) SetBody(v *AbortChangeOrderResponseBody) *AbortChangeOrderResponse {
	s.Body = v
	return s
}

type AddLogPathBody struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
}

func (s AddLogPathBody) String() string {
	return tea.Prettify(s)
}

func (s AddLogPathBody) GoString() string {
	return s.String()
}

func (s *AddLogPathBody) SetAppId(v string) *AddLogPathBody {
	s.AppId = &v
	return s
}

func (s *AddLogPathBody) SetPath(v string) *AddLogPathBody {
	s.Path = &v
	return s
}

type AddLogPathRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *AddLogPathBody    `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLogPathRequest) String() string {
	return tea.Prettify(s)
}

func (s AddLogPathRequest) GoString() string {
	return s.String()
}

func (s *AddLogPathRequest) SetHeaders(v map[string]*string) *AddLogPathRequest {
	s.Headers = v
	return s
}

func (s *AddLogPathRequest) SetBody(v *AddLogPathBody) *AddLogPathRequest {
	s.Body = v
	return s
}

type AddLogPathResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AddLogPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddLogPathResponseBody) GoString() string {
	return s.String()
}

func (s *AddLogPathResponseBody) SetCode(v int) *AddLogPathResponseBody {
	s.Code = &v
	return s
}

func (s *AddLogPathResponseBody) SetMessage(v string) *AddLogPathResponseBody {
	s.Message = &v
	return s
}

func (s *AddLogPathResponseBody) SetRequestId(v string) *AddLogPathResponseBody {
	s.RequestId = &v
	return s
}

type AddLogPathResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddLogPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddLogPathResponse) String() string {
	return tea.Prettify(s)
}

func (s AddLogPathResponse) GoString() string {
	return s.String()
}

func (s *AddLogPathResponse) SetHeaders(v map[string]*string) *AddLogPathResponse {
	s.Headers = v
	return s
}

func (s *AddLogPathResponse) SetBody(v *AddLogPathResponseBody) *AddLogPathResponse {
	s.Body = v
	return s
}

type AddMockRuleQuery struct {
	ConsumerAppsJson  *string `json:"ConsumerAppsJson,omitempty" xml:"ConsumerAppsJson,omitempty" require:"true"`
	DubboMockItemJson *string `json:"DubboMockItemJson,omitempty" xml:"DubboMockItemJson,omitempty" require:"true"`
	Enable            *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	ExtraJson         *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	MockType          *int64  `json:"MockType,omitempty" xml:"MockType,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace         *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ProviderAppId     *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName   *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region            *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson    *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source            *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s AddMockRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleQuery) GoString() string {
	return s.String()
}

func (s *AddMockRuleQuery) SetConsumerAppsJson(v string) *AddMockRuleQuery {
	s.ConsumerAppsJson = &v
	return s
}

func (s *AddMockRuleQuery) SetDubboMockItemJson(v string) *AddMockRuleQuery {
	s.DubboMockItemJson = &v
	return s
}

func (s *AddMockRuleQuery) SetEnable(v bool) *AddMockRuleQuery {
	s.Enable = &v
	return s
}

func (s *AddMockRuleQuery) SetExtraJson(v string) *AddMockRuleQuery {
	s.ExtraJson = &v
	return s
}

func (s *AddMockRuleQuery) SetMockType(v int64) *AddMockRuleQuery {
	s.MockType = &v
	return s
}

func (s *AddMockRuleQuery) SetName(v string) *AddMockRuleQuery {
	s.Name = &v
	return s
}

func (s *AddMockRuleQuery) SetNamespace(v string) *AddMockRuleQuery {
	s.Namespace = &v
	return s
}

func (s *AddMockRuleQuery) SetProviderAppId(v string) *AddMockRuleQuery {
	s.ProviderAppId = &v
	return s
}

func (s *AddMockRuleQuery) SetProviderAppName(v string) *AddMockRuleQuery {
	s.ProviderAppName = &v
	return s
}

func (s *AddMockRuleQuery) SetRegion(v string) *AddMockRuleQuery {
	s.Region = &v
	return s
}

func (s *AddMockRuleQuery) SetScMockItemJson(v string) *AddMockRuleQuery {
	s.ScMockItemJson = &v
	return s
}

func (s *AddMockRuleQuery) SetSource(v string) *AddMockRuleQuery {
	s.Source = &v
	return s
}

type AddMockRuleRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *AddMockRuleQuery  `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s AddMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleRequest) GoString() string {
	return s.String()
}

func (s *AddMockRuleRequest) SetHeaders(v map[string]*string) *AddMockRuleRequest {
	s.Headers = v
	return s
}

func (s *AddMockRuleRequest) SetQuery(v *AddMockRuleQuery) *AddMockRuleRequest {
	s.Query = v
	return s
}

type AddMockRuleResponseBody struct {
	Code      *int                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                      `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                        `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *AddMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s AddMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *AddMockRuleResponseBody) SetCode(v int) *AddMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *AddMockRuleResponseBody) SetMessage(v string) *AddMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *AddMockRuleResponseBody) SetRequestId(v string) *AddMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMockRuleResponseBody) SetSuccess(v bool) *AddMockRuleResponseBody {
	s.Success = &v
	return s
}

func (s *AddMockRuleResponseBody) SetData(v *AddMockRuleResponseBodyData) *AddMockRuleResponseBody {
	s.Data = v
	return s
}

type AddMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s AddMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddMockRuleResponseBodyData) SetAccountId(v string) *AddMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetConsumerAppId(v string) *AddMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetConsumerAppName(v string) *AddMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetEnable(v bool) *AddMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetExtraJson(v string) *AddMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetId(v int64) *AddMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetName(v string) *AddMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetNamespaceId(v string) *AddMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetProviderAppId(v string) *AddMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetProviderAppName(v string) *AddMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetRegion(v string) *AddMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetScMockItemJson(v string) *AddMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *AddMockRuleResponseBodyData) SetSource(v string) *AddMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type AddMockRuleResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMockRuleResponse) GoString() string {
	return s.String()
}

func (s *AddMockRuleResponse) SetHeaders(v map[string]*string) *AddMockRuleResponse {
	s.Headers = v
	return s
}

func (s *AddMockRuleResponse) SetBody(v *AddMockRuleResponseBody) *AddMockRuleResponse {
	s.Body = v
	return s
}

type AddServiceTimeConfigQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Path            *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ServiceGroup    *string `json:"ServiceGroup,omitempty" xml:"ServiceGroup,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	ServiceType     *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty" require:"true"`
	ServiceVersion  *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Timeout         *string `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s AddServiceTimeConfigQuery) String() string {
	return tea.Prettify(s)
}

func (s AddServiceTimeConfigQuery) GoString() string {
	return s.String()
}

func (s *AddServiceTimeConfigQuery) SetAppId(v string) *AddServiceTimeConfigQuery {
	s.AppId = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetConsumerAppId(v string) *AddServiceTimeConfigQuery {
	s.ConsumerAppId = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetConsumerAppName(v string) *AddServiceTimeConfigQuery {
	s.ConsumerAppName = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetNamespace(v string) *AddServiceTimeConfigQuery {
	s.Namespace = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetPath(v string) *AddServiceTimeConfigQuery {
	s.Path = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetRegion(v string) *AddServiceTimeConfigQuery {
	s.Region = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetServiceGroup(v string) *AddServiceTimeConfigQuery {
	s.ServiceGroup = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetServiceName(v string) *AddServiceTimeConfigQuery {
	s.ServiceName = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetServiceType(v string) *AddServiceTimeConfigQuery {
	s.ServiceType = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetServiceVersion(v string) *AddServiceTimeConfigQuery {
	s.ServiceVersion = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetSource(v string) *AddServiceTimeConfigQuery {
	s.Source = &v
	return s
}

func (s *AddServiceTimeConfigQuery) SetTimeout(v string) *AddServiceTimeConfigQuery {
	s.Timeout = &v
	return s
}

type AddServiceTimeConfigRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *AddServiceTimeConfigQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s AddServiceTimeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s AddServiceTimeConfigRequest) GoString() string {
	return s.String()
}

func (s *AddServiceTimeConfigRequest) SetHeaders(v map[string]*string) *AddServiceTimeConfigRequest {
	s.Headers = v
	return s
}

func (s *AddServiceTimeConfigRequest) SetQuery(v *AddServiceTimeConfigQuery) *AddServiceTimeConfigRequest {
	s.Query = v
	return s
}

type AddServiceTimeConfigResponseBody struct {
	Code      *int                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *AddServiceTimeConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s AddServiceTimeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddServiceTimeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *AddServiceTimeConfigResponseBody) SetCode(v int) *AddServiceTimeConfigResponseBody {
	s.Code = &v
	return s
}

func (s *AddServiceTimeConfigResponseBody) SetMessage(v string) *AddServiceTimeConfigResponseBody {
	s.Message = &v
	return s
}

func (s *AddServiceTimeConfigResponseBody) SetRequestId(v string) *AddServiceTimeConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddServiceTimeConfigResponseBody) SetSuccess(v bool) *AddServiceTimeConfigResponseBody {
	s.Success = &v
	return s
}

func (s *AddServiceTimeConfigResponseBody) SetData(v *AddServiceTimeConfigResponseBodyData) *AddServiceTimeConfigResponseBody {
	s.Data = v
	return s
}

type AddServiceTimeConfigResponseBodyData struct {
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Path            *string `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	Timeout         *string `json:"Timeout,omitempty" xml:"Timeout,omitempty" require:"true"`
}

func (s AddServiceTimeConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddServiceTimeConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddServiceTimeConfigResponseBodyData) SetConsumerAppId(v string) *AddServiceTimeConfigResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *AddServiceTimeConfigResponseBodyData) SetConsumerAppName(v string) *AddServiceTimeConfigResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *AddServiceTimeConfigResponseBodyData) SetId(v int64) *AddServiceTimeConfigResponseBodyData {
	s.Id = &v
	return s
}

func (s *AddServiceTimeConfigResponseBodyData) SetPath(v string) *AddServiceTimeConfigResponseBodyData {
	s.Path = &v
	return s
}

func (s *AddServiceTimeConfigResponseBodyData) SetTimeout(v string) *AddServiceTimeConfigResponseBodyData {
	s.Timeout = &v
	return s
}

type AddServiceTimeConfigResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddServiceTimeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddServiceTimeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s AddServiceTimeConfigResponse) GoString() string {
	return s.String()
}

func (s *AddServiceTimeConfigResponse) SetHeaders(v map[string]*string) *AddServiceTimeConfigResponse {
	s.Headers = v
	return s
}

func (s *AddServiceTimeConfigResponse) SetBody(v *AddServiceTimeConfigResponseBody) *AddServiceTimeConfigResponse {
	s.Body = v
	return s
}

type AuthorizeApplicationQuery struct {
	AppIds       *string `json:"AppIds,omitempty" xml:"AppIds,omitempty" require:"true"`
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty" require:"true"`
}

func (s AuthorizeApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeApplicationQuery) GoString() string {
	return s.String()
}

func (s *AuthorizeApplicationQuery) SetAppIds(v string) *AuthorizeApplicationQuery {
	s.AppIds = &v
	return s
}

func (s *AuthorizeApplicationQuery) SetTargetUserId(v string) *AuthorizeApplicationQuery {
	s.TargetUserId = &v
	return s
}

type AuthorizeApplicationRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *AuthorizeApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s AuthorizeApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeApplicationRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeApplicationRequest) SetHeaders(v map[string]*string) *AuthorizeApplicationRequest {
	s.Headers = v
	return s
}

func (s *AuthorizeApplicationRequest) SetQuery(v *AuthorizeApplicationQuery) *AuthorizeApplicationRequest {
	s.Query = v
	return s
}

type AuthorizeApplicationResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AuthorizeApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeApplicationResponseBody) SetCode(v int) *AuthorizeApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *AuthorizeApplicationResponseBody) SetMessage(v string) *AuthorizeApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *AuthorizeApplicationResponseBody) SetRequestId(v string) *AuthorizeApplicationResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeApplicationResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeApplicationResponse) SetHeaders(v map[string]*string) *AuthorizeApplicationResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeApplicationResponse) SetBody(v *AuthorizeApplicationResponseBody) *AuthorizeApplicationResponse {
	s.Body = v
	return s
}

type AuthorizeResourceGroupQuery struct {
	ResourceGroupIds *string `json:"ResourceGroupIds,omitempty" xml:"ResourceGroupIds,omitempty" require:"true"`
	TargetUserId     *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty" require:"true"`
}

func (s AuthorizeResourceGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeResourceGroupQuery) GoString() string {
	return s.String()
}

func (s *AuthorizeResourceGroupQuery) SetResourceGroupIds(v string) *AuthorizeResourceGroupQuery {
	s.ResourceGroupIds = &v
	return s
}

func (s *AuthorizeResourceGroupQuery) SetTargetUserId(v string) *AuthorizeResourceGroupQuery {
	s.TargetUserId = &v
	return s
}

type AuthorizeResourceGroupRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *AuthorizeResourceGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s AuthorizeResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeResourceGroupRequest) SetHeaders(v map[string]*string) *AuthorizeResourceGroupRequest {
	s.Headers = v
	return s
}

func (s *AuthorizeResourceGroupRequest) SetQuery(v *AuthorizeResourceGroupQuery) *AuthorizeResourceGroupRequest {
	s.Query = v
	return s
}

type AuthorizeResourceGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AuthorizeResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeResourceGroupResponseBody) SetCode(v int) *AuthorizeResourceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *AuthorizeResourceGroupResponseBody) SetMessage(v string) *AuthorizeResourceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *AuthorizeResourceGroupResponseBody) SetRequestId(v string) *AuthorizeResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeResourceGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeResourceGroupResponse) SetHeaders(v map[string]*string) *AuthorizeResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeResourceGroupResponse) SetBody(v *AuthorizeResourceGroupResponseBody) *AuthorizeResourceGroupResponse {
	s.Body = v
	return s
}

type AuthorizeRoleQuery struct {
	RoleIds      *string `json:"RoleIds,omitempty" xml:"RoleIds,omitempty" require:"true"`
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty" require:"true"`
}

func (s AuthorizeRoleQuery) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeRoleQuery) GoString() string {
	return s.String()
}

func (s *AuthorizeRoleQuery) SetRoleIds(v string) *AuthorizeRoleQuery {
	s.RoleIds = &v
	return s
}

func (s *AuthorizeRoleQuery) SetTargetUserId(v string) *AuthorizeRoleQuery {
	s.TargetUserId = &v
	return s
}

type AuthorizeRoleRequest struct {
	Headers map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *AuthorizeRoleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s AuthorizeRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeRoleRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeRoleRequest) SetHeaders(v map[string]*string) *AuthorizeRoleRequest {
	s.Headers = v
	return s
}

func (s *AuthorizeRoleRequest) SetQuery(v *AuthorizeRoleQuery) *AuthorizeRoleRequest {
	s.Query = v
	return s
}

type AuthorizeRoleResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s AuthorizeRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeRoleResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeRoleResponseBody) SetCode(v int) *AuthorizeRoleResponseBody {
	s.Code = &v
	return s
}

func (s *AuthorizeRoleResponseBody) SetMessage(v string) *AuthorizeRoleResponseBody {
	s.Message = &v
	return s
}

func (s *AuthorizeRoleResponseBody) SetRequestId(v string) *AuthorizeRoleResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeRoleResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeRoleResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeRoleResponse) SetHeaders(v map[string]*string) *AuthorizeRoleResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeRoleResponse) SetBody(v *AuthorizeRoleResponseBody) *AuthorizeRoleResponse {
	s.Body = v
	return s
}

type BindEcsSlbQuery struct {
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	DeployGroupId          *string `json:"DeployGroupId,omitempty" xml:"DeployGroupId,omitempty"`
	ListenerHealthCheckUrl *string `json:"ListenerHealthCheckUrl,omitempty" xml:"ListenerHealthCheckUrl,omitempty"`
	ListenerPort           *int    `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty" require:"true"`
	ListenerProtocol       *string `json:"ListenerProtocol,omitempty" xml:"ListenerProtocol,omitempty" require:"true"`
	SlbId                  *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	VForwardingUrlRule     *string `json:"VForwardingUrlRule,omitempty" xml:"VForwardingUrlRule,omitempty"`
	VServerGroupId         *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty"`
	VServerGroupName       *string `json:"VServerGroupName,omitempty" xml:"VServerGroupName,omitempty"`
}

func (s BindEcsSlbQuery) String() string {
	return tea.Prettify(s)
}

func (s BindEcsSlbQuery) GoString() string {
	return s.String()
}

func (s *BindEcsSlbQuery) SetAppId(v string) *BindEcsSlbQuery {
	s.AppId = &v
	return s
}

func (s *BindEcsSlbQuery) SetDeployGroupId(v string) *BindEcsSlbQuery {
	s.DeployGroupId = &v
	return s
}

func (s *BindEcsSlbQuery) SetListenerHealthCheckUrl(v string) *BindEcsSlbQuery {
	s.ListenerHealthCheckUrl = &v
	return s
}

func (s *BindEcsSlbQuery) SetListenerPort(v int) *BindEcsSlbQuery {
	s.ListenerPort = &v
	return s
}

func (s *BindEcsSlbQuery) SetListenerProtocol(v string) *BindEcsSlbQuery {
	s.ListenerProtocol = &v
	return s
}

func (s *BindEcsSlbQuery) SetSlbId(v string) *BindEcsSlbQuery {
	s.SlbId = &v
	return s
}

func (s *BindEcsSlbQuery) SetVForwardingUrlRule(v string) *BindEcsSlbQuery {
	s.VForwardingUrlRule = &v
	return s
}

func (s *BindEcsSlbQuery) SetVServerGroupId(v string) *BindEcsSlbQuery {
	s.VServerGroupId = &v
	return s
}

func (s *BindEcsSlbQuery) SetVServerGroupName(v string) *BindEcsSlbQuery {
	s.VServerGroupName = &v
	return s
}

type BindEcsSlbRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *BindEcsSlbQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s BindEcsSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s BindEcsSlbRequest) GoString() string {
	return s.String()
}

func (s *BindEcsSlbRequest) SetHeaders(v map[string]*string) *BindEcsSlbRequest {
	s.Headers = v
	return s
}

func (s *BindEcsSlbRequest) SetQuery(v *BindEcsSlbQuery) *BindEcsSlbRequest {
	s.Query = v
	return s
}

type BindEcsSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s BindEcsSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindEcsSlbResponseBody) GoString() string {
	return s.String()
}

func (s *BindEcsSlbResponseBody) SetChangeOrderId(v string) *BindEcsSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *BindEcsSlbResponseBody) SetCode(v int) *BindEcsSlbResponseBody {
	s.Code = &v
	return s
}

func (s *BindEcsSlbResponseBody) SetMessage(v string) *BindEcsSlbResponseBody {
	s.Message = &v
	return s
}

func (s *BindEcsSlbResponseBody) SetRequestId(v string) *BindEcsSlbResponseBody {
	s.RequestId = &v
	return s
}

type BindEcsSlbResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindEcsSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindEcsSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s BindEcsSlbResponse) GoString() string {
	return s.String()
}

func (s *BindEcsSlbResponse) SetHeaders(v map[string]*string) *BindEcsSlbResponse {
	s.Headers = v
	return s
}

func (s *BindEcsSlbResponse) SetBody(v *BindEcsSlbResponseBody) *BindEcsSlbResponse {
	s.Body = v
	return s
}

type BindK8sSlbQuery struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Port             *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Scheduler        *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServicePortInfos *string `json:"ServicePortInfos,omitempty" xml:"ServicePortInfos,omitempty"`
	SlbId            *string `json:"SlbId,omitempty" xml:"SlbId,omitempty"`
	SlbProtocol      *string `json:"SlbProtocol,omitempty" xml:"SlbProtocol,omitempty"`
	Specification    *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	TargetPort       *string `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s BindK8sSlbQuery) String() string {
	return tea.Prettify(s)
}

func (s BindK8sSlbQuery) GoString() string {
	return s.String()
}

func (s *BindK8sSlbQuery) SetAppId(v string) *BindK8sSlbQuery {
	s.AppId = &v
	return s
}

func (s *BindK8sSlbQuery) SetClusterId(v string) *BindK8sSlbQuery {
	s.ClusterId = &v
	return s
}

func (s *BindK8sSlbQuery) SetPort(v string) *BindK8sSlbQuery {
	s.Port = &v
	return s
}

func (s *BindK8sSlbQuery) SetScheduler(v string) *BindK8sSlbQuery {
	s.Scheduler = &v
	return s
}

func (s *BindK8sSlbQuery) SetServicePortInfos(v string) *BindK8sSlbQuery {
	s.ServicePortInfos = &v
	return s
}

func (s *BindK8sSlbQuery) SetSlbId(v string) *BindK8sSlbQuery {
	s.SlbId = &v
	return s
}

func (s *BindK8sSlbQuery) SetSlbProtocol(v string) *BindK8sSlbQuery {
	s.SlbProtocol = &v
	return s
}

func (s *BindK8sSlbQuery) SetSpecification(v string) *BindK8sSlbQuery {
	s.Specification = &v
	return s
}

func (s *BindK8sSlbQuery) SetTargetPort(v string) *BindK8sSlbQuery {
	s.TargetPort = &v
	return s
}

func (s *BindK8sSlbQuery) SetType(v string) *BindK8sSlbQuery {
	s.Type = &v
	return s
}

type BindK8sSlbRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *BindK8sSlbQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s BindK8sSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s BindK8sSlbRequest) GoString() string {
	return s.String()
}

func (s *BindK8sSlbRequest) SetHeaders(v map[string]*string) *BindK8sSlbRequest {
	s.Headers = v
	return s
}

func (s *BindK8sSlbRequest) SetQuery(v *BindK8sSlbQuery) *BindK8sSlbRequest {
	s.Query = v
	return s
}

type BindK8sSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s BindK8sSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindK8sSlbResponseBody) GoString() string {
	return s.String()
}

func (s *BindK8sSlbResponseBody) SetChangeOrderId(v string) *BindK8sSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *BindK8sSlbResponseBody) SetCode(v int) *BindK8sSlbResponseBody {
	s.Code = &v
	return s
}

func (s *BindK8sSlbResponseBody) SetMessage(v string) *BindK8sSlbResponseBody {
	s.Message = &v
	return s
}

func (s *BindK8sSlbResponseBody) SetRequestId(v string) *BindK8sSlbResponseBody {
	s.RequestId = &v
	return s
}

type BindK8sSlbResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindK8sSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindK8sSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s BindK8sSlbResponse) GoString() string {
	return s.String()
}

func (s *BindK8sSlbResponse) SetHeaders(v map[string]*string) *BindK8sSlbResponse {
	s.Headers = v
	return s
}

func (s *BindK8sSlbResponse) SetBody(v *BindK8sSlbResponseBody) *BindK8sSlbResponse {
	s.Body = v
	return s
}

type BindSlbQuery struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ListenerPort   *int    `json:"ListenerPort,omitempty" xml:"ListenerPort,omitempty"`
	SlbId          *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	SlbIp          *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty" require:"true"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	VServerGroupId *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty"`
}

func (s BindSlbQuery) String() string {
	return tea.Prettify(s)
}

func (s BindSlbQuery) GoString() string {
	return s.String()
}

func (s *BindSlbQuery) SetAppId(v string) *BindSlbQuery {
	s.AppId = &v
	return s
}

func (s *BindSlbQuery) SetListenerPort(v int) *BindSlbQuery {
	s.ListenerPort = &v
	return s
}

func (s *BindSlbQuery) SetSlbId(v string) *BindSlbQuery {
	s.SlbId = &v
	return s
}

func (s *BindSlbQuery) SetSlbIp(v string) *BindSlbQuery {
	s.SlbIp = &v
	return s
}

func (s *BindSlbQuery) SetType(v string) *BindSlbQuery {
	s.Type = &v
	return s
}

func (s *BindSlbQuery) SetVServerGroupId(v string) *BindSlbQuery {
	s.VServerGroupId = &v
	return s
}

type BindSlbRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *BindSlbQuery      `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s BindSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s BindSlbRequest) GoString() string {
	return s.String()
}

func (s *BindSlbRequest) SetHeaders(v map[string]*string) *BindSlbRequest {
	s.Headers = v
	return s
}

func (s *BindSlbRequest) SetQuery(v *BindSlbQuery) *BindSlbRequest {
	s.Query = v
	return s
}

type BindSlbResponseBody struct {
	Code      *int                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *BindSlbResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s BindSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponseBody) GoString() string {
	return s.String()
}

func (s *BindSlbResponseBody) SetCode(v int) *BindSlbResponseBody {
	s.Code = &v
	return s
}

func (s *BindSlbResponseBody) SetMessage(v string) *BindSlbResponseBody {
	s.Message = &v
	return s
}

func (s *BindSlbResponseBody) SetRequestId(v string) *BindSlbResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindSlbResponseBody) SetData(v *BindSlbResponseBodyData) *BindSlbResponseBody {
	s.Data = v
	return s
}

type BindSlbResponseBodyData struct {
	ExtSlbId          *string `json:"ExtSlbId,omitempty" xml:"ExtSlbId,omitempty" require:"true"`
	ExtSlbIp          *string `json:"ExtSlbIp,omitempty" xml:"ExtSlbIp,omitempty" require:"true"`
	ExtSlbName        *string `json:"ExtSlbName,omitempty" xml:"ExtSlbName,omitempty" require:"true"`
	ExtVServerGroupId *string `json:"ExtVServerGroupId,omitempty" xml:"ExtVServerGroupId,omitempty" require:"true"`
	SlbId             *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	SlbIp             *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty" require:"true"`
	SlbName           *string `json:"SlbName,omitempty" xml:"SlbName,omitempty" require:"true"`
	SlbPort           *int    `json:"SlbPort,omitempty" xml:"SlbPort,omitempty" require:"true"`
	VServerGroupId    *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty" require:"true"`
}

func (s BindSlbResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponseBodyData) GoString() string {
	return s.String()
}

func (s *BindSlbResponseBodyData) SetExtSlbId(v string) *BindSlbResponseBodyData {
	s.ExtSlbId = &v
	return s
}

func (s *BindSlbResponseBodyData) SetExtSlbIp(v string) *BindSlbResponseBodyData {
	s.ExtSlbIp = &v
	return s
}

func (s *BindSlbResponseBodyData) SetExtSlbName(v string) *BindSlbResponseBodyData {
	s.ExtSlbName = &v
	return s
}

func (s *BindSlbResponseBodyData) SetExtVServerGroupId(v string) *BindSlbResponseBodyData {
	s.ExtVServerGroupId = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbId(v string) *BindSlbResponseBodyData {
	s.SlbId = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbIp(v string) *BindSlbResponseBodyData {
	s.SlbIp = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbName(v string) *BindSlbResponseBodyData {
	s.SlbName = &v
	return s
}

func (s *BindSlbResponseBodyData) SetSlbPort(v int) *BindSlbResponseBodyData {
	s.SlbPort = &v
	return s
}

func (s *BindSlbResponseBodyData) SetVServerGroupId(v string) *BindSlbResponseBodyData {
	s.VServerGroupId = &v
	return s
}

type BindSlbResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s BindSlbResponse) GoString() string {
	return s.String()
}

func (s *BindSlbResponse) SetHeaders(v map[string]*string) *BindSlbResponse {
	s.Headers = v
	return s
}

func (s *BindSlbResponse) SetBody(v *BindSlbResponseBody) *BindSlbResponse {
	s.Body = v
	return s
}

type ChangeDeployGroupQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EccInfo     *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty" require:"true"`
	ForceStatus *bool   `json:"ForceStatus,omitempty" xml:"ForceStatus,omitempty"`
	GroupName   *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
}

func (s ChangeDeployGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s ChangeDeployGroupQuery) GoString() string {
	return s.String()
}

func (s *ChangeDeployGroupQuery) SetAppId(v string) *ChangeDeployGroupQuery {
	s.AppId = &v
	return s
}

func (s *ChangeDeployGroupQuery) SetEccInfo(v string) *ChangeDeployGroupQuery {
	s.EccInfo = &v
	return s
}

func (s *ChangeDeployGroupQuery) SetForceStatus(v bool) *ChangeDeployGroupQuery {
	s.ForceStatus = &v
	return s
}

func (s *ChangeDeployGroupQuery) SetGroupName(v string) *ChangeDeployGroupQuery {
	s.GroupName = &v
	return s
}

type ChangeDeployGroupRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ChangeDeployGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ChangeDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ChangeDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *ChangeDeployGroupRequest) SetHeaders(v map[string]*string) *ChangeDeployGroupRequest {
	s.Headers = v
	return s
}

func (s *ChangeDeployGroupRequest) SetQuery(v *ChangeDeployGroupQuery) *ChangeDeployGroupRequest {
	s.Query = v
	return s
}

type ChangeDeployGroupResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ChangeDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ChangeDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ChangeDeployGroupResponseBody) SetChangeOrderId(v string) *ChangeDeployGroupResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ChangeDeployGroupResponseBody) SetCode(v int) *ChangeDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ChangeDeployGroupResponseBody) SetMessage(v string) *ChangeDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ChangeDeployGroupResponseBody) SetRequestId(v string) *ChangeDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

type ChangeDeployGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ChangeDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ChangeDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ChangeDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *ChangeDeployGroupResponse) SetHeaders(v map[string]*string) *ChangeDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *ChangeDeployGroupResponse) SetBody(v *ChangeDeployGroupResponseBody) *ChangeDeployGroupResponse {
	s.Body = v
	return s
}

type ContinuePipelineQuery struct {
	Confirm    *bool   `json:"Confirm,omitempty" xml:"Confirm,omitempty"`
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty" require:"true"`
}

func (s ContinuePipelineQuery) String() string {
	return tea.Prettify(s)
}

func (s ContinuePipelineQuery) GoString() string {
	return s.String()
}

func (s *ContinuePipelineQuery) SetConfirm(v bool) *ContinuePipelineQuery {
	s.Confirm = &v
	return s
}

func (s *ContinuePipelineQuery) SetPipelineId(v string) *ContinuePipelineQuery {
	s.PipelineId = &v
	return s
}

type ContinuePipelineRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ContinuePipelineQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ContinuePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s ContinuePipelineRequest) GoString() string {
	return s.String()
}

func (s *ContinuePipelineRequest) SetHeaders(v map[string]*string) *ContinuePipelineRequest {
	s.Headers = v
	return s
}

func (s *ContinuePipelineRequest) SetQuery(v *ContinuePipelineQuery) *ContinuePipelineRequest {
	s.Query = v
	return s
}

type ContinuePipelineResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ContinuePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ContinuePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *ContinuePipelineResponseBody) SetCode(v int) *ContinuePipelineResponseBody {
	s.Code = &v
	return s
}

func (s *ContinuePipelineResponseBody) SetMessage(v string) *ContinuePipelineResponseBody {
	s.Message = &v
	return s
}

func (s *ContinuePipelineResponseBody) SetRequestId(v string) *ContinuePipelineResponseBody {
	s.RequestId = &v
	return s
}

type ContinuePipelineResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ContinuePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ContinuePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s ContinuePipelineResponse) GoString() string {
	return s.String()
}

func (s *ContinuePipelineResponse) SetHeaders(v map[string]*string) *ContinuePipelineResponse {
	s.Headers = v
	return s
}

func (s *ContinuePipelineResponse) SetBody(v *ContinuePipelineResponseBody) *ContinuePipelineResponse {
	s.Body = v
	return s
}

type ConvertK8sResourceQuery struct {
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Namespace    *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	ResourceName *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
}

func (s ConvertK8sResourceQuery) String() string {
	return tea.Prettify(s)
}

func (s ConvertK8sResourceQuery) GoString() string {
	return s.String()
}

func (s *ConvertK8sResourceQuery) SetClusterId(v string) *ConvertK8sResourceQuery {
	s.ClusterId = &v
	return s
}

func (s *ConvertK8sResourceQuery) SetNamespace(v string) *ConvertK8sResourceQuery {
	s.Namespace = &v
	return s
}

func (s *ConvertK8sResourceQuery) SetResourceName(v string) *ConvertK8sResourceQuery {
	s.ResourceName = &v
	return s
}

func (s *ConvertK8sResourceQuery) SetResourceType(v string) *ConvertK8sResourceQuery {
	s.ResourceType = &v
	return s
}

type ConvertK8sResourceRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ConvertK8sResourceQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ConvertK8sResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ConvertK8sResourceRequest) GoString() string {
	return s.String()
}

func (s *ConvertK8sResourceRequest) SetHeaders(v map[string]*string) *ConvertK8sResourceRequest {
	s.Headers = v
	return s
}

func (s *ConvertK8sResourceRequest) SetQuery(v *ConvertK8sResourceQuery) *ConvertK8sResourceRequest {
	s.Query = v
	return s
}

type ConvertK8sResourceResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ConvertK8sResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConvertK8sResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ConvertK8sResourceResponseBody) SetCode(v int) *ConvertK8sResourceResponseBody {
	s.Code = &v
	return s
}

func (s *ConvertK8sResourceResponseBody) SetMessage(v string) *ConvertK8sResourceResponseBody {
	s.Message = &v
	return s
}

func (s *ConvertK8sResourceResponseBody) SetRequestId(v string) *ConvertK8sResourceResponseBody {
	s.RequestId = &v
	return s
}

type ConvertK8sResourceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ConvertK8sResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ConvertK8sResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ConvertK8sResourceResponse) GoString() string {
	return s.String()
}

func (s *ConvertK8sResourceResponse) SetHeaders(v map[string]*string) *ConvertK8sResourceResponse {
	s.Headers = v
	return s
}

func (s *ConvertK8sResourceResponse) SetBody(v *ConvertK8sResourceResponseBody) *ConvertK8sResourceResponse {
	s.Body = v
	return s
}

type CreateApplicationScalingRuleQuery struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleEnable  *bool   `json:"ScalingRuleEnable,omitempty" xml:"ScalingRuleEnable,omitempty"`
	ScalingRuleMetric  *string `json:"ScalingRuleMetric,omitempty" xml:"ScalingRuleMetric,omitempty"`
	ScalingRuleName    *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	ScalingRuleTimer   *string `json:"ScalingRuleTimer,omitempty" xml:"ScalingRuleTimer,omitempty"`
	ScalingRuleTrigger *string `json:"ScalingRuleTrigger,omitempty" xml:"ScalingRuleTrigger,omitempty"`
	ScalingRuleType    *string `json:"ScalingRuleType,omitempty" xml:"ScalingRuleType,omitempty"`
}

func (s CreateApplicationScalingRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleQuery) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleQuery) SetAppId(v string) *CreateApplicationScalingRuleQuery {
	s.AppId = &v
	return s
}

func (s *CreateApplicationScalingRuleQuery) SetScalingRuleEnable(v bool) *CreateApplicationScalingRuleQuery {
	s.ScalingRuleEnable = &v
	return s
}

func (s *CreateApplicationScalingRuleQuery) SetScalingRuleMetric(v string) *CreateApplicationScalingRuleQuery {
	s.ScalingRuleMetric = &v
	return s
}

func (s *CreateApplicationScalingRuleQuery) SetScalingRuleName(v string) *CreateApplicationScalingRuleQuery {
	s.ScalingRuleName = &v
	return s
}

func (s *CreateApplicationScalingRuleQuery) SetScalingRuleTimer(v string) *CreateApplicationScalingRuleQuery {
	s.ScalingRuleTimer = &v
	return s
}

func (s *CreateApplicationScalingRuleQuery) SetScalingRuleTrigger(v string) *CreateApplicationScalingRuleQuery {
	s.ScalingRuleTrigger = &v
	return s
}

func (s *CreateApplicationScalingRuleQuery) SetScalingRuleType(v string) *CreateApplicationScalingRuleQuery {
	s.ScalingRuleType = &v
	return s
}

type CreateApplicationScalingRuleRequest struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *CreateApplicationScalingRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s CreateApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleRequest) SetHeaders(v map[string]*string) *CreateApplicationScalingRuleRequest {
	s.Headers = v
	return s
}

func (s *CreateApplicationScalingRuleRequest) SetQuery(v *CreateApplicationScalingRuleQuery) *CreateApplicationScalingRuleRequest {
	s.Query = v
	return s
}

type CreateApplicationScalingRuleResponseBody struct {
	Code           *int                                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message        *string                                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AppScalingRule *CreateApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" require:"true" type:"Struct"`
}

func (s CreateApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBody) SetCode(v int) *CreateApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetMessage(v string) *CreateApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetRequestId(v string) *CreateApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBody) SetAppScalingRule(v *CreateApplicationScalingRuleResponseBodyAppScalingRule) *CreateApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                        `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime       *int64                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastDisableTime  *int64                                                         `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty" require:"true"`
	MaxReplicas      *int                                                           `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas      *int                                                           `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	ScaleRuleEnabled *bool                                                          `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty" require:"true"`
	ScaleRuleName    *string                                                        `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty" require:"true"`
	ScaleRuleType    *string                                                        `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty" require:"true"`
	UpdateTime       *int64                                                         `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	Metric           *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" require:"true" type:"Struct"`
	Trigger          *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" require:"true" type:"Struct"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *CreateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int                                                                   `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                   `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Metrics     []*CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" require:"true" type:"Repeated"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int    `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty" require:"true"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty" require:"true"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int                                                                     `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                     `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Triggers    []*CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" require:"true" type:"Repeated"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *CreateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type CreateApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *CreateApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateApplicationScalingRuleResponse) SetBody(v *CreateApplicationScalingRuleResponseBody) *CreateApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type CreateApplicationTemplateBody struct {
	Attributes         *string `json:"Attributes,omitempty" xml:"Attributes,omitempty"`
	Command            *string `json:"Command,omitempty" xml:"Command,omitempty"`
	CommandArgs        *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	ConfigMountDescs   *string `json:"ConfigMountDescs,omitempty" xml:"ConfigMountDescs,omitempty"`
	DeployAcrossNodes  *bool   `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty"`
	DeployAcrossZones  *bool   `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty"`
	Description        *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EmptyDirs          *string `json:"EmptyDirs,omitempty" xml:"EmptyDirs,omitempty"`
	EnableAhas         *bool   `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	EnvFroms           *string `json:"EnvFroms,omitempty" xml:"EnvFroms,omitempty"`
	Envs               *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	ImageConfig        *string `json:"ImageConfig,omitempty" xml:"ImageConfig,omitempty"`
	IsMultilingualApp  *bool   `json:"IsMultilingualApp,omitempty" xml:"IsMultilingualApp,omitempty"`
	JavaStartUpConfig  *string `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty"`
	LimitCpu           *string `json:"LimitCpu,omitempty" xml:"LimitCpu,omitempty"`
	LimitMem           *string `json:"LimitMem,omitempty" xml:"LimitMem,omitempty"`
	Liveness           *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	LocalVolumes       *string `json:"LocalVolumes,omitempty" xml:"LocalVolumes,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NasId              *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	NasMountDescs      *string `json:"NasMountDescs,omitempty" xml:"NasMountDescs,omitempty"`
	NasStorageType     *string `json:"NasStorageType,omitempty" xml:"NasStorageType,omitempty"`
	PackageConfig      *string `json:"PackageConfig,omitempty" xml:"PackageConfig,omitempty"`
	PostStart          *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	PreStop            *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	PvcMountDescs      *string `json:"PvcMountDescs,omitempty" xml:"PvcMountDescs,omitempty"`
	Readiness          *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	Replicas           *int64  `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	RequestCpu         *string `json:"RequestCpu,omitempty" xml:"RequestCpu,omitempty"`
	RequestMem         *string `json:"RequestMem,omitempty" xml:"RequestMem,omitempty"`
	RuntimeClassName   *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty"`
	ShowName           *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	SlsConfigs         *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	SourceConfig       *string `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty"`
	WebContainerConfig *string `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty"`
}

func (s CreateApplicationTemplateBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationTemplateBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationTemplateBody) SetAttributes(v string) *CreateApplicationTemplateBody {
	s.Attributes = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetCommand(v string) *CreateApplicationTemplateBody {
	s.Command = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetCommandArgs(v string) *CreateApplicationTemplateBody {
	s.CommandArgs = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetConfigMountDescs(v string) *CreateApplicationTemplateBody {
	s.ConfigMountDescs = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetDeployAcrossNodes(v bool) *CreateApplicationTemplateBody {
	s.DeployAcrossNodes = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetDeployAcrossZones(v bool) *CreateApplicationTemplateBody {
	s.DeployAcrossZones = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetDescription(v string) *CreateApplicationTemplateBody {
	s.Description = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetEmptyDirs(v string) *CreateApplicationTemplateBody {
	s.EmptyDirs = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetEnableAhas(v bool) *CreateApplicationTemplateBody {
	s.EnableAhas = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetEnvFroms(v string) *CreateApplicationTemplateBody {
	s.EnvFroms = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetEnvs(v string) *CreateApplicationTemplateBody {
	s.Envs = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetImageConfig(v string) *CreateApplicationTemplateBody {
	s.ImageConfig = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetIsMultilingualApp(v bool) *CreateApplicationTemplateBody {
	s.IsMultilingualApp = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetJavaStartUpConfig(v string) *CreateApplicationTemplateBody {
	s.JavaStartUpConfig = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetLimitCpu(v string) *CreateApplicationTemplateBody {
	s.LimitCpu = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetLimitMem(v string) *CreateApplicationTemplateBody {
	s.LimitMem = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetLiveness(v string) *CreateApplicationTemplateBody {
	s.Liveness = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetLocalVolumes(v string) *CreateApplicationTemplateBody {
	s.LocalVolumes = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetName(v string) *CreateApplicationTemplateBody {
	s.Name = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetNasId(v string) *CreateApplicationTemplateBody {
	s.NasId = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetNasMountDescs(v string) *CreateApplicationTemplateBody {
	s.NasMountDescs = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetNasStorageType(v string) *CreateApplicationTemplateBody {
	s.NasStorageType = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetPackageConfig(v string) *CreateApplicationTemplateBody {
	s.PackageConfig = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetPostStart(v string) *CreateApplicationTemplateBody {
	s.PostStart = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetPreStop(v string) *CreateApplicationTemplateBody {
	s.PreStop = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetPvcMountDescs(v string) *CreateApplicationTemplateBody {
	s.PvcMountDescs = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetReadiness(v string) *CreateApplicationTemplateBody {
	s.Readiness = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetReplicas(v int64) *CreateApplicationTemplateBody {
	s.Replicas = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetRequestCpu(v string) *CreateApplicationTemplateBody {
	s.RequestCpu = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetRequestMem(v string) *CreateApplicationTemplateBody {
	s.RequestMem = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetRuntimeClassName(v string) *CreateApplicationTemplateBody {
	s.RuntimeClassName = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetShowName(v string) *CreateApplicationTemplateBody {
	s.ShowName = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetSlsConfigs(v string) *CreateApplicationTemplateBody {
	s.SlsConfigs = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetSourceConfig(v string) *CreateApplicationTemplateBody {
	s.SourceConfig = &v
	return s
}

func (s *CreateApplicationTemplateBody) SetWebContainerConfig(v string) *CreateApplicationTemplateBody {
	s.WebContainerConfig = &v
	return s
}

type CreateApplicationTemplateRequest struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateApplicationTemplateBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApplicationTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateApplicationTemplateRequest) SetHeaders(v map[string]*string) *CreateApplicationTemplateRequest {
	s.Headers = v
	return s
}

func (s *CreateApplicationTemplateRequest) SetBody(v *CreateApplicationTemplateBody) *CreateApplicationTemplateRequest {
	s.Body = v
	return s
}

type CreateApplicationTemplateResponseBody struct {
	Code      *int                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                    `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *CreateApplicationTemplateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateApplicationTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateApplicationTemplateResponseBody) SetCode(v int) *CreateApplicationTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *CreateApplicationTemplateResponseBody) SetMessage(v string) *CreateApplicationTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *CreateApplicationTemplateResponseBody) SetRequestId(v string) *CreateApplicationTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateApplicationTemplateResponseBody) SetData(v *CreateApplicationTemplateResponseBodyData) *CreateApplicationTemplateResponseBody {
	s.Data = v
	return s
}

type CreateApplicationTemplateResponseBodyData struct {
	Attributes   map[string]interface{}                                 `json:"Attributes,omitempty" xml:"Attributes,omitempty" require:"true"`
	Description  *string                                                `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Id           *int64                                                 `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name         *string                                                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ShowName     *string                                                `json:"ShowName,omitempty" xml:"ShowName,omitempty" require:"true"`
	SourceConfig *CreateApplicationTemplateResponseBodyDataSourceConfig `json:"SourceConfig,omitempty" xml:"SourceConfig,omitempty" require:"true" type:"Struct"`
}

func (s CreateApplicationTemplateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationTemplateResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateApplicationTemplateResponseBodyData) SetAttributes(v map[string]interface{}) *CreateApplicationTemplateResponseBodyData {
	s.Attributes = v
	return s
}

func (s *CreateApplicationTemplateResponseBodyData) SetDescription(v string) *CreateApplicationTemplateResponseBodyData {
	s.Description = &v
	return s
}

func (s *CreateApplicationTemplateResponseBodyData) SetId(v int64) *CreateApplicationTemplateResponseBodyData {
	s.Id = &v
	return s
}

func (s *CreateApplicationTemplateResponseBodyData) SetName(v string) *CreateApplicationTemplateResponseBodyData {
	s.Name = &v
	return s
}

func (s *CreateApplicationTemplateResponseBodyData) SetShowName(v string) *CreateApplicationTemplateResponseBodyData {
	s.ShowName = &v
	return s
}

func (s *CreateApplicationTemplateResponseBodyData) SetSourceConfig(v *CreateApplicationTemplateResponseBodyDataSourceConfig) *CreateApplicationTemplateResponseBodyData {
	s.SourceConfig = v
	return s
}

type CreateApplicationTemplateResponseBodyDataSourceConfig struct {
	SourceUrl *string `json:"SourceUrl,omitempty" xml:"SourceUrl,omitempty" require:"true"`
}

func (s CreateApplicationTemplateResponseBodyDataSourceConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationTemplateResponseBodyDataSourceConfig) GoString() string {
	return s.String()
}

func (s *CreateApplicationTemplateResponseBodyDataSourceConfig) SetSourceUrl(v string) *CreateApplicationTemplateResponseBodyDataSourceConfig {
	s.SourceUrl = &v
	return s
}

type CreateApplicationTemplateResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateApplicationTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateApplicationTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateApplicationTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateApplicationTemplateResponse) SetHeaders(v map[string]*string) *CreateApplicationTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateApplicationTemplateResponse) SetBody(v *CreateApplicationTemplateResponseBody) *CreateApplicationTemplateResponse {
	s.Body = v
	return s
}

type CreateConfigTemplateBody struct {
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Format      *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateConfigTemplateBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateBody) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateBody) SetContent(v string) *CreateConfigTemplateBody {
	s.Content = &v
	return s
}

func (s *CreateConfigTemplateBody) SetDescription(v string) *CreateConfigTemplateBody {
	s.Description = &v
	return s
}

func (s *CreateConfigTemplateBody) SetFormat(v string) *CreateConfigTemplateBody {
	s.Format = &v
	return s
}

func (s *CreateConfigTemplateBody) SetName(v string) *CreateConfigTemplateBody {
	s.Name = &v
	return s
}

type CreateConfigTemplateRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateConfigTemplateBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateRequest) SetHeaders(v map[string]*string) *CreateConfigTemplateRequest {
	s.Headers = v
	return s
}

func (s *CreateConfigTemplateRequest) SetBody(v *CreateConfigTemplateBody) *CreateConfigTemplateRequest {
	s.Body = v
	return s
}

type CreateConfigTemplateResponseBody struct {
	Code      *int                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *CreateConfigTemplateResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateConfigTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateResponseBody) SetCode(v int) *CreateConfigTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *CreateConfigTemplateResponseBody) SetMessage(v string) *CreateConfigTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *CreateConfigTemplateResponseBody) SetRequestId(v string) *CreateConfigTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConfigTemplateResponseBody) SetData(v *CreateConfigTemplateResponseBodyData) *CreateConfigTemplateResponseBody {
	s.Data = v
	return s
}

type CreateConfigTemplateResponseBodyData struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s CreateConfigTemplateResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateResponseBodyData) SetId(v int64) *CreateConfigTemplateResponseBodyData {
	s.Id = &v
	return s
}

type CreateConfigTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateConfigTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateConfigTemplateResponse) SetHeaders(v map[string]*string) *CreateConfigTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateConfigTemplateResponse) SetBody(v *CreateConfigTemplateResponseBody) *CreateConfigTemplateResponse {
	s.Body = v
	return s
}

type CreateEnvAppGroupBody struct {
	PointcutName *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
	Scopes       *string `json:"Scopes,omitempty" xml:"Scopes,omitempty"`
}

func (s CreateEnvAppGroupBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvAppGroupBody) GoString() string {
	return s.String()
}

func (s *CreateEnvAppGroupBody) SetPointcutName(v string) *CreateEnvAppGroupBody {
	s.PointcutName = &v
	return s
}

func (s *CreateEnvAppGroupBody) SetScopes(v string) *CreateEnvAppGroupBody {
	s.Scopes = &v
	return s
}

type CreateEnvAppGroupRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateEnvAppGroupBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnvAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvAppGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateEnvAppGroupRequest) SetHeaders(v map[string]*string) *CreateEnvAppGroupRequest {
	s.Headers = v
	return s
}

func (s *CreateEnvAppGroupRequest) SetBody(v *CreateEnvAppGroupBody) *CreateEnvAppGroupRequest {
	s.Body = v
	return s
}

type CreateEnvAppGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateEnvAppGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvAppGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnvAppGroupResponseBody) SetCode(v int) *CreateEnvAppGroupResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnvAppGroupResponseBody) SetMessage(v string) *CreateEnvAppGroupResponseBody {
	s.Message = &v
	return s
}

func (s *CreateEnvAppGroupResponseBody) SetRequestId(v string) *CreateEnvAppGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateEnvAppGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEnvAppGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEnvAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvAppGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateEnvAppGroupResponse) SetHeaders(v map[string]*string) *CreateEnvAppGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateEnvAppGroupResponse) SetBody(v *CreateEnvAppGroupResponseBody) *CreateEnvAppGroupResponse {
	s.Body = v
	return s
}

type CreateEnvHsfTrafficControlBody struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Condition       *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Group           *string `json:"Group,omitempty" xml:"Group,omitempty"`
	LabelAdviceName *string `json:"LabelAdviceName,omitempty" xml:"LabelAdviceName,omitempty"`
	MethodName      *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	ParamTypes      *string `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	TriggerPolicy   *string `json:"TriggerPolicy,omitempty" xml:"TriggerPolicy,omitempty"`
}

func (s CreateEnvHsfTrafficControlBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlBody) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlBody) SetAppId(v string) *CreateEnvHsfTrafficControlBody {
	s.AppId = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetCondition(v string) *CreateEnvHsfTrafficControlBody {
	s.Condition = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetGroup(v string) *CreateEnvHsfTrafficControlBody {
	s.Group = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetLabelAdviceName(v string) *CreateEnvHsfTrafficControlBody {
	s.LabelAdviceName = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetMethodName(v string) *CreateEnvHsfTrafficControlBody {
	s.MethodName = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetParamTypes(v string) *CreateEnvHsfTrafficControlBody {
	s.ParamTypes = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetPointcutName(v string) *CreateEnvHsfTrafficControlBody {
	s.PointcutName = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetServiceName(v string) *CreateEnvHsfTrafficControlBody {
	s.ServiceName = &v
	return s
}

func (s *CreateEnvHsfTrafficControlBody) SetTriggerPolicy(v string) *CreateEnvHsfTrafficControlBody {
	s.TriggerPolicy = &v
	return s
}

type CreateEnvHsfTrafficControlRequest struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateEnvHsfTrafficControlBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnvHsfTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlRequest) SetHeaders(v map[string]*string) *CreateEnvHsfTrafficControlRequest {
	s.Headers = v
	return s
}

func (s *CreateEnvHsfTrafficControlRequest) SetBody(v *CreateEnvHsfTrafficControlBody) *CreateEnvHsfTrafficControlRequest {
	s.Body = v
	return s
}

type CreateEnvHsfTrafficControlResponseBody struct {
	Code      *int                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *CreateEnvHsfTrafficControlResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateEnvHsfTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlResponseBody) SetCode(v int) *CreateEnvHsfTrafficControlResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBody) SetMessage(v string) *CreateEnvHsfTrafficControlResponseBody {
	s.Message = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBody) SetRequestId(v string) *CreateEnvHsfTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBody) SetData(v *CreateEnvHsfTrafficControlResponseBodyData) *CreateEnvHsfTrafficControlResponseBody {
	s.Data = v
	return s
}

type CreateEnvHsfTrafficControlResponseBodyData struct {
	AppId         *string                                             `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Kind          *string                                             `json:"Kind,omitempty" xml:"Kind,omitempty" require:"true"`
	LabelAdviceId *int64                                              `json:"LabelAdviceId,omitempty" xml:"LabelAdviceId,omitempty" require:"true"`
	LabelType     *string                                             `json:"LabelType,omitempty" xml:"LabelType,omitempty" require:"true"`
	PointcutId    *int64                                              `json:"PointcutId,omitempty" xml:"PointcutId,omitempty" require:"true"`
	RegionId      *string                                             `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Metadata      *CreateEnvHsfTrafficControlResponseBodyDataMetadata `json:"Metadata,omitempty" xml:"Metadata,omitempty" require:"true" type:"Struct"`
}

func (s CreateEnvHsfTrafficControlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlResponseBodyData) SetAppId(v string) *CreateEnvHsfTrafficControlResponseBodyData {
	s.AppId = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyData) SetKind(v string) *CreateEnvHsfTrafficControlResponseBodyData {
	s.Kind = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyData) SetLabelAdviceId(v int64) *CreateEnvHsfTrafficControlResponseBodyData {
	s.LabelAdviceId = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyData) SetLabelType(v string) *CreateEnvHsfTrafficControlResponseBodyData {
	s.LabelType = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyData) SetPointcutId(v int64) *CreateEnvHsfTrafficControlResponseBodyData {
	s.PointcutId = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyData) SetRegionId(v string) *CreateEnvHsfTrafficControlResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyData) SetMetadata(v *CreateEnvHsfTrafficControlResponseBodyDataMetadata) *CreateEnvHsfTrafficControlResponseBodyData {
	s.Metadata = v
	return s
}

type CreateEnvHsfTrafficControlResponseBodyDataMetadata struct {
	Labels    map[string]interface{}                                  `json:"Labels,omitempty" xml:"Labels,omitempty" require:"true"`
	Name      *string                                                 `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace *string                                                 `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	Spec      *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true" type:"Struct"`
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadata) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadata) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadata) SetLabels(v map[string]interface{}) *CreateEnvHsfTrafficControlResponseBodyDataMetadata {
	s.Labels = v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadata) SetName(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadata {
	s.Name = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadata) SetNamespace(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadata {
	s.Namespace = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadata) SetSpec(v *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) *CreateEnvHsfTrafficControlResponseBodyDataMetadata {
	s.Spec = v
	return s
}

type CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec struct {
	ConditionType *string                                                             `json:"ConditionType,omitempty" xml:"ConditionType,omitempty" require:"true"`
	Enable        *bool                                                               `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	Group         *string                                                             `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	MethodName    *string                                                             `json:"MethodName,omitempty" xml:"MethodName,omitempty" require:"true"`
	Order         *int64                                                              `json:"Order,omitempty" xml:"Order,omitempty" require:"true"`
	Percent       *int                                                                `json:"Percent,omitempty" xml:"Percent,omitempty" require:"true"`
	Selector      map[string]interface{}                                              `json:"Selector,omitempty" xml:"Selector,omitempty" require:"true"`
	ServiceName   *string                                                             `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	TriggerPolicy *string                                                             `json:"TriggerPolicy,omitempty" xml:"TriggerPolicy,omitempty" require:"true"`
	Type          *string                                                             `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Conditions    []*CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" require:"true" type:"Repeated"`
	Purposes      []*CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecPurposes   `json:"Purposes,omitempty" xml:"Purposes,omitempty" require:"true" type:"Repeated"`
	ParamTypes    []*string                                                           `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" require:"true" type:"Repeated"`
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetConditionType(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.ConditionType = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetEnable(v bool) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Enable = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetGroup(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Group = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetMethodName(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.MethodName = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetOrder(v int64) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Order = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetPercent(v int) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Percent = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetSelector(v map[string]interface{}) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Selector = v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetServiceName(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.ServiceName = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetTriggerPolicy(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.TriggerPolicy = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetType(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Type = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetConditions(v []*CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Conditions = v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetPurposes(v []*CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecPurposes) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.Purposes = v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec) SetParamTypes(v []*string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpec {
	s.ParamTypes = v
	return s
}

type CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions struct {
	Id       *int64    `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Index    *int      `json:"Index,omitempty" xml:"Index,omitempty" require:"true"`
	Key      *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Operator *string   `json:"Operator,omitempty" xml:"Operator,omitempty" require:"true"`
	Strategy *string   `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
	Type     *string   `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Values   []*string `json:"Values,omitempty" xml:"Values,omitempty" require:"true" type:"Repeated"`
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) SetId(v int64) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions {
	s.Id = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) SetIndex(v int) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions {
	s.Index = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) SetKey(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions {
	s.Key = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) SetOperator(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions {
	s.Operator = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) SetStrategy(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions {
	s.Strategy = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) SetType(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions {
	s.Type = &v
	return s
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions) SetValues(v []*string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecConditions {
	s.Values = v
	return s
}

type CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecPurposes struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecPurposes) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecPurposes) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecPurposes) SetType(v string) *CreateEnvHsfTrafficControlResponseBodyDataMetadataSpecPurposes {
	s.Type = &v
	return s
}

type CreateEnvHsfTrafficControlResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEnvHsfTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEnvHsfTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHsfTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *CreateEnvHsfTrafficControlResponse) SetHeaders(v map[string]*string) *CreateEnvHsfTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *CreateEnvHsfTrafficControlResponse) SetBody(v *CreateEnvHsfTrafficControlResponseBody) *CreateEnvHsfTrafficControlResponse {
	s.Body = v
	return s
}

type CreateEnvHttpTrafficControlBody struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Condition       *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	LabelAdviceName *string `json:"LabelAdviceName,omitempty" xml:"LabelAdviceName,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
	TriggerPolicy   *string `json:"TriggerPolicy,omitempty" xml:"TriggerPolicy,omitempty"`
	UrlPath         *string `json:"UrlPath,omitempty" xml:"UrlPath,omitempty"`
}

func (s CreateEnvHttpTrafficControlBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlBody) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlBody) SetAppId(v string) *CreateEnvHttpTrafficControlBody {
	s.AppId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlBody) SetCondition(v string) *CreateEnvHttpTrafficControlBody {
	s.Condition = &v
	return s
}

func (s *CreateEnvHttpTrafficControlBody) SetLabelAdviceName(v string) *CreateEnvHttpTrafficControlBody {
	s.LabelAdviceName = &v
	return s
}

func (s *CreateEnvHttpTrafficControlBody) SetPointcutName(v string) *CreateEnvHttpTrafficControlBody {
	s.PointcutName = &v
	return s
}

func (s *CreateEnvHttpTrafficControlBody) SetTriggerPolicy(v string) *CreateEnvHttpTrafficControlBody {
	s.TriggerPolicy = &v
	return s
}

func (s *CreateEnvHttpTrafficControlBody) SetUrlPath(v string) *CreateEnvHttpTrafficControlBody {
	s.UrlPath = &v
	return s
}

type CreateEnvHttpTrafficControlRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateEnvHttpTrafficControlBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEnvHttpTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlRequest) SetHeaders(v map[string]*string) *CreateEnvHttpTrafficControlRequest {
	s.Headers = v
	return s
}

func (s *CreateEnvHttpTrafficControlRequest) SetBody(v *CreateEnvHttpTrafficControlBody) *CreateEnvHttpTrafficControlRequest {
	s.Body = v
	return s
}

type CreateEnvHttpTrafficControlResponseBody struct {
	Code      *int                                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                      `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *CreateEnvHttpTrafficControlResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateEnvHttpTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlResponseBody) SetCode(v int) *CreateEnvHttpTrafficControlResponseBody {
	s.Code = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBody) SetMessage(v string) *CreateEnvHttpTrafficControlResponseBody {
	s.Message = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBody) SetRequestId(v string) *CreateEnvHttpTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBody) SetData(v *CreateEnvHttpTrafficControlResponseBodyData) *CreateEnvHttpTrafficControlResponseBody {
	s.Data = v
	return s
}

type CreateEnvHttpTrafficControlResponseBodyData struct {
	AccountId     *string                                          `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	AppId         *string                                          `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EnvName       *string                                          `json:"EnvName,omitempty" xml:"EnvName,omitempty" require:"true"`
	LabelAdviceId *int64                                           `json:"LabelAdviceId,omitempty" xml:"LabelAdviceId,omitempty" require:"true"`
	LabelType     *string                                          `json:"LabelType,omitempty" xml:"LabelType,omitempty" require:"true"`
	PointcutId    *int64                                           `json:"PointcutId,omitempty" xml:"PointcutId,omitempty" require:"true"`
	RegionId      *string                                          `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	TenantId      *string                                          `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
	Spec          *CreateEnvHttpTrafficControlResponseBodyDataSpec `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true" type:"Struct"`
}

func (s CreateEnvHttpTrafficControlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetAccountId(v string) *CreateEnvHttpTrafficControlResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetAppId(v string) *CreateEnvHttpTrafficControlResponseBodyData {
	s.AppId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetEnvName(v string) *CreateEnvHttpTrafficControlResponseBodyData {
	s.EnvName = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetLabelAdviceId(v int64) *CreateEnvHttpTrafficControlResponseBodyData {
	s.LabelAdviceId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetLabelType(v string) *CreateEnvHttpTrafficControlResponseBodyData {
	s.LabelType = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetPointcutId(v int64) *CreateEnvHttpTrafficControlResponseBodyData {
	s.PointcutId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetRegionId(v string) *CreateEnvHttpTrafficControlResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetTenantId(v string) *CreateEnvHttpTrafficControlResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyData) SetSpec(v *CreateEnvHttpTrafficControlResponseBodyDataSpec) *CreateEnvHttpTrafficControlResponseBodyData {
	s.Spec = v
	return s
}

type CreateEnvHttpTrafficControlResponseBodyDataSpec struct {
	ClassName      *string                                                      `json:"ClassName,omitempty" xml:"ClassName,omitempty" require:"true"`
	ConditionType  *string                                                      `json:"ConditionType,omitempty" xml:"ConditionType,omitempty" require:"true"`
	Group          *string                                                      `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	MethodName     *string                                                      `json:"MethodName,omitempty" xml:"MethodName,omitempty" require:"true"`
	Order          *int64                                                       `json:"Order,omitempty" xml:"Order,omitempty" require:"true"`
	Percent        *int                                                         `json:"Percent,omitempty" xml:"Percent,omitempty" require:"true"`
	Selector       map[string]interface{}                                       `json:"Selector,omitempty" xml:"Selector,omitempty" require:"true"`
	ServiceName    *string                                                      `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	TransmitLevel  *int                                                         `json:"TransmitLevel,omitempty" xml:"TransmitLevel,omitempty" require:"true"`
	TransmitSwitch *bool                                                        `json:"TransmitSwitch,omitempty" xml:"TransmitSwitch,omitempty" require:"true"`
	TriggerPolicy  *string                                                      `json:"TriggerPolicy,omitempty" xml:"TriggerPolicy,omitempty" require:"true"`
	Type           *string                                                      `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Url            *string                                                      `json:"Url,omitempty" xml:"Url,omitempty" require:"true"`
	Version        *string                                                      `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Conditions     []*CreateEnvHttpTrafficControlResponseBodyDataSpecConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" require:"true" type:"Repeated"`
	Purposes       []*CreateEnvHttpTrafficControlResponseBodyDataSpecPurposes   `json:"Purposes,omitempty" xml:"Purposes,omitempty" require:"true" type:"Repeated"`
	ParamTypes     []*string                                                    `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" require:"true" type:"Repeated"`
}

func (s CreateEnvHttpTrafficControlResponseBodyDataSpec) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlResponseBodyDataSpec) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetClassName(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.ClassName = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetConditionType(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.ConditionType = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetGroup(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Group = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetMethodName(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.MethodName = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetOrder(v int64) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Order = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetPercent(v int) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Percent = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetSelector(v map[string]interface{}) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Selector = v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetServiceName(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.ServiceName = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetTransmitLevel(v int) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.TransmitLevel = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetTransmitSwitch(v bool) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.TransmitSwitch = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetTriggerPolicy(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.TriggerPolicy = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetType(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Type = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetUrl(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Url = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetVersion(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Version = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetConditions(v []*CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Conditions = v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetPurposes(v []*CreateEnvHttpTrafficControlResponseBodyDataSpecPurposes) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.Purposes = v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpec) SetParamTypes(v []*string) *CreateEnvHttpTrafficControlResponseBodyDataSpec {
	s.ParamTypes = v
	return s
}

type CreateEnvHttpTrafficControlResponseBodyDataSpecConditions struct {
	Id       *int64    `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Index    *int      `json:"Index,omitempty" xml:"Index,omitempty" require:"true"`
	Key      *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Operator *string   `json:"Operator,omitempty" xml:"Operator,omitempty" require:"true"`
	Strategy *string   `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
	Type     *string   `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Values   []*string `json:"Values,omitempty" xml:"Values,omitempty" require:"true" type:"Repeated"`
}

func (s CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) SetId(v int64) *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions {
	s.Id = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) SetIndex(v int) *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions {
	s.Index = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) SetKey(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions {
	s.Key = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) SetOperator(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions {
	s.Operator = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) SetStrategy(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions {
	s.Strategy = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) SetType(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions {
	s.Type = &v
	return s
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions) SetValues(v []*string) *CreateEnvHttpTrafficControlResponseBodyDataSpecConditions {
	s.Values = v
	return s
}

type CreateEnvHttpTrafficControlResponseBodyDataSpecPurposes struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s CreateEnvHttpTrafficControlResponseBodyDataSpecPurposes) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlResponseBodyDataSpecPurposes) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlResponseBodyDataSpecPurposes) SetType(v string) *CreateEnvHttpTrafficControlResponseBodyDataSpecPurposes {
	s.Type = &v
	return s
}

type CreateEnvHttpTrafficControlResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateEnvHttpTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEnvHttpTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEnvHttpTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *CreateEnvHttpTrafficControlResponse) SetHeaders(v map[string]*string) *CreateEnvHttpTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *CreateEnvHttpTrafficControlResponse) SetBody(v *CreateEnvHttpTrafficControlResponseBody) *CreateEnvHttpTrafficControlResponse {
	s.Body = v
	return s
}

type CreateGrayEnvironmentBody struct {
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	ShowName        *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	Tag             *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s CreateGrayEnvironmentBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGrayEnvironmentBody) GoString() string {
	return s.String()
}

func (s *CreateGrayEnvironmentBody) SetDescription(v string) *CreateGrayEnvironmentBody {
	s.Description = &v
	return s
}

func (s *CreateGrayEnvironmentBody) SetLogicalRegionId(v string) *CreateGrayEnvironmentBody {
	s.LogicalRegionId = &v
	return s
}

func (s *CreateGrayEnvironmentBody) SetShowName(v string) *CreateGrayEnvironmentBody {
	s.ShowName = &v
	return s
}

func (s *CreateGrayEnvironmentBody) SetTag(v string) *CreateGrayEnvironmentBody {
	s.Tag = &v
	return s
}

type CreateGrayEnvironmentRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateGrayEnvironmentBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateGrayEnvironmentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateGrayEnvironmentRequest) GoString() string {
	return s.String()
}

func (s *CreateGrayEnvironmentRequest) SetHeaders(v map[string]*string) *CreateGrayEnvironmentRequest {
	s.Headers = v
	return s
}

func (s *CreateGrayEnvironmentRequest) SetBody(v *CreateGrayEnvironmentBody) *CreateGrayEnvironmentRequest {
	s.Body = v
	return s
}

type CreateGrayEnvironmentResponseBody struct {
	Code      *int                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *CreateGrayEnvironmentResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s CreateGrayEnvironmentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateGrayEnvironmentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateGrayEnvironmentResponseBody) SetCode(v int) *CreateGrayEnvironmentResponseBody {
	s.Code = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBody) SetMessage(v string) *CreateGrayEnvironmentResponseBody {
	s.Message = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBody) SetRequestId(v string) *CreateGrayEnvironmentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBody) SetData(v *CreateGrayEnvironmentResponseBodyData) *CreateGrayEnvironmentResponseBody {
	s.Data = v
	return s
}

type CreateGrayEnvironmentResponseBodyData struct {
	AccountId  *string                                        `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	PointcutId *int64                                         `json:"PointcutId,omitempty" xml:"PointcutId,omitempty" require:"true"`
	RegionId   *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	TenantId   *string                                        `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
	Metadata   *CreateGrayEnvironmentResponseBodyDataMetadata `json:"Metadata,omitempty" xml:"Metadata,omitempty" require:"true" type:"Struct"`
}

func (s CreateGrayEnvironmentResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateGrayEnvironmentResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateGrayEnvironmentResponseBodyData) SetAccountId(v string) *CreateGrayEnvironmentResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBodyData) SetPointcutId(v int64) *CreateGrayEnvironmentResponseBodyData {
	s.PointcutId = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBodyData) SetRegionId(v string) *CreateGrayEnvironmentResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBodyData) SetTenantId(v string) *CreateGrayEnvironmentResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBodyData) SetMetadata(v *CreateGrayEnvironmentResponseBodyDataMetadata) *CreateGrayEnvironmentResponseBodyData {
	s.Metadata = v
	return s
}

type CreateGrayEnvironmentResponseBodyDataMetadata struct {
	Annotations map[string]interface{} `json:"Annotations,omitempty" xml:"Annotations,omitempty" require:"true"`
	Labels      map[string]interface{} `json:"Labels,omitempty" xml:"Labels,omitempty" require:"true"`
	Name        *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace   *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s CreateGrayEnvironmentResponseBodyDataMetadata) String() string {
	return tea.Prettify(s)
}

func (s CreateGrayEnvironmentResponseBodyDataMetadata) GoString() string {
	return s.String()
}

func (s *CreateGrayEnvironmentResponseBodyDataMetadata) SetAnnotations(v map[string]interface{}) *CreateGrayEnvironmentResponseBodyDataMetadata {
	s.Annotations = v
	return s
}

func (s *CreateGrayEnvironmentResponseBodyDataMetadata) SetLabels(v map[string]interface{}) *CreateGrayEnvironmentResponseBodyDataMetadata {
	s.Labels = v
	return s
}

func (s *CreateGrayEnvironmentResponseBodyDataMetadata) SetName(v string) *CreateGrayEnvironmentResponseBodyDataMetadata {
	s.Name = &v
	return s
}

func (s *CreateGrayEnvironmentResponseBodyDataMetadata) SetNamespace(v string) *CreateGrayEnvironmentResponseBodyDataMetadata {
	s.Namespace = &v
	return s
}

type CreateGrayEnvironmentResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateGrayEnvironmentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateGrayEnvironmentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateGrayEnvironmentResponse) GoString() string {
	return s.String()
}

func (s *CreateGrayEnvironmentResponse) SetHeaders(v map[string]*string) *CreateGrayEnvironmentResponse {
	s.Headers = v
	return s
}

func (s *CreateGrayEnvironmentResponse) SetBody(v *CreateGrayEnvironmentResponseBody) *CreateGrayEnvironmentResponse {
	s.Body = v
	return s
}

type CreateIDCImportCommandBody struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
}

func (s CreateIDCImportCommandBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIDCImportCommandBody) GoString() string {
	return s.String()
}

func (s *CreateIDCImportCommandBody) SetClusterId(v string) *CreateIDCImportCommandBody {
	s.ClusterId = &v
	return s
}

type CreateIDCImportCommandRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateIDCImportCommandBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIDCImportCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateIDCImportCommandRequest) GoString() string {
	return s.String()
}

func (s *CreateIDCImportCommandRequest) SetHeaders(v map[string]*string) *CreateIDCImportCommandRequest {
	s.Headers = v
	return s
}

func (s *CreateIDCImportCommandRequest) SetBody(v *CreateIDCImportCommandBody) *CreateIDCImportCommandRequest {
	s.Body = v
	return s
}

type CreateIDCImportCommandResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateIDCImportCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateIDCImportCommandResponseBody) GoString() string {
	return s.String()
}

func (s *CreateIDCImportCommandResponseBody) SetCode(v string) *CreateIDCImportCommandResponseBody {
	s.Code = &v
	return s
}

func (s *CreateIDCImportCommandResponseBody) SetData(v string) *CreateIDCImportCommandResponseBody {
	s.Data = &v
	return s
}

func (s *CreateIDCImportCommandResponseBody) SetMessage(v string) *CreateIDCImportCommandResponseBody {
	s.Message = &v
	return s
}

func (s *CreateIDCImportCommandResponseBody) SetRequestId(v string) *CreateIDCImportCommandResponseBody {
	s.RequestId = &v
	return s
}

type CreateIDCImportCommandResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateIDCImportCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateIDCImportCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateIDCImportCommandResponse) GoString() string {
	return s.String()
}

func (s *CreateIDCImportCommandResponse) SetHeaders(v map[string]*string) *CreateIDCImportCommandResponse {
	s.Headers = v
	return s
}

func (s *CreateIDCImportCommandResponse) SetBody(v *CreateIDCImportCommandResponseBody) *CreateIDCImportCommandResponse {
	s.Body = v
	return s
}

type CreateK8sConfigMapBody struct {
	ClusterId *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Name      *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s CreateK8sConfigMapBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sConfigMapBody) GoString() string {
	return s.String()
}

func (s *CreateK8sConfigMapBody) SetClusterId(v string) *CreateK8sConfigMapBody {
	s.ClusterId = &v
	return s
}

func (s *CreateK8sConfigMapBody) SetData(v map[string]interface{}) *CreateK8sConfigMapBody {
	s.Data = v
	return s
}

func (s *CreateK8sConfigMapBody) SetName(v string) *CreateK8sConfigMapBody {
	s.Name = &v
	return s
}

func (s *CreateK8sConfigMapBody) SetNamespace(v string) *CreateK8sConfigMapBody {
	s.Namespace = &v
	return s
}

type CreateK8sConfigMapRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateK8sConfigMapBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sConfigMapRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sConfigMapRequest) SetHeaders(v map[string]*string) *CreateK8sConfigMapRequest {
	s.Headers = v
	return s
}

func (s *CreateK8sConfigMapRequest) SetBody(v *CreateK8sConfigMapBody) *CreateK8sConfigMapRequest {
	s.Body = v
	return s
}

type CreateK8sConfigMapResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateK8sConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sConfigMapResponseBody) SetCode(v int) *CreateK8sConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sConfigMapResponseBody) SetMessage(v string) *CreateK8sConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *CreateK8sConfigMapResponseBody) SetRequestId(v string) *CreateK8sConfigMapResponseBody {
	s.RequestId = &v
	return s
}

type CreateK8sConfigMapResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sConfigMapResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sConfigMapResponse) SetHeaders(v map[string]*string) *CreateK8sConfigMapResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sConfigMapResponse) SetBody(v *CreateK8sConfigMapResponseBody) *CreateK8sConfigMapResponse {
	s.Body = v
	return s
}

type CreateK8sIngressRuleQuery struct {
	ClusterId   *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	IngressConf map[string]interface{} `json:"IngressConf,omitempty" xml:"IngressConf,omitempty"`
	Name        *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace   *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s CreateK8sIngressRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleQuery) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleQuery) SetClusterId(v string) *CreateK8sIngressRuleQuery {
	s.ClusterId = &v
	return s
}

func (s *CreateK8sIngressRuleQuery) SetIngressConf(v map[string]interface{}) *CreateK8sIngressRuleQuery {
	s.IngressConf = v
	return s
}

func (s *CreateK8sIngressRuleQuery) SetName(v string) *CreateK8sIngressRuleQuery {
	s.Name = &v
	return s
}

func (s *CreateK8sIngressRuleQuery) SetNamespace(v string) *CreateK8sIngressRuleQuery {
	s.Namespace = &v
	return s
}

type CreateK8sIngressRuleShrinkQuery struct {
	ClusterId         *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	IngressConfShrink *string `json:"IngressConf,omitempty" xml:"IngressConf,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace         *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s CreateK8sIngressRuleShrinkQuery) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleShrinkQuery) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleShrinkQuery) SetClusterId(v string) *CreateK8sIngressRuleShrinkQuery {
	s.ClusterId = &v
	return s
}

func (s *CreateK8sIngressRuleShrinkQuery) SetIngressConfShrink(v string) *CreateK8sIngressRuleShrinkQuery {
	s.IngressConfShrink = &v
	return s
}

func (s *CreateK8sIngressRuleShrinkQuery) SetName(v string) *CreateK8sIngressRuleShrinkQuery {
	s.Name = &v
	return s
}

func (s *CreateK8sIngressRuleShrinkQuery) SetNamespace(v string) *CreateK8sIngressRuleShrinkQuery {
	s.Namespace = &v
	return s
}

type CreateK8sIngressRuleRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *CreateK8sIngressRuleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s CreateK8sIngressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleRequest) SetHeaders(v map[string]*string) *CreateK8sIngressRuleRequest {
	s.Headers = v
	return s
}

func (s *CreateK8sIngressRuleRequest) SetQuery(v *CreateK8sIngressRuleQuery) *CreateK8sIngressRuleRequest {
	s.Query = v
	return s
}

type CreateK8sIngressRuleShrinkRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *CreateK8sIngressRuleShrinkQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s CreateK8sIngressRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleShrinkRequest) SetHeaders(v map[string]*string) *CreateK8sIngressRuleShrinkRequest {
	s.Headers = v
	return s
}

func (s *CreateK8sIngressRuleShrinkRequest) SetQuery(v *CreateK8sIngressRuleShrinkQuery) *CreateK8sIngressRuleShrinkRequest {
	s.Query = v
	return s
}

type CreateK8sIngressRuleResponseBody struct {
	Code    *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
}

func (s CreateK8sIngressRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleResponseBody) SetCode(v int) *CreateK8sIngressRuleResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sIngressRuleResponseBody) SetMessage(v string) *CreateK8sIngressRuleResponseBody {
	s.Message = &v
	return s
}

type CreateK8sIngressRuleResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sIngressRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sIngressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sIngressRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sIngressRuleResponse) SetHeaders(v map[string]*string) *CreateK8sIngressRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sIngressRuleResponse) SetBody(v *CreateK8sIngressRuleResponseBody) *CreateK8sIngressRuleResponse {
	s.Body = v
	return s
}

type CreateK8sSecretBody struct {
	Base64Encoded *bool   `json:"Base64Encoded,omitempty" xml:"Base64Encoded,omitempty"`
	CertId        *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertRegionId  *string `json:"CertRegionId,omitempty" xml:"CertRegionId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Data          *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace     *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s CreateK8sSecretBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sSecretBody) GoString() string {
	return s.String()
}

func (s *CreateK8sSecretBody) SetBase64Encoded(v bool) *CreateK8sSecretBody {
	s.Base64Encoded = &v
	return s
}

func (s *CreateK8sSecretBody) SetCertId(v string) *CreateK8sSecretBody {
	s.CertId = &v
	return s
}

func (s *CreateK8sSecretBody) SetCertRegionId(v string) *CreateK8sSecretBody {
	s.CertRegionId = &v
	return s
}

func (s *CreateK8sSecretBody) SetClusterId(v string) *CreateK8sSecretBody {
	s.ClusterId = &v
	return s
}

func (s *CreateK8sSecretBody) SetData(v string) *CreateK8sSecretBody {
	s.Data = &v
	return s
}

func (s *CreateK8sSecretBody) SetName(v string) *CreateK8sSecretBody {
	s.Name = &v
	return s
}

func (s *CreateK8sSecretBody) SetNamespace(v string) *CreateK8sSecretBody {
	s.Namespace = &v
	return s
}

func (s *CreateK8sSecretBody) SetType(v string) *CreateK8sSecretBody {
	s.Type = &v
	return s
}

type CreateK8sSecretRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *CreateK8sSecretBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sSecretRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sSecretRequest) SetHeaders(v map[string]*string) *CreateK8sSecretRequest {
	s.Headers = v
	return s
}

func (s *CreateK8sSecretRequest) SetBody(v *CreateK8sSecretBody) *CreateK8sSecretRequest {
	s.Body = v
	return s
}

type CreateK8sSecretResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateK8sSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sSecretResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sSecretResponseBody) SetCode(v int) *CreateK8sSecretResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sSecretResponseBody) SetMessage(v string) *CreateK8sSecretResponseBody {
	s.Message = &v
	return s
}

func (s *CreateK8sSecretResponseBody) SetRequestId(v string) *CreateK8sSecretResponseBody {
	s.RequestId = &v
	return s
}

type CreateK8sSecretResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sSecretResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sSecretResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sSecretResponse) SetHeaders(v map[string]*string) *CreateK8sSecretResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sSecretResponse) SetBody(v *CreateK8sSecretResponseBody) *CreateK8sSecretResponse {
	s.Body = v
	return s
}

type CreateK8sServiceQuery struct {
	AppId        *string                `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Name         *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ServicePorts map[string]interface{} `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty" require:"true"`
	Type         *string                `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s CreateK8sServiceQuery) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceQuery) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceQuery) SetAppId(v string) *CreateK8sServiceQuery {
	s.AppId = &v
	return s
}

func (s *CreateK8sServiceQuery) SetName(v string) *CreateK8sServiceQuery {
	s.Name = &v
	return s
}

func (s *CreateK8sServiceQuery) SetServicePorts(v map[string]interface{}) *CreateK8sServiceQuery {
	s.ServicePorts = v
	return s
}

func (s *CreateK8sServiceQuery) SetType(v string) *CreateK8sServiceQuery {
	s.Type = &v
	return s
}

type CreateK8sServiceShrinkQuery struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ServicePortsShrink *string `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty" require:"true"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s CreateK8sServiceShrinkQuery) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceShrinkQuery) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceShrinkQuery) SetAppId(v string) *CreateK8sServiceShrinkQuery {
	s.AppId = &v
	return s
}

func (s *CreateK8sServiceShrinkQuery) SetName(v string) *CreateK8sServiceShrinkQuery {
	s.Name = &v
	return s
}

func (s *CreateK8sServiceShrinkQuery) SetServicePortsShrink(v string) *CreateK8sServiceShrinkQuery {
	s.ServicePortsShrink = &v
	return s
}

func (s *CreateK8sServiceShrinkQuery) SetType(v string) *CreateK8sServiceShrinkQuery {
	s.Type = &v
	return s
}

type CreateK8sServiceRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *CreateK8sServiceQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s CreateK8sServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceRequest) SetHeaders(v map[string]*string) *CreateK8sServiceRequest {
	s.Headers = v
	return s
}

func (s *CreateK8sServiceRequest) SetQuery(v *CreateK8sServiceQuery) *CreateK8sServiceRequest {
	s.Query = v
	return s
}

type CreateK8sServiceShrinkRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *CreateK8sServiceShrinkQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s CreateK8sServiceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceShrinkRequest) SetHeaders(v map[string]*string) *CreateK8sServiceShrinkRequest {
	s.Headers = v
	return s
}

func (s *CreateK8sServiceShrinkRequest) SetQuery(v *CreateK8sServiceShrinkQuery) *CreateK8sServiceShrinkRequest {
	s.Query = v
	return s
}

type CreateK8sServiceResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s CreateK8sServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceResponseBody) SetChangeOrderId(v string) *CreateK8sServiceResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *CreateK8sServiceResponseBody) SetCode(v int) *CreateK8sServiceResponseBody {
	s.Code = &v
	return s
}

func (s *CreateK8sServiceResponseBody) SetMessage(v string) *CreateK8sServiceResponseBody {
	s.Message = &v
	return s
}

func (s *CreateK8sServiceResponseBody) SetRequestId(v string) *CreateK8sServiceResponseBody {
	s.RequestId = &v
	return s
}

type CreateK8sServiceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateK8sServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateK8sServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateK8sServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateK8sServiceResponse) SetHeaders(v map[string]*string) *CreateK8sServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateK8sServiceResponse) SetBody(v *CreateK8sServiceResponseBody) *CreateK8sServiceResponse {
	s.Body = v
	return s
}

type DelegateAdminRoleQuery struct {
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty" require:"true"`
}

func (s DelegateAdminRoleQuery) String() string {
	return tea.Prettify(s)
}

func (s DelegateAdminRoleQuery) GoString() string {
	return s.String()
}

func (s *DelegateAdminRoleQuery) SetTargetUserId(v string) *DelegateAdminRoleQuery {
	s.TargetUserId = &v
	return s
}

type DelegateAdminRoleRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DelegateAdminRoleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DelegateAdminRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DelegateAdminRoleRequest) GoString() string {
	return s.String()
}

func (s *DelegateAdminRoleRequest) SetHeaders(v map[string]*string) *DelegateAdminRoleRequest {
	s.Headers = v
	return s
}

func (s *DelegateAdminRoleRequest) SetQuery(v *DelegateAdminRoleQuery) *DelegateAdminRoleRequest {
	s.Query = v
	return s
}

type DelegateAdminRoleResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DelegateAdminRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DelegateAdminRoleResponseBody) GoString() string {
	return s.String()
}

func (s *DelegateAdminRoleResponseBody) SetCode(v int) *DelegateAdminRoleResponseBody {
	s.Code = &v
	return s
}

func (s *DelegateAdminRoleResponseBody) SetMessage(v string) *DelegateAdminRoleResponseBody {
	s.Message = &v
	return s
}

func (s *DelegateAdminRoleResponseBody) SetRequestId(v string) *DelegateAdminRoleResponseBody {
	s.RequestId = &v
	return s
}

type DelegateAdminRoleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DelegateAdminRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DelegateAdminRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DelegateAdminRoleResponse) GoString() string {
	return s.String()
}

func (s *DelegateAdminRoleResponse) SetHeaders(v map[string]*string) *DelegateAdminRoleResponse {
	s.Headers = v
	return s
}

func (s *DelegateAdminRoleResponse) SetBody(v *DelegateAdminRoleResponseBody) *DelegateAdminRoleResponse {
	s.Body = v
	return s
}

type DeleteApplicationQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s DeleteApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationQuery) GoString() string {
	return s.String()
}

func (s *DeleteApplicationQuery) SetAppId(v string) *DeleteApplicationQuery {
	s.AppId = &v
	return s
}

type DeleteApplicationRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationRequest) SetHeaders(v map[string]*string) *DeleteApplicationRequest {
	s.Headers = v
	return s
}

func (s *DeleteApplicationRequest) SetQuery(v *DeleteApplicationQuery) *DeleteApplicationRequest {
	s.Query = v
	return s
}

type DeleteApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponseBody) SetChangeOrderId(v string) *DeleteApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetCode(v int) *DeleteApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetMessage(v string) *DeleteApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteApplicationResponseBody) SetRequestId(v string) *DeleteApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationResponse) SetHeaders(v map[string]*string) *DeleteApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationResponse) SetBody(v *DeleteApplicationResponseBody) *DeleteApplicationResponse {
	s.Body = v
	return s
}

type DeleteApplicationScalingRuleQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DeleteApplicationScalingRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleQuery) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleQuery) SetAppId(v string) *DeleteApplicationScalingRuleQuery {
	s.AppId = &v
	return s
}

func (s *DeleteApplicationScalingRuleQuery) SetScalingRuleName(v string) *DeleteApplicationScalingRuleQuery {
	s.ScalingRuleName = &v
	return s
}

type DeleteApplicationScalingRuleRequest struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteApplicationScalingRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleRequest) SetHeaders(v map[string]*string) *DeleteApplicationScalingRuleRequest {
	s.Headers = v
	return s
}

func (s *DeleteApplicationScalingRuleRequest) SetQuery(v *DeleteApplicationScalingRuleQuery) *DeleteApplicationScalingRuleRequest {
	s.Query = v
	return s
}

type DeleteApplicationScalingRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleResponseBody) SetRequestId(v string) *DeleteApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DeleteApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteApplicationScalingRuleResponse) SetBody(v *DeleteApplicationScalingRuleResponseBody) *DeleteApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type DeleteClusterQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Mode      *int    `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s DeleteClusterQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterQuery) GoString() string {
	return s.String()
}

func (s *DeleteClusterQuery) SetClusterId(v string) *DeleteClusterQuery {
	s.ClusterId = &v
	return s
}

func (s *DeleteClusterQuery) SetMode(v int) *DeleteClusterQuery {
	s.Mode = &v
	return s
}

type DeleteClusterRequest struct {
	Headers map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteClusterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterRequest) SetHeaders(v map[string]*string) *DeleteClusterRequest {
	s.Headers = v
	return s
}

func (s *DeleteClusterRequest) SetQuery(v *DeleteClusterQuery) *DeleteClusterRequest {
	s.Query = v
	return s
}

type DeleteClusterResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClusterResponseBody) SetCode(v int) *DeleteClusterResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteClusterResponseBody) SetData(v bool) *DeleteClusterResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteClusterResponseBody) SetMessage(v string) *DeleteClusterResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteClusterResponseBody) SetRequestId(v string) *DeleteClusterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClusterResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterResponse) SetHeaders(v map[string]*string) *DeleteClusterResponse {
	s.Headers = v
	return s
}

func (s *DeleteClusterResponse) SetBody(v *DeleteClusterResponseBody) *DeleteClusterResponse {
	s.Body = v
	return s
}

type DeleteClusterMemberQuery struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterMemberId *string `json:"ClusterMemberId,omitempty" xml:"ClusterMemberId,omitempty" require:"true"`
}

func (s DeleteClusterMemberQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterMemberQuery) GoString() string {
	return s.String()
}

func (s *DeleteClusterMemberQuery) SetClusterId(v string) *DeleteClusterMemberQuery {
	s.ClusterId = &v
	return s
}

func (s *DeleteClusterMemberQuery) SetClusterMemberId(v string) *DeleteClusterMemberQuery {
	s.ClusterMemberId = &v
	return s
}

type DeleteClusterMemberRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteClusterMemberQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteClusterMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterMemberRequest) SetHeaders(v map[string]*string) *DeleteClusterMemberRequest {
	s.Headers = v
	return s
}

func (s *DeleteClusterMemberRequest) SetQuery(v *DeleteClusterMemberQuery) *DeleteClusterMemberRequest {
	s.Query = v
	return s
}

type DeleteClusterMemberResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteClusterMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClusterMemberResponseBody) SetCode(v int) *DeleteClusterMemberResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteClusterMemberResponseBody) SetData(v bool) *DeleteClusterMemberResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteClusterMemberResponseBody) SetMessage(v string) *DeleteClusterMemberResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteClusterMemberResponseBody) SetRequestId(v string) *DeleteClusterMemberResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClusterMemberResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteClusterMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteClusterMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterMemberResponse) SetHeaders(v map[string]*string) *DeleteClusterMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteClusterMemberResponse) SetBody(v *DeleteClusterMemberResponseBody) *DeleteClusterMemberResponse {
	s.Body = v
	return s
}

type DeleteConfigCenterQuery struct {
	DataId          *string `json:"DataId,omitempty" xml:"DataId,omitempty" require:"true"`
	Group           *string `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
}

func (s DeleteConfigCenterQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigCenterQuery) GoString() string {
	return s.String()
}

func (s *DeleteConfigCenterQuery) SetDataId(v string) *DeleteConfigCenterQuery {
	s.DataId = &v
	return s
}

func (s *DeleteConfigCenterQuery) SetGroup(v string) *DeleteConfigCenterQuery {
	s.Group = &v
	return s
}

func (s *DeleteConfigCenterQuery) SetLogicalRegionId(v string) *DeleteConfigCenterQuery {
	s.LogicalRegionId = &v
	return s
}

type DeleteConfigCenterRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteConfigCenterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteConfigCenterRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigCenterRequest) GoString() string {
	return s.String()
}

func (s *DeleteConfigCenterRequest) SetHeaders(v map[string]*string) *DeleteConfigCenterRequest {
	s.Headers = v
	return s
}

func (s *DeleteConfigCenterRequest) SetQuery(v *DeleteConfigCenterQuery) *DeleteConfigCenterRequest {
	s.Query = v
	return s
}

type DeleteConfigCenterResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteConfigCenterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigCenterResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConfigCenterResponseBody) SetCode(v int) *DeleteConfigCenterResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteConfigCenterResponseBody) SetMessage(v string) *DeleteConfigCenterResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteConfigCenterResponseBody) SetRequestId(v string) *DeleteConfigCenterResponseBody {
	s.RequestId = &v
	return s
}

type DeleteConfigCenterResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteConfigCenterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConfigCenterResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigCenterResponse) GoString() string {
	return s.String()
}

func (s *DeleteConfigCenterResponse) SetHeaders(v map[string]*string) *DeleteConfigCenterResponse {
	s.Headers = v
	return s
}

func (s *DeleteConfigCenterResponse) SetBody(v *DeleteConfigCenterResponseBody) *DeleteConfigCenterResponse {
	s.Body = v
	return s
}

type DeleteConfigTemplateQuery struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteConfigTemplateQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplateQuery) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplateQuery) SetId(v int64) *DeleteConfigTemplateQuery {
	s.Id = &v
	return s
}

type DeleteConfigTemplateRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteConfigTemplateQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplateRequest) SetHeaders(v map[string]*string) *DeleteConfigTemplateRequest {
	s.Headers = v
	return s
}

func (s *DeleteConfigTemplateRequest) SetQuery(v *DeleteConfigTemplateQuery) *DeleteConfigTemplateRequest {
	s.Query = v
	return s
}

type DeleteConfigTemplateResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteConfigTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplateResponseBody) SetCode(v int) *DeleteConfigTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteConfigTemplateResponseBody) SetMessage(v string) *DeleteConfigTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteConfigTemplateResponseBody) SetRequestId(v string) *DeleteConfigTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteConfigTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteConfigTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteConfigTemplateResponse) SetHeaders(v map[string]*string) *DeleteConfigTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteConfigTemplateResponse) SetBody(v *DeleteConfigTemplateResponseBody) *DeleteConfigTemplateResponse {
	s.Body = v
	return s
}

type DeleteDegradeControlQuery struct {
	AppId  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s DeleteDegradeControlQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteDegradeControlQuery) GoString() string {
	return s.String()
}

func (s *DeleteDegradeControlQuery) SetAppId(v string) *DeleteDegradeControlQuery {
	s.AppId = &v
	return s
}

func (s *DeleteDegradeControlQuery) SetRuleId(v string) *DeleteDegradeControlQuery {
	s.RuleId = &v
	return s
}

type DeleteDegradeControlRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteDegradeControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteDegradeControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDegradeControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteDegradeControlRequest) SetHeaders(v map[string]*string) *DeleteDegradeControlRequest {
	s.Headers = v
	return s
}

func (s *DeleteDegradeControlRequest) SetQuery(v *DeleteDegradeControlQuery) *DeleteDegradeControlRequest {
	s.Query = v
	return s
}

type DeleteDegradeControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteDegradeControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDegradeControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDegradeControlResponseBody) SetCode(v int) *DeleteDegradeControlResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDegradeControlResponseBody) SetMessage(v string) *DeleteDegradeControlResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDegradeControlResponseBody) SetRequestId(v string) *DeleteDegradeControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDegradeControlResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDegradeControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDegradeControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDegradeControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteDegradeControlResponse) SetHeaders(v map[string]*string) *DeleteDegradeControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteDegradeControlResponse) SetBody(v *DeleteDegradeControlResponseBody) *DeleteDegradeControlResponse {
	s.Body = v
	return s
}

type DeleteDeployGroupQuery struct {
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
}

func (s DeleteDeployGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeployGroupQuery) GoString() string {
	return s.String()
}

func (s *DeleteDeployGroupQuery) SetAppId(v string) *DeleteDeployGroupQuery {
	s.AppId = &v
	return s
}

func (s *DeleteDeployGroupQuery) SetGroupName(v string) *DeleteDeployGroupQuery {
	s.GroupName = &v
	return s
}

type DeleteDeployGroupRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteDeployGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDeployGroupRequest) SetHeaders(v map[string]*string) *DeleteDeployGroupRequest {
	s.Headers = v
	return s
}

func (s *DeleteDeployGroupRequest) SetQuery(v *DeleteDeployGroupQuery) *DeleteDeployGroupRequest {
	s.Query = v
	return s
}

type DeleteDeployGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDeployGroupResponseBody) SetCode(v int) *DeleteDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteDeployGroupResponseBody) SetData(v string) *DeleteDeployGroupResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteDeployGroupResponseBody) SetMessage(v string) *DeleteDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteDeployGroupResponseBody) SetRequestId(v string) *DeleteDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDeployGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDeployGroupResponse) SetHeaders(v map[string]*string) *DeleteDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDeployGroupResponse) SetBody(v *DeleteDeployGroupResponseBody) *DeleteDeployGroupResponse {
	s.Body = v
	return s
}

type DeleteEcuQuery struct {
	EcuId *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
}

func (s DeleteEcuQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteEcuQuery) GoString() string {
	return s.String()
}

func (s *DeleteEcuQuery) SetEcuId(v string) *DeleteEcuQuery {
	s.EcuId = &v
	return s
}

type DeleteEcuRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteEcuQuery    `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEcuRequest) GoString() string {
	return s.String()
}

func (s *DeleteEcuRequest) SetHeaders(v map[string]*string) *DeleteEcuRequest {
	s.Headers = v
	return s
}

func (s *DeleteEcuRequest) SetQuery(v *DeleteEcuQuery) *DeleteEcuRequest {
	s.Query = v
	return s
}

type DeleteEcuResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEcuResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEcuResponseBody) SetCode(v int) *DeleteEcuResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEcuResponseBody) SetData(v string) *DeleteEcuResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteEcuResponseBody) SetMessage(v string) *DeleteEcuResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEcuResponseBody) SetRequestId(v string) *DeleteEcuResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEcuResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEcuResponse) GoString() string {
	return s.String()
}

func (s *DeleteEcuResponse) SetHeaders(v map[string]*string) *DeleteEcuResponse {
	s.Headers = v
	return s
}

func (s *DeleteEcuResponse) SetBody(v *DeleteEcuResponseBody) *DeleteEcuResponse {
	s.Body = v
	return s
}

type DeleteEnvAppGroupQuery struct {
	PointcutName *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
	Scopes       *string `json:"Scopes,omitempty" xml:"Scopes,omitempty"`
}

func (s DeleteEnvAppGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvAppGroupQuery) GoString() string {
	return s.String()
}

func (s *DeleteEnvAppGroupQuery) SetPointcutName(v string) *DeleteEnvAppGroupQuery {
	s.PointcutName = &v
	return s
}

func (s *DeleteEnvAppGroupQuery) SetScopes(v string) *DeleteEnvAppGroupQuery {
	s.Scopes = &v
	return s
}

type DeleteEnvAppGroupRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteEnvAppGroupQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteEnvAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvAppGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvAppGroupRequest) SetHeaders(v map[string]*string) *DeleteEnvAppGroupRequest {
	s.Headers = v
	return s
}

func (s *DeleteEnvAppGroupRequest) SetQuery(v *DeleteEnvAppGroupQuery) *DeleteEnvAppGroupRequest {
	s.Query = v
	return s
}

type DeleteEnvAppGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteEnvAppGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvAppGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvAppGroupResponseBody) SetCode(v int) *DeleteEnvAppGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvAppGroupResponseBody) SetMessage(v string) *DeleteEnvAppGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvAppGroupResponseBody) SetRequestId(v string) *DeleteEnvAppGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnvAppGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEnvAppGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEnvAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvAppGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvAppGroupResponse) SetHeaders(v map[string]*string) *DeleteEnvAppGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvAppGroupResponse) SetBody(v *DeleteEnvAppGroupResponseBody) *DeleteEnvAppGroupResponse {
	s.Body = v
	return s
}

type DeleteEnvHsfTrafficControlQuery struct {
	LabelAdviceName *string `json:"LabelAdviceName,omitempty" xml:"LabelAdviceName,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
}

func (s DeleteEnvHsfTrafficControlQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHsfTrafficControlQuery) GoString() string {
	return s.String()
}

func (s *DeleteEnvHsfTrafficControlQuery) SetLabelAdviceName(v string) *DeleteEnvHsfTrafficControlQuery {
	s.LabelAdviceName = &v
	return s
}

func (s *DeleteEnvHsfTrafficControlQuery) SetPointcutName(v string) *DeleteEnvHsfTrafficControlQuery {
	s.PointcutName = &v
	return s
}

type DeleteEnvHsfTrafficControlRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteEnvHsfTrafficControlQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteEnvHsfTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHsfTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvHsfTrafficControlRequest) SetHeaders(v map[string]*string) *DeleteEnvHsfTrafficControlRequest {
	s.Headers = v
	return s
}

func (s *DeleteEnvHsfTrafficControlRequest) SetQuery(v *DeleteEnvHsfTrafficControlQuery) *DeleteEnvHsfTrafficControlRequest {
	s.Query = v
	return s
}

type DeleteEnvHsfTrafficControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteEnvHsfTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHsfTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvHsfTrafficControlResponseBody) SetCode(v int) *DeleteEnvHsfTrafficControlResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvHsfTrafficControlResponseBody) SetMessage(v string) *DeleteEnvHsfTrafficControlResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvHsfTrafficControlResponseBody) SetRequestId(v string) *DeleteEnvHsfTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnvHsfTrafficControlResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEnvHsfTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEnvHsfTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHsfTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvHsfTrafficControlResponse) SetHeaders(v map[string]*string) *DeleteEnvHsfTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvHsfTrafficControlResponse) SetBody(v *DeleteEnvHsfTrafficControlResponseBody) *DeleteEnvHsfTrafficControlResponse {
	s.Body = v
	return s
}

type DeleteEnvHttpTrafficControlQuery struct {
	LabelAdviceName *string `json:"LabelAdviceName,omitempty" xml:"LabelAdviceName,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
}

func (s DeleteEnvHttpTrafficControlQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHttpTrafficControlQuery) GoString() string {
	return s.String()
}

func (s *DeleteEnvHttpTrafficControlQuery) SetLabelAdviceName(v string) *DeleteEnvHttpTrafficControlQuery {
	s.LabelAdviceName = &v
	return s
}

func (s *DeleteEnvHttpTrafficControlQuery) SetPointcutName(v string) *DeleteEnvHttpTrafficControlQuery {
	s.PointcutName = &v
	return s
}

type DeleteEnvHttpTrafficControlRequest struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteEnvHttpTrafficControlQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteEnvHttpTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHttpTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteEnvHttpTrafficControlRequest) SetHeaders(v map[string]*string) *DeleteEnvHttpTrafficControlRequest {
	s.Headers = v
	return s
}

func (s *DeleteEnvHttpTrafficControlRequest) SetQuery(v *DeleteEnvHttpTrafficControlQuery) *DeleteEnvHttpTrafficControlRequest {
	s.Query = v
	return s
}

type DeleteEnvHttpTrafficControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteEnvHttpTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHttpTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEnvHttpTrafficControlResponseBody) SetCode(v int) *DeleteEnvHttpTrafficControlResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteEnvHttpTrafficControlResponseBody) SetMessage(v string) *DeleteEnvHttpTrafficControlResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteEnvHttpTrafficControlResponseBody) SetRequestId(v string) *DeleteEnvHttpTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEnvHttpTrafficControlResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteEnvHttpTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEnvHttpTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEnvHttpTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteEnvHttpTrafficControlResponse) SetHeaders(v map[string]*string) *DeleteEnvHttpTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteEnvHttpTrafficControlResponse) SetBody(v *DeleteEnvHttpTrafficControlResponseBody) *DeleteEnvHttpTrafficControlResponse {
	s.Body = v
	return s
}

type DeleteFlowControlQuery struct {
	AppId  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s DeleteFlowControlQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowControlQuery) GoString() string {
	return s.String()
}

func (s *DeleteFlowControlQuery) SetAppId(v string) *DeleteFlowControlQuery {
	s.AppId = &v
	return s
}

func (s *DeleteFlowControlQuery) SetRuleId(v string) *DeleteFlowControlQuery {
	s.RuleId = &v
	return s
}

type DeleteFlowControlRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteFlowControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteFlowControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowControlRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowControlRequest) SetHeaders(v map[string]*string) *DeleteFlowControlRequest {
	s.Headers = v
	return s
}

func (s *DeleteFlowControlRequest) SetQuery(v *DeleteFlowControlQuery) *DeleteFlowControlRequest {
	s.Query = v
	return s
}

type DeleteFlowControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteFlowControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowControlResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowControlResponseBody) SetCode(v int) *DeleteFlowControlResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteFlowControlResponseBody) SetMessage(v string) *DeleteFlowControlResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteFlowControlResponseBody) SetRequestId(v string) *DeleteFlowControlResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowControlResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowControlResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowControlResponse) SetHeaders(v map[string]*string) *DeleteFlowControlResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowControlResponse) SetBody(v *DeleteFlowControlResponseBody) *DeleteFlowControlResponse {
	s.Body = v
	return s
}

type DeleteGrayEnvironmentQuery struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
}

func (s DeleteGrayEnvironmentQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrayEnvironmentQuery) GoString() string {
	return s.String()
}

func (s *DeleteGrayEnvironmentQuery) SetLogicalRegionId(v string) *DeleteGrayEnvironmentQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *DeleteGrayEnvironmentQuery) SetPointcutName(v string) *DeleteGrayEnvironmentQuery {
	s.PointcutName = &v
	return s
}

type DeleteGrayEnvironmentRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteGrayEnvironmentQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteGrayEnvironmentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrayEnvironmentRequest) GoString() string {
	return s.String()
}

func (s *DeleteGrayEnvironmentRequest) SetHeaders(v map[string]*string) *DeleteGrayEnvironmentRequest {
	s.Headers = v
	return s
}

func (s *DeleteGrayEnvironmentRequest) SetQuery(v *DeleteGrayEnvironmentQuery) *DeleteGrayEnvironmentRequest {
	s.Query = v
	return s
}

type DeleteGrayEnvironmentResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteGrayEnvironmentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrayEnvironmentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGrayEnvironmentResponseBody) SetCode(v int) *DeleteGrayEnvironmentResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteGrayEnvironmentResponseBody) SetMessage(v string) *DeleteGrayEnvironmentResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteGrayEnvironmentResponseBody) SetRequestId(v string) *DeleteGrayEnvironmentResponseBody {
	s.RequestId = &v
	return s
}

type DeleteGrayEnvironmentResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteGrayEnvironmentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteGrayEnvironmentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGrayEnvironmentResponse) GoString() string {
	return s.String()
}

func (s *DeleteGrayEnvironmentResponse) SetHeaders(v map[string]*string) *DeleteGrayEnvironmentResponse {
	s.Headers = v
	return s
}

func (s *DeleteGrayEnvironmentResponse) SetBody(v *DeleteGrayEnvironmentResponseBody) *DeleteGrayEnvironmentResponse {
	s.Body = v
	return s
}

type DeleteK8sApplicationQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s DeleteK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *DeleteK8sApplicationQuery) SetAppId(v string) *DeleteK8sApplicationQuery {
	s.AppId = &v
	return s
}

type DeleteK8sApplicationRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sApplicationRequest) SetHeaders(v map[string]*string) *DeleteK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *DeleteK8sApplicationRequest) SetQuery(v *DeleteK8sApplicationQuery) *DeleteK8sApplicationRequest {
	s.Query = v
	return s
}

type DeleteK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sApplicationResponseBody) SetChangeOrderId(v string) *DeleteK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeleteK8sApplicationResponseBody) SetCode(v int) *DeleteK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sApplicationResponseBody) SetMessage(v string) *DeleteK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sApplicationResponseBody) SetRequestId(v string) *DeleteK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sApplicationResponse) SetHeaders(v map[string]*string) *DeleteK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sApplicationResponse) SetBody(v *DeleteK8sApplicationResponseBody) *DeleteK8sApplicationResponse {
	s.Body = v
	return s
}

type DeleteK8sConfigMapQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s DeleteK8sConfigMapQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sConfigMapQuery) GoString() string {
	return s.String()
}

func (s *DeleteK8sConfigMapQuery) SetClusterId(v string) *DeleteK8sConfigMapQuery {
	s.ClusterId = &v
	return s
}

func (s *DeleteK8sConfigMapQuery) SetName(v string) *DeleteK8sConfigMapQuery {
	s.Name = &v
	return s
}

func (s *DeleteK8sConfigMapQuery) SetNamespace(v string) *DeleteK8sConfigMapQuery {
	s.Namespace = &v
	return s
}

type DeleteK8sConfigMapRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteK8sConfigMapQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteK8sConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sConfigMapRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sConfigMapRequest) SetHeaders(v map[string]*string) *DeleteK8sConfigMapRequest {
	s.Headers = v
	return s
}

func (s *DeleteK8sConfigMapRequest) SetQuery(v *DeleteK8sConfigMapQuery) *DeleteK8sConfigMapRequest {
	s.Query = v
	return s
}

type DeleteK8sConfigMapResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteK8sConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sConfigMapResponseBody) SetCode(v int) *DeleteK8sConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sConfigMapResponseBody) SetMessage(v string) *DeleteK8sConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sConfigMapResponseBody) SetRequestId(v string) *DeleteK8sConfigMapResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sConfigMapResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sConfigMapResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sConfigMapResponse) SetHeaders(v map[string]*string) *DeleteK8sConfigMapResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sConfigMapResponse) SetBody(v *DeleteK8sConfigMapResponseBody) *DeleteK8sConfigMapResponse {
	s.Body = v
	return s
}

type DeleteK8sIngressRuleQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s DeleteK8sIngressRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sIngressRuleQuery) GoString() string {
	return s.String()
}

func (s *DeleteK8sIngressRuleQuery) SetClusterId(v string) *DeleteK8sIngressRuleQuery {
	s.ClusterId = &v
	return s
}

func (s *DeleteK8sIngressRuleQuery) SetName(v string) *DeleteK8sIngressRuleQuery {
	s.Name = &v
	return s
}

func (s *DeleteK8sIngressRuleQuery) SetNamespace(v string) *DeleteK8sIngressRuleQuery {
	s.Namespace = &v
	return s
}

type DeleteK8sIngressRuleRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteK8sIngressRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteK8sIngressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sIngressRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sIngressRuleRequest) SetHeaders(v map[string]*string) *DeleteK8sIngressRuleRequest {
	s.Headers = v
	return s
}

func (s *DeleteK8sIngressRuleRequest) SetQuery(v *DeleteK8sIngressRuleQuery) *DeleteK8sIngressRuleRequest {
	s.Query = v
	return s
}

type DeleteK8sIngressRuleResponseBody struct {
	Code    *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
}

func (s DeleteK8sIngressRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sIngressRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sIngressRuleResponseBody) SetCode(v int) *DeleteK8sIngressRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sIngressRuleResponseBody) SetMessage(v string) *DeleteK8sIngressRuleResponseBody {
	s.Message = &v
	return s
}

type DeleteK8sIngressRuleResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sIngressRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sIngressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sIngressRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sIngressRuleResponse) SetHeaders(v map[string]*string) *DeleteK8sIngressRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sIngressRuleResponse) SetBody(v *DeleteK8sIngressRuleResponseBody) *DeleteK8sIngressRuleResponse {
	s.Body = v
	return s
}

type DeleteK8sSecretQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s DeleteK8sSecretQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sSecretQuery) GoString() string {
	return s.String()
}

func (s *DeleteK8sSecretQuery) SetClusterId(v string) *DeleteK8sSecretQuery {
	s.ClusterId = &v
	return s
}

func (s *DeleteK8sSecretQuery) SetName(v string) *DeleteK8sSecretQuery {
	s.Name = &v
	return s
}

func (s *DeleteK8sSecretQuery) SetNamespace(v string) *DeleteK8sSecretQuery {
	s.Namespace = &v
	return s
}

type DeleteK8sSecretRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteK8sSecretQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteK8sSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sSecretRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sSecretRequest) SetHeaders(v map[string]*string) *DeleteK8sSecretRequest {
	s.Headers = v
	return s
}

func (s *DeleteK8sSecretRequest) SetQuery(v *DeleteK8sSecretQuery) *DeleteK8sSecretRequest {
	s.Query = v
	return s
}

type DeleteK8sSecretResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteK8sSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sSecretResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sSecretResponseBody) SetCode(v int) *DeleteK8sSecretResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sSecretResponseBody) SetMessage(v string) *DeleteK8sSecretResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sSecretResponseBody) SetRequestId(v string) *DeleteK8sSecretResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sSecretResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sSecretResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sSecretResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sSecretResponse) SetHeaders(v map[string]*string) *DeleteK8sSecretResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sSecretResponse) SetBody(v *DeleteK8sSecretResponseBody) *DeleteK8sSecretResponse {
	s.Body = v
	return s
}

type DeleteK8sServiceQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s DeleteK8sServiceQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sServiceQuery) GoString() string {
	return s.String()
}

func (s *DeleteK8sServiceQuery) SetAppId(v string) *DeleteK8sServiceQuery {
	s.AppId = &v
	return s
}

func (s *DeleteK8sServiceQuery) SetName(v string) *DeleteK8sServiceQuery {
	s.Name = &v
	return s
}

type DeleteK8sServiceRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteK8sServiceQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteK8sServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sServiceRequest) GoString() string {
	return s.String()
}

func (s *DeleteK8sServiceRequest) SetHeaders(v map[string]*string) *DeleteK8sServiceRequest {
	s.Headers = v
	return s
}

func (s *DeleteK8sServiceRequest) SetQuery(v *DeleteK8sServiceQuery) *DeleteK8sServiceRequest {
	s.Query = v
	return s
}

type DeleteK8sServiceResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteK8sServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteK8sServiceResponseBody) SetChangeOrderId(v string) *DeleteK8sServiceResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeleteK8sServiceResponseBody) SetCode(v int) *DeleteK8sServiceResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteK8sServiceResponseBody) SetMessage(v string) *DeleteK8sServiceResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteK8sServiceResponseBody) SetRequestId(v string) *DeleteK8sServiceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteK8sServiceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteK8sServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteK8sServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteK8sServiceResponse) GoString() string {
	return s.String()
}

func (s *DeleteK8sServiceResponse) SetHeaders(v map[string]*string) *DeleteK8sServiceResponse {
	s.Headers = v
	return s
}

func (s *DeleteK8sServiceResponse) SetBody(v *DeleteK8sServiceResponseBody) *DeleteK8sServiceResponse {
	s.Body = v
	return s
}

type DeleteLogPathQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DeleteLogPathQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogPathQuery) GoString() string {
	return s.String()
}

func (s *DeleteLogPathQuery) SetAppId(v string) *DeleteLogPathQuery {
	s.AppId = &v
	return s
}

func (s *DeleteLogPathQuery) SetPath(v string) *DeleteLogPathQuery {
	s.Path = &v
	return s
}

type DeleteLogPathRequest struct {
	Headers map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteLogPathQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteLogPathRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogPathRequest) GoString() string {
	return s.String()
}

func (s *DeleteLogPathRequest) SetHeaders(v map[string]*string) *DeleteLogPathRequest {
	s.Headers = v
	return s
}

func (s *DeleteLogPathRequest) SetQuery(v *DeleteLogPathQuery) *DeleteLogPathRequest {
	s.Query = v
	return s
}

type DeleteLogPathResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteLogPathResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogPathResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLogPathResponseBody) SetCode(v string) *DeleteLogPathResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteLogPathResponseBody) SetMessage(v string) *DeleteLogPathResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteLogPathResponseBody) SetRequestId(v string) *DeleteLogPathResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLogPathResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLogPathResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLogPathResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLogPathResponse) GoString() string {
	return s.String()
}

func (s *DeleteLogPathResponse) SetHeaders(v map[string]*string) *DeleteLogPathResponse {
	s.Headers = v
	return s
}

func (s *DeleteLogPathResponse) SetBody(v *DeleteLogPathResponseBody) *DeleteLogPathResponse {
	s.Body = v
	return s
}

type DeleteRoleQuery struct {
	RoleId *int `json:"RoleId,omitempty" xml:"RoleId,omitempty" require:"true"`
}

func (s DeleteRoleQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoleQuery) GoString() string {
	return s.String()
}

func (s *DeleteRoleQuery) SetRoleId(v int) *DeleteRoleQuery {
	s.RoleId = &v
	return s
}

type DeleteRoleRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteRoleQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoleRequest) GoString() string {
	return s.String()
}

func (s *DeleteRoleRequest) SetHeaders(v map[string]*string) *DeleteRoleRequest {
	s.Headers = v
	return s
}

func (s *DeleteRoleRequest) SetQuery(v *DeleteRoleQuery) *DeleteRoleRequest {
	s.Query = v
	return s
}

type DeleteRoleResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRoleResponseBody) SetCode(v int) *DeleteRoleResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteRoleResponseBody) SetMessage(v string) *DeleteRoleResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteRoleResponseBody) SetRequestId(v string) *DeleteRoleResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRoleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRoleResponse) GoString() string {
	return s.String()
}

func (s *DeleteRoleResponse) SetHeaders(v map[string]*string) *DeleteRoleResponse {
	s.Headers = v
	return s
}

func (s *DeleteRoleResponse) SetBody(v *DeleteRoleResponseBody) *DeleteRoleResponse {
	s.Body = v
	return s
}

type DeleteServiceGroupQuery struct {
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s DeleteServiceGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceGroupQuery) GoString() string {
	return s.String()
}

func (s *DeleteServiceGroupQuery) SetGroupId(v string) *DeleteServiceGroupQuery {
	s.GroupId = &v
	return s
}

type DeleteServiceGroupRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteServiceGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteServiceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteServiceGroupRequest) SetHeaders(v map[string]*string) *DeleteServiceGroupRequest {
	s.Headers = v
	return s
}

func (s *DeleteServiceGroupRequest) SetQuery(v *DeleteServiceGroupQuery) *DeleteServiceGroupRequest {
	s.Query = v
	return s
}

type DeleteServiceGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteServiceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteServiceGroupResponseBody) SetCode(v int) *DeleteServiceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteServiceGroupResponseBody) SetMessage(v string) *DeleteServiceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteServiceGroupResponseBody) SetRequestId(v string) *DeleteServiceGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteServiceGroupResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteServiceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteServiceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteServiceGroupResponse) SetHeaders(v map[string]*string) *DeleteServiceGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteServiceGroupResponse) SetBody(v *DeleteServiceGroupResponseBody) *DeleteServiceGroupResponse {
	s.Body = v
	return s
}

type DeleteServiceTimeConfigQuery struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteServiceTimeConfigQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceTimeConfigQuery) GoString() string {
	return s.String()
}

func (s *DeleteServiceTimeConfigQuery) SetId(v string) *DeleteServiceTimeConfigQuery {
	s.Id = &v
	return s
}

type DeleteServiceTimeConfigRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteServiceTimeConfigQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DeleteServiceTimeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceTimeConfigRequest) GoString() string {
	return s.String()
}

func (s *DeleteServiceTimeConfigRequest) SetHeaders(v map[string]*string) *DeleteServiceTimeConfigRequest {
	s.Headers = v
	return s
}

func (s *DeleteServiceTimeConfigRequest) SetQuery(v *DeleteServiceTimeConfigQuery) *DeleteServiceTimeConfigRequest {
	s.Query = v
	return s
}

type DeleteServiceTimeConfigResponseBody struct {
	Code    *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *DeleteServiceTimeConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s DeleteServiceTimeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceTimeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteServiceTimeConfigResponseBody) SetCode(v int) *DeleteServiceTimeConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteServiceTimeConfigResponseBody) SetMessage(v string) *DeleteServiceTimeConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteServiceTimeConfigResponseBody) SetSuccess(v bool) *DeleteServiceTimeConfigResponseBody {
	s.Success = &v
	return s
}

func (s *DeleteServiceTimeConfigResponseBody) SetData(v *DeleteServiceTimeConfigResponseBodyData) *DeleteServiceTimeConfigResponseBody {
	s.Data = v
	return s
}

type DeleteServiceTimeConfigResponseBodyData struct {
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Path            *string `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	Timeout         *string `json:"Timeout,omitempty" xml:"Timeout,omitempty" require:"true"`
}

func (s DeleteServiceTimeConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceTimeConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteServiceTimeConfigResponseBodyData) SetConsumerAppId(v string) *DeleteServiceTimeConfigResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *DeleteServiceTimeConfigResponseBodyData) SetConsumerAppName(v string) *DeleteServiceTimeConfigResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *DeleteServiceTimeConfigResponseBodyData) SetId(v int64) *DeleteServiceTimeConfigResponseBodyData {
	s.Id = &v
	return s
}

func (s *DeleteServiceTimeConfigResponseBodyData) SetPath(v string) *DeleteServiceTimeConfigResponseBodyData {
	s.Path = &v
	return s
}

func (s *DeleteServiceTimeConfigResponseBodyData) SetTimeout(v string) *DeleteServiceTimeConfigResponseBodyData {
	s.Timeout = &v
	return s
}

type DeleteServiceTimeConfigResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteServiceTimeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteServiceTimeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteServiceTimeConfigResponse) GoString() string {
	return s.String()
}

func (s *DeleteServiceTimeConfigResponse) SetHeaders(v map[string]*string) *DeleteServiceTimeConfigResponse {
	s.Headers = v
	return s
}

func (s *DeleteServiceTimeConfigResponse) SetBody(v *DeleteServiceTimeConfigResponseBody) *DeleteServiceTimeConfigResponse {
	s.Body = v
	return s
}

type DeleteSwimmingLaneQuery struct {
	LaneId *int64 `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneQuery) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneQuery) SetLaneId(v int64) *DeleteSwimmingLaneQuery {
	s.LaneId = &v
	return s
}

type DeleteSwimmingLaneRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteSwimmingLaneQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneRequest) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneRequest) SetHeaders(v map[string]*string) *DeleteSwimmingLaneRequest {
	s.Headers = v
	return s
}

func (s *DeleteSwimmingLaneRequest) SetQuery(v *DeleteSwimmingLaneQuery) *DeleteSwimmingLaneRequest {
	s.Query = v
	return s
}

type DeleteSwimmingLaneResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *int    `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneResponseBody) SetCode(v int) *DeleteSwimmingLaneResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSwimmingLaneResponseBody) SetData(v int) *DeleteSwimmingLaneResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteSwimmingLaneResponseBody) SetMessage(v string) *DeleteSwimmingLaneResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSwimmingLaneResponseBody) SetRequestId(v string) *DeleteSwimmingLaneResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSwimmingLaneResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteSwimmingLaneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneResponse) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneResponse) SetHeaders(v map[string]*string) *DeleteSwimmingLaneResponse {
	s.Headers = v
	return s
}

func (s *DeleteSwimmingLaneResponse) SetBody(v *DeleteSwimmingLaneResponseBody) *DeleteSwimmingLaneResponse {
	s.Body = v
	return s
}

type DeleteSwimmingLaneGroupQuery struct {
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneGroupQuery) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneGroupQuery) SetGroupId(v int64) *DeleteSwimmingLaneGroupQuery {
	s.GroupId = &v
	return s
}

type DeleteSwimmingLaneGroupRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteSwimmingLaneGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneGroupRequest) SetHeaders(v map[string]*string) *DeleteSwimmingLaneGroupRequest {
	s.Headers = v
	return s
}

func (s *DeleteSwimmingLaneGroupRequest) SetQuery(v *DeleteSwimmingLaneGroupQuery) *DeleteSwimmingLaneGroupRequest {
	s.Query = v
	return s
}

type DeleteSwimmingLaneGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *int    `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneGroupResponseBody) SetCode(v int) *DeleteSwimmingLaneGroupResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteSwimmingLaneGroupResponseBody) SetData(v int) *DeleteSwimmingLaneGroupResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteSwimmingLaneGroupResponseBody) SetMessage(v string) *DeleteSwimmingLaneGroupResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteSwimmingLaneGroupResponseBody) SetRequestId(v string) *DeleteSwimmingLaneGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSwimmingLaneGroupResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteSwimmingLaneGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSwimmingLaneGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSwimmingLaneGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteSwimmingLaneGroupResponse) SetHeaders(v map[string]*string) *DeleteSwimmingLaneGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteSwimmingLaneGroupResponse) SetBody(v *DeleteSwimmingLaneGroupResponseBody) *DeleteSwimmingLaneGroupResponse {
	s.Body = v
	return s
}

type DeleteUserDefineRegionQuery struct {
	Id        *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RegionTag *string `json:"RegionTag,omitempty" xml:"RegionTag,omitempty"`
}

func (s DeleteUserDefineRegionQuery) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionQuery) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionQuery) SetId(v int64) *DeleteUserDefineRegionQuery {
	s.Id = &v
	return s
}

func (s *DeleteUserDefineRegionQuery) SetRegionTag(v string) *DeleteUserDefineRegionQuery {
	s.RegionTag = &v
	return s
}

type DeleteUserDefineRegionRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeleteUserDefineRegionQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeleteUserDefineRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionRequest) SetHeaders(v map[string]*string) *DeleteUserDefineRegionRequest {
	s.Headers = v
	return s
}

func (s *DeleteUserDefineRegionRequest) SetQuery(v *DeleteUserDefineRegionQuery) *DeleteUserDefineRegionRequest {
	s.Query = v
	return s
}

type DeleteUserDefineRegionResponseBody struct {
	Code         *int                                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message      *string                                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionDefine *DeleteUserDefineRegionResponseBodyRegionDefine `json:"RegionDefine,omitempty" xml:"RegionDefine,omitempty" require:"true" type:"Struct"`
}

func (s DeleteUserDefineRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionResponseBody) SetCode(v int) *DeleteUserDefineRegionResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBody) SetMessage(v string) *DeleteUserDefineRegionResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBody) SetRequestId(v string) *DeleteUserDefineRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBody) SetRegionDefine(v *DeleteUserDefineRegionResponseBodyRegionDefine) *DeleteUserDefineRegionResponseBody {
	s.RegionDefine = v
	return s
}

type DeleteUserDefineRegionResponseBodyRegionDefine struct {
	BelongRegion *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty" require:"true"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RegionName   *string `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s DeleteUserDefineRegionResponseBodyRegionDefine) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionResponseBodyRegionDefine) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetBelongRegion(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.BelongRegion = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetDescription(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.Description = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetId(v int64) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.Id = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetRegionId(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.RegionId = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetRegionName(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.RegionName = &v
	return s
}

func (s *DeleteUserDefineRegionResponseBodyRegionDefine) SetUserId(v string) *DeleteUserDefineRegionResponseBodyRegionDefine {
	s.UserId = &v
	return s
}

type DeleteUserDefineRegionResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteUserDefineRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUserDefineRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserDefineRegionResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserDefineRegionResponse) SetHeaders(v map[string]*string) *DeleteUserDefineRegionResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserDefineRegionResponse) SetBody(v *DeleteUserDefineRegionResponseBody) *DeleteUserDefineRegionResponse {
	s.Body = v
	return s
}

type DeployApplicationQuery struct {
	AppEnv                 *string `json:"AppEnv,omitempty" xml:"AppEnv,omitempty"`
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Batch                  *int    `json:"Batch,omitempty" xml:"Batch,omitempty"`
	BatchWaitTime          *int    `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	BuildPackId            *int64  `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty"`
	ComponentIds           *string `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty"`
	DeployType             *string `json:"DeployType,omitempty" xml:"DeployType,omitempty" require:"true"`
	Desc                   *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Gray                   *bool   `json:"Gray,omitempty" xml:"Gray,omitempty"`
	GroupId                *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	ImageUrl               *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	PackageVersion         *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true"`
	ReleaseType            *int64  `json:"ReleaseType,omitempty" xml:"ReleaseType,omitempty"`
	TrafficControlStrategy *string `json:"TrafficControlStrategy,omitempty" xml:"TrafficControlStrategy,omitempty"`
	WarUrl                 *string `json:"WarUrl,omitempty" xml:"WarUrl,omitempty"`
}

func (s DeployApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationQuery) GoString() string {
	return s.String()
}

func (s *DeployApplicationQuery) SetAppEnv(v string) *DeployApplicationQuery {
	s.AppEnv = &v
	return s
}

func (s *DeployApplicationQuery) SetAppId(v string) *DeployApplicationQuery {
	s.AppId = &v
	return s
}

func (s *DeployApplicationQuery) SetBatch(v int) *DeployApplicationQuery {
	s.Batch = &v
	return s
}

func (s *DeployApplicationQuery) SetBatchWaitTime(v int) *DeployApplicationQuery {
	s.BatchWaitTime = &v
	return s
}

func (s *DeployApplicationQuery) SetBuildPackId(v int64) *DeployApplicationQuery {
	s.BuildPackId = &v
	return s
}

func (s *DeployApplicationQuery) SetComponentIds(v string) *DeployApplicationQuery {
	s.ComponentIds = &v
	return s
}

func (s *DeployApplicationQuery) SetDeployType(v string) *DeployApplicationQuery {
	s.DeployType = &v
	return s
}

func (s *DeployApplicationQuery) SetDesc(v string) *DeployApplicationQuery {
	s.Desc = &v
	return s
}

func (s *DeployApplicationQuery) SetGray(v bool) *DeployApplicationQuery {
	s.Gray = &v
	return s
}

func (s *DeployApplicationQuery) SetGroupId(v string) *DeployApplicationQuery {
	s.GroupId = &v
	return s
}

func (s *DeployApplicationQuery) SetImageUrl(v string) *DeployApplicationQuery {
	s.ImageUrl = &v
	return s
}

func (s *DeployApplicationQuery) SetPackageVersion(v string) *DeployApplicationQuery {
	s.PackageVersion = &v
	return s
}

func (s *DeployApplicationQuery) SetReleaseType(v int64) *DeployApplicationQuery {
	s.ReleaseType = &v
	return s
}

func (s *DeployApplicationQuery) SetTrafficControlStrategy(v string) *DeployApplicationQuery {
	s.TrafficControlStrategy = &v
	return s
}

func (s *DeployApplicationQuery) SetWarUrl(v string) *DeployApplicationQuery {
	s.WarUrl = &v
	return s
}

type DeployApplicationRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeployApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeployApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeployApplicationRequest) SetHeaders(v map[string]*string) *DeployApplicationRequest {
	s.Headers = v
	return s
}

func (s *DeployApplicationRequest) SetQuery(v *DeployApplicationQuery) *DeployApplicationRequest {
	s.Query = v
	return s
}

type DeployApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeployApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeployApplicationResponseBody) SetChangeOrderId(v string) *DeployApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeployApplicationResponseBody) SetCode(v int) *DeployApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeployApplicationResponseBody) SetMessage(v string) *DeployApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeployApplicationResponseBody) SetRequestId(v string) *DeployApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeployApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeployApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeployApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeployApplicationResponse) SetHeaders(v map[string]*string) *DeployApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeployApplicationResponse) SetBody(v *DeployApplicationResponseBody) *DeployApplicationResponse {
	s.Body = v
	return s
}

type DeployK8sApplicationQuery struct {
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Args                   *string `json:"Args,omitempty" xml:"Args,omitempty"`
	BatchTimeout           *int    `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	BatchWaitTime          *int    `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	ChangeOrderDesc        *string `json:"ChangeOrderDesc,omitempty" xml:"ChangeOrderDesc,omitempty"`
	Command                *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ConfigMountDescs       *string `json:"ConfigMountDescs,omitempty" xml:"ConfigMountDescs,omitempty"`
	CpuLimit               *int    `json:"CpuLimit,omitempty" xml:"CpuLimit,omitempty"`
	CpuRequest             *int    `json:"CpuRequest,omitempty" xml:"CpuRequest,omitempty"`
	DeployAcrossNodes      *string `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty"`
	DeployAcrossZones      *string `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty"`
	EdasContainerVersion   *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EmptyDirs              *string `json:"EmptyDirs,omitempty" xml:"EmptyDirs,omitempty"`
	EnableAhas             *bool   `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	EnvFroms               *string `json:"EnvFroms,omitempty" xml:"EnvFroms,omitempty"`
	Envs                   *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	Image                  *string `json:"Image,omitempty" xml:"Image,omitempty"`
	ImageTag               *string `json:"ImageTag,omitempty" xml:"ImageTag,omitempty"`
	JDK                    *string `json:"JDK,omitempty" xml:"JDK,omitempty"`
	JavaStartUpConfig      *string `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty"`
	Liveness               *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	LocalVolume            *string `json:"LocalVolume,omitempty" xml:"LocalVolume,omitempty"`
	McpuLimit              *int    `json:"McpuLimit,omitempty" xml:"McpuLimit,omitempty"`
	McpuRequest            *int    `json:"McpuRequest,omitempty" xml:"McpuRequest,omitempty"`
	MemoryLimit            *int    `json:"MemoryLimit,omitempty" xml:"MemoryLimit,omitempty"`
	MemoryRequest          *int    `json:"MemoryRequest,omitempty" xml:"MemoryRequest,omitempty"`
	MountDescs             *string `json:"MountDescs,omitempty" xml:"MountDescs,omitempty"`
	NasId                  *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	PackageUrl             *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	PackageVersion         *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	PackageVersionId       *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty"`
	PostStart              *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	PreStop                *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	PvcMountDescs          *string `json:"PvcMountDescs,omitempty" xml:"PvcMountDescs,omitempty"`
	Readiness              *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	Replicas               *int    `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	RuntimeClassName       *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty"`
	SlsConfigs             *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	StorageType            *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	TrafficControlStrategy *string `json:"TrafficControlStrategy,omitempty" xml:"TrafficControlStrategy,omitempty"`
	UpdateStrategy         *string `json:"UpdateStrategy,omitempty" xml:"UpdateStrategy,omitempty"`
	UriEncoding            *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	UseBodyEncoding        *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
	VolumesStr             *string `json:"VolumesStr,omitempty" xml:"VolumesStr,omitempty"`
	WebContainer           *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
	WebContainerConfig     *string `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty"`
}

func (s DeployK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s DeployK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *DeployK8sApplicationQuery) SetAppId(v string) *DeployK8sApplicationQuery {
	s.AppId = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetArgs(v string) *DeployK8sApplicationQuery {
	s.Args = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetBatchTimeout(v int) *DeployK8sApplicationQuery {
	s.BatchTimeout = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetBatchWaitTime(v int) *DeployK8sApplicationQuery {
	s.BatchWaitTime = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetChangeOrderDesc(v string) *DeployK8sApplicationQuery {
	s.ChangeOrderDesc = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetCommand(v string) *DeployK8sApplicationQuery {
	s.Command = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetConfigMountDescs(v string) *DeployK8sApplicationQuery {
	s.ConfigMountDescs = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetCpuLimit(v int) *DeployK8sApplicationQuery {
	s.CpuLimit = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetCpuRequest(v int) *DeployK8sApplicationQuery {
	s.CpuRequest = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetDeployAcrossNodes(v string) *DeployK8sApplicationQuery {
	s.DeployAcrossNodes = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetDeployAcrossZones(v string) *DeployK8sApplicationQuery {
	s.DeployAcrossZones = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetEdasContainerVersion(v string) *DeployK8sApplicationQuery {
	s.EdasContainerVersion = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetEmptyDirs(v string) *DeployK8sApplicationQuery {
	s.EmptyDirs = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetEnableAhas(v bool) *DeployK8sApplicationQuery {
	s.EnableAhas = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetEnvFroms(v string) *DeployK8sApplicationQuery {
	s.EnvFroms = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetEnvs(v string) *DeployK8sApplicationQuery {
	s.Envs = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetImage(v string) *DeployK8sApplicationQuery {
	s.Image = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetImageTag(v string) *DeployK8sApplicationQuery {
	s.ImageTag = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetJDK(v string) *DeployK8sApplicationQuery {
	s.JDK = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetJavaStartUpConfig(v string) *DeployK8sApplicationQuery {
	s.JavaStartUpConfig = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetLiveness(v string) *DeployK8sApplicationQuery {
	s.Liveness = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetLocalVolume(v string) *DeployK8sApplicationQuery {
	s.LocalVolume = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetMcpuLimit(v int) *DeployK8sApplicationQuery {
	s.McpuLimit = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetMcpuRequest(v int) *DeployK8sApplicationQuery {
	s.McpuRequest = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetMemoryLimit(v int) *DeployK8sApplicationQuery {
	s.MemoryLimit = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetMemoryRequest(v int) *DeployK8sApplicationQuery {
	s.MemoryRequest = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetMountDescs(v string) *DeployK8sApplicationQuery {
	s.MountDescs = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetNasId(v string) *DeployK8sApplicationQuery {
	s.NasId = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetPackageUrl(v string) *DeployK8sApplicationQuery {
	s.PackageUrl = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetPackageVersion(v string) *DeployK8sApplicationQuery {
	s.PackageVersion = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetPackageVersionId(v string) *DeployK8sApplicationQuery {
	s.PackageVersionId = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetPostStart(v string) *DeployK8sApplicationQuery {
	s.PostStart = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetPreStop(v string) *DeployK8sApplicationQuery {
	s.PreStop = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetPvcMountDescs(v string) *DeployK8sApplicationQuery {
	s.PvcMountDescs = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetReadiness(v string) *DeployK8sApplicationQuery {
	s.Readiness = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetReplicas(v int) *DeployK8sApplicationQuery {
	s.Replicas = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetRuntimeClassName(v string) *DeployK8sApplicationQuery {
	s.RuntimeClassName = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetSlsConfigs(v string) *DeployK8sApplicationQuery {
	s.SlsConfigs = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetStorageType(v string) *DeployK8sApplicationQuery {
	s.StorageType = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetTrafficControlStrategy(v string) *DeployK8sApplicationQuery {
	s.TrafficControlStrategy = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetUpdateStrategy(v string) *DeployK8sApplicationQuery {
	s.UpdateStrategy = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetUriEncoding(v string) *DeployK8sApplicationQuery {
	s.UriEncoding = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetUseBodyEncoding(v bool) *DeployK8sApplicationQuery {
	s.UseBodyEncoding = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetVolumesStr(v string) *DeployK8sApplicationQuery {
	s.VolumesStr = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetWebContainer(v string) *DeployK8sApplicationQuery {
	s.WebContainer = &v
	return s
}

func (s *DeployK8sApplicationQuery) SetWebContainerConfig(v string) *DeployK8sApplicationQuery {
	s.WebContainerConfig = &v
	return s
}

type DeployK8sApplicationRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DeployK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DeployK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DeployK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *DeployK8sApplicationRequest) SetHeaders(v map[string]*string) *DeployK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *DeployK8sApplicationRequest) SetQuery(v *DeployK8sApplicationQuery) *DeployK8sApplicationRequest {
	s.Query = v
	return s
}

type DeployK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DeployK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeployK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DeployK8sApplicationResponseBody) SetChangeOrderId(v string) *DeployK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *DeployK8sApplicationResponseBody) SetCode(v int) *DeployK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *DeployK8sApplicationResponseBody) SetMessage(v string) *DeployK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *DeployK8sApplicationResponseBody) SetRequestId(v string) *DeployK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type DeployK8sApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeployK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeployK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DeployK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *DeployK8sApplicationResponse) SetHeaders(v map[string]*string) *DeployK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *DeployK8sApplicationResponse) SetBody(v *DeployK8sApplicationResponseBody) *DeployK8sApplicationResponse {
	s.Body = v
	return s
}

type DescribeAppInstanceListQuery struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	WithNodeInfo *bool   `json:"WithNodeInfo,omitempty" xml:"WithNodeInfo,omitempty"`
}

func (s DescribeAppInstanceListQuery) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListQuery) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListQuery) SetAppId(v string) *DescribeAppInstanceListQuery {
	s.AppId = &v
	return s
}

func (s *DescribeAppInstanceListQuery) SetWithNodeInfo(v bool) *DescribeAppInstanceListQuery {
	s.WithNodeInfo = &v
	return s
}

type DescribeAppInstanceListRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DescribeAppInstanceListQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DescribeAppInstanceListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListRequest) SetHeaders(v map[string]*string) *DescribeAppInstanceListRequest {
	s.Headers = v
	return s
}

func (s *DescribeAppInstanceListRequest) SetQuery(v *DescribeAppInstanceListQuery) *DescribeAppInstanceListRequest {
	s.Query = v
	return s
}

type DescribeAppInstanceListResponseBody struct {
	Code         *int                                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message      *string                                            `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	InstanceList []*DescribeAppInstanceListResponseBodyInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeAppInstanceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListResponseBody) SetCode(v int) *DescribeAppInstanceListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAppInstanceListResponseBody) SetMessage(v string) *DescribeAppInstanceListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAppInstanceListResponseBody) SetRequestId(v string) *DescribeAppInstanceListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppInstanceListResponseBody) SetInstanceList(v []*DescribeAppInstanceListResponseBodyInstanceList) *DescribeAppInstanceListResponseBody {
	s.InstanceList = v
	return s
}

type DescribeAppInstanceListResponseBodyInstanceList struct {
	AppId      *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Canary     *bool   `json:"Canary,omitempty" xml:"Canary,omitempty" require:"true"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	NodeLabels *string `json:"NodeLabels,omitempty" xml:"NodeLabels,omitempty" require:"true"`
	NodeName   *string `json:"NodeName,omitempty" xml:"NodeName,omitempty" require:"true"`
	PodRaw     *string `json:"PodRaw,omitempty" xml:"PodRaw,omitempty" require:"true"`
	Version    *string `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
}

func (s DescribeAppInstanceListResponseBodyInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListResponseBodyInstanceList) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetAppId(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.AppId = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetCanary(v bool) *DescribeAppInstanceListResponseBodyInstanceList {
	s.Canary = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetGroupId(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.GroupId = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetGroupName(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.GroupName = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetNodeLabels(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.NodeLabels = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetNodeName(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.NodeName = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetPodRaw(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.PodRaw = &v
	return s
}

func (s *DescribeAppInstanceListResponseBodyInstanceList) SetVersion(v string) *DescribeAppInstanceListResponseBodyInstanceList {
	s.Version = &v
	return s
}

type DescribeAppInstanceListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeAppInstanceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAppInstanceListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppInstanceListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppInstanceListResponse) SetHeaders(v map[string]*string) *DescribeAppInstanceListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppInstanceListResponse) SetBody(v *DescribeAppInstanceListResponseBody) *DescribeAppInstanceListResponse {
	s.Body = v
	return s
}

type DescribeApplicationScalingRuleQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DescribeApplicationScalingRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleQuery) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleQuery) SetAppId(v string) *DescribeApplicationScalingRuleQuery {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationScalingRuleQuery) SetScalingRuleName(v string) *DescribeApplicationScalingRuleQuery {
	s.ScalingRuleName = &v
	return s
}

type DescribeApplicationScalingRuleRequest struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DescribeApplicationScalingRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DescribeApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleRequest) SetHeaders(v map[string]*string) *DescribeApplicationScalingRuleRequest {
	s.Headers = v
	return s
}

func (s *DescribeApplicationScalingRuleRequest) SetQuery(v *DescribeApplicationScalingRuleQuery) *DescribeApplicationScalingRuleRequest {
	s.Query = v
	return s
}

type DescribeApplicationScalingRuleResponseBody struct {
	Code           *int                                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message        *string                                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AppScalingRule *DescribeApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" require:"true" type:"Struct"`
}

func (s DescribeApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBody) SetCode(v int) *DescribeApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetMessage(v string) *DescribeApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetRequestId(v string) *DescribeApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBody) SetAppScalingRule(v *DescribeApplicationScalingRuleResponseBodyAppScalingRule) *DescribeApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

type DescribeApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                         `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime       *int64                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastDisableTime  *int64                                                          `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty" require:"true"`
	MaxReplicas      *int                                                            `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas      *int                                                            `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	ScaleRuleEnabled *bool                                                           `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty" require:"true"`
	ScaleRuleName    *string                                                         `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty" require:"true"`
	ScaleRuleType    *string                                                         `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty" require:"true"`
	UpdateTime       *int64                                                          `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	Metric           *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric `json:"Metric,omitempty" xml:"Metric,omitempty" require:"true" type:"Struct"`
}

func (s DescribeApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric) *DescribeApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

type DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int                                                                     `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                     `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Metrics     []*DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int) *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int) *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

type DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int    `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty" require:"true"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty" require:"true"`
}

func (s DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int) *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *DescribeApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type DescribeApplicationScalingRuleResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DescribeApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationScalingRuleResponse) SetBody(v *DescribeApplicationScalingRuleResponseBody) *DescribeApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type DescribeApplicationScalingRulesQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s DescribeApplicationScalingRulesQuery) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesQuery) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesQuery) SetAppId(v string) *DescribeApplicationScalingRulesQuery {
	s.AppId = &v
	return s
}

type DescribeApplicationScalingRulesRequest struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DescribeApplicationScalingRulesQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DescribeApplicationScalingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesRequest) SetHeaders(v map[string]*string) *DescribeApplicationScalingRulesRequest {
	s.Headers = v
	return s
}

func (s *DescribeApplicationScalingRulesRequest) SetQuery(v *DescribeApplicationScalingRulesQuery) *DescribeApplicationScalingRulesRequest {
	s.Query = v
	return s
}

type DescribeApplicationScalingRulesResponseBody struct {
	Code            *int                                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AppScalingRules *DescribeApplicationScalingRulesResponseBodyAppScalingRules `json:"AppScalingRules,omitempty" xml:"AppScalingRules,omitempty" require:"true" type:"Struct"`
}

func (s DescribeApplicationScalingRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBody) SetCode(v int) *DescribeApplicationScalingRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetMessage(v string) *DescribeApplicationScalingRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetRequestId(v string) *DescribeApplicationScalingRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBody) SetAppScalingRules(v *DescribeApplicationScalingRulesResponseBodyAppScalingRules) *DescribeApplicationScalingRulesResponseBody {
	s.AppScalingRules = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRules struct {
	CurrentPage *int                                                                `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize    *int                                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize   *int64                                                              `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result      []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRules) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetCurrentPage(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.CurrentPage = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetPageSize(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.PageSize = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetTotalSize(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.TotalSize = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRules) SetResult(v []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) *DescribeApplicationScalingRulesResponseBodyAppScalingRules {
	s.Result = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult struct {
	AppId            *string                                                                  `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime       *int64                                                                   `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastDisableTime  *int64                                                                   `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty" require:"true"`
	MaxReplicas      *int                                                                     `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas      *int                                                                     `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	ScaleRuleEnabled *bool                                                                    `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty" require:"true"`
	ScaleRuleName    *string                                                                  `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty" require:"true"`
	ScaleRuleType    *string                                                                  `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty" require:"true"`
	UpdateTime       *int64                                                                   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	Metric           *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" require:"true" type:"Struct"`
	Trigger          *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" require:"true" type:"Struct"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetAppId(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.AppId = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetCreateTime(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetLastDisableTime(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.LastDisableTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetMaxReplicas(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetMinReplicas(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetScaleRuleEnabled(v bool) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetScaleRuleName(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.ScaleRuleName = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetScaleRuleType(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.ScaleRuleType = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetUpdateTime(v int64) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.UpdateTime = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetMetric(v *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.Metric = v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult) SetTrigger(v *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResult {
	s.Trigger = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric struct {
	MaxReplicas *int                                                                             `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                             `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Metrics     []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) SetMaxReplicas(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) SetMinReplicas(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric) SetMetrics(v []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetric {
	s.Metrics = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics struct {
	MetricTargetAverageUtilization *int    `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty" require:"true"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty" require:"true"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) SetMetricTargetAverageUtilization(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics) SetMetricType(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultMetricMetrics {
	s.MetricType = &v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger struct {
	MaxReplicas *int                                                                               `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                               `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Triggers    []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" require:"true" type:"Repeated"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) SetMaxReplicas(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) SetMinReplicas(v int) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger {
	s.MinReplicas = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger) SetTriggers(v []*DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTrigger {
	s.Triggers = v
	return s
}

type DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) SetMetaData(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) SetName(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers {
	s.Name = &v
	return s
}

func (s *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers) SetType(v string) *DescribeApplicationScalingRulesResponseBodyAppScalingRulesResultTriggerTriggers {
	s.Type = &v
	return s
}

type DescribeApplicationScalingRulesResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeApplicationScalingRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeApplicationScalingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeApplicationScalingRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeApplicationScalingRulesResponse) SetHeaders(v map[string]*string) *DescribeApplicationScalingRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeApplicationScalingRulesResponse) SetBody(v *DescribeApplicationScalingRulesResponseBody) *DescribeApplicationScalingRulesResponse {
	s.Body = v
	return s
}

type DescribeLocalitySettingQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	Region      *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
}

func (s DescribeLocalitySettingQuery) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalitySettingQuery) GoString() string {
	return s.String()
}

func (s *DescribeLocalitySettingQuery) SetAppId(v string) *DescribeLocalitySettingQuery {
	s.AppId = &v
	return s
}

func (s *DescribeLocalitySettingQuery) SetNamespaceId(v string) *DescribeLocalitySettingQuery {
	s.NamespaceId = &v
	return s
}

func (s *DescribeLocalitySettingQuery) SetRegion(v string) *DescribeLocalitySettingQuery {
	s.Region = &v
	return s
}

type DescribeLocalitySettingRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DescribeLocalitySettingQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DescribeLocalitySettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalitySettingRequest) GoString() string {
	return s.String()
}

func (s *DescribeLocalitySettingRequest) SetHeaders(v map[string]*string) *DescribeLocalitySettingRequest {
	s.Headers = v
	return s
}

func (s *DescribeLocalitySettingRequest) SetQuery(v *DescribeLocalitySettingQuery) *DescribeLocalitySettingRequest {
	s.Query = v
	return s
}

type DescribeLocalitySettingResponseBody struct {
	Code           *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpStatusCode *int                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty" require:"true"`
	Message        *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data           *DescribeLocalitySettingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s DescribeLocalitySettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalitySettingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLocalitySettingResponseBody) SetCode(v int) *DescribeLocalitySettingResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeLocalitySettingResponseBody) SetHttpStatusCode(v int) *DescribeLocalitySettingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeLocalitySettingResponseBody) SetMessage(v string) *DescribeLocalitySettingResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeLocalitySettingResponseBody) SetRequestId(v string) *DescribeLocalitySettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLocalitySettingResponseBody) SetSuccess(v bool) *DescribeLocalitySettingResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeLocalitySettingResponseBody) SetData(v *DescribeLocalitySettingResponseBodyData) *DescribeLocalitySettingResponseBody {
	s.Data = v
	return s
}

type DescribeLocalitySettingResponseBodyData struct {
	Enabled   *bool    `json:"Enabled,omitempty" xml:"Enabled,omitempty" require:"true"`
	Threshold *float32 `json:"Threshold,omitempty" xml:"Threshold,omitempty" require:"true"`
}

func (s DescribeLocalitySettingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalitySettingResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeLocalitySettingResponseBodyData) SetEnabled(v bool) *DescribeLocalitySettingResponseBodyData {
	s.Enabled = &v
	return s
}

func (s *DescribeLocalitySettingResponseBodyData) SetThreshold(v float32) *DescribeLocalitySettingResponseBodyData {
	s.Threshold = &v
	return s
}

type DescribeLocalitySettingResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLocalitySettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLocalitySettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLocalitySettingResponse) GoString() string {
	return s.String()
}

func (s *DescribeLocalitySettingResponse) SetHeaders(v map[string]*string) *DescribeLocalitySettingResponse {
	s.Headers = v
	return s
}

func (s *DescribeLocalitySettingResponse) SetBody(v *DescribeLocalitySettingResponseBody) *DescribeLocalitySettingResponse {
	s.Body = v
	return s
}

type DisableApplicationScalingRuleQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s DisableApplicationScalingRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleQuery) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleQuery) SetAppId(v string) *DisableApplicationScalingRuleQuery {
	s.AppId = &v
	return s
}

func (s *DisableApplicationScalingRuleQuery) SetScalingRuleName(v string) *DisableApplicationScalingRuleQuery {
	s.ScalingRuleName = &v
	return s
}

type DisableApplicationScalingRuleRequest struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DisableApplicationScalingRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s DisableApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleRequest) SetHeaders(v map[string]*string) *DisableApplicationScalingRuleRequest {
	s.Headers = v
	return s
}

func (s *DisableApplicationScalingRuleRequest) SetQuery(v *DisableApplicationScalingRuleQuery) *DisableApplicationScalingRuleRequest {
	s.Query = v
	return s
}

type DisableApplicationScalingRuleResponseBody struct {
	Code           *int                                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message        *string                                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AppScalingRule *DisableApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" require:"true" type:"Struct"`
}

func (s DisableApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBody) SetCode(v int) *DisableApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetMessage(v string) *DisableApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetRequestId(v string) *DisableApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBody) SetAppScalingRule(v *DisableApplicationScalingRuleResponseBodyAppScalingRule) *DisableApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                         `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime       *int64                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastDisableTime  *int64                                                          `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty" require:"true"`
	MaxReplicas      *int                                                            `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas      *int                                                            `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	ScaleRuleEnabled *bool                                                           `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty" require:"true"`
	ScaleRuleName    *string                                                         `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty" require:"true"`
	ScaleRuleType    *string                                                         `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty" require:"true"`
	UpdateTime       *int64                                                          `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	Metric           *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" require:"true" type:"Struct"`
	Trigger          *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" require:"true" type:"Struct"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *DisableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int                                                                    `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                    `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Metrics     []*DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" require:"true" type:"Repeated"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int    `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty" require:"true"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty" require:"true"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int                                                                      `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                      `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Triggers    []*DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" require:"true" type:"Repeated"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *DisableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type DisableApplicationScalingRuleResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *DisableApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableApplicationScalingRuleResponse) SetBody(v *DisableApplicationScalingRuleResponseBody) *DisableApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type DisableDegradeControlQuery struct {
	AppId  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s DisableDegradeControlQuery) String() string {
	return tea.Prettify(s)
}

func (s DisableDegradeControlQuery) GoString() string {
	return s.String()
}

func (s *DisableDegradeControlQuery) SetAppId(v string) *DisableDegradeControlQuery {
	s.AppId = &v
	return s
}

func (s *DisableDegradeControlQuery) SetRuleId(v string) *DisableDegradeControlQuery {
	s.RuleId = &v
	return s
}

type DisableDegradeControlRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DisableDegradeControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DisableDegradeControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableDegradeControlRequest) GoString() string {
	return s.String()
}

func (s *DisableDegradeControlRequest) SetHeaders(v map[string]*string) *DisableDegradeControlRequest {
	s.Headers = v
	return s
}

func (s *DisableDegradeControlRequest) SetQuery(v *DisableDegradeControlQuery) *DisableDegradeControlRequest {
	s.Query = v
	return s
}

type DisableDegradeControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DisableDegradeControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableDegradeControlResponseBody) GoString() string {
	return s.String()
}

func (s *DisableDegradeControlResponseBody) SetCode(v int) *DisableDegradeControlResponseBody {
	s.Code = &v
	return s
}

func (s *DisableDegradeControlResponseBody) SetMessage(v string) *DisableDegradeControlResponseBody {
	s.Message = &v
	return s
}

func (s *DisableDegradeControlResponseBody) SetRequestId(v string) *DisableDegradeControlResponseBody {
	s.RequestId = &v
	return s
}

type DisableDegradeControlResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableDegradeControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableDegradeControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableDegradeControlResponse) GoString() string {
	return s.String()
}

func (s *DisableDegradeControlResponse) SetHeaders(v map[string]*string) *DisableDegradeControlResponse {
	s.Headers = v
	return s
}

func (s *DisableDegradeControlResponse) SetBody(v *DisableDegradeControlResponseBody) *DisableDegradeControlResponse {
	s.Body = v
	return s
}

type DisableFlowControlQuery struct {
	AppId  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s DisableFlowControlQuery) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowControlQuery) GoString() string {
	return s.String()
}

func (s *DisableFlowControlQuery) SetAppId(v string) *DisableFlowControlQuery {
	s.AppId = &v
	return s
}

func (s *DisableFlowControlQuery) SetRuleId(v string) *DisableFlowControlQuery {
	s.RuleId = &v
	return s
}

type DisableFlowControlRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DisableFlowControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DisableFlowControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowControlRequest) GoString() string {
	return s.String()
}

func (s *DisableFlowControlRequest) SetHeaders(v map[string]*string) *DisableFlowControlRequest {
	s.Headers = v
	return s
}

func (s *DisableFlowControlRequest) SetQuery(v *DisableFlowControlQuery) *DisableFlowControlRequest {
	s.Query = v
	return s
}

type DisableFlowControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s DisableFlowControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowControlResponseBody) GoString() string {
	return s.String()
}

func (s *DisableFlowControlResponseBody) SetCode(v int) *DisableFlowControlResponseBody {
	s.Code = &v
	return s
}

func (s *DisableFlowControlResponseBody) SetMessage(v string) *DisableFlowControlResponseBody {
	s.Message = &v
	return s
}

func (s *DisableFlowControlResponseBody) SetRequestId(v string) *DisableFlowControlResponseBody {
	s.RequestId = &v
	return s
}

type DisableFlowControlResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableFlowControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableFlowControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableFlowControlResponse) GoString() string {
	return s.String()
}

func (s *DisableFlowControlResponse) SetHeaders(v map[string]*string) *DisableFlowControlResponse {
	s.Headers = v
	return s
}

func (s *DisableFlowControlResponse) SetBody(v *DisableFlowControlResponseBody) *DisableFlowControlResponse {
	s.Body = v
	return s
}

type DisableMockRuleQuery struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s DisableMockRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleQuery) GoString() string {
	return s.String()
}

func (s *DisableMockRuleQuery) SetId(v int64) *DisableMockRuleQuery {
	s.Id = &v
	return s
}

type DisableMockRuleRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *DisableMockRuleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s DisableMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleRequest) GoString() string {
	return s.String()
}

func (s *DisableMockRuleRequest) SetHeaders(v map[string]*string) *DisableMockRuleRequest {
	s.Headers = v
	return s
}

func (s *DisableMockRuleRequest) SetQuery(v *DisableMockRuleQuery) *DisableMockRuleRequest {
	s.Query = v
	return s
}

type DisableMockRuleResponseBody struct {
	Code      *int                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *DisableMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s DisableMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DisableMockRuleResponseBody) SetCode(v int) *DisableMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *DisableMockRuleResponseBody) SetMessage(v string) *DisableMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *DisableMockRuleResponseBody) SetRequestId(v string) *DisableMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableMockRuleResponseBody) SetSuccess(v bool) *DisableMockRuleResponseBody {
	s.Success = &v
	return s
}

func (s *DisableMockRuleResponseBody) SetData(v *DisableMockRuleResponseBodyData) *DisableMockRuleResponseBody {
	s.Data = v
	return s
}

type DisableMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s DisableMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *DisableMockRuleResponseBodyData) SetAccountId(v string) *DisableMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetConsumerAppId(v string) *DisableMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetConsumerAppName(v string) *DisableMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetEnable(v bool) *DisableMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetExtraJson(v string) *DisableMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetId(v int64) *DisableMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetName(v string) *DisableMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetNamespaceId(v string) *DisableMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetProviderAppId(v string) *DisableMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetProviderAppName(v string) *DisableMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetRegion(v string) *DisableMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetScMockItemJson(v string) *DisableMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *DisableMockRuleResponseBodyData) SetSource(v string) *DisableMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type DisableMockRuleResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DisableMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableMockRuleResponse) GoString() string {
	return s.String()
}

func (s *DisableMockRuleResponse) SetHeaders(v map[string]*string) *DisableMockRuleResponse {
	s.Headers = v
	return s
}

func (s *DisableMockRuleResponse) SetBody(v *DisableMockRuleResponseBody) *DisableMockRuleResponse {
	s.Body = v
	return s
}

type EnableApplicationScalingRuleQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
}

func (s EnableApplicationScalingRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleQuery) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleQuery) SetAppId(v string) *EnableApplicationScalingRuleQuery {
	s.AppId = &v
	return s
}

func (s *EnableApplicationScalingRuleQuery) SetScalingRuleName(v string) *EnableApplicationScalingRuleQuery {
	s.ScalingRuleName = &v
	return s
}

type EnableApplicationScalingRuleRequest struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *EnableApplicationScalingRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s EnableApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleRequest) SetHeaders(v map[string]*string) *EnableApplicationScalingRuleRequest {
	s.Headers = v
	return s
}

func (s *EnableApplicationScalingRuleRequest) SetQuery(v *EnableApplicationScalingRuleQuery) *EnableApplicationScalingRuleRequest {
	s.Query = v
	return s
}

type EnableApplicationScalingRuleResponseBody struct {
	Code           *int                                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message        *string                                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AppScalingRule *EnableApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" require:"true" type:"Struct"`
}

func (s EnableApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBody) SetCode(v int) *EnableApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetMessage(v string) *EnableApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetRequestId(v string) *EnableApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBody) SetAppScalingRule(v *EnableApplicationScalingRuleResponseBodyAppScalingRule) *EnableApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                        `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime       *int64                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastDisableTime  *int64                                                         `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty" require:"true"`
	MaxReplicas      *int                                                           `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas      *int                                                           `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	ScaleRuleEnabled *bool                                                          `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty" require:"true"`
	ScaleRuleName    *string                                                        `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty" require:"true"`
	ScaleRuleType    *string                                                        `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty" require:"true"`
	UpdateTime       *int64                                                         `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	Metric           *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" require:"true" type:"Struct"`
	Trigger          *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" require:"true" type:"Struct"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *EnableApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int                                                                   `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                   `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Metrics     []*EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" require:"true" type:"Repeated"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int    `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty" require:"true"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty" require:"true"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int                                                                     `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                     `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Triggers    []*EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" require:"true" type:"Repeated"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *EnableApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type EnableApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *EnableApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableApplicationScalingRuleResponse) SetBody(v *EnableApplicationScalingRuleResponseBody) *EnableApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type EnableDegradeControlQuery struct {
	AppId  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s EnableDegradeControlQuery) String() string {
	return tea.Prettify(s)
}

func (s EnableDegradeControlQuery) GoString() string {
	return s.String()
}

func (s *EnableDegradeControlQuery) SetAppId(v string) *EnableDegradeControlQuery {
	s.AppId = &v
	return s
}

func (s *EnableDegradeControlQuery) SetRuleId(v string) *EnableDegradeControlQuery {
	s.RuleId = &v
	return s
}

type EnableDegradeControlRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *EnableDegradeControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s EnableDegradeControlRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableDegradeControlRequest) GoString() string {
	return s.String()
}

func (s *EnableDegradeControlRequest) SetHeaders(v map[string]*string) *EnableDegradeControlRequest {
	s.Headers = v
	return s
}

func (s *EnableDegradeControlRequest) SetQuery(v *EnableDegradeControlQuery) *EnableDegradeControlRequest {
	s.Query = v
	return s
}

type EnableDegradeControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s EnableDegradeControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableDegradeControlResponseBody) GoString() string {
	return s.String()
}

func (s *EnableDegradeControlResponseBody) SetCode(v int) *EnableDegradeControlResponseBody {
	s.Code = &v
	return s
}

func (s *EnableDegradeControlResponseBody) SetMessage(v string) *EnableDegradeControlResponseBody {
	s.Message = &v
	return s
}

func (s *EnableDegradeControlResponseBody) SetRequestId(v string) *EnableDegradeControlResponseBody {
	s.RequestId = &v
	return s
}

type EnableDegradeControlResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableDegradeControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableDegradeControlResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableDegradeControlResponse) GoString() string {
	return s.String()
}

func (s *EnableDegradeControlResponse) SetHeaders(v map[string]*string) *EnableDegradeControlResponse {
	s.Headers = v
	return s
}

func (s *EnableDegradeControlResponse) SetBody(v *EnableDegradeControlResponseBody) *EnableDegradeControlResponse {
	s.Body = v
	return s
}

type EnableFlowControlQuery struct {
	AppId  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
}

func (s EnableFlowControlQuery) String() string {
	return tea.Prettify(s)
}

func (s EnableFlowControlQuery) GoString() string {
	return s.String()
}

func (s *EnableFlowControlQuery) SetAppId(v string) *EnableFlowControlQuery {
	s.AppId = &v
	return s
}

func (s *EnableFlowControlQuery) SetRuleId(v string) *EnableFlowControlQuery {
	s.RuleId = &v
	return s
}

type EnableFlowControlRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *EnableFlowControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s EnableFlowControlRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableFlowControlRequest) GoString() string {
	return s.String()
}

func (s *EnableFlowControlRequest) SetHeaders(v map[string]*string) *EnableFlowControlRequest {
	s.Headers = v
	return s
}

func (s *EnableFlowControlRequest) SetQuery(v *EnableFlowControlQuery) *EnableFlowControlRequest {
	s.Query = v
	return s
}

type EnableFlowControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s EnableFlowControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableFlowControlResponseBody) GoString() string {
	return s.String()
}

func (s *EnableFlowControlResponseBody) SetCode(v int) *EnableFlowControlResponseBody {
	s.Code = &v
	return s
}

func (s *EnableFlowControlResponseBody) SetMessage(v string) *EnableFlowControlResponseBody {
	s.Message = &v
	return s
}

func (s *EnableFlowControlResponseBody) SetRequestId(v string) *EnableFlowControlResponseBody {
	s.RequestId = &v
	return s
}

type EnableFlowControlResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableFlowControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableFlowControlResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableFlowControlResponse) GoString() string {
	return s.String()
}

func (s *EnableFlowControlResponse) SetHeaders(v map[string]*string) *EnableFlowControlResponse {
	s.Headers = v
	return s
}

func (s *EnableFlowControlResponse) SetBody(v *EnableFlowControlResponseBody) *EnableFlowControlResponse {
	s.Body = v
	return s
}

type EnableMockRuleQuery struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s EnableMockRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleQuery) GoString() string {
	return s.String()
}

func (s *EnableMockRuleQuery) SetId(v int64) *EnableMockRuleQuery {
	s.Id = &v
	return s
}

type EnableMockRuleRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *EnableMockRuleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s EnableMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleRequest) GoString() string {
	return s.String()
}

func (s *EnableMockRuleRequest) SetHeaders(v map[string]*string) *EnableMockRuleRequest {
	s.Headers = v
	return s
}

func (s *EnableMockRuleRequest) SetQuery(v *EnableMockRuleQuery) *EnableMockRuleRequest {
	s.Query = v
	return s
}

type EnableMockRuleResponseBody struct {
	Code      *int                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *EnableMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s EnableMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *EnableMockRuleResponseBody) SetCode(v int) *EnableMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *EnableMockRuleResponseBody) SetMessage(v string) *EnableMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *EnableMockRuleResponseBody) SetRequestId(v string) *EnableMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableMockRuleResponseBody) SetSuccess(v bool) *EnableMockRuleResponseBody {
	s.Success = &v
	return s
}

func (s *EnableMockRuleResponseBody) SetData(v *EnableMockRuleResponseBodyData) *EnableMockRuleResponseBody {
	s.Data = v
	return s
}

type EnableMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s EnableMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *EnableMockRuleResponseBodyData) SetAccountId(v string) *EnableMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetConsumerAppId(v string) *EnableMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetConsumerAppName(v string) *EnableMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetEnable(v bool) *EnableMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetExtraJson(v string) *EnableMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetId(v int64) *EnableMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetName(v string) *EnableMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetNamespaceId(v string) *EnableMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetProviderAppId(v string) *EnableMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetProviderAppName(v string) *EnableMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetRegion(v string) *EnableMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetScMockItemJson(v string) *EnableMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *EnableMockRuleResponseBodyData) SetSource(v string) *EnableMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type EnableMockRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *EnableMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableMockRuleResponse) GoString() string {
	return s.String()
}

func (s *EnableMockRuleResponse) SetHeaders(v map[string]*string) *EnableMockRuleResponse {
	s.Headers = v
	return s
}

func (s *EnableMockRuleResponse) SetBody(v *EnableMockRuleResponseBody) *EnableMockRuleResponse {
	s.Body = v
	return s
}

type ExecuteStatusQuery struct {
	AccountId   *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Ip          *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	PodName     *string `json:"PodName,omitempty" xml:"PodName,omitempty"`
	Region      *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Source      *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
}

func (s ExecuteStatusQuery) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatusQuery) GoString() string {
	return s.String()
}

func (s *ExecuteStatusQuery) SetAccountId(v string) *ExecuteStatusQuery {
	s.AccountId = &v
	return s
}

func (s *ExecuteStatusQuery) SetAppId(v string) *ExecuteStatusQuery {
	s.AppId = &v
	return s
}

func (s *ExecuteStatusQuery) SetIp(v string) *ExecuteStatusQuery {
	s.Ip = &v
	return s
}

func (s *ExecuteStatusQuery) SetNamespaceId(v string) *ExecuteStatusQuery {
	s.NamespaceId = &v
	return s
}

func (s *ExecuteStatusQuery) SetPodName(v string) *ExecuteStatusQuery {
	s.PodName = &v
	return s
}

func (s *ExecuteStatusQuery) SetRegion(v string) *ExecuteStatusQuery {
	s.Region = &v
	return s
}

func (s *ExecuteStatusQuery) SetSource(v string) *ExecuteStatusQuery {
	s.Source = &v
	return s
}

func (s *ExecuteStatusQuery) SetStatus(v string) *ExecuteStatusQuery {
	s.Status = &v
	return s
}

func (s *ExecuteStatusQuery) SetTenantId(v string) *ExecuteStatusQuery {
	s.TenantId = &v
	return s
}

type ExecuteStatusRequest struct {
	Headers map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ExecuteStatusQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ExecuteStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatusRequest) GoString() string {
	return s.String()
}

func (s *ExecuteStatusRequest) SetHeaders(v map[string]*string) *ExecuteStatusRequest {
	s.Headers = v
	return s
}

func (s *ExecuteStatusRequest) SetQuery(v *ExecuteStatusQuery) *ExecuteStatusRequest {
	s.Query = v
	return s
}

type ExecuteStatusResponseBody struct {
	Code      *int                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                          `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *ExecuteStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ExecuteStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ExecuteStatusResponseBody) SetCode(v int) *ExecuteStatusResponseBody {
	s.Code = &v
	return s
}

func (s *ExecuteStatusResponseBody) SetMessage(v string) *ExecuteStatusResponseBody {
	s.Message = &v
	return s
}

func (s *ExecuteStatusResponseBody) SetRequestId(v string) *ExecuteStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecuteStatusResponseBody) SetSuccess(v bool) *ExecuteStatusResponseBody {
	s.Success = &v
	return s
}

func (s *ExecuteStatusResponseBody) SetData(v *ExecuteStatusResponseBodyData) *ExecuteStatusResponseBody {
	s.Data = v
	return s
}

type ExecuteStatusResponseBodyData struct {
	AccountId   *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Ip          *string `json:"Ip,omitempty" xml:"Ip,omitempty" require:"true"`
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	PodName     *string `json:"PodName,omitempty" xml:"PodName,omitempty" require:"true"`
	Region      *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Source      *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
}

func (s ExecuteStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *ExecuteStatusResponseBodyData) SetAccountId(v string) *ExecuteStatusResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetAppId(v string) *ExecuteStatusResponseBodyData {
	s.AppId = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetId(v int64) *ExecuteStatusResponseBodyData {
	s.Id = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetIp(v string) *ExecuteStatusResponseBodyData {
	s.Ip = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetNamespaceId(v string) *ExecuteStatusResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetPodName(v string) *ExecuteStatusResponseBodyData {
	s.PodName = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetRegion(v string) *ExecuteStatusResponseBodyData {
	s.Region = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetSource(v string) *ExecuteStatusResponseBodyData {
	s.Source = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetStatus(v string) *ExecuteStatusResponseBodyData {
	s.Status = &v
	return s
}

func (s *ExecuteStatusResponseBodyData) SetTenantId(v string) *ExecuteStatusResponseBodyData {
	s.TenantId = &v
	return s
}

type ExecuteStatusResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ExecuteStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ExecuteStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecuteStatusResponse) GoString() string {
	return s.String()
}

func (s *ExecuteStatusResponse) SetHeaders(v map[string]*string) *ExecuteStatusResponse {
	s.Headers = v
	return s
}

func (s *ExecuteStatusResponse) SetBody(v *ExecuteStatusResponseBody) *ExecuteStatusResponse {
	s.Body = v
	return s
}

type GetAccountMockRuleQuery struct {
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty"`
	MockType        *int64  `json:"MockType,omitempty" xml:"MockType,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageNumber      *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize        *string `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
}

func (s GetAccountMockRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleQuery) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleQuery) SetConsumerAppName(v string) *GetAccountMockRuleQuery {
	s.ConsumerAppName = &v
	return s
}

func (s *GetAccountMockRuleQuery) SetMockType(v int64) *GetAccountMockRuleQuery {
	s.MockType = &v
	return s
}

func (s *GetAccountMockRuleQuery) SetName(v string) *GetAccountMockRuleQuery {
	s.Name = &v
	return s
}

func (s *GetAccountMockRuleQuery) SetNamespace(v string) *GetAccountMockRuleQuery {
	s.Namespace = &v
	return s
}

func (s *GetAccountMockRuleQuery) SetPageNumber(v string) *GetAccountMockRuleQuery {
	s.PageNumber = &v
	return s
}

func (s *GetAccountMockRuleQuery) SetPageSize(v string) *GetAccountMockRuleQuery {
	s.PageSize = &v
	return s
}

func (s *GetAccountMockRuleQuery) SetProviderAppName(v string) *GetAccountMockRuleQuery {
	s.ProviderAppName = &v
	return s
}

func (s *GetAccountMockRuleQuery) SetRegion(v string) *GetAccountMockRuleQuery {
	s.Region = &v
	return s
}

type GetAccountMockRuleRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetAccountMockRuleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetAccountMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleRequest) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleRequest) SetHeaders(v map[string]*string) *GetAccountMockRuleRequest {
	s.Headers = v
	return s
}

func (s *GetAccountMockRuleRequest) SetQuery(v *GetAccountMockRuleQuery) *GetAccountMockRuleRequest {
	s.Query = v
	return s
}

type GetAccountMockRuleResponseBody struct {
	Code    *string                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *GetAccountMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetAccountMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBody) SetCode(v string) *GetAccountMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *GetAccountMockRuleResponseBody) SetMessage(v string) *GetAccountMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *GetAccountMockRuleResponseBody) SetSuccess(v bool) *GetAccountMockRuleResponseBody {
	s.Success = &v
	return s
}

func (s *GetAccountMockRuleResponseBody) SetData(v *GetAccountMockRuleResponseBodyData) *GetAccountMockRuleResponseBody {
	s.Data = v
	return s
}

type GetAccountMockRuleResponseBodyData struct {
	PageNumber *int                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize  *int                                        `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result     []*GetAccountMockRuleResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s GetAccountMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyData) SetPageNumber(v int) *GetAccountMockRuleResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyData) SetPageSize(v int) *GetAccountMockRuleResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyData) SetTotalSize(v int) *GetAccountMockRuleResponseBodyData {
	s.TotalSize = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyData) SetResult(v []*GetAccountMockRuleResponseBodyDataResult) *GetAccountMockRuleResponseBodyData {
	s.Result = v
	return s
}

type GetAccountMockRuleResponseBodyDataResult struct {
	ConsumerAppId   *string                                                   `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string                                                   `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool                                                     `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	GmtCreate       *string                                                   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified     *string                                                   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	Id              *int                                                      `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string                                                   `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ProviderAppId   *string                                                   `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string                                                   `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string                                                   `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Status          *int                                                      `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	DubboMockItems  []*GetAccountMockRuleResponseBodyDataResultDubboMockItems `json:"DubboMockItems,omitempty" xml:"DubboMockItems,omitempty" require:"true" type:"Repeated"`
	ScMockItems     []*GetAccountMockRuleResponseBodyDataResultScMockItems    `json:"ScMockItems,omitempty" xml:"ScMockItems,omitempty" require:"true" type:"Repeated"`
}

func (s GetAccountMockRuleResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetConsumerAppId(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ConsumerAppId = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetConsumerAppName(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ConsumerAppName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetEnable(v bool) *GetAccountMockRuleResponseBodyDataResult {
	s.Enable = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetGmtCreate(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.GmtCreate = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetGmtModified(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.GmtModified = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetId(v int) *GetAccountMockRuleResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetName(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.Name = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetProviderAppId(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ProviderAppId = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetProviderAppName(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.ProviderAppName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetRegion(v string) *GetAccountMockRuleResponseBodyDataResult {
	s.Region = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetStatus(v int) *GetAccountMockRuleResponseBodyDataResult {
	s.Status = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetDubboMockItems(v []*GetAccountMockRuleResponseBodyDataResultDubboMockItems) *GetAccountMockRuleResponseBodyDataResult {
	s.DubboMockItems = v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResult) SetScMockItems(v []*GetAccountMockRuleResponseBodyDataResultScMockItems) *GetAccountMockRuleResponseBodyDataResult {
	s.ScMockItems = v
	return s
}

type GetAccountMockRuleResponseBodyDataResultDubboMockItems struct {
	ExceptionClassName *string   `json:"ExceptionClassName,omitempty" xml:"ExceptionClassName,omitempty" require:"true"`
	ExecuteCondition   *string   `json:"ExecuteCondition,omitempty" xml:"ExecuteCondition,omitempty" require:"true"`
	Group              *string   `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	MethodName         *string   `json:"MethodName,omitempty" xml:"MethodName,omitempty" require:"true"`
	Oper               *string   `json:"Oper,omitempty" xml:"Oper,omitempty" require:"true"`
	ServiceName        *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	Value              *string   `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	Version            *string   `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	ParamTypes         []*string `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" require:"true" type:"Repeated"`
}

func (s GetAccountMockRuleResponseBodyDataResultDubboMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyDataResultDubboMockItems) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetExceptionClassName(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ExceptionClassName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetExecuteCondition(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ExecuteCondition = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetGroup(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Group = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetMethodName(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.MethodName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetOper(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Oper = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetServiceName(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ServiceName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetValue(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Value = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetVersion(v string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.Version = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultDubboMockItems) SetParamTypes(v []*string) *GetAccountMockRuleResponseBodyDataResultDubboMockItems {
	s.ParamTypes = v
	return s
}

type GetAccountMockRuleResponseBodyDataResultScMockItems struct {
	ExceptionClassName *string `json:"ExceptionClassName,omitempty" xml:"ExceptionClassName,omitempty" require:"true"`
	ExecuteCondition   *string `json:"ExecuteCondition,omitempty" xml:"ExecuteCondition,omitempty" require:"true"`
	Method             *string `json:"Method,omitempty" xml:"Method,omitempty" require:"true"`
	Oper               *string `json:"Oper,omitempty" xml:"Oper,omitempty" require:"true"`
	Path               *string `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	ServiceName        *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	Value              *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s GetAccountMockRuleResponseBodyDataResultScMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponseBodyDataResultScMockItems) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetExceptionClassName(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.ExceptionClassName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetExecuteCondition(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.ExecuteCondition = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetMethod(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Method = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetOper(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Oper = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetPath(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Path = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetServiceName(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.ServiceName = &v
	return s
}

func (s *GetAccountMockRuleResponseBodyDataResultScMockItems) SetValue(v string) *GetAccountMockRuleResponseBodyDataResultScMockItems {
	s.Value = &v
	return s
}

type GetAccountMockRuleResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetAccountMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAccountMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAccountMockRuleResponse) GoString() string {
	return s.String()
}

func (s *GetAccountMockRuleResponse) SetHeaders(v map[string]*string) *GetAccountMockRuleResponse {
	s.Headers = v
	return s
}

func (s *GetAccountMockRuleResponse) SetBody(v *GetAccountMockRuleResponseBody) *GetAccountMockRuleResponse {
	s.Body = v
	return s
}

type GetAppDeploymentQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s GetAppDeploymentQuery) String() string {
	return tea.Prettify(s)
}

func (s GetAppDeploymentQuery) GoString() string {
	return s.String()
}

func (s *GetAppDeploymentQuery) SetAppId(v string) *GetAppDeploymentQuery {
	s.AppId = &v
	return s
}

type GetAppDeploymentRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetAppDeploymentQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetAppDeploymentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppDeploymentRequest) GoString() string {
	return s.String()
}

func (s *GetAppDeploymentRequest) SetHeaders(v map[string]*string) *GetAppDeploymentRequest {
	s.Headers = v
	return s
}

func (s *GetAppDeploymentRequest) SetQuery(v *GetAppDeploymentQuery) *GetAppDeploymentRequest {
	s.Query = v
	return s
}

type GetAppDeploymentResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s GetAppDeploymentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAppDeploymentResponseBody) GoString() string {
	return s.String()
}

func (s *GetAppDeploymentResponseBody) SetCode(v int) *GetAppDeploymentResponseBody {
	s.Code = &v
	return s
}

func (s *GetAppDeploymentResponseBody) SetData(v string) *GetAppDeploymentResponseBody {
	s.Data = &v
	return s
}

func (s *GetAppDeploymentResponseBody) SetMessage(v string) *GetAppDeploymentResponseBody {
	s.Message = &v
	return s
}

func (s *GetAppDeploymentResponseBody) SetRequestId(v string) *GetAppDeploymentResponseBody {
	s.RequestId = &v
	return s
}

type GetAppDeploymentResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetAppDeploymentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAppDeploymentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppDeploymentResponse) GoString() string {
	return s.String()
}

func (s *GetAppDeploymentResponse) SetHeaders(v map[string]*string) *GetAppDeploymentResponse {
	s.Headers = v
	return s
}

func (s *GetAppDeploymentResponse) SetBody(v *GetAppDeploymentResponseBody) *GetAppDeploymentResponse {
	s.Body = v
	return s
}

type GetApplicationQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s GetApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationQuery) GoString() string {
	return s.String()
}

func (s *GetApplicationQuery) SetAppId(v string) *GetApplicationQuery {
	s.AppId = &v
	return s
}

type GetApplicationRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetApplicationRequest) SetHeaders(v map[string]*string) *GetApplicationRequest {
	s.Headers = v
	return s
}

func (s *GetApplicationRequest) SetQuery(v *GetApplicationQuery) *GetApplicationRequest {
	s.Query = v
	return s
}

type GetApplicationResponseBody struct {
	Code        *int                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Application *GetApplicationResponseBodyApplication `json:"Application,omitempty" xml:"Application,omitempty" require:"true" type:"Struct"`
}

func (s GetApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *GetApplicationResponseBody) SetCode(v int) *GetApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *GetApplicationResponseBody) SetMessage(v string) *GetApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *GetApplicationResponseBody) SetRequestId(v string) *GetApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetApplicationResponseBody) SetApplication(v *GetApplicationResponseBodyApplication) *GetApplicationResponseBody {
	s.Application = v
	return s
}

type GetApplicationResponseBodyApplication struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ApplicationType      *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty" require:"true"`
	BuildPackageId       *int64  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty" require:"true"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterType          *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Cpu                  *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime           *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Dockerize            *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty" require:"true"`
	Email                *string `json:"Email,omitempty" xml:"Email,omitempty" require:"true"`
	ExtSlbId             *string `json:"ExtSlbId,omitempty" xml:"ExtSlbId,omitempty" require:"true"`
	ExtSlbIp             *string `json:"ExtSlbIp,omitempty" xml:"ExtSlbIp,omitempty" require:"true"`
	ExtSlbName           *string `json:"ExtSlbName,omitempty" xml:"ExtSlbName,omitempty" require:"true"`
	HealthCheckUrl       *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty" require:"true"`
	InstanceCount        *int    `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty" require:"true"`
	Memory               *int    `json:"Memory,omitempty" xml:"Memory,omitempty" require:"true"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NameSpace            *string `json:"NameSpace,omitempty" xml:"NameSpace,omitempty" require:"true"`
	Owner                *string `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	Port                 *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RunningInstanceCount *int    `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty" require:"true"`
	SlbId                *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	SlbInfo              *string `json:"SlbInfo,omitempty" xml:"SlbInfo,omitempty" require:"true"`
	SlbIp                *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty" require:"true"`
	SlbName              *string `json:"SlbName,omitempty" xml:"SlbName,omitempty" require:"true"`
	SlbPort              *int    `json:"SlbPort,omitempty" xml:"SlbPort,omitempty" require:"true"`
	UserId               *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s GetApplicationResponseBodyApplication) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponseBodyApplication) GoString() string {
	return s.String()
}

func (s *GetApplicationResponseBodyApplication) SetAppId(v string) *GetApplicationResponseBodyApplication {
	s.AppId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetApplicationType(v string) *GetApplicationResponseBodyApplication {
	s.ApplicationType = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetBuildPackageId(v int64) *GetApplicationResponseBodyApplication {
	s.BuildPackageId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetClusterId(v string) *GetApplicationResponseBodyApplication {
	s.ClusterId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetClusterType(v string) *GetApplicationResponseBodyApplication {
	s.ClusterType = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetCpu(v int) *GetApplicationResponseBodyApplication {
	s.Cpu = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetCreateTime(v int64) *GetApplicationResponseBodyApplication {
	s.CreateTime = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetDescription(v string) *GetApplicationResponseBodyApplication {
	s.Description = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetDockerize(v bool) *GetApplicationResponseBodyApplication {
	s.Dockerize = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetEmail(v string) *GetApplicationResponseBodyApplication {
	s.Email = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetExtSlbId(v string) *GetApplicationResponseBodyApplication {
	s.ExtSlbId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetExtSlbIp(v string) *GetApplicationResponseBodyApplication {
	s.ExtSlbIp = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetExtSlbName(v string) *GetApplicationResponseBodyApplication {
	s.ExtSlbName = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetHealthCheckUrl(v string) *GetApplicationResponseBodyApplication {
	s.HealthCheckUrl = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetInstanceCount(v int) *GetApplicationResponseBodyApplication {
	s.InstanceCount = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetMemory(v int) *GetApplicationResponseBodyApplication {
	s.Memory = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetName(v string) *GetApplicationResponseBodyApplication {
	s.Name = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetNameSpace(v string) *GetApplicationResponseBodyApplication {
	s.NameSpace = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetOwner(v string) *GetApplicationResponseBodyApplication {
	s.Owner = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetPort(v int) *GetApplicationResponseBodyApplication {
	s.Port = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetRegionId(v string) *GetApplicationResponseBodyApplication {
	s.RegionId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetRunningInstanceCount(v int) *GetApplicationResponseBodyApplication {
	s.RunningInstanceCount = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbId(v string) *GetApplicationResponseBodyApplication {
	s.SlbId = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbInfo(v string) *GetApplicationResponseBodyApplication {
	s.SlbInfo = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbIp(v string) *GetApplicationResponseBodyApplication {
	s.SlbIp = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbName(v string) *GetApplicationResponseBodyApplication {
	s.SlbName = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetSlbPort(v int) *GetApplicationResponseBodyApplication {
	s.SlbPort = &v
	return s
}

func (s *GetApplicationResponseBodyApplication) SetUserId(v string) *GetApplicationResponseBodyApplication {
	s.UserId = &v
	return s
}

type GetApplicationResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetApplicationResponse) SetHeaders(v map[string]*string) *GetApplicationResponse {
	s.Headers = v
	return s
}

func (s *GetApplicationResponse) SetBody(v *GetApplicationResponseBody) *GetApplicationResponse {
	s.Body = v
	return s
}

type GetChangeOrderInfoQuery struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
}

func (s GetChangeOrderInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoQuery) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoQuery) SetChangeOrderId(v string) *GetChangeOrderInfoQuery {
	s.ChangeOrderId = &v
	return s
}

type GetChangeOrderInfoRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetChangeOrderInfoQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetChangeOrderInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoRequest) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoRequest) SetHeaders(v map[string]*string) *GetChangeOrderInfoRequest {
	s.Headers = v
	return s
}

func (s *GetChangeOrderInfoRequest) SetQuery(v *GetChangeOrderInfoQuery) *GetChangeOrderInfoRequest {
	s.Query = v
	return s
}

type GetChangeOrderInfoResponseBody struct {
	Code            *int                                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                        `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ChangeOrderInfo *GetChangeOrderInfoResponseBodyChangeOrderInfo `json:"changeOrderInfo,omitempty" xml:"changeOrderInfo,omitempty" require:"true" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBody) SetCode(v int) *GetChangeOrderInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetChangeOrderInfoResponseBody) SetMessage(v string) *GetChangeOrderInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetChangeOrderInfoResponseBody) SetRequestId(v string) *GetChangeOrderInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBody) SetChangeOrderInfo(v *GetChangeOrderInfoResponseBodyChangeOrderInfo) *GetChangeOrderInfoResponseBody {
	s.ChangeOrderInfo = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfo struct {
	BatchCount             *int                                                           `json:"BatchCount,omitempty" xml:"BatchCount,omitempty" require:"true"`
	BatchType              *string                                                        `json:"BatchType,omitempty" xml:"BatchType,omitempty" require:"true"`
	ChangeOrderDescription *string                                                        `json:"ChangeOrderDescription,omitempty" xml:"ChangeOrderDescription,omitempty" require:"true"`
	ChangeOrderId          *string                                                        `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	CoType                 *string                                                        `json:"CoType,omitempty" xml:"CoType,omitempty" require:"true"`
	CreateTime             *string                                                        `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	CreateUserId           *string                                                        `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty" require:"true"`
	Desc                   *string                                                        `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
	Status                 *int                                                           `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	SupportRollback        *bool                                                          `json:"SupportRollback,omitempty" xml:"SupportRollback,omitempty" require:"true"`
	PipelineInfoList       *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList `json:"PipelineInfoList,omitempty" xml:"PipelineInfoList,omitempty" require:"true" type:"Struct"`
	TrafficControl         *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl   `json:"TrafficControl,omitempty" xml:"TrafficControl,omitempty" require:"true" type:"Struct"`
	Targets                *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets          `json:"Targets,omitempty" xml:"Targets,omitempty" require:"true" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfo) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfo) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetBatchCount(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.BatchCount = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetBatchType(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.BatchType = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetChangeOrderDescription(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.ChangeOrderDescription = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetChangeOrderId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.ChangeOrderId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetCoType(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.CoType = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetCreateTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.CreateTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetCreateUserId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.CreateUserId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetDesc(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.Desc = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetStatus(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.Status = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetSupportRollback(v bool) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.SupportRollback = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetPipelineInfoList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.PipelineInfoList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetTrafficControl(v *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.TrafficControl = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfo) SetTargets(v *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) *GetChangeOrderInfoResponseBodyChangeOrderInfo {
	s.Targets = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList struct {
	PipelineInfo []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo `json:"PipelineInfo,omitempty" xml:"PipelineInfo,omitempty" require:"true" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList) SetPipelineInfo(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoList {
	s.PipelineInfo = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo struct {
	PipelineId      *string                                                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty" require:"true"`
	PipelineName    *string                                                                                   `json:"PipelineName,omitempty" xml:"PipelineName,omitempty" require:"true"`
	PipelineStatus  *int                                                                                      `json:"PipelineStatus,omitempty" xml:"PipelineStatus,omitempty" require:"true"`
	StartTime       *string                                                                                   `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	UpdateTime      *string                                                                                   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	StageDetailList *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList `json:"StageDetailList,omitempty" xml:"StageDetailList,omitempty" require:"true" type:"Struct"`
	StageList       *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList       `json:"StageList,omitempty" xml:"StageList,omitempty" require:"true" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetPipelineId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.PipelineId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetPipelineName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.PipelineName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetPipelineStatus(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.PipelineStatus = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetStartTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.StartTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetUpdateTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.UpdateTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetStageDetailList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.StageDetailList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo) SetStageList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfo {
	s.StageList = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList struct {
	StageDetailDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO `json:"StageDetailDTO,omitempty" xml:"StageDetailDTO,omitempty" require:"true" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList) SetStageDetailDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailList {
	s.StageDetailDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO struct {
	StageId     *string                                                                                                         `json:"StageId,omitempty" xml:"StageId,omitempty" require:"true"`
	StageName   *string                                                                                                         `json:"StageName,omitempty" xml:"StageName,omitempty" require:"true"`
	StageStatus *int                                                                                                            `json:"StageStatus,omitempty" xml:"StageStatus,omitempty" require:"true"`
	TaskList    *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList `json:"TaskList,omitempty" xml:"TaskList,omitempty" require:"true" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetStageStatus(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.StageStatus = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO) SetTaskList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTO {
	s.TaskList = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList struct {
	TaskInfoDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO `json:"TaskInfoDTO,omitempty" xml:"TaskInfoDTO,omitempty" require:"true" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList) SetTaskInfoDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskList {
	s.TaskInfoDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO struct {
	RetryType           *int    `json:"RetryType,omitempty" xml:"RetryType,omitempty" require:"true"`
	ShowManualIgnorance *bool   `json:"ShowManualIgnorance,omitempty" xml:"ShowManualIgnorance,omitempty" require:"true"`
	TaskErrorCode       *string `json:"TaskErrorCode,omitempty" xml:"TaskErrorCode,omitempty" require:"true"`
	TaskErrorIgnorance  *int    `json:"TaskErrorIgnorance,omitempty" xml:"TaskErrorIgnorance,omitempty" require:"true"`
	TaskErrorMessage    *string `json:"TaskErrorMessage,omitempty" xml:"TaskErrorMessage,omitempty" require:"true"`
	TaskId              *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
	TaskMessage         *string `json:"TaskMessage,omitempty" xml:"TaskMessage,omitempty" require:"true"`
	TaskName            *string `json:"TaskName,omitempty" xml:"TaskName,omitempty" require:"true"`
	TaskStatus          *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty" require:"true"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetRetryType(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.RetryType = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetShowManualIgnorance(v bool) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.ShowManualIgnorance = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskErrorCode(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskErrorCode = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskErrorIgnorance(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskErrorIgnorance = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskErrorMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskErrorMessage = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskMessage = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO) SetTaskStatus(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageDetailListStageDetailDTOTaskListTaskInfoDTO {
	s.TaskStatus = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList struct {
	StageInfoDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO `json:"StageInfoDTO,omitempty" xml:"StageInfoDTO,omitempty" require:"true" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList) SetStageInfoDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageList {
	s.StageInfoDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO struct {
	StageId        *string                                                                                                       `json:"StageId,omitempty" xml:"StageId,omitempty" require:"true"`
	StageName      *string                                                                                                       `json:"StageName,omitempty" xml:"StageName,omitempty" require:"true"`
	Status         *int                                                                                                          `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	StageResultDTO *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO `json:"StageResultDTO,omitempty" xml:"StageResultDTO,omitempty" require:"true" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStatus(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.Status = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO) SetStageResultDTO(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTO {
	s.StageResultDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO struct {
	InstanceDTOList *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList `json:"InstanceDTOList,omitempty" xml:"InstanceDTOList,omitempty" require:"true" type:"Struct"`
	ServiceStage    *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage    `json:"ServiceStage,omitempty" xml:"ServiceStage,omitempty" require:"true" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) SetInstanceDTOList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO {
	s.InstanceDTOList = v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO) SetServiceStage(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTO {
	s.ServiceStage = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList struct {
	InstanceDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO `json:"InstanceDTO,omitempty" xml:"InstanceDTO,omitempty" require:"true" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList) SetInstanceDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOList {
	s.InstanceDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO struct {
	InstanceIp           *string                                                                                                                                                     `json:"InstanceIp,omitempty" xml:"InstanceIp,omitempty" require:"true"`
	InstanceName         *string                                                                                                                                                     `json:"InstanceName,omitempty" xml:"InstanceName,omitempty" require:"true"`
	PodName              *string                                                                                                                                                     `json:"PodName,omitempty" xml:"PodName,omitempty" require:"true"`
	PodStatus            *string                                                                                                                                                     `json:"PodStatus,omitempty" xml:"PodStatus,omitempty" require:"true"`
	Status               *int                                                                                                                                                        `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	InstanceStageDTOList *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList `json:"InstanceStageDTOList,omitempty" xml:"InstanceStageDTOList,omitempty" require:"true" type:"Struct"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetInstanceIp(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.InstanceIp = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetInstanceName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.InstanceName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetPodName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.PodName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetPodStatus(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.PodStatus = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetStatus(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.Status = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO) SetInstanceStageDTOList(v *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTO {
	s.InstanceStageDTOList = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList struct {
	InstanceStageDTO []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO `json:"InstanceStageDTO,omitempty" xml:"InstanceStageDTO,omitempty" require:"true" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList) SetInstanceStageDTO(v []*GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOList {
	s.InstanceStageDTO = v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO struct {
	FinishTime   *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty" require:"true"`
	StageId      *string `json:"StageId,omitempty" xml:"StageId,omitempty" require:"true"`
	StageMessage *string `json:"StageMessage,omitempty" xml:"StageMessage,omitempty" require:"true"`
	StageName    *string `json:"StageName,omitempty" xml:"StageName,omitempty" require:"true"`
	StartTime    *string `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Status       *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetFinishTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.FinishTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStageMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StageMessage = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStartTime(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.StartTime = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO) SetStatus(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOInstanceDTOListInstanceDTOInstanceStageDTOListInstanceStageDTO {
	s.Status = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	StageId   *string `json:"StageId,omitempty" xml:"StageId,omitempty" require:"true"`
	StageName *string `json:"StageName,omitempty" xml:"StageName,omitempty" require:"true"`
	Status    *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetMessage(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.Message = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetStageId(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.StageId = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetStageName(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.StageName = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage) SetStatus(v int) *GetChangeOrderInfoResponseBodyChangeOrderInfoPipelineInfoListPipelineInfoStageListStageInfoDTOStageResultDTOServiceStage {
	s.Status = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl struct {
	Routes *string `json:"Routes,omitempty" xml:"Routes,omitempty" require:"true"`
	Rules  *string `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true"`
	Tips   *string `json:"Tips,omitempty" xml:"Tips,omitempty" require:"true"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) SetRoutes(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl {
	s.Routes = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) SetRules(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl {
	s.Rules = &v
	return s
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl) SetTips(v string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTrafficControl {
	s.Tips = &v
	return s
}

type GetChangeOrderInfoResponseBodyChangeOrderInfoTargets struct {
	Items []*string `json:"Items,omitempty" xml:"Items,omitempty" require:"true" type:"Repeated"`
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets) SetItems(v []*string) *GetChangeOrderInfoResponseBodyChangeOrderInfoTargets {
	s.Items = v
	return s
}

type GetChangeOrderInfoResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetChangeOrderInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetChangeOrderInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetChangeOrderInfoResponse) GoString() string {
	return s.String()
}

func (s *GetChangeOrderInfoResponse) SetHeaders(v map[string]*string) *GetChangeOrderInfoResponse {
	s.Headers = v
	return s
}

func (s *GetChangeOrderInfoResponse) SetBody(v *GetChangeOrderInfoResponseBody) *GetChangeOrderInfoResponse {
	s.Body = v
	return s
}

type GetClusterQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
}

func (s GetClusterQuery) String() string {
	return tea.Prettify(s)
}

func (s GetClusterQuery) GoString() string {
	return s.String()
}

func (s *GetClusterQuery) SetClusterId(v string) *GetClusterQuery {
	s.ClusterId = &v
	return s
}

type GetClusterRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetClusterQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClusterRequest) GoString() string {
	return s.String()
}

func (s *GetClusterRequest) SetHeaders(v map[string]*string) *GetClusterRequest {
	s.Headers = v
	return s
}

func (s *GetClusterRequest) SetQuery(v *GetClusterQuery) *GetClusterRequest {
	s.Query = v
	return s
}

type GetClusterResponseBody struct {
	Code      *int                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                        `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Cluster   *GetClusterResponseBodyCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" require:"true" type:"Struct"`
}

func (s GetClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClusterResponseBody) GoString() string {
	return s.String()
}

func (s *GetClusterResponseBody) SetCode(v int) *GetClusterResponseBody {
	s.Code = &v
	return s
}

func (s *GetClusterResponseBody) SetMessage(v string) *GetClusterResponseBody {
	s.Message = &v
	return s
}

func (s *GetClusterResponseBody) SetRequestId(v string) *GetClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetClusterResponseBody) SetCluster(v *GetClusterResponseBodyCluster) *GetClusterResponseBody {
	s.Cluster = v
	return s
}

type GetClusterResponseBodyCluster struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterImportStatus *int    `json:"ClusterImportStatus,omitempty" xml:"ClusterImportStatus,omitempty" require:"true"`
	ClusterName         *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	ClusterType         *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Cpu                 *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CpuUsed             *int    `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty" require:"true"`
	CreateTime          *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	CsClusterId         *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	IaasProvider        *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty" require:"true"`
	Mem                 *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	MemUsed             *int    `json:"MemUsed,omitempty" xml:"MemUsed,omitempty" require:"true"`
	NetworkMode         *int    `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty" require:"true"`
	NodeNum             *int    `json:"NodeNum,omitempty" xml:"NodeNum,omitempty" require:"true"`
	OversoldFactor      *int    `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty" require:"true"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime          *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	VpcId               *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
}

func (s GetClusterResponseBodyCluster) String() string {
	return tea.Prettify(s)
}

func (s GetClusterResponseBodyCluster) GoString() string {
	return s.String()
}

func (s *GetClusterResponseBodyCluster) SetClusterId(v string) *GetClusterResponseBodyCluster {
	s.ClusterId = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetClusterImportStatus(v int) *GetClusterResponseBodyCluster {
	s.ClusterImportStatus = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetClusterName(v string) *GetClusterResponseBodyCluster {
	s.ClusterName = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetClusterType(v int) *GetClusterResponseBodyCluster {
	s.ClusterType = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCpu(v int) *GetClusterResponseBodyCluster {
	s.Cpu = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCpuUsed(v int) *GetClusterResponseBodyCluster {
	s.CpuUsed = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCreateTime(v int64) *GetClusterResponseBodyCluster {
	s.CreateTime = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetCsClusterId(v string) *GetClusterResponseBodyCluster {
	s.CsClusterId = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetDescription(v string) *GetClusterResponseBodyCluster {
	s.Description = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetIaasProvider(v string) *GetClusterResponseBodyCluster {
	s.IaasProvider = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetMem(v int) *GetClusterResponseBodyCluster {
	s.Mem = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetMemUsed(v int) *GetClusterResponseBodyCluster {
	s.MemUsed = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetNetworkMode(v int) *GetClusterResponseBodyCluster {
	s.NetworkMode = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetNodeNum(v int) *GetClusterResponseBodyCluster {
	s.NodeNum = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetOversoldFactor(v int) *GetClusterResponseBodyCluster {
	s.OversoldFactor = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetRegionId(v string) *GetClusterResponseBodyCluster {
	s.RegionId = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetUpdateTime(v int64) *GetClusterResponseBodyCluster {
	s.UpdateTime = &v
	return s
}

func (s *GetClusterResponseBodyCluster) SetVpcId(v string) *GetClusterResponseBodyCluster {
	s.VpcId = &v
	return s
}

type GetClusterResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClusterResponse) GoString() string {
	return s.String()
}

func (s *GetClusterResponse) SetHeaders(v map[string]*string) *GetClusterResponse {
	s.Headers = v
	return s
}

func (s *GetClusterResponse) SetBody(v *GetClusterResponseBody) *GetClusterResponse {
	s.Body = v
	return s
}

type GetContainerConfigurationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetContainerConfigurationQuery) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationQuery) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationQuery) SetAppId(v string) *GetContainerConfigurationQuery {
	s.AppId = &v
	return s
}

func (s *GetContainerConfigurationQuery) SetGroupId(v string) *GetContainerConfigurationQuery {
	s.GroupId = &v
	return s
}

type GetContainerConfigurationRequest struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetContainerConfigurationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetContainerConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationRequest) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationRequest) SetHeaders(v map[string]*string) *GetContainerConfigurationRequest {
	s.Headers = v
	return s
}

func (s *GetContainerConfigurationRequest) SetQuery(v *GetContainerConfigurationQuery) *GetContainerConfigurationRequest {
	s.Query = v
	return s
}

type GetContainerConfigurationResponseBody struct {
	Code                   *int                                                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message                *string                                                      `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId              *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ContainerConfiguration *GetContainerConfigurationResponseBodyContainerConfiguration `json:"ContainerConfiguration,omitempty" xml:"ContainerConfiguration,omitempty" require:"true" type:"Struct"`
}

func (s GetContainerConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationResponseBody) SetCode(v int) *GetContainerConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *GetContainerConfigurationResponseBody) SetMessage(v string) *GetContainerConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *GetContainerConfigurationResponseBody) SetRequestId(v string) *GetContainerConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetContainerConfigurationResponseBody) SetContainerConfiguration(v *GetContainerConfigurationResponseBodyContainerConfiguration) *GetContainerConfigurationResponseBody {
	s.ContainerConfiguration = v
	return s
}

type GetContainerConfigurationResponseBodyContainerConfiguration struct {
	ContextPath     *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty" require:"true"`
	HttpPort        *int    `json:"HttpPort,omitempty" xml:"HttpPort,omitempty" require:"true"`
	MaxThreads      *int    `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty" require:"true"`
	URIEncoding     *string `json:"URIEncoding,omitempty" xml:"URIEncoding,omitempty" require:"true"`
	UseBodyEncoding *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty" require:"true"`
}

func (s GetContainerConfigurationResponseBodyContainerConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationResponseBodyContainerConfiguration) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetContextPath(v string) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.ContextPath = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetHttpPort(v int) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.HttpPort = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetMaxThreads(v int) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.MaxThreads = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetURIEncoding(v string) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.URIEncoding = &v
	return s
}

func (s *GetContainerConfigurationResponseBodyContainerConfiguration) SetUseBodyEncoding(v bool) *GetContainerConfigurationResponseBodyContainerConfiguration {
	s.UseBodyEncoding = &v
	return s
}

type GetContainerConfigurationResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetContainerConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetContainerConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContainerConfigurationResponse) GoString() string {
	return s.String()
}

func (s *GetContainerConfigurationResponse) SetHeaders(v map[string]*string) *GetContainerConfigurationResponse {
	s.Headers = v
	return s
}

func (s *GetContainerConfigurationResponse) SetBody(v *GetContainerConfigurationResponseBody) *GetContainerConfigurationResponse {
	s.Body = v
	return s
}

type GetEnvTrafficControlQuery struct {
	PointcutName *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
}

func (s GetEnvTrafficControlQuery) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlQuery) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlQuery) SetPointcutName(v string) *GetEnvTrafficControlQuery {
	s.PointcutName = &v
	return s
}

type GetEnvTrafficControlRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetEnvTrafficControlQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetEnvTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlRequest) SetHeaders(v map[string]*string) *GetEnvTrafficControlRequest {
	s.Headers = v
	return s
}

func (s *GetEnvTrafficControlRequest) SetQuery(v *GetEnvTrafficControlQuery) *GetEnvTrafficControlRequest {
	s.Query = v
	return s
}

type GetEnvTrafficControlResponseBody struct {
	Code      *int                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      []*GetEnvTrafficControlResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s GetEnvTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlResponseBody) SetCode(v int) *GetEnvTrafficControlResponseBody {
	s.Code = &v
	return s
}

func (s *GetEnvTrafficControlResponseBody) SetMessage(v string) *GetEnvTrafficControlResponseBody {
	s.Message = &v
	return s
}

func (s *GetEnvTrafficControlResponseBody) SetRequestId(v string) *GetEnvTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEnvTrafficControlResponseBody) SetData(v []*GetEnvTrafficControlResponseBodyData) *GetEnvTrafficControlResponseBody {
	s.Data = v
	return s
}

type GetEnvTrafficControlResponseBodyData struct {
	AppId         *string                                       `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EnvName       *string                                       `json:"EnvName,omitempty" xml:"EnvName,omitempty" require:"true"`
	Id            *string                                       `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Kind          *string                                       `json:"Kind,omitempty" xml:"Kind,omitempty" require:"true"`
	LabelAdviceId *int64                                        `json:"LabelAdviceId,omitempty" xml:"LabelAdviceId,omitempty" require:"true"`
	LabelType     *string                                       `json:"LabelType,omitempty" xml:"LabelType,omitempty" require:"true"`
	PointcutId    *int64                                        `json:"PointcutId,omitempty" xml:"PointcutId,omitempty" require:"true"`
	RegionId      *string                                       `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Metadata      *GetEnvTrafficControlResponseBodyDataMetadata `json:"Metadata,omitempty" xml:"Metadata,omitempty" require:"true" type:"Struct"`
	Spec          *GetEnvTrafficControlResponseBodyDataSpec     `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true" type:"Struct"`
}

func (s GetEnvTrafficControlResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlResponseBodyData) SetAppId(v string) *GetEnvTrafficControlResponseBodyData {
	s.AppId = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetEnvName(v string) *GetEnvTrafficControlResponseBodyData {
	s.EnvName = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetId(v string) *GetEnvTrafficControlResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetKind(v string) *GetEnvTrafficControlResponseBodyData {
	s.Kind = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetLabelAdviceId(v int64) *GetEnvTrafficControlResponseBodyData {
	s.LabelAdviceId = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetLabelType(v string) *GetEnvTrafficControlResponseBodyData {
	s.LabelType = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetPointcutId(v int64) *GetEnvTrafficControlResponseBodyData {
	s.PointcutId = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetRegionId(v string) *GetEnvTrafficControlResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetMetadata(v *GetEnvTrafficControlResponseBodyDataMetadata) *GetEnvTrafficControlResponseBodyData {
	s.Metadata = v
	return s
}

func (s *GetEnvTrafficControlResponseBodyData) SetSpec(v *GetEnvTrafficControlResponseBodyDataSpec) *GetEnvTrafficControlResponseBodyData {
	s.Spec = v
	return s
}

type GetEnvTrafficControlResponseBodyDataMetadata struct {
	Labels    map[string]interface{} `json:"Labels,omitempty" xml:"Labels,omitempty" require:"true"`
	Name      *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s GetEnvTrafficControlResponseBodyDataMetadata) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlResponseBodyDataMetadata) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlResponseBodyDataMetadata) SetLabels(v map[string]interface{}) *GetEnvTrafficControlResponseBodyDataMetadata {
	s.Labels = v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataMetadata) SetName(v string) *GetEnvTrafficControlResponseBodyDataMetadata {
	s.Name = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataMetadata) SetNamespace(v string) *GetEnvTrafficControlResponseBodyDataMetadata {
	s.Namespace = &v
	return s
}

type GetEnvTrafficControlResponseBodyDataSpec struct {
	ClassName      *string                                               `json:"ClassName,omitempty" xml:"ClassName,omitempty" require:"true"`
	ConditionType  *string                                               `json:"ConditionType,omitempty" xml:"ConditionType,omitempty" require:"true"`
	Enable         *bool                                                 `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	Group          *string                                               `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	MethodName     *string                                               `json:"MethodName,omitempty" xml:"MethodName,omitempty" require:"true"`
	Order          *int64                                                `json:"Order,omitempty" xml:"Order,omitempty" require:"true"`
	Percent        *int                                                  `json:"Percent,omitempty" xml:"Percent,omitempty" require:"true"`
	Selector       map[string]interface{}                                `json:"Selector,omitempty" xml:"Selector,omitempty" require:"true"`
	ServiceName    *string                                               `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	ShowName       *string                                               `json:"ShowName,omitempty" xml:"ShowName,omitempty" require:"true"`
	TransmitLevel  *int                                                  `json:"TransmitLevel,omitempty" xml:"TransmitLevel,omitempty" require:"true"`
	TransmitSwitch *bool                                                 `json:"TransmitSwitch,omitempty" xml:"TransmitSwitch,omitempty" require:"true"`
	TriggerPolicy  *string                                               `json:"TriggerPolicy,omitempty" xml:"TriggerPolicy,omitempty" require:"true"`
	Type           *string                                               `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Url            *string                                               `json:"Url,omitempty" xml:"Url,omitempty" require:"true"`
	Version        *string                                               `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Conditions     []*GetEnvTrafficControlResponseBodyDataSpecConditions `json:"Conditions,omitempty" xml:"Conditions,omitempty" require:"true" type:"Repeated"`
	Purposes       []*GetEnvTrafficControlResponseBodyDataSpecPurposes   `json:"Purposes,omitempty" xml:"Purposes,omitempty" require:"true" type:"Repeated"`
	ParamTypes     []*string                                             `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" require:"true" type:"Repeated"`
}

func (s GetEnvTrafficControlResponseBodyDataSpec) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlResponseBodyDataSpec) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetClassName(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.ClassName = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetConditionType(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.ConditionType = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetEnable(v bool) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Enable = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetGroup(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Group = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetMethodName(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.MethodName = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetOrder(v int64) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Order = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetPercent(v int) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Percent = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetSelector(v map[string]interface{}) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Selector = v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetServiceName(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.ServiceName = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetShowName(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.ShowName = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetTransmitLevel(v int) *GetEnvTrafficControlResponseBodyDataSpec {
	s.TransmitLevel = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetTransmitSwitch(v bool) *GetEnvTrafficControlResponseBodyDataSpec {
	s.TransmitSwitch = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetTriggerPolicy(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.TriggerPolicy = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetType(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Type = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetUrl(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Url = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetVersion(v string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Version = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetConditions(v []*GetEnvTrafficControlResponseBodyDataSpecConditions) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Conditions = v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetPurposes(v []*GetEnvTrafficControlResponseBodyDataSpecPurposes) *GetEnvTrafficControlResponseBodyDataSpec {
	s.Purposes = v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpec) SetParamTypes(v []*string) *GetEnvTrafficControlResponseBodyDataSpec {
	s.ParamTypes = v
	return s
}

type GetEnvTrafficControlResponseBodyDataSpecConditions struct {
	Id       *int64    `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Index    *int      `json:"Index,omitempty" xml:"Index,omitempty" require:"true"`
	Key      *string   `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Operator *string   `json:"Operator,omitempty" xml:"Operator,omitempty" require:"true"`
	Strategy *string   `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
	Type     *string   `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Values   []*string `json:"Values,omitempty" xml:"Values,omitempty" require:"true" type:"Repeated"`
}

func (s GetEnvTrafficControlResponseBodyDataSpecConditions) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlResponseBodyDataSpecConditions) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlResponseBodyDataSpecConditions) SetId(v int64) *GetEnvTrafficControlResponseBodyDataSpecConditions {
	s.Id = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpecConditions) SetIndex(v int) *GetEnvTrafficControlResponseBodyDataSpecConditions {
	s.Index = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpecConditions) SetKey(v string) *GetEnvTrafficControlResponseBodyDataSpecConditions {
	s.Key = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpecConditions) SetOperator(v string) *GetEnvTrafficControlResponseBodyDataSpecConditions {
	s.Operator = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpecConditions) SetStrategy(v string) *GetEnvTrafficControlResponseBodyDataSpecConditions {
	s.Strategy = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpecConditions) SetType(v string) *GetEnvTrafficControlResponseBodyDataSpecConditions {
	s.Type = &v
	return s
}

func (s *GetEnvTrafficControlResponseBodyDataSpecConditions) SetValues(v []*string) *GetEnvTrafficControlResponseBodyDataSpecConditions {
	s.Values = v
	return s
}

type GetEnvTrafficControlResponseBodyDataSpecPurposes struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s GetEnvTrafficControlResponseBodyDataSpecPurposes) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlResponseBodyDataSpecPurposes) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlResponseBodyDataSpecPurposes) SetType(v string) *GetEnvTrafficControlResponseBodyDataSpecPurposes {
	s.Type = &v
	return s
}

type GetEnvTrafficControlResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetEnvTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEnvTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEnvTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *GetEnvTrafficControlResponse) SetHeaders(v map[string]*string) *GetEnvTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *GetEnvTrafficControlResponse) SetBody(v *GetEnvTrafficControlResponseBody) *GetEnvTrafficControlResponse {
	s.Body = v
	return s
}

type GetGrayAppGroupQuery struct {
	AppIds          *string `json:"AppIds,omitempty" xml:"AppIds,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
}

func (s GetGrayAppGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppGroupQuery) GoString() string {
	return s.String()
}

func (s *GetGrayAppGroupQuery) SetAppIds(v string) *GetGrayAppGroupQuery {
	s.AppIds = &v
	return s
}

func (s *GetGrayAppGroupQuery) SetLogicalRegionId(v string) *GetGrayAppGroupQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *GetGrayAppGroupQuery) SetPointcutName(v string) *GetGrayAppGroupQuery {
	s.PointcutName = &v
	return s
}

type GetGrayAppGroupRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetGrayAppGroupQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetGrayAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppGroupRequest) GoString() string {
	return s.String()
}

func (s *GetGrayAppGroupRequest) SetHeaders(v map[string]*string) *GetGrayAppGroupRequest {
	s.Headers = v
	return s
}

func (s *GetGrayAppGroupRequest) SetQuery(v *GetGrayAppGroupQuery) *GetGrayAppGroupRequest {
	s.Query = v
	return s
}

type GetGrayAppGroupResponseBody struct {
	Code      *int                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                            `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      []*GetGrayAppGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s GetGrayAppGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppGroupResponseBody) GoString() string {
	return s.String()
}

func (s *GetGrayAppGroupResponseBody) SetCode(v int) *GetGrayAppGroupResponseBody {
	s.Code = &v
	return s
}

func (s *GetGrayAppGroupResponseBody) SetMessage(v string) *GetGrayAppGroupResponseBody {
	s.Message = &v
	return s
}

func (s *GetGrayAppGroupResponseBody) SetRequestId(v string) *GetGrayAppGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGrayAppGroupResponseBody) SetData(v []*GetGrayAppGroupResponseBodyData) *GetGrayAppGroupResponseBody {
	s.Data = v
	return s
}

type GetGrayAppGroupResponseBodyData struct {
	AppId      *string                                     `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName    *string                                     `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	RegionId   *string                                     `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RegionName *string                                     `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	GroupList  []*GetGrayAppGroupResponseBodyDataGroupList `json:"GroupList,omitempty" xml:"GroupList,omitempty" require:"true" type:"Repeated"`
}

func (s GetGrayAppGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetGrayAppGroupResponseBodyData) SetAppId(v string) *GetGrayAppGroupResponseBodyData {
	s.AppId = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyData) SetAppName(v string) *GetGrayAppGroupResponseBodyData {
	s.AppName = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyData) SetRegionId(v string) *GetGrayAppGroupResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyData) SetRegionName(v string) *GetGrayAppGroupResponseBodyData {
	s.RegionName = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyData) SetGroupList(v []*GetGrayAppGroupResponseBodyDataGroupList) *GetGrayAppGroupResponseBodyData {
	s.GroupList = v
	return s
}

type GetGrayAppGroupResponseBodyDataGroupList struct {
	ClusterId         *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	DpathPointcutName *string `json:"DpathPointcutName,omitempty" xml:"DpathPointcutName,omitempty" require:"true"`
	GroupName         *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Instances         *int    `json:"Instances,omitempty" xml:"Instances,omitempty" require:"true"`
	PackageVersion    *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true"`
}

func (s GetGrayAppGroupResponseBodyDataGroupList) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppGroupResponseBodyDataGroupList) GoString() string {
	return s.String()
}

func (s *GetGrayAppGroupResponseBodyDataGroupList) SetClusterId(v string) *GetGrayAppGroupResponseBodyDataGroupList {
	s.ClusterId = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyDataGroupList) SetDpathPointcutName(v string) *GetGrayAppGroupResponseBodyDataGroupList {
	s.DpathPointcutName = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyDataGroupList) SetGroupName(v string) *GetGrayAppGroupResponseBodyDataGroupList {
	s.GroupName = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyDataGroupList) SetId(v string) *GetGrayAppGroupResponseBodyDataGroupList {
	s.Id = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyDataGroupList) SetInstances(v int) *GetGrayAppGroupResponseBodyDataGroupList {
	s.Instances = &v
	return s
}

func (s *GetGrayAppGroupResponseBodyDataGroupList) SetPackageVersion(v string) *GetGrayAppGroupResponseBodyDataGroupList {
	s.PackageVersion = &v
	return s
}

type GetGrayAppGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetGrayAppGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetGrayAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppGroupResponse) GoString() string {
	return s.String()
}

func (s *GetGrayAppGroupResponse) SetHeaders(v map[string]*string) *GetGrayAppGroupResponse {
	s.Headers = v
	return s
}

func (s *GetGrayAppGroupResponse) SetBody(v *GetGrayAppGroupResponseBody) *GetGrayAppGroupResponse {
	s.Body = v
	return s
}

type GetGrayAppsQuery struct {
	Appname          *int    `json:"Appname,omitempty" xml:"Appname,omitempty"`
	ClusterTypes     *int    `json:"ClusterTypes,omitempty" xml:"ClusterTypes,omitempty"`
	PhysicalRegionId *string `json:"PhysicalRegionId,omitempty" xml:"PhysicalRegionId,omitempty"`
}

func (s GetGrayAppsQuery) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppsQuery) GoString() string {
	return s.String()
}

func (s *GetGrayAppsQuery) SetAppname(v int) *GetGrayAppsQuery {
	s.Appname = &v
	return s
}

func (s *GetGrayAppsQuery) SetClusterTypes(v int) *GetGrayAppsQuery {
	s.ClusterTypes = &v
	return s
}

func (s *GetGrayAppsQuery) SetPhysicalRegionId(v string) *GetGrayAppsQuery {
	s.PhysicalRegionId = &v
	return s
}

type GetGrayAppsRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetGrayAppsQuery  `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetGrayAppsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppsRequest) GoString() string {
	return s.String()
}

func (s *GetGrayAppsRequest) SetHeaders(v map[string]*string) *GetGrayAppsRequest {
	s.Headers = v
	return s
}

func (s *GetGrayAppsRequest) SetQuery(v *GetGrayAppsQuery) *GetGrayAppsRequest {
	s.Query = v
	return s
}

type GetGrayAppsResponseBody struct {
	Code      *int                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                      `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *GetGrayAppsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetGrayAppsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppsResponseBody) GoString() string {
	return s.String()
}

func (s *GetGrayAppsResponseBody) SetCode(v int) *GetGrayAppsResponseBody {
	s.Code = &v
	return s
}

func (s *GetGrayAppsResponseBody) SetMessage(v string) *GetGrayAppsResponseBody {
	s.Message = &v
	return s
}

func (s *GetGrayAppsResponseBody) SetRequestId(v string) *GetGrayAppsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGrayAppsResponseBody) SetData(v *GetGrayAppsResponseBodyData) *GetGrayAppsResponseBody {
	s.Data = v
	return s
}

type GetGrayAppsResponseBodyData struct {
	Result *GetGrayAppsResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Struct"`
}

func (s GetGrayAppsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetGrayAppsResponseBodyData) SetResult(v *GetGrayAppsResponseBodyDataResult) *GetGrayAppsResponseBodyData {
	s.Result = v
	return s
}

type GetGrayAppsResponseBodyDataResult struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ApplicationType *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty" require:"true"`
	Appname         *string `json:"Appname,omitempty" xml:"Appname,omitempty" require:"true"`
	DefaultGroupId  *string `json:"DefaultGroupId,omitempty" xml:"DefaultGroupId,omitempty" require:"true"`
	DevelopType     *string `json:"DevelopType,omitempty" xml:"DevelopType,omitempty" require:"true"`
	PackageVersion  *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s GetGrayAppsResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppsResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetGrayAppsResponseBodyDataResult) SetAppId(v string) *GetGrayAppsResponseBodyDataResult {
	s.AppId = &v
	return s
}

func (s *GetGrayAppsResponseBodyDataResult) SetApplicationType(v string) *GetGrayAppsResponseBodyDataResult {
	s.ApplicationType = &v
	return s
}

func (s *GetGrayAppsResponseBodyDataResult) SetAppname(v string) *GetGrayAppsResponseBodyDataResult {
	s.Appname = &v
	return s
}

func (s *GetGrayAppsResponseBodyDataResult) SetDefaultGroupId(v string) *GetGrayAppsResponseBodyDataResult {
	s.DefaultGroupId = &v
	return s
}

func (s *GetGrayAppsResponseBodyDataResult) SetDevelopType(v string) *GetGrayAppsResponseBodyDataResult {
	s.DevelopType = &v
	return s
}

func (s *GetGrayAppsResponseBodyDataResult) SetPackageVersion(v string) *GetGrayAppsResponseBodyDataResult {
	s.PackageVersion = &v
	return s
}

func (s *GetGrayAppsResponseBodyDataResult) SetRegionId(v string) *GetGrayAppsResponseBodyDataResult {
	s.RegionId = &v
	return s
}

type GetGrayAppsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetGrayAppsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetGrayAppsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGrayAppsResponse) GoString() string {
	return s.String()
}

func (s *GetGrayAppsResponse) SetHeaders(v map[string]*string) *GetGrayAppsResponse {
	s.Headers = v
	return s
}

func (s *GetGrayAppsResponse) SetBody(v *GetGrayAppsResponseBody) *GetGrayAppsResponse {
	s.Body = v
	return s
}

type GetGrayEnvironmentsQuery struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s GetGrayEnvironmentsQuery) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsQuery) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsQuery) SetLogicalRegionId(v string) *GetGrayEnvironmentsQuery {
	s.LogicalRegionId = &v
	return s
}

type GetGrayEnvironmentsRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetGrayEnvironmentsQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetGrayEnvironmentsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsRequest) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsRequest) SetHeaders(v map[string]*string) *GetGrayEnvironmentsRequest {
	s.Headers = v
	return s
}

func (s *GetGrayEnvironmentsRequest) SetQuery(v *GetGrayEnvironmentsQuery) *GetGrayEnvironmentsRequest {
	s.Query = v
	return s
}

type GetGrayEnvironmentsResponseBody struct {
	Code      *int                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      []*GetGrayEnvironmentsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s GetGrayEnvironmentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsResponseBody) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsResponseBody) SetCode(v int) *GetGrayEnvironmentsResponseBody {
	s.Code = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBody) SetMessage(v string) *GetGrayEnvironmentsResponseBody {
	s.Message = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBody) SetRequestId(v string) *GetGrayEnvironmentsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBody) SetData(v []*GetGrayEnvironmentsResponseBodyData) *GetGrayEnvironmentsResponseBody {
	s.Data = v
	return s
}

type GetGrayEnvironmentsResponseBodyData struct {
	AccountId  *string                                      `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	PointcutId *int64                                       `json:"PointcutId,omitempty" xml:"PointcutId,omitempty" require:"true"`
	RegionId   *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	TenantId   *string                                      `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
	Metadata   *GetGrayEnvironmentsResponseBodyDataMetadata `json:"Metadata,omitempty" xml:"Metadata,omitempty" require:"true" type:"Struct"`
	Spec       *GetGrayEnvironmentsResponseBodyDataSpec     `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true" type:"Struct"`
}

func (s GetGrayEnvironmentsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsResponseBodyData) SetAccountId(v string) *GetGrayEnvironmentsResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyData) SetPointcutId(v int64) *GetGrayEnvironmentsResponseBodyData {
	s.PointcutId = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyData) SetRegionId(v string) *GetGrayEnvironmentsResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyData) SetTenantId(v string) *GetGrayEnvironmentsResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyData) SetMetadata(v *GetGrayEnvironmentsResponseBodyDataMetadata) *GetGrayEnvironmentsResponseBodyData {
	s.Metadata = v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyData) SetSpec(v *GetGrayEnvironmentsResponseBodyDataSpec) *GetGrayEnvironmentsResponseBodyData {
	s.Spec = v
	return s
}

type GetGrayEnvironmentsResponseBodyDataMetadata struct {
	Annotations map[string]interface{} `json:"Annotations,omitempty" xml:"Annotations,omitempty" require:"true"`
	Labels      map[string]interface{} `json:"Labels,omitempty" xml:"Labels,omitempty" require:"true"`
	Name        *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace   *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s GetGrayEnvironmentsResponseBodyDataMetadata) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsResponseBodyDataMetadata) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsResponseBodyDataMetadata) SetAnnotations(v map[string]interface{}) *GetGrayEnvironmentsResponseBodyDataMetadata {
	s.Annotations = v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataMetadata) SetLabels(v map[string]interface{}) *GetGrayEnvironmentsResponseBodyDataMetadata {
	s.Labels = v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataMetadata) SetName(v string) *GetGrayEnvironmentsResponseBodyDataMetadata {
	s.Name = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataMetadata) SetNamespace(v string) *GetGrayEnvironmentsResponseBodyDataMetadata {
	s.Namespace = &v
	return s
}

type GetGrayEnvironmentsResponseBodyDataSpec struct {
	Enable   *bool                                            `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	Selector map[string]interface{}                           `json:"Selector,omitempty" xml:"Selector,omitempty" require:"true"`
	ShowName *string                                          `json:"ShowName,omitempty" xml:"ShowName,omitempty" require:"true"`
	Single   *bool                                            `json:"Single,omitempty" xml:"Single,omitempty" require:"true"`
	Tag      *string                                          `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	Scopes   []*GetGrayEnvironmentsResponseBodyDataSpecScopes `json:"Scopes,omitempty" xml:"Scopes,omitempty" require:"true" type:"Repeated"`
}

func (s GetGrayEnvironmentsResponseBodyDataSpec) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsResponseBodyDataSpec) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsResponseBodyDataSpec) SetEnable(v bool) *GetGrayEnvironmentsResponseBodyDataSpec {
	s.Enable = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpec) SetSelector(v map[string]interface{}) *GetGrayEnvironmentsResponseBodyDataSpec {
	s.Selector = v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpec) SetShowName(v string) *GetGrayEnvironmentsResponseBodyDataSpec {
	s.ShowName = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpec) SetSingle(v bool) *GetGrayEnvironmentsResponseBodyDataSpec {
	s.Single = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpec) SetTag(v string) *GetGrayEnvironmentsResponseBodyDataSpec {
	s.Tag = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpec) SetScopes(v []*GetGrayEnvironmentsResponseBodyDataSpecScopes) *GetGrayEnvironmentsResponseBodyDataSpec {
	s.Scopes = v
	return s
}

type GetGrayEnvironmentsResponseBodyDataSpecScopes struct {
	Extra     *string                                                 `json:"Extra,omitempty" xml:"Extra,omitempty" require:"true"`
	Id        *int64                                                  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Key       *string                                                 `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value     *string                                                 `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	ValueFrom *GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom `json:"ValueFrom,omitempty" xml:"ValueFrom,omitempty" require:"true" type:"Struct"`
}

func (s GetGrayEnvironmentsResponseBodyDataSpecScopes) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsResponseBodyDataSpecScopes) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsResponseBodyDataSpecScopes) SetExtra(v string) *GetGrayEnvironmentsResponseBodyDataSpecScopes {
	s.Extra = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpecScopes) SetId(v int64) *GetGrayEnvironmentsResponseBodyDataSpecScopes {
	s.Id = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpecScopes) SetKey(v string) *GetGrayEnvironmentsResponseBodyDataSpecScopes {
	s.Key = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpecScopes) SetValue(v string) *GetGrayEnvironmentsResponseBodyDataSpecScopes {
	s.Value = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpecScopes) SetValueFrom(v *GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom) *GetGrayEnvironmentsResponseBodyDataSpecScopes {
	s.ValueFrom = v
	return s
}

type GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom struct {
	RefName  *string `json:"RefName,omitempty" xml:"RefName,omitempty" require:"true"`
	RefValue *string `json:"RefValue,omitempty" xml:"RefValue,omitempty" require:"true"`
}

func (s GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom) SetRefName(v string) *GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom {
	s.RefName = &v
	return s
}

func (s *GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom) SetRefValue(v string) *GetGrayEnvironmentsResponseBodyDataSpecScopesValueFrom {
	s.RefValue = &v
	return s
}

type GetGrayEnvironmentsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetGrayEnvironmentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetGrayEnvironmentsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetGrayEnvironmentsResponse) GoString() string {
	return s.String()
}

func (s *GetGrayEnvironmentsResponse) SetHeaders(v map[string]*string) *GetGrayEnvironmentsResponse {
	s.Headers = v
	return s
}

func (s *GetGrayEnvironmentsResponse) SetBody(v *GetGrayEnvironmentsResponseBody) *GetGrayEnvironmentsResponse {
	s.Body = v
	return s
}

type GetIstioTestMethodQuery struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	HttpMethod       *string `json:"HttpMethod,omitempty" xml:"HttpMethod,omitempty"`
	MethodController *string `json:"MethodController,omitempty" xml:"MethodController,omitempty"`
	MethodSignature  *string `json:"MethodSignature,omitempty" xml:"MethodSignature,omitempty"`
	Namespace        *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	Region           *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	RequiredPath     *string `json:"RequiredPath,omitempty" xml:"RequiredPath,omitempty"`
	ServiceName      *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s GetIstioTestMethodQuery) String() string {
	return tea.Prettify(s)
}

func (s GetIstioTestMethodQuery) GoString() string {
	return s.String()
}

func (s *GetIstioTestMethodQuery) SetAppId(v string) *GetIstioTestMethodQuery {
	s.AppId = &v
	return s
}

func (s *GetIstioTestMethodQuery) SetHttpMethod(v string) *GetIstioTestMethodQuery {
	s.HttpMethod = &v
	return s
}

func (s *GetIstioTestMethodQuery) SetMethodController(v string) *GetIstioTestMethodQuery {
	s.MethodController = &v
	return s
}

func (s *GetIstioTestMethodQuery) SetMethodSignature(v string) *GetIstioTestMethodQuery {
	s.MethodSignature = &v
	return s
}

func (s *GetIstioTestMethodQuery) SetNamespace(v string) *GetIstioTestMethodQuery {
	s.Namespace = &v
	return s
}

func (s *GetIstioTestMethodQuery) SetRegion(v string) *GetIstioTestMethodQuery {
	s.Region = &v
	return s
}

func (s *GetIstioTestMethodQuery) SetRequiredPath(v string) *GetIstioTestMethodQuery {
	s.RequiredPath = &v
	return s
}

func (s *GetIstioTestMethodQuery) SetServiceName(v string) *GetIstioTestMethodQuery {
	s.ServiceName = &v
	return s
}

type GetIstioTestMethodRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetIstioTestMethodQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetIstioTestMethodRequest) String() string {
	return tea.Prettify(s)
}

func (s GetIstioTestMethodRequest) GoString() string {
	return s.String()
}

func (s *GetIstioTestMethodRequest) SetHeaders(v map[string]*string) *GetIstioTestMethodRequest {
	s.Headers = v
	return s
}

func (s *GetIstioTestMethodRequest) SetQuery(v *GetIstioTestMethodQuery) *GetIstioTestMethodRequest {
	s.Query = v
	return s
}

type GetIstioTestMethodResponseBody struct {
	Code           *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpStatusCode *int                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty" require:"true"`
	Message        *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data           *GetIstioTestMethodResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetIstioTestMethodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetIstioTestMethodResponseBody) GoString() string {
	return s.String()
}

func (s *GetIstioTestMethodResponseBody) SetCode(v int) *GetIstioTestMethodResponseBody {
	s.Code = &v
	return s
}

func (s *GetIstioTestMethodResponseBody) SetHttpStatusCode(v int) *GetIstioTestMethodResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *GetIstioTestMethodResponseBody) SetMessage(v string) *GetIstioTestMethodResponseBody {
	s.Message = &v
	return s
}

func (s *GetIstioTestMethodResponseBody) SetRequestId(v string) *GetIstioTestMethodResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetIstioTestMethodResponseBody) SetSuccess(v bool) *GetIstioTestMethodResponseBody {
	s.Success = &v
	return s
}

func (s *GetIstioTestMethodResponseBody) SetData(v *GetIstioTestMethodResponseBodyData) *GetIstioTestMethodResponseBody {
	s.Data = v
	return s
}

type GetIstioTestMethodResponseBodyData struct {
	HttpHeaders    map[string]interface{} `json:"HttpHeaders,omitempty" xml:"HttpHeaders,omitempty" require:"true"`
	Params         map[string]interface{} `json:"Params,omitempty" xml:"Params,omitempty" require:"true"`
	Path           *string                `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	RequestMethods []*string              `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty" require:"true" type:"Repeated"`
	Urls           []*string              `json:"Urls,omitempty" xml:"Urls,omitempty" require:"true" type:"Repeated"`
}

func (s GetIstioTestMethodResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetIstioTestMethodResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetIstioTestMethodResponseBodyData) SetHttpHeaders(v map[string]interface{}) *GetIstioTestMethodResponseBodyData {
	s.HttpHeaders = v
	return s
}

func (s *GetIstioTestMethodResponseBodyData) SetParams(v map[string]interface{}) *GetIstioTestMethodResponseBodyData {
	s.Params = v
	return s
}

func (s *GetIstioTestMethodResponseBodyData) SetPath(v string) *GetIstioTestMethodResponseBodyData {
	s.Path = &v
	return s
}

func (s *GetIstioTestMethodResponseBodyData) SetRequestMethods(v []*string) *GetIstioTestMethodResponseBodyData {
	s.RequestMethods = v
	return s
}

func (s *GetIstioTestMethodResponseBodyData) SetUrls(v []*string) *GetIstioTestMethodResponseBodyData {
	s.Urls = v
	return s
}

type GetIstioTestMethodResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetIstioTestMethodResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetIstioTestMethodResponse) String() string {
	return tea.Prettify(s)
}

func (s GetIstioTestMethodResponse) GoString() string {
	return s.String()
}

func (s *GetIstioTestMethodResponse) SetHeaders(v map[string]*string) *GetIstioTestMethodResponse {
	s.Headers = v
	return s
}

func (s *GetIstioTestMethodResponse) SetBody(v *GetIstioTestMethodResponseBody) *GetIstioTestMethodResponse {
	s.Body = v
	return s
}

type GetJavaStartUpConfigQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s GetJavaStartUpConfigQuery) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigQuery) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigQuery) SetAppId(v string) *GetJavaStartUpConfigQuery {
	s.AppId = &v
	return s
}

type GetJavaStartUpConfigRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetJavaStartUpConfigQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetJavaStartUpConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigRequest) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigRequest) SetHeaders(v map[string]*string) *GetJavaStartUpConfigRequest {
	s.Headers = v
	return s
}

func (s *GetJavaStartUpConfigRequest) SetQuery(v *GetJavaStartUpConfigQuery) *GetJavaStartUpConfigRequest {
	s.Query = v
	return s
}

type GetJavaStartUpConfigResponseBody struct {
	Code              *int                                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message           *string                                            `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	JavaStartUpConfig *GetJavaStartUpConfigResponseBodyJavaStartUpConfig `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty" require:"true" type:"Struct"`
}

func (s GetJavaStartUpConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigResponseBody) SetCode(v int) *GetJavaStartUpConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetJavaStartUpConfigResponseBody) SetMessage(v string) *GetJavaStartUpConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetJavaStartUpConfigResponseBody) SetRequestId(v string) *GetJavaStartUpConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetJavaStartUpConfigResponseBody) SetJavaStartUpConfig(v *GetJavaStartUpConfigResponseBodyJavaStartUpConfig) *GetJavaStartUpConfigResponseBody {
	s.JavaStartUpConfig = v
	return s
}

type GetJavaStartUpConfigResponseBodyJavaStartUpConfig struct {
	OriginalConfigs *string `json:"OriginalConfigs,omitempty" xml:"OriginalConfigs,omitempty" require:"true"`
	StartUpArgs     *string `json:"StartUpArgs,omitempty" xml:"StartUpArgs,omitempty" require:"true"`
}

func (s GetJavaStartUpConfigResponseBodyJavaStartUpConfig) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigResponseBodyJavaStartUpConfig) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigResponseBodyJavaStartUpConfig) SetOriginalConfigs(v string) *GetJavaStartUpConfigResponseBodyJavaStartUpConfig {
	s.OriginalConfigs = &v
	return s
}

func (s *GetJavaStartUpConfigResponseBodyJavaStartUpConfig) SetStartUpArgs(v string) *GetJavaStartUpConfigResponseBodyJavaStartUpConfig {
	s.StartUpArgs = &v
	return s
}

type GetJavaStartUpConfigResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJavaStartUpConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJavaStartUpConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJavaStartUpConfigResponse) GoString() string {
	return s.String()
}

func (s *GetJavaStartUpConfigResponse) SetHeaders(v map[string]*string) *GetJavaStartUpConfigResponse {
	s.Headers = v
	return s
}

func (s *GetJavaStartUpConfigResponse) SetBody(v *GetJavaStartUpConfigResponseBody) *GetJavaStartUpConfigResponse {
	s.Body = v
	return s
}

type GetJvmConfigurationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
}

func (s GetJvmConfigurationQuery) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationQuery) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationQuery) SetAppId(v string) *GetJvmConfigurationQuery {
	s.AppId = &v
	return s
}

func (s *GetJvmConfigurationQuery) SetGroupId(v string) *GetJvmConfigurationQuery {
	s.GroupId = &v
	return s
}

type GetJvmConfigurationRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetJvmConfigurationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetJvmConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationRequest) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationRequest) SetHeaders(v map[string]*string) *GetJvmConfigurationRequest {
	s.Headers = v
	return s
}

func (s *GetJvmConfigurationRequest) SetQuery(v *GetJvmConfigurationQuery) *GetJvmConfigurationRequest {
	s.Query = v
	return s
}

type GetJvmConfigurationResponseBody struct {
	Code             *int                                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message          *string                                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	JvmConfiguration *GetJvmConfigurationResponseBodyJvmConfiguration `json:"JvmConfiguration,omitempty" xml:"JvmConfiguration,omitempty" require:"true" type:"Struct"`
}

func (s GetJvmConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationResponseBody) SetCode(v int) *GetJvmConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *GetJvmConfigurationResponseBody) SetMessage(v string) *GetJvmConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *GetJvmConfigurationResponseBody) SetRequestId(v string) *GetJvmConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetJvmConfigurationResponseBody) SetJvmConfiguration(v *GetJvmConfigurationResponseBodyJvmConfiguration) *GetJvmConfigurationResponseBody {
	s.JvmConfiguration = v
	return s
}

type GetJvmConfigurationResponseBodyJvmConfiguration struct {
	MaxHeapSize *int    `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty" require:"true"`
	MaxPermSize *int    `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty" require:"true"`
	MinHeapSize *int    `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty" require:"true"`
	Options     *string `json:"Options,omitempty" xml:"Options,omitempty" require:"true"`
}

func (s GetJvmConfigurationResponseBodyJvmConfiguration) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationResponseBodyJvmConfiguration) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetMaxHeapSize(v int) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxHeapSize = &v
	return s
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetMaxPermSize(v int) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxPermSize = &v
	return s
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetMinHeapSize(v int) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.MinHeapSize = &v
	return s
}

func (s *GetJvmConfigurationResponseBodyJvmConfiguration) SetOptions(v string) *GetJvmConfigurationResponseBodyJvmConfiguration {
	s.Options = &v
	return s
}

type GetJvmConfigurationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJvmConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJvmConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJvmConfigurationResponse) GoString() string {
	return s.String()
}

func (s *GetJvmConfigurationResponse) SetHeaders(v map[string]*string) *GetJvmConfigurationResponse {
	s.Headers = v
	return s
}

func (s *GetJvmConfigurationResponse) SetBody(v *GetJvmConfigurationResponseBody) *GetJvmConfigurationResponse {
	s.Body = v
	return s
}

type GetK8sApplicationQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	From  *string `json:"From,omitempty" xml:"From,omitempty"`
}

func (s GetK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationQuery) SetAppId(v string) *GetK8sApplicationQuery {
	s.AppId = &v
	return s
}

func (s *GetK8sApplicationQuery) SetFrom(v string) *GetK8sApplicationQuery {
	s.From = &v
	return s
}

type GetK8sApplicationRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationRequest) SetHeaders(v map[string]*string) *GetK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *GetK8sApplicationRequest) SetQuery(v *GetK8sApplicationQuery) *GetK8sApplicationRequest {
	s.Query = v
	return s
}

type GetK8sApplicationResponseBody struct {
	Code       *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message    *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId  *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Applcation *GetK8sApplicationResponseBodyApplcation `json:"Applcation,omitempty" xml:"Applcation,omitempty" require:"true" type:"Struct"`
}

func (s GetK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBody) SetCode(v int) *GetK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *GetK8sApplicationResponseBody) SetMessage(v string) *GetK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *GetK8sApplicationResponseBody) SetRequestId(v string) *GetK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetK8sApplicationResponseBody) SetApplcation(v *GetK8sApplicationResponseBodyApplcation) *GetK8sApplicationResponseBody {
	s.Applcation = v
	return s
}

type GetK8sApplicationResponseBodyApplcation struct {
	AppId         *string                                               `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	DeployGroups  *GetK8sApplicationResponseBodyApplcationDeployGroups  `json:"DeployGroups,omitempty" xml:"DeployGroups,omitempty" require:"true" type:"Struct"`
	App           *GetK8sApplicationResponseBodyApplcationApp           `json:"App,omitempty" xml:"App,omitempty" require:"true" type:"Struct"`
	Conf          *GetK8sApplicationResponseBodyApplcationConf          `json:"Conf,omitempty" xml:"Conf,omitempty" require:"true" type:"Struct"`
	ImageInfo     *GetK8sApplicationResponseBodyApplcationImageInfo     `json:"ImageInfo,omitempty" xml:"ImageInfo,omitempty" require:"true" type:"Struct"`
	LatestVersion *GetK8sApplicationResponseBodyApplcationLatestVersion `json:"LatestVersion,omitempty" xml:"LatestVersion,omitempty" require:"true" type:"Struct"`
}

func (s GetK8sApplicationResponseBodyApplcation) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcation) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcation) SetAppId(v string) *GetK8sApplicationResponseBodyApplcation {
	s.AppId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetDeployGroups(v *GetK8sApplicationResponseBodyApplcationDeployGroups) *GetK8sApplicationResponseBodyApplcation {
	s.DeployGroups = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetApp(v *GetK8sApplicationResponseBodyApplcationApp) *GetK8sApplicationResponseBodyApplcation {
	s.App = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetConf(v *GetK8sApplicationResponseBodyApplcationConf) *GetK8sApplicationResponseBodyApplcation {
	s.Conf = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetImageInfo(v *GetK8sApplicationResponseBodyApplcationImageInfo) *GetK8sApplicationResponseBodyApplcation {
	s.ImageInfo = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcation) SetLatestVersion(v *GetK8sApplicationResponseBodyApplcationLatestVersion) *GetK8sApplicationResponseBodyApplcation {
	s.LatestVersion = v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroups struct {
	DeployGroup []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup `json:"DeployGroup,omitempty" xml:"DeployGroup,omitempty" require:"true" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroups) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroups) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroups) SetDeployGroup(v []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) *GetK8sApplicationResponseBodyApplcationDeployGroups {
	s.DeployGroup = v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup struct {
	Components *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents `json:"Components,omitempty" xml:"Components,omitempty" require:"true" type:"Struct"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup) SetComponents(v *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroup {
	s.Components = v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents struct {
	Components []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents `json:"Components,omitempty" xml:"Components,omitempty" require:"true" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents) SetComponents(v []*GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponents {
	s.Components = v
	return s
}

type GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents struct {
	ComponentId  *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" require:"true"`
	ComponentKey *string `json:"ComponentKey,omitempty" xml:"ComponentKey,omitempty" require:"true"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) SetComponentId(v string) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents {
	s.ComponentId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) SetComponentKey(v string) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents {
	s.ComponentKey = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents) SetType(v string) *GetK8sApplicationResponseBodyApplcationDeployGroupsDeployGroupComponentsComponents {
	s.Type = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationApp struct {
	AppId                  *string                                            `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ApplicationName        *string                                            `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty" require:"true"`
	ApplicationType        *string                                            `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty" require:"true"`
	BuildpackId            *int                                               `json:"BuildpackId,omitempty" xml:"BuildpackId,omitempty" require:"true"`
	ClusterId              *string                                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Cmd                    *string                                            `json:"Cmd,omitempty" xml:"Cmd,omitempty" require:"true"`
	CsClusterId            *string                                            `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty" require:"true"`
	DeployType             *string                                            `json:"DeployType,omitempty" xml:"DeployType,omitempty" require:"true"`
	EdasContainerVersion   *string                                            `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty" require:"true"`
	Instances              *int                                               `json:"Instances,omitempty" xml:"Instances,omitempty" require:"true"`
	InstancesBeforeScaling *int                                               `json:"InstancesBeforeScaling,omitempty" xml:"InstancesBeforeScaling,omitempty" require:"true"`
	K8sNamespace           *string                                            `json:"K8sNamespace,omitempty" xml:"K8sNamespace,omitempty" require:"true"`
	LimitCpuM              *int                                               `json:"LimitCpuM,omitempty" xml:"LimitCpuM,omitempty" require:"true"`
	LimitMem               *int                                               `json:"LimitMem,omitempty" xml:"LimitMem,omitempty" require:"true"`
	RegionId               *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RequestCpuM            *int                                               `json:"RequestCpuM,omitempty" xml:"RequestCpuM,omitempty" require:"true"`
	RequestMem             *int                                               `json:"RequestMem,omitempty" xml:"RequestMem,omitempty" require:"true"`
	TomcatVersion          *string                                            `json:"TomcatVersion,omitempty" xml:"TomcatVersion,omitempty" require:"true"`
	EnvList                *GetK8sApplicationResponseBodyApplcationAppEnvList `json:"EnvList,omitempty" xml:"EnvList,omitempty" require:"true" type:"Struct"`
	CmdArgs                *GetK8sApplicationResponseBodyApplcationAppCmdArgs `json:"CmdArgs,omitempty" xml:"CmdArgs,omitempty" require:"true" type:"Struct"`
}

func (s GetK8sApplicationResponseBodyApplcationApp) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationApp) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetAppId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.AppId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetApplicationName(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.ApplicationName = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetApplicationType(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.ApplicationType = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetBuildpackId(v int) *GetK8sApplicationResponseBodyApplcationApp {
	s.BuildpackId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetClusterId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.ClusterId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetCmd(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.Cmd = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetCsClusterId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.CsClusterId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetDeployType(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.DeployType = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetEdasContainerVersion(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.EdasContainerVersion = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetInstances(v int) *GetK8sApplicationResponseBodyApplcationApp {
	s.Instances = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetInstancesBeforeScaling(v int) *GetK8sApplicationResponseBodyApplcationApp {
	s.InstancesBeforeScaling = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetK8sNamespace(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.K8sNamespace = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetLimitCpuM(v int) *GetK8sApplicationResponseBodyApplcationApp {
	s.LimitCpuM = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetLimitMem(v int) *GetK8sApplicationResponseBodyApplcationApp {
	s.LimitMem = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetRegionId(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.RegionId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetRequestCpuM(v int) *GetK8sApplicationResponseBodyApplcationApp {
	s.RequestCpuM = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetRequestMem(v int) *GetK8sApplicationResponseBodyApplcationApp {
	s.RequestMem = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetTomcatVersion(v string) *GetK8sApplicationResponseBodyApplcationApp {
	s.TomcatVersion = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetEnvList(v *GetK8sApplicationResponseBodyApplcationAppEnvList) *GetK8sApplicationResponseBodyApplcationApp {
	s.EnvList = v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationApp) SetCmdArgs(v *GetK8sApplicationResponseBodyApplcationAppCmdArgs) *GetK8sApplicationResponseBodyApplcationApp {
	s.CmdArgs = v
	return s
}

type GetK8sApplicationResponseBodyApplcationAppEnvList struct {
	Env []*GetK8sApplicationResponseBodyApplcationAppEnvListEnv `json:"Env,omitempty" xml:"Env,omitempty" require:"true" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvList) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvList) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationAppEnvList) SetEnv(v []*GetK8sApplicationResponseBodyApplcationAppEnvListEnv) *GetK8sApplicationResponseBodyApplcationAppEnvList {
	s.Env = v
	return s
}

type GetK8sApplicationResponseBodyApplcationAppEnvListEnv struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvListEnv) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationAppEnvListEnv) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationAppEnvListEnv) SetName(v string) *GetK8sApplicationResponseBodyApplcationAppEnvListEnv {
	s.Name = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationAppEnvListEnv) SetValue(v string) *GetK8sApplicationResponseBodyApplcationAppEnvListEnv {
	s.Value = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationAppCmdArgs struct {
	CmdArg []*string `json:"CmdArg,omitempty" xml:"CmdArg,omitempty" require:"true" type:"Repeated"`
}

func (s GetK8sApplicationResponseBodyApplcationAppCmdArgs) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationAppCmdArgs) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationAppCmdArgs) SetCmdArg(v []*string) *GetK8sApplicationResponseBodyApplcationAppCmdArgs {
	s.CmdArg = v
	return s
}

type GetK8sApplicationResponseBodyApplcationConf struct {
	AhasEnabled        *bool   `json:"AhasEnabled,omitempty" xml:"AhasEnabled,omitempty" require:"true"`
	DeployAcrossNodes  *string `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty" require:"true"`
	DeployAcrossZones  *string `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty" require:"true"`
	JarStartArgs       *string `json:"JarStartArgs,omitempty" xml:"JarStartArgs,omitempty" require:"true"`
	JarStartOptions    *string `json:"JarStartOptions,omitempty" xml:"JarStartOptions,omitempty" require:"true"`
	K8sCmd             *string `json:"K8sCmd,omitempty" xml:"K8sCmd,omitempty" require:"true"`
	K8sCmdArgs         *string `json:"K8sCmdArgs,omitempty" xml:"K8sCmdArgs,omitempty" require:"true"`
	K8sLocalvolumeInfo *string `json:"K8sLocalvolumeInfo,omitempty" xml:"K8sLocalvolumeInfo,omitempty" require:"true"`
	K8sNasInfo         *string `json:"K8sNasInfo,omitempty" xml:"K8sNasInfo,omitempty" require:"true"`
	K8sVolumeInfo      *string `json:"K8sVolumeInfo,omitempty" xml:"K8sVolumeInfo,omitempty" require:"true"`
	Liveness           *string `json:"Liveness,omitempty" xml:"Liveness,omitempty" require:"true"`
	PostStart          *string `json:"PostStart,omitempty" xml:"PostStart,omitempty" require:"true"`
	PreStop            *string `json:"PreStop,omitempty" xml:"PreStop,omitempty" require:"true"`
	Readiness          *string `json:"Readiness,omitempty" xml:"Readiness,omitempty" require:"true"`
	RuntimeClassName   *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty" require:"true"`
}

func (s GetK8sApplicationResponseBodyApplcationConf) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationConf) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetAhasEnabled(v bool) *GetK8sApplicationResponseBodyApplcationConf {
	s.AhasEnabled = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetDeployAcrossNodes(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.DeployAcrossNodes = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetDeployAcrossZones(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.DeployAcrossZones = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetJarStartArgs(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.JarStartArgs = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetJarStartOptions(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.JarStartOptions = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sCmd(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sCmd = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sCmdArgs(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sCmdArgs = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sLocalvolumeInfo(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sLocalvolumeInfo = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sNasInfo(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sNasInfo = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetK8sVolumeInfo(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.K8sVolumeInfo = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetLiveness(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.Liveness = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetPostStart(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.PostStart = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetPreStop(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.PreStop = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetReadiness(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.Readiness = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationConf) SetRuntimeClassName(v string) *GetK8sApplicationResponseBodyApplcationConf {
	s.RuntimeClassName = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationImageInfo struct {
	ImageUrl       *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty" require:"true"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RepoId         *string `json:"RepoId,omitempty" xml:"RepoId,omitempty" require:"true"`
	RepoName       *string `json:"RepoName,omitempty" xml:"RepoName,omitempty" require:"true"`
	RepoNamespace  *string `json:"RepoNamespace,omitempty" xml:"RepoNamespace,omitempty" require:"true"`
	RepoOriginType *string `json:"RepoOriginType,omitempty" xml:"RepoOriginType,omitempty" require:"true"`
	Tag            *string `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
}

func (s GetK8sApplicationResponseBodyApplcationImageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationImageInfo) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetImageUrl(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.ImageUrl = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRegionId(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RegionId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoId(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoId = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoName(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoName = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoNamespace(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoNamespace = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetRepoOriginType(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.RepoOriginType = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationImageInfo) SetTag(v string) *GetK8sApplicationResponseBodyApplcationImageInfo {
	s.Tag = &v
	return s
}

type GetK8sApplicationResponseBodyApplcationLatestVersion struct {
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty" require:"true"`
	WarUrl         *string `json:"WarUrl,omitempty" xml:"WarUrl,omitempty" require:"true"`
}

func (s GetK8sApplicationResponseBodyApplcationLatestVersion) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponseBodyApplcationLatestVersion) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponseBodyApplcationLatestVersion) SetPackageVersion(v string) *GetK8sApplicationResponseBodyApplcationLatestVersion {
	s.PackageVersion = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationLatestVersion) SetUrl(v string) *GetK8sApplicationResponseBodyApplcationLatestVersion {
	s.Url = &v
	return s
}

func (s *GetK8sApplicationResponseBodyApplcationLatestVersion) SetWarUrl(v string) *GetK8sApplicationResponseBodyApplcationLatestVersion {
	s.WarUrl = &v
	return s
}

type GetK8sApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *GetK8sApplicationResponse) SetHeaders(v map[string]*string) *GetK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *GetK8sApplicationResponse) SetBody(v *GetK8sApplicationResponseBody) *GetK8sApplicationResponse {
	s.Body = v
	return s
}

type GetK8sClusterQuery struct {
	ClusterType *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	CurrentPage *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionTag   *string `json:"RegionTag,omitempty" xml:"RegionTag,omitempty" require:"true"`
}

func (s GetK8sClusterQuery) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterQuery) GoString() string {
	return s.String()
}

func (s *GetK8sClusterQuery) SetClusterType(v int) *GetK8sClusterQuery {
	s.ClusterType = &v
	return s
}

func (s *GetK8sClusterQuery) SetCurrentPage(v int) *GetK8sClusterQuery {
	s.CurrentPage = &v
	return s
}

func (s *GetK8sClusterQuery) SetPageSize(v int) *GetK8sClusterQuery {
	s.PageSize = &v
	return s
}

func (s *GetK8sClusterQuery) SetRegionTag(v string) *GetK8sClusterQuery {
	s.RegionTag = &v
	return s
}

type GetK8sClusterRequest struct {
	Headers map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetK8sClusterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetK8sClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterRequest) GoString() string {
	return s.String()
}

func (s *GetK8sClusterRequest) SetHeaders(v map[string]*string) *GetK8sClusterRequest {
	s.Headers = v
	return s
}

func (s *GetK8sClusterRequest) SetQuery(v *GetK8sClusterQuery) *GetK8sClusterRequest {
	s.Query = v
	return s
}

type GetK8sClusterResponseBody struct {
	Code        *int                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ClusterPage *GetK8sClusterResponseBodyClusterPage `json:"ClusterPage,omitempty" xml:"ClusterPage,omitempty" require:"true" type:"Struct"`
}

func (s GetK8sClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBody) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBody) SetCode(v int) *GetK8sClusterResponseBody {
	s.Code = &v
	return s
}

func (s *GetK8sClusterResponseBody) SetMessage(v string) *GetK8sClusterResponseBody {
	s.Message = &v
	return s
}

func (s *GetK8sClusterResponseBody) SetRequestId(v string) *GetK8sClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetK8sClusterResponseBody) SetClusterPage(v *GetK8sClusterResponseBodyClusterPage) *GetK8sClusterResponseBody {
	s.ClusterPage = v
	return s
}

type GetK8sClusterResponseBodyClusterPage struct {
	CurrentPage *int                                             `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize    *int                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize   *int                                             `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	ClusterList *GetK8sClusterResponseBodyClusterPageClusterList `json:"ClusterList,omitempty" xml:"ClusterList,omitempty" require:"true" type:"Struct"`
}

func (s GetK8sClusterResponseBodyClusterPage) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBodyClusterPage) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBodyClusterPage) SetCurrentPage(v int) *GetK8sClusterResponseBodyClusterPage {
	s.CurrentPage = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPage) SetPageSize(v int) *GetK8sClusterResponseBodyClusterPage {
	s.PageSize = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPage) SetTotalSize(v int) *GetK8sClusterResponseBodyClusterPage {
	s.TotalSize = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPage) SetClusterList(v *GetK8sClusterResponseBodyClusterPageClusterList) *GetK8sClusterResponseBodyClusterPage {
	s.ClusterList = v
	return s
}

type GetK8sClusterResponseBodyClusterPageClusterList struct {
	Cluster []*GetK8sClusterResponseBodyClusterPageClusterListCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" require:"true" type:"Repeated"`
}

func (s GetK8sClusterResponseBodyClusterPageClusterList) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBodyClusterPageClusterList) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBodyClusterPageClusterList) SetCluster(v []*GetK8sClusterResponseBodyClusterPageClusterListCluster) *GetK8sClusterResponseBodyClusterPageClusterList {
	s.Cluster = v
	return s
}

type GetK8sClusterResponseBodyClusterPageClusterListCluster struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterImportStatus *int    `json:"ClusterImportStatus,omitempty" xml:"ClusterImportStatus,omitempty" require:"true"`
	ClusterName         *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	ClusterStatus       *int    `json:"ClusterStatus,omitempty" xml:"ClusterStatus,omitempty" require:"true"`
	ClusterType         *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Cpu                 *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CsClusterId         *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty" require:"true"`
	CsClusterStatus     *string `json:"CsClusterStatus,omitempty" xml:"CsClusterStatus,omitempty" require:"true"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Mem                 *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	NetworkMode         *int    `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty" require:"true"`
	NodeNum             *int    `json:"NodeNum,omitempty" xml:"NodeNum,omitempty" require:"true"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SubNetCidr          *string `json:"SubNetCidr,omitempty" xml:"SubNetCidr,omitempty" require:"true"`
	VpcId               *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VswitchId           *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty" require:"true"`
}

func (s GetK8sClusterResponseBodyClusterPageClusterListCluster) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponseBodyClusterPageClusterListCluster) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterImportStatus(v int) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterImportStatus = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterName(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterName = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterStatus(v int) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterStatus = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetClusterType(v int) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.ClusterType = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetCpu(v int) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.Cpu = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetCsClusterId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.CsClusterId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetCsClusterStatus(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.CsClusterStatus = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetDescription(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.Description = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetMem(v int) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.Mem = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetNetworkMode(v int) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.NetworkMode = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetNodeNum(v int) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.NodeNum = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetRegionId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.RegionId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetSubNetCidr(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.SubNetCidr = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetVpcId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.VpcId = &v
	return s
}

func (s *GetK8sClusterResponseBodyClusterPageClusterListCluster) SetVswitchId(v string) *GetK8sClusterResponseBodyClusterPageClusterListCluster {
	s.VswitchId = &v
	return s
}

type GetK8sClusterResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetK8sClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetK8sClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s GetK8sClusterResponse) GoString() string {
	return s.String()
}

func (s *GetK8sClusterResponse) SetHeaders(v map[string]*string) *GetK8sClusterResponse {
	s.Headers = v
	return s
}

func (s *GetK8sClusterResponse) SetBody(v *GetK8sClusterResponseBody) *GetK8sClusterResponse {
	s.Body = v
	return s
}

type GetK8sServicesQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s GetK8sServicesQuery) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesQuery) GoString() string {
	return s.String()
}

func (s *GetK8sServicesQuery) SetAppId(v string) *GetK8sServicesQuery {
	s.AppId = &v
	return s
}

type GetK8sServicesRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetK8sServicesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetK8sServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesRequest) GoString() string {
	return s.String()
}

func (s *GetK8sServicesRequest) SetHeaders(v map[string]*string) *GetK8sServicesRequest {
	s.Headers = v
	return s
}

func (s *GetK8sServicesRequest) SetQuery(v *GetK8sServicesQuery) *GetK8sServicesRequest {
	s.Query = v
	return s
}

type GetK8sServicesResponseBody struct {
	Code      *int                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Services  []*GetK8sServicesResponseBodyServices `json:"Services,omitempty" xml:"Services,omitempty" require:"true" type:"Repeated"`
}

func (s GetK8sServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponseBody) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponseBody) SetCode(v int) *GetK8sServicesResponseBody {
	s.Code = &v
	return s
}

func (s *GetK8sServicesResponseBody) SetMessage(v string) *GetK8sServicesResponseBody {
	s.Message = &v
	return s
}

func (s *GetK8sServicesResponseBody) SetRequestId(v string) *GetK8sServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetK8sServicesResponseBody) SetServices(v []*GetK8sServicesResponseBodyServices) *GetK8sServicesResponseBody {
	s.Services = v
	return s
}

type GetK8sServicesResponseBodyServices struct {
	ClusterIP    *string                                           `json:"ClusterIP,omitempty" xml:"ClusterIP,omitempty" require:"true"`
	Name         *string                                           `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type         *string                                           `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	ServicePorts []*GetK8sServicesResponseBodyServicesServicePorts `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty" require:"true" type:"Repeated"`
}

func (s GetK8sServicesResponseBodyServices) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponseBodyServices) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponseBodyServices) SetClusterIP(v string) *GetK8sServicesResponseBodyServices {
	s.ClusterIP = &v
	return s
}

func (s *GetK8sServicesResponseBodyServices) SetName(v string) *GetK8sServicesResponseBodyServices {
	s.Name = &v
	return s
}

func (s *GetK8sServicesResponseBodyServices) SetType(v string) *GetK8sServicesResponseBodyServices {
	s.Type = &v
	return s
}

func (s *GetK8sServicesResponseBodyServices) SetServicePorts(v []*GetK8sServicesResponseBodyServicesServicePorts) *GetK8sServicesResponseBodyServices {
	s.ServicePorts = v
	return s
}

type GetK8sServicesResponseBodyServicesServicePorts struct {
	NodePort   *int    `json:"NodePort,omitempty" xml:"NodePort,omitempty" require:"true"`
	Port       *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	Protocol   *string `json:"Protocol,omitempty" xml:"Protocol,omitempty" require:"true"`
	TargetPort *string `json:"TargetPort,omitempty" xml:"TargetPort,omitempty" require:"true"`
}

func (s GetK8sServicesResponseBodyServicesServicePorts) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponseBodyServicesServicePorts) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetNodePort(v int) *GetK8sServicesResponseBodyServicesServicePorts {
	s.NodePort = &v
	return s
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetPort(v int) *GetK8sServicesResponseBodyServicesServicePorts {
	s.Port = &v
	return s
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetProtocol(v string) *GetK8sServicesResponseBodyServicesServicePorts {
	s.Protocol = &v
	return s
}

func (s *GetK8sServicesResponseBodyServicesServicePorts) SetTargetPort(v string) *GetK8sServicesResponseBodyServicesServicePorts {
	s.TargetPort = &v
	return s
}

type GetK8sServicesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetK8sServicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetK8sServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetK8sServicesResponse) GoString() string {
	return s.String()
}

func (s *GetK8sServicesResponse) SetHeaders(v map[string]*string) *GetK8sServicesResponse {
	s.Headers = v
	return s
}

func (s *GetK8sServicesResponse) SetBody(v *GetK8sServicesResponseBody) *GetK8sServicesResponse {
	s.Body = v
	return s
}

type GetK8sStorageInfoQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s GetK8sStorageInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s GetK8sStorageInfoQuery) GoString() string {
	return s.String()
}

func (s *GetK8sStorageInfoQuery) SetClusterId(v string) *GetK8sStorageInfoQuery {
	s.ClusterId = &v
	return s
}

type GetK8sStorageInfoRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetK8sStorageInfoQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetK8sStorageInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetK8sStorageInfoRequest) GoString() string {
	return s.String()
}

func (s *GetK8sStorageInfoRequest) SetHeaders(v map[string]*string) *GetK8sStorageInfoRequest {
	s.Headers = v
	return s
}

func (s *GetK8sStorageInfoRequest) SetQuery(v *GetK8sStorageInfoQuery) *GetK8sStorageInfoRequest {
	s.Query = v
	return s
}

type GetK8sStorageInfoResponseBody struct {
	Code        *int                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	StorageInfo *GetK8sStorageInfoResponseBodyStorageInfo `json:"StorageInfo,omitempty" xml:"StorageInfo,omitempty" require:"true" type:"Struct"`
}

func (s GetK8sStorageInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetK8sStorageInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetK8sStorageInfoResponseBody) SetCode(v int) *GetK8sStorageInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetK8sStorageInfoResponseBody) SetMessage(v string) *GetK8sStorageInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetK8sStorageInfoResponseBody) SetRequestId(v string) *GetK8sStorageInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetK8sStorageInfoResponseBody) SetStorageInfo(v *GetK8sStorageInfoResponseBodyStorageInfo) *GetK8sStorageInfoResponseBody {
	s.StorageInfo = v
	return s
}

type GetK8sStorageInfoResponseBodyStorageInfo struct {
	VolumePlugin *string `json:"VolumePlugin,omitempty" xml:"VolumePlugin,omitempty" require:"true"`
}

func (s GetK8sStorageInfoResponseBodyStorageInfo) String() string {
	return tea.Prettify(s)
}

func (s GetK8sStorageInfoResponseBodyStorageInfo) GoString() string {
	return s.String()
}

func (s *GetK8sStorageInfoResponseBodyStorageInfo) SetVolumePlugin(v string) *GetK8sStorageInfoResponseBodyStorageInfo {
	s.VolumePlugin = &v
	return s
}

type GetK8sStorageInfoResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetK8sStorageInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetK8sStorageInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetK8sStorageInfoResponse) GoString() string {
	return s.String()
}

func (s *GetK8sStorageInfoResponse) SetHeaders(v map[string]*string) *GetK8sStorageInfoResponse {
	s.Headers = v
	return s
}

func (s *GetK8sStorageInfoResponse) SetBody(v *GetK8sStorageInfoResponseBody) *GetK8sStorageInfoResponse {
	s.Body = v
	return s
}

type GetMockRuleByConsumerAppIdQuery struct {
	ConsumerAppId *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
}

func (s GetMockRuleByConsumerAppIdQuery) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdQuery) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdQuery) SetConsumerAppId(v string) *GetMockRuleByConsumerAppIdQuery {
	s.ConsumerAppId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdQuery) SetRegion(v string) *GetMockRuleByConsumerAppIdQuery {
	s.Region = &v
	return s
}

type GetMockRuleByConsumerAppIdRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetMockRuleByConsumerAppIdQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetMockRuleByConsumerAppIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdRequest) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdRequest) SetHeaders(v map[string]*string) *GetMockRuleByConsumerAppIdRequest {
	s.Headers = v
	return s
}

func (s *GetMockRuleByConsumerAppIdRequest) SetQuery(v *GetMockRuleByConsumerAppIdQuery) *GetMockRuleByConsumerAppIdRequest {
	s.Query = v
	return s
}

type GetMockRuleByConsumerAppIdResponseBody struct {
	Code      *string                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpCode  *string                                       `json:"HttpCode,omitempty" xml:"HttpCode,omitempty" require:"true"`
	Message   *string                                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      []*GetMockRuleByConsumerAppIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s GetMockRuleByConsumerAppIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetCode(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetHttpCode(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.HttpCode = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetMessage(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetRequestId(v string) *GetMockRuleByConsumerAppIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetSuccess(v bool) *GetMockRuleByConsumerAppIdResponseBody {
	s.Success = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBody) SetData(v []*GetMockRuleByConsumerAppIdResponseBodyData) *GetMockRuleByConsumerAppIdResponseBody {
	s.Data = v
	return s
}

type GetMockRuleByConsumerAppIdResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s GetMockRuleByConsumerAppIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetAccountId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetConsumerAppId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetConsumerAppName(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetEnable(v bool) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Enable = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetExtraJson(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetId(v int64) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetName(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetNamespaceId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetProviderAppId(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetProviderAppName(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetRegion(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetScMockItemJson(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponseBodyData) SetSource(v string) *GetMockRuleByConsumerAppIdResponseBodyData {
	s.Source = &v
	return s
}

type GetMockRuleByConsumerAppIdResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMockRuleByConsumerAppIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMockRuleByConsumerAppIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByConsumerAppIdResponse) GoString() string {
	return s.String()
}

func (s *GetMockRuleByConsumerAppIdResponse) SetHeaders(v map[string]*string) *GetMockRuleByConsumerAppIdResponse {
	s.Headers = v
	return s
}

func (s *GetMockRuleByConsumerAppIdResponse) SetBody(v *GetMockRuleByConsumerAppIdResponseBody) *GetMockRuleByConsumerAppIdResponse {
	s.Body = v
	return s
}

type GetMockRuleByIdQuery struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s GetMockRuleByIdQuery) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdQuery) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdQuery) SetId(v int64) *GetMockRuleByIdQuery {
	s.Id = &v
	return s
}

type GetMockRuleByIdRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetMockRuleByIdQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetMockRuleByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdRequest) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdRequest) SetHeaders(v map[string]*string) *GetMockRuleByIdRequest {
	s.Headers = v
	return s
}

func (s *GetMockRuleByIdRequest) SetQuery(v *GetMockRuleByIdQuery) *GetMockRuleByIdRequest {
	s.Query = v
	return s
}

type GetMockRuleByIdResponseBody struct {
	Code      *string                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *GetMockRuleByIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetMockRuleByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdResponseBody) SetCode(v string) *GetMockRuleByIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetMockRuleByIdResponseBody) SetMessage(v string) *GetMockRuleByIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetMockRuleByIdResponseBody) SetRequestId(v string) *GetMockRuleByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMockRuleByIdResponseBody) SetSuccess(v bool) *GetMockRuleByIdResponseBody {
	s.Success = &v
	return s
}

func (s *GetMockRuleByIdResponseBody) SetData(v *GetMockRuleByIdResponseBodyData) *GetMockRuleByIdResponseBody {
	s.Data = v
	return s
}

type GetMockRuleByIdResponseBodyData struct {
	AccountId       *string                                          `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId   *string                                          `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string                                          `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool                                            `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson       *string                                          `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id              *int64                                           `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string                                          `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ProviderAppId   *string                                          `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string                                          `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string                                          `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Source          *string                                          `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	DubboMockItems  []*GetMockRuleByIdResponseBodyDataDubboMockItems `json:"DubboMockItems,omitempty" xml:"DubboMockItems,omitempty" require:"true" type:"Repeated"`
	ScMockItems     []*GetMockRuleByIdResponseBodyDataScMockItems    `json:"ScMockItems,omitempty" xml:"ScMockItems,omitempty" require:"true" type:"Repeated"`
}

func (s GetMockRuleByIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdResponseBodyData) SetAccountId(v string) *GetMockRuleByIdResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetConsumerAppId(v string) *GetMockRuleByIdResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetConsumerAppName(v string) *GetMockRuleByIdResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetEnable(v bool) *GetMockRuleByIdResponseBodyData {
	s.Enable = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetExtraJson(v string) *GetMockRuleByIdResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetId(v int64) *GetMockRuleByIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetName(v string) *GetMockRuleByIdResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetProviderAppId(v string) *GetMockRuleByIdResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetProviderAppName(v string) *GetMockRuleByIdResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetRegion(v string) *GetMockRuleByIdResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetSource(v string) *GetMockRuleByIdResponseBodyData {
	s.Source = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetDubboMockItems(v []*GetMockRuleByIdResponseBodyDataDubboMockItems) *GetMockRuleByIdResponseBodyData {
	s.DubboMockItems = v
	return s
}

func (s *GetMockRuleByIdResponseBodyData) SetScMockItems(v []*GetMockRuleByIdResponseBodyDataScMockItems) *GetMockRuleByIdResponseBodyData {
	s.ScMockItems = v
	return s
}

type GetMockRuleByIdResponseBodyDataDubboMockItems struct {
	Condition          *string                                                           `json:"Condition,omitempty" xml:"Condition,omitempty" require:"true"`
	ExceptionClassName *string                                                           `json:"ExceptionClassName,omitempty" xml:"ExceptionClassName,omitempty" require:"true"`
	ExceptionMessage   *string                                                           `json:"ExceptionMessage,omitempty" xml:"ExceptionMessage,omitempty" require:"true"`
	ExecuteCondition   *string                                                           `json:"ExecuteCondition,omitempty" xml:"ExecuteCondition,omitempty" require:"true"`
	Group              *string                                                           `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	MethodName         *string                                                           `json:"MethodName,omitempty" xml:"MethodName,omitempty" require:"true"`
	Oper               *string                                                           `json:"Oper,omitempty" xml:"Oper,omitempty" require:"true"`
	ParamTypes         *string                                                           `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" require:"true"`
	Path               *string                                                           `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	ServiceName        *string                                                           `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	Timeout            *int64                                                            `json:"Timeout,omitempty" xml:"Timeout,omitempty" require:"true"`
	Value              *string                                                           `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	Version            *string                                                           `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	ArgumentMockItems  []*GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems `json:"ArgumentMockItems,omitempty" xml:"ArgumentMockItems,omitempty" require:"true" type:"Repeated"`
}

func (s GetMockRuleByIdResponseBodyDataDubboMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdResponseBodyDataDubboMockItems) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetCondition(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.Condition = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetExceptionClassName(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.ExceptionClassName = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetExceptionMessage(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.ExceptionMessage = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetExecuteCondition(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.ExecuteCondition = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetGroup(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.Group = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetMethodName(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.MethodName = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetOper(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.Oper = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetParamTypes(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.ParamTypes = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetPath(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.Path = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetServiceName(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.ServiceName = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetTimeout(v int64) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.Timeout = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetValue(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.Value = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetVersion(v string) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.Version = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItems) SetArgumentMockItems(v []*GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) *GetMockRuleByIdResponseBodyDataDubboMockItems {
	s.ArgumentMockItems = v
	return s
}

type GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems struct {
	Cond     *string `json:"Cond,omitempty" xml:"Cond,omitempty" require:"true"`
	Datum    *string `json:"Datum,omitempty" xml:"Datum,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) SetCond(v string) *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems {
	s.Cond = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) SetDatum(v string) *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems {
	s.Datum = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) SetName(v string) *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems {
	s.Name = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) SetOperator(v string) *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems {
	s.Operator = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems) SetType(v string) *GetMockRuleByIdResponseBodyDataDubboMockItemsArgumentMockItems {
	s.Type = &v
	return s
}

type GetMockRuleByIdResponseBodyDataScMockItems struct {
	Condition          *string                                                        `json:"Condition,omitempty" xml:"Condition,omitempty" require:"true"`
	ExceptionClassName *string                                                        `json:"ExceptionClassName,omitempty" xml:"ExceptionClassName,omitempty" require:"true"`
	ExecuteCondition   *string                                                        `json:"ExecuteCondition,omitempty" xml:"ExecuteCondition,omitempty" require:"true"`
	Method             *string                                                        `json:"Method,omitempty" xml:"Method,omitempty" require:"true"`
	Oper               *string                                                        `json:"Oper,omitempty" xml:"Oper,omitempty" require:"true"`
	Path               *string                                                        `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	ServiceName        *string                                                        `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	Timeout            *int64                                                         `json:"Timeout,omitempty" xml:"Timeout,omitempty" require:"true"`
	Value              *string                                                        `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	ArgumentMockItems  []*GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems `json:"ArgumentMockItems,omitempty" xml:"ArgumentMockItems,omitempty" require:"true" type:"Repeated"`
}

func (s GetMockRuleByIdResponseBodyDataScMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdResponseBodyDataScMockItems) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetCondition(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.Condition = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetExceptionClassName(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.ExceptionClassName = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetExecuteCondition(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.ExecuteCondition = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetMethod(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.Method = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetOper(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.Oper = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetPath(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.Path = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetServiceName(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.ServiceName = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetTimeout(v int64) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.Timeout = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetValue(v string) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.Value = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItems) SetArgumentMockItems(v []*GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) *GetMockRuleByIdResponseBodyDataScMockItems {
	s.ArgumentMockItems = v
	return s
}

type GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems struct {
	Cond     *string `json:"Cond,omitempty" xml:"Cond,omitempty" require:"true"`
	Datum    *string `json:"Datum,omitempty" xml:"Datum,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Operator *string `json:"Operator,omitempty" xml:"Operator,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) SetCond(v string) *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems {
	s.Cond = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) SetDatum(v string) *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems {
	s.Datum = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) SetName(v string) *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems {
	s.Name = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) SetOperator(v string) *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems {
	s.Operator = &v
	return s
}

func (s *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems) SetType(v string) *GetMockRuleByIdResponseBodyDataScMockItemsArgumentMockItems {
	s.Type = &v
	return s
}

type GetMockRuleByIdResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMockRuleByIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMockRuleByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByIdResponse) GoString() string {
	return s.String()
}

func (s *GetMockRuleByIdResponse) SetHeaders(v map[string]*string) *GetMockRuleByIdResponse {
	s.Headers = v
	return s
}

func (s *GetMockRuleByIdResponse) SetBody(v *GetMockRuleByIdResponseBody) *GetMockRuleByIdResponse {
	s.Body = v
	return s
}

type GetMockRuleByProviderAppIdQuery struct {
	ProviderAppId *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	Region        *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
}

func (s GetMockRuleByProviderAppIdQuery) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdQuery) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdQuery) SetProviderAppId(v string) *GetMockRuleByProviderAppIdQuery {
	s.ProviderAppId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdQuery) SetRegion(v string) *GetMockRuleByProviderAppIdQuery {
	s.Region = &v
	return s
}

type GetMockRuleByProviderAppIdRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetMockRuleByProviderAppIdQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetMockRuleByProviderAppIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdRequest) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdRequest) SetHeaders(v map[string]*string) *GetMockRuleByProviderAppIdRequest {
	s.Headers = v
	return s
}

func (s *GetMockRuleByProviderAppIdRequest) SetQuery(v *GetMockRuleByProviderAppIdQuery) *GetMockRuleByProviderAppIdRequest {
	s.Query = v
	return s
}

type GetMockRuleByProviderAppIdResponseBody struct {
	Code      *string                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpCode  *string                                       `json:"HttpCode,omitempty" xml:"HttpCode,omitempty" require:"true"`
	Message   *string                                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      []*GetMockRuleByProviderAppIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s GetMockRuleByProviderAppIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetCode(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetHttpCode(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.HttpCode = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetMessage(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetRequestId(v string) *GetMockRuleByProviderAppIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetSuccess(v bool) *GetMockRuleByProviderAppIdResponseBody {
	s.Success = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBody) SetData(v []*GetMockRuleByProviderAppIdResponseBodyData) *GetMockRuleByProviderAppIdResponseBody {
	s.Data = v
	return s
}

type GetMockRuleByProviderAppIdResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s GetMockRuleByProviderAppIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetAccountId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetConsumerAppId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetConsumerAppName(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetEnable(v bool) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Enable = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetExtraJson(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetId(v int64) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetName(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetNamespaceId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetProviderAppId(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetProviderAppName(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetRegion(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetScMockItemJson(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *GetMockRuleByProviderAppIdResponseBodyData) SetSource(v string) *GetMockRuleByProviderAppIdResponseBodyData {
	s.Source = &v
	return s
}

type GetMockRuleByProviderAppIdResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetMockRuleByProviderAppIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMockRuleByProviderAppIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMockRuleByProviderAppIdResponse) GoString() string {
	return s.String()
}

func (s *GetMockRuleByProviderAppIdResponse) SetHeaders(v map[string]*string) *GetMockRuleByProviderAppIdResponse {
	s.Headers = v
	return s
}

func (s *GetMockRuleByProviderAppIdResponse) SetBody(v *GetMockRuleByProviderAppIdResponseBody) *GetMockRuleByProviderAppIdResponse {
	s.Body = v
	return s
}

type GetPackageStorageCredentialRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s GetPackageStorageCredentialRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPackageStorageCredentialRequest) GoString() string {
	return s.String()
}

func (s *GetPackageStorageCredentialRequest) SetHeaders(v map[string]*string) *GetPackageStorageCredentialRequest {
	s.Headers = v
	return s
}

type GetPackageStorageCredentialResponseBody struct {
	Code       *int                                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message    *string                                            `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId  *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Credential *GetPackageStorageCredentialResponseBodyCredential `json:"Credential,omitempty" xml:"Credential,omitempty" require:"true" type:"Struct"`
}

func (s GetPackageStorageCredentialResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPackageStorageCredentialResponseBody) GoString() string {
	return s.String()
}

func (s *GetPackageStorageCredentialResponseBody) SetCode(v int) *GetPackageStorageCredentialResponseBody {
	s.Code = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBody) SetMessage(v string) *GetPackageStorageCredentialResponseBody {
	s.Message = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBody) SetRequestId(v string) *GetPackageStorageCredentialResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBody) SetCredential(v *GetPackageStorageCredentialResponseBodyCredential) *GetPackageStorageCredentialResponseBody {
	s.Credential = v
	return s
}

type GetPackageStorageCredentialResponseBodyCredential struct {
	AccessKeyId     *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty" require:"true"`
	AccessKeySecret *string `json:"AccessKeySecret,omitempty" xml:"AccessKeySecret,omitempty" require:"true"`
	Bucket          *string `json:"Bucket,omitempty" xml:"Bucket,omitempty" require:"true"`
	Expiration      *string `json:"Expiration,omitempty" xml:"Expiration,omitempty" require:"true"`
	KeyPrefix       *string `json:"KeyPrefix,omitempty" xml:"KeyPrefix,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SecurityToken   *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty" require:"true"`
}

func (s GetPackageStorageCredentialResponseBodyCredential) String() string {
	return tea.Prettify(s)
}

func (s GetPackageStorageCredentialResponseBodyCredential) GoString() string {
	return s.String()
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetAccessKeyId(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.AccessKeyId = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetAccessKeySecret(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.AccessKeySecret = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetBucket(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.Bucket = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetExpiration(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.Expiration = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetKeyPrefix(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.KeyPrefix = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetRegionId(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.RegionId = &v
	return s
}

func (s *GetPackageStorageCredentialResponseBodyCredential) SetSecurityToken(v string) *GetPackageStorageCredentialResponseBodyCredential {
	s.SecurityToken = &v
	return s
}

type GetPackageStorageCredentialResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetPackageStorageCredentialResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPackageStorageCredentialResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPackageStorageCredentialResponse) GoString() string {
	return s.String()
}

func (s *GetPackageStorageCredentialResponse) SetHeaders(v map[string]*string) *GetPackageStorageCredentialResponse {
	s.Headers = v
	return s
}

func (s *GetPackageStorageCredentialResponse) SetBody(v *GetPackageStorageCredentialResponseBody) *GetPackageStorageCredentialResponse {
	s.Body = v
	return s
}

type GetScalingRulesQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Mode    *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s GetScalingRulesQuery) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesQuery) GoString() string {
	return s.String()
}

func (s *GetScalingRulesQuery) SetAppId(v string) *GetScalingRulesQuery {
	s.AppId = &v
	return s
}

func (s *GetScalingRulesQuery) SetGroupId(v string) *GetScalingRulesQuery {
	s.GroupId = &v
	return s
}

func (s *GetScalingRulesQuery) SetMode(v string) *GetScalingRulesQuery {
	s.Mode = &v
	return s
}

type GetScalingRulesRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetScalingRulesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetScalingRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesRequest) GoString() string {
	return s.String()
}

func (s *GetScalingRulesRequest) SetHeaders(v map[string]*string) *GetScalingRulesRequest {
	s.Headers = v
	return s
}

func (s *GetScalingRulesRequest) SetQuery(v *GetScalingRulesQuery) *GetScalingRulesRequest {
	s.Query = v
	return s
}

type GetScalingRulesResponseBody struct {
	Code       *int                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message    *string                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId  *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	UpdateTime *int64                           `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	Data       *GetScalingRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetScalingRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBody) SetCode(v int) *GetScalingRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetScalingRulesResponseBody) SetMessage(v string) *GetScalingRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetScalingRulesResponseBody) SetRequestId(v string) *GetScalingRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScalingRulesResponseBody) SetUpdateTime(v int64) *GetScalingRulesResponseBody {
	s.UpdateTime = &v
	return s
}

func (s *GetScalingRulesResponseBody) SetData(v *GetScalingRulesResponseBodyData) *GetScalingRulesResponseBody {
	s.Data = v
	return s
}

type GetScalingRulesResponseBodyData struct {
	ClusterType    *int                                     `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	OversoldFactor *int                                     `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty" require:"true"`
	UpdateTime     *int64                                   `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	VpcId          *string                                  `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	RuleList       *GetScalingRulesResponseBodyDataRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" require:"true" type:"Struct"`
}

func (s GetScalingRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBodyData) SetClusterType(v int) *GetScalingRulesResponseBodyData {
	s.ClusterType = &v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetOversoldFactor(v int) *GetScalingRulesResponseBodyData {
	s.OversoldFactor = &v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetUpdateTime(v int64) *GetScalingRulesResponseBodyData {
	s.UpdateTime = &v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetVpcId(v string) *GetScalingRulesResponseBodyData {
	s.VpcId = &v
	return s
}

func (s *GetScalingRulesResponseBodyData) SetRuleList(v *GetScalingRulesResponseBodyDataRuleList) *GetScalingRulesResponseBodyData {
	s.RuleList = v
	return s
}

type GetScalingRulesResponseBodyDataRuleList struct {
	Rule []*GetScalingRulesResponseBodyDataRuleListRule `json:"Rule,omitempty" xml:"Rule,omitempty" require:"true" type:"Repeated"`
}

func (s GetScalingRulesResponseBodyDataRuleList) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBodyDataRuleList) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBodyDataRuleList) SetRule(v []*GetScalingRulesResponseBodyDataRuleListRule) *GetScalingRulesResponseBodyDataRuleList {
	s.Rule = v
	return s
}

type GetScalingRulesResponseBodyDataRuleListRule struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Cond            *string `json:"Cond,omitempty" xml:"Cond,omitempty" require:"true"`
	Cpu             *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Duration        *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	InstNum         *int    `json:"InstNum,omitempty" xml:"InstNum,omitempty" require:"true"`
	LoadNum         *int    `json:"LoadNum,omitempty" xml:"LoadNum,omitempty" require:"true"`
	MetricType      *string `json:"MetricType,omitempty" xml:"MetricType,omitempty" require:"true"`
	Mode            *string `json:"Mode,omitempty" xml:"Mode,omitempty" require:"true"`
	MultiAzPolicy   *string `json:"MultiAzPolicy,omitempty" xml:"MultiAzPolicy,omitempty" require:"true"`
	ResourceFrom    *string `json:"ResourceFrom,omitempty" xml:"ResourceFrom,omitempty" require:"true"`
	Rt              *int    `json:"Rt,omitempty" xml:"Rt,omitempty" require:"true"`
	SpecId          *string `json:"SpecId,omitempty" xml:"SpecId,omitempty" require:"true"`
	Step            *int    `json:"Step,omitempty" xml:"Step,omitempty" require:"true"`
	TemplateId      *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty" require:"true"`
	TemplateVersion *int    `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty" require:"true"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	VSwitchIds      *string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" require:"true"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
}

func (s GetScalingRulesResponseBodyDataRuleListRule) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponseBodyDataRuleListRule) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetAppId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.AppId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetCond(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Cond = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetCpu(v int) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Cpu = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetCreateTime(v int64) *GetScalingRulesResponseBodyDataRuleListRule {
	s.CreateTime = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetDuration(v int) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Duration = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetEnable(v bool) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Enable = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetGroupId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.GroupId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetInstNum(v int) *GetScalingRulesResponseBodyDataRuleListRule {
	s.InstNum = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetLoadNum(v int) *GetScalingRulesResponseBodyDataRuleListRule {
	s.LoadNum = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetMetricType(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.MetricType = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetMode(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Mode = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetMultiAzPolicy(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.MultiAzPolicy = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetResourceFrom(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.ResourceFrom = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetRt(v int) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Rt = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetSpecId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.SpecId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetStep(v int) *GetScalingRulesResponseBodyDataRuleListRule {
	s.Step = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetTemplateId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.TemplateId = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetTemplateVersion(v int) *GetScalingRulesResponseBodyDataRuleListRule {
	s.TemplateVersion = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetUpdateTime(v int64) *GetScalingRulesResponseBodyDataRuleListRule {
	s.UpdateTime = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetVSwitchIds(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.VSwitchIds = &v
	return s
}

func (s *GetScalingRulesResponseBodyDataRuleListRule) SetVpcId(v string) *GetScalingRulesResponseBodyDataRuleListRule {
	s.VpcId = &v
	return s
}

type GetScalingRulesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetScalingRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetScalingRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScalingRulesResponse) GoString() string {
	return s.String()
}

func (s *GetScalingRulesResponse) SetHeaders(v map[string]*string) *GetScalingRulesResponse {
	s.Headers = v
	return s
}

func (s *GetScalingRulesResponse) SetBody(v *GetScalingRulesResponseBody) *GetScalingRulesResponse {
	s.Body = v
	return s
}

type GetSecureTokenQuery struct {
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
}

func (s GetSecureTokenQuery) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenQuery) GoString() string {
	return s.String()
}

func (s *GetSecureTokenQuery) SetNamespaceId(v string) *GetSecureTokenQuery {
	s.NamespaceId = &v
	return s
}

type GetSecureTokenRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetSecureTokenQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetSecureTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenRequest) GoString() string {
	return s.String()
}

func (s *GetSecureTokenRequest) SetHeaders(v map[string]*string) *GetSecureTokenRequest {
	s.Headers = v
	return s
}

func (s *GetSecureTokenRequest) SetQuery(v *GetSecureTokenQuery) *GetSecureTokenRequest {
	s.Query = v
	return s
}

type GetSecureTokenResponseBody struct {
	Code        *int                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SecureToken *GetSecureTokenResponseBodySecureToken `json:"SecureToken,omitempty" xml:"SecureToken,omitempty" require:"true" type:"Struct"`
}

func (s GetSecureTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenResponseBody) GoString() string {
	return s.String()
}

func (s *GetSecureTokenResponseBody) SetCode(v int) *GetSecureTokenResponseBody {
	s.Code = &v
	return s
}

func (s *GetSecureTokenResponseBody) SetMessage(v string) *GetSecureTokenResponseBody {
	s.Message = &v
	return s
}

func (s *GetSecureTokenResponseBody) SetRequestId(v string) *GetSecureTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSecureTokenResponseBody) SetSecureToken(v *GetSecureTokenResponseBodySecureToken) *GetSecureTokenResponseBody {
	s.SecureToken = v
	return s
}

type GetSecureTokenResponseBodySecureToken struct {
	AccessKey         *string `json:"AccessKey,omitempty" xml:"AccessKey,omitempty" require:"true"`
	AddressServerHost *string `json:"AddressServerHost,omitempty" xml:"AddressServerHost,omitempty" require:"true"`
	BelongRegion      *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty" require:"true"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	EdasId            *string `json:"EdasId,omitempty" xml:"EdasId,omitempty" require:"true"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RegionName        *string `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	SecretKey         *string `json:"SecretKey,omitempty" xml:"SecretKey,omitempty" require:"true"`
	TenantId          *string `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
	UserId            *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s GetSecureTokenResponseBodySecureToken) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenResponseBodySecureToken) GoString() string {
	return s.String()
}

func (s *GetSecureTokenResponseBodySecureToken) SetAccessKey(v string) *GetSecureTokenResponseBodySecureToken {
	s.AccessKey = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetAddressServerHost(v string) *GetSecureTokenResponseBodySecureToken {
	s.AddressServerHost = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetBelongRegion(v string) *GetSecureTokenResponseBodySecureToken {
	s.BelongRegion = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetDescription(v string) *GetSecureTokenResponseBodySecureToken {
	s.Description = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetEdasId(v string) *GetSecureTokenResponseBodySecureToken {
	s.EdasId = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetId(v int64) *GetSecureTokenResponseBodySecureToken {
	s.Id = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetRegionId(v string) *GetSecureTokenResponseBodySecureToken {
	s.RegionId = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetRegionName(v string) *GetSecureTokenResponseBodySecureToken {
	s.RegionName = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetSecretKey(v string) *GetSecureTokenResponseBodySecureToken {
	s.SecretKey = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetTenantId(v string) *GetSecureTokenResponseBodySecureToken {
	s.TenantId = &v
	return s
}

func (s *GetSecureTokenResponseBodySecureToken) SetUserId(v string) *GetSecureTokenResponseBodySecureToken {
	s.UserId = &v
	return s
}

type GetSecureTokenResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSecureTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSecureTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSecureTokenResponse) GoString() string {
	return s.String()
}

func (s *GetSecureTokenResponse) SetHeaders(v map[string]*string) *GetSecureTokenResponse {
	s.Headers = v
	return s
}

func (s *GetSecureTokenResponse) SetBody(v *GetSecureTokenResponseBody) *GetSecureTokenResponse {
	s.Body = v
	return s
}

type GetServiceConsumersPageQuery struct {
	AppId          *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group          *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip             *string `json:"ip,omitempty" xml:"ip,omitempty"`
	Namespace      *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin         *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Page           *int    `json:"page,omitempty" xml:"page,omitempty"`
	Region         *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType   *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId      *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType    *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Size           *int    `json:"size,omitempty" xml:"size,omitempty"`
	Source         *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceConsumersPageQuery) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageQuery) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageQuery) SetAppId(v string) *GetServiceConsumersPageQuery {
	s.AppId = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetGroup(v string) *GetServiceConsumersPageQuery {
	s.Group = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetIp(v string) *GetServiceConsumersPageQuery {
	s.Ip = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetNamespace(v string) *GetServiceConsumersPageQuery {
	s.Namespace = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetOrigin(v string) *GetServiceConsumersPageQuery {
	s.Origin = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetPage(v int) *GetServiceConsumersPageQuery {
	s.Page = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetRegion(v string) *GetServiceConsumersPageQuery {
	s.Region = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetRegistryType(v string) *GetServiceConsumersPageQuery {
	s.RegistryType = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetServiceId(v string) *GetServiceConsumersPageQuery {
	s.ServiceId = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetServiceName(v string) *GetServiceConsumersPageQuery {
	s.ServiceName = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetServiceType(v string) *GetServiceConsumersPageQuery {
	s.ServiceType = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetServiceVersion(v string) *GetServiceConsumersPageQuery {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetSize(v int) *GetServiceConsumersPageQuery {
	s.Size = &v
	return s
}

func (s *GetServiceConsumersPageQuery) SetSource(v string) *GetServiceConsumersPageQuery {
	s.Source = &v
	return s
}

type GetServiceConsumersPageRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetServiceConsumersPageQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetServiceConsumersPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageRequest) SetHeaders(v map[string]*string) *GetServiceConsumersPageRequest {
	s.Headers = v
	return s
}

func (s *GetServiceConsumersPageRequest) SetQuery(v *GetServiceConsumersPageQuery) *GetServiceConsumersPageRequest {
	s.Query = v
	return s
}

type GetServiceConsumersPageResponseBody struct {
	Code    *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *GetServiceConsumersPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetServiceConsumersPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponseBody) SetCode(v int) *GetServiceConsumersPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceConsumersPageResponseBody) SetMessage(v string) *GetServiceConsumersPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceConsumersPageResponseBody) SetSuccess(v bool) *GetServiceConsumersPageResponseBody {
	s.Success = &v
	return s
}

func (s *GetServiceConsumersPageResponseBody) SetData(v *GetServiceConsumersPageResponseBodyData) *GetServiceConsumersPageResponseBody {
	s.Data = v
	return s
}

type GetServiceConsumersPageResponseBodyData struct {
	Size          *int                                              `json:"Size,omitempty" xml:"Size,omitempty" require:"true"`
	TotalElements *int                                              `json:"TotalElements,omitempty" xml:"TotalElements,omitempty" require:"true"`
	TotalPages    *int                                              `json:"TotalPages,omitempty" xml:"TotalPages,omitempty" require:"true"`
	Content       []*GetServiceConsumersPageResponseBodyDataContent `json:"Content,omitempty" xml:"Content,omitempty" require:"true" type:"Repeated"`
}

func (s GetServiceConsumersPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponseBodyData) SetSize(v int) *GetServiceConsumersPageResponseBodyData {
	s.Size = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyData) SetTotalElements(v int) *GetServiceConsumersPageResponseBodyData {
	s.TotalElements = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyData) SetTotalPages(v int) *GetServiceConsumersPageResponseBodyData {
	s.TotalPages = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyData) SetContent(v []*GetServiceConsumersPageResponseBodyDataContent) *GetServiceConsumersPageResponseBodyData {
	s.Content = v
	return s
}

type GetServiceConsumersPageResponseBodyDataContent struct {
	EdasAppName *string `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty" require:"true"`
	EdassAppId  *string `json:"EdassAppId,omitempty" xml:"EdassAppId,omitempty" require:"true"`
	Ip          *string `json:"Ip,omitempty" xml:"Ip,omitempty" require:"true"`
}

func (s GetServiceConsumersPageResponseBodyDataContent) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponseBodyDataContent) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponseBodyDataContent) SetEdasAppName(v string) *GetServiceConsumersPageResponseBodyDataContent {
	s.EdasAppName = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyDataContent) SetEdassAppId(v string) *GetServiceConsumersPageResponseBodyDataContent {
	s.EdassAppId = &v
	return s
}

func (s *GetServiceConsumersPageResponseBodyDataContent) SetIp(v string) *GetServiceConsumersPageResponseBodyDataContent {
	s.Ip = &v
	return s
}

type GetServiceConsumersPageResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceConsumersPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceConsumersPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceConsumersPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceConsumersPageResponse) SetHeaders(v map[string]*string) *GetServiceConsumersPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceConsumersPageResponse) SetBody(v *GetServiceConsumersPageResponseBody) *GetServiceConsumersPageResponse {
	s.Body = v
	return s
}

type GetServiceDetailQuery struct {
	AppId          *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group          *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip             *string `json:"ip,omitempty" xml:"ip,omitempty"`
	Namespace      *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin         *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Region         *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType   *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId      *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType    *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Source         *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceDetailQuery) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailQuery) GoString() string {
	return s.String()
}

func (s *GetServiceDetailQuery) SetAppId(v string) *GetServiceDetailQuery {
	s.AppId = &v
	return s
}

func (s *GetServiceDetailQuery) SetGroup(v string) *GetServiceDetailQuery {
	s.Group = &v
	return s
}

func (s *GetServiceDetailQuery) SetIp(v string) *GetServiceDetailQuery {
	s.Ip = &v
	return s
}

func (s *GetServiceDetailQuery) SetNamespace(v string) *GetServiceDetailQuery {
	s.Namespace = &v
	return s
}

func (s *GetServiceDetailQuery) SetOrigin(v string) *GetServiceDetailQuery {
	s.Origin = &v
	return s
}

func (s *GetServiceDetailQuery) SetRegion(v string) *GetServiceDetailQuery {
	s.Region = &v
	return s
}

func (s *GetServiceDetailQuery) SetRegistryType(v string) *GetServiceDetailQuery {
	s.RegistryType = &v
	return s
}

func (s *GetServiceDetailQuery) SetServiceId(v string) *GetServiceDetailQuery {
	s.ServiceId = &v
	return s
}

func (s *GetServiceDetailQuery) SetServiceName(v string) *GetServiceDetailQuery {
	s.ServiceName = &v
	return s
}

func (s *GetServiceDetailQuery) SetServiceType(v string) *GetServiceDetailQuery {
	s.ServiceType = &v
	return s
}

func (s *GetServiceDetailQuery) SetServiceVersion(v string) *GetServiceDetailQuery {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceDetailQuery) SetSource(v string) *GetServiceDetailQuery {
	s.Source = &v
	return s
}

type GetServiceDetailRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetServiceDetailQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetServiceDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailRequest) GoString() string {
	return s.String()
}

func (s *GetServiceDetailRequest) SetHeaders(v map[string]*string) *GetServiceDetailRequest {
	s.Headers = v
	return s
}

func (s *GetServiceDetailRequest) SetQuery(v *GetServiceDetailQuery) *GetServiceDetailRequest {
	s.Query = v
	return s
}

type GetServiceDetailResponseBody struct {
	Code    *int                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                           `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *GetServiceDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetServiceDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBody) SetCode(v int) *GetServiceDetailResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceDetailResponseBody) SetMessage(v string) *GetServiceDetailResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceDetailResponseBody) SetSuccess(v bool) *GetServiceDetailResponseBody {
	s.Success = &v
	return s
}

func (s *GetServiceDetailResponseBody) SetData(v *GetServiceDetailResponseBodyData) *GetServiceDetailResponseBody {
	s.Data = v
	return s
}

type GetServiceDetailResponseBodyData struct {
	DubboApplicationName  *string                                    `json:"DubboApplicationName,omitempty" xml:"DubboApplicationName,omitempty" require:"true"`
	EdasAppName           *string                                    `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty" require:"true"`
	Group                 *string                                    `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	Metadata              *string                                    `json:"Metadata,omitempty" xml:"Metadata,omitempty" require:"true"`
	RegistryType          *string                                    `json:"RegistryType,omitempty" xml:"RegistryType,omitempty" require:"true"`
	ServiceName           *string                                    `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	ServiceType           *string                                    `json:"ServiceType,omitempty" xml:"ServiceType,omitempty" require:"true"`
	SpringApplicationName *string                                    `json:"SpringApplicationName,omitempty" xml:"SpringApplicationName,omitempty" require:"true"`
	Version               *string                                    `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Methods               []*GetServiceDetailResponseBodyDataMethods `json:"Methods,omitempty" xml:"Methods,omitempty" require:"true" type:"Repeated"`
}

func (s GetServiceDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBodyData) SetDubboApplicationName(v string) *GetServiceDetailResponseBodyData {
	s.DubboApplicationName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetEdasAppName(v string) *GetServiceDetailResponseBodyData {
	s.EdasAppName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetGroup(v string) *GetServiceDetailResponseBodyData {
	s.Group = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetMetadata(v string) *GetServiceDetailResponseBodyData {
	s.Metadata = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetRegistryType(v string) *GetServiceDetailResponseBodyData {
	s.RegistryType = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetServiceName(v string) *GetServiceDetailResponseBodyData {
	s.ServiceName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetServiceType(v string) *GetServiceDetailResponseBodyData {
	s.ServiceType = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetSpringApplicationName(v string) *GetServiceDetailResponseBodyData {
	s.SpringApplicationName = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetVersion(v string) *GetServiceDetailResponseBodyData {
	s.Version = &v
	return s
}

func (s *GetServiceDetailResponseBodyData) SetMethods(v []*GetServiceDetailResponseBodyDataMethods) *GetServiceDetailResponseBodyData {
	s.Methods = v
	return s
}

type GetServiceDetailResponseBodyDataMethods struct {
	MethodController     *string                                                  `json:"MethodController,omitempty" xml:"MethodController,omitempty" require:"true"`
	Name                 *string                                                  `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NameDetail           *string                                                  `json:"NameDetail,omitempty" xml:"NameDetail,omitempty" require:"true"`
	ParameterDefinitions *string                                                  `json:"ParameterDefinitions,omitempty" xml:"ParameterDefinitions,omitempty" require:"true"`
	ParameterDetails     *string                                                  `json:"ParameterDetails,omitempty" xml:"ParameterDetails,omitempty" require:"true"`
	ParameterNames       *string                                                  `json:"ParameterNames,omitempty" xml:"ParameterNames,omitempty" require:"true"`
	ParameterTypes       *string                                                  `json:"ParameterTypes,omitempty" xml:"ParameterTypes,omitempty" require:"true"`
	Paths                *string                                                  `json:"Paths,omitempty" xml:"Paths,omitempty" require:"true"`
	RequestMethods       *string                                                  `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty" require:"true"`
	ReturnDetails        *string                                                  `json:"ReturnDetails,omitempty" xml:"ReturnDetails,omitempty" require:"true"`
	ReturnType           *string                                                  `json:"ReturnType,omitempty" xml:"ReturnType,omitempty" require:"true"`
	ReturnDefinition     *GetServiceDetailResponseBodyDataMethodsReturnDefinition `json:"ReturnDefinition,omitempty" xml:"ReturnDefinition,omitempty" require:"true" type:"Struct"`
}

func (s GetServiceDetailResponseBodyDataMethods) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBodyDataMethods) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBodyDataMethods) SetMethodController(v string) *GetServiceDetailResponseBodyDataMethods {
	s.MethodController = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetName(v string) *GetServiceDetailResponseBodyDataMethods {
	s.Name = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetNameDetail(v string) *GetServiceDetailResponseBodyDataMethods {
	s.NameDetail = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterDefinitions(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterDefinitions = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterDetails(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterDetails = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterNames(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterNames = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetParameterTypes(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ParameterTypes = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetPaths(v string) *GetServiceDetailResponseBodyDataMethods {
	s.Paths = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetRequestMethods(v string) *GetServiceDetailResponseBodyDataMethods {
	s.RequestMethods = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetReturnDetails(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ReturnDetails = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetReturnType(v string) *GetServiceDetailResponseBodyDataMethods {
	s.ReturnType = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethods) SetReturnDefinition(v *GetServiceDetailResponseBodyDataMethodsReturnDefinition) *GetServiceDetailResponseBodyDataMethods {
	s.ReturnDefinition = v
	return s
}

type GetServiceDetailResponseBodyDataMethodsReturnDefinition struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s GetServiceDetailResponseBodyDataMethodsReturnDefinition) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponseBodyDataMethodsReturnDefinition) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponseBodyDataMethodsReturnDefinition) SetId(v string) *GetServiceDetailResponseBodyDataMethodsReturnDefinition {
	s.Id = &v
	return s
}

func (s *GetServiceDetailResponseBodyDataMethodsReturnDefinition) SetType(v string) *GetServiceDetailResponseBodyDataMethodsReturnDefinition {
	s.Type = &v
	return s
}

type GetServiceDetailResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceDetailResponse) GoString() string {
	return s.String()
}

func (s *GetServiceDetailResponse) SetHeaders(v map[string]*string) *GetServiceDetailResponse {
	s.Headers = v
	return s
}

func (s *GetServiceDetailResponse) SetBody(v *GetServiceDetailResponseBody) *GetServiceDetailResponse {
	s.Body = v
	return s
}

type GetServiceListQuery struct {
	Namespace   *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin      *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Region      *string `json:"region,omitempty" xml:"region,omitempty"`
	SearchType  *string `json:"searchType,omitempty" xml:"searchType,omitempty"`
	SearchValue *string `json:"searchValue,omitempty" xml:"searchValue,omitempty"`
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	Side        *string `json:"side,omitempty" xml:"side,omitempty"`
}

func (s GetServiceListQuery) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListQuery) GoString() string {
	return s.String()
}

func (s *GetServiceListQuery) SetNamespace(v string) *GetServiceListQuery {
	s.Namespace = &v
	return s
}

func (s *GetServiceListQuery) SetOrigin(v string) *GetServiceListQuery {
	s.Origin = &v
	return s
}

func (s *GetServiceListQuery) SetRegion(v string) *GetServiceListQuery {
	s.Region = &v
	return s
}

func (s *GetServiceListQuery) SetSearchType(v string) *GetServiceListQuery {
	s.SearchType = &v
	return s
}

func (s *GetServiceListQuery) SetSearchValue(v string) *GetServiceListQuery {
	s.SearchValue = &v
	return s
}

func (s *GetServiceListQuery) SetServiceType(v string) *GetServiceListQuery {
	s.ServiceType = &v
	return s
}

func (s *GetServiceListQuery) SetSide(v string) *GetServiceListQuery {
	s.Side = &v
	return s
}

type GetServiceListRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetServiceListQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetServiceListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListRequest) GoString() string {
	return s.String()
}

func (s *GetServiceListRequest) SetHeaders(v map[string]*string) *GetServiceListRequest {
	s.Headers = v
	return s
}

func (s *GetServiceListRequest) SetQuery(v *GetServiceListQuery) *GetServiceListRequest {
	s.Query = v
	return s
}

type GetServiceListResponseBody struct {
	Code    *int                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                           `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                             `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    []*GetServiceListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s GetServiceListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceListResponseBody) SetCode(v int) *GetServiceListResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceListResponseBody) SetMessage(v string) *GetServiceListResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceListResponseBody) SetSuccess(v bool) *GetServiceListResponseBody {
	s.Success = &v
	return s
}

func (s *GetServiceListResponseBody) SetData(v []*GetServiceListResponseBodyData) *GetServiceListResponseBody {
	s.Data = v
	return s
}

type GetServiceListResponseBodyData struct {
	DubboApplicationName  *string                                  `json:"DubboApplicationName,omitempty" xml:"DubboApplicationName,omitempty" require:"true"`
	EdasAppName           *string                                  `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty" require:"true"`
	Group                 *string                                  `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	Metadata              *string                                  `json:"Metadata,omitempty" xml:"Metadata,omitempty" require:"true"`
	RegistryType          *string                                  `json:"RegistryType,omitempty" xml:"RegistryType,omitempty" require:"true"`
	ServiceName           *string                                  `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	ServiceType           *string                                  `json:"ServiceType,omitempty" xml:"ServiceType,omitempty" require:"true"`
	SpringApplicationName *string                                  `json:"SpringApplicationName,omitempty" xml:"SpringApplicationName,omitempty" require:"true"`
	Version               *string                                  `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Methods               []*GetServiceListResponseBodyDataMethods `json:"Methods,omitempty" xml:"Methods,omitempty" require:"true" type:"Repeated"`
}

func (s GetServiceListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceListResponseBodyData) SetDubboApplicationName(v string) *GetServiceListResponseBodyData {
	s.DubboApplicationName = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetEdasAppName(v string) *GetServiceListResponseBodyData {
	s.EdasAppName = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetGroup(v string) *GetServiceListResponseBodyData {
	s.Group = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetMetadata(v string) *GetServiceListResponseBodyData {
	s.Metadata = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetRegistryType(v string) *GetServiceListResponseBodyData {
	s.RegistryType = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetServiceName(v string) *GetServiceListResponseBodyData {
	s.ServiceName = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetServiceType(v string) *GetServiceListResponseBodyData {
	s.ServiceType = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetSpringApplicationName(v string) *GetServiceListResponseBodyData {
	s.SpringApplicationName = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetVersion(v string) *GetServiceListResponseBodyData {
	s.Version = &v
	return s
}

func (s *GetServiceListResponseBodyData) SetMethods(v []*GetServiceListResponseBodyDataMethods) *GetServiceListResponseBodyData {
	s.Methods = v
	return s
}

type GetServiceListResponseBodyDataMethods struct {
	MethodController     *string `json:"MethodController,omitempty" xml:"MethodController,omitempty" require:"true"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NameDetail           *string `json:"NameDetail,omitempty" xml:"NameDetail,omitempty" require:"true"`
	ParameterDefinitions *string `json:"ParameterDefinitions,omitempty" xml:"ParameterDefinitions,omitempty" require:"true"`
	ParameterDetails     *string `json:"ParameterDetails,omitempty" xml:"ParameterDetails,omitempty" require:"true"`
	ParameterNames       *string `json:"ParameterNames,omitempty" xml:"ParameterNames,omitempty" require:"true"`
	ParameterTypes       *string `json:"ParameterTypes,omitempty" xml:"ParameterTypes,omitempty" require:"true"`
	Paths                *string `json:"Paths,omitempty" xml:"Paths,omitempty" require:"true"`
	RequestMethods       *string `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty" require:"true"`
	ReturnDetails        *string `json:"ReturnDetails,omitempty" xml:"ReturnDetails,omitempty" require:"true"`
	ReturnType           *string `json:"ReturnType,omitempty" xml:"ReturnType,omitempty" require:"true"`
}

func (s GetServiceListResponseBodyDataMethods) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListResponseBodyDataMethods) GoString() string {
	return s.String()
}

func (s *GetServiceListResponseBodyDataMethods) SetMethodController(v string) *GetServiceListResponseBodyDataMethods {
	s.MethodController = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetName(v string) *GetServiceListResponseBodyDataMethods {
	s.Name = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetNameDetail(v string) *GetServiceListResponseBodyDataMethods {
	s.NameDetail = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetParameterDefinitions(v string) *GetServiceListResponseBodyDataMethods {
	s.ParameterDefinitions = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetParameterDetails(v string) *GetServiceListResponseBodyDataMethods {
	s.ParameterDetails = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetParameterNames(v string) *GetServiceListResponseBodyDataMethods {
	s.ParameterNames = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetParameterTypes(v string) *GetServiceListResponseBodyDataMethods {
	s.ParameterTypes = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetPaths(v string) *GetServiceListResponseBodyDataMethods {
	s.Paths = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetRequestMethods(v string) *GetServiceListResponseBodyDataMethods {
	s.RequestMethods = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetReturnDetails(v string) *GetServiceListResponseBodyDataMethods {
	s.ReturnDetails = &v
	return s
}

func (s *GetServiceListResponseBodyDataMethods) SetReturnType(v string) *GetServiceListResponseBodyDataMethods {
	s.ReturnType = &v
	return s
}

type GetServiceListResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListResponse) GoString() string {
	return s.String()
}

func (s *GetServiceListResponse) SetHeaders(v map[string]*string) *GetServiceListResponse {
	s.Headers = v
	return s
}

func (s *GetServiceListResponse) SetBody(v *GetServiceListResponseBody) *GetServiceListResponse {
	s.Body = v
	return s
}

type GetServiceListPageQuery struct {
	Namespace   *string `json:"namespace,omitempty" xml:"namespace,omitempty" require:"true"`
	Origin      *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Page        *int    `json:"page,omitempty" xml:"page,omitempty"`
	Region      *string `json:"region,omitempty" xml:"region,omitempty" require:"true"`
	SearchType  *string `json:"searchType,omitempty" xml:"searchType,omitempty" require:"true"`
	SearchValue *string `json:"searchValue,omitempty" xml:"searchValue,omitempty"`
	ServiceType *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	Side        *string `json:"side,omitempty" xml:"side,omitempty"`
	Size        *int    `json:"size,omitempty" xml:"size,omitempty" require:"true"`
}

func (s GetServiceListPageQuery) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageQuery) GoString() string {
	return s.String()
}

func (s *GetServiceListPageQuery) SetNamespace(v string) *GetServiceListPageQuery {
	s.Namespace = &v
	return s
}

func (s *GetServiceListPageQuery) SetOrigin(v string) *GetServiceListPageQuery {
	s.Origin = &v
	return s
}

func (s *GetServiceListPageQuery) SetPage(v int) *GetServiceListPageQuery {
	s.Page = &v
	return s
}

func (s *GetServiceListPageQuery) SetRegion(v string) *GetServiceListPageQuery {
	s.Region = &v
	return s
}

func (s *GetServiceListPageQuery) SetSearchType(v string) *GetServiceListPageQuery {
	s.SearchType = &v
	return s
}

func (s *GetServiceListPageQuery) SetSearchValue(v string) *GetServiceListPageQuery {
	s.SearchValue = &v
	return s
}

func (s *GetServiceListPageQuery) SetServiceType(v string) *GetServiceListPageQuery {
	s.ServiceType = &v
	return s
}

func (s *GetServiceListPageQuery) SetSide(v string) *GetServiceListPageQuery {
	s.Side = &v
	return s
}

func (s *GetServiceListPageQuery) SetSize(v int) *GetServiceListPageQuery {
	s.Size = &v
	return s
}

type GetServiceListPageRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetServiceListPageQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetServiceListPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceListPageRequest) SetHeaders(v map[string]*string) *GetServiceListPageRequest {
	s.Headers = v
	return s
}

func (s *GetServiceListPageRequest) SetQuery(v *GetServiceListPageQuery) *GetServiceListPageRequest {
	s.Query = v
	return s
}

type GetServiceListPageResponseBody struct {
	Code    *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                               `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *GetServiceListPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetServiceListPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponseBody) SetCode(v int) *GetServiceListPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceListPageResponseBody) SetMessage(v string) *GetServiceListPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceListPageResponseBody) SetSuccess(v bool) *GetServiceListPageResponseBody {
	s.Success = &v
	return s
}

func (s *GetServiceListPageResponseBody) SetData(v *GetServiceListPageResponseBodyData) *GetServiceListPageResponseBody {
	s.Data = v
	return s
}

type GetServiceListPageResponseBodyData struct {
	Size          *int                                         `json:"Size,omitempty" xml:"Size,omitempty" require:"true"`
	TotalElements *int                                         `json:"TotalElements,omitempty" xml:"TotalElements,omitempty" require:"true"`
	TotalPages    *int                                         `json:"TotalPages,omitempty" xml:"TotalPages,omitempty" require:"true"`
	Content       []*GetServiceListPageResponseBodyDataContent `json:"Content,omitempty" xml:"Content,omitempty" require:"true" type:"Repeated"`
}

func (s GetServiceListPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponseBodyData) SetSize(v int) *GetServiceListPageResponseBodyData {
	s.Size = &v
	return s
}

func (s *GetServiceListPageResponseBodyData) SetTotalElements(v int) *GetServiceListPageResponseBodyData {
	s.TotalElements = &v
	return s
}

func (s *GetServiceListPageResponseBodyData) SetTotalPages(v int) *GetServiceListPageResponseBodyData {
	s.TotalPages = &v
	return s
}

func (s *GetServiceListPageResponseBodyData) SetContent(v []*GetServiceListPageResponseBodyDataContent) *GetServiceListPageResponseBodyData {
	s.Content = v
	return s
}

type GetServiceListPageResponseBodyDataContent struct {
	EdasAppId    *string `json:"EdasAppId,omitempty" xml:"EdasAppId,omitempty" require:"true"`
	EdasAppName  *string `json:"EdasAppName,omitempty" xml:"EdasAppName,omitempty" require:"true"`
	Group        *string `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	InstanceNum  *int    `json:"InstanceNum,omitempty" xml:"InstanceNum,omitempty" require:"true"`
	RegisterType *string `json:"RegisterType,omitempty" xml:"RegisterType,omitempty" require:"true"`
	ServiceId    *string `json:"ServiceId,omitempty" xml:"ServiceId,omitempty" require:"true"`
	ServiceName  *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	Version      *string `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
}

func (s GetServiceListPageResponseBodyDataContent) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponseBodyDataContent) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponseBodyDataContent) SetEdasAppId(v string) *GetServiceListPageResponseBodyDataContent {
	s.EdasAppId = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetEdasAppName(v string) *GetServiceListPageResponseBodyDataContent {
	s.EdasAppName = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetGroup(v string) *GetServiceListPageResponseBodyDataContent {
	s.Group = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetInstanceNum(v int) *GetServiceListPageResponseBodyDataContent {
	s.InstanceNum = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetRegisterType(v string) *GetServiceListPageResponseBodyDataContent {
	s.RegisterType = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetServiceId(v string) *GetServiceListPageResponseBodyDataContent {
	s.ServiceId = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetServiceName(v string) *GetServiceListPageResponseBodyDataContent {
	s.ServiceName = &v
	return s
}

func (s *GetServiceListPageResponseBodyDataContent) SetVersion(v string) *GetServiceListPageResponseBodyDataContent {
	s.Version = &v
	return s
}

type GetServiceListPageResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceListPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceListPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceListPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceListPageResponse) SetHeaders(v map[string]*string) *GetServiceListPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceListPageResponse) SetBody(v *GetServiceListPageResponseBody) *GetServiceListPageResponse {
	s.Body = v
	return s
}

type GetServiceMethodPageQuery struct {
	AppId            *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group            *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip               *string `json:"ip,omitempty" xml:"ip,omitempty"`
	MethodController *string `json:"methodController,omitempty" xml:"methodController,omitempty"`
	Name             *string `json:"name,omitempty" xml:"name,omitempty"`
	Namespace        *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin           *string `json:"origin,omitempty" xml:"origin,omitempty"`
	PageNumber       *int    `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	PageSize         *int    `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	Path             *string `json:"path,omitempty" xml:"path,omitempty"`
	Region           *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType     *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId        *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName      *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType      *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion   *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Source           *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceMethodPageQuery) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageQuery) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageQuery) SetAppId(v string) *GetServiceMethodPageQuery {
	s.AppId = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetGroup(v string) *GetServiceMethodPageQuery {
	s.Group = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetIp(v string) *GetServiceMethodPageQuery {
	s.Ip = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetMethodController(v string) *GetServiceMethodPageQuery {
	s.MethodController = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetName(v string) *GetServiceMethodPageQuery {
	s.Name = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetNamespace(v string) *GetServiceMethodPageQuery {
	s.Namespace = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetOrigin(v string) *GetServiceMethodPageQuery {
	s.Origin = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetPageNumber(v int) *GetServiceMethodPageQuery {
	s.PageNumber = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetPageSize(v int) *GetServiceMethodPageQuery {
	s.PageSize = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetPath(v string) *GetServiceMethodPageQuery {
	s.Path = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetRegion(v string) *GetServiceMethodPageQuery {
	s.Region = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetRegistryType(v string) *GetServiceMethodPageQuery {
	s.RegistryType = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetServiceId(v string) *GetServiceMethodPageQuery {
	s.ServiceId = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetServiceName(v string) *GetServiceMethodPageQuery {
	s.ServiceName = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetServiceType(v string) *GetServiceMethodPageQuery {
	s.ServiceType = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetServiceVersion(v string) *GetServiceMethodPageQuery {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceMethodPageQuery) SetSource(v string) *GetServiceMethodPageQuery {
	s.Source = &v
	return s
}

type GetServiceMethodPageRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetServiceMethodPageQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetServiceMethodPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageRequest) SetHeaders(v map[string]*string) *GetServiceMethodPageRequest {
	s.Headers = v
	return s
}

func (s *GetServiceMethodPageRequest) SetQuery(v *GetServiceMethodPageQuery) *GetServiceMethodPageRequest {
	s.Query = v
	return s
}

type GetServiceMethodPageResponseBody struct {
	Code      *string                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpCode  *string                               `json:"HttpCode,omitempty" xml:"HttpCode,omitempty" require:"true"`
	Message   *string                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                                 `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *GetServiceMethodPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetServiceMethodPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBody) SetCode(v string) *GetServiceMethodPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetHttpCode(v string) *GetServiceMethodPageResponseBody {
	s.HttpCode = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetMessage(v string) *GetServiceMethodPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetRequestId(v string) *GetServiceMethodPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetSuccess(v bool) *GetServiceMethodPageResponseBody {
	s.Success = &v
	return s
}

func (s *GetServiceMethodPageResponseBody) SetData(v *GetServiceMethodPageResponseBodyData) *GetServiceMethodPageResponseBody {
	s.Data = v
	return s
}

type GetServiceMethodPageResponseBodyData struct {
	PageNumber *int                                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize   *int                                          `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize  *int                                          `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result     []*GetServiceMethodPageResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s GetServiceMethodPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBodyData) SetPageNumber(v int) *GetServiceMethodPageResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyData) SetPageSize(v int) *GetServiceMethodPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyData) SetTotalSize(v int) *GetServiceMethodPageResponseBodyData {
	s.TotalSize = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyData) SetResult(v []*GetServiceMethodPageResponseBodyDataResult) *GetServiceMethodPageResponseBodyData {
	s.Result = v
	return s
}

type GetServiceMethodPageResponseBodyDataResult struct {
	MethodController     *string                                                     `json:"MethodController,omitempty" xml:"MethodController,omitempty" require:"true"`
	Name                 *string                                                     `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NameDetail           *string                                                     `json:"NameDetail,omitempty" xml:"NameDetail,omitempty" require:"true"`
	ParameterDefinitions *string                                                     `json:"ParameterDefinitions,omitempty" xml:"ParameterDefinitions,omitempty" require:"true"`
	ParameterDetails     *string                                                     `json:"ParameterDetails,omitempty" xml:"ParameterDetails,omitempty" require:"true"`
	ParameterNames       *string                                                     `json:"ParameterNames,omitempty" xml:"ParameterNames,omitempty" require:"true"`
	ParameterTypes       *string                                                     `json:"ParameterTypes,omitempty" xml:"ParameterTypes,omitempty" require:"true"`
	Paths                *string                                                     `json:"Paths,omitempty" xml:"Paths,omitempty" require:"true"`
	RequestMethods       *string                                                     `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty" require:"true"`
	ReturnDetails        *string                                                     `json:"ReturnDetails,omitempty" xml:"ReturnDetails,omitempty" require:"true"`
	ReturnType           *string                                                     `json:"ReturnType,omitempty" xml:"ReturnType,omitempty" require:"true"`
	ReturnDefinition     *GetServiceMethodPageResponseBodyDataResultReturnDefinition `json:"ReturnDefinition,omitempty" xml:"ReturnDefinition,omitempty" require:"true" type:"Struct"`
}

func (s GetServiceMethodPageResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetMethodController(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.MethodController = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetName(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.Name = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetNameDetail(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.NameDetail = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterDefinitions(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterDefinitions = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterDetails(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterDetails = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterNames(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterNames = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetParameterTypes(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ParameterTypes = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetPaths(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.Paths = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetRequestMethods(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.RequestMethods = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetReturnDetails(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ReturnDetails = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetReturnType(v string) *GetServiceMethodPageResponseBodyDataResult {
	s.ReturnType = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResult) SetReturnDefinition(v *GetServiceMethodPageResponseBodyDataResultReturnDefinition) *GetServiceMethodPageResponseBodyDataResult {
	s.ReturnDefinition = v
	return s
}

type GetServiceMethodPageResponseBodyDataResultReturnDefinition struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s GetServiceMethodPageResponseBodyDataResultReturnDefinition) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponseBodyDataResultReturnDefinition) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponseBodyDataResultReturnDefinition) SetId(v string) *GetServiceMethodPageResponseBodyDataResultReturnDefinition {
	s.Id = &v
	return s
}

func (s *GetServiceMethodPageResponseBodyDataResultReturnDefinition) SetType(v string) *GetServiceMethodPageResponseBodyDataResultReturnDefinition {
	s.Type = &v
	return s
}

type GetServiceMethodPageResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceMethodPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceMethodPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceMethodPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceMethodPageResponse) SetHeaders(v map[string]*string) *GetServiceMethodPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceMethodPageResponse) SetBody(v *GetServiceMethodPageResponseBody) *GetServiceMethodPageResponse {
	s.Body = v
	return s
}

type GetServiceProvidersPageQuery struct {
	AppId          *string `json:"appId,omitempty" xml:"appId,omitempty"`
	Group          *string `json:"group,omitempty" xml:"group,omitempty"`
	Ip             *string `json:"ip,omitempty" xml:"ip,omitempty"`
	Namespace      *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Origin         *string `json:"origin,omitempty" xml:"origin,omitempty"`
	Page           *int    `json:"page,omitempty" xml:"page,omitempty"`
	Region         *string `json:"region,omitempty" xml:"region,omitempty"`
	RegistryType   *string `json:"registryType,omitempty" xml:"registryType,omitempty"`
	ServiceId      *string `json:"serviceId,omitempty" xml:"serviceId,omitempty"`
	ServiceName    *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	ServiceType    *string `json:"serviceType,omitempty" xml:"serviceType,omitempty"`
	ServiceVersion *string `json:"serviceVersion,omitempty" xml:"serviceVersion,omitempty"`
	Size           *int    `json:"size,omitempty" xml:"size,omitempty"`
	Source         *string `json:"source,omitempty" xml:"source,omitempty"`
}

func (s GetServiceProvidersPageQuery) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageQuery) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageQuery) SetAppId(v string) *GetServiceProvidersPageQuery {
	s.AppId = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetGroup(v string) *GetServiceProvidersPageQuery {
	s.Group = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetIp(v string) *GetServiceProvidersPageQuery {
	s.Ip = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetNamespace(v string) *GetServiceProvidersPageQuery {
	s.Namespace = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetOrigin(v string) *GetServiceProvidersPageQuery {
	s.Origin = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetPage(v int) *GetServiceProvidersPageQuery {
	s.Page = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetRegion(v string) *GetServiceProvidersPageQuery {
	s.Region = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetRegistryType(v string) *GetServiceProvidersPageQuery {
	s.RegistryType = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetServiceId(v string) *GetServiceProvidersPageQuery {
	s.ServiceId = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetServiceName(v string) *GetServiceProvidersPageQuery {
	s.ServiceName = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetServiceType(v string) *GetServiceProvidersPageQuery {
	s.ServiceType = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetServiceVersion(v string) *GetServiceProvidersPageQuery {
	s.ServiceVersion = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetSize(v int) *GetServiceProvidersPageQuery {
	s.Size = &v
	return s
}

func (s *GetServiceProvidersPageQuery) SetSource(v string) *GetServiceProvidersPageQuery {
	s.Source = &v
	return s
}

type GetServiceProvidersPageRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetServiceProvidersPageQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetServiceProvidersPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageRequest) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageRequest) SetHeaders(v map[string]*string) *GetServiceProvidersPageRequest {
	s.Headers = v
	return s
}

func (s *GetServiceProvidersPageRequest) SetQuery(v *GetServiceProvidersPageQuery) *GetServiceProvidersPageRequest {
	s.Query = v
	return s
}

type GetServiceProvidersPageResponseBody struct {
	Code    *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                                    `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *GetServiceProvidersPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetServiceProvidersPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponseBody) SetCode(v int) *GetServiceProvidersPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetServiceProvidersPageResponseBody) SetMessage(v string) *GetServiceProvidersPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetServiceProvidersPageResponseBody) SetSuccess(v bool) *GetServiceProvidersPageResponseBody {
	s.Success = &v
	return s
}

func (s *GetServiceProvidersPageResponseBody) SetData(v *GetServiceProvidersPageResponseBodyData) *GetServiceProvidersPageResponseBody {
	s.Data = v
	return s
}

type GetServiceProvidersPageResponseBodyData struct {
	Size          *int                                              `json:"Size,omitempty" xml:"Size,omitempty" require:"true"`
	TotalElements *int                                              `json:"TotalElements,omitempty" xml:"TotalElements,omitempty" require:"true"`
	TotalPages    *int                                              `json:"TotalPages,omitempty" xml:"TotalPages,omitempty" require:"true"`
	Content       []*GetServiceProvidersPageResponseBodyDataContent `json:"Content,omitempty" xml:"Content,omitempty" require:"true" type:"Repeated"`
}

func (s GetServiceProvidersPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponseBodyData) SetSize(v int) *GetServiceProvidersPageResponseBodyData {
	s.Size = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyData) SetTotalElements(v int) *GetServiceProvidersPageResponseBodyData {
	s.TotalElements = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyData) SetTotalPages(v int) *GetServiceProvidersPageResponseBodyData {
	s.TotalPages = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyData) SetContent(v []*GetServiceProvidersPageResponseBodyDataContent) *GetServiceProvidersPageResponseBodyData {
	s.Content = v
	return s
}

type GetServiceProvidersPageResponseBodyDataContent struct {
	Ip            *string `json:"Ip,omitempty" xml:"Ip,omitempty" require:"true"`
	Port          *string `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	SerializeType *string `json:"SerializeType,omitempty" xml:"SerializeType,omitempty" require:"true"`
	Timeout       *string `json:"Timeout,omitempty" xml:"Timeout,omitempty" require:"true"`
}

func (s GetServiceProvidersPageResponseBodyDataContent) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponseBodyDataContent) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetIp(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.Ip = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetPort(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.Port = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetSerializeType(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.SerializeType = &v
	return s
}

func (s *GetServiceProvidersPageResponseBodyDataContent) SetTimeout(v string) *GetServiceProvidersPageResponseBodyDataContent {
	s.Timeout = &v
	return s
}

type GetServiceProvidersPageResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetServiceProvidersPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetServiceProvidersPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetServiceProvidersPageResponse) GoString() string {
	return s.String()
}

func (s *GetServiceProvidersPageResponse) SetHeaders(v map[string]*string) *GetServiceProvidersPageResponse {
	s.Headers = v
	return s
}

func (s *GetServiceProvidersPageResponse) SetBody(v *GetServiceProvidersPageResponseBody) *GetServiceProvidersPageResponse {
	s.Body = v
	return s
}

type GetSpringCloudTestMethodQuery struct {
	AppId            *string `json:"appId,omitempty" xml:"appId,omitempty"`
	HttpMethod       *string `json:"httpMethod,omitempty" xml:"httpMethod,omitempty"`
	MethodController *string `json:"methodController,omitempty" xml:"methodController,omitempty"`
	MethodSignature  *string `json:"methodSignature,omitempty" xml:"methodSignature,omitempty"`
	Namespace        *string `json:"namespace,omitempty" xml:"namespace,omitempty"`
	Region           *string `json:"region,omitempty" xml:"region,omitempty"`
	RequiredPath     *string `json:"requiredPath,omitempty" xml:"requiredPath,omitempty"`
	ServiceName      *string `json:"serviceName,omitempty" xml:"serviceName,omitempty"`
}

func (s GetSpringCloudTestMethodQuery) String() string {
	return tea.Prettify(s)
}

func (s GetSpringCloudTestMethodQuery) GoString() string {
	return s.String()
}

func (s *GetSpringCloudTestMethodQuery) SetAppId(v string) *GetSpringCloudTestMethodQuery {
	s.AppId = &v
	return s
}

func (s *GetSpringCloudTestMethodQuery) SetHttpMethod(v string) *GetSpringCloudTestMethodQuery {
	s.HttpMethod = &v
	return s
}

func (s *GetSpringCloudTestMethodQuery) SetMethodController(v string) *GetSpringCloudTestMethodQuery {
	s.MethodController = &v
	return s
}

func (s *GetSpringCloudTestMethodQuery) SetMethodSignature(v string) *GetSpringCloudTestMethodQuery {
	s.MethodSignature = &v
	return s
}

func (s *GetSpringCloudTestMethodQuery) SetNamespace(v string) *GetSpringCloudTestMethodQuery {
	s.Namespace = &v
	return s
}

func (s *GetSpringCloudTestMethodQuery) SetRegion(v string) *GetSpringCloudTestMethodQuery {
	s.Region = &v
	return s
}

func (s *GetSpringCloudTestMethodQuery) SetRequiredPath(v string) *GetSpringCloudTestMethodQuery {
	s.RequiredPath = &v
	return s
}

func (s *GetSpringCloudTestMethodQuery) SetServiceName(v string) *GetSpringCloudTestMethodQuery {
	s.ServiceName = &v
	return s
}

type GetSpringCloudTestMethodRequest struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetSpringCloudTestMethodQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetSpringCloudTestMethodRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSpringCloudTestMethodRequest) GoString() string {
	return s.String()
}

func (s *GetSpringCloudTestMethodRequest) SetHeaders(v map[string]*string) *GetSpringCloudTestMethodRequest {
	s.Headers = v
	return s
}

func (s *GetSpringCloudTestMethodRequest) SetQuery(v *GetSpringCloudTestMethodQuery) *GetSpringCloudTestMethodRequest {
	s.Query = v
	return s
}

type GetSpringCloudTestMethodResponseBody struct {
	Code    *int                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                                     `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *GetSpringCloudTestMethodResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetSpringCloudTestMethodResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSpringCloudTestMethodResponseBody) GoString() string {
	return s.String()
}

func (s *GetSpringCloudTestMethodResponseBody) SetCode(v int) *GetSpringCloudTestMethodResponseBody {
	s.Code = &v
	return s
}

func (s *GetSpringCloudTestMethodResponseBody) SetMessage(v string) *GetSpringCloudTestMethodResponseBody {
	s.Message = &v
	return s
}

func (s *GetSpringCloudTestMethodResponseBody) SetSuccess(v bool) *GetSpringCloudTestMethodResponseBody {
	s.Success = &v
	return s
}

func (s *GetSpringCloudTestMethodResponseBody) SetData(v *GetSpringCloudTestMethodResponseBodyData) *GetSpringCloudTestMethodResponseBody {
	s.Data = v
	return s
}

type GetSpringCloudTestMethodResponseBodyData struct {
	HttpHeaders    map[string]interface{} `json:"HttpHeaders,omitempty" xml:"HttpHeaders,omitempty" require:"true"`
	Params         map[string]interface{} `json:"Params,omitempty" xml:"Params,omitempty" require:"true"`
	Path           *string                `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	RequestMethods []*string              `json:"RequestMethods,omitempty" xml:"RequestMethods,omitempty" require:"true" type:"Repeated"`
	Urls           []*string              `json:"Urls,omitempty" xml:"Urls,omitempty" require:"true" type:"Repeated"`
}

func (s GetSpringCloudTestMethodResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSpringCloudTestMethodResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSpringCloudTestMethodResponseBodyData) SetHttpHeaders(v map[string]interface{}) *GetSpringCloudTestMethodResponseBodyData {
	s.HttpHeaders = v
	return s
}

func (s *GetSpringCloudTestMethodResponseBodyData) SetParams(v map[string]interface{}) *GetSpringCloudTestMethodResponseBodyData {
	s.Params = v
	return s
}

func (s *GetSpringCloudTestMethodResponseBodyData) SetPath(v string) *GetSpringCloudTestMethodResponseBodyData {
	s.Path = &v
	return s
}

func (s *GetSpringCloudTestMethodResponseBodyData) SetRequestMethods(v []*string) *GetSpringCloudTestMethodResponseBodyData {
	s.RequestMethods = v
	return s
}

func (s *GetSpringCloudTestMethodResponseBodyData) SetUrls(v []*string) *GetSpringCloudTestMethodResponseBodyData {
	s.Urls = v
	return s
}

type GetSpringCloudTestMethodResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSpringCloudTestMethodResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSpringCloudTestMethodResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSpringCloudTestMethodResponse) GoString() string {
	return s.String()
}

func (s *GetSpringCloudTestMethodResponse) SetHeaders(v map[string]*string) *GetSpringCloudTestMethodResponse {
	s.Headers = v
	return s
}

func (s *GetSpringCloudTestMethodResponse) SetBody(v *GetSpringCloudTestMethodResponseBody) *GetSpringCloudTestMethodResponse {
	s.Body = v
	return s
}

type GetSslCertificateListQuery struct {
	PageNo   *int    `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetSslCertificateListQuery) String() string {
	return tea.Prettify(s)
}

func (s GetSslCertificateListQuery) GoString() string {
	return s.String()
}

func (s *GetSslCertificateListQuery) SetPageNo(v int) *GetSslCertificateListQuery {
	s.PageNo = &v
	return s
}

func (s *GetSslCertificateListQuery) SetPageSize(v int) *GetSslCertificateListQuery {
	s.PageSize = &v
	return s
}

func (s *GetSslCertificateListQuery) SetRegionId(v string) *GetSslCertificateListQuery {
	s.RegionId = &v
	return s
}

type GetSslCertificateListRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetSslCertificateListQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s GetSslCertificateListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSslCertificateListRequest) GoString() string {
	return s.String()
}

func (s *GetSslCertificateListRequest) SetHeaders(v map[string]*string) *GetSslCertificateListRequest {
	s.Headers = v
	return s
}

func (s *GetSslCertificateListRequest) SetQuery(v *GetSslCertificateListQuery) *GetSslCertificateListRequest {
	s.Query = v
	return s
}

type GetSslCertificateListResponseBody struct {
	Code      *string                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *GetSslCertificateListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetSslCertificateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSslCertificateListResponseBody) GoString() string {
	return s.String()
}

func (s *GetSslCertificateListResponseBody) SetCode(v string) *GetSslCertificateListResponseBody {
	s.Code = &v
	return s
}

func (s *GetSslCertificateListResponseBody) SetMessage(v string) *GetSslCertificateListResponseBody {
	s.Message = &v
	return s
}

func (s *GetSslCertificateListResponseBody) SetRequestId(v string) *GetSslCertificateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSslCertificateListResponseBody) SetData(v *GetSslCertificateListResponseBodyData) *GetSslCertificateListResponseBody {
	s.Data = v
	return s
}

type GetSslCertificateListResponseBodyData struct {
	Total           *int                                                    `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	CertificateList []*GetSslCertificateListResponseBodyDataCertificateList `json:"CertificateList,omitempty" xml:"CertificateList,omitempty" require:"true" type:"Repeated"`
}

func (s GetSslCertificateListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSslCertificateListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSslCertificateListResponseBodyData) SetTotal(v int) *GetSslCertificateListResponseBodyData {
	s.Total = &v
	return s
}

func (s *GetSslCertificateListResponseBodyData) SetCertificateList(v []*GetSslCertificateListResponseBodyDataCertificateList) *GetSslCertificateListResponseBodyData {
	s.CertificateList = v
	return s
}

type GetSslCertificateListResponseBodyDataCertificateList struct {
	DomainNames *string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty" require:"true"`
	EndDate     *string `json:"EndDate,omitempty" xml:"EndDate,omitempty" require:"true"`
	Expired     *string `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Issuer      *string `json:"Issuer,omitempty" xml:"Issuer,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	StartDate   *string `json:"StartDate,omitempty" xml:"StartDate,omitempty" require:"true"`
}

func (s GetSslCertificateListResponseBodyDataCertificateList) String() string {
	return tea.Prettify(s)
}

func (s GetSslCertificateListResponseBodyDataCertificateList) GoString() string {
	return s.String()
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetDomainNames(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.DomainNames = &v
	return s
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetEndDate(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.EndDate = &v
	return s
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetExpired(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.Expired = &v
	return s
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetId(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.Id = &v
	return s
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetIssuer(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.Issuer = &v
	return s
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetName(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.Name = &v
	return s
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetRegionId(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.RegionId = &v
	return s
}

func (s *GetSslCertificateListResponseBodyDataCertificateList) SetStartDate(v string) *GetSslCertificateListResponseBodyDataCertificateList {
	s.StartDate = &v
	return s
}

type GetSslCertificateListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSslCertificateListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSslCertificateListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSslCertificateListResponse) GoString() string {
	return s.String()
}

func (s *GetSslCertificateListResponse) SetHeaders(v map[string]*string) *GetSslCertificateListResponse {
	s.Headers = v
	return s
}

func (s *GetSslCertificateListResponse) SetBody(v *GetSslCertificateListResponseBody) *GetSslCertificateListResponse {
	s.Body = v
	return s
}

type GetSubAccountInfoQuery struct {
	TargetUserId *string `json:"TargetUserId,omitempty" xml:"TargetUserId,omitempty" require:"true"`
}

func (s GetSubAccountInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s GetSubAccountInfoQuery) GoString() string {
	return s.String()
}

func (s *GetSubAccountInfoQuery) SetTargetUserId(v string) *GetSubAccountInfoQuery {
	s.TargetUserId = &v
	return s
}

type GetSubAccountInfoRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetSubAccountInfoQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetSubAccountInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSubAccountInfoRequest) GoString() string {
	return s.String()
}

func (s *GetSubAccountInfoRequest) SetHeaders(v map[string]*string) *GetSubAccountInfoRequest {
	s.Headers = v
	return s
}

func (s *GetSubAccountInfoRequest) SetQuery(v *GetSubAccountInfoQuery) *GetSubAccountInfoRequest {
	s.Query = v
	return s
}

type GetSubAccountInfoResponseBody struct {
	Code          *int                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string                                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Authorization *GetSubAccountInfoResponseBodyAuthorization `json:"Authorization,omitempty" xml:"Authorization,omitempty" require:"true" type:"Struct"`
}

func (s GetSubAccountInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSubAccountInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetSubAccountInfoResponseBody) SetCode(v int) *GetSubAccountInfoResponseBody {
	s.Code = &v
	return s
}

func (s *GetSubAccountInfoResponseBody) SetMessage(v string) *GetSubAccountInfoResponseBody {
	s.Message = &v
	return s
}

func (s *GetSubAccountInfoResponseBody) SetRequestId(v string) *GetSubAccountInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSubAccountInfoResponseBody) SetAuthorization(v *GetSubAccountInfoResponseBodyAuthorization) *GetSubAccountInfoResponseBody {
	s.Authorization = v
	return s
}

type GetSubAccountInfoResponseBodyAuthorization struct {
	AdminEdasId    *string `json:"AdminEdasId,omitempty" xml:"AdminEdasId,omitempty" require:"true"`
	AdminUserId    *string `json:"AdminUserId,omitempty" xml:"AdminUserId,omitempty" require:"true"`
	AppIdData      *string `json:"AppIdData,omitempty" xml:"AppIdData,omitempty" require:"true"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DelegateAdmin  *bool   `json:"DelegateAdmin,omitempty" xml:"DelegateAdmin,omitempty" require:"true"`
	EdasId         *string `json:"EdasId,omitempty" xml:"EdasId,omitempty" require:"true"`
	IsRamDel       *bool   `json:"IsRamDel,omitempty" xml:"IsRamDel,omitempty" require:"true"`
	IsRamSlave     *bool   `json:"IsRamSlave,omitempty" xml:"IsRamSlave,omitempty" require:"true"`
	RamOperation   *bool   `json:"RamOperation,omitempty" xml:"RamOperation,omitempty" require:"true"`
	ResGroupId     *int64  `json:"ResGroupId,omitempty" xml:"ResGroupId,omitempty" require:"true"`
	ResGroupIdData *string `json:"ResGroupIdData,omitempty" xml:"ResGroupIdData,omitempty" require:"true"`
	RoleIdData     *string `json:"RoleIdData,omitempty" xml:"RoleIdData,omitempty" require:"true"`
	Sts            *bool   `json:"Sts,omitempty" xml:"Sts,omitempty" require:"true"`
	SubUserKp      *string `json:"SubUserKp,omitempty" xml:"SubUserKp,omitempty" require:"true"`
	UpdateTime     *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s GetSubAccountInfoResponseBodyAuthorization) String() string {
	return tea.Prettify(s)
}

func (s GetSubAccountInfoResponseBodyAuthorization) GoString() string {
	return s.String()
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetAdminEdasId(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.AdminEdasId = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetAdminUserId(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.AdminUserId = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetAppIdData(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.AppIdData = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetCreateTime(v int64) *GetSubAccountInfoResponseBodyAuthorization {
	s.CreateTime = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetDelegateAdmin(v bool) *GetSubAccountInfoResponseBodyAuthorization {
	s.DelegateAdmin = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetEdasId(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.EdasId = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetIsRamDel(v bool) *GetSubAccountInfoResponseBodyAuthorization {
	s.IsRamDel = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetIsRamSlave(v bool) *GetSubAccountInfoResponseBodyAuthorization {
	s.IsRamSlave = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetRamOperation(v bool) *GetSubAccountInfoResponseBodyAuthorization {
	s.RamOperation = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetResGroupId(v int64) *GetSubAccountInfoResponseBodyAuthorization {
	s.ResGroupId = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetResGroupIdData(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.ResGroupIdData = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetRoleIdData(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.RoleIdData = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetSts(v bool) *GetSubAccountInfoResponseBodyAuthorization {
	s.Sts = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetSubUserKp(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.SubUserKp = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetUpdateTime(v int64) *GetSubAccountInfoResponseBodyAuthorization {
	s.UpdateTime = &v
	return s
}

func (s *GetSubAccountInfoResponseBodyAuthorization) SetUserId(v string) *GetSubAccountInfoResponseBodyAuthorization {
	s.UserId = &v
	return s
}

type GetSubAccountInfoResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSubAccountInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSubAccountInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSubAccountInfoResponse) GoString() string {
	return s.String()
}

func (s *GetSubAccountInfoResponse) SetHeaders(v map[string]*string) *GetSubAccountInfoResponse {
	s.Headers = v
	return s
}

func (s *GetSubAccountInfoResponse) SetBody(v *GetSubAccountInfoResponseBody) *GetSubAccountInfoResponse {
	s.Body = v
	return s
}

type GetSwimmingLaneQuery struct {
	LaneId *int64 `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
}

func (s GetSwimmingLaneQuery) String() string {
	return tea.Prettify(s)
}

func (s GetSwimmingLaneQuery) GoString() string {
	return s.String()
}

func (s *GetSwimmingLaneQuery) SetLaneId(v int64) *GetSwimmingLaneQuery {
	s.LaneId = &v
	return s
}

type GetSwimmingLaneRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetSwimmingLaneQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetSwimmingLaneRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSwimmingLaneRequest) GoString() string {
	return s.String()
}

func (s *GetSwimmingLaneRequest) SetHeaders(v map[string]*string) *GetSwimmingLaneRequest {
	s.Headers = v
	return s
}

func (s *GetSwimmingLaneRequest) SetQuery(v *GetSwimmingLaneQuery) *GetSwimmingLaneRequest {
	s.Query = v
	return s
}

type GetSwimmingLaneResponseBody struct {
	Code      *int                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *GetSwimmingLaneResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s GetSwimmingLaneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSwimmingLaneResponseBody) GoString() string {
	return s.String()
}

func (s *GetSwimmingLaneResponseBody) SetCode(v int) *GetSwimmingLaneResponseBody {
	s.Code = &v
	return s
}

func (s *GetSwimmingLaneResponseBody) SetMessage(v string) *GetSwimmingLaneResponseBody {
	s.Message = &v
	return s
}

func (s *GetSwimmingLaneResponseBody) SetRequestId(v string) *GetSwimmingLaneResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSwimmingLaneResponseBody) SetData(v *GetSwimmingLaneResponseBodyData) *GetSwimmingLaneResponseBody {
	s.Data = v
	return s
}

type GetSwimmingLaneResponseBodyData struct {
	EnableRules                     *bool                                                             `json:"EnableRules,omitempty" xml:"EnableRules,omitempty" require:"true"`
	EntryRule                       *string                                                           `json:"EntryRule,omitempty" xml:"EntryRule,omitempty" require:"true"`
	GroupId                         *int64                                                            `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Id                              *string                                                           `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name                            *string                                                           `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId                     *string                                                           `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ScenarioSign                    *string                                                           `json:"ScenarioSign,omitempty" xml:"ScenarioSign,omitempty" require:"true"`
	Tag                             *string                                                           `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	SwimmingLaneAppRelationShipList []*GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList `json:"SwimmingLaneAppRelationShipList,omitempty" xml:"SwimmingLaneAppRelationShipList,omitempty" require:"true" type:"Repeated"`
}

func (s GetSwimmingLaneResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSwimmingLaneResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSwimmingLaneResponseBodyData) SetEnableRules(v bool) *GetSwimmingLaneResponseBodyData {
	s.EnableRules = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetEntryRule(v string) *GetSwimmingLaneResponseBodyData {
	s.EntryRule = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetGroupId(v int64) *GetSwimmingLaneResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetId(v string) *GetSwimmingLaneResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetName(v string) *GetSwimmingLaneResponseBodyData {
	s.Name = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetNamespaceId(v string) *GetSwimmingLaneResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetScenarioSign(v string) *GetSwimmingLaneResponseBodyData {
	s.ScenarioSign = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetTag(v string) *GetSwimmingLaneResponseBodyData {
	s.Tag = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyData) SetSwimmingLaneAppRelationShipList(v []*GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) *GetSwimmingLaneResponseBodyData {
	s.SwimmingLaneAppRelationShipList = v
	return s
}

type GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	LaneId  *int64  `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
	Rules   *string `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true"`
}

func (s GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) String() string {
	return tea.Prettify(s)
}

func (s GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) GoString() string {
	return s.String()
}

func (s *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppId(v string) *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppId = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppName(v string) *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppName = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetLaneId(v int64) *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.LaneId = &v
	return s
}

func (s *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetRules(v string) *GetSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.Rules = &v
	return s
}

type GetSwimmingLaneResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetSwimmingLaneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSwimmingLaneResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSwimmingLaneResponse) GoString() string {
	return s.String()
}

func (s *GetSwimmingLaneResponse) SetHeaders(v map[string]*string) *GetSwimmingLaneResponse {
	s.Headers = v
	return s
}

func (s *GetSwimmingLaneResponse) SetBody(v *GetSwimmingLaneResponseBody) *GetSwimmingLaneResponse {
	s.Body = v
	return s
}

type GetWebContainerConfigQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s GetWebContainerConfigQuery) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigQuery) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigQuery) SetAppId(v string) *GetWebContainerConfigQuery {
	s.AppId = &v
	return s
}

type GetWebContainerConfigRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *GetWebContainerConfigQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s GetWebContainerConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigRequest) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigRequest) SetHeaders(v map[string]*string) *GetWebContainerConfigRequest {
	s.Headers = v
	return s
}

func (s *GetWebContainerConfigRequest) SetQuery(v *GetWebContainerConfigQuery) *GetWebContainerConfigRequest {
	s.Query = v
	return s
}

type GetWebContainerConfigResponseBody struct {
	Code               *int                                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message            *string                                              `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId          *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	WebContainerConfig *GetWebContainerConfigResponseBodyWebContainerConfig `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty" require:"true" type:"Struct"`
}

func (s GetWebContainerConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigResponseBody) SetCode(v int) *GetWebContainerConfigResponseBody {
	s.Code = &v
	return s
}

func (s *GetWebContainerConfigResponseBody) SetMessage(v string) *GetWebContainerConfigResponseBody {
	s.Message = &v
	return s
}

func (s *GetWebContainerConfigResponseBody) SetRequestId(v string) *GetWebContainerConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWebContainerConfigResponseBody) SetWebContainerConfig(v *GetWebContainerConfigResponseBodyWebContainerConfig) *GetWebContainerConfigResponseBody {
	s.WebContainerConfig = v
	return s
}

type GetWebContainerConfigResponseBodyWebContainerConfig struct {
	ContextInputType     *string `json:"ContextInputType,omitempty" xml:"ContextInputType,omitempty" require:"true"`
	ContextPath          *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty" require:"true"`
	HttpPort             *int    `json:"HttpPort,omitempty" xml:"HttpPort,omitempty" require:"true"`
	MaxThreads           *int    `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty" require:"true"`
	ServerXml            *string `json:"ServerXml,omitempty" xml:"ServerXml,omitempty" require:"true"`
	UriEncoding          *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty" require:"true"`
	UseAdvancedServerXml *bool   `json:"UseAdvancedServerXml,omitempty" xml:"UseAdvancedServerXml,omitempty" require:"true"`
	UseBodyEncoding      *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty" require:"true"`
	UseDefaultConfig     *bool   `json:"UseDefaultConfig,omitempty" xml:"UseDefaultConfig,omitempty" require:"true"`
}

func (s GetWebContainerConfigResponseBodyWebContainerConfig) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigResponseBodyWebContainerConfig) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetContextInputType(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.ContextInputType = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetContextPath(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.ContextPath = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetHttpPort(v int) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.HttpPort = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetMaxThreads(v int) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.MaxThreads = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetServerXml(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.ServerXml = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUriEncoding(v string) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UriEncoding = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUseAdvancedServerXml(v bool) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UseAdvancedServerXml = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUseBodyEncoding(v bool) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UseBodyEncoding = &v
	return s
}

func (s *GetWebContainerConfigResponseBodyWebContainerConfig) SetUseDefaultConfig(v bool) *GetWebContainerConfigResponseBodyWebContainerConfig {
	s.UseDefaultConfig = &v
	return s
}

type GetWebContainerConfigResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetWebContainerConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetWebContainerConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWebContainerConfigResponse) GoString() string {
	return s.String()
}

func (s *GetWebContainerConfigResponse) SetHeaders(v map[string]*string) *GetWebContainerConfigResponse {
	s.Headers = v
	return s
}

func (s *GetWebContainerConfigResponse) SetBody(v *GetWebContainerConfigResponseBody) *GetWebContainerConfigResponse {
	s.Body = v
	return s
}

type ImportK8sClusterQuery struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	EnableAsm   *bool   `json:"EnableAsm,omitempty" xml:"EnableAsm,omitempty"`
	Mode        *int    `json:"Mode,omitempty" xml:"Mode,omitempty"`
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty"`
}

func (s ImportK8sClusterQuery) String() string {
	return tea.Prettify(s)
}

func (s ImportK8sClusterQuery) GoString() string {
	return s.String()
}

func (s *ImportK8sClusterQuery) SetClusterId(v string) *ImportK8sClusterQuery {
	s.ClusterId = &v
	return s
}

func (s *ImportK8sClusterQuery) SetEnableAsm(v bool) *ImportK8sClusterQuery {
	s.EnableAsm = &v
	return s
}

func (s *ImportK8sClusterQuery) SetMode(v int) *ImportK8sClusterQuery {
	s.Mode = &v
	return s
}

func (s *ImportK8sClusterQuery) SetNamespaceId(v string) *ImportK8sClusterQuery {
	s.NamespaceId = &v
	return s
}

type ImportK8sClusterRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ImportK8sClusterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ImportK8sClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ImportK8sClusterRequest) GoString() string {
	return s.String()
}

func (s *ImportK8sClusterRequest) SetHeaders(v map[string]*string) *ImportK8sClusterRequest {
	s.Headers = v
	return s
}

func (s *ImportK8sClusterRequest) SetQuery(v *ImportK8sClusterQuery) *ImportK8sClusterRequest {
	s.Query = v
	return s
}

type ImportK8sClusterResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ImportK8sClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ImportK8sClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ImportK8sClusterResponseBody) SetCode(v int) *ImportK8sClusterResponseBody {
	s.Code = &v
	return s
}

func (s *ImportK8sClusterResponseBody) SetData(v string) *ImportK8sClusterResponseBody {
	s.Data = &v
	return s
}

func (s *ImportK8sClusterResponseBody) SetMessage(v string) *ImportK8sClusterResponseBody {
	s.Message = &v
	return s
}

func (s *ImportK8sClusterResponseBody) SetRequestId(v string) *ImportK8sClusterResponseBody {
	s.RequestId = &v
	return s
}

type ImportK8sClusterResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ImportK8sClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ImportK8sClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ImportK8sClusterResponse) GoString() string {
	return s.String()
}

func (s *ImportK8sClusterResponse) SetHeaders(v map[string]*string) *ImportK8sClusterResponse {
	s.Headers = v
	return s
}

func (s *ImportK8sClusterResponse) SetBody(v *ImportK8sClusterResponseBody) *ImportK8sClusterResponse {
	s.Body = v
	return s
}

type InsertApplicationQuery struct {
	ApplicationName *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty" require:"true"`
	BuildPackId     *int    `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ComponentIds    *string `json:"ComponentIds,omitempty" xml:"ComponentIds,omitempty"`
	Cpu             *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EcuInfo         *string `json:"EcuInfo,omitempty" xml:"EcuInfo,omitempty"`
	EnablePortCheck *bool   `json:"EnablePortCheck,omitempty" xml:"EnablePortCheck,omitempty"`
	EnableUrlCheck  *bool   `json:"EnableUrlCheck,omitempty" xml:"EnableUrlCheck,omitempty"`
	HealthCheckURL  *string `json:"HealthCheckURL,omitempty" xml:"HealthCheckURL,omitempty"`
	HealthCheckUrl  *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty"`
	Hooks           *string `json:"Hooks,omitempty" xml:"Hooks,omitempty"`
	Jdk             *string `json:"Jdk,omitempty" xml:"Jdk,omitempty"`
	JvmOptions      *string `json:"JvmOptions,omitempty" xml:"JvmOptions,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	MaxHeapSize     *int    `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty"`
	MaxPermSize     *int    `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty"`
	Mem             *int    `json:"Mem,omitempty" xml:"Mem,omitempty"`
	MinHeapSize     *int    `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty"`
	PackageType     *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	ReservedPortStr *string `json:"ReservedPortStr,omitempty" xml:"ReservedPortStr,omitempty"`
	WebContainer    *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
}

func (s InsertApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationQuery) GoString() string {
	return s.String()
}

func (s *InsertApplicationQuery) SetApplicationName(v string) *InsertApplicationQuery {
	s.ApplicationName = &v
	return s
}

func (s *InsertApplicationQuery) SetBuildPackId(v int) *InsertApplicationQuery {
	s.BuildPackId = &v
	return s
}

func (s *InsertApplicationQuery) SetClusterId(v string) *InsertApplicationQuery {
	s.ClusterId = &v
	return s
}

func (s *InsertApplicationQuery) SetComponentIds(v string) *InsertApplicationQuery {
	s.ComponentIds = &v
	return s
}

func (s *InsertApplicationQuery) SetCpu(v int) *InsertApplicationQuery {
	s.Cpu = &v
	return s
}

func (s *InsertApplicationQuery) SetDescription(v string) *InsertApplicationQuery {
	s.Description = &v
	return s
}

func (s *InsertApplicationQuery) SetEcuInfo(v string) *InsertApplicationQuery {
	s.EcuInfo = &v
	return s
}

func (s *InsertApplicationQuery) SetEnablePortCheck(v bool) *InsertApplicationQuery {
	s.EnablePortCheck = &v
	return s
}

func (s *InsertApplicationQuery) SetEnableUrlCheck(v bool) *InsertApplicationQuery {
	s.EnableUrlCheck = &v
	return s
}

func (s *InsertApplicationQuery) SetHealthCheckURL(v string) *InsertApplicationQuery {
	s.HealthCheckURL = &v
	return s
}

func (s *InsertApplicationQuery) SetHealthCheckUrl(v string) *InsertApplicationQuery {
	s.HealthCheckUrl = &v
	return s
}

func (s *InsertApplicationQuery) SetHooks(v string) *InsertApplicationQuery {
	s.Hooks = &v
	return s
}

func (s *InsertApplicationQuery) SetJdk(v string) *InsertApplicationQuery {
	s.Jdk = &v
	return s
}

func (s *InsertApplicationQuery) SetJvmOptions(v string) *InsertApplicationQuery {
	s.JvmOptions = &v
	return s
}

func (s *InsertApplicationQuery) SetLogicalRegionId(v string) *InsertApplicationQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertApplicationQuery) SetMaxHeapSize(v int) *InsertApplicationQuery {
	s.MaxHeapSize = &v
	return s
}

func (s *InsertApplicationQuery) SetMaxPermSize(v int) *InsertApplicationQuery {
	s.MaxPermSize = &v
	return s
}

func (s *InsertApplicationQuery) SetMem(v int) *InsertApplicationQuery {
	s.Mem = &v
	return s
}

func (s *InsertApplicationQuery) SetMinHeapSize(v int) *InsertApplicationQuery {
	s.MinHeapSize = &v
	return s
}

func (s *InsertApplicationQuery) SetPackageType(v string) *InsertApplicationQuery {
	s.PackageType = &v
	return s
}

func (s *InsertApplicationQuery) SetReservedPortStr(v string) *InsertApplicationQuery {
	s.ReservedPortStr = &v
	return s
}

func (s *InsertApplicationQuery) SetWebContainer(v string) *InsertApplicationQuery {
	s.WebContainer = &v
	return s
}

type InsertApplicationRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationRequest) GoString() string {
	return s.String()
}

func (s *InsertApplicationRequest) SetHeaders(v map[string]*string) *InsertApplicationRequest {
	s.Headers = v
	return s
}

func (s *InsertApplicationRequest) SetQuery(v *InsertApplicationQuery) *InsertApplicationRequest {
	s.Query = v
	return s
}

type InsertApplicationResponseBody struct {
	Code            *int                                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ApplicationInfo *InsertApplicationResponseBodyApplicationInfo `json:"ApplicationInfo,omitempty" xml:"ApplicationInfo,omitempty" require:"true" type:"Struct"`
}

func (s InsertApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *InsertApplicationResponseBody) SetCode(v int) *InsertApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *InsertApplicationResponseBody) SetMessage(v string) *InsertApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *InsertApplicationResponseBody) SetRequestId(v string) *InsertApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertApplicationResponseBody) SetApplicationInfo(v *InsertApplicationResponseBodyApplicationInfo) *InsertApplicationResponseBody {
	s.ApplicationInfo = v
	return s
}

type InsertApplicationResponseBodyApplicationInfo struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Dockerize     *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty" require:"true"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	Port          *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	RegionName    *string `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s InsertApplicationResponseBodyApplicationInfo) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationResponseBodyApplicationInfo) GoString() string {
	return s.String()
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetAppId(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.AppId = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetAppName(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.AppName = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetChangeOrderId(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.ChangeOrderId = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetDockerize(v bool) *InsertApplicationResponseBodyApplicationInfo {
	s.Dockerize = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetOwner(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.Owner = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetPort(v int) *InsertApplicationResponseBodyApplicationInfo {
	s.Port = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetRegionName(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.RegionName = &v
	return s
}

func (s *InsertApplicationResponseBodyApplicationInfo) SetUserId(v string) *InsertApplicationResponseBodyApplicationInfo {
	s.UserId = &v
	return s
}

type InsertApplicationResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertApplicationResponse) GoString() string {
	return s.String()
}

func (s *InsertApplicationResponse) SetHeaders(v map[string]*string) *InsertApplicationResponse {
	s.Headers = v
	return s
}

func (s *InsertApplicationResponse) SetBody(v *InsertApplicationResponseBody) *InsertApplicationResponse {
	s.Body = v
	return s
}

type InsertClusterQuery struct {
	ClusterName     *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	ClusterType     *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	IaasProvider    *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	NetworkMode     *int    `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty" require:"true"`
	OversoldFactor  *int    `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s InsertClusterQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterQuery) GoString() string {
	return s.String()
}

func (s *InsertClusterQuery) SetClusterName(v string) *InsertClusterQuery {
	s.ClusterName = &v
	return s
}

func (s *InsertClusterQuery) SetClusterType(v int) *InsertClusterQuery {
	s.ClusterType = &v
	return s
}

func (s *InsertClusterQuery) SetIaasProvider(v string) *InsertClusterQuery {
	s.IaasProvider = &v
	return s
}

func (s *InsertClusterQuery) SetLogicalRegionId(v string) *InsertClusterQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertClusterQuery) SetNetworkMode(v int) *InsertClusterQuery {
	s.NetworkMode = &v
	return s
}

func (s *InsertClusterQuery) SetOversoldFactor(v int) *InsertClusterQuery {
	s.OversoldFactor = &v
	return s
}

func (s *InsertClusterQuery) SetVpcId(v string) *InsertClusterQuery {
	s.VpcId = &v
	return s
}

type InsertClusterRequest struct {
	Headers map[string]*string  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertClusterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterRequest) GoString() string {
	return s.String()
}

func (s *InsertClusterRequest) SetHeaders(v map[string]*string) *InsertClusterRequest {
	s.Headers = v
	return s
}

func (s *InsertClusterRequest) SetQuery(v *InsertClusterQuery) *InsertClusterRequest {
	s.Query = v
	return s
}

type InsertClusterResponseBody struct {
	Code      *int                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Cluster   *InsertClusterResponseBodyCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" require:"true" type:"Struct"`
}

func (s InsertClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterResponseBody) GoString() string {
	return s.String()
}

func (s *InsertClusterResponseBody) SetCode(v int) *InsertClusterResponseBody {
	s.Code = &v
	return s
}

func (s *InsertClusterResponseBody) SetMessage(v string) *InsertClusterResponseBody {
	s.Message = &v
	return s
}

func (s *InsertClusterResponseBody) SetRequestId(v string) *InsertClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertClusterResponseBody) SetCluster(v *InsertClusterResponseBodyCluster) *InsertClusterResponseBody {
	s.Cluster = v
	return s
}

type InsertClusterResponseBodyCluster struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterName    *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	ClusterType    *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	IaasProvider   *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty" require:"true"`
	NetworkMode    *int    `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty" require:"true"`
	OversoldFactor *int    `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty" require:"true"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
}

func (s InsertClusterResponseBodyCluster) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterResponseBodyCluster) GoString() string {
	return s.String()
}

func (s *InsertClusterResponseBodyCluster) SetClusterId(v string) *InsertClusterResponseBodyCluster {
	s.ClusterId = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetClusterName(v string) *InsertClusterResponseBodyCluster {
	s.ClusterName = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetClusterType(v int) *InsertClusterResponseBodyCluster {
	s.ClusterType = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetIaasProvider(v string) *InsertClusterResponseBodyCluster {
	s.IaasProvider = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetNetworkMode(v int) *InsertClusterResponseBodyCluster {
	s.NetworkMode = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetOversoldFactor(v int) *InsertClusterResponseBodyCluster {
	s.OversoldFactor = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetRegionId(v string) *InsertClusterResponseBodyCluster {
	s.RegionId = &v
	return s
}

func (s *InsertClusterResponseBodyCluster) SetVpcId(v string) *InsertClusterResponseBodyCluster {
	s.VpcId = &v
	return s
}

type InsertClusterResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterResponse) GoString() string {
	return s.String()
}

func (s *InsertClusterResponse) SetHeaders(v map[string]*string) *InsertClusterResponse {
	s.Headers = v
	return s
}

func (s *InsertClusterResponse) SetBody(v *InsertClusterResponseBody) *InsertClusterResponse {
	s.Body = v
	return s
}

type InsertClusterMemberQuery struct {
	ClusterId   *string `json:"clusterId,omitempty" xml:"clusterId,omitempty" require:"true"`
	InstanceIds *string `json:"instanceIds,omitempty" xml:"instanceIds,omitempty" require:"true"`
	Password    *string `json:"password,omitempty" xml:"password,omitempty" require:"true"`
}

func (s InsertClusterMemberQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterMemberQuery) GoString() string {
	return s.String()
}

func (s *InsertClusterMemberQuery) SetClusterId(v string) *InsertClusterMemberQuery {
	s.ClusterId = &v
	return s
}

func (s *InsertClusterMemberQuery) SetInstanceIds(v string) *InsertClusterMemberQuery {
	s.InstanceIds = &v
	return s
}

func (s *InsertClusterMemberQuery) SetPassword(v string) *InsertClusterMemberQuery {
	s.Password = &v
	return s
}

type InsertClusterMemberRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertClusterMemberQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertClusterMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterMemberRequest) GoString() string {
	return s.String()
}

func (s *InsertClusterMemberRequest) SetHeaders(v map[string]*string) *InsertClusterMemberRequest {
	s.Headers = v
	return s
}

func (s *InsertClusterMemberRequest) SetQuery(v *InsertClusterMemberQuery) *InsertClusterMemberRequest {
	s.Query = v
	return s
}

type InsertClusterMemberResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s InsertClusterMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterMemberResponseBody) GoString() string {
	return s.String()
}

func (s *InsertClusterMemberResponseBody) SetCode(v int) *InsertClusterMemberResponseBody {
	s.Code = &v
	return s
}

func (s *InsertClusterMemberResponseBody) SetData(v string) *InsertClusterMemberResponseBody {
	s.Data = &v
	return s
}

func (s *InsertClusterMemberResponseBody) SetMessage(v string) *InsertClusterMemberResponseBody {
	s.Message = &v
	return s
}

func (s *InsertClusterMemberResponseBody) SetRequestId(v string) *InsertClusterMemberResponseBody {
	s.RequestId = &v
	return s
}

type InsertClusterMemberResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertClusterMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertClusterMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertClusterMemberResponse) GoString() string {
	return s.String()
}

func (s *InsertClusterMemberResponse) SetHeaders(v map[string]*string) *InsertClusterMemberResponse {
	s.Headers = v
	return s
}

func (s *InsertClusterMemberResponse) SetBody(v *InsertClusterMemberResponseBody) *InsertClusterMemberResponse {
	s.Body = v
	return s
}

type InsertConfigCenterQuery struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Data            *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	DataId          *string `json:"DataId,omitempty" xml:"DataId,omitempty" require:"true"`
	Group           *string `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
}

func (s InsertConfigCenterQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertConfigCenterQuery) GoString() string {
	return s.String()
}

func (s *InsertConfigCenterQuery) SetAppName(v string) *InsertConfigCenterQuery {
	s.AppName = &v
	return s
}

func (s *InsertConfigCenterQuery) SetData(v string) *InsertConfigCenterQuery {
	s.Data = &v
	return s
}

func (s *InsertConfigCenterQuery) SetDataId(v string) *InsertConfigCenterQuery {
	s.DataId = &v
	return s
}

func (s *InsertConfigCenterQuery) SetGroup(v string) *InsertConfigCenterQuery {
	s.Group = &v
	return s
}

func (s *InsertConfigCenterQuery) SetLogicalRegionId(v string) *InsertConfigCenterQuery {
	s.LogicalRegionId = &v
	return s
}

type InsertConfigCenterRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertConfigCenterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertConfigCenterRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertConfigCenterRequest) GoString() string {
	return s.String()
}

func (s *InsertConfigCenterRequest) SetHeaders(v map[string]*string) *InsertConfigCenterRequest {
	s.Headers = v
	return s
}

func (s *InsertConfigCenterRequest) SetQuery(v *InsertConfigCenterQuery) *InsertConfigCenterRequest {
	s.Query = v
	return s
}

type InsertConfigCenterResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s InsertConfigCenterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertConfigCenterResponseBody) GoString() string {
	return s.String()
}

func (s *InsertConfigCenterResponseBody) SetCode(v int) *InsertConfigCenterResponseBody {
	s.Code = &v
	return s
}

func (s *InsertConfigCenterResponseBody) SetMessage(v string) *InsertConfigCenterResponseBody {
	s.Message = &v
	return s
}

func (s *InsertConfigCenterResponseBody) SetRequestId(v string) *InsertConfigCenterResponseBody {
	s.RequestId = &v
	return s
}

type InsertConfigCenterResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertConfigCenterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertConfigCenterResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertConfigCenterResponse) GoString() string {
	return s.String()
}

func (s *InsertConfigCenterResponse) SetHeaders(v map[string]*string) *InsertConfigCenterResponse {
	s.Headers = v
	return s
}

func (s *InsertConfigCenterResponse) SetBody(v *InsertConfigCenterResponseBody) *InsertConfigCenterResponse {
	s.Body = v
	return s
}

type InsertDegradeControlQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Duration    *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	MethodName  *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	RtThreshold *int    `json:"RtThreshold,omitempty" xml:"RtThreshold,omitempty" require:"true"`
	RuleType    *string `json:"RuleType,omitempty" xml:"RuleType,omitempty" require:"true"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	UrlVar      *string `json:"UrlVar,omitempty" xml:"UrlVar,omitempty"`
}

func (s InsertDegradeControlQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertDegradeControlQuery) GoString() string {
	return s.String()
}

func (s *InsertDegradeControlQuery) SetAppId(v string) *InsertDegradeControlQuery {
	s.AppId = &v
	return s
}

func (s *InsertDegradeControlQuery) SetDuration(v int) *InsertDegradeControlQuery {
	s.Duration = &v
	return s
}

func (s *InsertDegradeControlQuery) SetMethodName(v string) *InsertDegradeControlQuery {
	s.MethodName = &v
	return s
}

func (s *InsertDegradeControlQuery) SetRtThreshold(v int) *InsertDegradeControlQuery {
	s.RtThreshold = &v
	return s
}

func (s *InsertDegradeControlQuery) SetRuleType(v string) *InsertDegradeControlQuery {
	s.RuleType = &v
	return s
}

func (s *InsertDegradeControlQuery) SetServiceName(v string) *InsertDegradeControlQuery {
	s.ServiceName = &v
	return s
}

func (s *InsertDegradeControlQuery) SetUrlVar(v string) *InsertDegradeControlQuery {
	s.UrlVar = &v
	return s
}

type InsertDegradeControlRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertDegradeControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertDegradeControlRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertDegradeControlRequest) GoString() string {
	return s.String()
}

func (s *InsertDegradeControlRequest) SetHeaders(v map[string]*string) *InsertDegradeControlRequest {
	s.Headers = v
	return s
}

func (s *InsertDegradeControlRequest) SetQuery(v *InsertDegradeControlQuery) *InsertDegradeControlRequest {
	s.Query = v
	return s
}

type InsertDegradeControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s InsertDegradeControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertDegradeControlResponseBody) GoString() string {
	return s.String()
}

func (s *InsertDegradeControlResponseBody) SetCode(v int) *InsertDegradeControlResponseBody {
	s.Code = &v
	return s
}

func (s *InsertDegradeControlResponseBody) SetMessage(v string) *InsertDegradeControlResponseBody {
	s.Message = &v
	return s
}

func (s *InsertDegradeControlResponseBody) SetRequestId(v string) *InsertDegradeControlResponseBody {
	s.RequestId = &v
	return s
}

type InsertDegradeControlResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertDegradeControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertDegradeControlResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertDegradeControlResponse) GoString() string {
	return s.String()
}

func (s *InsertDegradeControlResponse) SetHeaders(v map[string]*string) *InsertDegradeControlResponse {
	s.Headers = v
	return s
}

func (s *InsertDegradeControlResponse) SetBody(v *InsertDegradeControlResponseBody) *InsertDegradeControlResponse {
	s.Body = v
	return s
}

type InsertDeployGroupQuery struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupName            *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	InitPackageVersionId *string `json:"InitPackageVersionId,omitempty" xml:"InitPackageVersionId,omitempty"`
}

func (s InsertDeployGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupQuery) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupQuery) SetAppId(v string) *InsertDeployGroupQuery {
	s.AppId = &v
	return s
}

func (s *InsertDeployGroupQuery) SetGroupName(v string) *InsertDeployGroupQuery {
	s.GroupName = &v
	return s
}

func (s *InsertDeployGroupQuery) SetInitPackageVersionId(v string) *InsertDeployGroupQuery {
	s.InitPackageVersionId = &v
	return s
}

type InsertDeployGroupRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertDeployGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupRequest) SetHeaders(v map[string]*string) *InsertDeployGroupRequest {
	s.Headers = v
	return s
}

func (s *InsertDeployGroupRequest) SetQuery(v *InsertDeployGroupQuery) *InsertDeployGroupRequest {
	s.Query = v
	return s
}

type InsertDeployGroupResponseBody struct {
	Code              *int                                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message           *string                                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DeployGroupEntity *InsertDeployGroupResponseBodyDeployGroupEntity `json:"DeployGroupEntity,omitempty" xml:"DeployGroupEntity,omitempty" require:"true" type:"Struct"`
}

func (s InsertDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupResponseBody) SetCode(v int) *InsertDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *InsertDeployGroupResponseBody) SetMessage(v string) *InsertDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *InsertDeployGroupResponseBody) SetRequestId(v string) *InsertDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertDeployGroupResponseBody) SetDeployGroupEntity(v *InsertDeployGroupResponseBodyDeployGroupEntity) *InsertDeployGroupResponseBody {
	s.DeployGroupEntity = v
	return s
}

type InsertDeployGroupResponseBodyDeployGroupEntity struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppVersionId     *string `json:"AppVersionId,omitempty" xml:"AppVersionId,omitempty" require:"true"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	GroupName        *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	GroupType        *int    `json:"GroupType,omitempty" xml:"GroupType,omitempty" require:"true"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	PackageVersionId *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty" require:"true"`
	UpdateTime       *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
}

func (s InsertDeployGroupResponseBodyDeployGroupEntity) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupResponseBodyDeployGroupEntity) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetAppId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.AppId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetAppVersionId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.AppVersionId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetClusterId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.ClusterId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetCreateTime(v int64) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.CreateTime = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetGroupName(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.GroupName = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetGroupType(v int) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.GroupType = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.Id = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetPackageVersionId(v string) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.PackageVersionId = &v
	return s
}

func (s *InsertDeployGroupResponseBodyDeployGroupEntity) SetUpdateTime(v int64) *InsertDeployGroupResponseBodyDeployGroupEntity {
	s.UpdateTime = &v
	return s
}

type InsertDeployGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *InsertDeployGroupResponse) SetHeaders(v map[string]*string) *InsertDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *InsertDeployGroupResponse) SetBody(v *InsertDeployGroupResponseBody) *InsertDeployGroupResponse {
	s.Body = v
	return s
}

type InsertFlowControlQuery struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ConsumerAppId *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	Granularity   *string `json:"Granularity,omitempty" xml:"Granularity,omitempty" require:"true"`
	MethodName    *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	RuleType      *string `json:"RuleType,omitempty" xml:"RuleType,omitempty" require:"true"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Strategy      *string `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	Threshold     *int    `json:"Threshold,omitempty" xml:"Threshold,omitempty" require:"true"`
	UrlVar        *string `json:"UrlVar,omitempty" xml:"UrlVar,omitempty"`
}

func (s InsertFlowControlQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertFlowControlQuery) GoString() string {
	return s.String()
}

func (s *InsertFlowControlQuery) SetAppId(v string) *InsertFlowControlQuery {
	s.AppId = &v
	return s
}

func (s *InsertFlowControlQuery) SetConsumerAppId(v string) *InsertFlowControlQuery {
	s.ConsumerAppId = &v
	return s
}

func (s *InsertFlowControlQuery) SetGranularity(v string) *InsertFlowControlQuery {
	s.Granularity = &v
	return s
}

func (s *InsertFlowControlQuery) SetMethodName(v string) *InsertFlowControlQuery {
	s.MethodName = &v
	return s
}

func (s *InsertFlowControlQuery) SetRuleType(v string) *InsertFlowControlQuery {
	s.RuleType = &v
	return s
}

func (s *InsertFlowControlQuery) SetServiceName(v string) *InsertFlowControlQuery {
	s.ServiceName = &v
	return s
}

func (s *InsertFlowControlQuery) SetStrategy(v string) *InsertFlowControlQuery {
	s.Strategy = &v
	return s
}

func (s *InsertFlowControlQuery) SetThreshold(v int) *InsertFlowControlQuery {
	s.Threshold = &v
	return s
}

func (s *InsertFlowControlQuery) SetUrlVar(v string) *InsertFlowControlQuery {
	s.UrlVar = &v
	return s
}

type InsertFlowControlRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertFlowControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertFlowControlRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertFlowControlRequest) GoString() string {
	return s.String()
}

func (s *InsertFlowControlRequest) SetHeaders(v map[string]*string) *InsertFlowControlRequest {
	s.Headers = v
	return s
}

func (s *InsertFlowControlRequest) SetQuery(v *InsertFlowControlQuery) *InsertFlowControlRequest {
	s.Query = v
	return s
}

type InsertFlowControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s InsertFlowControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertFlowControlResponseBody) GoString() string {
	return s.String()
}

func (s *InsertFlowControlResponseBody) SetCode(v int) *InsertFlowControlResponseBody {
	s.Code = &v
	return s
}

func (s *InsertFlowControlResponseBody) SetMessage(v string) *InsertFlowControlResponseBody {
	s.Message = &v
	return s
}

func (s *InsertFlowControlResponseBody) SetRequestId(v string) *InsertFlowControlResponseBody {
	s.RequestId = &v
	return s
}

type InsertFlowControlResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertFlowControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertFlowControlResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertFlowControlResponse) GoString() string {
	return s.String()
}

func (s *InsertFlowControlResponse) SetHeaders(v map[string]*string) *InsertFlowControlResponse {
	s.Headers = v
	return s
}

func (s *InsertFlowControlResponse) SetBody(v *InsertFlowControlResponseBody) *InsertFlowControlResponse {
	s.Body = v
	return s
}

type InsertK8sApplicationQuery struct {
	AppName                *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	ApplicationDescription *string `json:"ApplicationDescription,omitempty" xml:"ApplicationDescription,omitempty"`
	BuildPackId            *string `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty"`
	ClusterId              *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Command                *string `json:"Command,omitempty" xml:"Command,omitempty"`
	CommandArgs            *string `json:"CommandArgs,omitempty" xml:"CommandArgs,omitempty"`
	ConfigMountDescs       *string `json:"ConfigMountDescs,omitempty" xml:"ConfigMountDescs,omitempty"`
	CsClusterId            *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty"`
	DeployAcrossNodes      *string `json:"DeployAcrossNodes,omitempty" xml:"DeployAcrossNodes,omitempty"`
	DeployAcrossZones      *string `json:"DeployAcrossZones,omitempty" xml:"DeployAcrossZones,omitempty"`
	EdasContainerVersion   *string `json:"EdasContainerVersion,omitempty" xml:"EdasContainerVersion,omitempty"`
	EmptyDirs              *string `json:"EmptyDirs,omitempty" xml:"EmptyDirs,omitempty"`
	EnableAhas             *bool   `json:"EnableAhas,omitempty" xml:"EnableAhas,omitempty"`
	EnableAsm              *bool   `json:"EnableAsm,omitempty" xml:"EnableAsm,omitempty"`
	EnvFroms               *string `json:"EnvFroms,omitempty" xml:"EnvFroms,omitempty"`
	Envs                   *string `json:"Envs,omitempty" xml:"Envs,omitempty"`
	ImageUrl               *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	InternetSlbId          *string `json:"InternetSlbId,omitempty" xml:"InternetSlbId,omitempty"`
	InternetSlbPort        *int    `json:"InternetSlbPort,omitempty" xml:"InternetSlbPort,omitempty"`
	InternetSlbProtocol    *string `json:"InternetSlbProtocol,omitempty" xml:"InternetSlbProtocol,omitempty"`
	InternetTargetPort     *int    `json:"InternetTargetPort,omitempty" xml:"InternetTargetPort,omitempty"`
	IntranetSlbId          *string `json:"IntranetSlbId,omitempty" xml:"IntranetSlbId,omitempty"`
	IntranetSlbPort        *int    `json:"IntranetSlbPort,omitempty" xml:"IntranetSlbPort,omitempty"`
	IntranetSlbProtocol    *string `json:"IntranetSlbProtocol,omitempty" xml:"IntranetSlbProtocol,omitempty"`
	IntranetTargetPort     *int    `json:"IntranetTargetPort,omitempty" xml:"IntranetTargetPort,omitempty"`
	IsMultilingualApp      *bool   `json:"IsMultilingualApp,omitempty" xml:"IsMultilingualApp,omitempty"`
	JDK                    *string `json:"JDK,omitempty" xml:"JDK,omitempty"`
	JavaStartUpConfig      *string `json:"JavaStartUpConfig,omitempty" xml:"JavaStartUpConfig,omitempty"`
	LimitCpu               *int    `json:"LimitCpu,omitempty" xml:"LimitCpu,omitempty"`
	LimitMem               *int    `json:"LimitMem,omitempty" xml:"LimitMem,omitempty"`
	LimitmCpu              *int    `json:"LimitmCpu,omitempty" xml:"LimitmCpu,omitempty"`
	Liveness               *string `json:"Liveness,omitempty" xml:"Liveness,omitempty"`
	LocalVolume            *string `json:"LocalVolume,omitempty" xml:"LocalVolume,omitempty"`
	LogicalRegionId        *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	MountDescs             *string `json:"MountDescs,omitempty" xml:"MountDescs,omitempty"`
	Namespace              *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NasId                  *string `json:"NasId,omitempty" xml:"NasId,omitempty"`
	PackageType            *string `json:"PackageType,omitempty" xml:"PackageType,omitempty"`
	PackageUrl             *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty"`
	PackageVersion         *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty"`
	PostStart              *string `json:"PostStart,omitempty" xml:"PostStart,omitempty"`
	PreStop                *string `json:"PreStop,omitempty" xml:"PreStop,omitempty"`
	PvcMountDescs          *string `json:"PvcMountDescs,omitempty" xml:"PvcMountDescs,omitempty"`
	Readiness              *string `json:"Readiness,omitempty" xml:"Readiness,omitempty"`
	Replicas               *int    `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	RepoId                 *string `json:"RepoId,omitempty" xml:"RepoId,omitempty"`
	RequestsCpu            *int    `json:"RequestsCpu,omitempty" xml:"RequestsCpu,omitempty"`
	RequestsMem            *int    `json:"RequestsMem,omitempty" xml:"RequestsMem,omitempty"`
	RequestsmCpu           *int    `json:"RequestsmCpu,omitempty" xml:"RequestsmCpu,omitempty"`
	RuntimeClassName       *string `json:"RuntimeClassName,omitempty" xml:"RuntimeClassName,omitempty"`
	SlsConfigs             *string `json:"SlsConfigs,omitempty" xml:"SlsConfigs,omitempty"`
	StorageType            *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	Timeout                *int    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	UriEncoding            *string `json:"UriEncoding,omitempty" xml:"UriEncoding,omitempty"`
	UseBodyEncoding        *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
	WebContainer           *string `json:"WebContainer,omitempty" xml:"WebContainer,omitempty"`
	WebContainerConfig     *string `json:"WebContainerConfig,omitempty" xml:"WebContainerConfig,omitempty"`
}

func (s InsertK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationQuery) SetAppName(v string) *InsertK8sApplicationQuery {
	s.AppName = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetApplicationDescription(v string) *InsertK8sApplicationQuery {
	s.ApplicationDescription = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetBuildPackId(v string) *InsertK8sApplicationQuery {
	s.BuildPackId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetClusterId(v string) *InsertK8sApplicationQuery {
	s.ClusterId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetCommand(v string) *InsertK8sApplicationQuery {
	s.Command = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetCommandArgs(v string) *InsertK8sApplicationQuery {
	s.CommandArgs = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetConfigMountDescs(v string) *InsertK8sApplicationQuery {
	s.ConfigMountDescs = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetCsClusterId(v string) *InsertK8sApplicationQuery {
	s.CsClusterId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetDeployAcrossNodes(v string) *InsertK8sApplicationQuery {
	s.DeployAcrossNodes = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetDeployAcrossZones(v string) *InsertK8sApplicationQuery {
	s.DeployAcrossZones = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetEdasContainerVersion(v string) *InsertK8sApplicationQuery {
	s.EdasContainerVersion = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetEmptyDirs(v string) *InsertK8sApplicationQuery {
	s.EmptyDirs = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetEnableAhas(v bool) *InsertK8sApplicationQuery {
	s.EnableAhas = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetEnableAsm(v bool) *InsertK8sApplicationQuery {
	s.EnableAsm = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetEnvFroms(v string) *InsertK8sApplicationQuery {
	s.EnvFroms = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetEnvs(v string) *InsertK8sApplicationQuery {
	s.Envs = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetImageUrl(v string) *InsertK8sApplicationQuery {
	s.ImageUrl = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetInternetSlbId(v string) *InsertK8sApplicationQuery {
	s.InternetSlbId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetInternetSlbPort(v int) *InsertK8sApplicationQuery {
	s.InternetSlbPort = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetInternetSlbProtocol(v string) *InsertK8sApplicationQuery {
	s.InternetSlbProtocol = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetInternetTargetPort(v int) *InsertK8sApplicationQuery {
	s.InternetTargetPort = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetIntranetSlbId(v string) *InsertK8sApplicationQuery {
	s.IntranetSlbId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetIntranetSlbPort(v int) *InsertK8sApplicationQuery {
	s.IntranetSlbPort = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetIntranetSlbProtocol(v string) *InsertK8sApplicationQuery {
	s.IntranetSlbProtocol = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetIntranetTargetPort(v int) *InsertK8sApplicationQuery {
	s.IntranetTargetPort = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetIsMultilingualApp(v bool) *InsertK8sApplicationQuery {
	s.IsMultilingualApp = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetJDK(v string) *InsertK8sApplicationQuery {
	s.JDK = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetJavaStartUpConfig(v string) *InsertK8sApplicationQuery {
	s.JavaStartUpConfig = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetLimitCpu(v int) *InsertK8sApplicationQuery {
	s.LimitCpu = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetLimitMem(v int) *InsertK8sApplicationQuery {
	s.LimitMem = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetLimitmCpu(v int) *InsertK8sApplicationQuery {
	s.LimitmCpu = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetLiveness(v string) *InsertK8sApplicationQuery {
	s.Liveness = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetLocalVolume(v string) *InsertK8sApplicationQuery {
	s.LocalVolume = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetLogicalRegionId(v string) *InsertK8sApplicationQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetMountDescs(v string) *InsertK8sApplicationQuery {
	s.MountDescs = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetNamespace(v string) *InsertK8sApplicationQuery {
	s.Namespace = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetNasId(v string) *InsertK8sApplicationQuery {
	s.NasId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetPackageType(v string) *InsertK8sApplicationQuery {
	s.PackageType = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetPackageUrl(v string) *InsertK8sApplicationQuery {
	s.PackageUrl = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetPackageVersion(v string) *InsertK8sApplicationQuery {
	s.PackageVersion = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetPostStart(v string) *InsertK8sApplicationQuery {
	s.PostStart = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetPreStop(v string) *InsertK8sApplicationQuery {
	s.PreStop = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetPvcMountDescs(v string) *InsertK8sApplicationQuery {
	s.PvcMountDescs = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetReadiness(v string) *InsertK8sApplicationQuery {
	s.Readiness = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetReplicas(v int) *InsertK8sApplicationQuery {
	s.Replicas = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetRepoId(v string) *InsertK8sApplicationQuery {
	s.RepoId = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetRequestsCpu(v int) *InsertK8sApplicationQuery {
	s.RequestsCpu = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetRequestsMem(v int) *InsertK8sApplicationQuery {
	s.RequestsMem = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetRequestsmCpu(v int) *InsertK8sApplicationQuery {
	s.RequestsmCpu = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetRuntimeClassName(v string) *InsertK8sApplicationQuery {
	s.RuntimeClassName = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetSlsConfigs(v string) *InsertK8sApplicationQuery {
	s.SlsConfigs = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetStorageType(v string) *InsertK8sApplicationQuery {
	s.StorageType = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetTimeout(v int) *InsertK8sApplicationQuery {
	s.Timeout = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetUriEncoding(v string) *InsertK8sApplicationQuery {
	s.UriEncoding = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetUseBodyEncoding(v bool) *InsertK8sApplicationQuery {
	s.UseBodyEncoding = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetWebContainer(v string) *InsertK8sApplicationQuery {
	s.WebContainer = &v
	return s
}

func (s *InsertK8sApplicationQuery) SetWebContainerConfig(v string) *InsertK8sApplicationQuery {
	s.WebContainerConfig = &v
	return s
}

type InsertK8sApplicationRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationRequest) SetHeaders(v map[string]*string) *InsertK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *InsertK8sApplicationRequest) SetQuery(v *InsertK8sApplicationQuery) *InsertK8sApplicationRequest {
	s.Query = v
	return s
}

type InsertK8sApplicationResponseBody struct {
	Code            *int                                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ApplicationInfo *InsertK8sApplicationResponseBodyApplicationInfo `json:"ApplicationInfo,omitempty" xml:"ApplicationInfo,omitempty" require:"true" type:"Struct"`
}

func (s InsertK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponseBody) SetCode(v int) *InsertK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetMessage(v string) *InsertK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetRequestId(v string) *InsertK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertK8sApplicationResponseBody) SetApplicationInfo(v *InsertK8sApplicationResponseBodyApplicationInfo) *InsertK8sApplicationResponseBody {
	s.ApplicationInfo = v
	return s
}

type InsertK8sApplicationResponseBodyApplicationInfo struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName       *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	ClusterType   *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Dockerize     *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty" require:"true"`
	EdasId        *string `json:"EdasId,omitempty" xml:"EdasId,omitempty" require:"true"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s InsertK8sApplicationResponseBodyApplicationInfo) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationResponseBodyApplicationInfo) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetAppId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.AppId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetAppName(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.AppName = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetChangeOrderId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.ChangeOrderId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetClusterType(v int) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.ClusterType = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetDockerize(v bool) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.Dockerize = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetEdasId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.EdasId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetOwner(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.Owner = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetRegionId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.RegionId = &v
	return s
}

func (s *InsertK8sApplicationResponseBodyApplicationInfo) SetUserId(v string) *InsertK8sApplicationResponseBodyApplicationInfo {
	s.UserId = &v
	return s
}

type InsertK8sApplicationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *InsertK8sApplicationResponse) SetHeaders(v map[string]*string) *InsertK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *InsertK8sApplicationResponse) SetBody(v *InsertK8sApplicationResponseBody) *InsertK8sApplicationResponse {
	s.Body = v
	return s
}

type InsertOrUpdateRegionQuery struct {
	DebugEnable *bool   `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionName  *string `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	RegionTag   *string `json:"RegionTag,omitempty" xml:"RegionTag,omitempty" require:"true"`
}

func (s InsertOrUpdateRegionQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionQuery) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionQuery) SetDebugEnable(v bool) *InsertOrUpdateRegionQuery {
	s.DebugEnable = &v
	return s
}

func (s *InsertOrUpdateRegionQuery) SetDescription(v string) *InsertOrUpdateRegionQuery {
	s.Description = &v
	return s
}

func (s *InsertOrUpdateRegionQuery) SetId(v int64) *InsertOrUpdateRegionQuery {
	s.Id = &v
	return s
}

func (s *InsertOrUpdateRegionQuery) SetRegionName(v string) *InsertOrUpdateRegionQuery {
	s.RegionName = &v
	return s
}

func (s *InsertOrUpdateRegionQuery) SetRegionTag(v string) *InsertOrUpdateRegionQuery {
	s.RegionTag = &v
	return s
}

type InsertOrUpdateRegionRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertOrUpdateRegionQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertOrUpdateRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionRequest) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionRequest) SetHeaders(v map[string]*string) *InsertOrUpdateRegionRequest {
	s.Headers = v
	return s
}

func (s *InsertOrUpdateRegionRequest) SetQuery(v *InsertOrUpdateRegionQuery) *InsertOrUpdateRegionRequest {
	s.Query = v
	return s
}

type InsertOrUpdateRegionResponseBody struct {
	Code                   *int                                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message                *string                                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId              *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	UserDefineRegionEntity *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity `json:"UserDefineRegionEntity,omitempty" xml:"UserDefineRegionEntity,omitempty" require:"true" type:"Struct"`
}

func (s InsertOrUpdateRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionResponseBody) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionResponseBody) SetCode(v int) *InsertOrUpdateRegionResponseBody {
	s.Code = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBody) SetMessage(v string) *InsertOrUpdateRegionResponseBody {
	s.Message = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBody) SetRequestId(v string) *InsertOrUpdateRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBody) SetUserDefineRegionEntity(v *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) *InsertOrUpdateRegionResponseBody {
	s.UserDefineRegionEntity = v
	return s
}

type InsertOrUpdateRegionResponseBodyUserDefineRegionEntity struct {
	BelongRegion *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty" require:"true"`
	DebugEnable  *bool   `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty" require:"true"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RegionName   *string `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetBelongRegion(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.BelongRegion = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetDebugEnable(v bool) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.DebugEnable = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetDescription(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.Description = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetId(v int64) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.Id = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetRegionId(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.RegionId = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetRegionName(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.RegionName = &v
	return s
}

func (s *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity) SetUserId(v string) *InsertOrUpdateRegionResponseBodyUserDefineRegionEntity {
	s.UserId = &v
	return s
}

type InsertOrUpdateRegionResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertOrUpdateRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertOrUpdateRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertOrUpdateRegionResponse) GoString() string {
	return s.String()
}

func (s *InsertOrUpdateRegionResponse) SetHeaders(v map[string]*string) *InsertOrUpdateRegionResponse {
	s.Headers = v
	return s
}

func (s *InsertOrUpdateRegionResponse) SetBody(v *InsertOrUpdateRegionResponseBody) *InsertOrUpdateRegionResponse {
	s.Body = v
	return s
}

type InsertRoleQuery struct {
	ActionData *string `json:"ActionData,omitempty" xml:"ActionData,omitempty" require:"true"`
	RoleName   *string `json:"RoleName,omitempty" xml:"RoleName,omitempty" require:"true"`
}

func (s InsertRoleQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertRoleQuery) GoString() string {
	return s.String()
}

func (s *InsertRoleQuery) SetActionData(v string) *InsertRoleQuery {
	s.ActionData = &v
	return s
}

func (s *InsertRoleQuery) SetRoleName(v string) *InsertRoleQuery {
	s.RoleName = &v
	return s
}

type InsertRoleRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertRoleQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertRoleRequest) GoString() string {
	return s.String()
}

func (s *InsertRoleRequest) SetHeaders(v map[string]*string) *InsertRoleRequest {
	s.Headers = v
	return s
}

func (s *InsertRoleRequest) SetQuery(v *InsertRoleQuery) *InsertRoleRequest {
	s.Query = v
	return s
}

type InsertRoleResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RoleId    *int    `json:"RoleId,omitempty" xml:"RoleId,omitempty" require:"true"`
}

func (s InsertRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertRoleResponseBody) GoString() string {
	return s.String()
}

func (s *InsertRoleResponseBody) SetCode(v int) *InsertRoleResponseBody {
	s.Code = &v
	return s
}

func (s *InsertRoleResponseBody) SetMessage(v string) *InsertRoleResponseBody {
	s.Message = &v
	return s
}

func (s *InsertRoleResponseBody) SetRequestId(v string) *InsertRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertRoleResponseBody) SetRoleId(v int) *InsertRoleResponseBody {
	s.RoleId = &v
	return s
}

type InsertRoleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertRoleResponse) GoString() string {
	return s.String()
}

func (s *InsertRoleResponse) SetHeaders(v map[string]*string) *InsertRoleResponse {
	s.Headers = v
	return s
}

func (s *InsertRoleResponse) SetBody(v *InsertRoleResponseBody) *InsertRoleResponse {
	s.Body = v
	return s
}

type InsertServiceGroupQuery struct {
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
}

func (s InsertServiceGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertServiceGroupQuery) GoString() string {
	return s.String()
}

func (s *InsertServiceGroupQuery) SetGroupName(v string) *InsertServiceGroupQuery {
	s.GroupName = &v
	return s
}

type InsertServiceGroupRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertServiceGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertServiceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertServiceGroupRequest) GoString() string {
	return s.String()
}

func (s *InsertServiceGroupRequest) SetHeaders(v map[string]*string) *InsertServiceGroupRequest {
	s.Headers = v
	return s
}

func (s *InsertServiceGroupRequest) SetQuery(v *InsertServiceGroupQuery) *InsertServiceGroupRequest {
	s.Query = v
	return s
}

type InsertServiceGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s InsertServiceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertServiceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *InsertServiceGroupResponseBody) SetCode(v int) *InsertServiceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *InsertServiceGroupResponseBody) SetMessage(v string) *InsertServiceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *InsertServiceGroupResponseBody) SetRequestId(v string) *InsertServiceGroupResponseBody {
	s.RequestId = &v
	return s
}

type InsertServiceGroupResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertServiceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertServiceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertServiceGroupResponse) GoString() string {
	return s.String()
}

func (s *InsertServiceGroupResponse) SetHeaders(v map[string]*string) *InsertServiceGroupResponse {
	s.Headers = v
	return s
}

func (s *InsertServiceGroupResponse) SetBody(v *InsertServiceGroupResponseBody) *InsertServiceGroupResponse {
	s.Body = v
	return s
}

type InsertSwimmingLaneQuery struct {
	AppInfos        *string `json:"AppInfos,omitempty" xml:"AppInfos,omitempty"`
	EnableRules     *bool   `json:"EnableRules,omitempty" xml:"EnableRules,omitempty"`
	EntryRules      *string `json:"EntryRules,omitempty" xml:"EntryRules,omitempty" require:"true"`
	GroupId         *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Tag             *string `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
}

func (s InsertSwimmingLaneQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneQuery) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneQuery) SetAppInfos(v string) *InsertSwimmingLaneQuery {
	s.AppInfos = &v
	return s
}

func (s *InsertSwimmingLaneQuery) SetEnableRules(v bool) *InsertSwimmingLaneQuery {
	s.EnableRules = &v
	return s
}

func (s *InsertSwimmingLaneQuery) SetEntryRules(v string) *InsertSwimmingLaneQuery {
	s.EntryRules = &v
	return s
}

func (s *InsertSwimmingLaneQuery) SetGroupId(v int64) *InsertSwimmingLaneQuery {
	s.GroupId = &v
	return s
}

func (s *InsertSwimmingLaneQuery) SetLogicalRegionId(v string) *InsertSwimmingLaneQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertSwimmingLaneQuery) SetName(v string) *InsertSwimmingLaneQuery {
	s.Name = &v
	return s
}

func (s *InsertSwimmingLaneQuery) SetTag(v string) *InsertSwimmingLaneQuery {
	s.Tag = &v
	return s
}

type InsertSwimmingLaneRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertSwimmingLaneQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertSwimmingLaneRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneRequest) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneRequest) SetHeaders(v map[string]*string) *InsertSwimmingLaneRequest {
	s.Headers = v
	return s
}

func (s *InsertSwimmingLaneRequest) SetQuery(v *InsertSwimmingLaneQuery) *InsertSwimmingLaneRequest {
	s.Query = v
	return s
}

type InsertSwimmingLaneResponseBody struct {
	Code      *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *InsertSwimmingLaneResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s InsertSwimmingLaneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneResponseBody) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneResponseBody) SetCode(v int) *InsertSwimmingLaneResponseBody {
	s.Code = &v
	return s
}

func (s *InsertSwimmingLaneResponseBody) SetMessage(v string) *InsertSwimmingLaneResponseBody {
	s.Message = &v
	return s
}

func (s *InsertSwimmingLaneResponseBody) SetRequestId(v string) *InsertSwimmingLaneResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertSwimmingLaneResponseBody) SetData(v *InsertSwimmingLaneResponseBodyData) *InsertSwimmingLaneResponseBody {
	s.Data = v
	return s
}

type InsertSwimmingLaneResponseBodyData struct {
	AppInfos                        *string                                                              `json:"AppInfos,omitempty" xml:"AppInfos,omitempty" require:"true"`
	EntryRule                       *string                                                              `json:"EntryRule,omitempty" xml:"EntryRule,omitempty" require:"true"`
	GroupId                         *int64                                                               `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Id                              *int64                                                               `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name                            *string                                                              `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId                     *string                                                              `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	Tag                             *string                                                              `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	SwimmingLaneAppRelationShipList []*InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList `json:"SwimmingLaneAppRelationShipList,omitempty" xml:"SwimmingLaneAppRelationShipList,omitempty" require:"true" type:"Repeated"`
}

func (s InsertSwimmingLaneResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneResponseBodyData) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneResponseBodyData) SetAppInfos(v string) *InsertSwimmingLaneResponseBodyData {
	s.AppInfos = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyData) SetEntryRule(v string) *InsertSwimmingLaneResponseBodyData {
	s.EntryRule = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyData) SetGroupId(v int64) *InsertSwimmingLaneResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyData) SetId(v int64) *InsertSwimmingLaneResponseBodyData {
	s.Id = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyData) SetName(v string) *InsertSwimmingLaneResponseBodyData {
	s.Name = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyData) SetNamespaceId(v string) *InsertSwimmingLaneResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyData) SetTag(v string) *InsertSwimmingLaneResponseBodyData {
	s.Tag = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyData) SetSwimmingLaneAppRelationShipList(v []*InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) *InsertSwimmingLaneResponseBodyData {
	s.SwimmingLaneAppRelationShipList = v
	return s
}

type InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	LaneId  *int64  `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
	Rules   *string `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true"`
}

func (s InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppId(v string) *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppId = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppName(v string) *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppName = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetLaneId(v int64) *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.LaneId = &v
	return s
}

func (s *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetRules(v string) *InsertSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.Rules = &v
	return s
}

type InsertSwimmingLaneResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertSwimmingLaneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertSwimmingLaneResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneResponse) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneResponse) SetHeaders(v map[string]*string) *InsertSwimmingLaneResponse {
	s.Headers = v
	return s
}

func (s *InsertSwimmingLaneResponse) SetBody(v *InsertSwimmingLaneResponseBody) *InsertSwimmingLaneResponse {
	s.Body = v
	return s
}

type InsertSwimmingLaneGroupQuery struct {
	AppIds          *string `json:"AppIds,omitempty" xml:"AppIds,omitempty" require:"true"`
	EntryApp        *string `json:"EntryApp,omitempty" xml:"EntryApp,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s InsertSwimmingLaneGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupQuery) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupQuery) SetAppIds(v string) *InsertSwimmingLaneGroupQuery {
	s.AppIds = &v
	return s
}

func (s *InsertSwimmingLaneGroupQuery) SetEntryApp(v string) *InsertSwimmingLaneGroupQuery {
	s.EntryApp = &v
	return s
}

func (s *InsertSwimmingLaneGroupQuery) SetLogicalRegionId(v string) *InsertSwimmingLaneGroupQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *InsertSwimmingLaneGroupQuery) SetName(v string) *InsertSwimmingLaneGroupQuery {
	s.Name = &v
	return s
}

type InsertSwimmingLaneGroupRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InsertSwimmingLaneGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InsertSwimmingLaneGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupRequest) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupRequest) SetHeaders(v map[string]*string) *InsertSwimmingLaneGroupRequest {
	s.Headers = v
	return s
}

func (s *InsertSwimmingLaneGroupRequest) SetQuery(v *InsertSwimmingLaneGroupQuery) *InsertSwimmingLaneGroupRequest {
	s.Query = v
	return s
}

type InsertSwimmingLaneGroupResponseBody struct {
	Code      *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *InsertSwimmingLaneGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s InsertSwimmingLaneGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupResponseBody) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupResponseBody) SetCode(v int) *InsertSwimmingLaneGroupResponseBody {
	s.Code = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBody) SetMessage(v string) *InsertSwimmingLaneGroupResponseBody {
	s.Message = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBody) SetRequestId(v string) *InsertSwimmingLaneGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBody) SetData(v *InsertSwimmingLaneGroupResponseBodyData) *InsertSwimmingLaneGroupResponseBody {
	s.Data = v
	return s
}

type InsertSwimmingLaneGroupResponseBodyData struct {
	Id               *int64                                                   `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name             *string                                                  `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId      *string                                                  `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ApplicationList  *InsertSwimmingLaneGroupResponseBodyDataApplicationList  `json:"ApplicationList,omitempty" xml:"ApplicationList,omitempty" require:"true" type:"Struct"`
	EntryApplication *InsertSwimmingLaneGroupResponseBodyDataEntryApplication `json:"EntryApplication,omitempty" xml:"EntryApplication,omitempty" require:"true" type:"Struct"`
}

func (s InsertSwimmingLaneGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupResponseBodyData) SetId(v int64) *InsertSwimmingLaneGroupResponseBodyData {
	s.Id = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBodyData) SetName(v string) *InsertSwimmingLaneGroupResponseBodyData {
	s.Name = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBodyData) SetNamespaceId(v string) *InsertSwimmingLaneGroupResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBodyData) SetApplicationList(v *InsertSwimmingLaneGroupResponseBodyDataApplicationList) *InsertSwimmingLaneGroupResponseBodyData {
	s.ApplicationList = v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBodyData) SetEntryApplication(v *InsertSwimmingLaneGroupResponseBodyDataEntryApplication) *InsertSwimmingLaneGroupResponseBodyData {
	s.EntryApplication = v
	return s
}

type InsertSwimmingLaneGroupResponseBodyDataApplicationList struct {
	Application []*InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication `json:"Application,omitempty" xml:"Application,omitempty" require:"true" type:"Repeated"`
}

func (s InsertSwimmingLaneGroupResponseBodyDataApplicationList) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupResponseBodyDataApplicationList) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupResponseBodyDataApplicationList) SetApplication(v []*InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication) *InsertSwimmingLaneGroupResponseBodyDataApplicationList {
	s.Application = v
	return s
}

type InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication) SetAppId(v string) *InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication {
	s.AppId = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication) SetAppName(v string) *InsertSwimmingLaneGroupResponseBodyDataApplicationListApplication {
	s.AppName = &v
	return s
}

type InsertSwimmingLaneGroupResponseBodyDataEntryApplication struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s InsertSwimmingLaneGroupResponseBodyDataEntryApplication) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupResponseBodyDataEntryApplication) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupResponseBodyDataEntryApplication) SetAppId(v string) *InsertSwimmingLaneGroupResponseBodyDataEntryApplication {
	s.AppId = &v
	return s
}

func (s *InsertSwimmingLaneGroupResponseBodyDataEntryApplication) SetAppName(v string) *InsertSwimmingLaneGroupResponseBodyDataEntryApplication {
	s.AppName = &v
	return s
}

type InsertSwimmingLaneGroupResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InsertSwimmingLaneGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InsertSwimmingLaneGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertSwimmingLaneGroupResponse) GoString() string {
	return s.String()
}

func (s *InsertSwimmingLaneGroupResponse) SetHeaders(v map[string]*string) *InsertSwimmingLaneGroupResponse {
	s.Headers = v
	return s
}

func (s *InsertSwimmingLaneGroupResponse) SetBody(v *InsertSwimmingLaneGroupResponseBody) *InsertSwimmingLaneGroupResponse {
	s.Body = v
	return s
}

type InstallAgentQuery struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	DoAsync     *bool   `json:"DoAsync,omitempty" xml:"DoAsync,omitempty"`
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" require:"true"`
}

func (s InstallAgentQuery) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentQuery) GoString() string {
	return s.String()
}

func (s *InstallAgentQuery) SetClusterId(v string) *InstallAgentQuery {
	s.ClusterId = &v
	return s
}

func (s *InstallAgentQuery) SetDoAsync(v bool) *InstallAgentQuery {
	s.DoAsync = &v
	return s
}

func (s *InstallAgentQuery) SetInstanceIds(v string) *InstallAgentQuery {
	s.InstanceIds = &v
	return s
}

type InstallAgentRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *InstallAgentQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s InstallAgentRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentRequest) GoString() string {
	return s.String()
}

func (s *InstallAgentRequest) SetHeaders(v map[string]*string) *InstallAgentRequest {
	s.Headers = v
	return s
}

func (s *InstallAgentRequest) SetQuery(v *InstallAgentQuery) *InstallAgentRequest {
	s.Query = v
	return s
}

type InstallAgentResponseBody struct {
	Code                *int                                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message             *string                                      `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId           *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ExecutionResultList *InstallAgentResponseBodyExecutionResultList `json:"ExecutionResultList,omitempty" xml:"ExecutionResultList,omitempty" require:"true" type:"Struct"`
}

func (s InstallAgentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponseBody) GoString() string {
	return s.String()
}

func (s *InstallAgentResponseBody) SetCode(v int) *InstallAgentResponseBody {
	s.Code = &v
	return s
}

func (s *InstallAgentResponseBody) SetMessage(v string) *InstallAgentResponseBody {
	s.Message = &v
	return s
}

func (s *InstallAgentResponseBody) SetRequestId(v string) *InstallAgentResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallAgentResponseBody) SetExecutionResultList(v *InstallAgentResponseBodyExecutionResultList) *InstallAgentResponseBody {
	s.ExecutionResultList = v
	return s
}

type InstallAgentResponseBodyExecutionResultList struct {
	ExecutionResult []*InstallAgentResponseBodyExecutionResultListExecutionResult `json:"ExecutionResult,omitempty" xml:"ExecutionResult,omitempty" require:"true" type:"Repeated"`
}

func (s InstallAgentResponseBodyExecutionResultList) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponseBodyExecutionResultList) GoString() string {
	return s.String()
}

func (s *InstallAgentResponseBodyExecutionResultList) SetExecutionResult(v []*InstallAgentResponseBodyExecutionResultListExecutionResult) *InstallAgentResponseBodyExecutionResultList {
	s.ExecutionResult = v
	return s
}

type InstallAgentResponseBodyExecutionResultListExecutionResult struct {
	FinishedTime       *string `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty" require:"true"`
	InstanceId         *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InvokeRecordStatus *string `json:"InvokeRecordStatus,omitempty" xml:"InvokeRecordStatus,omitempty" require:"true"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Success            *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s InstallAgentResponseBodyExecutionResultListExecutionResult) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponseBodyExecutionResultListExecutionResult) GoString() string {
	return s.String()
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetFinishedTime(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.FinishedTime = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetInstanceId(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.InstanceId = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetInvokeRecordStatus(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.InvokeRecordStatus = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetStatus(v string) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.Status = &v
	return s
}

func (s *InstallAgentResponseBodyExecutionResultListExecutionResult) SetSuccess(v bool) *InstallAgentResponseBodyExecutionResultListExecutionResult {
	s.Success = &v
	return s
}

type InstallAgentResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InstallAgentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallAgentResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallAgentResponse) GoString() string {
	return s.String()
}

func (s *InstallAgentResponse) SetHeaders(v map[string]*string) *InstallAgentResponse {
	s.Headers = v
	return s
}

func (s *InstallAgentResponse) SetBody(v *InstallAgentResponseBody) *InstallAgentResponse {
	s.Body = v
	return s
}

type ListAliyunRegionRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListAliyunRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionRequest) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionRequest) SetHeaders(v map[string]*string) *ListAliyunRegionRequest {
	s.Headers = v
	return s
}

type ListAliyunRegionResponseBody struct {
	Code             *int                                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message          *string                                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionEntityList *ListAliyunRegionResponseBodyRegionEntityList `json:"RegionEntityList,omitempty" xml:"RegionEntityList,omitempty" require:"true" type:"Struct"`
}

func (s ListAliyunRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponseBody) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponseBody) SetCode(v int) *ListAliyunRegionResponseBody {
	s.Code = &v
	return s
}

func (s *ListAliyunRegionResponseBody) SetMessage(v string) *ListAliyunRegionResponseBody {
	s.Message = &v
	return s
}

func (s *ListAliyunRegionResponseBody) SetRequestId(v string) *ListAliyunRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAliyunRegionResponseBody) SetRegionEntityList(v *ListAliyunRegionResponseBodyRegionEntityList) *ListAliyunRegionResponseBody {
	s.RegionEntityList = v
	return s
}

type ListAliyunRegionResponseBodyRegionEntityList struct {
	RegionEntity []*ListAliyunRegionResponseBodyRegionEntityListRegionEntity `json:"RegionEntity,omitempty" xml:"RegionEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListAliyunRegionResponseBodyRegionEntityList) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponseBodyRegionEntityList) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponseBodyRegionEntityList) SetRegionEntity(v []*ListAliyunRegionResponseBodyRegionEntityListRegionEntity) *ListAliyunRegionResponseBodyRegionEntityList {
	s.RegionEntity = v
	return s
}

type ListAliyunRegionResponseBodyRegionEntityListRegionEntity struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s ListAliyunRegionResponseBodyRegionEntityListRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponseBodyRegionEntityListRegionEntity) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponseBodyRegionEntityListRegionEntity) SetId(v string) *ListAliyunRegionResponseBodyRegionEntityListRegionEntity {
	s.Id = &v
	return s
}

func (s *ListAliyunRegionResponseBodyRegionEntityListRegionEntity) SetName(v string) *ListAliyunRegionResponseBodyRegionEntityListRegionEntity {
	s.Name = &v
	return s
}

type ListAliyunRegionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAliyunRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAliyunRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAliyunRegionResponse) GoString() string {
	return s.String()
}

func (s *ListAliyunRegionResponse) SetHeaders(v map[string]*string) *ListAliyunRegionResponse {
	s.Headers = v
	return s
}

func (s *ListAliyunRegionResponse) SetBody(v *ListAliyunRegionResponseBody) *ListAliyunRegionResponse {
	s.Body = v
	return s
}

type ListApplicationQuery struct {
	AppName               *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	ClusterId             *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	LogicalRegionId       *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	LogicalRegionIdFilter *string `json:"LogicalRegionIdFilter,omitempty" xml:"LogicalRegionIdFilter,omitempty"`
	ResourceGroupId       *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationQuery) GoString() string {
	return s.String()
}

func (s *ListApplicationQuery) SetAppName(v string) *ListApplicationQuery {
	s.AppName = &v
	return s
}

func (s *ListApplicationQuery) SetClusterId(v string) *ListApplicationQuery {
	s.ClusterId = &v
	return s
}

func (s *ListApplicationQuery) SetLogicalRegionId(v string) *ListApplicationQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *ListApplicationQuery) SetLogicalRegionIdFilter(v string) *ListApplicationQuery {
	s.LogicalRegionIdFilter = &v
	return s
}

func (s *ListApplicationQuery) SetResourceGroupId(v string) *ListApplicationQuery {
	s.ResourceGroupId = &v
	return s
}

type ListApplicationRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListApplicationQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationRequest) SetHeaders(v map[string]*string) *ListApplicationRequest {
	s.Headers = v
	return s
}

func (s *ListApplicationRequest) SetQuery(v *ListApplicationQuery) *ListApplicationRequest {
	s.Query = v
	return s
}

type ListApplicationResponseBody struct {
	Code            *int                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ApplicationList *ListApplicationResponseBodyApplicationList `json:"ApplicationList,omitempty" xml:"ApplicationList,omitempty" require:"true" type:"Struct"`
}

func (s ListApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBody) SetCode(v int) *ListApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ListApplicationResponseBody) SetMessage(v string) *ListApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ListApplicationResponseBody) SetRequestId(v string) *ListApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplicationResponseBody) SetApplicationList(v *ListApplicationResponseBodyApplicationList) *ListApplicationResponseBody {
	s.ApplicationList = v
	return s
}

type ListApplicationResponseBodyApplicationList struct {
	Application []*ListApplicationResponseBodyApplicationListApplication `json:"Application,omitempty" xml:"Application,omitempty" require:"true" type:"Repeated"`
}

func (s ListApplicationResponseBodyApplicationList) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBodyApplicationList) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBodyApplicationList) SetApplication(v []*ListApplicationResponseBodyApplicationListApplication) *ListApplicationResponseBodyApplicationList {
	s.Application = v
	return s
}

type ListApplicationResponseBodyApplicationListApplication struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ApplicationType      *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty" require:"true"`
	BuildPackageId       *int64  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty" require:"true"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterType          *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ResourceGroupId      *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	RunningInstanceCount *int    `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty" require:"true"`
}

func (s ListApplicationResponseBodyApplicationListApplication) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBodyApplicationListApplication) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetAppId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.AppId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetApplicationType(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.ApplicationType = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetBuildPackageId(v int64) *ListApplicationResponseBodyApplicationListApplication {
	s.BuildPackageId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetClusterId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.ClusterId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetClusterType(v int) *ListApplicationResponseBodyApplicationListApplication {
	s.ClusterType = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetName(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.Name = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetRegionId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.RegionId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetResourceGroupId(v string) *ListApplicationResponseBodyApplicationListApplication {
	s.ResourceGroupId = &v
	return s
}

func (s *ListApplicationResponseBodyApplicationListApplication) SetRunningInstanceCount(v int) *ListApplicationResponseBodyApplicationListApplication {
	s.RunningInstanceCount = &v
	return s
}

type ListApplicationResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationResponse) SetHeaders(v map[string]*string) *ListApplicationResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationResponse) SetBody(v *ListApplicationResponseBody) *ListApplicationResponse {
	s.Body = v
	return s
}

type ListApplicationEcuQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s ListApplicationEcuQuery) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuQuery) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuQuery) SetAppId(v string) *ListApplicationEcuQuery {
	s.AppId = &v
	return s
}

func (s *ListApplicationEcuQuery) SetLogicalRegionId(v string) *ListApplicationEcuQuery {
	s.LogicalRegionId = &v
	return s
}

type ListApplicationEcuRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListApplicationEcuQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListApplicationEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuRequest) SetHeaders(v map[string]*string) *ListApplicationEcuRequest {
	s.Headers = v
	return s
}

func (s *ListApplicationEcuRequest) SetQuery(v *ListApplicationEcuQuery) *ListApplicationEcuRequest {
	s.Query = v
	return s
}

type ListApplicationEcuResponseBody struct {
	Code        *int                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                                    `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EcuInfoList *ListApplicationEcuResponseBodyEcuInfoList `json:"EcuInfoList,omitempty" xml:"EcuInfoList,omitempty" require:"true" type:"Struct"`
}

func (s ListApplicationEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponseBody) SetCode(v int) *ListApplicationEcuResponseBody {
	s.Code = &v
	return s
}

func (s *ListApplicationEcuResponseBody) SetMessage(v string) *ListApplicationEcuResponseBody {
	s.Message = &v
	return s
}

func (s *ListApplicationEcuResponseBody) SetRequestId(v string) *ListApplicationEcuResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplicationEcuResponseBody) SetEcuInfoList(v *ListApplicationEcuResponseBodyEcuInfoList) *ListApplicationEcuResponseBody {
	s.EcuInfoList = v
	return s
}

type ListApplicationEcuResponseBodyEcuInfoList struct {
	EcuEntity []*ListApplicationEcuResponseBodyEcuInfoListEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListApplicationEcuResponseBodyEcuInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponseBodyEcuInfoList) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponseBodyEcuInfoList) SetEcuEntity(v []*ListApplicationEcuResponseBodyEcuInfoListEcuEntity) *ListApplicationEcuResponseBodyEcuInfoList {
	s.EcuEntity = v
	return s
}

type ListApplicationEcuResponseBodyEcuInfoListEcuEntity struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AvailableCpu  *int    `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty" require:"true"`
	AvailableMem  *int    `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty" require:"true"`
	Cpu           *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty" require:"true"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty" require:"true"`
	Mem           *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s ListApplicationEcuResponseBodyEcuInfoListEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponseBodyEcuInfoListEcuEntity) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetAppId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.AppId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetAvailableCpu(v int) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetAvailableMem(v int) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetCpu(v int) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Cpu = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetCreateTime(v int64) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetDockerEnv(v bool) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetEcuId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.EcuId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetHeartbeatTime(v int64) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetInstanceId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetIpAddr(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetMem(v int) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Mem = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetName(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Name = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetOnline(v bool) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.Online = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetRegionId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.RegionId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetUpdateTime(v int64) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetUserId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.UserId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetVpcId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.VpcId = &v
	return s
}

func (s *ListApplicationEcuResponseBodyEcuInfoListEcuEntity) SetZoneId(v string) *ListApplicationEcuResponseBodyEcuInfoListEcuEntity {
	s.ZoneId = &v
	return s
}

type ListApplicationEcuResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListApplicationEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListApplicationEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationEcuResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationEcuResponse) SetHeaders(v map[string]*string) *ListApplicationEcuResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationEcuResponse) SetBody(v *ListApplicationEcuResponseBody) *ListApplicationEcuResponse {
	s.Body = v
	return s
}

type ListAuthorityRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListAuthorityRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityRequest) GoString() string {
	return s.String()
}

func (s *ListAuthorityRequest) SetHeaders(v map[string]*string) *ListAuthorityRequest {
	s.Headers = v
	return s
}

type ListAuthorityResponseBody struct {
	Code          *int                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AuthorityList *ListAuthorityResponseBodyAuthorityList `json:"AuthorityList,omitempty" xml:"AuthorityList,omitempty" require:"true" type:"Struct"`
}

func (s ListAuthorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBody) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBody) SetCode(v int) *ListAuthorityResponseBody {
	s.Code = &v
	return s
}

func (s *ListAuthorityResponseBody) SetMessage(v string) *ListAuthorityResponseBody {
	s.Message = &v
	return s
}

func (s *ListAuthorityResponseBody) SetRequestId(v string) *ListAuthorityResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAuthorityResponseBody) SetAuthorityList(v *ListAuthorityResponseBodyAuthorityList) *ListAuthorityResponseBody {
	s.AuthorityList = v
	return s
}

type ListAuthorityResponseBodyAuthorityList struct {
	Authority []*ListAuthorityResponseBodyAuthorityListAuthority `json:"Authority,omitempty" xml:"Authority,omitempty" require:"true" type:"Repeated"`
}

func (s ListAuthorityResponseBodyAuthorityList) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityList) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityList) SetAuthority(v []*ListAuthorityResponseBodyAuthorityListAuthority) *ListAuthorityResponseBodyAuthorityList {
	s.Authority = v
	return s
}

type ListAuthorityResponseBodyAuthorityListAuthority struct {
	Description *string                                                    `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	GroupId     *string                                                    `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Name        *string                                                    `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ActionList  *ListAuthorityResponseBodyAuthorityListAuthorityActionList `json:"ActionList,omitempty" xml:"ActionList,omitempty" require:"true" type:"Struct"`
}

func (s ListAuthorityResponseBodyAuthorityListAuthority) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityListAuthority) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetDescription(v string) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.Description = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetGroupId(v string) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.GroupId = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetName(v string) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.Name = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthority) SetActionList(v *ListAuthorityResponseBodyAuthorityListAuthorityActionList) *ListAuthorityResponseBodyAuthorityListAuthority {
	s.ActionList = v
	return s
}

type ListAuthorityResponseBodyAuthorityListAuthorityActionList struct {
	Action []*ListAuthorityResponseBodyAuthorityListAuthorityActionListAction `json:"Action,omitempty" xml:"Action,omitempty" require:"true" type:"Repeated"`
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionList) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionList) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionList) SetAction(v []*ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) *ListAuthorityResponseBodyAuthorityListAuthorityActionList {
	s.Action = v
	return s
}

type ListAuthorityResponseBodyAuthorityListAuthorityActionListAction struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetCode(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.Code = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetDescription(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.Description = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetGroupId(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.GroupId = &v
	return s
}

func (s *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction) SetName(v string) *ListAuthorityResponseBodyAuthorityListAuthorityActionListAction {
	s.Name = &v
	return s
}

type ListAuthorityResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAuthorityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAuthorityResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAuthorityResponse) GoString() string {
	return s.String()
}

func (s *ListAuthorityResponse) SetHeaders(v map[string]*string) *ListAuthorityResponse {
	s.Headers = v
	return s
}

func (s *ListAuthorityResponse) SetBody(v *ListAuthorityResponseBody) *ListAuthorityResponse {
	s.Body = v
	return s
}

type ListBuildPackRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListBuildPackRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackRequest) GoString() string {
	return s.String()
}

func (s *ListBuildPackRequest) SetHeaders(v map[string]*string) *ListBuildPackRequest {
	s.Headers = v
	return s
}

type ListBuildPackResponseBody struct {
	Code          *int                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	BuildPackList *ListBuildPackResponseBodyBuildPackList `json:"BuildPackList,omitempty" xml:"BuildPackList,omitempty" require:"true" type:"Struct"`
}

func (s ListBuildPackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponseBody) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponseBody) SetCode(v int) *ListBuildPackResponseBody {
	s.Code = &v
	return s
}

func (s *ListBuildPackResponseBody) SetMessage(v string) *ListBuildPackResponseBody {
	s.Message = &v
	return s
}

func (s *ListBuildPackResponseBody) SetRequestId(v string) *ListBuildPackResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBuildPackResponseBody) SetBuildPackList(v *ListBuildPackResponseBodyBuildPackList) *ListBuildPackResponseBody {
	s.BuildPackList = v
	return s
}

type ListBuildPackResponseBodyBuildPackList struct {
	BuildPack []*ListBuildPackResponseBodyBuildPackListBuildPack `json:"BuildPack,omitempty" xml:"BuildPack,omitempty" require:"true" type:"Repeated"`
}

func (s ListBuildPackResponseBodyBuildPackList) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponseBodyBuildPackList) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponseBodyBuildPackList) SetBuildPack(v []*ListBuildPackResponseBodyBuildPackListBuildPack) *ListBuildPackResponseBodyBuildPackList {
	s.BuildPack = v
	return s
}

type ListBuildPackResponseBodyBuildPackListBuildPack struct {
	ConfigId           *int64  `json:"ConfigId,omitempty" xml:"ConfigId,omitempty" require:"true"`
	Disabled           *bool   `json:"Disabled,omitempty" xml:"Disabled,omitempty" require:"true"`
	Feature            *string `json:"Feature,omitempty" xml:"Feature,omitempty" require:"true"`
	ImageId            *string `json:"ImageId,omitempty" xml:"ImageId,omitempty" require:"true"`
	MultipleTenant     *bool   `json:"MultipleTenant,omitempty" xml:"MultipleTenant,omitempty" require:"true"`
	PackVersion        *string `json:"PackVersion,omitempty" xml:"PackVersion,omitempty" require:"true"`
	PandoraDesc        *string `json:"PandoraDesc,omitempty" xml:"PandoraDesc,omitempty" require:"true"`
	PandoraDownloadUrl *string `json:"PandoraDownloadUrl,omitempty" xml:"PandoraDownloadUrl,omitempty" require:"true"`
	PandoraVersion     *string `json:"PandoraVersion,omitempty" xml:"PandoraVersion,omitempty" require:"true"`
	PluginInfo         *string `json:"PluginInfo,omitempty" xml:"PluginInfo,omitempty" require:"true"`
	ScriptName         *string `json:"ScriptName,omitempty" xml:"ScriptName,omitempty" require:"true"`
	ScriptVersion      *string `json:"ScriptVersion,omitempty" xml:"ScriptVersion,omitempty" require:"true"`
	SupportFeatures    *string `json:"SupportFeatures,omitempty" xml:"SupportFeatures,omitempty" require:"true"`
	TengineDownloadUrl *string `json:"TengineDownloadUrl,omitempty" xml:"TengineDownloadUrl,omitempty" require:"true"`
	TengineImageId     *string `json:"TengineImageId,omitempty" xml:"TengineImageId,omitempty" require:"true"`
	TomcatDesc         *string `json:"TomcatDesc,omitempty" xml:"TomcatDesc,omitempty" require:"true"`
	TomcatDownloadUrl  *string `json:"TomcatDownloadUrl,omitempty" xml:"TomcatDownloadUrl,omitempty" require:"true"`
	TomcatPath         *string `json:"TomcatPath,omitempty" xml:"TomcatPath,omitempty" require:"true"`
	TomcatVersion      *string `json:"TomcatVersion,omitempty" xml:"TomcatVersion,omitempty" require:"true"`
	WithTengine        *bool   `json:"WithTengine,omitempty" xml:"WithTengine,omitempty" require:"true"`
}

func (s ListBuildPackResponseBodyBuildPackListBuildPack) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponseBodyBuildPackListBuildPack) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetConfigId(v int64) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ConfigId = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetDisabled(v bool) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.Disabled = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetFeature(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.Feature = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetImageId(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ImageId = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetMultipleTenant(v bool) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.MultipleTenant = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPackVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PackVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPandoraDesc(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PandoraDesc = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPandoraDownloadUrl(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PandoraDownloadUrl = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPandoraVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PandoraVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetPluginInfo(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.PluginInfo = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetScriptName(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ScriptName = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetScriptVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.ScriptVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetSupportFeatures(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.SupportFeatures = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTengineDownloadUrl(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TengineDownloadUrl = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTengineImageId(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TengineImageId = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatDesc(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatDesc = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatDownloadUrl(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatDownloadUrl = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatPath(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatPath = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetTomcatVersion(v string) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.TomcatVersion = &v
	return s
}

func (s *ListBuildPackResponseBodyBuildPackListBuildPack) SetWithTengine(v bool) *ListBuildPackResponseBodyBuildPackListBuildPack {
	s.WithTengine = &v
	return s
}

type ListBuildPackResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListBuildPackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListBuildPackResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBuildPackResponse) GoString() string {
	return s.String()
}

func (s *ListBuildPackResponse) SetHeaders(v map[string]*string) *ListBuildPackResponse {
	s.Headers = v
	return s
}

func (s *ListBuildPackResponse) SetBody(v *ListBuildPackResponseBody) *ListBuildPackResponse {
	s.Body = v
	return s
}

type ListCSBGatewayQuery struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
}

func (s ListCSBGatewayQuery) String() string {
	return tea.Prettify(s)
}

func (s ListCSBGatewayQuery) GoString() string {
	return s.String()
}

func (s *ListCSBGatewayQuery) SetLogicalRegionId(v string) *ListCSBGatewayQuery {
	s.LogicalRegionId = &v
	return s
}

type ListCSBGatewayRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListCSBGatewayQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListCSBGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCSBGatewayRequest) GoString() string {
	return s.String()
}

func (s *ListCSBGatewayRequest) SetHeaders(v map[string]*string) *ListCSBGatewayRequest {
	s.Headers = v
	return s
}

func (s *ListCSBGatewayRequest) SetQuery(v *ListCSBGatewayQuery) *ListCSBGatewayRequest {
	s.Query = v
	return s
}

type ListCSBGatewayResponseBody struct {
	Code      *int                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      []*ListCSBGatewayResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s ListCSBGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCSBGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *ListCSBGatewayResponseBody) SetCode(v int) *ListCSBGatewayResponseBody {
	s.Code = &v
	return s
}

func (s *ListCSBGatewayResponseBody) SetMessage(v string) *ListCSBGatewayResponseBody {
	s.Message = &v
	return s
}

func (s *ListCSBGatewayResponseBody) SetRequestId(v string) *ListCSBGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCSBGatewayResponseBody) SetData(v []*ListCSBGatewayResponseBodyData) *ListCSBGatewayResponseBody {
	s.Data = v
	return s
}

type ListCSBGatewayResponseBodyData struct {
	GatewayType *string `json:"GatewayType,omitempty" xml:"GatewayType,omitempty" require:"true"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s ListCSBGatewayResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCSBGatewayResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCSBGatewayResponseBodyData) SetGatewayType(v string) *ListCSBGatewayResponseBodyData {
	s.GatewayType = &v
	return s
}

func (s *ListCSBGatewayResponseBodyData) SetId(v int64) *ListCSBGatewayResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListCSBGatewayResponseBodyData) SetName(v string) *ListCSBGatewayResponseBodyData {
	s.Name = &v
	return s
}

type ListCSBGatewayResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCSBGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCSBGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCSBGatewayResponse) GoString() string {
	return s.String()
}

func (s *ListCSBGatewayResponse) SetHeaders(v map[string]*string) *ListCSBGatewayResponse {
	s.Headers = v
	return s
}

func (s *ListCSBGatewayResponse) SetBody(v *ListCSBGatewayResponseBody) *ListCSBGatewayResponse {
	s.Body = v
	return s
}

type ListChildrenStacksQuery struct {
	CurrentPage *int   `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StackId     *int64 `json:"StackId,omitempty" xml:"StackId,omitempty" require:"true"`
}

func (s ListChildrenStacksQuery) String() string {
	return tea.Prettify(s)
}

func (s ListChildrenStacksQuery) GoString() string {
	return s.String()
}

func (s *ListChildrenStacksQuery) SetCurrentPage(v int) *ListChildrenStacksQuery {
	s.CurrentPage = &v
	return s
}

func (s *ListChildrenStacksQuery) SetPageSize(v int) *ListChildrenStacksQuery {
	s.PageSize = &v
	return s
}

func (s *ListChildrenStacksQuery) SetStackId(v int64) *ListChildrenStacksQuery {
	s.StackId = &v
	return s
}

type ListChildrenStacksRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListChildrenStacksQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListChildrenStacksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListChildrenStacksRequest) GoString() string {
	return s.String()
}

func (s *ListChildrenStacksRequest) SetHeaders(v map[string]*string) *ListChildrenStacksRequest {
	s.Headers = v
	return s
}

func (s *ListChildrenStacksRequest) SetQuery(v *ListChildrenStacksQuery) *ListChildrenStacksRequest {
	s.Query = v
	return s
}

type ListChildrenStacksResponseBody struct {
	Code      *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *ListChildrenStacksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListChildrenStacksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListChildrenStacksResponseBody) GoString() string {
	return s.String()
}

func (s *ListChildrenStacksResponseBody) SetCode(v int) *ListChildrenStacksResponseBody {
	s.Code = &v
	return s
}

func (s *ListChildrenStacksResponseBody) SetMessage(v string) *ListChildrenStacksResponseBody {
	s.Message = &v
	return s
}

func (s *ListChildrenStacksResponseBody) SetRequestId(v string) *ListChildrenStacksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListChildrenStacksResponseBody) SetData(v *ListChildrenStacksResponseBodyData) *ListChildrenStacksResponseBody {
	s.Data = v
	return s
}

type ListChildrenStacksResponseBodyData struct {
	CurrentPage *int                                        `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize    *int                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize   *int                                        `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result      []*ListChildrenStacksResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s ListChildrenStacksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListChildrenStacksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListChildrenStacksResponseBodyData) SetCurrentPage(v int) *ListChildrenStacksResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListChildrenStacksResponseBodyData) SetPageSize(v int) *ListChildrenStacksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListChildrenStacksResponseBodyData) SetTotalSize(v int) *ListChildrenStacksResponseBodyData {
	s.TotalSize = &v
	return s
}

func (s *ListChildrenStacksResponseBodyData) SetResult(v []*ListChildrenStacksResponseBodyDataResult) *ListChildrenStacksResponseBodyData {
	s.Result = v
	return s
}

type ListChildrenStacksResponseBodyDataResult struct {
	Comment    *string   `json:"Comment,omitempty" xml:"Comment,omitempty" require:"true"`
	Id         *int64    `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Latest     *bool     `json:"Latest,omitempty" xml:"Latest,omitempty" require:"true"`
	Name       *string   `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Preferred  *bool     `json:"Preferred,omitempty" xml:"Preferred,omitempty" require:"true"`
	BuildTypes []*string `json:"BuildTypes,omitempty" xml:"BuildTypes,omitempty" require:"true" type:"Repeated"`
}

func (s ListChildrenStacksResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s ListChildrenStacksResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *ListChildrenStacksResponseBodyDataResult) SetComment(v string) *ListChildrenStacksResponseBodyDataResult {
	s.Comment = &v
	return s
}

func (s *ListChildrenStacksResponseBodyDataResult) SetId(v int64) *ListChildrenStacksResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *ListChildrenStacksResponseBodyDataResult) SetLatest(v bool) *ListChildrenStacksResponseBodyDataResult {
	s.Latest = &v
	return s
}

func (s *ListChildrenStacksResponseBodyDataResult) SetName(v string) *ListChildrenStacksResponseBodyDataResult {
	s.Name = &v
	return s
}

func (s *ListChildrenStacksResponseBodyDataResult) SetPreferred(v bool) *ListChildrenStacksResponseBodyDataResult {
	s.Preferred = &v
	return s
}

func (s *ListChildrenStacksResponseBodyDataResult) SetBuildTypes(v []*string) *ListChildrenStacksResponseBodyDataResult {
	s.BuildTypes = v
	return s
}

type ListChildrenStacksResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListChildrenStacksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListChildrenStacksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListChildrenStacksResponse) GoString() string {
	return s.String()
}

func (s *ListChildrenStacksResponse) SetHeaders(v map[string]*string) *ListChildrenStacksResponse {
	s.Headers = v
	return s
}

func (s *ListChildrenStacksResponse) SetBody(v *ListChildrenStacksResponseBody) *ListChildrenStacksResponse {
	s.Body = v
	return s
}

type ListClusterQuery struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListClusterQuery) String() string {
	return tea.Prettify(s)
}

func (s ListClusterQuery) GoString() string {
	return s.String()
}

func (s *ListClusterQuery) SetLogicalRegionId(v string) *ListClusterQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *ListClusterQuery) SetResourceGroupId(v string) *ListClusterQuery {
	s.ResourceGroupId = &v
	return s
}

type ListClusterRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListClusterQuery  `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterRequest) GoString() string {
	return s.String()
}

func (s *ListClusterRequest) SetHeaders(v map[string]*string) *ListClusterRequest {
	s.Headers = v
	return s
}

func (s *ListClusterRequest) SetQuery(v *ListClusterQuery) *ListClusterRequest {
	s.Query = v
	return s
}

type ListClusterResponseBody struct {
	Code        *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ClusterList *ListClusterResponseBodyClusterList `json:"ClusterList,omitempty" xml:"ClusterList,omitempty" require:"true" type:"Struct"`
}

func (s ListClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterResponseBody) SetCode(v int) *ListClusterResponseBody {
	s.Code = &v
	return s
}

func (s *ListClusterResponseBody) SetMessage(v string) *ListClusterResponseBody {
	s.Message = &v
	return s
}

func (s *ListClusterResponseBody) SetRequestId(v string) *ListClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterResponseBody) SetClusterList(v *ListClusterResponseBodyClusterList) *ListClusterResponseBody {
	s.ClusterList = v
	return s
}

type ListClusterResponseBodyClusterList struct {
	Cluster []*ListClusterResponseBodyClusterListCluster `json:"Cluster,omitempty" xml:"Cluster,omitempty" require:"true" type:"Repeated"`
}

func (s ListClusterResponseBodyClusterList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponseBodyClusterList) GoString() string {
	return s.String()
}

func (s *ListClusterResponseBodyClusterList) SetCluster(v []*ListClusterResponseBodyClusterListCluster) *ListClusterResponseBodyClusterList {
	s.Cluster = v
	return s
}

type ListClusterResponseBodyClusterListCluster struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterName     *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	ClusterType     *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Cpu             *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CpuUsed         *int    `json:"CpuUsed,omitempty" xml:"CpuUsed,omitempty" require:"true"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	CsClusterId     *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty" require:"true"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	IaasProvider    *string `json:"IaasProvider,omitempty" xml:"IaasProvider,omitempty" require:"true"`
	Mem             *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	MemUsed         *int    `json:"MemUsed,omitempty" xml:"MemUsed,omitempty" require:"true"`
	NetworkMode     *int    `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty" require:"true"`
	NodeNum         *int    `json:"NodeNum,omitempty" xml:"NodeNum,omitempty" require:"true"`
	OversoldFactor  *int    `json:"OversoldFactor,omitempty" xml:"OversoldFactor,omitempty" require:"true"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty" require:"true"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
}

func (s ListClusterResponseBodyClusterListCluster) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponseBodyClusterListCluster) GoString() string {
	return s.String()
}

func (s *ListClusterResponseBodyClusterListCluster) SetClusterId(v string) *ListClusterResponseBodyClusterListCluster {
	s.ClusterId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetClusterName(v string) *ListClusterResponseBodyClusterListCluster {
	s.ClusterName = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetClusterType(v int) *ListClusterResponseBodyClusterListCluster {
	s.ClusterType = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCpu(v int) *ListClusterResponseBodyClusterListCluster {
	s.Cpu = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCpuUsed(v int) *ListClusterResponseBodyClusterListCluster {
	s.CpuUsed = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCreateTime(v int64) *ListClusterResponseBodyClusterListCluster {
	s.CreateTime = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetCsClusterId(v string) *ListClusterResponseBodyClusterListCluster {
	s.CsClusterId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetDescription(v string) *ListClusterResponseBodyClusterListCluster {
	s.Description = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetIaasProvider(v string) *ListClusterResponseBodyClusterListCluster {
	s.IaasProvider = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetMem(v int) *ListClusterResponseBodyClusterListCluster {
	s.Mem = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetMemUsed(v int) *ListClusterResponseBodyClusterListCluster {
	s.MemUsed = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetNetworkMode(v int) *ListClusterResponseBodyClusterListCluster {
	s.NetworkMode = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetNodeNum(v int) *ListClusterResponseBodyClusterListCluster {
	s.NodeNum = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetOversoldFactor(v int) *ListClusterResponseBodyClusterListCluster {
	s.OversoldFactor = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetRegionId(v string) *ListClusterResponseBodyClusterListCluster {
	s.RegionId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetResourceGroupId(v string) *ListClusterResponseBodyClusterListCluster {
	s.ResourceGroupId = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetUpdateTime(v int64) *ListClusterResponseBodyClusterListCluster {
	s.UpdateTime = &v
	return s
}

func (s *ListClusterResponseBodyClusterListCluster) SetVpcId(v string) *ListClusterResponseBodyClusterListCluster {
	s.VpcId = &v
	return s
}

type ListClusterResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterResponse) GoString() string {
	return s.String()
}

func (s *ListClusterResponse) SetHeaders(v map[string]*string) *ListClusterResponse {
	s.Headers = v
	return s
}

func (s *ListClusterResponse) SetBody(v *ListClusterResponseBody) *ListClusterResponse {
	s.Body = v
	return s
}

type ListClusterMembersQuery struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	CurrentPage *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	EcsList     *string `json:"EcsList,omitempty" xml:"EcsList,omitempty"`
	PageSize    *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterMembersQuery) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersQuery) GoString() string {
	return s.String()
}

func (s *ListClusterMembersQuery) SetClusterId(v string) *ListClusterMembersQuery {
	s.ClusterId = &v
	return s
}

func (s *ListClusterMembersQuery) SetCurrentPage(v int) *ListClusterMembersQuery {
	s.CurrentPage = &v
	return s
}

func (s *ListClusterMembersQuery) SetEcsList(v string) *ListClusterMembersQuery {
	s.EcsList = &v
	return s
}

func (s *ListClusterMembersQuery) SetPageSize(v int) *ListClusterMembersQuery {
	s.PageSize = &v
	return s
}

type ListClusterMembersRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListClusterMembersQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListClusterMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersRequest) GoString() string {
	return s.String()
}

func (s *ListClusterMembersRequest) SetHeaders(v map[string]*string) *ListClusterMembersRequest {
	s.Headers = v
	return s
}

func (s *ListClusterMembersRequest) SetQuery(v *ListClusterMembersQuery) *ListClusterMembersRequest {
	s.Query = v
	return s
}

type ListClusterMembersResponseBody struct {
	Code              *int                                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message           *string                                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId         *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ClusterMemberPage *ListClusterMembersResponseBodyClusterMemberPage `json:"ClusterMemberPage,omitempty" xml:"ClusterMemberPage,omitempty" require:"true" type:"Struct"`
}

func (s ListClusterMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBody) SetCode(v int) *ListClusterMembersResponseBody {
	s.Code = &v
	return s
}

func (s *ListClusterMembersResponseBody) SetMessage(v string) *ListClusterMembersResponseBody {
	s.Message = &v
	return s
}

func (s *ListClusterMembersResponseBody) SetRequestId(v string) *ListClusterMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterMembersResponseBody) SetClusterMemberPage(v *ListClusterMembersResponseBodyClusterMemberPage) *ListClusterMembersResponseBody {
	s.ClusterMemberPage = v
	return s
}

type ListClusterMembersResponseBodyClusterMemberPage struct {
	CurrentPage       *int                                                              `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize          *int                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize         *int                                                              `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	ClusterMemberList *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList `json:"ClusterMemberList,omitempty" xml:"ClusterMemberList,omitempty" require:"true" type:"Struct"`
}

func (s ListClusterMembersResponseBodyClusterMemberPage) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBodyClusterMemberPage) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetCurrentPage(v int) *ListClusterMembersResponseBodyClusterMemberPage {
	s.CurrentPage = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetPageSize(v int) *ListClusterMembersResponseBodyClusterMemberPage {
	s.PageSize = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetTotalSize(v int) *ListClusterMembersResponseBodyClusterMemberPage {
	s.TotalSize = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPage) SetClusterMemberList(v *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) *ListClusterMembersResponseBodyClusterMemberPage {
	s.ClusterMemberList = v
	return s
}

type ListClusterMembersResponseBodyClusterMemberPageClusterMemberList struct {
	ClusterMember []*ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember `json:"ClusterMember,omitempty" xml:"ClusterMember,omitempty" require:"true" type:"Repeated"`
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList) SetClusterMember(v []*ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberList {
	s.ClusterMember = v
	return s
}

type ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterMemberId *string `json:"ClusterMemberId,omitempty" xml:"ClusterMemberId,omitempty" require:"true"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EcsId           *string `json:"EcsId,omitempty" xml:"EcsId,omitempty" require:"true"`
	EcuId           *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	Status          *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetClusterId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.ClusterId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetClusterMemberId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.ClusterMemberId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetCreateTime(v int64) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.CreateTime = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetEcsId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.EcsId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetEcuId(v string) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.EcuId = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetStatus(v int) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.Status = &v
	return s
}

func (s *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember) SetUpdateTime(v int64) *ListClusterMembersResponseBodyClusterMemberPageClusterMemberListClusterMember {
	s.UpdateTime = &v
	return s
}

type ListClusterMembersResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterMembersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterMembersResponse) GoString() string {
	return s.String()
}

func (s *ListClusterMembersResponse) SetHeaders(v map[string]*string) *ListClusterMembersResponse {
	s.Headers = v
	return s
}

func (s *ListClusterMembersResponse) SetBody(v *ListClusterMembersResponseBody) *ListClusterMembersResponse {
	s.Body = v
	return s
}

type ListComponentsRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListComponentsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsRequest) GoString() string {
	return s.String()
}

func (s *ListComponentsRequest) SetHeaders(v map[string]*string) *ListComponentsRequest {
	s.Headers = v
	return s
}

type ListComponentsResponseBody struct {
	Code          *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	ComponentList *ListComponentsResponseBodyComponentList `json:"ComponentList,omitempty" xml:"ComponentList,omitempty" require:"true" type:"Struct"`
}

func (s ListComponentsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponseBody) GoString() string {
	return s.String()
}

func (s *ListComponentsResponseBody) SetCode(v int) *ListComponentsResponseBody {
	s.Code = &v
	return s
}

func (s *ListComponentsResponseBody) SetMessage(v string) *ListComponentsResponseBody {
	s.Message = &v
	return s
}

func (s *ListComponentsResponseBody) SetComponentList(v *ListComponentsResponseBodyComponentList) *ListComponentsResponseBody {
	s.ComponentList = v
	return s
}

type ListComponentsResponseBodyComponentList struct {
	Component []*ListComponentsResponseBodyComponentListComponent `json:"Component,omitempty" xml:"Component,omitempty" require:"true" type:"Repeated"`
}

func (s ListComponentsResponseBodyComponentList) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponseBodyComponentList) GoString() string {
	return s.String()
}

func (s *ListComponentsResponseBodyComponentList) SetComponent(v []*ListComponentsResponseBodyComponentListComponent) *ListComponentsResponseBodyComponentList {
	s.Component = v
	return s
}

type ListComponentsResponseBodyComponentListComponent struct {
	ComponentId  *string `json:"ComponentId,omitempty" xml:"ComponentId,omitempty" require:"true"`
	ComponentKey *string `json:"ComponentKey,omitempty" xml:"ComponentKey,omitempty" require:"true"`
	Desc         *string `json:"Desc,omitempty" xml:"Desc,omitempty" require:"true"`
	Expired      *bool   `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Version      *string `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
}

func (s ListComponentsResponseBodyComponentListComponent) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponseBodyComponentListComponent) GoString() string {
	return s.String()
}

func (s *ListComponentsResponseBodyComponentListComponent) SetComponentId(v string) *ListComponentsResponseBodyComponentListComponent {
	s.ComponentId = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetComponentKey(v string) *ListComponentsResponseBodyComponentListComponent {
	s.ComponentKey = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetDesc(v string) *ListComponentsResponseBodyComponentListComponent {
	s.Desc = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetExpired(v bool) *ListComponentsResponseBodyComponentListComponent {
	s.Expired = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetType(v string) *ListComponentsResponseBodyComponentListComponent {
	s.Type = &v
	return s
}

func (s *ListComponentsResponseBodyComponentListComponent) SetVersion(v string) *ListComponentsResponseBodyComponentListComponent {
	s.Version = &v
	return s
}

type ListComponentsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListComponentsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListComponentsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListComponentsResponse) GoString() string {
	return s.String()
}

func (s *ListComponentsResponse) SetHeaders(v map[string]*string) *ListComponentsResponse {
	s.Headers = v
	return s
}

func (s *ListComponentsResponse) SetBody(v *ListComponentsResponseBody) *ListComponentsResponse {
	s.Body = v
	return s
}

type ListConfigCentersQuery struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DataIdPattern   *string `json:"DataIdPattern,omitempty" xml:"DataIdPattern,omitempty"`
	Group           *string `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
}

func (s ListConfigCentersQuery) String() string {
	return tea.Prettify(s)
}

func (s ListConfigCentersQuery) GoString() string {
	return s.String()
}

func (s *ListConfigCentersQuery) SetAppName(v string) *ListConfigCentersQuery {
	s.AppName = &v
	return s
}

func (s *ListConfigCentersQuery) SetDataIdPattern(v string) *ListConfigCentersQuery {
	s.DataIdPattern = &v
	return s
}

func (s *ListConfigCentersQuery) SetGroup(v string) *ListConfigCentersQuery {
	s.Group = &v
	return s
}

func (s *ListConfigCentersQuery) SetLogicalRegionId(v string) *ListConfigCentersQuery {
	s.LogicalRegionId = &v
	return s
}

type ListConfigCentersRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListConfigCentersQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListConfigCentersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConfigCentersRequest) GoString() string {
	return s.String()
}

func (s *ListConfigCentersRequest) SetHeaders(v map[string]*string) *ListConfigCentersRequest {
	s.Headers = v
	return s
}

func (s *ListConfigCentersRequest) SetQuery(v *ListConfigCentersQuery) *ListConfigCentersRequest {
	s.Query = v
	return s
}

type ListConfigCentersResponseBody struct {
	Code              *int                                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message           *string                                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ConfigCentersList *ListConfigCentersResponseBodyConfigCentersList `json:"ConfigCentersList,omitempty" xml:"ConfigCentersList,omitempty" require:"true" type:"Struct"`
}

func (s ListConfigCentersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConfigCentersResponseBody) GoString() string {
	return s.String()
}

func (s *ListConfigCentersResponseBody) SetCode(v int) *ListConfigCentersResponseBody {
	s.Code = &v
	return s
}

func (s *ListConfigCentersResponseBody) SetMessage(v string) *ListConfigCentersResponseBody {
	s.Message = &v
	return s
}

func (s *ListConfigCentersResponseBody) SetRequestId(v string) *ListConfigCentersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConfigCentersResponseBody) SetConfigCentersList(v *ListConfigCentersResponseBodyConfigCentersList) *ListConfigCentersResponseBody {
	s.ConfigCentersList = v
	return s
}

type ListConfigCentersResponseBodyConfigCentersList struct {
	ListConfigCenters []*ListConfigCentersResponseBodyConfigCentersListListConfigCenters `json:"ListConfigCenters,omitempty" xml:"ListConfigCenters,omitempty" require:"true" type:"Repeated"`
}

func (s ListConfigCentersResponseBodyConfigCentersList) String() string {
	return tea.Prettify(s)
}

func (s ListConfigCentersResponseBodyConfigCentersList) GoString() string {
	return s.String()
}

func (s *ListConfigCentersResponseBodyConfigCentersList) SetListConfigCenters(v []*ListConfigCentersResponseBodyConfigCentersListListConfigCenters) *ListConfigCentersResponseBodyConfigCentersList {
	s.ListConfigCenters = v
	return s
}

type ListConfigCentersResponseBodyConfigCentersListListConfigCenters struct {
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	DataId  *string `json:"DataId,omitempty" xml:"DataId,omitempty" require:"true"`
	Group   *string `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s ListConfigCentersResponseBodyConfigCentersListListConfigCenters) String() string {
	return tea.Prettify(s)
}

func (s ListConfigCentersResponseBodyConfigCentersListListConfigCenters) GoString() string {
	return s.String()
}

func (s *ListConfigCentersResponseBodyConfigCentersListListConfigCenters) SetAppName(v string) *ListConfigCentersResponseBodyConfigCentersListListConfigCenters {
	s.AppName = &v
	return s
}

func (s *ListConfigCentersResponseBodyConfigCentersListListConfigCenters) SetDataId(v string) *ListConfigCentersResponseBodyConfigCentersListListConfigCenters {
	s.DataId = &v
	return s
}

func (s *ListConfigCentersResponseBodyConfigCentersListListConfigCenters) SetGroup(v string) *ListConfigCentersResponseBodyConfigCentersListListConfigCenters {
	s.Group = &v
	return s
}

func (s *ListConfigCentersResponseBodyConfigCentersListListConfigCenters) SetId(v string) *ListConfigCentersResponseBodyConfigCentersListListConfigCenters {
	s.Id = &v
	return s
}

type ListConfigCentersResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConfigCentersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConfigCentersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConfigCentersResponse) GoString() string {
	return s.String()
}

func (s *ListConfigCentersResponse) SetHeaders(v map[string]*string) *ListConfigCentersResponse {
	s.Headers = v
	return s
}

func (s *ListConfigCentersResponse) SetBody(v *ListConfigCentersResponseBody) *ListConfigCentersResponse {
	s.Body = v
	return s
}

type ListConfigTemplatesQuery struct {
	CurrentPage *int64  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageSize    *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListConfigTemplatesQuery) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesQuery) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesQuery) SetCurrentPage(v int64) *ListConfigTemplatesQuery {
	s.CurrentPage = &v
	return s
}

func (s *ListConfigTemplatesQuery) SetId(v int64) *ListConfigTemplatesQuery {
	s.Id = &v
	return s
}

func (s *ListConfigTemplatesQuery) SetName(v string) *ListConfigTemplatesQuery {
	s.Name = &v
	return s
}

func (s *ListConfigTemplatesQuery) SetPageSize(v int64) *ListConfigTemplatesQuery {
	s.PageSize = &v
	return s
}

type ListConfigTemplatesRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListConfigTemplatesQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListConfigTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesRequest) SetHeaders(v map[string]*string) *ListConfigTemplatesRequest {
	s.Headers = v
	return s
}

func (s *ListConfigTemplatesRequest) SetQuery(v *ListConfigTemplatesQuery) *ListConfigTemplatesRequest {
	s.Query = v
	return s
}

type ListConfigTemplatesResponseBody struct {
	Code      *int                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                              `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *ListConfigTemplatesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListConfigTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponseBody) SetCode(v int) *ListConfigTemplatesResponseBody {
	s.Code = &v
	return s
}

func (s *ListConfigTemplatesResponseBody) SetMessage(v string) *ListConfigTemplatesResponseBody {
	s.Message = &v
	return s
}

func (s *ListConfigTemplatesResponseBody) SetRequestId(v string) *ListConfigTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConfigTemplatesResponseBody) SetData(v *ListConfigTemplatesResponseBodyData) *ListConfigTemplatesResponseBody {
	s.Data = v
	return s
}

type ListConfigTemplatesResponseBodyData struct {
	CurrentPage *int                                         `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize    *int                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize   *int64                                       `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result      []*ListConfigTemplatesResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s ListConfigTemplatesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponseBodyData) SetCurrentPage(v int) *ListConfigTemplatesResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyData) SetPageSize(v int) *ListConfigTemplatesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyData) SetTotalSize(v int64) *ListConfigTemplatesResponseBodyData {
	s.TotalSize = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyData) SetResult(v []*ListConfigTemplatesResponseBodyDataResult) *ListConfigTemplatesResponseBodyData {
	s.Result = v
	return s
}

type ListConfigTemplatesResponseBodyDataResult struct {
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Format      *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty" require:"true"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty" require:"true"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s ListConfigTemplatesResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetContent(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Content = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetDescription(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Description = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetFormat(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Format = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetGmtCreate(v int64) *ListConfigTemplatesResponseBodyDataResult {
	s.GmtCreate = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetGmtModified(v int64) *ListConfigTemplatesResponseBodyDataResult {
	s.GmtModified = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetId(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *ListConfigTemplatesResponseBodyDataResult) SetName(v string) *ListConfigTemplatesResponseBodyDataResult {
	s.Name = &v
	return s
}

type ListConfigTemplatesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConfigTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConfigTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConfigTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListConfigTemplatesResponse) SetHeaders(v map[string]*string) *ListConfigTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListConfigTemplatesResponse) SetBody(v *ListConfigTemplatesResponseBody) *ListConfigTemplatesResponse {
	s.Body = v
	return s
}

type ListConsumedServicesQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s ListConsumedServicesQuery) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesQuery) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesQuery) SetAppId(v string) *ListConsumedServicesQuery {
	s.AppId = &v
	return s
}

type ListConsumedServicesRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListConsumedServicesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListConsumedServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesRequest) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesRequest) SetHeaders(v map[string]*string) *ListConsumedServicesRequest {
	s.Headers = v
	return s
}

func (s *ListConsumedServicesRequest) SetQuery(v *ListConsumedServicesQuery) *ListConsumedServicesRequest {
	s.Query = v
	return s
}

type ListConsumedServicesResponseBody struct {
	Code                 *int                                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message              *string                                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId            *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ConsumedServicesList *ListConsumedServicesResponseBodyConsumedServicesList `json:"ConsumedServicesList,omitempty" xml:"ConsumedServicesList,omitempty" require:"true" type:"Struct"`
}

func (s ListConsumedServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBody) SetCode(v int) *ListConsumedServicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetMessage(v string) *ListConsumedServicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetRequestId(v string) *ListConsumedServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConsumedServicesResponseBody) SetConsumedServicesList(v *ListConsumedServicesResponseBodyConsumedServicesList) *ListConsumedServicesResponseBody {
	s.ConsumedServicesList = v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesList struct {
	ListConsumedServices []*ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices `json:"ListConsumedServices,omitempty" xml:"ListConsumedServices,omitempty" require:"true" type:"Repeated"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesList) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesList) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesList) SetListConsumedServices(v []*ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) *ListConsumedServicesResponseBodyConsumedServicesList {
	s.ListConsumedServices = v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices struct {
	AppId             *string                                                                         `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	DockerApplication *bool                                                                           `json:"DockerApplication,omitempty" xml:"DockerApplication,omitempty" require:"true"`
	Group2Ip          *string                                                                         `json:"Group2Ip,omitempty" xml:"Group2Ip,omitempty" require:"true"`
	Name              *string                                                                         `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type              *string                                                                         `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Version           *string                                                                         `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Groups            *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups `json:"Groups,omitempty" xml:"Groups,omitempty" require:"true" type:"Struct"`
	Ips               *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps    `json:"Ips,omitempty" xml:"Ips,omitempty" require:"true" type:"Struct"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetAppId(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.AppId = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetDockerApplication(v bool) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.DockerApplication = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetGroup2Ip(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Group2Ip = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetName(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Name = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetType(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Type = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetVersion(v string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Version = &v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetGroups(v *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Groups = v
	return s
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices) SetIps(v *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServices {
	s.Ips = v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups struct {
	Group []*string `json:"group,omitempty" xml:"group,omitempty" require:"true" type:"Repeated"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups) SetGroup(v []*string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesGroups {
	s.Group = v
	return s
}

type ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps struct {
	Ip []*string `json:"ip,omitempty" xml:"ip,omitempty" require:"true" type:"Repeated"`
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps) SetIp(v []*string) *ListConsumedServicesResponseBodyConsumedServicesListListConsumedServicesIps {
	s.Ip = v
	return s
}

type ListConsumedServicesResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConsumedServicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConsumedServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConsumedServicesResponse) GoString() string {
	return s.String()
}

func (s *ListConsumedServicesResponse) SetHeaders(v map[string]*string) *ListConsumedServicesResponse {
	s.Headers = v
	return s
}

func (s *ListConsumedServicesResponse) SetBody(v *ListConsumedServicesResponseBody) *ListConsumedServicesResponse {
	s.Body = v
	return s
}

type ListConvertableEcuQuery struct {
	ClusterId *string `json:"clusterId,omitempty" xml:"clusterId,omitempty" require:"true"`
}

func (s ListConvertableEcuQuery) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuQuery) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuQuery) SetClusterId(v string) *ListConvertableEcuQuery {
	s.ClusterId = &v
	return s
}

type ListConvertableEcuRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListConvertableEcuQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListConvertableEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuRequest) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuRequest) SetHeaders(v map[string]*string) *ListConvertableEcuRequest {
	s.Headers = v
	return s
}

func (s *ListConvertableEcuRequest) SetQuery(v *ListConvertableEcuQuery) *ListConvertableEcuRequest {
	s.Query = v
	return s
}

type ListConvertableEcuResponseBody struct {
	Code         *int                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message      *string                                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	InstanceList *ListConvertableEcuResponseBodyInstanceList `json:"InstanceList,omitempty" xml:"InstanceList,omitempty" require:"true" type:"Struct"`
}

func (s ListConvertableEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponseBody) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponseBody) SetCode(v int) *ListConvertableEcuResponseBody {
	s.Code = &v
	return s
}

func (s *ListConvertableEcuResponseBody) SetMessage(v string) *ListConvertableEcuResponseBody {
	s.Message = &v
	return s
}

func (s *ListConvertableEcuResponseBody) SetRequestId(v string) *ListConvertableEcuResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListConvertableEcuResponseBody) SetInstanceList(v *ListConvertableEcuResponseBodyInstanceList) *ListConvertableEcuResponseBody {
	s.InstanceList = v
	return s
}

type ListConvertableEcuResponseBodyInstanceList struct {
	Instance []*ListConvertableEcuResponseBodyInstanceListInstance `json:"Instance,omitempty" xml:"Instance,omitempty" require:"true" type:"Repeated"`
}

func (s ListConvertableEcuResponseBodyInstanceList) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponseBodyInstanceList) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponseBodyInstanceList) SetInstance(v []*ListConvertableEcuResponseBodyInstanceListInstance) *ListConvertableEcuResponseBodyInstanceList {
	s.Instance = v
	return s
}

type ListConvertableEcuResponseBodyInstanceListInstance struct {
	Cpu          *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	EcuId        *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	Eip          *string `json:"Eip,omitempty" xml:"Eip,omitempty" require:"true"`
	Expired      *bool   `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	InnerIp      *string `json:"InnerIp,omitempty" xml:"InnerIp,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty" require:"true"`
	Mem          *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	PrivateIp    *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty" require:"true"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VpcName      *string `json:"VpcName,omitempty" xml:"VpcName,omitempty" require:"true"`
}

func (s ListConvertableEcuResponseBodyInstanceListInstance) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponseBodyInstanceListInstance) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetCpu(v int) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Cpu = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetEcuId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.EcuId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetEip(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Eip = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetExpired(v bool) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Expired = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetInnerIp(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.InnerIp = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetInstanceId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.InstanceId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetInstanceName(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.InstanceName = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetMem(v int) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Mem = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetPrivateIp(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.PrivateIp = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetPublicIp(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.PublicIp = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetRegionId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.RegionId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetStatus(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.Status = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetVpcId(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.VpcId = &v
	return s
}

func (s *ListConvertableEcuResponseBodyInstanceListInstance) SetVpcName(v string) *ListConvertableEcuResponseBodyInstanceListInstance {
	s.VpcName = &v
	return s
}

type ListConvertableEcuResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListConvertableEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListConvertableEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s ListConvertableEcuResponse) GoString() string {
	return s.String()
}

func (s *ListConvertableEcuResponse) SetHeaders(v map[string]*string) *ListConvertableEcuResponse {
	s.Headers = v
	return s
}

func (s *ListConvertableEcuResponse) SetBody(v *ListConvertableEcuResponseBody) *ListConvertableEcuResponse {
	s.Body = v
	return s
}

type ListDegradeControlsQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s ListDegradeControlsQuery) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsQuery) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsQuery) SetAppId(v string) *ListDegradeControlsQuery {
	s.AppId = &v
	return s
}

type ListDegradeControlsRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListDegradeControlsQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListDegradeControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsRequest) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsRequest) SetHeaders(v map[string]*string) *ListDegradeControlsRequest {
	s.Headers = v
	return s
}

func (s *ListDegradeControlsRequest) SetQuery(v *ListDegradeControlsQuery) *ListDegradeControlsRequest {
	s.Query = v
	return s
}

type ListDegradeControlsResponseBody struct {
	Code            *int                                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	FlowControlsMap *ListDegradeControlsResponseBodyFlowControlsMap `json:"FlowControlsMap,omitempty" xml:"FlowControlsMap,omitempty" require:"true" type:"Struct"`
}

func (s ListDegradeControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBody) SetCode(v int) *ListDegradeControlsResponseBody {
	s.Code = &v
	return s
}

func (s *ListDegradeControlsResponseBody) SetMessage(v string) *ListDegradeControlsResponseBody {
	s.Message = &v
	return s
}

func (s *ListDegradeControlsResponseBody) SetRequestId(v string) *ListDegradeControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDegradeControlsResponseBody) SetFlowControlsMap(v *ListDegradeControlsResponseBodyFlowControlsMap) *ListDegradeControlsResponseBody {
	s.FlowControlsMap = v
	return s
}

type ListDegradeControlsResponseBodyFlowControlsMap struct {
	AppId            *string                                                         `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName          *string                                                         `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	InterfaceMethods *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethods `json:"InterfaceMethods,omitempty" xml:"InterfaceMethods,omitempty" require:"true" type:"Struct"`
	RuleList         *ListDegradeControlsResponseBodyFlowControlsMapRuleList         `json:"RuleList,omitempty" xml:"RuleList,omitempty" require:"true" type:"Struct"`
}

func (s ListDegradeControlsResponseBodyFlowControlsMap) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBodyFlowControlsMap) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBodyFlowControlsMap) SetAppId(v string) *ListDegradeControlsResponseBodyFlowControlsMap {
	s.AppId = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMap) SetAppName(v string) *ListDegradeControlsResponseBodyFlowControlsMap {
	s.AppName = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMap) SetInterfaceMethods(v *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethods) *ListDegradeControlsResponseBodyFlowControlsMap {
	s.InterfaceMethods = v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMap) SetRuleList(v *ListDegradeControlsResponseBodyFlowControlsMapRuleList) *ListDegradeControlsResponseBodyFlowControlsMap {
	s.RuleList = v
	return s
}

type ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethods struct {
	InterfaceMethod []*ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod `json:"InterfaceMethod,omitempty" xml:"InterfaceMethod,omitempty" require:"true" type:"Repeated"`
}

func (s ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethods) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethods) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethods) SetInterfaceMethod(v []*ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethods {
	s.InterfaceMethod = v
	return s
}

type ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod struct {
	Version *string                                                                               `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Name    *string                                                                               `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	Methods *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods `json:"Methods,omitempty" xml:"Methods,omitempty" require:"true" type:"Struct"`
}

func (s ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) SetVersion(v string) *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod {
	s.Version = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) SetName(v string) *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod {
	s.Name = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) SetMethods(v *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod {
	s.Methods = v
	return s
}

type ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods struct {
	Method []*string `json:"Method,omitempty" xml:"Method,omitempty" require:"true" type:"Repeated"`
}

func (s ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) SetMethod(v []*string) *ListDegradeControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods {
	s.Method = v
	return s
}

type ListDegradeControlsResponseBodyFlowControlsMapRuleList struct {
	CurrentPage    *int                                                                  `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	TotalSize      *int                                                                  `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	PageSize       *int                                                                  `json:"pageSize,omitempty" xml:"pageSize,omitempty" require:"true"`
	RuleResultList *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultList `json:"RuleResultList,omitempty" xml:"RuleResultList,omitempty" require:"true" type:"Struct"`
}

func (s ListDegradeControlsResponseBodyFlowControlsMapRuleList) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBodyFlowControlsMapRuleList) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleList) SetCurrentPage(v int) *ListDegradeControlsResponseBodyFlowControlsMapRuleList {
	s.CurrentPage = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleList) SetTotalSize(v int) *ListDegradeControlsResponseBodyFlowControlsMapRuleList {
	s.TotalSize = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleList) SetPageSize(v int) *ListDegradeControlsResponseBodyFlowControlsMapRuleList {
	s.PageSize = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleList) SetRuleResultList(v *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultList) *ListDegradeControlsResponseBodyFlowControlsMapRuleList {
	s.RuleResultList = v
	return s
}

type ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultList struct {
	Rule []*ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule `json:"Rule,omitempty" xml:"Rule,omitempty" require:"true" type:"Repeated"`
}

func (s ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultList) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultList) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultList) SetRule(v []*ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultList {
	s.Rule = v
	return s
}

type ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Duration    *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	Resource    *string `json:"Resource,omitempty" xml:"Resource,omitempty" require:"true"`
	RtThreshold *int    `json:"RtThreshold,omitempty" xml:"RtThreshold,omitempty" require:"true"`
	RuleId      *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	RuleType    *string `json:"RuleType,omitempty" xml:"RuleType,omitempty" require:"true"`
	State       *int    `json:"State,omitempty" xml:"State,omitempty" require:"true"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
}

func (s ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetAppId(v string) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.AppId = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetCreateTime(v int64) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.CreateTime = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetDuration(v int) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.Duration = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetResource(v string) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.Resource = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetRtThreshold(v int) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.RtThreshold = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetRuleId(v string) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.RuleId = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetRuleType(v string) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.RuleType = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetState(v int) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.State = &v
	return s
}

func (s *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetUpdateTime(v int64) *ListDegradeControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.UpdateTime = &v
	return s
}

type ListDegradeControlsResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDegradeControlsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDegradeControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDegradeControlsResponse) GoString() string {
	return s.String()
}

func (s *ListDegradeControlsResponse) SetHeaders(v map[string]*string) *ListDegradeControlsResponse {
	s.Headers = v
	return s
}

func (s *ListDegradeControlsResponse) SetBody(v *ListDegradeControlsResponseBody) *ListDegradeControlsResponse {
	s.Body = v
	return s
}

type ListDeployGroupQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s ListDeployGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupQuery) GoString() string {
	return s.String()
}

func (s *ListDeployGroupQuery) SetAppId(v string) *ListDeployGroupQuery {
	s.AppId = &v
	return s
}

type ListDeployGroupRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListDeployGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListDeployGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupRequest) GoString() string {
	return s.String()
}

func (s *ListDeployGroupRequest) SetHeaders(v map[string]*string) *ListDeployGroupRequest {
	s.Headers = v
	return s
}

func (s *ListDeployGroupRequest) SetQuery(v *ListDeployGroupQuery) *ListDeployGroupRequest {
	s.Query = v
	return s
}

type ListDeployGroupResponseBody struct {
	Code            *int                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	DeployGroupList *ListDeployGroupResponseBodyDeployGroupList `json:"DeployGroupList,omitempty" xml:"DeployGroupList,omitempty" require:"true" type:"Struct"`
}

func (s ListDeployGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponseBody) SetCode(v int) *ListDeployGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListDeployGroupResponseBody) SetMessage(v string) *ListDeployGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListDeployGroupResponseBody) SetRequestId(v string) *ListDeployGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDeployGroupResponseBody) SetDeployGroupList(v *ListDeployGroupResponseBodyDeployGroupList) *ListDeployGroupResponseBody {
	s.DeployGroupList = v
	return s
}

type ListDeployGroupResponseBodyDeployGroupList struct {
	DeployGroup []*ListDeployGroupResponseBodyDeployGroupListDeployGroup `json:"DeployGroup,omitempty" xml:"DeployGroup,omitempty" require:"true" type:"Repeated"`
}

func (s ListDeployGroupResponseBodyDeployGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponseBodyDeployGroupList) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponseBodyDeployGroupList) SetDeployGroup(v []*ListDeployGroupResponseBodyDeployGroupListDeployGroup) *ListDeployGroupResponseBodyDeployGroupList {
	s.DeployGroup = v
	return s
}

type ListDeployGroupResponseBodyDeployGroupListDeployGroup struct {
	AppId                 *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppVersionId          *string `json:"AppVersionId,omitempty" xml:"AppVersionId,omitempty" require:"true"`
	BaseComponentMetaName *string `json:"BaseComponentMetaName,omitempty" xml:"BaseComponentMetaName,omitempty" require:"true"`
	ClusterId             *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterName           *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	CpuLimit              *string `json:"CpuLimit,omitempty" xml:"CpuLimit,omitempty" require:"true"`
	CpuRequest            *string `json:"CpuRequest,omitempty" xml:"CpuRequest,omitempty" require:"true"`
	CreateTime            *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	CsClusterId           *string `json:"CsClusterId,omitempty" xml:"CsClusterId,omitempty" require:"true"`
	DeploymentName        *string `json:"DeploymentName,omitempty" xml:"DeploymentName,omitempty" require:"true"`
	Env                   *string `json:"Env,omitempty" xml:"Env,omitempty" require:"true"`
	GroupId               *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName             *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	GroupType             *int    `json:"GroupType,omitempty" xml:"GroupType,omitempty" require:"true"`
	Labels                *string `json:"Labels,omitempty" xml:"Labels,omitempty" require:"true"`
	LastUpdateTime        *int64  `json:"LastUpdateTime,omitempty" xml:"LastUpdateTime,omitempty" require:"true"`
	MemoryLimit           *string `json:"MemoryLimit,omitempty" xml:"MemoryLimit,omitempty" require:"true"`
	MemoryRequest         *string `json:"MemoryRequest,omitempty" xml:"MemoryRequest,omitempty" require:"true"`
	NameSpace             *string `json:"NameSpace,omitempty" xml:"NameSpace,omitempty" require:"true"`
	PackagePublicUrl      *string `json:"PackagePublicUrl,omitempty" xml:"PackagePublicUrl,omitempty" require:"true"`
	PackageUrl            *string `json:"PackageUrl,omitempty" xml:"PackageUrl,omitempty" require:"true"`
	PackageVersion        *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true"`
	PackageVersionId      *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty" require:"true"`
	PostStart             *string `json:"PostStart,omitempty" xml:"PostStart,omitempty" require:"true"`
	PreStop               *string `json:"PreStop,omitempty" xml:"PreStop,omitempty" require:"true"`
	Reversion             *string `json:"Reversion,omitempty" xml:"Reversion,omitempty" require:"true"`
	Selector              *string `json:"Selector,omitempty" xml:"Selector,omitempty" require:"true"`
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Strategy              *string `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
	UpdateTime            *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	VExtServerGroupId     *string `json:"VExtServerGroupId,omitempty" xml:"VExtServerGroupId,omitempty" require:"true"`
	VServerGroupId        *string `json:"VServerGroupId,omitempty" xml:"VServerGroupId,omitempty" require:"true"`
}

func (s ListDeployGroupResponseBodyDeployGroupListDeployGroup) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponseBodyDeployGroupListDeployGroup) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetAppId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.AppId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetAppVersionId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.AppVersionId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetBaseComponentMetaName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.BaseComponentMetaName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetClusterId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.ClusterId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetClusterName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.ClusterName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCpuLimit(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CpuLimit = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCpuRequest(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CpuRequest = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCreateTime(v int64) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CreateTime = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetCsClusterId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.CsClusterId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetDeploymentName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.DeploymentName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetEnv(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Env = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetGroupId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.GroupId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetGroupName(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.GroupName = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetGroupType(v int) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.GroupType = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetLabels(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Labels = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetLastUpdateTime(v int64) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.LastUpdateTime = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetMemoryLimit(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.MemoryLimit = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetMemoryRequest(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.MemoryRequest = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetNameSpace(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.NameSpace = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackagePublicUrl(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackagePublicUrl = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackageUrl(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackageUrl = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackageVersion(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackageVersion = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPackageVersionId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PackageVersionId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPostStart(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PostStart = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetPreStop(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.PreStop = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetReversion(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Reversion = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetSelector(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Selector = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetStatus(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Status = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetStrategy(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.Strategy = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetUpdateTime(v int64) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.UpdateTime = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetVExtServerGroupId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.VExtServerGroupId = &v
	return s
}

func (s *ListDeployGroupResponseBodyDeployGroupListDeployGroup) SetVServerGroupId(v string) *ListDeployGroupResponseBodyDeployGroupListDeployGroup {
	s.VServerGroupId = &v
	return s
}

type ListDeployGroupResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDeployGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDeployGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDeployGroupResponse) GoString() string {
	return s.String()
}

func (s *ListDeployGroupResponse) SetHeaders(v map[string]*string) *ListDeployGroupResponse {
	s.Headers = v
	return s
}

func (s *ListDeployGroupResponse) SetBody(v *ListDeployGroupResponseBody) *ListDeployGroupResponse {
	s.Body = v
	return s
}

type ListEcsNotInClusterQuery struct {
	NetworkMode *int    `json:"NetworkMode,omitempty" xml:"NetworkMode,omitempty" require:"true"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListEcsNotInClusterQuery) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterQuery) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterQuery) SetNetworkMode(v int) *ListEcsNotInClusterQuery {
	s.NetworkMode = &v
	return s
}

func (s *ListEcsNotInClusterQuery) SetVpcId(v string) *ListEcsNotInClusterQuery {
	s.VpcId = &v
	return s
}

type ListEcsNotInClusterRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListEcsNotInClusterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListEcsNotInClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterRequest) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterRequest) SetHeaders(v map[string]*string) *ListEcsNotInClusterRequest {
	s.Headers = v
	return s
}

func (s *ListEcsNotInClusterRequest) SetQuery(v *ListEcsNotInClusterQuery) *ListEcsNotInClusterRequest {
	s.Query = v
	return s
}

type ListEcsNotInClusterResponseBody struct {
	Code          *int                                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string                                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EcsEntityList *ListEcsNotInClusterResponseBodyEcsEntityList `json:"EcsEntityList,omitempty" xml:"EcsEntityList,omitempty" require:"true" type:"Struct"`
}

func (s ListEcsNotInClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponseBody) SetCode(v int) *ListEcsNotInClusterResponseBody {
	s.Code = &v
	return s
}

func (s *ListEcsNotInClusterResponseBody) SetMessage(v string) *ListEcsNotInClusterResponseBody {
	s.Message = &v
	return s
}

func (s *ListEcsNotInClusterResponseBody) SetRequestId(v string) *ListEcsNotInClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEcsNotInClusterResponseBody) SetEcsEntityList(v *ListEcsNotInClusterResponseBodyEcsEntityList) *ListEcsNotInClusterResponseBody {
	s.EcsEntityList = v
	return s
}

type ListEcsNotInClusterResponseBodyEcsEntityList struct {
	EcsEntity []*ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity `json:"EcsEntity,omitempty" xml:"EcsEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListEcsNotInClusterResponseBodyEcsEntityList) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponseBodyEcsEntityList) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityList) SetEcsEntity(v []*ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) *ListEcsNotInClusterResponseBodyEcsEntityList {
	s.EcsEntity = v
	return s
}

type ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity struct {
	Cpu          *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	Eip          *string `json:"Eip,omitempty" xml:"Eip,omitempty" require:"true"`
	Expired      *bool   `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	InnerIp      *string `json:"InnerIp,omitempty" xml:"InnerIp,omitempty" require:"true"`
	InstanceId   *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty" require:"true"`
	Mem          *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	PrivateIp    *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty" require:"true"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	VpcId        *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VpcName      *string `json:"VpcName,omitempty" xml:"VpcName,omitempty" require:"true"`
}

func (s ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetCpu(v int) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Cpu = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetEip(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Eip = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetExpired(v bool) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Expired = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetInnerIp(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.InnerIp = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetInstanceId(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.InstanceId = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetInstanceName(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.InstanceName = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetMem(v int) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Mem = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetPrivateIp(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.PrivateIp = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetPublicIp(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.PublicIp = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetRegionId(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.RegionId = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetStatus(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.Status = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetVpcId(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.VpcId = &v
	return s
}

func (s *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity) SetVpcName(v string) *ListEcsNotInClusterResponseBodyEcsEntityListEcsEntity {
	s.VpcName = &v
	return s
}

type ListEcsNotInClusterResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEcsNotInClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEcsNotInClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEcsNotInClusterResponse) GoString() string {
	return s.String()
}

func (s *ListEcsNotInClusterResponse) SetHeaders(v map[string]*string) *ListEcsNotInClusterResponse {
	s.Headers = v
	return s
}

func (s *ListEcsNotInClusterResponse) SetBody(v *ListEcsNotInClusterResponseBody) *ListEcsNotInClusterResponse {
	s.Body = v
	return s
}

type ListEcuByRegionQuery struct {
	Act             *string `json:"Act,omitempty" xml:"Act,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s ListEcuByRegionQuery) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionQuery) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionQuery) SetAct(v string) *ListEcuByRegionQuery {
	s.Act = &v
	return s
}

func (s *ListEcuByRegionQuery) SetLogicalRegionId(v string) *ListEcuByRegionQuery {
	s.LogicalRegionId = &v
	return s
}

type ListEcuByRegionRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListEcuByRegionQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListEcuByRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionRequest) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionRequest) SetHeaders(v map[string]*string) *ListEcuByRegionRequest {
	s.Headers = v
	return s
}

func (s *ListEcuByRegionRequest) SetQuery(v *ListEcuByRegionQuery) *ListEcuByRegionRequest {
	s.Query = v
	return s
}

type ListEcuByRegionResponseBody struct {
	Code          *int                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EcuEntityList *ListEcuByRegionResponseBodyEcuEntityList `json:"EcuEntityList,omitempty" xml:"EcuEntityList,omitempty" require:"true" type:"Struct"`
}

func (s ListEcuByRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponseBody) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponseBody) SetCode(v int) *ListEcuByRegionResponseBody {
	s.Code = &v
	return s
}

func (s *ListEcuByRegionResponseBody) SetMessage(v string) *ListEcuByRegionResponseBody {
	s.Message = &v
	return s
}

func (s *ListEcuByRegionResponseBody) SetRequestId(v string) *ListEcuByRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEcuByRegionResponseBody) SetEcuEntityList(v *ListEcuByRegionResponseBodyEcuEntityList) *ListEcuByRegionResponseBody {
	s.EcuEntityList = v
	return s
}

type ListEcuByRegionResponseBodyEcuEntityList struct {
	EcuEntity []*ListEcuByRegionResponseBodyEcuEntityListEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListEcuByRegionResponseBodyEcuEntityList) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponseBodyEcuEntityList) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponseBodyEcuEntityList) SetEcuEntity(v []*ListEcuByRegionResponseBodyEcuEntityListEcuEntity) *ListEcuByRegionResponseBodyEcuEntityList {
	s.EcuEntity = v
	return s
}

type ListEcuByRegionResponseBodyEcuEntityListEcuEntity struct {
	AvailableCpu  *int    `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty" require:"true"`
	AvailableMem  *int    `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty" require:"true"`
	Cpu           *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty" require:"true"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty" require:"true"`
	Mem           *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s ListEcuByRegionResponseBodyEcuEntityListEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponseBodyEcuEntityListEcuEntity) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetAvailableCpu(v int) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetAvailableMem(v int) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetCpu(v int) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Cpu = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetCreateTime(v int64) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetDockerEnv(v bool) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetEcuId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.EcuId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetHeartbeatTime(v int64) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetInstanceId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetIpAddr(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetMem(v int) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Mem = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetName(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Name = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetOnline(v bool) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.Online = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetRegionId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.RegionId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetUpdateTime(v int64) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetUserId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.UserId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetVpcId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.VpcId = &v
	return s
}

func (s *ListEcuByRegionResponseBodyEcuEntityListEcuEntity) SetZoneId(v string) *ListEcuByRegionResponseBodyEcuEntityListEcuEntity {
	s.ZoneId = &v
	return s
}

type ListEcuByRegionResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEcuByRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEcuByRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEcuByRegionResponse) GoString() string {
	return s.String()
}

func (s *ListEcuByRegionResponse) SetHeaders(v map[string]*string) *ListEcuByRegionResponse {
	s.Headers = v
	return s
}

func (s *ListEcuByRegionResponse) SetBody(v *ListEcuByRegionResponseBody) *ListEcuByRegionResponse {
	s.Body = v
	return s
}

type ListFlowControlsQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s ListFlowControlsQuery) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsQuery) GoString() string {
	return s.String()
}

func (s *ListFlowControlsQuery) SetAppId(v string) *ListFlowControlsQuery {
	s.AppId = &v
	return s
}

type ListFlowControlsRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListFlowControlsQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListFlowControlsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsRequest) GoString() string {
	return s.String()
}

func (s *ListFlowControlsRequest) SetHeaders(v map[string]*string) *ListFlowControlsRequest {
	s.Headers = v
	return s
}

func (s *ListFlowControlsRequest) SetQuery(v *ListFlowControlsQuery) *ListFlowControlsRequest {
	s.Query = v
	return s
}

type ListFlowControlsResponseBody struct {
	Code            *int                                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                      `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	FlowControlsMap *ListFlowControlsResponseBodyFlowControlsMap `json:"FlowControlsMap,omitempty" xml:"FlowControlsMap,omitempty" require:"true" type:"Struct"`
}

func (s ListFlowControlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBody) SetCode(v int) *ListFlowControlsResponseBody {
	s.Code = &v
	return s
}

func (s *ListFlowControlsResponseBody) SetMessage(v string) *ListFlowControlsResponseBody {
	s.Message = &v
	return s
}

func (s *ListFlowControlsResponseBody) SetRequestId(v string) *ListFlowControlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowControlsResponseBody) SetFlowControlsMap(v *ListFlowControlsResponseBodyFlowControlsMap) *ListFlowControlsResponseBody {
	s.FlowControlsMap = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMap struct {
	AppId            *string                                                      `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName          *string                                                      `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	AppList          *ListFlowControlsResponseBodyFlowControlsMapAppList          `json:"AppList,omitempty" xml:"AppList,omitempty" require:"true" type:"Struct"`
	InterfaceMethods *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethods `json:"InterfaceMethods,omitempty" xml:"InterfaceMethods,omitempty" require:"true" type:"Struct"`
	RuleList         *ListFlowControlsResponseBodyFlowControlsMapRuleList         `json:"RuleList,omitempty" xml:"RuleList,omitempty" require:"true" type:"Struct"`
}

func (s ListFlowControlsResponseBodyFlowControlsMap) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMap) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMap) SetAppId(v string) *ListFlowControlsResponseBodyFlowControlsMap {
	s.AppId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMap) SetAppName(v string) *ListFlowControlsResponseBodyFlowControlsMap {
	s.AppName = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMap) SetAppList(v *ListFlowControlsResponseBodyFlowControlsMapAppList) *ListFlowControlsResponseBodyFlowControlsMap {
	s.AppList = v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMap) SetInterfaceMethods(v *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethods) *ListFlowControlsResponseBodyFlowControlsMap {
	s.InterfaceMethods = v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMap) SetRuleList(v *ListFlowControlsResponseBodyFlowControlsMapRuleList) *ListFlowControlsResponseBodyFlowControlsMap {
	s.RuleList = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapAppList struct {
	App []*ListFlowControlsResponseBodyFlowControlsMapAppListApp `json:"App,omitempty" xml:"App,omitempty" require:"true" type:"Repeated"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapAppList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapAppList) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppList) SetApp(v []*ListFlowControlsResponseBodyFlowControlsMapAppListApp) *ListFlowControlsResponseBodyFlowControlsMapAppList {
	s.App = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapAppListApp struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ApplicationType      *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty" require:"true"`
	BuildPackageId       *int64  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty" require:"true"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterType          *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Cpu                  *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime           *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Dockerize            *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty" require:"true"`
	ExtSlbId             *string `json:"ExtSlbId,omitempty" xml:"ExtSlbId,omitempty" require:"true"`
	ExtSlbIp             *string `json:"ExtSlbIp,omitempty" xml:"ExtSlbIp,omitempty" require:"true"`
	HealthCheckUrl       *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty" require:"true"`
	InstanceCount        *int    `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty" require:"true"`
	Memory               *int    `json:"Memory,omitempty" xml:"Memory,omitempty" require:"true"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Owner                *string `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	Port                 *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RunningInstanceCount *int    `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty" require:"true"`
	SlbId                *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	SlbIp                *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty" require:"true"`
	SlbPort              *int    `json:"SlbPort,omitempty" xml:"SlbPort,omitempty" require:"true"`
	UserId               *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapAppListApp) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapAppListApp) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetAppId(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.AppId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetApplicationType(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.ApplicationType = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetBuildPackageId(v int64) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.BuildPackageId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetClusterId(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.ClusterId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetClusterType(v int) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.ClusterType = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetCpu(v int) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.Cpu = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetCreateTime(v int64) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.CreateTime = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetDescription(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.Description = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetDockerize(v bool) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.Dockerize = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetExtSlbId(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.ExtSlbId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetExtSlbIp(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.ExtSlbIp = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetHealthCheckUrl(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.HealthCheckUrl = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetInstanceCount(v int) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.InstanceCount = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetMemory(v int) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.Memory = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetName(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.Name = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetOwner(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.Owner = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetPort(v int) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.Port = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetRegionId(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.RegionId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetRunningInstanceCount(v int) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.RunningInstanceCount = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetSlbId(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.SlbId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetSlbIp(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.SlbIp = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetSlbPort(v int) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.SlbPort = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapAppListApp) SetUserId(v string) *ListFlowControlsResponseBodyFlowControlsMapAppListApp {
	s.UserId = &v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapInterfaceMethods struct {
	InterfaceMethod []*ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod `json:"InterfaceMethod,omitempty" xml:"InterfaceMethod,omitempty" require:"true" type:"Repeated"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapInterfaceMethods) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapInterfaceMethods) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethods) SetInterfaceMethod(v []*ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethods {
	s.InterfaceMethod = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod struct {
	Version *string                                                                            `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Name    *string                                                                            `json:"name,omitempty" xml:"name,omitempty" require:"true"`
	Methods *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods `json:"Methods,omitempty" xml:"Methods,omitempty" require:"true" type:"Struct"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) SetVersion(v string) *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod {
	s.Version = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) SetName(v string) *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod {
	s.Name = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod) SetMethods(v *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethod {
	s.Methods = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods struct {
	Method []*string `json:"Method,omitempty" xml:"Method,omitempty" require:"true" type:"Repeated"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods) SetMethod(v []*string) *ListFlowControlsResponseBodyFlowControlsMapInterfaceMethodsInterfaceMethodMethods {
	s.Method = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapRuleList struct {
	CurrentPage    *int                                                               `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	TotalSize      *int                                                               `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	PageSize       *int                                                               `json:"pageSize,omitempty" xml:"pageSize,omitempty" require:"true"`
	RuleResultList *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultList `json:"RuleResultList,omitempty" xml:"RuleResultList,omitempty" require:"true" type:"Struct"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapRuleList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapRuleList) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleList) SetCurrentPage(v int) *ListFlowControlsResponseBodyFlowControlsMapRuleList {
	s.CurrentPage = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleList) SetTotalSize(v int) *ListFlowControlsResponseBodyFlowControlsMapRuleList {
	s.TotalSize = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleList) SetPageSize(v int) *ListFlowControlsResponseBodyFlowControlsMapRuleList {
	s.PageSize = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleList) SetRuleResultList(v *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultList) *ListFlowControlsResponseBodyFlowControlsMapRuleList {
	s.RuleResultList = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultList struct {
	Rule []*ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule `json:"Rule,omitempty" xml:"Rule,omitempty" require:"true" type:"Repeated"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultList) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultList) SetRule(v []*ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultList {
	s.Rule = v
	return s
}

type ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ConsumerAppId *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Granularity   *string `json:"Granularity,omitempty" xml:"Granularity,omitempty" require:"true"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Resource      *string `json:"Resource,omitempty" xml:"Resource,omitempty" require:"true"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	RuleType      *string `json:"RuleType,omitempty" xml:"RuleType,omitempty" require:"true"`
	State         *int    `json:"State,omitempty" xml:"State,omitempty" require:"true"`
	Strategy      *string `json:"Strategy,omitempty" xml:"Strategy,omitempty" require:"true"`
	Threshold     *int    `json:"Threshold,omitempty" xml:"Threshold,omitempty" require:"true"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
}

func (s ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetAppId(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.AppId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetConsumerAppId(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.ConsumerAppId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetCreateTime(v int64) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.CreateTime = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetGranularity(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.Granularity = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetId(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.Id = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetResource(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.Resource = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetRuleId(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.RuleId = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetRuleType(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.RuleType = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetState(v int) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.State = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetStrategy(v string) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.Strategy = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetThreshold(v int) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.Threshold = &v
	return s
}

func (s *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule) SetUpdateTime(v int64) *ListFlowControlsResponseBodyFlowControlsMapRuleListRuleResultListRule {
	s.UpdateTime = &v
	return s
}

type ListFlowControlsResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowControlsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowControlsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowControlsResponse) GoString() string {
	return s.String()
}

func (s *ListFlowControlsResponse) SetHeaders(v map[string]*string) *ListFlowControlsResponse {
	s.Headers = v
	return s
}

func (s *ListFlowControlsResponse) SetBody(v *ListFlowControlsResponseBody) *ListFlowControlsResponse {
	s.Body = v
	return s
}

type ListHistoryDeployVersionQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s ListHistoryDeployVersionQuery) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionQuery) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionQuery) SetAppId(v string) *ListHistoryDeployVersionQuery {
	s.AppId = &v
	return s
}

type ListHistoryDeployVersionRequest struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListHistoryDeployVersionQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListHistoryDeployVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionRequest) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionRequest) SetHeaders(v map[string]*string) *ListHistoryDeployVersionRequest {
	s.Headers = v
	return s
}

func (s *ListHistoryDeployVersionRequest) SetQuery(v *ListHistoryDeployVersionQuery) *ListHistoryDeployVersionRequest {
	s.Query = v
	return s
}

type ListHistoryDeployVersionResponseBody struct {
	Code               *int                                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message            *string                                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId          *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PackageVersionList *ListHistoryDeployVersionResponseBodyPackageVersionList `json:"PackageVersionList,omitempty" xml:"PackageVersionList,omitempty" require:"true" type:"Struct"`
}

func (s ListHistoryDeployVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponseBody) SetCode(v int) *ListHistoryDeployVersionResponseBody {
	s.Code = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBody) SetMessage(v string) *ListHistoryDeployVersionResponseBody {
	s.Message = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBody) SetRequestId(v string) *ListHistoryDeployVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBody) SetPackageVersionList(v *ListHistoryDeployVersionResponseBodyPackageVersionList) *ListHistoryDeployVersionResponseBody {
	s.PackageVersionList = v
	return s
}

type ListHistoryDeployVersionResponseBodyPackageVersionList struct {
	PackageVersion []*ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true" type:"Repeated"`
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionList) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionList) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionList) SetPackageVersion(v []*ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) *ListHistoryDeployVersionResponseBodyPackageVersionList {
	s.PackageVersion = v
	return s
}

type ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true"`
	PublicUrl      *string `json:"PublicUrl,omitempty" xml:"PublicUrl,omitempty" require:"true"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	UpdateTime     *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	WarUrl         *string `json:"WarUrl,omitempty" xml:"WarUrl,omitempty" require:"true"`
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetAppId(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.AppId = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetCreateTime(v int64) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.CreateTime = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetDescription(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.Description = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetId(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.Id = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetPackageVersion(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.PackageVersion = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetPublicUrl(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.PublicUrl = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetType(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.Type = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetUpdateTime(v int64) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.UpdateTime = &v
	return s
}

func (s *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion) SetWarUrl(v string) *ListHistoryDeployVersionResponseBodyPackageVersionListPackageVersion {
	s.WarUrl = &v
	return s
}

type ListHistoryDeployVersionResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListHistoryDeployVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListHistoryDeployVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListHistoryDeployVersionResponse) GoString() string {
	return s.String()
}

func (s *ListHistoryDeployVersionResponse) SetHeaders(v map[string]*string) *ListHistoryDeployVersionResponse {
	s.Headers = v
	return s
}

func (s *ListHistoryDeployVersionResponse) SetBody(v *ListHistoryDeployVersionResponseBody) *ListHistoryDeployVersionResponse {
	s.Body = v
	return s
}

type ListK8sConfigMapsQuery struct {
	ClusterId       *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Condition       map[string]interface{} `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Namespace       *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageNo          *int                   `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize        *int                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ShowRelatedApps *bool                  `json:"ShowRelatedApps,omitempty" xml:"ShowRelatedApps,omitempty"`
}

func (s ListK8sConfigMapsQuery) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsQuery) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsQuery) SetClusterId(v string) *ListK8sConfigMapsQuery {
	s.ClusterId = &v
	return s
}

func (s *ListK8sConfigMapsQuery) SetCondition(v map[string]interface{}) *ListK8sConfigMapsQuery {
	s.Condition = v
	return s
}

func (s *ListK8sConfigMapsQuery) SetNamespace(v string) *ListK8sConfigMapsQuery {
	s.Namespace = &v
	return s
}

func (s *ListK8sConfigMapsQuery) SetPageNo(v int) *ListK8sConfigMapsQuery {
	s.PageNo = &v
	return s
}

func (s *ListK8sConfigMapsQuery) SetPageSize(v int) *ListK8sConfigMapsQuery {
	s.PageSize = &v
	return s
}

func (s *ListK8sConfigMapsQuery) SetRegionId(v string) *ListK8sConfigMapsQuery {
	s.RegionId = &v
	return s
}

func (s *ListK8sConfigMapsQuery) SetShowRelatedApps(v bool) *ListK8sConfigMapsQuery {
	s.ShowRelatedApps = &v
	return s
}

type ListK8sConfigMapsShrinkQuery struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ConditionShrink *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageNo          *int    `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ShowRelatedApps *bool   `json:"ShowRelatedApps,omitempty" xml:"ShowRelatedApps,omitempty"`
}

func (s ListK8sConfigMapsShrinkQuery) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsShrinkQuery) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsShrinkQuery) SetClusterId(v string) *ListK8sConfigMapsShrinkQuery {
	s.ClusterId = &v
	return s
}

func (s *ListK8sConfigMapsShrinkQuery) SetConditionShrink(v string) *ListK8sConfigMapsShrinkQuery {
	s.ConditionShrink = &v
	return s
}

func (s *ListK8sConfigMapsShrinkQuery) SetNamespace(v string) *ListK8sConfigMapsShrinkQuery {
	s.Namespace = &v
	return s
}

func (s *ListK8sConfigMapsShrinkQuery) SetPageNo(v int) *ListK8sConfigMapsShrinkQuery {
	s.PageNo = &v
	return s
}

func (s *ListK8sConfigMapsShrinkQuery) SetPageSize(v int) *ListK8sConfigMapsShrinkQuery {
	s.PageSize = &v
	return s
}

func (s *ListK8sConfigMapsShrinkQuery) SetRegionId(v string) *ListK8sConfigMapsShrinkQuery {
	s.RegionId = &v
	return s
}

func (s *ListK8sConfigMapsShrinkQuery) SetShowRelatedApps(v bool) *ListK8sConfigMapsShrinkQuery {
	s.ShowRelatedApps = &v
	return s
}

type ListK8sConfigMapsRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListK8sConfigMapsQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListK8sConfigMapsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsRequest) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsRequest) SetHeaders(v map[string]*string) *ListK8sConfigMapsRequest {
	s.Headers = v
	return s
}

func (s *ListK8sConfigMapsRequest) SetQuery(v *ListK8sConfigMapsQuery) *ListK8sConfigMapsRequest {
	s.Query = v
	return s
}

type ListK8sConfigMapsShrinkRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListK8sConfigMapsShrinkQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListK8sConfigMapsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsShrinkRequest) SetHeaders(v map[string]*string) *ListK8sConfigMapsShrinkRequest {
	s.Headers = v
	return s
}

func (s *ListK8sConfigMapsShrinkRequest) SetQuery(v *ListK8sConfigMapsShrinkQuery) *ListK8sConfigMapsShrinkRequest {
	s.Query = v
	return s
}

type ListK8sConfigMapsResponseBody struct {
	Code      *int                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Result    []*ListK8sConfigMapsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sConfigMapsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBody) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBody) SetCode(v int) *ListK8sConfigMapsResponseBody {
	s.Code = &v
	return s
}

func (s *ListK8sConfigMapsResponseBody) SetMessage(v string) *ListK8sConfigMapsResponseBody {
	s.Message = &v
	return s
}

func (s *ListK8sConfigMapsResponseBody) SetRequestId(v string) *ListK8sConfigMapsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListK8sConfigMapsResponseBody) SetResult(v []*ListK8sConfigMapsResponseBodyResult) *ListK8sConfigMapsResponseBody {
	s.Result = v
	return s
}

type ListK8sConfigMapsResponseBodyResult struct {
	Total      *int                                             `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	ConfigMaps []*ListK8sConfigMapsResponseBodyResultConfigMaps `json:"ConfigMaps,omitempty" xml:"ConfigMaps,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sConfigMapsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResult) SetTotal(v int) *ListK8sConfigMapsResponseBodyResult {
	s.Total = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResult) SetConfigMaps(v []*ListK8sConfigMapsResponseBodyResultConfigMaps) *ListK8sConfigMapsResponseBodyResult {
	s.ConfigMaps = v
	return s
}

type ListK8sConfigMapsResponseBodyResultConfigMaps struct {
	ClusterId    *string                                                     `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterName  *string                                                     `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	CreationTime *string                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Name         *string                                                     `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace    *string                                                     `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	Data         []*ListK8sConfigMapsResponseBodyResultConfigMapsData        `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
	RelatedApps  []*ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps `json:"RelatedApps,omitempty" xml:"RelatedApps,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sConfigMapsResponseBodyResultConfigMaps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResultConfigMaps) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetClusterId(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.ClusterId = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetClusterName(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.ClusterName = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetCreationTime(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.CreationTime = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetName(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.Name = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetNamespace(v string) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.Namespace = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetData(v []*ListK8sConfigMapsResponseBodyResultConfigMapsData) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.Data = v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMaps) SetRelatedApps(v []*ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) *ListK8sConfigMapsResponseBodyResultConfigMaps {
	s.RelatedApps = v
	return s
}

type ListK8sConfigMapsResponseBodyResultConfigMapsData struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsData) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsData) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsData) SetKey(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsData {
	s.Key = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsData) SetValue(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsData {
	s.Value = &v
	return s
}

type ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) SetAppId(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps {
	s.AppId = &v
	return s
}

func (s *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps) SetAppName(v string) *ListK8sConfigMapsResponseBodyResultConfigMapsRelatedApps {
	s.AppName = &v
	return s
}

type ListK8sConfigMapsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListK8sConfigMapsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListK8sConfigMapsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListK8sConfigMapsResponse) GoString() string {
	return s.String()
}

func (s *ListK8sConfigMapsResponse) SetHeaders(v map[string]*string) *ListK8sConfigMapsResponse {
	s.Headers = v
	return s
}

func (s *ListK8sConfigMapsResponse) SetBody(v *ListK8sConfigMapsResponseBody) *ListK8sConfigMapsResponse {
	s.Body = v
	return s
}

type ListK8sIngressRulesQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Condition *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
}

func (s ListK8sIngressRulesQuery) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesQuery) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesQuery) SetClusterId(v string) *ListK8sIngressRulesQuery {
	s.ClusterId = &v
	return s
}

func (s *ListK8sIngressRulesQuery) SetCondition(v string) *ListK8sIngressRulesQuery {
	s.Condition = &v
	return s
}

func (s *ListK8sIngressRulesQuery) SetNamespace(v string) *ListK8sIngressRulesQuery {
	s.Namespace = &v
	return s
}

func (s *ListK8sIngressRulesQuery) SetRegionId(v string) *ListK8sIngressRulesQuery {
	s.RegionId = &v
	return s
}

type ListK8sIngressRulesRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListK8sIngressRulesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListK8sIngressRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesRequest) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesRequest) SetHeaders(v map[string]*string) *ListK8sIngressRulesRequest {
	s.Headers = v
	return s
}

func (s *ListK8sIngressRulesRequest) SetQuery(v *ListK8sIngressRulesQuery) *ListK8sIngressRulesRequest {
	s.Query = v
	return s
}

type ListK8sIngressRulesResponseBody struct {
	Code      *int                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      []*ListK8sIngressRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sIngressRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBody) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBody) SetCode(v int) *ListK8sIngressRulesResponseBody {
	s.Code = &v
	return s
}

func (s *ListK8sIngressRulesResponseBody) SetMessage(v string) *ListK8sIngressRulesResponseBody {
	s.Message = &v
	return s
}

func (s *ListK8sIngressRulesResponseBody) SetRequestId(v string) *ListK8sIngressRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListK8sIngressRulesResponseBody) SetData(v []*ListK8sIngressRulesResponseBodyData) *ListK8sIngressRulesResponseBody {
	s.Data = v
	return s
}

type ListK8sIngressRulesResponseBodyData struct {
	ClusterId    *string                                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterName  *string                                            `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	RegionId     *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	IngressConfs []*ListK8sIngressRulesResponseBodyDataIngressConfs `json:"IngressConfs,omitempty" xml:"IngressConfs,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sIngressRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyData) SetClusterId(v string) *ListK8sIngressRulesResponseBodyData {
	s.ClusterId = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyData) SetClusterName(v string) *ListK8sIngressRulesResponseBodyData {
	s.ClusterName = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyData) SetRegionId(v string) *ListK8sIngressRulesResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyData) SetIngressConfs(v []*ListK8sIngressRulesResponseBodyDataIngressConfs) *ListK8sIngressRulesResponseBodyData {
	s.IngressConfs = v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfs struct {
	CreationTime *string                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	DashboardUrl *string                                                 `json:"DashboardUrl,omitempty" xml:"DashboardUrl,omitempty" require:"true"`
	Endpoint     *string                                                 `json:"Endpoint,omitempty" xml:"Endpoint,omitempty" require:"true"`
	Name         *string                                                 `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace    *string                                                 `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	SslRedirect  *bool                                                   `json:"SslRedirect,omitempty" xml:"SslRedirect,omitempty" require:"true"`
	Rules        []*ListK8sIngressRulesResponseBodyDataIngressConfsRules `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfs) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfs) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetCreationTime(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.CreationTime = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetDashboardUrl(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.DashboardUrl = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetEndpoint(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Endpoint = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Name = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetNamespace(v string) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Namespace = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetSslRedirect(v bool) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.SslRedirect = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfs) SetRules(v []*ListK8sIngressRulesResponseBodyDataIngressConfsRules) *ListK8sIngressRulesResponseBodyDataIngressConfs {
	s.Rules = v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfsRules struct {
	Host       *string                                                      `json:"Host,omitempty" xml:"Host,omitempty" require:"true"`
	SecretName *string                                                      `json:"SecretName,omitempty" xml:"SecretName,omitempty" require:"true"`
	Paths      []*ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths `json:"Paths,omitempty" xml:"Paths,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRules) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRules) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRules) SetHost(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRules {
	s.Host = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRules) SetSecretName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRules {
	s.SecretName = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRules) SetPaths(v []*ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) *ListK8sIngressRulesResponseBodyDataIngressConfsRules {
	s.Paths = v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths struct {
	AppId   *string                                                           `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string                                                           `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	Path    *string                                                           `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	Status  *string                                                           `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	Backend *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend `json:"Backend,omitempty" xml:"Backend,omitempty" require:"true" type:"Struct"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetAppId(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.AppId = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetAppName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.AppName = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetPath(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.Path = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetStatus(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.Status = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths) SetBackend(v *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPaths {
	s.Backend = v
	return s
}

type ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend struct {
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	ServicePort *string `json:"ServicePort,omitempty" xml:"ServicePort,omitempty" require:"true"`
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) SetServiceName(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend {
	s.ServiceName = &v
	return s
}

func (s *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend) SetServicePort(v string) *ListK8sIngressRulesResponseBodyDataIngressConfsRulesPathsBackend {
	s.ServicePort = &v
	return s
}

type ListK8sIngressRulesResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListK8sIngressRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListK8sIngressRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListK8sIngressRulesResponse) GoString() string {
	return s.String()
}

func (s *ListK8sIngressRulesResponse) SetHeaders(v map[string]*string) *ListK8sIngressRulesResponse {
	s.Headers = v
	return s
}

func (s *ListK8sIngressRulesResponse) SetBody(v *ListK8sIngressRulesResponseBody) *ListK8sIngressRulesResponse {
	s.Body = v
	return s
}

type ListK8sPvcQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s ListK8sPvcQuery) String() string {
	return tea.Prettify(s)
}

func (s ListK8sPvcQuery) GoString() string {
	return s.String()
}

func (s *ListK8sPvcQuery) SetClusterId(v string) *ListK8sPvcQuery {
	s.ClusterId = &v
	return s
}

func (s *ListK8sPvcQuery) SetNamespace(v string) *ListK8sPvcQuery {
	s.Namespace = &v
	return s
}

type ListK8sPvcRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListK8sPvcQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListK8sPvcRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sPvcRequest) GoString() string {
	return s.String()
}

func (s *ListK8sPvcRequest) SetHeaders(v map[string]*string) *ListK8sPvcRequest {
	s.Headers = v
	return s
}

func (s *ListK8sPvcRequest) SetQuery(v *ListK8sPvcQuery) *ListK8sPvcRequest {
	s.Query = v
	return s
}

type ListK8sPvcResponseBody struct {
	Code       *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message    *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	K8sPvcList []*ListK8sPvcResponseBodyK8sPvcList `json:"K8sPvcList,omitempty" xml:"K8sPvcList,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sPvcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListK8sPvcResponseBody) GoString() string {
	return s.String()
}

func (s *ListK8sPvcResponseBody) SetCode(v int) *ListK8sPvcResponseBody {
	s.Code = &v
	return s
}

func (s *ListK8sPvcResponseBody) SetMessage(v string) *ListK8sPvcResponseBody {
	s.Message = &v
	return s
}

func (s *ListK8sPvcResponseBody) SetRequestId(v string) *ListK8sPvcResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListK8sPvcResponseBody) SetK8sPvcList(v []*ListK8sPvcResponseBodyK8sPvcList) *ListK8sPvcResponseBody {
	s.K8sPvcList = v
	return s
}

type ListK8sPvcResponseBodyK8sPvcList struct {
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace    *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	VolumeMode   *string `json:"VolumeMode,omitempty" xml:"VolumeMode,omitempty" require:"true"`
	VolumeName   *string `json:"VolumeName,omitempty" xml:"VolumeName,omitempty" require:"true"`
}

func (s ListK8sPvcResponseBodyK8sPvcList) String() string {
	return tea.Prettify(s)
}

func (s ListK8sPvcResponseBodyK8sPvcList) GoString() string {
	return s.String()
}

func (s *ListK8sPvcResponseBodyK8sPvcList) SetCreationTime(v string) *ListK8sPvcResponseBodyK8sPvcList {
	s.CreationTime = &v
	return s
}

func (s *ListK8sPvcResponseBodyK8sPvcList) SetName(v string) *ListK8sPvcResponseBodyK8sPvcList {
	s.Name = &v
	return s
}

func (s *ListK8sPvcResponseBodyK8sPvcList) SetNamespace(v string) *ListK8sPvcResponseBodyK8sPvcList {
	s.Namespace = &v
	return s
}

func (s *ListK8sPvcResponseBodyK8sPvcList) SetVolumeMode(v string) *ListK8sPvcResponseBodyK8sPvcList {
	s.VolumeMode = &v
	return s
}

func (s *ListK8sPvcResponseBodyK8sPvcList) SetVolumeName(v string) *ListK8sPvcResponseBodyK8sPvcList {
	s.VolumeName = &v
	return s
}

type ListK8sPvcResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListK8sPvcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListK8sPvcResponse) String() string {
	return tea.Prettify(s)
}

func (s ListK8sPvcResponse) GoString() string {
	return s.String()
}

func (s *ListK8sPvcResponse) SetHeaders(v map[string]*string) *ListK8sPvcResponse {
	s.Headers = v
	return s
}

func (s *ListK8sPvcResponse) SetBody(v *ListK8sPvcResponseBody) *ListK8sPvcResponse {
	s.Body = v
	return s
}

type ListK8sSecretsQuery struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Condition       *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	PageNo          *int    `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize        *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ShowRelatedApps *bool   `json:"ShowRelatedApps,omitempty" xml:"ShowRelatedApps,omitempty"`
}

func (s ListK8sSecretsQuery) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsQuery) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsQuery) SetClusterId(v string) *ListK8sSecretsQuery {
	s.ClusterId = &v
	return s
}

func (s *ListK8sSecretsQuery) SetCondition(v string) *ListK8sSecretsQuery {
	s.Condition = &v
	return s
}

func (s *ListK8sSecretsQuery) SetNamespace(v string) *ListK8sSecretsQuery {
	s.Namespace = &v
	return s
}

func (s *ListK8sSecretsQuery) SetPageNo(v int) *ListK8sSecretsQuery {
	s.PageNo = &v
	return s
}

func (s *ListK8sSecretsQuery) SetPageSize(v int) *ListK8sSecretsQuery {
	s.PageSize = &v
	return s
}

func (s *ListK8sSecretsQuery) SetRegionId(v string) *ListK8sSecretsQuery {
	s.RegionId = &v
	return s
}

func (s *ListK8sSecretsQuery) SetShowRelatedApps(v bool) *ListK8sSecretsQuery {
	s.ShowRelatedApps = &v
	return s
}

type ListK8sSecretsRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListK8sSecretsQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListK8sSecretsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsRequest) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsRequest) SetHeaders(v map[string]*string) *ListK8sSecretsRequest {
	s.Headers = v
	return s
}

func (s *ListK8sSecretsRequest) SetQuery(v *ListK8sSecretsQuery) *ListK8sSecretsRequest {
	s.Query = v
	return s
}

type ListK8sSecretsResponseBody struct {
	Code      *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Result    []*ListK8sSecretsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sSecretsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBody) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBody) SetCode(v int) *ListK8sSecretsResponseBody {
	s.Code = &v
	return s
}

func (s *ListK8sSecretsResponseBody) SetMessage(v string) *ListK8sSecretsResponseBody {
	s.Message = &v
	return s
}

func (s *ListK8sSecretsResponseBody) SetRequestId(v string) *ListK8sSecretsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListK8sSecretsResponseBody) SetResult(v []*ListK8sSecretsResponseBodyResult) *ListK8sSecretsResponseBody {
	s.Result = v
	return s
}

type ListK8sSecretsResponseBodyResult struct {
	Total   *int                                       `json:"Total,omitempty" xml:"Total,omitempty" require:"true"`
	Secrets []*ListK8sSecretsResponseBodyResultSecrets `json:"Secrets,omitempty" xml:"Secrets,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sSecretsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResult) SetTotal(v int) *ListK8sSecretsResponseBodyResult {
	s.Total = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResult) SetSecrets(v []*ListK8sSecretsResponseBodyResultSecrets) *ListK8sSecretsResponseBodyResult {
	s.Secrets = v
	return s
}

type ListK8sSecretsResponseBodyResultSecrets struct {
	Base64Encoded       *bool                                                         `json:"Base64Encoded,omitempty" xml:"Base64Encoded,omitempty" require:"true"`
	CertId              *string                                                       `json:"CertId,omitempty" xml:"CertId,omitempty" require:"true"`
	CertRegionId        *string                                                       `json:"CertRegionId,omitempty" xml:"CertRegionId,omitempty" require:"true"`
	ClusterId           *string                                                       `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterName         *string                                                       `json:"ClusterName,omitempty" xml:"ClusterName,omitempty" require:"true"`
	CreationTime        *string                                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty" require:"true"`
	Name                *string                                                       `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace           *string                                                       `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	Type                *string                                                       `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Data                []*ListK8sSecretsResponseBodyResultSecretsData                `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
	RelatedApps         []*ListK8sSecretsResponseBodyResultSecretsRelatedApps         `json:"RelatedApps,omitempty" xml:"RelatedApps,omitempty" require:"true" type:"Repeated"`
	RelatedIngressRules []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules `json:"RelatedIngressRules,omitempty" xml:"RelatedIngressRules,omitempty" require:"true" type:"Repeated"`
	CertDetail          *ListK8sSecretsResponseBodyResultSecretsCertDetail            `json:"CertDetail,omitempty" xml:"CertDetail,omitempty" require:"true" type:"Struct"`
}

func (s ListK8sSecretsResponseBodyResultSecrets) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecrets) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetBase64Encoded(v bool) *ListK8sSecretsResponseBodyResultSecrets {
	s.Base64Encoded = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCertId(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.CertId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCertRegionId(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.CertRegionId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetClusterId(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.ClusterId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetClusterName(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.ClusterName = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCreationTime(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.CreationTime = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetName(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.Name = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetNamespace(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.Namespace = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetType(v string) *ListK8sSecretsResponseBodyResultSecrets {
	s.Type = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetData(v []*ListK8sSecretsResponseBodyResultSecretsData) *ListK8sSecretsResponseBodyResultSecrets {
	s.Data = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetRelatedApps(v []*ListK8sSecretsResponseBodyResultSecretsRelatedApps) *ListK8sSecretsResponseBodyResultSecrets {
	s.RelatedApps = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetRelatedIngressRules(v []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) *ListK8sSecretsResponseBodyResultSecrets {
	s.RelatedIngressRules = v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecrets) SetCertDetail(v *ListK8sSecretsResponseBodyResultSecretsCertDetail) *ListK8sSecretsResponseBodyResultSecrets {
	s.CertDetail = v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsData struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
}

func (s ListK8sSecretsResponseBodyResultSecretsData) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsData) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsData) SetKey(v string) *ListK8sSecretsResponseBodyResultSecretsData {
	s.Key = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsData) SetValue(v string) *ListK8sSecretsResponseBodyResultSecretsData {
	s.Value = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsRelatedApps struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedApps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedApps) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedApps) SetAppId(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedApps {
	s.AppId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedApps) SetAppName(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedApps {
	s.AppName = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules struct {
	Name        *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace   *string                                                                  `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	RelatedApps []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps `json:"RelatedApps,omitempty" xml:"RelatedApps,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) SetName(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules {
	s.Name = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) SetNamespace(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules {
	s.Namespace = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules) SetRelatedApps(v []*ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRules {
	s.RelatedApps = v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) SetAppId(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps {
	s.AppId = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps) SetAppName(v string) *ListK8sSecretsResponseBodyResultSecretsRelatedIngressRulesRelatedApps {
	s.AppName = &v
	return s
}

type ListK8sSecretsResponseBodyResultSecretsCertDetail struct {
	EndTime     *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	Issuer      *string   `json:"Issuer,omitempty" xml:"Issuer,omitempty" require:"true"`
	KeySize     *int      `json:"KeySize,omitempty" xml:"KeySize,omitempty" require:"true"`
	StartTime   *string   `json:"StartTime,omitempty" xml:"StartTime,omitempty" require:"true"`
	Status      *string   `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	DomainNames []*string `json:"DomainNames,omitempty" xml:"DomainNames,omitempty" require:"true" type:"Repeated"`
}

func (s ListK8sSecretsResponseBodyResultSecretsCertDetail) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponseBodyResultSecretsCertDetail) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetEndTime(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.EndTime = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetIssuer(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.Issuer = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetKeySize(v int) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.KeySize = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetStartTime(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.StartTime = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetStatus(v string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.Status = &v
	return s
}

func (s *ListK8sSecretsResponseBodyResultSecretsCertDetail) SetDomainNames(v []*string) *ListK8sSecretsResponseBodyResultSecretsCertDetail {
	s.DomainNames = v
	return s
}

type ListK8sSecretsResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListK8sSecretsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListK8sSecretsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListK8sSecretsResponse) GoString() string {
	return s.String()
}

func (s *ListK8sSecretsResponse) SetHeaders(v map[string]*string) *ListK8sSecretsResponse {
	s.Headers = v
	return s
}

func (s *ListK8sSecretsResponse) SetBody(v *ListK8sSecretsResponseBody) *ListK8sSecretsResponse {
	s.Body = v
	return s
}

type ListMethodsQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
}

func (s ListMethodsQuery) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsQuery) GoString() string {
	return s.String()
}

func (s *ListMethodsQuery) SetAppId(v string) *ListMethodsQuery {
	s.AppId = &v
	return s
}

func (s *ListMethodsQuery) SetServiceName(v string) *ListMethodsQuery {
	s.ServiceName = &v
	return s
}

type ListMethodsRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListMethodsQuery  `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListMethodsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsRequest) GoString() string {
	return s.String()
}

func (s *ListMethodsRequest) SetHeaders(v map[string]*string) *ListMethodsRequest {
	s.Headers = v
	return s
}

func (s *ListMethodsRequest) SetQuery(v *ListMethodsQuery) *ListMethodsRequest {
	s.Query = v
	return s
}

type ListMethodsResponseBody struct {
	Code              *int                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message           *string                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId         *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ServiceMethodList *ListMethodsResponseBodyServiceMethodList `json:"ServiceMethodList,omitempty" xml:"ServiceMethodList,omitempty" require:"true" type:"Struct"`
}

func (s ListMethodsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBody) SetCode(v int) *ListMethodsResponseBody {
	s.Code = &v
	return s
}

func (s *ListMethodsResponseBody) SetMessage(v string) *ListMethodsResponseBody {
	s.Message = &v
	return s
}

func (s *ListMethodsResponseBody) SetRequestId(v string) *ListMethodsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMethodsResponseBody) SetServiceMethodList(v *ListMethodsResponseBodyServiceMethodList) *ListMethodsResponseBody {
	s.ServiceMethodList = v
	return s
}

type ListMethodsResponseBodyServiceMethodList struct {
	ServiceMethod []*ListMethodsResponseBodyServiceMethodListServiceMethod `json:"ServiceMethod,omitempty" xml:"ServiceMethod,omitempty" require:"true" type:"Repeated"`
}

func (s ListMethodsResponseBodyServiceMethodList) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodList) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodList) SetServiceMethod(v []*ListMethodsResponseBodyServiceMethodListServiceMethod) *ListMethodsResponseBodyServiceMethodList {
	s.ServiceMethod = v
	return s
}

type ListMethodsResponseBodyServiceMethodListServiceMethod struct {
	AppName     *string                                                           `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	MethodName  *string                                                           `json:"MethodName,omitempty" xml:"MethodName,omitempty" require:"true"`
	Output      *string                                                           `json:"Output,omitempty" xml:"Output,omitempty" require:"true"`
	ServiceName *string                                                           `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	InputParams *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams `json:"InputParams,omitempty" xml:"InputParams,omitempty" require:"true" type:"Struct"`
	ParamTypes  *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes  `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty" require:"true" type:"Struct"`
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethod) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethod) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetAppName(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.AppName = &v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetMethodName(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.MethodName = &v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetOutput(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.Output = &v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetServiceName(v string) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.ServiceName = &v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetInputParams(v *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.InputParams = v
	return s
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethod) SetParamTypes(v *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) *ListMethodsResponseBodyServiceMethodListServiceMethod {
	s.ParamTypes = v
	return s
}

type ListMethodsResponseBodyServiceMethodListServiceMethodInputParams struct {
	InputParam []*string `json:"InputParam,omitempty" xml:"InputParam,omitempty" require:"true" type:"Repeated"`
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams) SetInputParam(v []*string) *ListMethodsResponseBodyServiceMethodListServiceMethodInputParams {
	s.InputParam = v
	return s
}

type ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes struct {
	ParamType []*string `json:"ParamType,omitempty" xml:"ParamType,omitempty" require:"true" type:"Repeated"`
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) GoString() string {
	return s.String()
}

func (s *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes) SetParamType(v []*string) *ListMethodsResponseBodyServiceMethodListServiceMethodParamTypes {
	s.ParamType = v
	return s
}

type ListMethodsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMethodsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMethodsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMethodsResponse) GoString() string {
	return s.String()
}

func (s *ListMethodsResponse) SetHeaders(v map[string]*string) *ListMethodsResponse {
	s.Headers = v
	return s
}

func (s *ListMethodsResponse) SetBody(v *ListMethodsResponseBody) *ListMethodsResponse {
	s.Body = v
	return s
}

type ListOperationLogsQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	BeginTime   *int64  `json:"BeginTime,omitempty" xml:"BeginTime,omitempty"`
	CurrentPage *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	EndTime     *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize    *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListOperationLogsQuery) String() string {
	return tea.Prettify(s)
}

func (s ListOperationLogsQuery) GoString() string {
	return s.String()
}

func (s *ListOperationLogsQuery) SetAppId(v string) *ListOperationLogsQuery {
	s.AppId = &v
	return s
}

func (s *ListOperationLogsQuery) SetBeginTime(v int64) *ListOperationLogsQuery {
	s.BeginTime = &v
	return s
}

func (s *ListOperationLogsQuery) SetCurrentPage(v int) *ListOperationLogsQuery {
	s.CurrentPage = &v
	return s
}

func (s *ListOperationLogsQuery) SetEndTime(v int64) *ListOperationLogsQuery {
	s.EndTime = &v
	return s
}

func (s *ListOperationLogsQuery) SetPageSize(v int) *ListOperationLogsQuery {
	s.PageSize = &v
	return s
}

func (s *ListOperationLogsQuery) SetUserId(v string) *ListOperationLogsQuery {
	s.UserId = &v
	return s
}

type ListOperationLogsRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListOperationLogsQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListOperationLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOperationLogsRequest) GoString() string {
	return s.String()
}

func (s *ListOperationLogsRequest) SetHeaders(v map[string]*string) *ListOperationLogsRequest {
	s.Headers = v
	return s
}

func (s *ListOperationLogsRequest) SetQuery(v *ListOperationLogsQuery) *ListOperationLogsRequest {
	s.Query = v
	return s
}

type ListOperationLogsResponseBody struct {
	Code        *int                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	CurrentPage *int                                    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	Message     *string                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	PageSize    *int                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalSize   *int                                    `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	LogList     []*ListOperationLogsResponseBodyLogList `json:"LogList,omitempty" xml:"LogList,omitempty" require:"true" type:"Repeated"`
}

func (s ListOperationLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOperationLogsResponseBody) GoString() string {
	return s.String()
}

func (s *ListOperationLogsResponseBody) SetCode(v int) *ListOperationLogsResponseBody {
	s.Code = &v
	return s
}

func (s *ListOperationLogsResponseBody) SetCurrentPage(v int) *ListOperationLogsResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *ListOperationLogsResponseBody) SetMessage(v string) *ListOperationLogsResponseBody {
	s.Message = &v
	return s
}

func (s *ListOperationLogsResponseBody) SetPageSize(v int) *ListOperationLogsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListOperationLogsResponseBody) SetRequestId(v string) *ListOperationLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOperationLogsResponseBody) SetTotalSize(v int) *ListOperationLogsResponseBody {
	s.TotalSize = &v
	return s
}

func (s *ListOperationLogsResponseBody) SetLogList(v []*ListOperationLogsResponseBodyLogList) *ListOperationLogsResponseBody {
	s.LogList = v
	return s
}

type ListOperationLogsResponseBodyLogList struct {
	ActionGroup     *string `json:"ActionGroup,omitempty" xml:"ActionGroup,omitempty" require:"true"`
	ActionName      *string `json:"ActionName,omitempty" xml:"ActionName,omitempty" require:"true"`
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	BeginTime       *int64  `json:"BeginTime,omitempty" xml:"BeginTime,omitempty" require:"true"`
	EndTime         *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty" require:"true"`
	ExtraParameters *string `json:"ExtraParameters,omitempty" xml:"ExtraParameters,omitempty" require:"true"`
	Message         *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	OperatorId      *string `json:"OperatorId,omitempty" xml:"OperatorId,omitempty" require:"true"`
	OperatorName    *string `json:"OperatorName,omitempty" xml:"OperatorName,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
}

func (s ListOperationLogsResponseBodyLogList) String() string {
	return tea.Prettify(s)
}

func (s ListOperationLogsResponseBodyLogList) GoString() string {
	return s.String()
}

func (s *ListOperationLogsResponseBodyLogList) SetActionGroup(v string) *ListOperationLogsResponseBodyLogList {
	s.ActionGroup = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetActionName(v string) *ListOperationLogsResponseBodyLogList {
	s.ActionName = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetAppId(v string) *ListOperationLogsResponseBodyLogList {
	s.AppId = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetBeginTime(v int64) *ListOperationLogsResponseBodyLogList {
	s.BeginTime = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetEndTime(v int64) *ListOperationLogsResponseBodyLogList {
	s.EndTime = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetExtraParameters(v string) *ListOperationLogsResponseBodyLogList {
	s.ExtraParameters = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetMessage(v string) *ListOperationLogsResponseBodyLogList {
	s.Message = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetOperatorId(v string) *ListOperationLogsResponseBodyLogList {
	s.OperatorId = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetOperatorName(v string) *ListOperationLogsResponseBodyLogList {
	s.OperatorName = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetSource(v string) *ListOperationLogsResponseBodyLogList {
	s.Source = &v
	return s
}

func (s *ListOperationLogsResponseBodyLogList) SetStatus(v string) *ListOperationLogsResponseBodyLogList {
	s.Status = &v
	return s
}

type ListOperationLogsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListOperationLogsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListOperationLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOperationLogsResponse) GoString() string {
	return s.String()
}

func (s *ListOperationLogsResponse) SetHeaders(v map[string]*string) *ListOperationLogsResponse {
	s.Headers = v
	return s
}

func (s *ListOperationLogsResponse) SetBody(v *ListOperationLogsResponseBody) *ListOperationLogsResponse {
	s.Body = v
	return s
}

type ListPublishedServicesQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s ListPublishedServicesQuery) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesQuery) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesQuery) SetAppId(v string) *ListPublishedServicesQuery {
	s.AppId = &v
	return s
}

type ListPublishedServicesRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListPublishedServicesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListPublishedServicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesRequest) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesRequest) SetHeaders(v map[string]*string) *ListPublishedServicesRequest {
	s.Headers = v
	return s
}

func (s *ListPublishedServicesRequest) SetQuery(v *ListPublishedServicesQuery) *ListPublishedServicesRequest {
	s.Query = v
	return s
}

type ListPublishedServicesResponseBody struct {
	Code                  *int                                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message               *string                                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId             *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	PublishedServicesList *ListPublishedServicesResponseBodyPublishedServicesList `json:"PublishedServicesList,omitempty" xml:"PublishedServicesList,omitempty" require:"true" type:"Struct"`
}

func (s ListPublishedServicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBody) SetCode(v int) *ListPublishedServicesResponseBody {
	s.Code = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetMessage(v string) *ListPublishedServicesResponseBody {
	s.Message = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetRequestId(v string) *ListPublishedServicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPublishedServicesResponseBody) SetPublishedServicesList(v *ListPublishedServicesResponseBodyPublishedServicesList) *ListPublishedServicesResponseBody {
	s.PublishedServicesList = v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesList struct {
	ListPublishedServices []*ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices `json:"ListPublishedServices,omitempty" xml:"ListPublishedServices,omitempty" require:"true" type:"Repeated"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesList) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesList) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesList) SetListPublishedServices(v []*ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) *ListPublishedServicesResponseBodyPublishedServicesList {
	s.ListPublishedServices = v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices struct {
	AppId             *string                                                                            `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	DockerApplication *bool                                                                              `json:"DockerApplication,omitempty" xml:"DockerApplication,omitempty" require:"true"`
	Group2Ip          *string                                                                            `json:"Group2Ip,omitempty" xml:"Group2Ip,omitempty" require:"true"`
	Name              *string                                                                            `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type              *string                                                                            `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
	Version           *string                                                                            `json:"Version,omitempty" xml:"Version,omitempty" require:"true"`
	Groups            *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups `json:"Groups,omitempty" xml:"Groups,omitempty" require:"true" type:"Struct"`
	Ips               *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps    `json:"Ips,omitempty" xml:"Ips,omitempty" require:"true" type:"Struct"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetAppId(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.AppId = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetDockerApplication(v bool) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.DockerApplication = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetGroup2Ip(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Group2Ip = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetName(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Name = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetType(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Type = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetVersion(v string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Version = &v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetGroups(v *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Groups = v
	return s
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices) SetIps(v *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServices {
	s.Ips = v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups struct {
	Group []*string `json:"group,omitempty" xml:"group,omitempty" require:"true" type:"Repeated"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups) SetGroup(v []*string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesGroups {
	s.Group = v
	return s
}

type ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps struct {
	Ip []*string `json:"ip,omitempty" xml:"ip,omitempty" require:"true" type:"Repeated"`
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps) SetIp(v []*string) *ListPublishedServicesResponseBodyPublishedServicesListListPublishedServicesIps {
	s.Ip = v
	return s
}

type ListPublishedServicesResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPublishedServicesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPublishedServicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPublishedServicesResponse) GoString() string {
	return s.String()
}

func (s *ListPublishedServicesResponse) SetHeaders(v map[string]*string) *ListPublishedServicesResponse {
	s.Headers = v
	return s
}

func (s *ListPublishedServicesResponse) SetBody(v *ListPublishedServicesResponseBody) *ListPublishedServicesResponse {
	s.Body = v
	return s
}

type ListRecentChangeOrderQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s ListRecentChangeOrderQuery) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderQuery) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderQuery) SetAppId(v string) *ListRecentChangeOrderQuery {
	s.AppId = &v
	return s
}

type ListRecentChangeOrderRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListRecentChangeOrderQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListRecentChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderRequest) SetHeaders(v map[string]*string) *ListRecentChangeOrderRequest {
	s.Headers = v
	return s
}

func (s *ListRecentChangeOrderRequest) SetQuery(v *ListRecentChangeOrderQuery) *ListRecentChangeOrderRequest {
	s.Query = v
	return s
}

type ListRecentChangeOrderResponseBody struct {
	Code            *int                                              `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message         *string                                           `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId       *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ChangeOrderList *ListRecentChangeOrderResponseBodyChangeOrderList `json:"ChangeOrderList,omitempty" xml:"ChangeOrderList,omitempty" require:"true" type:"Struct"`
}

func (s ListRecentChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponseBody) SetCode(v int) *ListRecentChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *ListRecentChangeOrderResponseBody) SetMessage(v string) *ListRecentChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *ListRecentChangeOrderResponseBody) SetRequestId(v string) *ListRecentChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBody) SetChangeOrderList(v *ListRecentChangeOrderResponseBodyChangeOrderList) *ListRecentChangeOrderResponseBody {
	s.ChangeOrderList = v
	return s
}

type ListRecentChangeOrderResponseBodyChangeOrderList struct {
	ChangeOrder []*ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder `json:"ChangeOrder,omitempty" xml:"ChangeOrder,omitempty" require:"true" type:"Repeated"`
}

func (s ListRecentChangeOrderResponseBodyChangeOrderList) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponseBodyChangeOrderList) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderList) SetChangeOrder(v []*ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) *ListRecentChangeOrderResponseBodyChangeOrderList {
	s.ChangeOrder = v
	return s
}

type ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder struct {
	AppId                  *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	BatchCount             *int    `json:"BatchCount,omitempty" xml:"BatchCount,omitempty" require:"true"`
	BatchType              *string `json:"BatchType,omitempty" xml:"BatchType,omitempty" require:"true"`
	ChangeOrderDescription *string `json:"ChangeOrderDescription,omitempty" xml:"ChangeOrderDescription,omitempty" require:"true"`
	ChangeOrderId          *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	CoType                 *string `json:"CoType,omitempty" xml:"CoType,omitempty" require:"true"`
	CoTypeCode             *string `json:"CoTypeCode,omitempty" xml:"CoTypeCode,omitempty" require:"true"`
	CreateTime             *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	CreateUserId           *string `json:"CreateUserId,omitempty" xml:"CreateUserId,omitempty" require:"true"`
	FinishTime             *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty" require:"true"`
	GroupId                *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Source                 *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	Status                 *int    `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	UserId                 *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetAppId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.AppId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetBatchCount(v int) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.BatchCount = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetBatchType(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.BatchType = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetChangeOrderDescription(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.ChangeOrderDescription = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetChangeOrderId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.ChangeOrderId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCoType(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CoType = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCoTypeCode(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CoTypeCode = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCreateTime(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CreateTime = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetCreateUserId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.CreateUserId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetFinishTime(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.FinishTime = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetGroupId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.GroupId = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetSource(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.Source = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetStatus(v int) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.Status = &v
	return s
}

func (s *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder) SetUserId(v string) *ListRecentChangeOrderResponseBodyChangeOrderListChangeOrder {
	s.UserId = &v
	return s
}

type ListRecentChangeOrderResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRecentChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRecentChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRecentChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *ListRecentChangeOrderResponse) SetHeaders(v map[string]*string) *ListRecentChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *ListRecentChangeOrderResponse) SetBody(v *ListRecentChangeOrderResponseBody) *ListRecentChangeOrderResponse {
	s.Body = v
	return s
}

type ListResourceGroupRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *ListResourceGroupRequest) SetHeaders(v map[string]*string) *ListResourceGroupRequest {
	s.Headers = v
	return s
}

type ListResourceGroupResponseBody struct {
	Code              *int                                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message           *string                                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ResourceGroupList *ListResourceGroupResponseBodyResourceGroupList `json:"ResourceGroupList,omitempty" xml:"ResourceGroupList,omitempty" require:"true" type:"Struct"`
}

func (s ListResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBody) SetCode(v int) *ListResourceGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListResourceGroupResponseBody) SetMessage(v string) *ListResourceGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListResourceGroupResponseBody) SetRequestId(v string) *ListResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourceGroupResponseBody) SetResourceGroupList(v *ListResourceGroupResponseBodyResourceGroupList) *ListResourceGroupResponseBody {
	s.ResourceGroupList = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupList struct {
	ResGroupEntity []*ListResourceGroupResponseBodyResourceGroupListResGroupEntity `json:"ResGroupEntity,omitempty" xml:"ResGroupEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListResourceGroupResponseBodyResourceGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupList) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupList) SetResGroupEntity(v []*ListResourceGroupResponseBodyResourceGroupListResGroupEntity) *ListResourceGroupResponseBodyResourceGroupList {
	s.ResGroupEntity = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntity struct {
	AdminUserId *string                                                              `json:"AdminUserId,omitempty" xml:"AdminUserId,omitempty" require:"true"`
	CreateTime  *int64                                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Description *string                                                              `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Id          *int64                                                               `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name        *string                                                              `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	RegionId    *string                                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime  *int64                                                               `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	SlbList     *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList `json:"SlbList,omitempty" xml:"SlbList,omitempty" require:"true" type:"Struct"`
	EcsList     *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList `json:"ecsList,omitempty" xml:"ecsList,omitempty" require:"true" type:"Struct"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetAdminUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.AdminUserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetCreateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.CreateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetDescription(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.Description = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetId(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.Id = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.Name = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetUpdateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetSlbList(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.SlbList = v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntity) SetEcsList(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) *ListResourceGroupResponseBodyResourceGroupListResGroupEntity {
	s.EcsList = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList struct {
	SlbEntity []*ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity `json:"SlbEntity,omitempty" xml:"SlbEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList) SetSlbEntity(v []*ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbList {
	s.SlbEntity = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty" require:"true"`
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty" require:"true"`
	Expired     *bool   `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	GroupId     *int    `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty" require:"true"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	SlbName     *string `json:"SlbName,omitempty" xml:"SlbName,omitempty" require:"true"`
	SlbStatus   *string `json:"SlbStatus,omitempty" xml:"SlbStatus,omitempty" require:"true"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VswitchId   *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty" require:"true"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetAddress(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.Address = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetAddressType(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.AddressType = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetExpired(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.Expired = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetGroupId(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.GroupId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetNetworkType(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.NetworkType = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetSlbId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.SlbId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetSlbName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.SlbName = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetSlbStatus(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.SlbStatus = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity) SetVswitchId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntitySlbListSlbEntity {
	s.VswitchId = &v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList struct {
	EcsEntity []*ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity `json:"EcsEntity,omitempty" xml:"EcsEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList) SetEcsEntity(v []*ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsList {
	s.EcsEntity = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity struct {
	Cpu          *int                                                                                   `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	Description  *string                                                                                `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Eip          *string                                                                                `json:"Eip,omitempty" xml:"Eip,omitempty" require:"true"`
	Expired      *bool                                                                                  `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	GroupId      *string                                                                                `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	HostName     *string                                                                                `json:"HostName,omitempty" xml:"HostName,omitempty" require:"true"`
	InnerIp      *string                                                                                `json:"InnerIp,omitempty" xml:"InnerIp,omitempty" require:"true"`
	InstanceId   *string                                                                                `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	InstanceName *string                                                                                `json:"InstanceName,omitempty" xml:"InstanceName,omitempty" require:"true"`
	Mem          *int                                                                                   `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	PrivateIp    *string                                                                                `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty" require:"true"`
	PublicIp     *string                                                                                `json:"PublicIp,omitempty" xml:"PublicIp,omitempty" require:"true"`
	RegionId     *string                                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SerialNum    *string                                                                                `json:"SerialNum,omitempty" xml:"SerialNum,omitempty" require:"true"`
	SgId         *string                                                                                `json:"SgId,omitempty" xml:"SgId,omitempty" require:"true"`
	Status       *string                                                                                `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	UserId       *string                                                                                `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId        *string                                                                                `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ZoneId       *string                                                                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
	EcuEntity    *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" require:"true" type:"Struct"`
	VpcEntity    *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity `json:"VpcEntity,omitempty" xml:"VpcEntity,omitempty" require:"true" type:"Struct"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetCpu(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Cpu = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetDescription(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Description = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetEip(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Eip = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetExpired(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Expired = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetGroupId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.GroupId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetHostName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.HostName = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetInnerIp(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.InnerIp = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetInstanceId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.InstanceId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetInstanceName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.InstanceName = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetMem(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Mem = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetPrivateIp(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.PrivateIp = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetPublicIp(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.PublicIp = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetSerialNum(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.SerialNum = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetSgId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.SgId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetStatus(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.Status = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetZoneId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.ZoneId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetEcuEntity(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.EcuEntity = v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity) SetVpcEntity(v *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntity {
	s.VpcEntity = v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity struct {
	AvailableCpu  *int    `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty" require:"true"`
	AvailableMem  *int    `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty" require:"true"`
	Cpu           *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty" require:"true"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty" require:"true"`
	Mem           *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetAvailableCpu(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetAvailableMem(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetCpu(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Cpu = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetCreateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetDockerEnv(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetEcuId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.EcuId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetHeartbeatTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetInstanceId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetIpAddr(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetMem(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Mem = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Name = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetOnline(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.Online = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetUpdateTime(v int64) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity) SetZoneId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityEcuEntity {
	s.ZoneId = &v
	return s
}

type ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity struct {
	Cidrblock   *string `json:"Cidrblock,omitempty" xml:"Cidrblock,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	EcsNum      *int    `json:"EcsNum,omitempty" xml:"EcsNum,omitempty" require:"true"`
	Expired     *bool   `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VpcName     *string `json:"VpcName,omitempty" xml:"VpcName,omitempty" require:"true"`
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetCidrblock(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Cidrblock = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetDescription(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Description = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetEcsNum(v int) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.EcsNum = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetExpired(v bool) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Expired = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetRegionId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.RegionId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetStatus(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.Status = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetUserId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.UserId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetVpcId(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.VpcId = &v
	return s
}

func (s *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity) SetVpcName(v string) *ListResourceGroupResponseBodyResourceGroupListResGroupEntityEcsListEcsEntityVpcEntity {
	s.VpcName = &v
	return s
}

type ListResourceGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *ListResourceGroupResponse) SetHeaders(v map[string]*string) *ListResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *ListResourceGroupResponse) SetBody(v *ListResourceGroupResponseBody) *ListResourceGroupResponse {
	s.Body = v
	return s
}

type ListRoleRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRoleRequest) GoString() string {
	return s.String()
}

func (s *ListRoleRequest) SetHeaders(v map[string]*string) *ListRoleRequest {
	s.Headers = v
	return s
}

type ListRoleResponseBody struct {
	Code      *int                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RoleList  *ListRoleResponseBodyRoleList `json:"RoleList,omitempty" xml:"RoleList,omitempty" require:"true" type:"Struct"`
}

func (s ListRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBody) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBody) SetCode(v int) *ListRoleResponseBody {
	s.Code = &v
	return s
}

func (s *ListRoleResponseBody) SetMessage(v string) *ListRoleResponseBody {
	s.Message = &v
	return s
}

func (s *ListRoleResponseBody) SetRequestId(v string) *ListRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRoleResponseBody) SetRoleList(v *ListRoleResponseBodyRoleList) *ListRoleResponseBody {
	s.RoleList = v
	return s
}

type ListRoleResponseBodyRoleList struct {
	RoleItem []*ListRoleResponseBodyRoleListRoleItem `json:"RoleItem,omitempty" xml:"RoleItem,omitempty" require:"true" type:"Repeated"`
}

func (s ListRoleResponseBodyRoleList) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleList) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleList) SetRoleItem(v []*ListRoleResponseBodyRoleListRoleItem) *ListRoleResponseBodyRoleList {
	s.RoleItem = v
	return s
}

type ListRoleResponseBodyRoleListRoleItem struct {
	ActionList *ListRoleResponseBodyRoleListRoleItemActionList `json:"ActionList,omitempty" xml:"ActionList,omitempty" require:"true" type:"Struct"`
	Role       *ListRoleResponseBodyRoleListRoleItemRole       `json:"Role,omitempty" xml:"Role,omitempty" require:"true" type:"Struct"`
}

func (s ListRoleResponseBodyRoleListRoleItem) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItem) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItem) SetActionList(v *ListRoleResponseBodyRoleListRoleItemActionList) *ListRoleResponseBodyRoleListRoleItem {
	s.ActionList = v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItem) SetRole(v *ListRoleResponseBodyRoleListRoleItemRole) *ListRoleResponseBodyRoleListRoleItem {
	s.Role = v
	return s
}

type ListRoleResponseBodyRoleListRoleItemActionList struct {
	Action []*ListRoleResponseBodyRoleListRoleItemActionListAction `json:"Action,omitempty" xml:"Action,omitempty" require:"true" type:"Repeated"`
}

func (s ListRoleResponseBodyRoleListRoleItemActionList) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItemActionList) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItemActionList) SetAction(v []*ListRoleResponseBodyRoleListRoleItemActionListAction) *ListRoleResponseBodyRoleListRoleItemActionList {
	s.Action = v
	return s
}

type ListRoleResponseBodyRoleListRoleItemActionListAction struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s ListRoleResponseBodyRoleListRoleItemActionListAction) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItemActionListAction) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetCode(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.Code = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetDescription(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.Description = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetGroupId(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.GroupId = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemActionListAction) SetName(v string) *ListRoleResponseBodyRoleListRoleItemActionListAction {
	s.Name = &v
	return s
}

type ListRoleResponseBodyRoleListRoleItemRole struct {
	AdminUserId *string `json:"AdminUserId,omitempty" xml:"AdminUserId,omitempty" require:"true"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Id          *int    `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	IsDefault   *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
}

func (s ListRoleResponseBodyRoleListRoleItemRole) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponseBodyRoleListRoleItemRole) GoString() string {
	return s.String()
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetAdminUserId(v string) *ListRoleResponseBodyRoleListRoleItemRole {
	s.AdminUserId = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetCreateTime(v int64) *ListRoleResponseBodyRoleListRoleItemRole {
	s.CreateTime = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetId(v int) *ListRoleResponseBodyRoleListRoleItemRole {
	s.Id = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetIsDefault(v bool) *ListRoleResponseBodyRoleListRoleItemRole {
	s.IsDefault = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetName(v string) *ListRoleResponseBodyRoleListRoleItemRole {
	s.Name = &v
	return s
}

func (s *ListRoleResponseBodyRoleListRoleItemRole) SetUpdateTime(v int64) *ListRoleResponseBodyRoleListRoleItemRole {
	s.UpdateTime = &v
	return s
}

type ListRoleResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRoleResponse) GoString() string {
	return s.String()
}

func (s *ListRoleResponse) SetHeaders(v map[string]*string) *ListRoleResponse {
	s.Headers = v
	return s
}

func (s *ListRoleResponse) SetBody(v *ListRoleResponseBody) *ListRoleResponse {
	s.Body = v
	return s
}

type ListRootStacksQuery struct {
	CurrentPage *int `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListRootStacksQuery) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksQuery) GoString() string {
	return s.String()
}

func (s *ListRootStacksQuery) SetCurrentPage(v int) *ListRootStacksQuery {
	s.CurrentPage = &v
	return s
}

func (s *ListRootStacksQuery) SetPageSize(v int) *ListRootStacksQuery {
	s.PageSize = &v
	return s
}

type ListRootStacksRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListRootStacksQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListRootStacksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksRequest) GoString() string {
	return s.String()
}

func (s *ListRootStacksRequest) SetHeaders(v map[string]*string) *ListRootStacksRequest {
	s.Headers = v
	return s
}

func (s *ListRootStacksRequest) SetQuery(v *ListRootStacksQuery) *ListRootStacksRequest {
	s.Query = v
	return s
}

type ListRootStacksResponseBody struct {
	Code      *int                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *ListRootStacksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ListRootStacksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBody) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBody) SetCode(v int) *ListRootStacksResponseBody {
	s.Code = &v
	return s
}

func (s *ListRootStacksResponseBody) SetMessage(v string) *ListRootStacksResponseBody {
	s.Message = &v
	return s
}

func (s *ListRootStacksResponseBody) SetRequestId(v string) *ListRootStacksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRootStacksResponseBody) SetData(v *ListRootStacksResponseBodyData) *ListRootStacksResponseBody {
	s.Data = v
	return s
}

type ListRootStacksResponseBodyData struct {
	CurrentPage *int                                    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageSize    *int                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize   *int                                    `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result      []*ListRootStacksResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s ListRootStacksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyData) SetCurrentPage(v int) *ListRootStacksResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *ListRootStacksResponseBodyData) SetPageSize(v int) *ListRootStacksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *ListRootStacksResponseBodyData) SetTotalSize(v int) *ListRootStacksResponseBodyData {
	s.TotalSize = &v
	return s
}

func (s *ListRootStacksResponseBodyData) SetResult(v []*ListRootStacksResponseBodyDataResult) *ListRootStacksResponseBodyData {
	s.Result = v
	return s
}

type ListRootStacksResponseBodyDataResult struct {
	Children []*ListRootStacksResponseBodyDataResultChildren `json:"Children,omitempty" xml:"Children,omitempty" require:"true" type:"Repeated"`
	Root     *ListRootStacksResponseBodyDataResultRoot       `json:"Root,omitempty" xml:"Root,omitempty" require:"true" type:"Struct"`
}

func (s ListRootStacksResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyDataResult) SetChildren(v []*ListRootStacksResponseBodyDataResultChildren) *ListRootStacksResponseBodyDataResult {
	s.Children = v
	return s
}

func (s *ListRootStacksResponseBodyDataResult) SetRoot(v *ListRootStacksResponseBodyDataResultRoot) *ListRootStacksResponseBodyDataResult {
	s.Root = v
	return s
}

type ListRootStacksResponseBodyDataResultChildren struct {
	Comment *string `json:"Comment,omitempty" xml:"Comment,omitempty" require:"true"`
	Icon    *string `json:"Icon,omitempty" xml:"Icon,omitempty" require:"true"`
	Id      *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s ListRootStacksResponseBodyDataResultChildren) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyDataResultChildren) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetComment(v string) *ListRootStacksResponseBodyDataResultChildren {
	s.Comment = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetIcon(v string) *ListRootStacksResponseBodyDataResultChildren {
	s.Icon = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetId(v int64) *ListRootStacksResponseBodyDataResultChildren {
	s.Id = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultChildren) SetName(v string) *ListRootStacksResponseBodyDataResultChildren {
	s.Name = &v
	return s
}

type ListRootStacksResponseBodyDataResultRoot struct {
	Id   *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s ListRootStacksResponseBodyDataResultRoot) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponseBodyDataResultRoot) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponseBodyDataResultRoot) SetId(v int64) *ListRootStacksResponseBodyDataResultRoot {
	s.Id = &v
	return s
}

func (s *ListRootStacksResponseBodyDataResultRoot) SetName(v string) *ListRootStacksResponseBodyDataResultRoot {
	s.Name = &v
	return s
}

type ListRootStacksResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRootStacksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRootStacksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRootStacksResponse) GoString() string {
	return s.String()
}

func (s *ListRootStacksResponse) SetHeaders(v map[string]*string) *ListRootStacksResponse {
	s.Headers = v
	return s
}

func (s *ListRootStacksResponse) SetBody(v *ListRootStacksResponseBody) *ListRootStacksResponse {
	s.Body = v
	return s
}

type ListScaleOutEcuQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Cpu             *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceNum     *int    `json:"InstanceNum,omitempty" xml:"InstanceNum,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	Mem             *int    `json:"Mem,omitempty" xml:"Mem,omitempty"`
}

func (s ListScaleOutEcuQuery) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuQuery) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuQuery) SetAppId(v string) *ListScaleOutEcuQuery {
	s.AppId = &v
	return s
}

func (s *ListScaleOutEcuQuery) SetClusterId(v string) *ListScaleOutEcuQuery {
	s.ClusterId = &v
	return s
}

func (s *ListScaleOutEcuQuery) SetCpu(v int) *ListScaleOutEcuQuery {
	s.Cpu = &v
	return s
}

func (s *ListScaleOutEcuQuery) SetGroupId(v string) *ListScaleOutEcuQuery {
	s.GroupId = &v
	return s
}

func (s *ListScaleOutEcuQuery) SetInstanceNum(v int) *ListScaleOutEcuQuery {
	s.InstanceNum = &v
	return s
}

func (s *ListScaleOutEcuQuery) SetLogicalRegionId(v string) *ListScaleOutEcuQuery {
	s.LogicalRegionId = &v
	return s
}

func (s *ListScaleOutEcuQuery) SetMem(v int) *ListScaleOutEcuQuery {
	s.Mem = &v
	return s
}

type ListScaleOutEcuRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListScaleOutEcuQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListScaleOutEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuRequest) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuRequest) SetHeaders(v map[string]*string) *ListScaleOutEcuRequest {
	s.Headers = v
	return s
}

func (s *ListScaleOutEcuRequest) SetQuery(v *ListScaleOutEcuQuery) *ListScaleOutEcuRequest {
	s.Query = v
	return s
}

type ListScaleOutEcuResponseBody struct {
	Code        *int                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EcuInfoList *ListScaleOutEcuResponseBodyEcuInfoList `json:"EcuInfoList,omitempty" xml:"EcuInfoList,omitempty" require:"true" type:"Struct"`
}

func (s ListScaleOutEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponseBody) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponseBody) SetCode(v int) *ListScaleOutEcuResponseBody {
	s.Code = &v
	return s
}

func (s *ListScaleOutEcuResponseBody) SetMessage(v string) *ListScaleOutEcuResponseBody {
	s.Message = &v
	return s
}

func (s *ListScaleOutEcuResponseBody) SetRequestId(v string) *ListScaleOutEcuResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScaleOutEcuResponseBody) SetEcuInfoList(v *ListScaleOutEcuResponseBodyEcuInfoList) *ListScaleOutEcuResponseBody {
	s.EcuInfoList = v
	return s
}

type ListScaleOutEcuResponseBodyEcuInfoList struct {
	EcuInfo []*ListScaleOutEcuResponseBodyEcuInfoListEcuInfo `json:"EcuInfo,omitempty" xml:"EcuInfo,omitempty" require:"true" type:"Repeated"`
}

func (s ListScaleOutEcuResponseBodyEcuInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponseBodyEcuInfoList) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponseBodyEcuInfoList) SetEcuInfo(v []*ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) *ListScaleOutEcuResponseBodyEcuInfoList {
	s.EcuInfo = v
	return s
}

type ListScaleOutEcuResponseBodyEcuInfoListEcuInfo struct {
	AvailableCpu  *int    `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty" require:"true"`
	AvailableMem  *int    `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty" require:"true"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetAvailableCpu(v int) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.AvailableCpu = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetAvailableMem(v int) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.AvailableMem = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetCreateTime(v int64) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.CreateTime = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetDockerEnv(v bool) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.DockerEnv = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetEcuId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.EcuId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetHeartbeatTime(v int64) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.HeartbeatTime = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetInstanceId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.InstanceId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetIpAddr(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.IpAddr = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetName(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.Name = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetOnline(v bool) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.Online = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetRegionId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.RegionId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetUpdateTime(v int64) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.UpdateTime = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetUserId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.UserId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetVpcId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.VpcId = &v
	return s
}

func (s *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo) SetZoneId(v string) *ListScaleOutEcuResponseBodyEcuInfoListEcuInfo {
	s.ZoneId = &v
	return s
}

type ListScaleOutEcuResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListScaleOutEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScaleOutEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s ListScaleOutEcuResponse) GoString() string {
	return s.String()
}

func (s *ListScaleOutEcuResponse) SetHeaders(v map[string]*string) *ListScaleOutEcuResponse {
	s.Headers = v
	return s
}

func (s *ListScaleOutEcuResponse) SetBody(v *ListScaleOutEcuResponseBody) *ListScaleOutEcuResponse {
	s.Body = v
	return s
}

type ListServiceGroupsRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListServiceGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsRequest) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsRequest) SetHeaders(v map[string]*string) *ListServiceGroupsRequest {
	s.Headers = v
	return s
}

type ListServiceGroupsResponseBody struct {
	Code              *int                                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message           *string                                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ServiceGroupsList *ListServiceGroupsResponseBodyServiceGroupsList `json:"ServiceGroupsList,omitempty" xml:"ServiceGroupsList,omitempty" require:"true" type:"Struct"`
}

func (s ListServiceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponseBody) SetCode(v int) *ListServiceGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ListServiceGroupsResponseBody) SetMessage(v string) *ListServiceGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ListServiceGroupsResponseBody) SetRequestId(v string) *ListServiceGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListServiceGroupsResponseBody) SetServiceGroupsList(v *ListServiceGroupsResponseBodyServiceGroupsList) *ListServiceGroupsResponseBody {
	s.ServiceGroupsList = v
	return s
}

type ListServiceGroupsResponseBodyServiceGroupsList struct {
	ListServiceGroups []*ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups `json:"ListServiceGroups,omitempty" xml:"ListServiceGroups,omitempty" require:"true" type:"Repeated"`
}

func (s ListServiceGroupsResponseBodyServiceGroupsList) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponseBodyServiceGroupsList) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponseBodyServiceGroupsList) SetListServiceGroups(v []*ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) *ListServiceGroupsResponseBodyServiceGroupsList {
	s.ListServiceGroups = v
	return s
}

type ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups struct {
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	GroupId    *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName  *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
}

func (s ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) SetCreateTime(v string) *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups {
	s.CreateTime = &v
	return s
}

func (s *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) SetGroupId(v string) *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups {
	s.GroupId = &v
	return s
}

func (s *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups) SetGroupName(v string) *ListServiceGroupsResponseBodyServiceGroupsListListServiceGroups {
	s.GroupName = &v
	return s
}

type ListServiceGroupsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListServiceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListServiceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListServiceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListServiceGroupsResponse) SetHeaders(v map[string]*string) *ListServiceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListServiceGroupsResponse) SetBody(v *ListServiceGroupsResponseBody) *ListServiceGroupsResponse {
	s.Body = v
	return s
}

type ListSlbRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSlbRequest) GoString() string {
	return s.String()
}

func (s *ListSlbRequest) SetHeaders(v map[string]*string) *ListSlbRequest {
	s.Headers = v
	return s
}

type ListSlbResponseBody struct {
	Code      *int                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SlbList   *ListSlbResponseBodySlbList `json:"SlbList,omitempty" xml:"SlbList,omitempty" require:"true" type:"Struct"`
}

func (s ListSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponseBody) GoString() string {
	return s.String()
}

func (s *ListSlbResponseBody) SetCode(v int) *ListSlbResponseBody {
	s.Code = &v
	return s
}

func (s *ListSlbResponseBody) SetMessage(v string) *ListSlbResponseBody {
	s.Message = &v
	return s
}

func (s *ListSlbResponseBody) SetRequestId(v string) *ListSlbResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSlbResponseBody) SetSlbList(v *ListSlbResponseBodySlbList) *ListSlbResponseBody {
	s.SlbList = v
	return s
}

type ListSlbResponseBodySlbList struct {
	SlbEntity []*ListSlbResponseBodySlbListSlbEntity `json:"SlbEntity,omitempty" xml:"SlbEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListSlbResponseBodySlbList) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponseBodySlbList) GoString() string {
	return s.String()
}

func (s *ListSlbResponseBodySlbList) SetSlbEntity(v []*ListSlbResponseBodySlbListSlbEntity) *ListSlbResponseBodySlbList {
	s.SlbEntity = v
	return s
}

type ListSlbResponseBodySlbListSlbEntity struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty" require:"true"`
	AddressType *string `json:"AddressType,omitempty" xml:"AddressType,omitempty" require:"true"`
	Expired     *bool   `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	GroupId     *int    `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty" require:"true"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	SlbId       *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	SlbName     *string `json:"SlbName,omitempty" xml:"SlbName,omitempty" require:"true"`
	SlbStatus   *string `json:"SlbStatus,omitempty" xml:"SlbStatus,omitempty" require:"true"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VswitchId   *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty" require:"true"`
}

func (s ListSlbResponseBodySlbListSlbEntity) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponseBodySlbListSlbEntity) GoString() string {
	return s.String()
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetAddress(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.Address = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetAddressType(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.AddressType = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetExpired(v bool) *ListSlbResponseBodySlbListSlbEntity {
	s.Expired = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetGroupId(v int) *ListSlbResponseBodySlbListSlbEntity {
	s.GroupId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetNetworkType(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.NetworkType = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetRegionId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.RegionId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetSlbId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.SlbId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetSlbName(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.SlbName = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetSlbStatus(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.SlbStatus = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetUserId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.UserId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetVpcId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.VpcId = &v
	return s
}

func (s *ListSlbResponseBodySlbListSlbEntity) SetVswitchId(v string) *ListSlbResponseBodySlbListSlbEntity {
	s.VswitchId = &v
	return s
}

type ListSlbResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSlbResponse) GoString() string {
	return s.String()
}

func (s *ListSlbResponse) SetHeaders(v map[string]*string) *ListSlbResponse {
	s.Headers = v
	return s
}

func (s *ListSlbResponse) SetBody(v *ListSlbResponseBody) *ListSlbResponse {
	s.Body = v
	return s
}

type ListStatusQuery struct {
	AccountId   *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Ip          *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	PodName     *string `json:"PodName,omitempty" xml:"PodName,omitempty"`
	Region      *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Source      *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
}

func (s ListStatusQuery) String() string {
	return tea.Prettify(s)
}

func (s ListStatusQuery) GoString() string {
	return s.String()
}

func (s *ListStatusQuery) SetAccountId(v string) *ListStatusQuery {
	s.AccountId = &v
	return s
}

func (s *ListStatusQuery) SetAppId(v string) *ListStatusQuery {
	s.AppId = &v
	return s
}

func (s *ListStatusQuery) SetIp(v string) *ListStatusQuery {
	s.Ip = &v
	return s
}

func (s *ListStatusQuery) SetNamespaceId(v string) *ListStatusQuery {
	s.NamespaceId = &v
	return s
}

func (s *ListStatusQuery) SetPodName(v string) *ListStatusQuery {
	s.PodName = &v
	return s
}

func (s *ListStatusQuery) SetRegion(v string) *ListStatusQuery {
	s.Region = &v
	return s
}

func (s *ListStatusQuery) SetSource(v string) *ListStatusQuery {
	s.Source = &v
	return s
}

func (s *ListStatusQuery) SetStatus(v string) *ListStatusQuery {
	s.Status = &v
	return s
}

func (s *ListStatusQuery) SetTenantId(v string) *ListStatusQuery {
	s.TenantId = &v
	return s
}

type ListStatusRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListStatusQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ListStatusRequest) GoString() string {
	return s.String()
}

func (s *ListStatusRequest) SetHeaders(v map[string]*string) *ListStatusRequest {
	s.Headers = v
	return s
}

func (s *ListStatusRequest) SetQuery(v *ListStatusQuery) *ListStatusRequest {
	s.Query = v
	return s
}

type ListStatusResponseBody struct {
	Code      *int                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                         `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      []*ListStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s ListStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ListStatusResponseBody) SetCode(v int) *ListStatusResponseBody {
	s.Code = &v
	return s
}

func (s *ListStatusResponseBody) SetMessage(v string) *ListStatusResponseBody {
	s.Message = &v
	return s
}

func (s *ListStatusResponseBody) SetRequestId(v string) *ListStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStatusResponseBody) SetSuccess(v bool) *ListStatusResponseBody {
	s.Success = &v
	return s
}

func (s *ListStatusResponseBody) SetData(v []*ListStatusResponseBodyData) *ListStatusResponseBody {
	s.Data = v
	return s
}

type ListStatusResponseBodyData struct {
	AccountId   *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Ip          *string `json:"Ip,omitempty" xml:"Ip,omitempty" require:"true"`
	NamespaceId *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	PodName     *string `json:"PodName,omitempty" xml:"PodName,omitempty" require:"true"`
	Region      *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Source      *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty" require:"true"`
	TenantId    *string `json:"TenantId,omitempty" xml:"TenantId,omitempty" require:"true"`
}

func (s ListStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListStatusResponseBodyData) SetAccountId(v string) *ListStatusResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *ListStatusResponseBodyData) SetAppId(v string) *ListStatusResponseBodyData {
	s.AppId = &v
	return s
}

func (s *ListStatusResponseBodyData) SetIp(v string) *ListStatusResponseBodyData {
	s.Ip = &v
	return s
}

func (s *ListStatusResponseBodyData) SetNamespaceId(v string) *ListStatusResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *ListStatusResponseBodyData) SetPodName(v string) *ListStatusResponseBodyData {
	s.PodName = &v
	return s
}

func (s *ListStatusResponseBodyData) SetRegion(v string) *ListStatusResponseBodyData {
	s.Region = &v
	return s
}

func (s *ListStatusResponseBodyData) SetSource(v string) *ListStatusResponseBodyData {
	s.Source = &v
	return s
}

func (s *ListStatusResponseBodyData) SetStatus(v string) *ListStatusResponseBodyData {
	s.Status = &v
	return s
}

func (s *ListStatusResponseBodyData) SetTenantId(v string) *ListStatusResponseBodyData {
	s.TenantId = &v
	return s
}

type ListStatusResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ListStatusResponse) GoString() string {
	return s.String()
}

func (s *ListStatusResponse) SetHeaders(v map[string]*string) *ListStatusResponse {
	s.Headers = v
	return s
}

func (s *ListStatusResponse) SetBody(v *ListStatusResponseBody) *ListStatusResponse {
	s.Body = v
	return s
}

type ListSubAccountRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListSubAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountRequest) GoString() string {
	return s.String()
}

func (s *ListSubAccountRequest) SetHeaders(v map[string]*string) *ListSubAccountRequest {
	s.Headers = v
	return s
}

type ListSubAccountResponseBody struct {
	Code           *int                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	SubAccountList *ListSubAccountResponseBodySubAccountList `json:"SubAccountList,omitempty" xml:"SubAccountList,omitempty" require:"true" type:"Struct"`
}

func (s ListSubAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponseBody) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponseBody) SetCode(v int) *ListSubAccountResponseBody {
	s.Code = &v
	return s
}

func (s *ListSubAccountResponseBody) SetMessage(v string) *ListSubAccountResponseBody {
	s.Message = &v
	return s
}

func (s *ListSubAccountResponseBody) SetRequestId(v string) *ListSubAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSubAccountResponseBody) SetSubAccountList(v *ListSubAccountResponseBodySubAccountList) *ListSubAccountResponseBody {
	s.SubAccountList = v
	return s
}

type ListSubAccountResponseBodySubAccountList struct {
	SubAccount []*ListSubAccountResponseBodySubAccountListSubAccount `json:"SubAccount,omitempty" xml:"SubAccount,omitempty" require:"true" type:"Repeated"`
}

func (s ListSubAccountResponseBodySubAccountList) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponseBodySubAccountList) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponseBodySubAccountList) SetSubAccount(v []*ListSubAccountResponseBodySubAccountListSubAccount) *ListSubAccountResponseBodySubAccountList {
	s.SubAccount = v
	return s
}

type ListSubAccountResponseBodySubAccountListSubAccount struct {
	AdminEdasId *string `json:"AdminEdasId,omitempty" xml:"AdminEdasId,omitempty" require:"true"`
	AdminUserId *string `json:"AdminUserId,omitempty" xml:"AdminUserId,omitempty" require:"true"`
	AdminUserKp *string `json:"AdminUserKp,omitempty" xml:"AdminUserKp,omitempty" require:"true"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty" require:"true"`
	Phone       *string `json:"Phone,omitempty" xml:"Phone,omitempty" require:"true"`
	SubEdasId   *string `json:"SubEdasId,omitempty" xml:"SubEdasId,omitempty" require:"true"`
	SubUserId   *string `json:"SubUserId,omitempty" xml:"SubUserId,omitempty" require:"true"`
	SubUserKp   *string `json:"SubUserKp,omitempty" xml:"SubUserKp,omitempty" require:"true"`
}

func (s ListSubAccountResponseBodySubAccountListSubAccount) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponseBodySubAccountListSubAccount) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetAdminEdasId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.AdminEdasId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetAdminUserId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.AdminUserId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetAdminUserKp(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.AdminUserKp = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetEmail(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.Email = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetPhone(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.Phone = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetSubEdasId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.SubEdasId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetSubUserId(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.SubUserId = &v
	return s
}

func (s *ListSubAccountResponseBodySubAccountListSubAccount) SetSubUserKp(v string) *ListSubAccountResponseBodySubAccountListSubAccount {
	s.SubUserKp = &v
	return s
}

type ListSubAccountResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSubAccountResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSubAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSubAccountResponse) GoString() string {
	return s.String()
}

func (s *ListSubAccountResponse) SetHeaders(v map[string]*string) *ListSubAccountResponse {
	s.Headers = v
	return s
}

func (s *ListSubAccountResponse) SetBody(v *ListSubAccountResponseBody) *ListSubAccountResponse {
	s.Body = v
	return s
}

type ListSwimmingLaneQuery struct {
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
}

func (s ListSwimmingLaneQuery) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneQuery) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneQuery) SetGroupId(v int64) *ListSwimmingLaneQuery {
	s.GroupId = &v
	return s
}

type ListSwimmingLaneRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListSwimmingLaneQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListSwimmingLaneRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneRequest) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneRequest) SetHeaders(v map[string]*string) *ListSwimmingLaneRequest {
	s.Headers = v
	return s
}

func (s *ListSwimmingLaneRequest) SetQuery(v *ListSwimmingLaneQuery) *ListSwimmingLaneRequest {
	s.Query = v
	return s
}

type ListSwimmingLaneResponseBody struct {
	Code      *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      []*ListSwimmingLaneResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s ListSwimmingLaneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneResponseBody) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneResponseBody) SetCode(v int) *ListSwimmingLaneResponseBody {
	s.Code = &v
	return s
}

func (s *ListSwimmingLaneResponseBody) SetMessage(v string) *ListSwimmingLaneResponseBody {
	s.Message = &v
	return s
}

func (s *ListSwimmingLaneResponseBody) SetRequestId(v string) *ListSwimmingLaneResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSwimmingLaneResponseBody) SetData(v []*ListSwimmingLaneResponseBodyData) *ListSwimmingLaneResponseBody {
	s.Data = v
	return s
}

type ListSwimmingLaneResponseBodyData struct {
	EnableRules                     *bool                                                              `json:"EnableRules,omitempty" xml:"EnableRules,omitempty" require:"true"`
	EntryRule                       *string                                                            `json:"EntryRule,omitempty" xml:"EntryRule,omitempty" require:"true"`
	GroupId                         *int64                                                             `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Id                              *int64                                                             `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name                            *string                                                            `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId                     *string                                                            `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ScenarioSign                    *string                                                            `json:"ScenarioSign,omitempty" xml:"ScenarioSign,omitempty" require:"true"`
	Tag                             *string                                                            `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	SwimmingLaneAppRelationShipList []*ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList `json:"SwimmingLaneAppRelationShipList,omitempty" xml:"SwimmingLaneAppRelationShipList,omitempty" require:"true" type:"Repeated"`
}

func (s ListSwimmingLaneResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneResponseBodyData) SetEnableRules(v bool) *ListSwimmingLaneResponseBodyData {
	s.EnableRules = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetEntryRule(v string) *ListSwimmingLaneResponseBodyData {
	s.EntryRule = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetGroupId(v int64) *ListSwimmingLaneResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetId(v int64) *ListSwimmingLaneResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetName(v string) *ListSwimmingLaneResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetNamespaceId(v string) *ListSwimmingLaneResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetScenarioSign(v string) *ListSwimmingLaneResponseBodyData {
	s.ScenarioSign = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetTag(v string) *ListSwimmingLaneResponseBodyData {
	s.Tag = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyData) SetSwimmingLaneAppRelationShipList(v []*ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) *ListSwimmingLaneResponseBodyData {
	s.SwimmingLaneAppRelationShipList = v
	return s
}

type ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	LaneId  *int64  `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
	Rules   *string `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true"`
}

func (s ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppId(v string) *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppId = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppName(v string) *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppName = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetLaneId(v int64) *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.LaneId = &v
	return s
}

func (s *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetRules(v string) *ListSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.Rules = &v
	return s
}

type ListSwimmingLaneResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSwimmingLaneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSwimmingLaneResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneResponse) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneResponse) SetHeaders(v map[string]*string) *ListSwimmingLaneResponse {
	s.Headers = v
	return s
}

func (s *ListSwimmingLaneResponse) SetBody(v *ListSwimmingLaneResponseBody) *ListSwimmingLaneResponse {
	s.Body = v
	return s
}

type ListSwimmingLaneGroupQuery struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
}

func (s ListSwimmingLaneGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneGroupQuery) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneGroupQuery) SetLogicalRegionId(v string) *ListSwimmingLaneGroupQuery {
	s.LogicalRegionId = &v
	return s
}

type ListSwimmingLaneGroupRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListSwimmingLaneGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListSwimmingLaneGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneGroupRequest) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneGroupRequest) SetHeaders(v map[string]*string) *ListSwimmingLaneGroupRequest {
	s.Headers = v
	return s
}

func (s *ListSwimmingLaneGroupRequest) SetQuery(v *ListSwimmingLaneGroupQuery) *ListSwimmingLaneGroupRequest {
	s.Query = v
	return s
}

type ListSwimmingLaneGroupResponseBody struct {
	Code      *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      []*ListSwimmingLaneGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Repeated"`
}

func (s ListSwimmingLaneGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneGroupResponseBody) SetCode(v int) *ListSwimmingLaneGroupResponseBody {
	s.Code = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBody) SetMessage(v string) *ListSwimmingLaneGroupResponseBody {
	s.Message = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBody) SetRequestId(v string) *ListSwimmingLaneGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBody) SetData(v []*ListSwimmingLaneGroupResponseBodyData) *ListSwimmingLaneGroupResponseBody {
	s.Data = v
	return s
}

type ListSwimmingLaneGroupResponseBodyData struct {
	Id               *int64                                                  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name             *string                                                 `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId      *string                                                 `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ApplicationList  []*ListSwimmingLaneGroupResponseBodyDataApplicationList `json:"ApplicationList,omitempty" xml:"ApplicationList,omitempty" require:"true" type:"Repeated"`
	EntryApplication *ListSwimmingLaneGroupResponseBodyDataEntryApplication  `json:"EntryApplication,omitempty" xml:"EntryApplication,omitempty" require:"true" type:"Struct"`
}

func (s ListSwimmingLaneGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneGroupResponseBodyData) SetId(v int64) *ListSwimmingLaneGroupResponseBodyData {
	s.Id = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBodyData) SetName(v string) *ListSwimmingLaneGroupResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBodyData) SetNamespaceId(v string) *ListSwimmingLaneGroupResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBodyData) SetApplicationList(v []*ListSwimmingLaneGroupResponseBodyDataApplicationList) *ListSwimmingLaneGroupResponseBodyData {
	s.ApplicationList = v
	return s
}

func (s *ListSwimmingLaneGroupResponseBodyData) SetEntryApplication(v *ListSwimmingLaneGroupResponseBodyDataEntryApplication) *ListSwimmingLaneGroupResponseBodyData {
	s.EntryApplication = v
	return s
}

type ListSwimmingLaneGroupResponseBodyDataApplicationList struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s ListSwimmingLaneGroupResponseBodyDataApplicationList) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneGroupResponseBodyDataApplicationList) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneGroupResponseBodyDataApplicationList) SetAppId(v string) *ListSwimmingLaneGroupResponseBodyDataApplicationList {
	s.AppId = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBodyDataApplicationList) SetAppName(v string) *ListSwimmingLaneGroupResponseBodyDataApplicationList {
	s.AppName = &v
	return s
}

type ListSwimmingLaneGroupResponseBodyDataEntryApplication struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	Source  *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s ListSwimmingLaneGroupResponseBodyDataEntryApplication) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneGroupResponseBodyDataEntryApplication) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneGroupResponseBodyDataEntryApplication) SetAppId(v string) *ListSwimmingLaneGroupResponseBodyDataEntryApplication {
	s.AppId = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBodyDataEntryApplication) SetAppName(v string) *ListSwimmingLaneGroupResponseBodyDataEntryApplication {
	s.AppName = &v
	return s
}

func (s *ListSwimmingLaneGroupResponseBodyDataEntryApplication) SetSource(v string) *ListSwimmingLaneGroupResponseBodyDataEntryApplication {
	s.Source = &v
	return s
}

type ListSwimmingLaneGroupResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSwimmingLaneGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSwimmingLaneGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSwimmingLaneGroupResponse) GoString() string {
	return s.String()
}

func (s *ListSwimmingLaneGroupResponse) SetHeaders(v map[string]*string) *ListSwimmingLaneGroupResponse {
	s.Headers = v
	return s
}

func (s *ListSwimmingLaneGroupResponse) SetBody(v *ListSwimmingLaneGroupResponseBody) *ListSwimmingLaneGroupResponse {
	s.Body = v
	return s
}

type ListTagResourcesQuery struct {
	ResourceIds      map[string]interface{} `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	ResourceRegionId *string                `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty" require:"true"`
	ResourceType     *string                `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	Tags             map[string]interface{} `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListTagResourcesQuery) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesQuery) GoString() string {
	return s.String()
}

func (s *ListTagResourcesQuery) SetResourceIds(v map[string]interface{}) *ListTagResourcesQuery {
	s.ResourceIds = v
	return s
}

func (s *ListTagResourcesQuery) SetResourceRegionId(v string) *ListTagResourcesQuery {
	s.ResourceRegionId = &v
	return s
}

func (s *ListTagResourcesQuery) SetResourceType(v string) *ListTagResourcesQuery {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesQuery) SetTags(v map[string]interface{}) *ListTagResourcesQuery {
	s.Tags = v
	return s
}

type ListTagResourcesShrinkQuery struct {
	ResourceIdsShrink *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	ResourceRegionId  *string `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty" require:"true"`
	ResourceType      *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	TagsShrink        *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s ListTagResourcesShrinkQuery) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesShrinkQuery) GoString() string {
	return s.String()
}

func (s *ListTagResourcesShrinkQuery) SetResourceIdsShrink(v string) *ListTagResourcesShrinkQuery {
	s.ResourceIdsShrink = &v
	return s
}

func (s *ListTagResourcesShrinkQuery) SetResourceRegionId(v string) *ListTagResourcesShrinkQuery {
	s.ResourceRegionId = &v
	return s
}

func (s *ListTagResourcesShrinkQuery) SetResourceType(v string) *ListTagResourcesShrinkQuery {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesShrinkQuery) SetTagsShrink(v string) *ListTagResourcesShrinkQuery {
	s.TagsShrink = &v
	return s
}

type ListTagResourcesRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListTagResourcesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetHeaders(v map[string]*string) *ListTagResourcesRequest {
	s.Headers = v
	return s
}

func (s *ListTagResourcesRequest) SetQuery(v *ListTagResourcesQuery) *ListTagResourcesRequest {
	s.Query = v
	return s
}

type ListTagResourcesShrinkRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListTagResourcesShrinkQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ListTagResourcesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesShrinkRequest) SetHeaders(v map[string]*string) *ListTagResourcesShrinkRequest {
	s.Headers = v
	return s
}

func (s *ListTagResourcesShrinkRequest) SetQuery(v *ListTagResourcesShrinkQuery) *ListTagResourcesShrinkRequest {
	s.Query = v
	return s
}

type ListTagResourcesResponseBody struct {
	Code         *int                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message      *string                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" require:"true" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetCode(v int) *ListTagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetMessage(v string) *ListTagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" require:"true" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" require:"true"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty" require:"true"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty" require:"true"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListUserDefineRegionQuery struct {
	DebugEnable *bool `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty"`
}

func (s ListUserDefineRegionQuery) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionQuery) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionQuery) SetDebugEnable(v bool) *ListUserDefineRegionQuery {
	s.DebugEnable = &v
	return s
}

type ListUserDefineRegionRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ListUserDefineRegionQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s ListUserDefineRegionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionRequest) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionRequest) SetHeaders(v map[string]*string) *ListUserDefineRegionRequest {
	s.Headers = v
	return s
}

func (s *ListUserDefineRegionRequest) SetQuery(v *ListUserDefineRegionQuery) *ListUserDefineRegionRequest {
	s.Query = v
	return s
}

type ListUserDefineRegionResponseBody struct {
	Code                 *int                                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message              *string                                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId            *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	UserDefineRegionList *ListUserDefineRegionResponseBodyUserDefineRegionList `json:"UserDefineRegionList,omitempty" xml:"UserDefineRegionList,omitempty" require:"true" type:"Struct"`
}

func (s ListUserDefineRegionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponseBody) SetCode(v int) *ListUserDefineRegionResponseBody {
	s.Code = &v
	return s
}

func (s *ListUserDefineRegionResponseBody) SetMessage(v string) *ListUserDefineRegionResponseBody {
	s.Message = &v
	return s
}

func (s *ListUserDefineRegionResponseBody) SetRequestId(v string) *ListUserDefineRegionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUserDefineRegionResponseBody) SetUserDefineRegionList(v *ListUserDefineRegionResponseBodyUserDefineRegionList) *ListUserDefineRegionResponseBody {
	s.UserDefineRegionList = v
	return s
}

type ListUserDefineRegionResponseBodyUserDefineRegionList struct {
	UserDefineRegionEntity []*ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity `json:"UserDefineRegionEntity,omitempty" xml:"UserDefineRegionEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionList) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionList) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionList) SetUserDefineRegionEntity(v []*ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) *ListUserDefineRegionResponseBodyUserDefineRegionList {
	s.UserDefineRegionEntity = v
	return s
}

type ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity struct {
	BelongRegion *string `json:"BelongRegion,omitempty" xml:"BelongRegion,omitempty" require:"true"`
	DebugEnable  *bool   `json:"DebugEnable,omitempty" xml:"DebugEnable,omitempty" require:"true"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RegionName   *string `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetBelongRegion(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.BelongRegion = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetDebugEnable(v bool) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.DebugEnable = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetDescription(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.Description = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetId(v int64) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.Id = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetRegionId(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.RegionId = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetRegionName(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.RegionName = &v
	return s
}

func (s *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity) SetUserId(v string) *ListUserDefineRegionResponseBodyUserDefineRegionListUserDefineRegionEntity {
	s.UserId = &v
	return s
}

type ListUserDefineRegionResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListUserDefineRegionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUserDefineRegionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserDefineRegionResponse) GoString() string {
	return s.String()
}

func (s *ListUserDefineRegionResponse) SetHeaders(v map[string]*string) *ListUserDefineRegionResponse {
	s.Headers = v
	return s
}

func (s *ListUserDefineRegionResponse) SetBody(v *ListUserDefineRegionResponseBody) *ListUserDefineRegionResponse {
	s.Body = v
	return s
}

type ListVpcRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s ListVpcRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVpcRequest) GoString() string {
	return s.String()
}

func (s *ListVpcRequest) SetHeaders(v map[string]*string) *ListVpcRequest {
	s.Headers = v
	return s
}

type ListVpcResponseBody struct {
	Code      *int                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	VpcList   *ListVpcResponseBodyVpcList `json:"VpcList,omitempty" xml:"VpcList,omitempty" require:"true" type:"Struct"`
}

func (s ListVpcResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponseBody) GoString() string {
	return s.String()
}

func (s *ListVpcResponseBody) SetCode(v int) *ListVpcResponseBody {
	s.Code = &v
	return s
}

func (s *ListVpcResponseBody) SetMessage(v string) *ListVpcResponseBody {
	s.Message = &v
	return s
}

func (s *ListVpcResponseBody) SetRequestId(v string) *ListVpcResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVpcResponseBody) SetVpcList(v *ListVpcResponseBodyVpcList) *ListVpcResponseBody {
	s.VpcList = v
	return s
}

type ListVpcResponseBodyVpcList struct {
	VpcEntity []*ListVpcResponseBodyVpcListVpcEntity `json:"VpcEntity,omitempty" xml:"VpcEntity,omitempty" require:"true" type:"Repeated"`
}

func (s ListVpcResponseBodyVpcList) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponseBodyVpcList) GoString() string {
	return s.String()
}

func (s *ListVpcResponseBodyVpcList) SetVpcEntity(v []*ListVpcResponseBodyVpcListVpcEntity) *ListVpcResponseBodyVpcList {
	s.VpcEntity = v
	return s
}

type ListVpcResponseBodyVpcListVpcEntity struct {
	EcsNum   *int    `json:"EcsNum,omitempty" xml:"EcsNum,omitempty" require:"true"`
	Expired  *bool   `json:"Expired,omitempty" xml:"Expired,omitempty" require:"true"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId    *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	VpcName  *string `json:"VpcName,omitempty" xml:"VpcName,omitempty" require:"true"`
}

func (s ListVpcResponseBodyVpcListVpcEntity) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponseBodyVpcListVpcEntity) GoString() string {
	return s.String()
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetEcsNum(v int) *ListVpcResponseBodyVpcListVpcEntity {
	s.EcsNum = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetExpired(v bool) *ListVpcResponseBodyVpcListVpcEntity {
	s.Expired = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetRegionId(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.RegionId = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetUserId(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.UserId = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetVpcId(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.VpcId = &v
	return s
}

func (s *ListVpcResponseBodyVpcListVpcEntity) SetVpcName(v string) *ListVpcResponseBodyVpcListVpcEntity {
	s.VpcName = &v
	return s
}

type ListVpcResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListVpcResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListVpcResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVpcResponse) GoString() string {
	return s.String()
}

func (s *ListVpcResponse) SetHeaders(v map[string]*string) *ListVpcResponse {
	s.Headers = v
	return s
}

func (s *ListVpcResponse) SetBody(v *ListVpcResponseBody) *ListVpcResponse {
	s.Body = v
	return s
}

type MigrateEcuQuery struct {
	InstanceIds     *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s MigrateEcuQuery) String() string {
	return tea.Prettify(s)
}

func (s MigrateEcuQuery) GoString() string {
	return s.String()
}

func (s *MigrateEcuQuery) SetInstanceIds(v string) *MigrateEcuQuery {
	s.InstanceIds = &v
	return s
}

func (s *MigrateEcuQuery) SetLogicalRegionId(v string) *MigrateEcuQuery {
	s.LogicalRegionId = &v
	return s
}

type MigrateEcuRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *MigrateEcuQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s MigrateEcuRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateEcuRequest) GoString() string {
	return s.String()
}

func (s *MigrateEcuRequest) SetHeaders(v map[string]*string) *MigrateEcuRequest {
	s.Headers = v
	return s
}

func (s *MigrateEcuRequest) SetQuery(v *MigrateEcuQuery) *MigrateEcuRequest {
	s.Query = v
	return s
}

type MigrateEcuResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s MigrateEcuResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MigrateEcuResponseBody) GoString() string {
	return s.String()
}

func (s *MigrateEcuResponseBody) SetCode(v int) *MigrateEcuResponseBody {
	s.Code = &v
	return s
}

func (s *MigrateEcuResponseBody) SetData(v string) *MigrateEcuResponseBody {
	s.Data = &v
	return s
}

func (s *MigrateEcuResponseBody) SetMessage(v string) *MigrateEcuResponseBody {
	s.Message = &v
	return s
}

func (s *MigrateEcuResponseBody) SetRequestId(v string) *MigrateEcuResponseBody {
	s.RequestId = &v
	return s
}

type MigrateEcuResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *MigrateEcuResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s MigrateEcuResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateEcuResponse) GoString() string {
	return s.String()
}

func (s *MigrateEcuResponse) SetHeaders(v map[string]*string) *MigrateEcuResponse {
	s.Headers = v
	return s
}

func (s *MigrateEcuResponse) SetBody(v *MigrateEcuResponseBody) *MigrateEcuResponse {
	s.Body = v
	return s
}

type ModifyScalingRuleQuery struct {
	AcceptEULA           *bool   `json:"AcceptEULA,omitempty" xml:"AcceptEULA,omitempty"`
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupId              *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	InCondition          *string `json:"InCondition,omitempty" xml:"InCondition,omitempty"`
	InCpu                *int    `json:"InCpu,omitempty" xml:"InCpu,omitempty"`
	InDuration           *int    `json:"InDuration,omitempty" xml:"InDuration,omitempty"`
	InEnable             *bool   `json:"InEnable,omitempty" xml:"InEnable,omitempty"`
	InInstanceNum        *int    `json:"InInstanceNum,omitempty" xml:"InInstanceNum,omitempty"`
	InLoad               *int    `json:"InLoad,omitempty" xml:"InLoad,omitempty"`
	InRT                 *int    `json:"InRT,omitempty" xml:"InRT,omitempty"`
	InStep               *int    `json:"InStep,omitempty" xml:"InStep,omitempty"`
	KeyPairName          *string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	MultiAzPolicy        *string `json:"MultiAzPolicy,omitempty" xml:"MultiAzPolicy,omitempty"`
	OutCPU               *int    `json:"OutCPU,omitempty" xml:"OutCPU,omitempty"`
	OutCondition         *string `json:"OutCondition,omitempty" xml:"OutCondition,omitempty"`
	OutDuration          *int    `json:"OutDuration,omitempty" xml:"OutDuration,omitempty"`
	OutEnable            *bool   `json:"OutEnable,omitempty" xml:"OutEnable,omitempty"`
	OutInstanceNum       *int    `json:"OutInstanceNum,omitempty" xml:"OutInstanceNum,omitempty"`
	OutLoad              *int    `json:"OutLoad,omitempty" xml:"OutLoad,omitempty"`
	OutRT                *int    `json:"OutRT,omitempty" xml:"OutRT,omitempty"`
	OutStep              *int    `json:"OutStep,omitempty" xml:"OutStep,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ResourceFrom         *string `json:"ResourceFrom,omitempty" xml:"ResourceFrom,omitempty"`
	ScalingPolicy        *string `json:"ScalingPolicy,omitempty" xml:"ScalingPolicy,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateInstanceId   *string `json:"TemplateInstanceId,omitempty" xml:"TemplateInstanceId,omitempty"`
	TemplateInstanceName *string `json:"TemplateInstanceName,omitempty" xml:"TemplateInstanceName,omitempty"`
	TemplateVersion      *int    `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
	VSwitchIds           *string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty"`
	VpcId                *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ModifyScalingRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleQuery) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleQuery) SetAcceptEULA(v bool) *ModifyScalingRuleQuery {
	s.AcceptEULA = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetAppId(v string) *ModifyScalingRuleQuery {
	s.AppId = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetGroupId(v string) *ModifyScalingRuleQuery {
	s.GroupId = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInCondition(v string) *ModifyScalingRuleQuery {
	s.InCondition = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInCpu(v int) *ModifyScalingRuleQuery {
	s.InCpu = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInDuration(v int) *ModifyScalingRuleQuery {
	s.InDuration = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInEnable(v bool) *ModifyScalingRuleQuery {
	s.InEnable = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInInstanceNum(v int) *ModifyScalingRuleQuery {
	s.InInstanceNum = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInLoad(v int) *ModifyScalingRuleQuery {
	s.InLoad = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInRT(v int) *ModifyScalingRuleQuery {
	s.InRT = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetInStep(v int) *ModifyScalingRuleQuery {
	s.InStep = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetKeyPairName(v string) *ModifyScalingRuleQuery {
	s.KeyPairName = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetMultiAzPolicy(v string) *ModifyScalingRuleQuery {
	s.MultiAzPolicy = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutCPU(v int) *ModifyScalingRuleQuery {
	s.OutCPU = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutCondition(v string) *ModifyScalingRuleQuery {
	s.OutCondition = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutDuration(v int) *ModifyScalingRuleQuery {
	s.OutDuration = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutEnable(v bool) *ModifyScalingRuleQuery {
	s.OutEnable = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutInstanceNum(v int) *ModifyScalingRuleQuery {
	s.OutInstanceNum = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutLoad(v int) *ModifyScalingRuleQuery {
	s.OutLoad = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutRT(v int) *ModifyScalingRuleQuery {
	s.OutRT = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetOutStep(v int) *ModifyScalingRuleQuery {
	s.OutStep = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetPassword(v string) *ModifyScalingRuleQuery {
	s.Password = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetResourceFrom(v string) *ModifyScalingRuleQuery {
	s.ResourceFrom = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetScalingPolicy(v string) *ModifyScalingRuleQuery {
	s.ScalingPolicy = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetTemplateId(v string) *ModifyScalingRuleQuery {
	s.TemplateId = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetTemplateInstanceId(v string) *ModifyScalingRuleQuery {
	s.TemplateInstanceId = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetTemplateInstanceName(v string) *ModifyScalingRuleQuery {
	s.TemplateInstanceName = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetTemplateVersion(v int) *ModifyScalingRuleQuery {
	s.TemplateVersion = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetVSwitchIds(v string) *ModifyScalingRuleQuery {
	s.VSwitchIds = &v
	return s
}

func (s *ModifyScalingRuleQuery) SetVpcId(v string) *ModifyScalingRuleQuery {
	s.VpcId = &v
	return s
}

type ModifyScalingRuleRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ModifyScalingRuleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ModifyScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleRequest) SetHeaders(v map[string]*string) *ModifyScalingRuleRequest {
	s.Headers = v
	return s
}

func (s *ModifyScalingRuleRequest) SetQuery(v *ModifyScalingRuleQuery) *ModifyScalingRuleRequest {
	s.Query = v
	return s
}

type ModifyScalingRuleResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ModifyScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleResponseBody) SetCode(v int) *ModifyScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyScalingRuleResponseBody) SetMessage(v string) *ModifyScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyScalingRuleResponseBody) SetRequestId(v string) *ModifyScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyScalingRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleResponse) SetHeaders(v map[string]*string) *ModifyScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyScalingRuleResponse) SetBody(v *ModifyScalingRuleResponseBody) *ModifyScalingRuleResponse {
	s.Body = v
	return s
}

type QueryApplicationStatusQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
}

func (s QueryApplicationStatusQuery) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusQuery) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusQuery) SetAppId(v string) *QueryApplicationStatusQuery {
	s.AppId = &v
	return s
}

type QueryApplicationStatusRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QueryApplicationStatusQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s QueryApplicationStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusRequest) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusRequest) SetHeaders(v map[string]*string) *QueryApplicationStatusRequest {
	s.Headers = v
	return s
}

func (s *QueryApplicationStatusRequest) SetQuery(v *QueryApplicationStatusQuery) *QueryApplicationStatusRequest {
	s.Query = v
	return s
}

type QueryApplicationStatusResponseBody struct {
	Code      *int                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                    `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AppInfo   *QueryApplicationStatusResponseBodyAppInfo `json:"AppInfo,omitempty" xml:"AppInfo,omitempty" require:"true" type:"Struct"`
}

func (s QueryApplicationStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBody) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBody) SetCode(v int) *QueryApplicationStatusResponseBody {
	s.Code = &v
	return s
}

func (s *QueryApplicationStatusResponseBody) SetMessage(v string) *QueryApplicationStatusResponseBody {
	s.Message = &v
	return s
}

func (s *QueryApplicationStatusResponseBody) SetRequestId(v string) *QueryApplicationStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryApplicationStatusResponseBody) SetAppInfo(v *QueryApplicationStatusResponseBodyAppInfo) *QueryApplicationStatusResponseBody {
	s.AppInfo = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfo struct {
	DeployRecordList *QueryApplicationStatusResponseBodyAppInfoDeployRecordList `json:"DeployRecordList,omitempty" xml:"DeployRecordList,omitempty" require:"true" type:"Struct"`
	EccList          *QueryApplicationStatusResponseBodyAppInfoEccList          `json:"EccList,omitempty" xml:"EccList,omitempty" require:"true" type:"Struct"`
	EcuList          *QueryApplicationStatusResponseBodyAppInfoEcuList          `json:"EcuList,omitempty" xml:"EcuList,omitempty" require:"true" type:"Struct"`
	GroupList        *QueryApplicationStatusResponseBodyAppInfoGroupList        `json:"GroupList,omitempty" xml:"GroupList,omitempty" require:"true" type:"Struct"`
	Application      *QueryApplicationStatusResponseBodyAppInfoApplication      `json:"Application,omitempty" xml:"Application,omitempty" require:"true" type:"Struct"`
}

func (s QueryApplicationStatusResponseBodyAppInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfo) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetDeployRecordList(v *QueryApplicationStatusResponseBodyAppInfoDeployRecordList) *QueryApplicationStatusResponseBodyAppInfo {
	s.DeployRecordList = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetEccList(v *QueryApplicationStatusResponseBodyAppInfoEccList) *QueryApplicationStatusResponseBodyAppInfo {
	s.EccList = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetEcuList(v *QueryApplicationStatusResponseBodyAppInfoEcuList) *QueryApplicationStatusResponseBodyAppInfo {
	s.EcuList = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetGroupList(v *QueryApplicationStatusResponseBodyAppInfoGroupList) *QueryApplicationStatusResponseBodyAppInfo {
	s.GroupList = v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfo) SetApplication(v *QueryApplicationStatusResponseBodyAppInfoApplication) *QueryApplicationStatusResponseBodyAppInfo {
	s.Application = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoDeployRecordList struct {
	DeployRecord []*QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord `json:"DeployRecord,omitempty" xml:"DeployRecord,omitempty" require:"true" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordList) SetDeployRecord(v []*QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) *QueryApplicationStatusResponseBodyAppInfoDeployRecordList {
	s.DeployRecord = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord struct {
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DeployRecordId   *string `json:"DeployRecordId,omitempty" xml:"DeployRecordId,omitempty" require:"true"`
	EccId            *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
	EcuId            *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	PackageMd5       *string `json:"PackageMd5,omitempty" xml:"PackageMd5,omitempty" require:"true"`
	PackageVersionId *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty" require:"true"`
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetDeployRecordId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.DeployRecordId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetEccId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.EccId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetEcuId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.EcuId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetPackageMd5(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.PackageMd5 = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord) SetPackageVersionId(v string) *QueryApplicationStatusResponseBodyAppInfoDeployRecordListDeployRecord {
	s.PackageVersionId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEccList struct {
	Ecc []*QueryApplicationStatusResponseBodyAppInfoEccListEcc `json:"Ecc,omitempty" xml:"Ecc,omitempty" require:"true" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEccList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEccList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccList) SetEcc(v []*QueryApplicationStatusResponseBodyAppInfoEccListEcc) *QueryApplicationStatusResponseBodyAppInfoEccList {
	s.Ecc = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEccListEcc struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppState        *int    `json:"AppState,omitempty" xml:"AppState,omitempty" require:"true"`
	ContainerStatus *string `json:"ContainerStatus,omitempty" xml:"ContainerStatus,omitempty" require:"true"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	EccId           *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
	EcuId           *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Ip              *string `json:"Ip,omitempty" xml:"Ip,omitempty" require:"true"`
	TaskState       *int    `json:"TaskState,omitempty" xml:"TaskState,omitempty" require:"true"`
	UpdateTime      *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	VpcId           *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEccListEcc) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEccListEcc) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetAppId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.AppId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetAppState(v int) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.AppState = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetContainerStatus(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.ContainerStatus = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetEccId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.EccId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetEcuId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.EcuId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetGroupId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.GroupId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetIp(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.Ip = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetTaskState(v int) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.TaskState = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetUpdateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.UpdateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEccListEcc) SetVpcId(v string) *QueryApplicationStatusResponseBodyAppInfoEccListEcc {
	s.VpcId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEcuList struct {
	Ecu []*QueryApplicationStatusResponseBodyAppInfoEcuListEcu `json:"Ecu,omitempty" xml:"Ecu,omitempty" require:"true" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuList) SetEcu(v []*QueryApplicationStatusResponseBodyAppInfoEcuListEcu) *QueryApplicationStatusResponseBodyAppInfoEcuList {
	s.Ecu = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoEcuListEcu struct {
	AvailableCpu  *int    `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty" require:"true"`
	AvailableMem  *int    `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty" require:"true"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuListEcu) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoEcuListEcu) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetAvailableCpu(v int) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.AvailableCpu = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetAvailableMem(v int) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.AvailableMem = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetDockerEnv(v bool) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.DockerEnv = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetEcuId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.EcuId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetGroupId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.GroupId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetHeartbeatTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.HeartbeatTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetInstanceId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.InstanceId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetIpAddr(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.IpAddr = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetName(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.Name = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetOnline(v bool) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.Online = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetRegionId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.RegionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetUpdateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.UpdateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetUserId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.UserId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetVpcId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.VpcId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoEcuListEcu) SetZoneId(v string) *QueryApplicationStatusResponseBodyAppInfoEcuListEcu {
	s.ZoneId = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoGroupList struct {
	Group []*QueryApplicationStatusResponseBodyAppInfoGroupListGroup `json:"Group,omitempty" xml:"Group,omitempty" require:"true" type:"Repeated"`
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupList) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupList) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupList) SetGroup(v []*QueryApplicationStatusResponseBodyAppInfoGroupListGroup) *QueryApplicationStatusResponseBodyAppInfoGroupList {
	s.Group = v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoGroupListGroup struct {
	AppId            *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppVersionId     *string `json:"AppVersionId,omitempty" xml:"AppVersionId,omitempty" require:"true"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName        *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	GroupType        *int    `json:"GroupType,omitempty" xml:"GroupType,omitempty" require:"true"`
	PackageVersionId *string `json:"PackageVersionId,omitempty" xml:"PackageVersionId,omitempty" require:"true"`
	UpdateTime       *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupListGroup) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoGroupListGroup) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetAppId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.AppId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetAppVersionId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.AppVersionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetClusterId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.ClusterId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetGroupId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.GroupId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetGroupName(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.GroupName = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetGroupType(v int) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.GroupType = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetPackageVersionId(v string) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.PackageVersionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoGroupListGroup) SetUpdateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoGroupListGroup {
	s.UpdateTime = &v
	return s
}

type QueryApplicationStatusResponseBodyAppInfoApplication struct {
	ApplicationId        *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty" require:"true"`
	BuildPackageId       *int    `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty" require:"true"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Cpu                  *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime           *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Dockerize            *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty" require:"true"`
	Email                *string `json:"Email,omitempty" xml:"Email,omitempty" require:"true"`
	HealthCheckUrl       *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty" require:"true"`
	InstanceCount        *int    `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty" require:"true"`
	LaunchTime           *int64  `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty" require:"true"`
	Memory               *int    `json:"Memory,omitempty" xml:"Memory,omitempty" require:"true"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Owner                *string `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	Phone                *string `json:"Phone,omitempty" xml:"Phone,omitempty" require:"true"`
	Port                 *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RunningInstanceCount *int    `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty" require:"true"`
	UserId               *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s QueryApplicationStatusResponseBodyAppInfoApplication) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponseBodyAppInfoApplication) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetApplicationId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.ApplicationId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetBuildPackageId(v int) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.BuildPackageId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetClusterId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.ClusterId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetCpu(v int) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Cpu = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetCreateTime(v int64) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.CreateTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetDockerize(v bool) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Dockerize = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetEmail(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Email = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetHealthCheckUrl(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.HealthCheckUrl = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetInstanceCount(v int) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.InstanceCount = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetLaunchTime(v int64) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.LaunchTime = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetMemory(v int) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Memory = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetName(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Name = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetOwner(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Owner = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetPhone(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Phone = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetPort(v int) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.Port = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetRegionId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.RegionId = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetRunningInstanceCount(v int) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.RunningInstanceCount = &v
	return s
}

func (s *QueryApplicationStatusResponseBodyAppInfoApplication) SetUserId(v string) *QueryApplicationStatusResponseBodyAppInfoApplication {
	s.UserId = &v
	return s
}

type QueryApplicationStatusResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryApplicationStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryApplicationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryApplicationStatusResponse) GoString() string {
	return s.String()
}

func (s *QueryApplicationStatusResponse) SetHeaders(v map[string]*string) *QueryApplicationStatusResponse {
	s.Headers = v
	return s
}

func (s *QueryApplicationStatusResponse) SetBody(v *QueryApplicationStatusResponseBody) *QueryApplicationStatusResponse {
	s.Body = v
	return s
}

type QueryConfigCenterQuery struct {
	DataId          *string `json:"DataId,omitempty" xml:"DataId,omitempty" require:"true"`
	Group           *string `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty" require:"true"`
}

func (s QueryConfigCenterQuery) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigCenterQuery) GoString() string {
	return s.String()
}

func (s *QueryConfigCenterQuery) SetDataId(v string) *QueryConfigCenterQuery {
	s.DataId = &v
	return s
}

func (s *QueryConfigCenterQuery) SetGroup(v string) *QueryConfigCenterQuery {
	s.Group = &v
	return s
}

func (s *QueryConfigCenterQuery) SetLogicalRegionId(v string) *QueryConfigCenterQuery {
	s.LogicalRegionId = &v
	return s
}

type QueryConfigCenterRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QueryConfigCenterQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s QueryConfigCenterRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigCenterRequest) GoString() string {
	return s.String()
}

func (s *QueryConfigCenterRequest) SetHeaders(v map[string]*string) *QueryConfigCenterRequest {
	s.Headers = v
	return s
}

func (s *QueryConfigCenterRequest) SetQuery(v *QueryConfigCenterQuery) *QueryConfigCenterRequest {
	s.Query = v
	return s
}

type QueryConfigCenterResponseBody struct {
	Code             *int                                           `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message          *string                                        `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId        *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ConfigCenterInfo *QueryConfigCenterResponseBodyConfigCenterInfo `json:"configCenterInfo,omitempty" xml:"configCenterInfo,omitempty" require:"true" type:"Struct"`
}

func (s QueryConfigCenterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigCenterResponseBody) GoString() string {
	return s.String()
}

func (s *QueryConfigCenterResponseBody) SetCode(v int) *QueryConfigCenterResponseBody {
	s.Code = &v
	return s
}

func (s *QueryConfigCenterResponseBody) SetMessage(v string) *QueryConfigCenterResponseBody {
	s.Message = &v
	return s
}

func (s *QueryConfigCenterResponseBody) SetRequestId(v string) *QueryConfigCenterResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryConfigCenterResponseBody) SetConfigCenterInfo(v *QueryConfigCenterResponseBodyConfigCenterInfo) *QueryConfigCenterResponseBody {
	s.ConfigCenterInfo = v
	return s
}

type QueryConfigCenterResponseBodyConfigCenterInfo struct {
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	DataId  *string `json:"DataId,omitempty" xml:"DataId,omitempty" require:"true"`
	Group   *string `json:"Group,omitempty" xml:"Group,omitempty" require:"true"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s QueryConfigCenterResponseBodyConfigCenterInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigCenterResponseBodyConfigCenterInfo) GoString() string {
	return s.String()
}

func (s *QueryConfigCenterResponseBodyConfigCenterInfo) SetAppName(v string) *QueryConfigCenterResponseBodyConfigCenterInfo {
	s.AppName = &v
	return s
}

func (s *QueryConfigCenterResponseBodyConfigCenterInfo) SetContent(v string) *QueryConfigCenterResponseBodyConfigCenterInfo {
	s.Content = &v
	return s
}

func (s *QueryConfigCenterResponseBodyConfigCenterInfo) SetDataId(v string) *QueryConfigCenterResponseBodyConfigCenterInfo {
	s.DataId = &v
	return s
}

func (s *QueryConfigCenterResponseBodyConfigCenterInfo) SetGroup(v string) *QueryConfigCenterResponseBodyConfigCenterInfo {
	s.Group = &v
	return s
}

func (s *QueryConfigCenterResponseBodyConfigCenterInfo) SetId(v string) *QueryConfigCenterResponseBodyConfigCenterInfo {
	s.Id = &v
	return s
}

type QueryConfigCenterResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryConfigCenterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryConfigCenterResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConfigCenterResponse) GoString() string {
	return s.String()
}

func (s *QueryConfigCenterResponse) SetHeaders(v map[string]*string) *QueryConfigCenterResponse {
	s.Headers = v
	return s
}

func (s *QueryConfigCenterResponse) SetBody(v *QueryConfigCenterResponseBody) *QueryConfigCenterResponse {
	s.Body = v
	return s
}

type QueryEccInfoQuery struct {
	EccId *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
}

func (s QueryEccInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoQuery) GoString() string {
	return s.String()
}

func (s *QueryEccInfoQuery) SetEccId(v string) *QueryEccInfoQuery {
	s.EccId = &v
	return s
}

type QueryEccInfoRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QueryEccInfoQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s QueryEccInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryEccInfoRequest) SetHeaders(v map[string]*string) *QueryEccInfoRequest {
	s.Headers = v
	return s
}

func (s *QueryEccInfoRequest) SetQuery(v *QueryEccInfoQuery) *QueryEccInfoRequest {
	s.Query = v
	return s
}

type QueryEccInfoResponseBody struct {
	Code      *int                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EccInfo   *QueryEccInfoResponseBodyEccInfo `json:"EccInfo,omitempty" xml:"EccInfo,omitempty" require:"true" type:"Struct"`
}

func (s QueryEccInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEccInfoResponseBody) SetCode(v int) *QueryEccInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryEccInfoResponseBody) SetMessage(v string) *QueryEccInfoResponseBody {
	s.Message = &v
	return s
}

func (s *QueryEccInfoResponseBody) SetRequestId(v string) *QueryEccInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEccInfoResponseBody) SetEccInfo(v *QueryEccInfoResponseBodyEccInfo) *QueryEccInfoResponseBody {
	s.EccInfo = v
	return s
}

type QueryEccInfoResponseBodyEccInfo struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EccId          *string `json:"EccId,omitempty" xml:"EccId,omitempty" require:"true"`
	EcuId          *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	GroupName      *string `json:"GroupName,omitempty" xml:"GroupName,omitempty" require:"true"`
	PackageMd5     *string `json:"PackageMd5,omitempty" xml:"PackageMd5,omitempty" require:"true"`
	PackageVersion *string `json:"PackageVersion,omitempty" xml:"PackageVersion,omitempty" require:"true"`
	VpcId          *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
}

func (s QueryEccInfoResponseBodyEccInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoResponseBodyEccInfo) GoString() string {
	return s.String()
}

func (s *QueryEccInfoResponseBodyEccInfo) SetAppId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.AppId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetEccId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.EccId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetEcuId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.EcuId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetGroupId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.GroupId = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetGroupName(v string) *QueryEccInfoResponseBodyEccInfo {
	s.GroupName = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetPackageMd5(v string) *QueryEccInfoResponseBodyEccInfo {
	s.PackageMd5 = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetPackageVersion(v string) *QueryEccInfoResponseBodyEccInfo {
	s.PackageVersion = &v
	return s
}

func (s *QueryEccInfoResponseBodyEccInfo) SetVpcId(v string) *QueryEccInfoResponseBodyEccInfo {
	s.VpcId = &v
	return s
}

type QueryEccInfoResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEccInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEccInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEccInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryEccInfoResponse) SetHeaders(v map[string]*string) *QueryEccInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryEccInfoResponse) SetBody(v *QueryEccInfoResponseBody) *QueryEccInfoResponse {
	s.Body = v
	return s
}

type QueryK8sClusterLogProjectInfoQuery struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
}

func (s QueryK8sClusterLogProjectInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s QueryK8sClusterLogProjectInfoQuery) GoString() string {
	return s.String()
}

func (s *QueryK8sClusterLogProjectInfoQuery) SetClusterId(v string) *QueryK8sClusterLogProjectInfoQuery {
	s.ClusterId = &v
	return s
}

type QueryK8sClusterLogProjectInfoRequest struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QueryK8sClusterLogProjectInfoQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s QueryK8sClusterLogProjectInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryK8sClusterLogProjectInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryK8sClusterLogProjectInfoRequest) SetHeaders(v map[string]*string) *QueryK8sClusterLogProjectInfoRequest {
	s.Headers = v
	return s
}

func (s *QueryK8sClusterLogProjectInfoRequest) SetQuery(v *QueryK8sClusterLogProjectInfoQuery) *QueryK8sClusterLogProjectInfoRequest {
	s.Query = v
	return s
}

type QueryK8sClusterLogProjectInfoResponseBody struct {
	Code        *int                                                  `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message     *string                                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId   *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ProjectInfo *QueryK8sClusterLogProjectInfoResponseBodyProjectInfo `json:"ProjectInfo,omitempty" xml:"ProjectInfo,omitempty" require:"true" type:"Struct"`
}

func (s QueryK8sClusterLogProjectInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryK8sClusterLogProjectInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryK8sClusterLogProjectInfoResponseBody) SetCode(v int) *QueryK8sClusterLogProjectInfoResponseBody {
	s.Code = &v
	return s
}

func (s *QueryK8sClusterLogProjectInfoResponseBody) SetMessage(v string) *QueryK8sClusterLogProjectInfoResponseBody {
	s.Message = &v
	return s
}

func (s *QueryK8sClusterLogProjectInfoResponseBody) SetRequestId(v string) *QueryK8sClusterLogProjectInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryK8sClusterLogProjectInfoResponseBody) SetProjectInfo(v *QueryK8sClusterLogProjectInfoResponseBodyProjectInfo) *QueryK8sClusterLogProjectInfoResponseBody {
	s.ProjectInfo = v
	return s
}

type QueryK8sClusterLogProjectInfoResponseBodyProjectInfo struct {
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty" require:"true"`
}

func (s QueryK8sClusterLogProjectInfoResponseBodyProjectInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryK8sClusterLogProjectInfoResponseBodyProjectInfo) GoString() string {
	return s.String()
}

func (s *QueryK8sClusterLogProjectInfoResponseBodyProjectInfo) SetProjectName(v string) *QueryK8sClusterLogProjectInfoResponseBodyProjectInfo {
	s.ProjectName = &v
	return s
}

type QueryK8sClusterLogProjectInfoResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryK8sClusterLogProjectInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryK8sClusterLogProjectInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryK8sClusterLogProjectInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryK8sClusterLogProjectInfoResponse) SetHeaders(v map[string]*string) *QueryK8sClusterLogProjectInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryK8sClusterLogProjectInfoResponse) SetBody(v *QueryK8sClusterLogProjectInfoResponseBody) *QueryK8sClusterLogProjectInfoResponse {
	s.Body = v
	return s
}

type QueryMigrateEcuListQuery struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s QueryMigrateEcuListQuery) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListQuery) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListQuery) SetLogicalRegionId(v string) *QueryMigrateEcuListQuery {
	s.LogicalRegionId = &v
	return s
}

type QueryMigrateEcuListRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QueryMigrateEcuListQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s QueryMigrateEcuListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListRequest) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListRequest) SetHeaders(v map[string]*string) *QueryMigrateEcuListRequest {
	s.Headers = v
	return s
}

func (s *QueryMigrateEcuListRequest) SetQuery(v *QueryMigrateEcuListQuery) *QueryMigrateEcuListRequest {
	s.Query = v
	return s
}

type QueryMigrateEcuListResponseBody struct {
	Code          *int                                          `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string                                       `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	EcuEntityList *QueryMigrateEcuListResponseBodyEcuEntityList `json:"EcuEntityList,omitempty" xml:"EcuEntityList,omitempty" require:"true" type:"Struct"`
}

func (s QueryMigrateEcuListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponseBody) SetCode(v int) *QueryMigrateEcuListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMigrateEcuListResponseBody) SetMessage(v string) *QueryMigrateEcuListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryMigrateEcuListResponseBody) SetRequestId(v string) *QueryMigrateEcuListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBody) SetEcuEntityList(v *QueryMigrateEcuListResponseBodyEcuEntityList) *QueryMigrateEcuListResponseBody {
	s.EcuEntityList = v
	return s
}

type QueryMigrateEcuListResponseBodyEcuEntityList struct {
	EcuEntity []*QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity `json:"EcuEntity,omitempty" xml:"EcuEntity,omitempty" require:"true" type:"Repeated"`
}

func (s QueryMigrateEcuListResponseBodyEcuEntityList) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponseBodyEcuEntityList) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityList) SetEcuEntity(v []*QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) *QueryMigrateEcuListResponseBodyEcuEntityList {
	s.EcuEntity = v
	return s
}

type QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity struct {
	AvailableCpu  *int    `json:"AvailableCpu,omitempty" xml:"AvailableCpu,omitempty" require:"true"`
	AvailableMem  *int    `json:"AvailableMem,omitempty" xml:"AvailableMem,omitempty" require:"true"`
	Cpu           *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime    *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	DockerEnv     *bool   `json:"DockerEnv,omitempty" xml:"DockerEnv,omitempty" require:"true"`
	EcuId         *string `json:"EcuId,omitempty" xml:"EcuId,omitempty" require:"true"`
	HeartbeatTime *int64  `json:"HeartbeatTime,omitempty" xml:"HeartbeatTime,omitempty" require:"true"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty" require:"true"`
	IpAddr        *string `json:"IpAddr,omitempty" xml:"IpAddr,omitempty" require:"true"`
	Mem           *int    `json:"Mem,omitempty" xml:"Mem,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Online        *bool   `json:"Online,omitempty" xml:"Online,omitempty" require:"true"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	UpdateTime    *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty" require:"true"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty" require:"true"`
}

func (s QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetAvailableCpu(v int) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.AvailableCpu = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetAvailableMem(v int) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.AvailableMem = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetCpu(v int) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Cpu = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetCreateTime(v int64) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.CreateTime = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetDockerEnv(v bool) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.DockerEnv = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetEcuId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.EcuId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetHeartbeatTime(v int64) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.HeartbeatTime = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetInstanceId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.InstanceId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetIpAddr(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.IpAddr = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetMem(v int) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Mem = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetName(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Name = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetOnline(v bool) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.Online = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetRegionId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.RegionId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetUpdateTime(v int64) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.UpdateTime = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetUserId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.UserId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetVpcId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.VpcId = &v
	return s
}

func (s *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity) SetZoneId(v string) *QueryMigrateEcuListResponseBodyEcuEntityListEcuEntity {
	s.ZoneId = &v
	return s
}

type QueryMigrateEcuListResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMigrateEcuListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMigrateEcuListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateEcuListResponse) GoString() string {
	return s.String()
}

func (s *QueryMigrateEcuListResponse) SetHeaders(v map[string]*string) *QueryMigrateEcuListResponse {
	s.Headers = v
	return s
}

func (s *QueryMigrateEcuListResponse) SetBody(v *QueryMigrateEcuListResponseBody) *QueryMigrateEcuListResponse {
	s.Body = v
	return s
}

type QueryMigrateRegionListQuery struct {
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
}

func (s QueryMigrateRegionListQuery) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListQuery) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListQuery) SetLogicalRegionId(v string) *QueryMigrateRegionListQuery {
	s.LogicalRegionId = &v
	return s
}

type QueryMigrateRegionListRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QueryMigrateRegionListQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s QueryMigrateRegionListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListRequest) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListRequest) SetHeaders(v map[string]*string) *QueryMigrateRegionListRequest {
	s.Headers = v
	return s
}

func (s *QueryMigrateRegionListRequest) SetQuery(v *QueryMigrateRegionListQuery) *QueryMigrateRegionListRequest {
	s.Query = v
	return s
}

type QueryMigrateRegionListResponseBody struct {
	Code             *int                                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message          *string                                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionEntityList *QueryMigrateRegionListResponseBodyRegionEntityList `json:"RegionEntityList,omitempty" xml:"RegionEntityList,omitempty" require:"true" type:"Struct"`
}

func (s QueryMigrateRegionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponseBody) SetCode(v int) *QueryMigrateRegionListResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMigrateRegionListResponseBody) SetMessage(v string) *QueryMigrateRegionListResponseBody {
	s.Message = &v
	return s
}

func (s *QueryMigrateRegionListResponseBody) SetRequestId(v string) *QueryMigrateRegionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMigrateRegionListResponseBody) SetRegionEntityList(v *QueryMigrateRegionListResponseBodyRegionEntityList) *QueryMigrateRegionListResponseBody {
	s.RegionEntityList = v
	return s
}

type QueryMigrateRegionListResponseBodyRegionEntityList struct {
	RegionEntity []*QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity `json:"RegionEntity,omitempty" xml:"RegionEntity,omitempty" require:"true" type:"Repeated"`
}

func (s QueryMigrateRegionListResponseBodyRegionEntityList) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponseBodyRegionEntityList) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponseBodyRegionEntityList) SetRegionEntity(v []*QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) *QueryMigrateRegionListResponseBodyRegionEntityList {
	s.RegionEntity = v
	return s
}

type QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity struct {
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty" require:"true"`
	RegionNo   *string `json:"RegionNo,omitempty" xml:"RegionNo,omitempty" require:"true"`
}

func (s QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) SetRegionName(v string) *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity {
	s.RegionName = &v
	return s
}

func (s *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity) SetRegionNo(v string) *QueryMigrateRegionListResponseBodyRegionEntityListRegionEntity {
	s.RegionNo = &v
	return s
}

type QueryMigrateRegionListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMigrateRegionListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMigrateRegionListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMigrateRegionListResponse) GoString() string {
	return s.String()
}

func (s *QueryMigrateRegionListResponse) SetHeaders(v map[string]*string) *QueryMigrateRegionListResponse {
	s.Headers = v
	return s
}

func (s *QueryMigrateRegionListResponse) SetBody(v *QueryMigrateRegionListResponseBody) *QueryMigrateRegionListResponse {
	s.Body = v
	return s
}

type QueryRegionConfigRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
}

func (s QueryRegionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigRequest) SetHeaders(v map[string]*string) *QueryRegionConfigRequest {
	s.Headers = v
	return s
}

type QueryRegionConfigResponseBody struct {
	Code         *int                                       `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message      *string                                    `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	RegionConfig *QueryRegionConfigResponseBodyRegionConfig `json:"RegionConfig,omitempty" xml:"RegionConfig,omitempty" require:"true" type:"Struct"`
}

func (s QueryRegionConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponseBody) SetCode(v int) *QueryRegionConfigResponseBody {
	s.Code = &v
	return s
}

func (s *QueryRegionConfigResponseBody) SetMessage(v string) *QueryRegionConfigResponseBody {
	s.Message = &v
	return s
}

func (s *QueryRegionConfigResponseBody) SetRequestId(v string) *QueryRegionConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryRegionConfigResponseBody) SetRegionConfig(v *QueryRegionConfigResponseBodyRegionConfig) *QueryRegionConfigResponseBody {
	s.RegionConfig = v
	return s
}

type QueryRegionConfigResponseBodyRegionConfig struct {
	AddressServerHost  *string                                                    `json:"AddressServerHost,omitempty" xml:"AddressServerHost,omitempty" require:"true"`
	AgentInstallScript *string                                                    `json:"AgentInstallScript,omitempty" xml:"AgentInstallScript,omitempty" require:"true"`
	FileServerType     *string                                                    `json:"FileServerType,omitempty" xml:"FileServerType,omitempty" require:"true"`
	Id                 *string                                                    `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	ImageId            *string                                                    `json:"ImageId,omitempty" xml:"ImageId,omitempty" require:"true"`
	Name               *string                                                    `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	No                 *int                                                       `json:"No,omitempty" xml:"No,omitempty" require:"true"`
	Tag                *string                                                    `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	FileServerConfig   *QueryRegionConfigResponseBodyRegionConfigFileServerConfig `json:"FileServerConfig,omitempty" xml:"FileServerConfig,omitempty" require:"true" type:"Struct"`
}

func (s QueryRegionConfigResponseBodyRegionConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponseBodyRegionConfig) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetAddressServerHost(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.AddressServerHost = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetAgentInstallScript(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.AgentInstallScript = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetFileServerType(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.FileServerType = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetId(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.Id = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetImageId(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.ImageId = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetName(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.Name = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetNo(v int) *QueryRegionConfigResponseBodyRegionConfig {
	s.No = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetTag(v string) *QueryRegionConfigResponseBodyRegionConfig {
	s.Tag = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfig) SetFileServerConfig(v *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) *QueryRegionConfigResponseBodyRegionConfig {
	s.FileServerConfig = v
	return s
}

type QueryRegionConfigResponseBodyRegionConfigFileServerConfig struct {
	Bucket      *string `json:"Bucket,omitempty" xml:"Bucket,omitempty" require:"true"`
	InternalUrl *string `json:"InternalUrl,omitempty" xml:"InternalUrl,omitempty" require:"true"`
	PublicUrl   *string `json:"PublicUrl,omitempty" xml:"PublicUrl,omitempty" require:"true"`
	VpcUrl      *string `json:"VpcUrl,omitempty" xml:"VpcUrl,omitempty" require:"true"`
}

func (s QueryRegionConfigResponseBodyRegionConfigFileServerConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponseBodyRegionConfigFileServerConfig) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetBucket(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.Bucket = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetInternalUrl(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.InternalUrl = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetPublicUrl(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.PublicUrl = &v
	return s
}

func (s *QueryRegionConfigResponseBodyRegionConfigFileServerConfig) SetVpcUrl(v string) *QueryRegionConfigResponseBodyRegionConfigFileServerConfig {
	s.VpcUrl = &v
	return s
}

type QueryRegionConfigResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryRegionConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryRegionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRegionConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryRegionConfigResponse) SetHeaders(v map[string]*string) *QueryRegionConfigResponse {
	s.Headers = v
	return s
}

func (s *QueryRegionConfigResponse) SetBody(v *QueryRegionConfigResponseBody) *QueryRegionConfigResponse {
	s.Body = v
	return s
}

type QueryServiceTimeConfigQuery struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Namespace      *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	PageNumber     *int    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Region         *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ServiceGroup   *string `json:"ServiceGroup,omitempty" xml:"ServiceGroup,omitempty"`
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty" require:"true"`
	ServiceType    *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty" require:"true"`
	ServiceVersion *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty" require:"true"`
	Source         *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s QueryServiceTimeConfigQuery) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceTimeConfigQuery) GoString() string {
	return s.String()
}

func (s *QueryServiceTimeConfigQuery) SetAppId(v string) *QueryServiceTimeConfigQuery {
	s.AppId = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetNamespace(v string) *QueryServiceTimeConfigQuery {
	s.Namespace = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetPageNumber(v int) *QueryServiceTimeConfigQuery {
	s.PageNumber = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetPageSize(v int) *QueryServiceTimeConfigQuery {
	s.PageSize = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetRegion(v string) *QueryServiceTimeConfigQuery {
	s.Region = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetServiceGroup(v string) *QueryServiceTimeConfigQuery {
	s.ServiceGroup = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetServiceName(v string) *QueryServiceTimeConfigQuery {
	s.ServiceName = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetServiceType(v string) *QueryServiceTimeConfigQuery {
	s.ServiceType = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetServiceVersion(v string) *QueryServiceTimeConfigQuery {
	s.ServiceVersion = &v
	return s
}

func (s *QueryServiceTimeConfigQuery) SetSource(v string) *QueryServiceTimeConfigQuery {
	s.Source = &v
	return s
}

type QueryServiceTimeConfigRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QueryServiceTimeConfigQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s QueryServiceTimeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceTimeConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryServiceTimeConfigRequest) SetHeaders(v map[string]*string) *QueryServiceTimeConfigRequest {
	s.Headers = v
	return s
}

func (s *QueryServiceTimeConfigRequest) SetQuery(v *QueryServiceTimeConfigQuery) *QueryServiceTimeConfigRequest {
	s.Query = v
	return s
}

type QueryServiceTimeConfigResponseBody struct {
	Code    *int                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	Success *bool                                   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data    *QueryServiceTimeConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s QueryServiceTimeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceTimeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *QueryServiceTimeConfigResponseBody) SetCode(v int) *QueryServiceTimeConfigResponseBody {
	s.Code = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBody) SetMessage(v string) *QueryServiceTimeConfigResponseBody {
	s.Message = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBody) SetSuccess(v bool) *QueryServiceTimeConfigResponseBody {
	s.Success = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBody) SetData(v *QueryServiceTimeConfigResponseBodyData) *QueryServiceTimeConfigResponseBody {
	s.Data = v
	return s
}

type QueryServiceTimeConfigResponseBodyData struct {
	CurrentPage *int                                            `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty" require:"true"`
	PageNumber  *int                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty" require:"true"`
	PageSize    *int                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty" require:"true"`
	TotalSize   *int                                            `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result      []*QueryServiceTimeConfigResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s QueryServiceTimeConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceTimeConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *QueryServiceTimeConfigResponseBodyData) SetCurrentPage(v int) *QueryServiceTimeConfigResponseBodyData {
	s.CurrentPage = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyData) SetPageNumber(v int) *QueryServiceTimeConfigResponseBodyData {
	s.PageNumber = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyData) SetPageSize(v int) *QueryServiceTimeConfigResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyData) SetTotalSize(v int) *QueryServiceTimeConfigResponseBodyData {
	s.TotalSize = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyData) SetResult(v []*QueryServiceTimeConfigResponseBodyDataResult) *QueryServiceTimeConfigResponseBodyData {
	s.Result = v
	return s
}

type QueryServiceTimeConfigResponseBodyDataResult struct {
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Path            *string `json:"Path,omitempty" xml:"Path,omitempty" require:"true"`
	Timeout         *string `json:"Timeout,omitempty" xml:"Timeout,omitempty" require:"true"`
}

func (s QueryServiceTimeConfigResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceTimeConfigResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *QueryServiceTimeConfigResponseBodyDataResult) SetConsumerAppId(v string) *QueryServiceTimeConfigResponseBodyDataResult {
	s.ConsumerAppId = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyDataResult) SetConsumerAppName(v string) *QueryServiceTimeConfigResponseBodyDataResult {
	s.ConsumerAppName = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyDataResult) SetId(v int64) *QueryServiceTimeConfigResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyDataResult) SetPath(v string) *QueryServiceTimeConfigResponseBodyDataResult {
	s.Path = &v
	return s
}

func (s *QueryServiceTimeConfigResponseBodyDataResult) SetTimeout(v string) *QueryServiceTimeConfigResponseBodyDataResult {
	s.Timeout = &v
	return s
}

type QueryServiceTimeConfigResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryServiceTimeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryServiceTimeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryServiceTimeConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryServiceTimeConfigResponse) SetHeaders(v map[string]*string) *QueryServiceTimeConfigResponse {
	s.Headers = v
	return s
}

func (s *QueryServiceTimeConfigResponse) SetBody(v *QueryServiceTimeConfigResponseBody) *QueryServiceTimeConfigResponse {
	s.Body = v
	return s
}

type QuerySlsLogStoreListQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CurrentPage *int    `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	PageSize    *int    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s QuerySlsLogStoreListQuery) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListQuery) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListQuery) SetAppId(v string) *QuerySlsLogStoreListQuery {
	s.AppId = &v
	return s
}

func (s *QuerySlsLogStoreListQuery) SetCurrentPage(v int) *QuerySlsLogStoreListQuery {
	s.CurrentPage = &v
	return s
}

func (s *QuerySlsLogStoreListQuery) SetPageSize(v int) *QuerySlsLogStoreListQuery {
	s.PageSize = &v
	return s
}

func (s *QuerySlsLogStoreListQuery) SetType(v string) *QuerySlsLogStoreListQuery {
	s.Type = &v
	return s
}

type QuerySlsLogStoreListRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *QuerySlsLogStoreListQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s QuerySlsLogStoreListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListRequest) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListRequest) SetHeaders(v map[string]*string) *QuerySlsLogStoreListRequest {
	s.Headers = v
	return s
}

func (s *QuerySlsLogStoreListRequest) SetQuery(v *QuerySlsLogStoreListQuery) *QuerySlsLogStoreListRequest {
	s.Query = v
	return s
}

type QuerySlsLogStoreListResponseBody struct {
	Code      *int                                      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TotalSize *int                                      `json:"TotalSize,omitempty" xml:"TotalSize,omitempty" require:"true"`
	Result    []*QuerySlsLogStoreListResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" require:"true" type:"Repeated"`
}

func (s QuerySlsLogStoreListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListResponseBody) SetCode(v int) *QuerySlsLogStoreListResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetMessage(v string) *QuerySlsLogStoreListResponseBody {
	s.Message = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetRequestId(v string) *QuerySlsLogStoreListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetTotalSize(v int) *QuerySlsLogStoreListResponseBody {
	s.TotalSize = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBody) SetResult(v []*QuerySlsLogStoreListResponseBodyResult) *QuerySlsLogStoreListResponseBody {
	s.Result = v
	return s
}

type QuerySlsLogStoreListResponseBodyResult struct {
	ConsumerSide *string `json:"ConsumerSide,omitempty" xml:"ConsumerSide,omitempty" require:"true"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Link         *string `json:"Link,omitempty" xml:"Link,omitempty" require:"true"`
	Logstore     *string `json:"Logstore,omitempty" xml:"Logstore,omitempty" require:"true"`
	Project      *string `json:"Project,omitempty" xml:"Project,omitempty" require:"true"`
	Source       *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s QuerySlsLogStoreListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetConsumerSide(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.ConsumerSide = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetCreateTime(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetLink(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Link = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetLogstore(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Logstore = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetProject(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Project = &v
	return s
}

func (s *QuerySlsLogStoreListResponseBodyResult) SetSource(v string) *QuerySlsLogStoreListResponseBodyResult {
	s.Source = &v
	return s
}

type QuerySlsLogStoreListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySlsLogStoreListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySlsLogStoreListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySlsLogStoreListResponse) GoString() string {
	return s.String()
}

func (s *QuerySlsLogStoreListResponse) SetHeaders(v map[string]*string) *QuerySlsLogStoreListResponse {
	s.Headers = v
	return s
}

func (s *QuerySlsLogStoreListResponse) SetBody(v *QuerySlsLogStoreListResponseBody) *QuerySlsLogStoreListResponse {
	s.Body = v
	return s
}

type RemoveMockRuleQuery struct {
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
}

func (s RemoveMockRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleQuery) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleQuery) SetId(v int64) *RemoveMockRuleQuery {
	s.Id = &v
	return s
}

type RemoveMockRuleRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *RemoveMockRuleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s RemoveMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleRequest) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleRequest) SetHeaders(v map[string]*string) *RemoveMockRuleRequest {
	s.Headers = v
	return s
}

func (s *RemoveMockRuleRequest) SetQuery(v *RemoveMockRuleQuery) *RemoveMockRuleRequest {
	s.Query = v
	return s
}

type RemoveMockRuleResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpCode  *string                         `json:"HttpCode,omitempty" xml:"HttpCode,omitempty" require:"true"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *RemoveMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s RemoveMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleResponseBody) SetCode(v string) *RemoveMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetHttpCode(v string) *RemoveMockRuleResponseBody {
	s.HttpCode = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetMessage(v string) *RemoveMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetRequestId(v string) *RemoveMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetSuccess(v bool) *RemoveMockRuleResponseBody {
	s.Success = &v
	return s
}

func (s *RemoveMockRuleResponseBody) SetData(v *RemoveMockRuleResponseBodyData) *RemoveMockRuleResponseBody {
	s.Data = v
	return s
}

type RemoveMockRuleResponseBodyData struct {
	AccountId       *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId   *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson       *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId     *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ProviderAppId   *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region          *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson  *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source          *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s RemoveMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleResponseBodyData) SetAccountId(v string) *RemoveMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetConsumerAppId(v string) *RemoveMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetConsumerAppName(v string) *RemoveMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetEnable(v bool) *RemoveMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetExtraJson(v string) *RemoveMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetId(v int64) *RemoveMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetName(v string) *RemoveMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetNamespaceId(v string) *RemoveMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetProviderAppId(v string) *RemoveMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetProviderAppName(v string) *RemoveMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetRegion(v string) *RemoveMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetScMockItemJson(v string) *RemoveMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *RemoveMockRuleResponseBodyData) SetSource(v string) *RemoveMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type RemoveMockRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveMockRuleResponse) GoString() string {
	return s.String()
}

func (s *RemoveMockRuleResponse) SetHeaders(v map[string]*string) *RemoveMockRuleResponse {
	s.Headers = v
	return s
}

func (s *RemoveMockRuleResponse) SetBody(v *RemoveMockRuleResponseBody) *RemoveMockRuleResponse {
	s.Body = v
	return s
}

type ResetApplicationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty" require:"true"`
}

func (s ResetApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s ResetApplicationQuery) GoString() string {
	return s.String()
}

func (s *ResetApplicationQuery) SetAppId(v string) *ResetApplicationQuery {
	s.AppId = &v
	return s
}

func (s *ResetApplicationQuery) SetEccInfo(v string) *ResetApplicationQuery {
	s.EccInfo = &v
	return s
}

type ResetApplicationRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ResetApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ResetApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetApplicationRequest) GoString() string {
	return s.String()
}

func (s *ResetApplicationRequest) SetHeaders(v map[string]*string) *ResetApplicationRequest {
	s.Headers = v
	return s
}

func (s *ResetApplicationRequest) SetQuery(v *ResetApplicationQuery) *ResetApplicationRequest {
	s.Query = v
	return s
}

type ResetApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ResetApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ResetApplicationResponseBody) SetChangeOrderId(v string) *ResetApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ResetApplicationResponseBody) SetCode(v int) *ResetApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ResetApplicationResponseBody) SetMessage(v string) *ResetApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ResetApplicationResponseBody) SetRequestId(v string) *ResetApplicationResponseBody {
	s.RequestId = &v
	return s
}

type ResetApplicationResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResetApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResetApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetApplicationResponse) GoString() string {
	return s.String()
}

func (s *ResetApplicationResponse) SetHeaders(v map[string]*string) *ResetApplicationResponse {
	s.Headers = v
	return s
}

func (s *ResetApplicationResponse) SetBody(v *ResetApplicationResponseBody) *ResetApplicationResponse {
	s.Body = v
	return s
}

type RestartApplicationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
}

func (s RestartApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationQuery) GoString() string {
	return s.String()
}

func (s *RestartApplicationQuery) SetAppId(v string) *RestartApplicationQuery {
	s.AppId = &v
	return s
}

func (s *RestartApplicationQuery) SetEccInfo(v string) *RestartApplicationQuery {
	s.EccInfo = &v
	return s
}

type RestartApplicationRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *RestartApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s RestartApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationRequest) GoString() string {
	return s.String()
}

func (s *RestartApplicationRequest) SetHeaders(v map[string]*string) *RestartApplicationRequest {
	s.Headers = v
	return s
}

func (s *RestartApplicationRequest) SetQuery(v *RestartApplicationQuery) *RestartApplicationRequest {
	s.Query = v
	return s
}

type RestartApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RestartApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RestartApplicationResponseBody) SetChangeOrderId(v string) *RestartApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *RestartApplicationResponseBody) SetCode(v int) *RestartApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RestartApplicationResponseBody) SetMessage(v string) *RestartApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RestartApplicationResponseBody) SetRequestId(v string) *RestartApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RestartApplicationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestartApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartApplicationResponse) GoString() string {
	return s.String()
}

func (s *RestartApplicationResponse) SetHeaders(v map[string]*string) *RestartApplicationResponse {
	s.Headers = v
	return s
}

func (s *RestartApplicationResponse) SetBody(v *RestartApplicationResponseBody) *RestartApplicationResponse {
	s.Body = v
	return s
}

type RestartK8sApplicationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Timeout *int    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s RestartK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s RestartK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *RestartK8sApplicationQuery) SetAppId(v string) *RestartK8sApplicationQuery {
	s.AppId = &v
	return s
}

func (s *RestartK8sApplicationQuery) SetTimeout(v int) *RestartK8sApplicationQuery {
	s.Timeout = &v
	return s
}

type RestartK8sApplicationRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *RestartK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s RestartK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RestartK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *RestartK8sApplicationRequest) SetHeaders(v map[string]*string) *RestartK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *RestartK8sApplicationRequest) SetQuery(v *RestartK8sApplicationQuery) *RestartK8sApplicationRequest {
	s.Query = v
	return s
}

type RestartK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RestartK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestartK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RestartK8sApplicationResponseBody) SetChangeOrderId(v string) *RestartK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *RestartK8sApplicationResponseBody) SetCode(v int) *RestartK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RestartK8sApplicationResponseBody) SetMessage(v string) *RestartK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RestartK8sApplicationResponseBody) SetRequestId(v string) *RestartK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RestartK8sApplicationResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestartK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestartK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RestartK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *RestartK8sApplicationResponse) SetHeaders(v map[string]*string) *RestartK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *RestartK8sApplicationResponse) SetBody(v *RestartK8sApplicationResponseBody) *RestartK8sApplicationResponse {
	s.Body = v
	return s
}

type RetryChangeOrderTaskQuery struct {
	RetryStatus *bool   `json:"RetryStatus,omitempty" xml:"RetryStatus,omitempty" require:"true"`
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty" require:"true"`
}

func (s RetryChangeOrderTaskQuery) String() string {
	return tea.Prettify(s)
}

func (s RetryChangeOrderTaskQuery) GoString() string {
	return s.String()
}

func (s *RetryChangeOrderTaskQuery) SetRetryStatus(v bool) *RetryChangeOrderTaskQuery {
	s.RetryStatus = &v
	return s
}

func (s *RetryChangeOrderTaskQuery) SetTaskId(v string) *RetryChangeOrderTaskQuery {
	s.TaskId = &v
	return s
}

type RetryChangeOrderTaskRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *RetryChangeOrderTaskQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s RetryChangeOrderTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryChangeOrderTaskRequest) GoString() string {
	return s.String()
}

func (s *RetryChangeOrderTaskRequest) SetHeaders(v map[string]*string) *RetryChangeOrderTaskRequest {
	s.Headers = v
	return s
}

func (s *RetryChangeOrderTaskRequest) SetQuery(v *RetryChangeOrderTaskQuery) *RetryChangeOrderTaskRequest {
	s.Query = v
	return s
}

type RetryChangeOrderTaskResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RetryChangeOrderTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RetryChangeOrderTaskResponseBody) GoString() string {
	return s.String()
}

func (s *RetryChangeOrderTaskResponseBody) SetCode(v int) *RetryChangeOrderTaskResponseBody {
	s.Code = &v
	return s
}

func (s *RetryChangeOrderTaskResponseBody) SetData(v string) *RetryChangeOrderTaskResponseBody {
	s.Data = &v
	return s
}

func (s *RetryChangeOrderTaskResponseBody) SetMessage(v string) *RetryChangeOrderTaskResponseBody {
	s.Message = &v
	return s
}

func (s *RetryChangeOrderTaskResponseBody) SetRequestId(v string) *RetryChangeOrderTaskResponseBody {
	s.RequestId = &v
	return s
}

type RetryChangeOrderTaskResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RetryChangeOrderTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RetryChangeOrderTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryChangeOrderTaskResponse) GoString() string {
	return s.String()
}

func (s *RetryChangeOrderTaskResponse) SetHeaders(v map[string]*string) *RetryChangeOrderTaskResponse {
	s.Headers = v
	return s
}

func (s *RetryChangeOrderTaskResponse) SetBody(v *RetryChangeOrderTaskResponseBody) *RetryChangeOrderTaskResponse {
	s.Body = v
	return s
}

type RollbackApplicationQuery struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Batch          *int    `json:"Batch,omitempty" xml:"Batch,omitempty"`
	BatchWaitTime  *int    `json:"BatchWaitTime,omitempty" xml:"BatchWaitTime,omitempty"`
	GroupId        *string `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	HistoryVersion *string `json:"HistoryVersion,omitempty" xml:"HistoryVersion,omitempty" require:"true"`
}

func (s RollbackApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationQuery) GoString() string {
	return s.String()
}

func (s *RollbackApplicationQuery) SetAppId(v string) *RollbackApplicationQuery {
	s.AppId = &v
	return s
}

func (s *RollbackApplicationQuery) SetBatch(v int) *RollbackApplicationQuery {
	s.Batch = &v
	return s
}

func (s *RollbackApplicationQuery) SetBatchWaitTime(v int) *RollbackApplicationQuery {
	s.BatchWaitTime = &v
	return s
}

func (s *RollbackApplicationQuery) SetGroupId(v string) *RollbackApplicationQuery {
	s.GroupId = &v
	return s
}

func (s *RollbackApplicationQuery) SetHistoryVersion(v string) *RollbackApplicationQuery {
	s.HistoryVersion = &v
	return s
}

type RollbackApplicationRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *RollbackApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s RollbackApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationRequest) GoString() string {
	return s.String()
}

func (s *RollbackApplicationRequest) SetHeaders(v map[string]*string) *RollbackApplicationRequest {
	s.Headers = v
	return s
}

func (s *RollbackApplicationRequest) SetQuery(v *RollbackApplicationQuery) *RollbackApplicationRequest {
	s.Query = v
	return s
}

type RollbackApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s RollbackApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponseBody) SetChangeOrderId(v string) *RollbackApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetCode(v int) *RollbackApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetMessage(v string) *RollbackApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *RollbackApplicationResponseBody) SetRequestId(v string) *RollbackApplicationResponseBody {
	s.RequestId = &v
	return s
}

type RollbackApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RollbackApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackApplicationResponse) GoString() string {
	return s.String()
}

func (s *RollbackApplicationResponse) SetHeaders(v map[string]*string) *RollbackApplicationResponse {
	s.Headers = v
	return s
}

func (s *RollbackApplicationResponse) SetBody(v *RollbackApplicationResponseBody) *RollbackApplicationResponse {
	s.Body = v
	return s
}

type RollbackChangeOrderQuery struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
}

func (s RollbackChangeOrderQuery) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderQuery) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderQuery) SetChangeOrderId(v string) *RollbackChangeOrderQuery {
	s.ChangeOrderId = &v
	return s
}

type RollbackChangeOrderRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *RollbackChangeOrderQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s RollbackChangeOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderRequest) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderRequest) SetHeaders(v map[string]*string) *RollbackChangeOrderRequest {
	s.Headers = v
	return s
}

func (s *RollbackChangeOrderRequest) SetQuery(v *RollbackChangeOrderQuery) *RollbackChangeOrderRequest {
	s.Query = v
	return s
}

type RollbackChangeOrderResponseBody struct {
	Code      *int                                 `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	ErrorCode *string                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty" require:"true"`
	Message   *string                              `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	TraceId   *string                              `json:"TraceId,omitempty" xml:"TraceId,omitempty" require:"true"`
	Data      *RollbackChangeOrderResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s RollbackChangeOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderResponseBody) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderResponseBody) SetCode(v int) *RollbackChangeOrderResponseBody {
	s.Code = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetErrorCode(v string) *RollbackChangeOrderResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetMessage(v string) *RollbackChangeOrderResponseBody {
	s.Message = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetRequestId(v string) *RollbackChangeOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetTraceId(v string) *RollbackChangeOrderResponseBody {
	s.TraceId = &v
	return s
}

func (s *RollbackChangeOrderResponseBody) SetData(v *RollbackChangeOrderResponseBodyData) *RollbackChangeOrderResponseBody {
	s.Data = v
	return s
}

type RollbackChangeOrderResponseBodyData struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
}

func (s RollbackChangeOrderResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderResponseBodyData) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderResponseBodyData) SetChangeOrderId(v string) *RollbackChangeOrderResponseBodyData {
	s.ChangeOrderId = &v
	return s
}

type RollbackChangeOrderResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RollbackChangeOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RollbackChangeOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s RollbackChangeOrderResponse) GoString() string {
	return s.String()
}

func (s *RollbackChangeOrderResponse) SetHeaders(v map[string]*string) *RollbackChangeOrderResponse {
	s.Headers = v
	return s
}

func (s *RollbackChangeOrderResponse) SetBody(v *RollbackChangeOrderResponseBody) *RollbackChangeOrderResponse {
	s.Body = v
	return s
}

type ScaleInApplicationQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EccInfo     *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty" require:"true"`
	ForceStatus *bool   `json:"ForceStatus,omitempty" xml:"ForceStatus,omitempty"`
}

func (s ScaleInApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s ScaleInApplicationQuery) GoString() string {
	return s.String()
}

func (s *ScaleInApplicationQuery) SetAppId(v string) *ScaleInApplicationQuery {
	s.AppId = &v
	return s
}

func (s *ScaleInApplicationQuery) SetEccInfo(v string) *ScaleInApplicationQuery {
	s.EccInfo = &v
	return s
}

func (s *ScaleInApplicationQuery) SetForceStatus(v bool) *ScaleInApplicationQuery {
	s.ForceStatus = &v
	return s
}

type ScaleInApplicationRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ScaleInApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ScaleInApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleInApplicationRequest) GoString() string {
	return s.String()
}

func (s *ScaleInApplicationRequest) SetHeaders(v map[string]*string) *ScaleInApplicationRequest {
	s.Headers = v
	return s
}

func (s *ScaleInApplicationRequest) SetQuery(v *ScaleInApplicationQuery) *ScaleInApplicationRequest {
	s.Query = v
	return s
}

type ScaleInApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
}

func (s ScaleInApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleInApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleInApplicationResponseBody) SetChangeOrderId(v string) *ScaleInApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleInApplicationResponseBody) SetCode(v int) *ScaleInApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleInApplicationResponseBody) SetMessage(v string) *ScaleInApplicationResponseBody {
	s.Message = &v
	return s
}

type ScaleInApplicationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleInApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleInApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleInApplicationResponse) GoString() string {
	return s.String()
}

func (s *ScaleInApplicationResponse) SetHeaders(v map[string]*string) *ScaleInApplicationResponse {
	s.Headers = v
	return s
}

func (s *ScaleInApplicationResponse) SetBody(v *ScaleInApplicationResponseBody) *ScaleInApplicationResponse {
	s.Body = v
	return s
}

type ScaleK8sApplicationQuery struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Replicas *int    `json:"Replicas,omitempty" xml:"Replicas,omitempty" require:"true"`
	Timeout  *int    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s ScaleK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s ScaleK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *ScaleK8sApplicationQuery) SetAppId(v string) *ScaleK8sApplicationQuery {
	s.AppId = &v
	return s
}

func (s *ScaleK8sApplicationQuery) SetReplicas(v int) *ScaleK8sApplicationQuery {
	s.Replicas = &v
	return s
}

func (s *ScaleK8sApplicationQuery) SetTimeout(v int) *ScaleK8sApplicationQuery {
	s.Timeout = &v
	return s
}

type ScaleK8sApplicationRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ScaleK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ScaleK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *ScaleK8sApplicationRequest) SetHeaders(v map[string]*string) *ScaleK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *ScaleK8sApplicationRequest) SetQuery(v *ScaleK8sApplicationQuery) *ScaleK8sApplicationRequest {
	s.Query = v
	return s
}

type ScaleK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ScaleK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleK8sApplicationResponseBody) SetChangeOrderId(v string) *ScaleK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleK8sApplicationResponseBody) SetCode(v int) *ScaleK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleK8sApplicationResponseBody) SetMessage(v string) *ScaleK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ScaleK8sApplicationResponseBody) SetRequestId(v string) *ScaleK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type ScaleK8sApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *ScaleK8sApplicationResponse) SetHeaders(v map[string]*string) *ScaleK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *ScaleK8sApplicationResponse) SetBody(v *ScaleK8sApplicationResponseBody) *ScaleK8sApplicationResponse {
	s.Body = v
	return s
}

type ScaleOutApplicationQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	DeployGroup *string `json:"DeployGroup,omitempty" xml:"DeployGroup,omitempty" require:"true"`
	EcuInfo     *string `json:"EcuInfo,omitempty" xml:"EcuInfo,omitempty" require:"true"`
}

func (s ScaleOutApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s ScaleOutApplicationQuery) GoString() string {
	return s.String()
}

func (s *ScaleOutApplicationQuery) SetAppId(v string) *ScaleOutApplicationQuery {
	s.AppId = &v
	return s
}

func (s *ScaleOutApplicationQuery) SetDeployGroup(v string) *ScaleOutApplicationQuery {
	s.DeployGroup = &v
	return s
}

func (s *ScaleOutApplicationQuery) SetEcuInfo(v string) *ScaleOutApplicationQuery {
	s.EcuInfo = &v
	return s
}

type ScaleOutApplicationRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ScaleOutApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ScaleOutApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleOutApplicationRequest) GoString() string {
	return s.String()
}

func (s *ScaleOutApplicationRequest) SetHeaders(v map[string]*string) *ScaleOutApplicationRequest {
	s.Headers = v
	return s
}

func (s *ScaleOutApplicationRequest) SetQuery(v *ScaleOutApplicationQuery) *ScaleOutApplicationRequest {
	s.Query = v
	return s
}

type ScaleOutApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ScaleOutApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleOutApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleOutApplicationResponseBody) SetChangeOrderId(v string) *ScaleOutApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleOutApplicationResponseBody) SetCode(v int) *ScaleOutApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleOutApplicationResponseBody) SetMessage(v string) *ScaleOutApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *ScaleOutApplicationResponseBody) SetRequestId(v string) *ScaleOutApplicationResponseBody {
	s.RequestId = &v
	return s
}

type ScaleOutApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleOutApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleOutApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleOutApplicationResponse) GoString() string {
	return s.String()
}

func (s *ScaleOutApplicationResponse) SetHeaders(v map[string]*string) *ScaleOutApplicationResponse {
	s.Headers = v
	return s
}

func (s *ScaleOutApplicationResponse) SetBody(v *ScaleOutApplicationResponseBody) *ScaleOutApplicationResponse {
	s.Body = v
	return s
}

type ScaleoutApplicationWithNewInstancesQuery struct {
	AppId                    *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AutoRenew                *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoRenewPeriod          *int    `json:"AutoRenewPeriod,omitempty" xml:"AutoRenewPeriod,omitempty"`
	ClusterId                *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	GroupId                  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	InstanceChargePeriod     *int    `json:"InstanceChargePeriod,omitempty" xml:"InstanceChargePeriod,omitempty"`
	InstanceChargePeriodUnit *string `json:"InstanceChargePeriodUnit,omitempty" xml:"InstanceChargePeriodUnit,omitempty"`
	InstanceChargeType       *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	ScalingNum               *int    `json:"ScalingNum,omitempty" xml:"ScalingNum,omitempty" require:"true"`
	ScalingPolicy            *string `json:"ScalingPolicy,omitempty" xml:"ScalingPolicy,omitempty"`
	TemplateId               *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateInstanceId       *string `json:"TemplateInstanceId,omitempty" xml:"TemplateInstanceId,omitempty"`
	TemplateVersion          *string `json:"TemplateVersion,omitempty" xml:"TemplateVersion,omitempty"`
}

func (s ScaleoutApplicationWithNewInstancesQuery) String() string {
	return tea.Prettify(s)
}

func (s ScaleoutApplicationWithNewInstancesQuery) GoString() string {
	return s.String()
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetAppId(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.AppId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetAutoRenew(v bool) *ScaleoutApplicationWithNewInstancesQuery {
	s.AutoRenew = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetAutoRenewPeriod(v int) *ScaleoutApplicationWithNewInstancesQuery {
	s.AutoRenewPeriod = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetClusterId(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.ClusterId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetGroupId(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.GroupId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetInstanceChargePeriod(v int) *ScaleoutApplicationWithNewInstancesQuery {
	s.InstanceChargePeriod = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetInstanceChargePeriodUnit(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.InstanceChargePeriodUnit = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetInstanceChargeType(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.InstanceChargeType = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetScalingNum(v int) *ScaleoutApplicationWithNewInstancesQuery {
	s.ScalingNum = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetScalingPolicy(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.ScalingPolicy = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetTemplateId(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.TemplateId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetTemplateInstanceId(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.TemplateInstanceId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesQuery) SetTemplateVersion(v string) *ScaleoutApplicationWithNewInstancesQuery {
	s.TemplateVersion = &v
	return s
}

type ScaleoutApplicationWithNewInstancesRequest struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *ScaleoutApplicationWithNewInstancesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s ScaleoutApplicationWithNewInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ScaleoutApplicationWithNewInstancesRequest) GoString() string {
	return s.String()
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetHeaders(v map[string]*string) *ScaleoutApplicationWithNewInstancesRequest {
	s.Headers = v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesRequest) SetQuery(v *ScaleoutApplicationWithNewInstancesQuery) *ScaleoutApplicationWithNewInstancesRequest {
	s.Query = v
	return s
}

type ScaleoutApplicationWithNewInstancesResponseBody struct {
	ChangeOrderId *string   `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int      `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string   `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	InstanceIds   []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" require:"true" type:"Repeated"`
}

func (s ScaleoutApplicationWithNewInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ScaleoutApplicationWithNewInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetChangeOrderId(v string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetCode(v int) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.Code = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetMessage(v string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.Message = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetRequestId(v string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponseBody) SetInstanceIds(v []*string) *ScaleoutApplicationWithNewInstancesResponseBody {
	s.InstanceIds = v
	return s
}

type ScaleoutApplicationWithNewInstancesResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ScaleoutApplicationWithNewInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ScaleoutApplicationWithNewInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ScaleoutApplicationWithNewInstancesResponse) GoString() string {
	return s.String()
}

func (s *ScaleoutApplicationWithNewInstancesResponse) SetHeaders(v map[string]*string) *ScaleoutApplicationWithNewInstancesResponse {
	s.Headers = v
	return s
}

func (s *ScaleoutApplicationWithNewInstancesResponse) SetBody(v *ScaleoutApplicationWithNewInstancesResponseBody) *ScaleoutApplicationWithNewInstancesResponse {
	s.Body = v
	return s
}

type StartApplicationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
}

func (s StartApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationQuery) GoString() string {
	return s.String()
}

func (s *StartApplicationQuery) SetAppId(v string) *StartApplicationQuery {
	s.AppId = &v
	return s
}

func (s *StartApplicationQuery) SetEccInfo(v string) *StartApplicationQuery {
	s.EccInfo = &v
	return s
}

type StartApplicationRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *StartApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s StartApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationRequest) GoString() string {
	return s.String()
}

func (s *StartApplicationRequest) SetHeaders(v map[string]*string) *StartApplicationRequest {
	s.Headers = v
	return s
}

func (s *StartApplicationRequest) SetQuery(v *StartApplicationQuery) *StartApplicationRequest {
	s.Query = v
	return s
}

type StartApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s StartApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StartApplicationResponseBody) SetChangeOrderId(v string) *StartApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StartApplicationResponseBody) SetCode(v int) *StartApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StartApplicationResponseBody) SetMessage(v string) *StartApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StartApplicationResponseBody) SetRequestId(v string) *StartApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StartApplicationResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartApplicationResponse) GoString() string {
	return s.String()
}

func (s *StartApplicationResponse) SetHeaders(v map[string]*string) *StartApplicationResponse {
	s.Headers = v
	return s
}

func (s *StartApplicationResponse) SetBody(v *StartApplicationResponseBody) *StartApplicationResponse {
	s.Body = v
	return s
}

type StartK8sApplicationQuery struct {
	AppId    *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Replicas *int    `json:"Replicas,omitempty" xml:"Replicas,omitempty"`
	Timeout  *int    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s StartK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s StartK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *StartK8sApplicationQuery) SetAppId(v string) *StartK8sApplicationQuery {
	s.AppId = &v
	return s
}

func (s *StartK8sApplicationQuery) SetReplicas(v int) *StartK8sApplicationQuery {
	s.Replicas = &v
	return s
}

func (s *StartK8sApplicationQuery) SetTimeout(v int) *StartK8sApplicationQuery {
	s.Timeout = &v
	return s
}

type StartK8sApplicationRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *StartK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s StartK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StartK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *StartK8sApplicationRequest) SetHeaders(v map[string]*string) *StartK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *StartK8sApplicationRequest) SetQuery(v *StartK8sApplicationQuery) *StartK8sApplicationRequest {
	s.Query = v
	return s
}

type StartK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s StartK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StartK8sApplicationResponseBody) SetChangeOrderId(v string) *StartK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StartK8sApplicationResponseBody) SetCode(v int) *StartK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StartK8sApplicationResponseBody) SetMessage(v string) *StartK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StartK8sApplicationResponseBody) SetRequestId(v string) *StartK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StartK8sApplicationResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StartK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *StartK8sApplicationResponse) SetHeaders(v map[string]*string) *StartK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *StartK8sApplicationResponse) SetBody(v *StartK8sApplicationResponseBody) *StartK8sApplicationResponse {
	s.Body = v
	return s
}

type StopApplicationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EccInfo *string `json:"EccInfo,omitempty" xml:"EccInfo,omitempty"`
}

func (s StopApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationQuery) GoString() string {
	return s.String()
}

func (s *StopApplicationQuery) SetAppId(v string) *StopApplicationQuery {
	s.AppId = &v
	return s
}

func (s *StopApplicationQuery) SetEccInfo(v string) *StopApplicationQuery {
	s.EccInfo = &v
	return s
}

type StopApplicationRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *StopApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s StopApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationRequest) GoString() string {
	return s.String()
}

func (s *StopApplicationRequest) SetHeaders(v map[string]*string) *StopApplicationRequest {
	s.Headers = v
	return s
}

func (s *StopApplicationRequest) SetQuery(v *StopApplicationQuery) *StopApplicationRequest {
	s.Query = v
	return s
}

type StopApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s StopApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StopApplicationResponseBody) SetChangeOrderId(v string) *StopApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StopApplicationResponseBody) SetCode(v int) *StopApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StopApplicationResponseBody) SetMessage(v string) *StopApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StopApplicationResponseBody) SetRequestId(v string) *StopApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StopApplicationResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopApplicationResponse) GoString() string {
	return s.String()
}

func (s *StopApplicationResponse) SetHeaders(v map[string]*string) *StopApplicationResponse {
	s.Headers = v
	return s
}

func (s *StopApplicationResponse) SetBody(v *StopApplicationResponseBody) *StopApplicationResponse {
	s.Body = v
	return s
}

type StopK8sApplicationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Timeout *int    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s StopK8sApplicationQuery) String() string {
	return tea.Prettify(s)
}

func (s StopK8sApplicationQuery) GoString() string {
	return s.String()
}

func (s *StopK8sApplicationQuery) SetAppId(v string) *StopK8sApplicationQuery {
	s.AppId = &v
	return s
}

func (s *StopK8sApplicationQuery) SetTimeout(v int) *StopK8sApplicationQuery {
	s.Timeout = &v
	return s
}

type StopK8sApplicationRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *StopK8sApplicationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s StopK8sApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopK8sApplicationRequest) GoString() string {
	return s.String()
}

func (s *StopK8sApplicationRequest) SetHeaders(v map[string]*string) *StopK8sApplicationRequest {
	s.Headers = v
	return s
}

func (s *StopK8sApplicationRequest) SetQuery(v *StopK8sApplicationQuery) *StopK8sApplicationRequest {
	s.Query = v
	return s
}

type StopK8sApplicationResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s StopK8sApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopK8sApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *StopK8sApplicationResponseBody) SetChangeOrderId(v string) *StopK8sApplicationResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *StopK8sApplicationResponseBody) SetCode(v int) *StopK8sApplicationResponseBody {
	s.Code = &v
	return s
}

func (s *StopK8sApplicationResponseBody) SetMessage(v string) *StopK8sApplicationResponseBody {
	s.Message = &v
	return s
}

func (s *StopK8sApplicationResponseBody) SetRequestId(v string) *StopK8sApplicationResponseBody {
	s.RequestId = &v
	return s
}

type StopK8sApplicationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopK8sApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopK8sApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopK8sApplicationResponse) GoString() string {
	return s.String()
}

func (s *StopK8sApplicationResponse) SetHeaders(v map[string]*string) *StopK8sApplicationResponse {
	s.Headers = v
	return s
}

func (s *StopK8sApplicationResponse) SetBody(v *StopK8sApplicationResponseBody) *StopK8sApplicationResponse {
	s.Body = v
	return s
}

type SwitchAdvancedMonitoringQuery struct {
	AppId                    *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	EnableAdvancedMonitoring *bool   `json:"EnableAdvancedMonitoring,omitempty" xml:"EnableAdvancedMonitoring,omitempty"`
}

func (s SwitchAdvancedMonitoringQuery) String() string {
	return tea.Prettify(s)
}

func (s SwitchAdvancedMonitoringQuery) GoString() string {
	return s.String()
}

func (s *SwitchAdvancedMonitoringQuery) SetAppId(v string) *SwitchAdvancedMonitoringQuery {
	s.AppId = &v
	return s
}

func (s *SwitchAdvancedMonitoringQuery) SetEnableAdvancedMonitoring(v bool) *SwitchAdvancedMonitoringQuery {
	s.EnableAdvancedMonitoring = &v
	return s
}

type SwitchAdvancedMonitoringRequest struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *SwitchAdvancedMonitoringQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s SwitchAdvancedMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s SwitchAdvancedMonitoringRequest) GoString() string {
	return s.String()
}

func (s *SwitchAdvancedMonitoringRequest) SetHeaders(v map[string]*string) *SwitchAdvancedMonitoringRequest {
	s.Headers = v
	return s
}

func (s *SwitchAdvancedMonitoringRequest) SetQuery(v *SwitchAdvancedMonitoringQuery) *SwitchAdvancedMonitoringRequest {
	s.Query = v
	return s
}

type SwitchAdvancedMonitoringResponseBody struct {
	AdvancedMonitoringEnabled *bool   `json:"AdvancedMonitoringEnabled,omitempty" xml:"AdvancedMonitoringEnabled,omitempty" require:"true"`
	Code                      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message                   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId                 *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s SwitchAdvancedMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SwitchAdvancedMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *SwitchAdvancedMonitoringResponseBody) SetAdvancedMonitoringEnabled(v bool) *SwitchAdvancedMonitoringResponseBody {
	s.AdvancedMonitoringEnabled = &v
	return s
}

func (s *SwitchAdvancedMonitoringResponseBody) SetCode(v int) *SwitchAdvancedMonitoringResponseBody {
	s.Code = &v
	return s
}

func (s *SwitchAdvancedMonitoringResponseBody) SetMessage(v string) *SwitchAdvancedMonitoringResponseBody {
	s.Message = &v
	return s
}

func (s *SwitchAdvancedMonitoringResponseBody) SetRequestId(v string) *SwitchAdvancedMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type SwitchAdvancedMonitoringResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SwitchAdvancedMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SwitchAdvancedMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s SwitchAdvancedMonitoringResponse) GoString() string {
	return s.String()
}

func (s *SwitchAdvancedMonitoringResponse) SetHeaders(v map[string]*string) *SwitchAdvancedMonitoringResponse {
	s.Headers = v
	return s
}

func (s *SwitchAdvancedMonitoringResponse) SetBody(v *SwitchAdvancedMonitoringResponseBody) *SwitchAdvancedMonitoringResponse {
	s.Body = v
	return s
}

type SynchronizeResourceQuery struct {
	ResourceIds *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s SynchronizeResourceQuery) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeResourceQuery) GoString() string {
	return s.String()
}

func (s *SynchronizeResourceQuery) SetResourceIds(v string) *SynchronizeResourceQuery {
	s.ResourceIds = &v
	return s
}

func (s *SynchronizeResourceQuery) SetType(v string) *SynchronizeResourceQuery {
	s.Type = &v
	return s
}

type SynchronizeResourceRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *SynchronizeResourceQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s SynchronizeResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeResourceRequest) GoString() string {
	return s.String()
}

func (s *SynchronizeResourceRequest) SetHeaders(v map[string]*string) *SynchronizeResourceRequest {
	s.Headers = v
	return s
}

func (s *SynchronizeResourceRequest) SetQuery(v *SynchronizeResourceQuery) *SynchronizeResourceRequest {
	s.Query = v
	return s
}

type SynchronizeResourceResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
}

func (s SynchronizeResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeResourceResponseBody) GoString() string {
	return s.String()
}

func (s *SynchronizeResourceResponseBody) SetCode(v int) *SynchronizeResourceResponseBody {
	s.Code = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetData(v string) *SynchronizeResourceResponseBody {
	s.Data = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetMessage(v string) *SynchronizeResourceResponseBody {
	s.Message = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetRequestId(v string) *SynchronizeResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SynchronizeResourceResponseBody) SetSuccess(v bool) *SynchronizeResourceResponseBody {
	s.Success = &v
	return s
}

type SynchronizeResourceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SynchronizeResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SynchronizeResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeResourceResponse) GoString() string {
	return s.String()
}

func (s *SynchronizeResourceResponse) SetHeaders(v map[string]*string) *SynchronizeResourceResponse {
	s.Headers = v
	return s
}

func (s *SynchronizeResourceResponse) SetBody(v *SynchronizeResourceResponseBody) *SynchronizeResourceResponse {
	s.Body = v
	return s
}

type TagResourcesQuery struct {
	ResourceIds      *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty" require:"true"`
	ResourceRegionId *string `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty" require:"true"`
	ResourceType     *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	Tags             *string `json:"Tags,omitempty" xml:"Tags,omitempty" require:"true"`
}

func (s TagResourcesQuery) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesQuery) GoString() string {
	return s.String()
}

func (s *TagResourcesQuery) SetResourceIds(v string) *TagResourcesQuery {
	s.ResourceIds = &v
	return s
}

func (s *TagResourcesQuery) SetResourceRegionId(v string) *TagResourcesQuery {
	s.ResourceRegionId = &v
	return s
}

func (s *TagResourcesQuery) SetResourceType(v string) *TagResourcesQuery {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesQuery) SetTags(v string) *TagResourcesQuery {
	s.Tags = &v
	return s
}

type TagResourcesRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *TagResourcesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetHeaders(v map[string]*string) *TagResourcesRequest {
	s.Headers = v
	return s
}

func (s *TagResourcesRequest) SetQuery(v *TagResourcesQuery) *TagResourcesRequest {
	s.Query = v
	return s
}

type TagResourcesResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetCode(v int) *TagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *TagResourcesResponseBody) SetMessage(v string) *TagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type ToggleGrayIngressBody struct {
	Enable          *bool   `json:"Enable,omitempty" xml:"Enable,omitempty"`
	LogicalRegionId *string `json:"LogicalRegionId,omitempty" xml:"LogicalRegionId,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
}

func (s ToggleGrayIngressBody) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressBody) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressBody) SetEnable(v bool) *ToggleGrayIngressBody {
	s.Enable = &v
	return s
}

func (s *ToggleGrayIngressBody) SetLogicalRegionId(v string) *ToggleGrayIngressBody {
	s.LogicalRegionId = &v
	return s
}

func (s *ToggleGrayIngressBody) SetPointcutName(v string) *ToggleGrayIngressBody {
	s.PointcutName = &v
	return s
}

type ToggleGrayIngressRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *ToggleGrayIngressBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ToggleGrayIngressRequest) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressRequest) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressRequest) SetHeaders(v map[string]*string) *ToggleGrayIngressRequest {
	s.Headers = v
	return s
}

func (s *ToggleGrayIngressRequest) SetBody(v *ToggleGrayIngressBody) *ToggleGrayIngressRequest {
	s.Body = v
	return s
}

type ToggleGrayIngressResponseBody struct {
	Code      *int                               `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *int                               `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *ToggleGrayIngressResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s ToggleGrayIngressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressResponseBody) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressResponseBody) SetCode(v int) *ToggleGrayIngressResponseBody {
	s.Code = &v
	return s
}

func (s *ToggleGrayIngressResponseBody) SetMessage(v int) *ToggleGrayIngressResponseBody {
	s.Message = &v
	return s
}

func (s *ToggleGrayIngressResponseBody) SetRequestId(v string) *ToggleGrayIngressResponseBody {
	s.RequestId = &v
	return s
}

func (s *ToggleGrayIngressResponseBody) SetData(v *ToggleGrayIngressResponseBodyData) *ToggleGrayIngressResponseBody {
	s.Data = v
	return s
}

type ToggleGrayIngressResponseBodyData struct {
	PointcutId *int64                                 `json:"PointcutId,omitempty" xml:"PointcutId,omitempty" require:"true"`
	RegionId   *string                                `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	Spec       *ToggleGrayIngressResponseBodyDataSpec `json:"Spec,omitempty" xml:"Spec,omitempty" require:"true" type:"Struct"`
}

func (s ToggleGrayIngressResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressResponseBodyData) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressResponseBodyData) SetPointcutId(v int64) *ToggleGrayIngressResponseBodyData {
	s.PointcutId = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyData) SetRegionId(v string) *ToggleGrayIngressResponseBodyData {
	s.RegionId = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyData) SetSpec(v *ToggleGrayIngressResponseBodyDataSpec) *ToggleGrayIngressResponseBodyData {
	s.Spec = v
	return s
}

type ToggleGrayIngressResponseBodyDataSpec struct {
	Enable   *bool                                          `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	Selector map[string]interface{}                         `json:"Selector,omitempty" xml:"Selector,omitempty" require:"true"`
	ShowName *string                                        `json:"ShowName,omitempty" xml:"ShowName,omitempty" require:"true"`
	Tag      *string                                        `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	Scopes   []*ToggleGrayIngressResponseBodyDataSpecScopes `json:"Scopes,omitempty" xml:"Scopes,omitempty" require:"true" type:"Repeated"`
}

func (s ToggleGrayIngressResponseBodyDataSpec) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressResponseBodyDataSpec) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressResponseBodyDataSpec) SetEnable(v bool) *ToggleGrayIngressResponseBodyDataSpec {
	s.Enable = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpec) SetSelector(v map[string]interface{}) *ToggleGrayIngressResponseBodyDataSpec {
	s.Selector = v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpec) SetShowName(v string) *ToggleGrayIngressResponseBodyDataSpec {
	s.ShowName = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpec) SetTag(v string) *ToggleGrayIngressResponseBodyDataSpec {
	s.Tag = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpec) SetScopes(v []*ToggleGrayIngressResponseBodyDataSpecScopes) *ToggleGrayIngressResponseBodyDataSpec {
	s.Scopes = v
	return s
}

type ToggleGrayIngressResponseBodyDataSpecScopes struct {
	Id        *int64                                                `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Key       *string                                               `json:"Key,omitempty" xml:"Key,omitempty" require:"true"`
	Value     *string                                               `json:"Value,omitempty" xml:"Value,omitempty" require:"true"`
	ValueFrom *ToggleGrayIngressResponseBodyDataSpecScopesValueFrom `json:"ValueFrom,omitempty" xml:"ValueFrom,omitempty" require:"true" type:"Struct"`
}

func (s ToggleGrayIngressResponseBodyDataSpecScopes) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressResponseBodyDataSpecScopes) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressResponseBodyDataSpecScopes) SetId(v int64) *ToggleGrayIngressResponseBodyDataSpecScopes {
	s.Id = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpecScopes) SetKey(v string) *ToggleGrayIngressResponseBodyDataSpecScopes {
	s.Key = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpecScopes) SetValue(v string) *ToggleGrayIngressResponseBodyDataSpecScopes {
	s.Value = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpecScopes) SetValueFrom(v *ToggleGrayIngressResponseBodyDataSpecScopesValueFrom) *ToggleGrayIngressResponseBodyDataSpecScopes {
	s.ValueFrom = v
	return s
}

type ToggleGrayIngressResponseBodyDataSpecScopesValueFrom struct {
	RefName  *string `json:"RefName,omitempty" xml:"RefName,omitempty" require:"true"`
	RefValue *string `json:"RefValue,omitempty" xml:"RefValue,omitempty" require:"true"`
}

func (s ToggleGrayIngressResponseBodyDataSpecScopesValueFrom) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressResponseBodyDataSpecScopesValueFrom) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressResponseBodyDataSpecScopesValueFrom) SetRefName(v string) *ToggleGrayIngressResponseBodyDataSpecScopesValueFrom {
	s.RefName = &v
	return s
}

func (s *ToggleGrayIngressResponseBodyDataSpecScopesValueFrom) SetRefValue(v string) *ToggleGrayIngressResponseBodyDataSpecScopesValueFrom {
	s.RefValue = &v
	return s
}

type ToggleGrayIngressResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ToggleGrayIngressResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ToggleGrayIngressResponse) String() string {
	return tea.Prettify(s)
}

func (s ToggleGrayIngressResponse) GoString() string {
	return s.String()
}

func (s *ToggleGrayIngressResponse) SetHeaders(v map[string]*string) *ToggleGrayIngressResponse {
	s.Headers = v
	return s
}

func (s *ToggleGrayIngressResponse) SetBody(v *ToggleGrayIngressResponseBody) *ToggleGrayIngressResponse {
	s.Body = v
	return s
}

type TransformClusterMemberQuery struct {
	InstanceIds     *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" require:"true"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty" require:"true"`
	TargetClusterId *string `json:"TargetClusterId,omitempty" xml:"TargetClusterId,omitempty" require:"true"`
}

func (s TransformClusterMemberQuery) String() string {
	return tea.Prettify(s)
}

func (s TransformClusterMemberQuery) GoString() string {
	return s.String()
}

func (s *TransformClusterMemberQuery) SetInstanceIds(v string) *TransformClusterMemberQuery {
	s.InstanceIds = &v
	return s
}

func (s *TransformClusterMemberQuery) SetPassword(v string) *TransformClusterMemberQuery {
	s.Password = &v
	return s
}

func (s *TransformClusterMemberQuery) SetTargetClusterId(v string) *TransformClusterMemberQuery {
	s.TargetClusterId = &v
	return s
}

type TransformClusterMemberRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *TransformClusterMemberQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s TransformClusterMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s TransformClusterMemberRequest) GoString() string {
	return s.String()
}

func (s *TransformClusterMemberRequest) SetHeaders(v map[string]*string) *TransformClusterMemberRequest {
	s.Headers = v
	return s
}

func (s *TransformClusterMemberRequest) SetQuery(v *TransformClusterMemberQuery) *TransformClusterMemberRequest {
	s.Query = v
	return s
}

type TransformClusterMemberResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s TransformClusterMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TransformClusterMemberResponseBody) GoString() string {
	return s.String()
}

func (s *TransformClusterMemberResponseBody) SetCode(v int) *TransformClusterMemberResponseBody {
	s.Code = &v
	return s
}

func (s *TransformClusterMemberResponseBody) SetData(v string) *TransformClusterMemberResponseBody {
	s.Data = &v
	return s
}

func (s *TransformClusterMemberResponseBody) SetMessage(v string) *TransformClusterMemberResponseBody {
	s.Message = &v
	return s
}

func (s *TransformClusterMemberResponseBody) SetRequestId(v string) *TransformClusterMemberResponseBody {
	s.RequestId = &v
	return s
}

type TransformClusterMemberResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TransformClusterMemberResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TransformClusterMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s TransformClusterMemberResponse) GoString() string {
	return s.String()
}

func (s *TransformClusterMemberResponse) SetHeaders(v map[string]*string) *TransformClusterMemberResponse {
	s.Headers = v
	return s
}

func (s *TransformClusterMemberResponse) SetBody(v *TransformClusterMemberResponseBody) *TransformClusterMemberResponse {
	s.Body = v
	return s
}

type UnbindK8sSlbQuery struct {
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	SlbName   *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s UnbindK8sSlbQuery) String() string {
	return tea.Prettify(s)
}

func (s UnbindK8sSlbQuery) GoString() string {
	return s.String()
}

func (s *UnbindK8sSlbQuery) SetAppId(v string) *UnbindK8sSlbQuery {
	s.AppId = &v
	return s
}

func (s *UnbindK8sSlbQuery) SetClusterId(v string) *UnbindK8sSlbQuery {
	s.ClusterId = &v
	return s
}

func (s *UnbindK8sSlbQuery) SetSlbName(v string) *UnbindK8sSlbQuery {
	s.SlbName = &v
	return s
}

func (s *UnbindK8sSlbQuery) SetType(v string) *UnbindK8sSlbQuery {
	s.Type = &v
	return s
}

type UnbindK8sSlbRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UnbindK8sSlbQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UnbindK8sSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindK8sSlbRequest) GoString() string {
	return s.String()
}

func (s *UnbindK8sSlbRequest) SetHeaders(v map[string]*string) *UnbindK8sSlbRequest {
	s.Headers = v
	return s
}

func (s *UnbindK8sSlbRequest) SetQuery(v *UnbindK8sSlbQuery) *UnbindK8sSlbRequest {
	s.Query = v
	return s
}

type UnbindK8sSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnbindK8sSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindK8sSlbResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindK8sSlbResponseBody) SetChangeOrderId(v string) *UnbindK8sSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UnbindK8sSlbResponseBody) SetCode(v int) *UnbindK8sSlbResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindK8sSlbResponseBody) SetMessage(v string) *UnbindK8sSlbResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindK8sSlbResponseBody) SetRequestId(v string) *UnbindK8sSlbResponseBody {
	s.RequestId = &v
	return s
}

type UnbindK8sSlbResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindK8sSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindK8sSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindK8sSlbResponse) GoString() string {
	return s.String()
}

func (s *UnbindK8sSlbResponse) SetHeaders(v map[string]*string) *UnbindK8sSlbResponse {
	s.Headers = v
	return s
}

func (s *UnbindK8sSlbResponse) SetBody(v *UnbindK8sSlbResponseBody) *UnbindK8sSlbResponse {
	s.Body = v
	return s
}

type UnbindSlbQuery struct {
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	DeleteListener *string `json:"DeleteListener,omitempty" xml:"DeleteListener,omitempty"`
	SlbId          *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s UnbindSlbQuery) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbQuery) GoString() string {
	return s.String()
}

func (s *UnbindSlbQuery) SetAppId(v string) *UnbindSlbQuery {
	s.AppId = &v
	return s
}

func (s *UnbindSlbQuery) SetDeleteListener(v string) *UnbindSlbQuery {
	s.DeleteListener = &v
	return s
}

func (s *UnbindSlbQuery) SetSlbId(v string) *UnbindSlbQuery {
	s.SlbId = &v
	return s
}

func (s *UnbindSlbQuery) SetType(v string) *UnbindSlbQuery {
	s.Type = &v
	return s
}

type UnbindSlbRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UnbindSlbQuery    `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UnbindSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbRequest) GoString() string {
	return s.String()
}

func (s *UnbindSlbRequest) SetHeaders(v map[string]*string) *UnbindSlbRequest {
	s.Headers = v
	return s
}

func (s *UnbindSlbRequest) SetQuery(v *UnbindSlbQuery) *UnbindSlbRequest {
	s.Query = v
	return s
}

type UnbindSlbResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UnbindSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindSlbResponseBody) SetCode(v int) *UnbindSlbResponseBody {
	s.Code = &v
	return s
}

func (s *UnbindSlbResponseBody) SetData(v string) *UnbindSlbResponseBody {
	s.Data = &v
	return s
}

func (s *UnbindSlbResponseBody) SetMessage(v string) *UnbindSlbResponseBody {
	s.Message = &v
	return s
}

func (s *UnbindSlbResponseBody) SetRequestId(v string) *UnbindSlbResponseBody {
	s.RequestId = &v
	return s
}

type UnbindSlbResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindSlbResponse) GoString() string {
	return s.String()
}

func (s *UnbindSlbResponse) SetHeaders(v map[string]*string) *UnbindSlbResponse {
	s.Headers = v
	return s
}

func (s *UnbindSlbResponse) SetBody(v *UnbindSlbResponseBody) *UnbindSlbResponse {
	s.Body = v
	return s
}

type UntagResourcesQuery struct {
	DeleteAll        *bool   `json:"DeleteAll,omitempty" xml:"DeleteAll,omitempty"`
	ResourceIds      *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty" require:"true"`
	ResourceRegionId *string `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty" require:"true"`
	ResourceType     *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty" require:"true"`
	TagKeys          *string `json:"TagKeys,omitempty" xml:"TagKeys,omitempty"`
}

func (s UntagResourcesQuery) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesQuery) GoString() string {
	return s.String()
}

func (s *UntagResourcesQuery) SetDeleteAll(v bool) *UntagResourcesQuery {
	s.DeleteAll = &v
	return s
}

func (s *UntagResourcesQuery) SetResourceIds(v string) *UntagResourcesQuery {
	s.ResourceIds = &v
	return s
}

func (s *UntagResourcesQuery) SetResourceRegionId(v string) *UntagResourcesQuery {
	s.ResourceRegionId = &v
	return s
}

func (s *UntagResourcesQuery) SetResourceType(v string) *UntagResourcesQuery {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesQuery) SetTagKeys(v string) *UntagResourcesQuery {
	s.TagKeys = &v
	return s
}

type UntagResourcesRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UntagResourcesQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetHeaders(v map[string]*string) *UntagResourcesRequest {
	s.Headers = v
	return s
}

func (s *UntagResourcesRequest) SetQuery(v *UntagResourcesQuery) *UntagResourcesRequest {
	s.Query = v
	return s
}

type UntagResourcesResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetCode(v int) *UntagResourcesResponseBody {
	s.Code = &v
	return s
}

func (s *UntagResourcesResponseBody) SetMessage(v string) *UntagResourcesResponseBody {
	s.Message = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateAccountInfoQuery struct {
	Email     *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Telephone *string `json:"Telephone,omitempty" xml:"Telephone,omitempty"`
}

func (s UpdateAccountInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateAccountInfoQuery) GoString() string {
	return s.String()
}

func (s *UpdateAccountInfoQuery) SetEmail(v string) *UpdateAccountInfoQuery {
	s.Email = &v
	return s
}

func (s *UpdateAccountInfoQuery) SetName(v string) *UpdateAccountInfoQuery {
	s.Name = &v
	return s
}

func (s *UpdateAccountInfoQuery) SetTelephone(v string) *UpdateAccountInfoQuery {
	s.Telephone = &v
	return s
}

type UpdateAccountInfoRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateAccountInfoQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s UpdateAccountInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAccountInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateAccountInfoRequest) SetHeaders(v map[string]*string) *UpdateAccountInfoRequest {
	s.Headers = v
	return s
}

func (s *UpdateAccountInfoRequest) SetQuery(v *UpdateAccountInfoQuery) *UpdateAccountInfoRequest {
	s.Query = v
	return s
}

type UpdateAccountInfoResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateAccountInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAccountInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAccountInfoResponseBody) SetCode(v int) *UpdateAccountInfoResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAccountInfoResponseBody) SetMessage(v string) *UpdateAccountInfoResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAccountInfoResponseBody) SetRequestId(v string) *UpdateAccountInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateAccountInfoResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateAccountInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAccountInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAccountInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateAccountInfoResponse) SetHeaders(v map[string]*string) *UpdateAccountInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateAccountInfoResponse) SetBody(v *UpdateAccountInfoResponseBody) *UpdateAccountInfoResponse {
	s.Body = v
	return s
}

type UpdateApplicationBaseInfoQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Desc    *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Owner   *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
}

func (s UpdateApplicationBaseInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoQuery) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoQuery) SetAppId(v string) *UpdateApplicationBaseInfoQuery {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationBaseInfoQuery) SetAppName(v string) *UpdateApplicationBaseInfoQuery {
	s.AppName = &v
	return s
}

func (s *UpdateApplicationBaseInfoQuery) SetDesc(v string) *UpdateApplicationBaseInfoQuery {
	s.Desc = &v
	return s
}

func (s *UpdateApplicationBaseInfoQuery) SetOwner(v string) *UpdateApplicationBaseInfoQuery {
	s.Owner = &v
	return s
}

type UpdateApplicationBaseInfoRequest struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateApplicationBaseInfoQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateApplicationBaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoRequest) SetHeaders(v map[string]*string) *UpdateApplicationBaseInfoRequest {
	s.Headers = v
	return s
}

func (s *UpdateApplicationBaseInfoRequest) SetQuery(v *UpdateApplicationBaseInfoQuery) *UpdateApplicationBaseInfoRequest {
	s.Query = v
	return s
}

type UpdateApplicationBaseInfoResponseBody struct {
	Code       *int                                             `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message    *string                                          `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId  *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Applcation *UpdateApplicationBaseInfoResponseBodyApplcation `json:"Applcation,omitempty" xml:"Applcation,omitempty" require:"true" type:"Struct"`
}

func (s UpdateApplicationBaseInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoResponseBody) SetCode(v int) *UpdateApplicationBaseInfoResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBody) SetMessage(v string) *UpdateApplicationBaseInfoResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBody) SetRequestId(v string) *UpdateApplicationBaseInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBody) SetApplcation(v *UpdateApplicationBaseInfoResponseBodyApplcation) *UpdateApplicationBaseInfoResponseBody {
	s.Applcation = v
	return s
}

type UpdateApplicationBaseInfoResponseBodyApplcation struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ApplicationType      *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty" require:"true"`
	BuildPackageId       *int64  `json:"BuildPackageId,omitempty" xml:"BuildPackageId,omitempty" require:"true"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	ClusterType          *int    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty" require:"true"`
	Cpu                  *int    `json:"Cpu,omitempty" xml:"Cpu,omitempty" require:"true"`
	CreateTime           *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty" require:"true"`
	Dockerize            *bool   `json:"Dockerize,omitempty" xml:"Dockerize,omitempty" require:"true"`
	ExtSlbId             *string `json:"ExtSlbId,omitempty" xml:"ExtSlbId,omitempty" require:"true"`
	ExtSlbIp             *string `json:"ExtSlbIp,omitempty" xml:"ExtSlbIp,omitempty" require:"true"`
	ExtSlbName           *string `json:"ExtSlbName,omitempty" xml:"ExtSlbName,omitempty" require:"true"`
	HealthCheckUrl       *string `json:"HealthCheckUrl,omitempty" xml:"HealthCheckUrl,omitempty" require:"true"`
	InstanceCount        *int    `json:"InstanceCount,omitempty" xml:"InstanceCount,omitempty" require:"true"`
	Memory               *int    `json:"Memory,omitempty" xml:"Memory,omitempty" require:"true"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Owner                *string `json:"Owner,omitempty" xml:"Owner,omitempty" require:"true"`
	Port                 *int    `json:"Port,omitempty" xml:"Port,omitempty" require:"true"`
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty" require:"true"`
	RunningInstanceCount *int    `json:"RunningInstanceCount,omitempty" xml:"RunningInstanceCount,omitempty" require:"true"`
	SlbId                *string `json:"SlbId,omitempty" xml:"SlbId,omitempty" require:"true"`
	SlbIp                *string `json:"SlbIp,omitempty" xml:"SlbIp,omitempty" require:"true"`
	SlbName              *string `json:"SlbName,omitempty" xml:"SlbName,omitempty" require:"true"`
	SlbPort              *int    `json:"SlbPort,omitempty" xml:"SlbPort,omitempty" require:"true"`
	UserId               *string `json:"UserId,omitempty" xml:"UserId,omitempty" require:"true"`
}

func (s UpdateApplicationBaseInfoResponseBodyApplcation) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoResponseBodyApplcation) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetAppId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetApplicationType(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ApplicationType = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetBuildPackageId(v int64) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.BuildPackageId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetClusterId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ClusterId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetClusterType(v int) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ClusterType = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetCpu(v int) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Cpu = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetCreateTime(v int64) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.CreateTime = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetDescription(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Description = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetDockerize(v bool) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Dockerize = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetExtSlbId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ExtSlbId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetExtSlbIp(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ExtSlbIp = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetExtSlbName(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.ExtSlbName = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetHealthCheckUrl(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.HealthCheckUrl = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetInstanceCount(v int) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.InstanceCount = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetMemory(v int) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Memory = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetName(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Name = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetOwner(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Owner = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetPort(v int) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.Port = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetRegionId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.RegionId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetRunningInstanceCount(v int) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.RunningInstanceCount = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbId = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbIp(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbIp = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbName(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbName = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetSlbPort(v int) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.SlbPort = &v
	return s
}

func (s *UpdateApplicationBaseInfoResponseBodyApplcation) SetUserId(v string) *UpdateApplicationBaseInfoResponseBodyApplcation {
	s.UserId = &v
	return s
}

type UpdateApplicationBaseInfoResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateApplicationBaseInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateApplicationBaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationBaseInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationBaseInfoResponse) SetHeaders(v map[string]*string) *UpdateApplicationBaseInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationBaseInfoResponse) SetBody(v *UpdateApplicationBaseInfoResponseBody) *UpdateApplicationBaseInfoResponse {
	s.Body = v
	return s
}

type UpdateApplicationScalingRuleQuery struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ScalingRuleEnable  *bool   `json:"ScalingRuleEnable,omitempty" xml:"ScalingRuleEnable,omitempty"`
	ScalingRuleMetric  *string `json:"ScalingRuleMetric,omitempty" xml:"ScalingRuleMetric,omitempty"`
	ScalingRuleName    *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	ScalingRuleTimer   *string `json:"ScalingRuleTimer,omitempty" xml:"ScalingRuleTimer,omitempty"`
	ScalingRuleTrigger *string `json:"ScalingRuleTrigger,omitempty" xml:"ScalingRuleTrigger,omitempty"`
	ScalingRuleType    *string `json:"ScalingRuleType,omitempty" xml:"ScalingRuleType,omitempty"`
}

func (s UpdateApplicationScalingRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleQuery) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleQuery) SetAppId(v string) *UpdateApplicationScalingRuleQuery {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationScalingRuleQuery) SetScalingRuleEnable(v bool) *UpdateApplicationScalingRuleQuery {
	s.ScalingRuleEnable = &v
	return s
}

func (s *UpdateApplicationScalingRuleQuery) SetScalingRuleMetric(v string) *UpdateApplicationScalingRuleQuery {
	s.ScalingRuleMetric = &v
	return s
}

func (s *UpdateApplicationScalingRuleQuery) SetScalingRuleName(v string) *UpdateApplicationScalingRuleQuery {
	s.ScalingRuleName = &v
	return s
}

func (s *UpdateApplicationScalingRuleQuery) SetScalingRuleTimer(v string) *UpdateApplicationScalingRuleQuery {
	s.ScalingRuleTimer = &v
	return s
}

func (s *UpdateApplicationScalingRuleQuery) SetScalingRuleTrigger(v string) *UpdateApplicationScalingRuleQuery {
	s.ScalingRuleTrigger = &v
	return s
}

func (s *UpdateApplicationScalingRuleQuery) SetScalingRuleType(v string) *UpdateApplicationScalingRuleQuery {
	s.ScalingRuleType = &v
	return s
}

type UpdateApplicationScalingRuleRequest struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateApplicationScalingRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s UpdateApplicationScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleRequest) SetHeaders(v map[string]*string) *UpdateApplicationScalingRuleRequest {
	s.Headers = v
	return s
}

func (s *UpdateApplicationScalingRuleRequest) SetQuery(v *UpdateApplicationScalingRuleQuery) *UpdateApplicationScalingRuleRequest {
	s.Query = v
	return s
}

type UpdateApplicationScalingRuleResponseBody struct {
	Code           *int                                                    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message        *string                                                 `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	AppScalingRule *UpdateApplicationScalingRuleResponseBodyAppScalingRule `json:"AppScalingRule,omitempty" xml:"AppScalingRule,omitempty" require:"true" type:"Struct"`
}

func (s UpdateApplicationScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBody) SetCode(v int) *UpdateApplicationScalingRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetMessage(v string) *UpdateApplicationScalingRuleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetRequestId(v string) *UpdateApplicationScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBody) SetAppScalingRule(v *UpdateApplicationScalingRuleResponseBodyAppScalingRule) *UpdateApplicationScalingRuleResponseBody {
	s.AppScalingRule = v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRule struct {
	AppId            *string                                                        `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	CreateTime       *int64                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty" require:"true"`
	LastDisableTime  *int64                                                         `json:"LastDisableTime,omitempty" xml:"LastDisableTime,omitempty" require:"true"`
	MaxReplicas      *int                                                           `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas      *int                                                           `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	ScaleRuleEnabled *bool                                                          `json:"ScaleRuleEnabled,omitempty" xml:"ScaleRuleEnabled,omitempty" require:"true"`
	ScaleRuleName    *string                                                        `json:"ScaleRuleName,omitempty" xml:"ScaleRuleName,omitempty" require:"true"`
	ScaleRuleType    *string                                                        `json:"ScaleRuleType,omitempty" xml:"ScaleRuleType,omitempty" require:"true"`
	UpdateTime       *int64                                                         `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty" require:"true"`
	Metric           *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric  `json:"Metric,omitempty" xml:"Metric,omitempty" require:"true" type:"Struct"`
	Trigger          *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger `json:"Trigger,omitempty" xml:"Trigger,omitempty" require:"true" type:"Struct"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRule) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRule) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetAppId(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.AppId = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetCreateTime(v int64) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.CreateTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetLastDisableTime(v int64) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.LastDisableTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetMaxReplicas(v int) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetMinReplicas(v int) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.MinReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleEnabled(v bool) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleEnabled = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleName(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleName = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetScaleRuleType(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.ScaleRuleType = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetUpdateTime(v int64) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.UpdateTime = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetMetric(v *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Metric = v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRule) SetTrigger(v *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) *UpdateApplicationScalingRuleResponseBodyAppScalingRule {
	s.Trigger = v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric struct {
	MaxReplicas *int                                                                   `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                   `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Metrics     []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics `json:"Metrics,omitempty" xml:"Metrics,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMaxReplicas(v int) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMinReplicas(v int) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.MinReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric) SetMetrics(v []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetric {
	s.Metrics = v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics struct {
	MetricTargetAverageUtilization *int    `json:"MetricTargetAverageUtilization,omitempty" xml:"MetricTargetAverageUtilization,omitempty" require:"true"`
	MetricType                     *string `json:"MetricType,omitempty" xml:"MetricType,omitempty" require:"true"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricTargetAverageUtilization(v int) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricTargetAverageUtilization = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics) SetMetricType(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleMetricMetrics {
	s.MetricType = &v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger struct {
	MaxReplicas *int                                                                     `json:"MaxReplicas,omitempty" xml:"MaxReplicas,omitempty" require:"true"`
	MinReplicas *int                                                                     `json:"MinReplicas,omitempty" xml:"MinReplicas,omitempty" require:"true"`
	Triggers    []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers `json:"Triggers,omitempty" xml:"Triggers,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMaxReplicas(v int) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MaxReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetMinReplicas(v int) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.MinReplicas = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger) SetTriggers(v []*UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTrigger {
	s.Triggers = v
	return s
}

type UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers struct {
	MetaData *string `json:"MetaData,omitempty" xml:"MetaData,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetMetaData(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.MetaData = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetName(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Name = &v
	return s
}

func (s *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers) SetType(v string) *UpdateApplicationScalingRuleResponseBodyAppScalingRuleTriggerTriggers {
	s.Type = &v
	return s
}

type UpdateApplicationScalingRuleResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateApplicationScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateApplicationScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateApplicationScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateApplicationScalingRuleResponse) SetHeaders(v map[string]*string) *UpdateApplicationScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateApplicationScalingRuleResponse) SetBody(v *UpdateApplicationScalingRuleResponseBody) *UpdateApplicationScalingRuleResponse {
	s.Body = v
	return s
}

type UpdateConfigTemplateBody struct {
	Content     *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Format      *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateConfigTemplateBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigTemplateBody) GoString() string {
	return s.String()
}

func (s *UpdateConfigTemplateBody) SetContent(v string) *UpdateConfigTemplateBody {
	s.Content = &v
	return s
}

func (s *UpdateConfigTemplateBody) SetDescription(v string) *UpdateConfigTemplateBody {
	s.Description = &v
	return s
}

func (s *UpdateConfigTemplateBody) SetFormat(v string) *UpdateConfigTemplateBody {
	s.Format = &v
	return s
}

func (s *UpdateConfigTemplateBody) SetId(v int64) *UpdateConfigTemplateBody {
	s.Id = &v
	return s
}

func (s *UpdateConfigTemplateBody) SetName(v string) *UpdateConfigTemplateBody {
	s.Name = &v
	return s
}

type UpdateConfigTemplateRequest struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UpdateConfigTemplateBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateConfigTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateConfigTemplateRequest) SetHeaders(v map[string]*string) *UpdateConfigTemplateRequest {
	s.Headers = v
	return s
}

func (s *UpdateConfigTemplateRequest) SetBody(v *UpdateConfigTemplateBody) *UpdateConfigTemplateRequest {
	s.Body = v
	return s
}

type UpdateConfigTemplateResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateConfigTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateConfigTemplateResponseBody) SetCode(v int) *UpdateConfigTemplateResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateConfigTemplateResponseBody) SetMessage(v string) *UpdateConfigTemplateResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateConfigTemplateResponseBody) SetRequestId(v string) *UpdateConfigTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateConfigTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateConfigTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateConfigTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateConfigTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateConfigTemplateResponse) SetHeaders(v map[string]*string) *UpdateConfigTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateConfigTemplateResponse) SetBody(v *UpdateConfigTemplateResponseBody) *UpdateConfigTemplateResponse {
	s.Body = v
	return s
}

type UpdateContainerQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	BuildPackId *int    `json:"BuildPackId,omitempty" xml:"BuildPackId,omitempty" require:"true"`
}

func (s UpdateContainerQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerQuery) GoString() string {
	return s.String()
}

func (s *UpdateContainerQuery) SetAppId(v string) *UpdateContainerQuery {
	s.AppId = &v
	return s
}

func (s *UpdateContainerQuery) SetBuildPackId(v int) *UpdateContainerQuery {
	s.BuildPackId = &v
	return s
}

type UpdateContainerRequest struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateContainerQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateContainerRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerRequest) SetHeaders(v map[string]*string) *UpdateContainerRequest {
	s.Headers = v
	return s
}

func (s *UpdateContainerRequest) SetQuery(v *UpdateContainerQuery) *UpdateContainerRequest {
	s.Query = v
	return s
}

type UpdateContainerResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateContainerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateContainerResponseBody) SetChangeOrderId(v string) *UpdateContainerResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateContainerResponseBody) SetCode(v int) *UpdateContainerResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateContainerResponseBody) SetMessage(v string) *UpdateContainerResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateContainerResponseBody) SetRequestId(v string) *UpdateContainerResponseBody {
	s.RequestId = &v
	return s
}

type UpdateContainerResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateContainerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateContainerResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerResponse) SetHeaders(v map[string]*string) *UpdateContainerResponse {
	s.Headers = v
	return s
}

func (s *UpdateContainerResponse) SetBody(v *UpdateContainerResponseBody) *UpdateContainerResponse {
	s.Body = v
	return s
}

type UpdateContainerConfigurationQuery struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ContextPath     *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HttpPort        *int    `json:"HttpPort,omitempty" xml:"HttpPort,omitempty"`
	MaxThreads      *int    `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty"`
	URIEncoding     *string `json:"URIEncoding,omitempty" xml:"URIEncoding,omitempty"`
	UseBodyEncoding *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty"`
}

func (s UpdateContainerConfigurationQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationQuery) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationQuery) SetAppId(v string) *UpdateContainerConfigurationQuery {
	s.AppId = &v
	return s
}

func (s *UpdateContainerConfigurationQuery) SetContextPath(v string) *UpdateContainerConfigurationQuery {
	s.ContextPath = &v
	return s
}

func (s *UpdateContainerConfigurationQuery) SetGroupId(v string) *UpdateContainerConfigurationQuery {
	s.GroupId = &v
	return s
}

func (s *UpdateContainerConfigurationQuery) SetHttpPort(v int) *UpdateContainerConfigurationQuery {
	s.HttpPort = &v
	return s
}

func (s *UpdateContainerConfigurationQuery) SetMaxThreads(v int) *UpdateContainerConfigurationQuery {
	s.MaxThreads = &v
	return s
}

func (s *UpdateContainerConfigurationQuery) SetURIEncoding(v string) *UpdateContainerConfigurationQuery {
	s.URIEncoding = &v
	return s
}

func (s *UpdateContainerConfigurationQuery) SetUseBodyEncoding(v bool) *UpdateContainerConfigurationQuery {
	s.UseBodyEncoding = &v
	return s
}

type UpdateContainerConfigurationRequest struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateContainerConfigurationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateContainerConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationRequest) SetHeaders(v map[string]*string) *UpdateContainerConfigurationRequest {
	s.Headers = v
	return s
}

func (s *UpdateContainerConfigurationRequest) SetQuery(v *UpdateContainerConfigurationQuery) *UpdateContainerConfigurationRequest {
	s.Query = v
	return s
}

type UpdateContainerConfigurationResponseBody struct {
	Code                   *int                                                            `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message                *string                                                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId              *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	ContainerConfiguration *UpdateContainerConfigurationResponseBodyContainerConfiguration `json:"ContainerConfiguration,omitempty" xml:"ContainerConfiguration,omitempty" require:"true" type:"Struct"`
}

func (s UpdateContainerConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationResponseBody) SetCode(v int) *UpdateContainerConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBody) SetMessage(v string) *UpdateContainerConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBody) SetRequestId(v string) *UpdateContainerConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBody) SetContainerConfiguration(v *UpdateContainerConfigurationResponseBodyContainerConfiguration) *UpdateContainerConfigurationResponseBody {
	s.ContainerConfiguration = v
	return s
}

type UpdateContainerConfigurationResponseBodyContainerConfiguration struct {
	ContextPath     *string `json:"ContextPath,omitempty" xml:"ContextPath,omitempty" require:"true"`
	HttpPort        *int    `json:"HttpPort,omitempty" xml:"HttpPort,omitempty" require:"true"`
	MaxThreads      *int    `json:"MaxThreads,omitempty" xml:"MaxThreads,omitempty" require:"true"`
	URIEncoding     *string `json:"URIEncoding,omitempty" xml:"URIEncoding,omitempty" require:"true"`
	UseBodyEncoding *bool   `json:"UseBodyEncoding,omitempty" xml:"UseBodyEncoding,omitempty" require:"true"`
}

func (s UpdateContainerConfigurationResponseBodyContainerConfiguration) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationResponseBodyContainerConfiguration) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetContextPath(v string) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.ContextPath = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetHttpPort(v int) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.HttpPort = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetMaxThreads(v int) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.MaxThreads = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetURIEncoding(v string) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.URIEncoding = &v
	return s
}

func (s *UpdateContainerConfigurationResponseBodyContainerConfiguration) SetUseBodyEncoding(v bool) *UpdateContainerConfigurationResponseBodyContainerConfiguration {
	s.UseBodyEncoding = &v
	return s
}

type UpdateContainerConfigurationResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateContainerConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateContainerConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateContainerConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateContainerConfigurationResponse) SetHeaders(v map[string]*string) *UpdateContainerConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateContainerConfigurationResponse) SetBody(v *UpdateContainerConfigurationResponseBody) *UpdateContainerConfigurationResponse {
	s.Body = v
	return s
}

type UpdateDegradeControlQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Duration    *int    `json:"Duration,omitempty" xml:"Duration,omitempty" require:"true"`
	MethodName  *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	RtThreshold *int    `json:"RtThreshold,omitempty" xml:"RtThreshold,omitempty" require:"true"`
	RuleId      *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	RuleType    *string `json:"RuleType,omitempty" xml:"RuleType,omitempty" require:"true"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	UrlVar      *string `json:"UrlVar,omitempty" xml:"UrlVar,omitempty"`
}

func (s UpdateDegradeControlQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateDegradeControlQuery) GoString() string {
	return s.String()
}

func (s *UpdateDegradeControlQuery) SetAppId(v string) *UpdateDegradeControlQuery {
	s.AppId = &v
	return s
}

func (s *UpdateDegradeControlQuery) SetDuration(v int) *UpdateDegradeControlQuery {
	s.Duration = &v
	return s
}

func (s *UpdateDegradeControlQuery) SetMethodName(v string) *UpdateDegradeControlQuery {
	s.MethodName = &v
	return s
}

func (s *UpdateDegradeControlQuery) SetRtThreshold(v int) *UpdateDegradeControlQuery {
	s.RtThreshold = &v
	return s
}

func (s *UpdateDegradeControlQuery) SetRuleId(v string) *UpdateDegradeControlQuery {
	s.RuleId = &v
	return s
}

func (s *UpdateDegradeControlQuery) SetRuleType(v string) *UpdateDegradeControlQuery {
	s.RuleType = &v
	return s
}

func (s *UpdateDegradeControlQuery) SetServiceName(v string) *UpdateDegradeControlQuery {
	s.ServiceName = &v
	return s
}

func (s *UpdateDegradeControlQuery) SetUrlVar(v string) *UpdateDegradeControlQuery {
	s.UrlVar = &v
	return s
}

type UpdateDegradeControlRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateDegradeControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateDegradeControlRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDegradeControlRequest) GoString() string {
	return s.String()
}

func (s *UpdateDegradeControlRequest) SetHeaders(v map[string]*string) *UpdateDegradeControlRequest {
	s.Headers = v
	return s
}

func (s *UpdateDegradeControlRequest) SetQuery(v *UpdateDegradeControlQuery) *UpdateDegradeControlRequest {
	s.Query = v
	return s
}

type UpdateDegradeControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateDegradeControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDegradeControlResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDegradeControlResponseBody) SetCode(v int) *UpdateDegradeControlResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateDegradeControlResponseBody) SetMessage(v string) *UpdateDegradeControlResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateDegradeControlResponseBody) SetRequestId(v string) *UpdateDegradeControlResponseBody {
	s.RequestId = &v
	return s
}

type UpdateDegradeControlResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDegradeControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDegradeControlResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDegradeControlResponse) GoString() string {
	return s.String()
}

func (s *UpdateDegradeControlResponse) SetHeaders(v map[string]*string) *UpdateDegradeControlResponse {
	s.Headers = v
	return s
}

func (s *UpdateDegradeControlResponse) SetBody(v *UpdateDegradeControlResponseBody) *UpdateDegradeControlResponse {
	s.Body = v
	return s
}

type UpdateEnvAppGroupBody struct {
	PointcutName *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
	Scopes       *string `json:"Scopes,omitempty" xml:"Scopes,omitempty"`
}

func (s UpdateEnvAppGroupBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvAppGroupBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvAppGroupBody) SetPointcutName(v string) *UpdateEnvAppGroupBody {
	s.PointcutName = &v
	return s
}

func (s *UpdateEnvAppGroupBody) SetScopes(v string) *UpdateEnvAppGroupBody {
	s.Scopes = &v
	return s
}

type UpdateEnvAppGroupRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UpdateEnvAppGroupBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEnvAppGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvAppGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnvAppGroupRequest) SetHeaders(v map[string]*string) *UpdateEnvAppGroupRequest {
	s.Headers = v
	return s
}

func (s *UpdateEnvAppGroupRequest) SetBody(v *UpdateEnvAppGroupBody) *UpdateEnvAppGroupRequest {
	s.Body = v
	return s
}

type UpdateEnvAppGroupResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateEnvAppGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvAppGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvAppGroupResponseBody) SetCode(v int) *UpdateEnvAppGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEnvAppGroupResponseBody) SetMessage(v string) *UpdateEnvAppGroupResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateEnvAppGroupResponseBody) SetRequestId(v string) *UpdateEnvAppGroupResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnvAppGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateEnvAppGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateEnvAppGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvAppGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnvAppGroupResponse) SetHeaders(v map[string]*string) *UpdateEnvAppGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnvAppGroupResponse) SetBody(v *UpdateEnvAppGroupResponseBody) *UpdateEnvAppGroupResponse {
	s.Body = v
	return s
}

type UpdateEnvHttpTrafficControlBody struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Condition       *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	LabelAdviceName *string `json:"LabelAdviceName,omitempty" xml:"LabelAdviceName,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
	TriggerPolicy   *string `json:"TriggerPolicy,omitempty" xml:"TriggerPolicy,omitempty"`
	UrlPath         *string `json:"UrlPath,omitempty" xml:"UrlPath,omitempty"`
}

func (s UpdateEnvHttpTrafficControlBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvHttpTrafficControlBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvHttpTrafficControlBody) SetAppId(v string) *UpdateEnvHttpTrafficControlBody {
	s.AppId = &v
	return s
}

func (s *UpdateEnvHttpTrafficControlBody) SetCondition(v string) *UpdateEnvHttpTrafficControlBody {
	s.Condition = &v
	return s
}

func (s *UpdateEnvHttpTrafficControlBody) SetLabelAdviceName(v string) *UpdateEnvHttpTrafficControlBody {
	s.LabelAdviceName = &v
	return s
}

func (s *UpdateEnvHttpTrafficControlBody) SetPointcutName(v string) *UpdateEnvHttpTrafficControlBody {
	s.PointcutName = &v
	return s
}

func (s *UpdateEnvHttpTrafficControlBody) SetTriggerPolicy(v string) *UpdateEnvHttpTrafficControlBody {
	s.TriggerPolicy = &v
	return s
}

func (s *UpdateEnvHttpTrafficControlBody) SetUrlPath(v string) *UpdateEnvHttpTrafficControlBody {
	s.UrlPath = &v
	return s
}

type UpdateEnvHttpTrafficControlRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UpdateEnvHttpTrafficControlBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEnvHttpTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvHttpTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *UpdateEnvHttpTrafficControlRequest) SetHeaders(v map[string]*string) *UpdateEnvHttpTrafficControlRequest {
	s.Headers = v
	return s
}

func (s *UpdateEnvHttpTrafficControlRequest) SetBody(v *UpdateEnvHttpTrafficControlBody) *UpdateEnvHttpTrafficControlRequest {
	s.Body = v
	return s
}

type UpdateEnvHttpTrafficControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateEnvHttpTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvHttpTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEnvHttpTrafficControlResponseBody) SetCode(v int) *UpdateEnvHttpTrafficControlResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateEnvHttpTrafficControlResponseBody) SetMessage(v string) *UpdateEnvHttpTrafficControlResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateEnvHttpTrafficControlResponseBody) SetRequestId(v string) *UpdateEnvHttpTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEnvHttpTrafficControlResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateEnvHttpTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateEnvHttpTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEnvHttpTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *UpdateEnvHttpTrafficControlResponse) SetHeaders(v map[string]*string) *UpdateEnvHttpTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *UpdateEnvHttpTrafficControlResponse) SetBody(v *UpdateEnvHttpTrafficControlResponseBody) *UpdateEnvHttpTrafficControlResponse {
	s.Body = v
	return s
}

type UpdateFlowControlQuery struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ConsumerAppId *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty"`
	Granularity   *string `json:"Granularity,omitempty" xml:"Granularity,omitempty" require:"true"`
	MethodName    *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	RuleId        *string `json:"RuleId,omitempty" xml:"RuleId,omitempty" require:"true"`
	RuleType      *string `json:"RuleType,omitempty" xml:"RuleType,omitempty" require:"true"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Strategy      *string `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	Threshold     *int    `json:"Threshold,omitempty" xml:"Threshold,omitempty" require:"true"`
	UrlVar        *string `json:"UrlVar,omitempty" xml:"UrlVar,omitempty"`
}

func (s UpdateFlowControlQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowControlQuery) GoString() string {
	return s.String()
}

func (s *UpdateFlowControlQuery) SetAppId(v string) *UpdateFlowControlQuery {
	s.AppId = &v
	return s
}

func (s *UpdateFlowControlQuery) SetConsumerAppId(v string) *UpdateFlowControlQuery {
	s.ConsumerAppId = &v
	return s
}

func (s *UpdateFlowControlQuery) SetGranularity(v string) *UpdateFlowControlQuery {
	s.Granularity = &v
	return s
}

func (s *UpdateFlowControlQuery) SetMethodName(v string) *UpdateFlowControlQuery {
	s.MethodName = &v
	return s
}

func (s *UpdateFlowControlQuery) SetRuleId(v string) *UpdateFlowControlQuery {
	s.RuleId = &v
	return s
}

func (s *UpdateFlowControlQuery) SetRuleType(v string) *UpdateFlowControlQuery {
	s.RuleType = &v
	return s
}

func (s *UpdateFlowControlQuery) SetServiceName(v string) *UpdateFlowControlQuery {
	s.ServiceName = &v
	return s
}

func (s *UpdateFlowControlQuery) SetStrategy(v string) *UpdateFlowControlQuery {
	s.Strategy = &v
	return s
}

func (s *UpdateFlowControlQuery) SetThreshold(v int) *UpdateFlowControlQuery {
	s.Threshold = &v
	return s
}

func (s *UpdateFlowControlQuery) SetUrlVar(v string) *UpdateFlowControlQuery {
	s.UrlVar = &v
	return s
}

type UpdateFlowControlRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateFlowControlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateFlowControlRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowControlRequest) GoString() string {
	return s.String()
}

func (s *UpdateFlowControlRequest) SetHeaders(v map[string]*string) *UpdateFlowControlRequest {
	s.Headers = v
	return s
}

func (s *UpdateFlowControlRequest) SetQuery(v *UpdateFlowControlQuery) *UpdateFlowControlRequest {
	s.Query = v
	return s
}

type UpdateFlowControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateFlowControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowControlResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFlowControlResponseBody) SetCode(v int) *UpdateFlowControlResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateFlowControlResponseBody) SetMessage(v string) *UpdateFlowControlResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateFlowControlResponseBody) SetRequestId(v string) *UpdateFlowControlResponseBody {
	s.RequestId = &v
	return s
}

type UpdateFlowControlResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateFlowControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateFlowControlResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFlowControlResponse) GoString() string {
	return s.String()
}

func (s *UpdateFlowControlResponse) SetHeaders(v map[string]*string) *UpdateFlowControlResponse {
	s.Headers = v
	return s
}

func (s *UpdateFlowControlResponse) SetBody(v *UpdateFlowControlResponseBody) *UpdateFlowControlResponse {
	s.Body = v
	return s
}

type UpdateHealthCheckUrlQuery struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	HcURL *string `json:"hcURL,omitempty" xml:"hcURL,omitempty"`
}

func (s UpdateHealthCheckUrlQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateHealthCheckUrlQuery) GoString() string {
	return s.String()
}

func (s *UpdateHealthCheckUrlQuery) SetAppId(v string) *UpdateHealthCheckUrlQuery {
	s.AppId = &v
	return s
}

func (s *UpdateHealthCheckUrlQuery) SetHcURL(v string) *UpdateHealthCheckUrlQuery {
	s.HcURL = &v
	return s
}

type UpdateHealthCheckUrlRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateHealthCheckUrlQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateHealthCheckUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHealthCheckUrlRequest) GoString() string {
	return s.String()
}

func (s *UpdateHealthCheckUrlRequest) SetHeaders(v map[string]*string) *UpdateHealthCheckUrlRequest {
	s.Headers = v
	return s
}

func (s *UpdateHealthCheckUrlRequest) SetQuery(v *UpdateHealthCheckUrlQuery) *UpdateHealthCheckUrlRequest {
	s.Query = v
	return s
}

type UpdateHealthCheckUrlResponseBody struct {
	Code           *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HealthCheckURL *string `json:"HealthCheckURL,omitempty" xml:"HealthCheckURL,omitempty" require:"true"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateHealthCheckUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHealthCheckUrlResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHealthCheckUrlResponseBody) SetCode(v int) *UpdateHealthCheckUrlResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHealthCheckUrlResponseBody) SetHealthCheckURL(v string) *UpdateHealthCheckUrlResponseBody {
	s.HealthCheckURL = &v
	return s
}

func (s *UpdateHealthCheckUrlResponseBody) SetMessage(v string) *UpdateHealthCheckUrlResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHealthCheckUrlResponseBody) SetRequestId(v string) *UpdateHealthCheckUrlResponseBody {
	s.RequestId = &v
	return s
}

type UpdateHealthCheckUrlResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateHealthCheckUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHealthCheckUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHealthCheckUrlResponse) GoString() string {
	return s.String()
}

func (s *UpdateHealthCheckUrlResponse) SetHeaders(v map[string]*string) *UpdateHealthCheckUrlResponse {
	s.Headers = v
	return s
}

func (s *UpdateHealthCheckUrlResponse) SetBody(v *UpdateHealthCheckUrlResponseBody) *UpdateHealthCheckUrlResponse {
	s.Body = v
	return s
}

type UpdateHookConfigurationQuery struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Hooks   *string `json:"Hooks,omitempty" xml:"Hooks,omitempty" require:"true"`
}

func (s UpdateHookConfigurationQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationQuery) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationQuery) SetAppId(v string) *UpdateHookConfigurationQuery {
	s.AppId = &v
	return s
}

func (s *UpdateHookConfigurationQuery) SetGroupId(v string) *UpdateHookConfigurationQuery {
	s.GroupId = &v
	return s
}

func (s *UpdateHookConfigurationQuery) SetHooks(v string) *UpdateHookConfigurationQuery {
	s.Hooks = &v
	return s
}

type UpdateHookConfigurationRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateHookConfigurationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateHookConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationRequest) SetHeaders(v map[string]*string) *UpdateHookConfigurationRequest {
	s.Headers = v
	return s
}

func (s *UpdateHookConfigurationRequest) SetQuery(v *UpdateHookConfigurationQuery) *UpdateHookConfigurationRequest {
	s.Query = v
	return s
}

type UpdateHookConfigurationResponseBody struct {
	Code               *int                                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message            *string                                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId          *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	HooksConfiguration []*UpdateHookConfigurationResponseBodyHooksConfiguration `json:"HooksConfiguration,omitempty" xml:"HooksConfiguration,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateHookConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationResponseBody) SetCode(v int) *UpdateHookConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateHookConfigurationResponseBody) SetMessage(v string) *UpdateHookConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateHookConfigurationResponseBody) SetRequestId(v string) *UpdateHookConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateHookConfigurationResponseBody) SetHooksConfiguration(v []*UpdateHookConfigurationResponseBodyHooksConfiguration) *UpdateHookConfigurationResponseBody {
	s.HooksConfiguration = v
	return s
}

type UpdateHookConfigurationResponseBodyHooksConfiguration struct {
	IgnoreFail *bool   `json:"IgnoreFail,omitempty" xml:"IgnoreFail,omitempty" require:"true"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Script     *string `json:"Script,omitempty" xml:"Script,omitempty" require:"true"`
}

func (s UpdateHookConfigurationResponseBodyHooksConfiguration) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationResponseBodyHooksConfiguration) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationResponseBodyHooksConfiguration) SetIgnoreFail(v bool) *UpdateHookConfigurationResponseBodyHooksConfiguration {
	s.IgnoreFail = &v
	return s
}

func (s *UpdateHookConfigurationResponseBodyHooksConfiguration) SetName(v string) *UpdateHookConfigurationResponseBodyHooksConfiguration {
	s.Name = &v
	return s
}

func (s *UpdateHookConfigurationResponseBodyHooksConfiguration) SetScript(v string) *UpdateHookConfigurationResponseBodyHooksConfiguration {
	s.Script = &v
	return s
}

type UpdateHookConfigurationResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateHookConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateHookConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateHookConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateHookConfigurationResponse) SetHeaders(v map[string]*string) *UpdateHookConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateHookConfigurationResponse) SetBody(v *UpdateHookConfigurationResponseBody) *UpdateHookConfigurationResponse {
	s.Body = v
	return s
}

type UpdateJvmConfigurationQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	GroupId     *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	MaxHeapSize *int    `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty"`
	MaxPermSize *int    `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty"`
	MinHeapSize *int    `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty"`
	Options     *string `json:"Options,omitempty" xml:"Options,omitempty"`
}

func (s UpdateJvmConfigurationQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationQuery) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationQuery) SetAppId(v string) *UpdateJvmConfigurationQuery {
	s.AppId = &v
	return s
}

func (s *UpdateJvmConfigurationQuery) SetGroupId(v string) *UpdateJvmConfigurationQuery {
	s.GroupId = &v
	return s
}

func (s *UpdateJvmConfigurationQuery) SetMaxHeapSize(v int) *UpdateJvmConfigurationQuery {
	s.MaxHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationQuery) SetMaxPermSize(v int) *UpdateJvmConfigurationQuery {
	s.MaxPermSize = &v
	return s
}

func (s *UpdateJvmConfigurationQuery) SetMinHeapSize(v int) *UpdateJvmConfigurationQuery {
	s.MinHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationQuery) SetOptions(v string) *UpdateJvmConfigurationQuery {
	s.Options = &v
	return s
}

type UpdateJvmConfigurationRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateJvmConfigurationQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateJvmConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationRequest) SetHeaders(v map[string]*string) *UpdateJvmConfigurationRequest {
	s.Headers = v
	return s
}

func (s *UpdateJvmConfigurationRequest) SetQuery(v *UpdateJvmConfigurationQuery) *UpdateJvmConfigurationRequest {
	s.Query = v
	return s
}

type UpdateJvmConfigurationResponseBody struct {
	Code             *int                                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message          *string                                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId        *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	JvmConfiguration *UpdateJvmConfigurationResponseBodyJvmConfiguration `json:"JvmConfiguration,omitempty" xml:"JvmConfiguration,omitempty" require:"true" type:"Struct"`
}

func (s UpdateJvmConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationResponseBody) SetCode(v int) *UpdateJvmConfigurationResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBody) SetMessage(v string) *UpdateJvmConfigurationResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBody) SetRequestId(v string) *UpdateJvmConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBody) SetJvmConfiguration(v *UpdateJvmConfigurationResponseBodyJvmConfiguration) *UpdateJvmConfigurationResponseBody {
	s.JvmConfiguration = v
	return s
}

type UpdateJvmConfigurationResponseBodyJvmConfiguration struct {
	MaxHeapSize *int    `json:"MaxHeapSize,omitempty" xml:"MaxHeapSize,omitempty" require:"true"`
	MaxPermSize *int    `json:"MaxPermSize,omitempty" xml:"MaxPermSize,omitempty" require:"true"`
	MinHeapSize *int    `json:"MinHeapSize,omitempty" xml:"MinHeapSize,omitempty" require:"true"`
	Options     *string `json:"Options,omitempty" xml:"Options,omitempty" require:"true"`
}

func (s UpdateJvmConfigurationResponseBodyJvmConfiguration) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationResponseBodyJvmConfiguration) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetMaxHeapSize(v int) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetMaxPermSize(v int) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.MaxPermSize = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetMinHeapSize(v int) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.MinHeapSize = &v
	return s
}

func (s *UpdateJvmConfigurationResponseBodyJvmConfiguration) SetOptions(v string) *UpdateJvmConfigurationResponseBodyJvmConfiguration {
	s.Options = &v
	return s
}

type UpdateJvmConfigurationResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateJvmConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateJvmConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateJvmConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateJvmConfigurationResponse) SetHeaders(v map[string]*string) *UpdateJvmConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateJvmConfigurationResponse) SetBody(v *UpdateJvmConfigurationResponseBody) *UpdateJvmConfigurationResponse {
	s.Body = v
	return s
}

type UpdateK8sApplicationBaseInfoQuery struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	Owner       *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PhoneNumber *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
}

func (s UpdateK8sApplicationBaseInfoQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationBaseInfoQuery) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationBaseInfoQuery) SetAppId(v string) *UpdateK8sApplicationBaseInfoQuery {
	s.AppId = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoQuery) SetDescription(v string) *UpdateK8sApplicationBaseInfoQuery {
	s.Description = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoQuery) SetEmail(v string) *UpdateK8sApplicationBaseInfoQuery {
	s.Email = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoQuery) SetOwner(v string) *UpdateK8sApplicationBaseInfoQuery {
	s.Owner = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoQuery) SetPhoneNumber(v string) *UpdateK8sApplicationBaseInfoQuery {
	s.PhoneNumber = &v
	return s
}

type UpdateK8sApplicationBaseInfoRequest struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateK8sApplicationBaseInfoQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateK8sApplicationBaseInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationBaseInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationBaseInfoRequest) SetHeaders(v map[string]*string) *UpdateK8sApplicationBaseInfoRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sApplicationBaseInfoRequest) SetQuery(v *UpdateK8sApplicationBaseInfoQuery) *UpdateK8sApplicationBaseInfoRequest {
	s.Query = v
	return s
}

type UpdateK8sApplicationBaseInfoResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty" require:"true"`
}

func (s UpdateK8sApplicationBaseInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationBaseInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetCode(v int) *UpdateK8sApplicationBaseInfoResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetMessage(v string) *UpdateK8sApplicationBaseInfoResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetRequestId(v string) *UpdateK8sApplicationBaseInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponseBody) SetResult(v string) *UpdateK8sApplicationBaseInfoResponseBody {
	s.Result = &v
	return s
}

type UpdateK8sApplicationBaseInfoResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sApplicationBaseInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sApplicationBaseInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationBaseInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationBaseInfoResponse) SetHeaders(v map[string]*string) *UpdateK8sApplicationBaseInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sApplicationBaseInfoResponse) SetBody(v *UpdateK8sApplicationBaseInfoResponseBody) *UpdateK8sApplicationBaseInfoResponse {
	s.Body = v
	return s
}

type UpdateK8sApplicationConfigQuery struct {
	AppId         *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	CpuLimit      *string `json:"CpuLimit,omitempty" xml:"CpuLimit,omitempty" require:"true"`
	CpuRequest    *string `json:"CpuRequest,omitempty" xml:"CpuRequest,omitempty"`
	McpuLimit     *string `json:"McpuLimit,omitempty" xml:"McpuLimit,omitempty"`
	McpuRequest   *string `json:"McpuRequest,omitempty" xml:"McpuRequest,omitempty"`
	MemoryLimit   *string `json:"MemoryLimit,omitempty" xml:"MemoryLimit,omitempty" require:"true"`
	MemoryRequest *string `json:"MemoryRequest,omitempty" xml:"MemoryRequest,omitempty"`
	Timeout       *int    `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s UpdateK8sApplicationConfigQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationConfigQuery) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationConfigQuery) SetAppId(v string) *UpdateK8sApplicationConfigQuery {
	s.AppId = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetClusterId(v string) *UpdateK8sApplicationConfigQuery {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetCpuLimit(v string) *UpdateK8sApplicationConfigQuery {
	s.CpuLimit = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetCpuRequest(v string) *UpdateK8sApplicationConfigQuery {
	s.CpuRequest = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetMcpuLimit(v string) *UpdateK8sApplicationConfigQuery {
	s.McpuLimit = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetMcpuRequest(v string) *UpdateK8sApplicationConfigQuery {
	s.McpuRequest = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetMemoryLimit(v string) *UpdateK8sApplicationConfigQuery {
	s.MemoryLimit = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetMemoryRequest(v string) *UpdateK8sApplicationConfigQuery {
	s.MemoryRequest = &v
	return s
}

func (s *UpdateK8sApplicationConfigQuery) SetTimeout(v int) *UpdateK8sApplicationConfigQuery {
	s.Timeout = &v
	return s
}

type UpdateK8sApplicationConfigRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateK8sApplicationConfigQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateK8sApplicationConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationConfigRequest) SetHeaders(v map[string]*string) *UpdateK8sApplicationConfigRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sApplicationConfigRequest) SetQuery(v *UpdateK8sApplicationConfigQuery) *UpdateK8sApplicationConfigRequest {
	s.Query = v
	return s
}

type UpdateK8sApplicationConfigResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateK8sApplicationConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationConfigResponseBody) SetChangeOrderId(v string) *UpdateK8sApplicationConfigResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateK8sApplicationConfigResponseBody) SetCode(v int) *UpdateK8sApplicationConfigResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sApplicationConfigResponseBody) SetMessage(v string) *UpdateK8sApplicationConfigResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sApplicationConfigResponseBody) SetRequestId(v string) *UpdateK8sApplicationConfigResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sApplicationConfigResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sApplicationConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sApplicationConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sApplicationConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sApplicationConfigResponse) SetHeaders(v map[string]*string) *UpdateK8sApplicationConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sApplicationConfigResponse) SetBody(v *UpdateK8sApplicationConfigResponseBody) *UpdateK8sApplicationConfigResponse {
	s.Body = v
	return s
}

type UpdateK8sConfigMapBody struct {
	ClusterId *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Data      map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Name      *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s UpdateK8sConfigMapBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sConfigMapBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sConfigMapBody) SetClusterId(v string) *UpdateK8sConfigMapBody {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sConfigMapBody) SetData(v map[string]interface{}) *UpdateK8sConfigMapBody {
	s.Data = v
	return s
}

func (s *UpdateK8sConfigMapBody) SetName(v string) *UpdateK8sConfigMapBody {
	s.Name = &v
	return s
}

func (s *UpdateK8sConfigMapBody) SetNamespace(v string) *UpdateK8sConfigMapBody {
	s.Namespace = &v
	return s
}

type UpdateK8sConfigMapRequest struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UpdateK8sConfigMapBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sConfigMapRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sConfigMapRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sConfigMapRequest) SetHeaders(v map[string]*string) *UpdateK8sConfigMapRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sConfigMapRequest) SetBody(v *UpdateK8sConfigMapBody) *UpdateK8sConfigMapRequest {
	s.Body = v
	return s
}

type UpdateK8sConfigMapResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateK8sConfigMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sConfigMapResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sConfigMapResponseBody) SetCode(v int) *UpdateK8sConfigMapResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sConfigMapResponseBody) SetMessage(v string) *UpdateK8sConfigMapResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sConfigMapResponseBody) SetRequestId(v string) *UpdateK8sConfigMapResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sConfigMapResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sConfigMapResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sConfigMapResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sConfigMapResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sConfigMapResponse) SetHeaders(v map[string]*string) *UpdateK8sConfigMapResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sConfigMapResponse) SetBody(v *UpdateK8sConfigMapResponseBody) *UpdateK8sConfigMapResponse {
	s.Body = v
	return s
}

type UpdateK8sIngressRuleQuery struct {
	ClusterId   *string                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	IngressConf map[string]interface{} `json:"IngressConf,omitempty" xml:"IngressConf,omitempty"`
	Name        *string                `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace   *string                `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s UpdateK8sIngressRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleQuery) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleQuery) SetClusterId(v string) *UpdateK8sIngressRuleQuery {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sIngressRuleQuery) SetIngressConf(v map[string]interface{}) *UpdateK8sIngressRuleQuery {
	s.IngressConf = v
	return s
}

func (s *UpdateK8sIngressRuleQuery) SetName(v string) *UpdateK8sIngressRuleQuery {
	s.Name = &v
	return s
}

func (s *UpdateK8sIngressRuleQuery) SetNamespace(v string) *UpdateK8sIngressRuleQuery {
	s.Namespace = &v
	return s
}

type UpdateK8sIngressRuleShrinkQuery struct {
	ClusterId         *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	IngressConfShrink *string `json:"IngressConf,omitempty" xml:"IngressConf,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace         *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
}

func (s UpdateK8sIngressRuleShrinkQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleShrinkQuery) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleShrinkQuery) SetClusterId(v string) *UpdateK8sIngressRuleShrinkQuery {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sIngressRuleShrinkQuery) SetIngressConfShrink(v string) *UpdateK8sIngressRuleShrinkQuery {
	s.IngressConfShrink = &v
	return s
}

func (s *UpdateK8sIngressRuleShrinkQuery) SetName(v string) *UpdateK8sIngressRuleShrinkQuery {
	s.Name = &v
	return s
}

func (s *UpdateK8sIngressRuleShrinkQuery) SetNamespace(v string) *UpdateK8sIngressRuleShrinkQuery {
	s.Namespace = &v
	return s
}

type UpdateK8sIngressRuleRequest struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateK8sIngressRuleQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s UpdateK8sIngressRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleRequest) SetHeaders(v map[string]*string) *UpdateK8sIngressRuleRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sIngressRuleRequest) SetQuery(v *UpdateK8sIngressRuleQuery) *UpdateK8sIngressRuleRequest {
	s.Query = v
	return s
}

type UpdateK8sIngressRuleShrinkRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateK8sIngressRuleShrinkQuery `json:"query,omitempty" xml:"query,omitempty"`
}

func (s UpdateK8sIngressRuleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleShrinkRequest) SetHeaders(v map[string]*string) *UpdateK8sIngressRuleShrinkRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sIngressRuleShrinkRequest) SetQuery(v *UpdateK8sIngressRuleShrinkQuery) *UpdateK8sIngressRuleShrinkRequest {
	s.Query = v
	return s
}

type UpdateK8sIngressRuleResponseBody struct {
	Code    *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
}

func (s UpdateK8sIngressRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleResponseBody) SetCode(v int) *UpdateK8sIngressRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sIngressRuleResponseBody) SetMessage(v string) *UpdateK8sIngressRuleResponseBody {
	s.Message = &v
	return s
}

type UpdateK8sIngressRuleResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sIngressRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sIngressRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sIngressRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sIngressRuleResponse) SetHeaders(v map[string]*string) *UpdateK8sIngressRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sIngressRuleResponse) SetBody(v *UpdateK8sIngressRuleResponseBody) *UpdateK8sIngressRuleResponse {
	s.Body = v
	return s
}

type UpdateK8sResourceBody struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Namespace       *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ResourceContent *string `json:"ResourceContent,omitempty" xml:"ResourceContent,omitempty"`
}

func (s UpdateK8sResourceBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sResourceBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sResourceBody) SetClusterId(v string) *UpdateK8sResourceBody {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sResourceBody) SetNamespace(v string) *UpdateK8sResourceBody {
	s.Namespace = &v
	return s
}

func (s *UpdateK8sResourceBody) SetResourceContent(v string) *UpdateK8sResourceBody {
	s.ResourceContent = &v
	return s
}

type UpdateK8sResourceRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UpdateK8sResourceBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateK8sResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sResourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sResourceRequest) SetHeaders(v map[string]*string) *UpdateK8sResourceRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sResourceRequest) SetBody(v *UpdateK8sResourceBody) *UpdateK8sResourceRequest {
	s.Body = v
	return s
}

type UpdateK8sResourceResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateK8sResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sResourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sResourceResponseBody) SetCode(v int) *UpdateK8sResourceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sResourceResponseBody) SetMessage(v string) *UpdateK8sResourceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sResourceResponseBody) SetRequestId(v string) *UpdateK8sResourceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sResourceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sResourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sResourceResponse) SetHeaders(v map[string]*string) *UpdateK8sResourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sResourceResponse) SetBody(v *UpdateK8sResourceResponseBody) *UpdateK8sResourceResponse {
	s.Body = v
	return s
}

type UpdateK8sSecretBody struct {
	Base64Encoded *bool   `json:"Base64Encoded,omitempty" xml:"Base64Encoded,omitempty"`
	CertId        *string `json:"CertId,omitempty" xml:"CertId,omitempty"`
	CertRegionId  *string `json:"CertRegionId,omitempty" xml:"CertRegionId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	Data          *string `json:"Data,omitempty" xml:"Data,omitempty" require:"true"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Namespace     *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s UpdateK8sSecretBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSecretBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sSecretBody) SetBase64Encoded(v bool) *UpdateK8sSecretBody {
	s.Base64Encoded = &v
	return s
}

func (s *UpdateK8sSecretBody) SetCertId(v string) *UpdateK8sSecretBody {
	s.CertId = &v
	return s
}

func (s *UpdateK8sSecretBody) SetCertRegionId(v string) *UpdateK8sSecretBody {
	s.CertRegionId = &v
	return s
}

func (s *UpdateK8sSecretBody) SetClusterId(v string) *UpdateK8sSecretBody {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sSecretBody) SetData(v string) *UpdateK8sSecretBody {
	s.Data = &v
	return s
}

func (s *UpdateK8sSecretBody) SetName(v string) *UpdateK8sSecretBody {
	s.Name = &v
	return s
}

func (s *UpdateK8sSecretBody) SetNamespace(v string) *UpdateK8sSecretBody {
	s.Namespace = &v
	return s
}

func (s *UpdateK8sSecretBody) SetType(v string) *UpdateK8sSecretBody {
	s.Type = &v
	return s
}

type UpdateK8sSecretRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UpdateK8sSecretBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sSecretRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSecretRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sSecretRequest) SetHeaders(v map[string]*string) *UpdateK8sSecretRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sSecretRequest) SetBody(v *UpdateK8sSecretBody) *UpdateK8sSecretRequest {
	s.Body = v
	return s
}

type UpdateK8sSecretResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateK8sSecretResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSecretResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sSecretResponseBody) SetCode(v int) *UpdateK8sSecretResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sSecretResponseBody) SetMessage(v string) *UpdateK8sSecretResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sSecretResponseBody) SetRequestId(v string) *UpdateK8sSecretResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sSecretResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sSecretResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sSecretResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSecretResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sSecretResponse) SetHeaders(v map[string]*string) *UpdateK8sSecretResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sSecretResponse) SetBody(v *UpdateK8sSecretResponseBody) *UpdateK8sSecretResponse {
	s.Body = v
	return s
}

type UpdateK8sServiceQuery struct {
	AppId        *string                `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Name         *string                `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ServicePorts map[string]interface{} `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty" require:"true"`
	Type         *string                `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s UpdateK8sServiceQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceQuery) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceQuery) SetAppId(v string) *UpdateK8sServiceQuery {
	s.AppId = &v
	return s
}

func (s *UpdateK8sServiceQuery) SetName(v string) *UpdateK8sServiceQuery {
	s.Name = &v
	return s
}

func (s *UpdateK8sServiceQuery) SetServicePorts(v map[string]interface{}) *UpdateK8sServiceQuery {
	s.ServicePorts = v
	return s
}

func (s *UpdateK8sServiceQuery) SetType(v string) *UpdateK8sServiceQuery {
	s.Type = &v
	return s
}

type UpdateK8sServiceShrinkQuery struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	ServicePortsShrink *string `json:"ServicePorts,omitempty" xml:"ServicePorts,omitempty" require:"true"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s UpdateK8sServiceShrinkQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceShrinkQuery) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceShrinkQuery) SetAppId(v string) *UpdateK8sServiceShrinkQuery {
	s.AppId = &v
	return s
}

func (s *UpdateK8sServiceShrinkQuery) SetName(v string) *UpdateK8sServiceShrinkQuery {
	s.Name = &v
	return s
}

func (s *UpdateK8sServiceShrinkQuery) SetServicePortsShrink(v string) *UpdateK8sServiceShrinkQuery {
	s.ServicePortsShrink = &v
	return s
}

func (s *UpdateK8sServiceShrinkQuery) SetType(v string) *UpdateK8sServiceShrinkQuery {
	s.Type = &v
	return s
}

type UpdateK8sServiceRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateK8sServiceQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateK8sServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceRequest) SetHeaders(v map[string]*string) *UpdateK8sServiceRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sServiceRequest) SetQuery(v *UpdateK8sServiceQuery) *UpdateK8sServiceRequest {
	s.Query = v
	return s
}

type UpdateK8sServiceShrinkRequest struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateK8sServiceShrinkQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateK8sServiceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceShrinkRequest) SetHeaders(v map[string]*string) *UpdateK8sServiceShrinkRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sServiceShrinkRequest) SetQuery(v *UpdateK8sServiceShrinkQuery) *UpdateK8sServiceShrinkRequest {
	s.Query = v
	return s
}

type UpdateK8sServiceResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateK8sServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceResponseBody) SetChangeOrderId(v string) *UpdateK8sServiceResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateK8sServiceResponseBody) SetCode(v int) *UpdateK8sServiceResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sServiceResponseBody) SetMessage(v string) *UpdateK8sServiceResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sServiceResponseBody) SetRequestId(v string) *UpdateK8sServiceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sServiceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sServiceResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sServiceResponse) SetHeaders(v map[string]*string) *UpdateK8sServiceResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sServiceResponse) SetBody(v *UpdateK8sServiceResponseBody) *UpdateK8sServiceResponse {
	s.Body = v
	return s
}

type UpdateK8sSlbQuery struct {
	AppId                *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	ClusterId            *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" require:"true"`
	DisableForceOverride *bool   `json:"DisableForceOverride,omitempty" xml:"DisableForceOverride,omitempty"`
	Port                 *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Scheduler            *string `json:"Scheduler,omitempty" xml:"Scheduler,omitempty"`
	ServicePortInfos     *string `json:"ServicePortInfos,omitempty" xml:"ServicePortInfos,omitempty"`
	SlbName              *string `json:"SlbName,omitempty" xml:"SlbName,omitempty"`
	SlbProtocol          *string `json:"SlbProtocol,omitempty" xml:"SlbProtocol,omitempty"`
	Specification        *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	TargetPort           *string `json:"TargetPort,omitempty" xml:"TargetPort,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty" require:"true"`
}

func (s UpdateK8sSlbQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSlbQuery) GoString() string {
	return s.String()
}

func (s *UpdateK8sSlbQuery) SetAppId(v string) *UpdateK8sSlbQuery {
	s.AppId = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetClusterId(v string) *UpdateK8sSlbQuery {
	s.ClusterId = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetDisableForceOverride(v bool) *UpdateK8sSlbQuery {
	s.DisableForceOverride = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetPort(v string) *UpdateK8sSlbQuery {
	s.Port = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetScheduler(v string) *UpdateK8sSlbQuery {
	s.Scheduler = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetServicePortInfos(v string) *UpdateK8sSlbQuery {
	s.ServicePortInfos = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetSlbName(v string) *UpdateK8sSlbQuery {
	s.SlbName = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetSlbProtocol(v string) *UpdateK8sSlbQuery {
	s.SlbProtocol = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetSpecification(v string) *UpdateK8sSlbQuery {
	s.Specification = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetTargetPort(v string) *UpdateK8sSlbQuery {
	s.TargetPort = &v
	return s
}

func (s *UpdateK8sSlbQuery) SetType(v string) *UpdateK8sSlbQuery {
	s.Type = &v
	return s
}

type UpdateK8sSlbRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateK8sSlbQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateK8sSlbRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSlbRequest) GoString() string {
	return s.String()
}

func (s *UpdateK8sSlbRequest) SetHeaders(v map[string]*string) *UpdateK8sSlbRequest {
	s.Headers = v
	return s
}

func (s *UpdateK8sSlbRequest) SetQuery(v *UpdateK8sSlbQuery) *UpdateK8sSlbRequest {
	s.Query = v
	return s
}

type UpdateK8sSlbResponseBody struct {
	ChangeOrderId *string `json:"ChangeOrderId,omitempty" xml:"ChangeOrderId,omitempty" require:"true"`
	Code          *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateK8sSlbResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSlbResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateK8sSlbResponseBody) SetChangeOrderId(v string) *UpdateK8sSlbResponseBody {
	s.ChangeOrderId = &v
	return s
}

func (s *UpdateK8sSlbResponseBody) SetCode(v int) *UpdateK8sSlbResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateK8sSlbResponseBody) SetMessage(v string) *UpdateK8sSlbResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateK8sSlbResponseBody) SetRequestId(v string) *UpdateK8sSlbResponseBody {
	s.RequestId = &v
	return s
}

type UpdateK8sSlbResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateK8sSlbResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateK8sSlbResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateK8sSlbResponse) GoString() string {
	return s.String()
}

func (s *UpdateK8sSlbResponse) SetHeaders(v map[string]*string) *UpdateK8sSlbResponse {
	s.Headers = v
	return s
}

func (s *UpdateK8sSlbResponse) SetBody(v *UpdateK8sSlbResponseBody) *UpdateK8sSlbResponse {
	s.Body = v
	return s
}

type UpdateLocalitySettingQuery struct {
	AppId       *string  `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Enabled     *bool    `json:"Enabled,omitempty" xml:"Enabled,omitempty" require:"true"`
	NamespaceId *string  `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	Region      *string  `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	Threshold   *float32 `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
}

func (s UpdateLocalitySettingQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateLocalitySettingQuery) GoString() string {
	return s.String()
}

func (s *UpdateLocalitySettingQuery) SetAppId(v string) *UpdateLocalitySettingQuery {
	s.AppId = &v
	return s
}

func (s *UpdateLocalitySettingQuery) SetEnabled(v bool) *UpdateLocalitySettingQuery {
	s.Enabled = &v
	return s
}

func (s *UpdateLocalitySettingQuery) SetNamespaceId(v string) *UpdateLocalitySettingQuery {
	s.NamespaceId = &v
	return s
}

func (s *UpdateLocalitySettingQuery) SetRegion(v string) *UpdateLocalitySettingQuery {
	s.Region = &v
	return s
}

func (s *UpdateLocalitySettingQuery) SetThreshold(v float32) *UpdateLocalitySettingQuery {
	s.Threshold = &v
	return s
}

type UpdateLocalitySettingRequest struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateLocalitySettingQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateLocalitySettingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLocalitySettingRequest) GoString() string {
	return s.String()
}

func (s *UpdateLocalitySettingRequest) SetHeaders(v map[string]*string) *UpdateLocalitySettingRequest {
	s.Headers = v
	return s
}

func (s *UpdateLocalitySettingRequest) SetQuery(v *UpdateLocalitySettingQuery) *UpdateLocalitySettingRequest {
	s.Query = v
	return s
}

type UpdateLocalitySettingResponseBody struct {
	Code           *int                                   `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpStatusCode *int                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty" require:"true"`
	Message        *string                                `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data           *UpdateLocalitySettingResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s UpdateLocalitySettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLocalitySettingResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLocalitySettingResponseBody) SetCode(v int) *UpdateLocalitySettingResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateLocalitySettingResponseBody) SetHttpStatusCode(v int) *UpdateLocalitySettingResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *UpdateLocalitySettingResponseBody) SetMessage(v string) *UpdateLocalitySettingResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateLocalitySettingResponseBody) SetRequestId(v string) *UpdateLocalitySettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateLocalitySettingResponseBody) SetSuccess(v bool) *UpdateLocalitySettingResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateLocalitySettingResponseBody) SetData(v *UpdateLocalitySettingResponseBodyData) *UpdateLocalitySettingResponseBody {
	s.Data = v
	return s
}

type UpdateLocalitySettingResponseBodyData struct {
	Enabled   *bool    `json:"Enabled,omitempty" xml:"Enabled,omitempty" require:"true"`
	Threshold *float32 `json:"Threshold,omitempty" xml:"Threshold,omitempty" require:"true"`
}

func (s UpdateLocalitySettingResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateLocalitySettingResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateLocalitySettingResponseBodyData) SetEnabled(v bool) *UpdateLocalitySettingResponseBodyData {
	s.Enabled = &v
	return s
}

func (s *UpdateLocalitySettingResponseBodyData) SetThreshold(v float32) *UpdateLocalitySettingResponseBodyData {
	s.Threshold = &v
	return s
}

type UpdateLocalitySettingResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLocalitySettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLocalitySettingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLocalitySettingResponse) GoString() string {
	return s.String()
}

func (s *UpdateLocalitySettingResponse) SetHeaders(v map[string]*string) *UpdateLocalitySettingResponse {
	s.Headers = v
	return s
}

func (s *UpdateLocalitySettingResponse) SetBody(v *UpdateLocalitySettingResponseBody) *UpdateLocalitySettingResponse {
	s.Body = v
	return s
}

type UpdateMockRuleQuery struct {
	DubboMockItemJson *string `json:"DubboMockItemJson,omitempty" xml:"DubboMockItemJson,omitempty" require:"true"`
	ExtraJson         *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	Region            *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson    *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
}

func (s UpdateMockRuleQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleQuery) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleQuery) SetDubboMockItemJson(v string) *UpdateMockRuleQuery {
	s.DubboMockItemJson = &v
	return s
}

func (s *UpdateMockRuleQuery) SetExtraJson(v string) *UpdateMockRuleQuery {
	s.ExtraJson = &v
	return s
}

func (s *UpdateMockRuleQuery) SetId(v string) *UpdateMockRuleQuery {
	s.Id = &v
	return s
}

func (s *UpdateMockRuleQuery) SetName(v string) *UpdateMockRuleQuery {
	s.Name = &v
	return s
}

func (s *UpdateMockRuleQuery) SetRegion(v string) *UpdateMockRuleQuery {
	s.Region = &v
	return s
}

func (s *UpdateMockRuleQuery) SetScMockItemJson(v string) *UpdateMockRuleQuery {
	s.ScMockItemJson = &v
	return s
}

type UpdateMockRuleRequest struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateMockRuleQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateMockRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleRequest) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleRequest) SetHeaders(v map[string]*string) *UpdateMockRuleRequest {
	s.Headers = v
	return s
}

func (s *UpdateMockRuleRequest) SetQuery(v *UpdateMockRuleQuery) *UpdateMockRuleRequest {
	s.Query = v
	return s
}

type UpdateMockRuleResponseBody struct {
	Code      *string                         `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	HttpCode  *string                         `json:"HttpCode,omitempty" xml:"HttpCode,omitempty" require:"true"`
	Message   *string                         `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Success   *bool                           `json:"Success,omitempty" xml:"Success,omitempty" require:"true"`
	Data      *UpdateMockRuleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s UpdateMockRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleResponseBody) SetCode(v string) *UpdateMockRuleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetHttpCode(v string) *UpdateMockRuleResponseBody {
	s.HttpCode = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetMessage(v string) *UpdateMockRuleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetRequestId(v string) *UpdateMockRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetSuccess(v bool) *UpdateMockRuleResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateMockRuleResponseBody) SetData(v *UpdateMockRuleResponseBodyData) *UpdateMockRuleResponseBody {
	s.Data = v
	return s
}

type UpdateMockRuleResponseBodyData struct {
	AccountId         *string `json:"AccountId,omitempty" xml:"AccountId,omitempty" require:"true"`
	ConsumerAppId     *string `json:"ConsumerAppId,omitempty" xml:"ConsumerAppId,omitempty" require:"true"`
	ConsumerAppName   *string `json:"ConsumerAppName,omitempty" xml:"ConsumerAppName,omitempty" require:"true"`
	DubboMockItemJson *string `json:"DubboMockItemJson,omitempty" xml:"DubboMockItemJson,omitempty" require:"true"`
	Enable            *bool   `json:"Enable,omitempty" xml:"Enable,omitempty" require:"true"`
	ExtraJson         *string `json:"ExtraJson,omitempty" xml:"ExtraJson,omitempty" require:"true"`
	Id                *int64  `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId       *string `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ProviderAppId     *string `json:"ProviderAppId,omitempty" xml:"ProviderAppId,omitempty" require:"true"`
	ProviderAppName   *string `json:"ProviderAppName,omitempty" xml:"ProviderAppName,omitempty" require:"true"`
	Region            *string `json:"Region,omitempty" xml:"Region,omitempty" require:"true"`
	ScMockItemJson    *string `json:"ScMockItemJson,omitempty" xml:"ScMockItemJson,omitempty" require:"true"`
	Source            *string `json:"Source,omitempty" xml:"Source,omitempty" require:"true"`
}

func (s UpdateMockRuleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleResponseBodyData) SetAccountId(v string) *UpdateMockRuleResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetConsumerAppId(v string) *UpdateMockRuleResponseBodyData {
	s.ConsumerAppId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetConsumerAppName(v string) *UpdateMockRuleResponseBodyData {
	s.ConsumerAppName = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetDubboMockItemJson(v string) *UpdateMockRuleResponseBodyData {
	s.DubboMockItemJson = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetEnable(v bool) *UpdateMockRuleResponseBodyData {
	s.Enable = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetExtraJson(v string) *UpdateMockRuleResponseBodyData {
	s.ExtraJson = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetId(v int64) *UpdateMockRuleResponseBodyData {
	s.Id = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetName(v string) *UpdateMockRuleResponseBodyData {
	s.Name = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetNamespaceId(v string) *UpdateMockRuleResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetProviderAppId(v string) *UpdateMockRuleResponseBodyData {
	s.ProviderAppId = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetProviderAppName(v string) *UpdateMockRuleResponseBodyData {
	s.ProviderAppName = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetRegion(v string) *UpdateMockRuleResponseBodyData {
	s.Region = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetScMockItemJson(v string) *UpdateMockRuleResponseBodyData {
	s.ScMockItemJson = &v
	return s
}

func (s *UpdateMockRuleResponseBodyData) SetSource(v string) *UpdateMockRuleResponseBodyData {
	s.Source = &v
	return s
}

type UpdateMockRuleResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMockRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMockRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMockRuleResponse) GoString() string {
	return s.String()
}

func (s *UpdateMockRuleResponse) SetHeaders(v map[string]*string) *UpdateMockRuleResponse {
	s.Headers = v
	return s
}

func (s *UpdateMockRuleResponse) SetBody(v *UpdateMockRuleResponseBody) *UpdateMockRuleResponse {
	s.Body = v
	return s
}

type UpdateRoleQuery struct {
	ActionData *string `json:"ActionData,omitempty" xml:"ActionData,omitempty" require:"true"`
	RoleId     *int    `json:"RoleId,omitempty" xml:"RoleId,omitempty" require:"true"`
}

func (s UpdateRoleQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateRoleQuery) GoString() string {
	return s.String()
}

func (s *UpdateRoleQuery) SetActionData(v string) *UpdateRoleQuery {
	s.ActionData = &v
	return s
}

func (s *UpdateRoleQuery) SetRoleId(v int) *UpdateRoleQuery {
	s.RoleId = &v
	return s
}

type UpdateRoleRequest struct {
	Headers map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateRoleQuery   `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRoleRequest) GoString() string {
	return s.String()
}

func (s *UpdateRoleRequest) SetHeaders(v map[string]*string) *UpdateRoleRequest {
	s.Headers = v
	return s
}

func (s *UpdateRoleRequest) SetQuery(v *UpdateRoleQuery) *UpdateRoleRequest {
	s.Query = v
	return s
}

type UpdateRoleResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRoleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRoleResponseBody) SetCode(v int) *UpdateRoleResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateRoleResponseBody) SetMessage(v string) *UpdateRoleResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateRoleResponseBody) SetRequestId(v string) *UpdateRoleResponseBody {
	s.RequestId = &v
	return s
}

type UpdateRoleResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateRoleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRoleResponse) GoString() string {
	return s.String()
}

func (s *UpdateRoleResponse) SetHeaders(v map[string]*string) *UpdateRoleResponse {
	s.Headers = v
	return s
}

func (s *UpdateRoleResponse) SetBody(v *UpdateRoleResponseBody) *UpdateRoleResponse {
	s.Body = v
	return s
}

type UpdateSlsLogStoreBody struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Configs *string `json:"Configs,omitempty" xml:"Configs,omitempty" require:"true"`
}

func (s UpdateSlsLogStoreBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsLogStoreBody) GoString() string {
	return s.String()
}

func (s *UpdateSlsLogStoreBody) SetAppId(v string) *UpdateSlsLogStoreBody {
	s.AppId = &v
	return s
}

func (s *UpdateSlsLogStoreBody) SetConfigs(v string) *UpdateSlsLogStoreBody {
	s.Configs = &v
	return s
}

type UpdateSlsLogStoreRequest struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UpdateSlsLogStoreBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSlsLogStoreRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsLogStoreRequest) GoString() string {
	return s.String()
}

func (s *UpdateSlsLogStoreRequest) SetHeaders(v map[string]*string) *UpdateSlsLogStoreRequest {
	s.Headers = v
	return s
}

func (s *UpdateSlsLogStoreRequest) SetBody(v *UpdateSlsLogStoreBody) *UpdateSlsLogStoreRequest {
	s.Body = v
	return s
}

type UpdateSlsLogStoreResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UpdateSlsLogStoreResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsLogStoreResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSlsLogStoreResponseBody) SetCode(v int) *UpdateSlsLogStoreResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSlsLogStoreResponseBody) SetMessage(v string) *UpdateSlsLogStoreResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSlsLogStoreResponseBody) SetRequestId(v string) *UpdateSlsLogStoreResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSlsLogStoreResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSlsLogStoreResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSlsLogStoreResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSlsLogStoreResponse) GoString() string {
	return s.String()
}

func (s *UpdateSlsLogStoreResponse) SetHeaders(v map[string]*string) *UpdateSlsLogStoreResponse {
	s.Headers = v
	return s
}

func (s *UpdateSlsLogStoreResponse) SetBody(v *UpdateSlsLogStoreResponseBody) *UpdateSlsLogStoreResponse {
	s.Body = v
	return s
}

type UpdateSwimmingLaneQuery struct {
	AppInfos    *string `json:"AppInfos,omitempty" xml:"AppInfos,omitempty"`
	EnableRules *bool   `json:"EnableRules,omitempty" xml:"EnableRules,omitempty" require:"true"`
	EntryRules  *string `json:"EntryRules,omitempty" xml:"EntryRules,omitempty"`
	LaneId      *int64  `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateSwimmingLaneQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneQuery) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneQuery) SetAppInfos(v string) *UpdateSwimmingLaneQuery {
	s.AppInfos = &v
	return s
}

func (s *UpdateSwimmingLaneQuery) SetEnableRules(v bool) *UpdateSwimmingLaneQuery {
	s.EnableRules = &v
	return s
}

func (s *UpdateSwimmingLaneQuery) SetEntryRules(v string) *UpdateSwimmingLaneQuery {
	s.EntryRules = &v
	return s
}

func (s *UpdateSwimmingLaneQuery) SetLaneId(v int64) *UpdateSwimmingLaneQuery {
	s.LaneId = &v
	return s
}

func (s *UpdateSwimmingLaneQuery) SetName(v string) *UpdateSwimmingLaneQuery {
	s.Name = &v
	return s
}

type UpdateSwimmingLaneRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateSwimmingLaneQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneRequest) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneRequest) SetHeaders(v map[string]*string) *UpdateSwimmingLaneRequest {
	s.Headers = v
	return s
}

func (s *UpdateSwimmingLaneRequest) SetQuery(v *UpdateSwimmingLaneQuery) *UpdateSwimmingLaneRequest {
	s.Query = v
	return s
}

type UpdateSwimmingLaneResponseBody struct {
	Code      *int                                `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *UpdateSwimmingLaneResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s UpdateSwimmingLaneResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneResponseBody) SetCode(v int) *UpdateSwimmingLaneResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBody) SetMessage(v string) *UpdateSwimmingLaneResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBody) SetRequestId(v string) *UpdateSwimmingLaneResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBody) SetData(v *UpdateSwimmingLaneResponseBodyData) *UpdateSwimmingLaneResponseBody {
	s.Data = v
	return s
}

type UpdateSwimmingLaneResponseBodyData struct {
	EntryRule                       *string                                                              `json:"EntryRule,omitempty" xml:"EntryRule,omitempty" require:"true"`
	GroupId                         *int64                                                               `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Id                              *int64                                                               `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name                            *string                                                              `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId                     *string                                                              `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	Tag                             *string                                                              `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	SwimmingLaneAppRelationShipList []*UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList `json:"SwimmingLaneAppRelationShipList,omitempty" xml:"SwimmingLaneAppRelationShipList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateSwimmingLaneResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneResponseBodyData) SetEntryRule(v string) *UpdateSwimmingLaneResponseBodyData {
	s.EntryRule = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyData) SetGroupId(v int64) *UpdateSwimmingLaneResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyData) SetId(v int64) *UpdateSwimmingLaneResponseBodyData {
	s.Id = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyData) SetName(v string) *UpdateSwimmingLaneResponseBodyData {
	s.Name = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyData) SetNamespaceId(v string) *UpdateSwimmingLaneResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyData) SetTag(v string) *UpdateSwimmingLaneResponseBodyData {
	s.Tag = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyData) SetSwimmingLaneAppRelationShipList(v []*UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) *UpdateSwimmingLaneResponseBodyData {
	s.SwimmingLaneAppRelationShipList = v
	return s
}

type UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	LaneId  *int64  `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
	Rules   *string `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppId(v string) *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppId = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetAppName(v string) *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppName = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetLaneId(v int64) *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.LaneId = &v
	return s
}

func (s *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList) SetRules(v string) *UpdateSwimmingLaneResponseBodyDataSwimmingLaneAppRelationShipList {
	s.Rules = &v
	return s
}

type UpdateSwimmingLaneResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSwimmingLaneResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneResponse) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneResponse) SetHeaders(v map[string]*string) *UpdateSwimmingLaneResponse {
	s.Headers = v
	return s
}

func (s *UpdateSwimmingLaneResponse) SetBody(v *UpdateSwimmingLaneResponseBody) *UpdateSwimmingLaneResponse {
	s.Body = v
	return s
}

type UpdateSwimmingLaneGroupQuery struct {
	AppIds   *string `json:"AppIds,omitempty" xml:"AppIds,omitempty" require:"true"`
	EntryApp *string `json:"EntryApp,omitempty" xml:"EntryApp,omitempty"`
	GroupId  *int64  `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneGroupQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneGroupQuery) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneGroupQuery) SetAppIds(v string) *UpdateSwimmingLaneGroupQuery {
	s.AppIds = &v
	return s
}

func (s *UpdateSwimmingLaneGroupQuery) SetEntryApp(v string) *UpdateSwimmingLaneGroupQuery {
	s.EntryApp = &v
	return s
}

func (s *UpdateSwimmingLaneGroupQuery) SetGroupId(v int64) *UpdateSwimmingLaneGroupQuery {
	s.GroupId = &v
	return s
}

func (s *UpdateSwimmingLaneGroupQuery) SetName(v string) *UpdateSwimmingLaneGroupQuery {
	s.Name = &v
	return s
}

type UpdateSwimmingLaneGroupRequest struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateSwimmingLaneGroupQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneGroupRequest) SetHeaders(v map[string]*string) *UpdateSwimmingLaneGroupRequest {
	s.Headers = v
	return s
}

func (s *UpdateSwimmingLaneGroupRequest) SetQuery(v *UpdateSwimmingLaneGroupQuery) *UpdateSwimmingLaneGroupRequest {
	s.Query = v
	return s
}

type UpdateSwimmingLaneGroupResponseBody struct {
	Code      *int                                     `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                  `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *UpdateSwimmingLaneGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s UpdateSwimmingLaneGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneGroupResponseBody) SetCode(v int) *UpdateSwimmingLaneGroupResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBody) SetMessage(v string) *UpdateSwimmingLaneGroupResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBody) SetRequestId(v string) *UpdateSwimmingLaneGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBody) SetData(v *UpdateSwimmingLaneGroupResponseBodyData) *UpdateSwimmingLaneGroupResponseBody {
	s.Data = v
	return s
}

type UpdateSwimmingLaneGroupResponseBodyData struct {
	Id               *int64                                                    `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name             *string                                                   `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId      *string                                                   `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	ApplicationList  []*UpdateSwimmingLaneGroupResponseBodyDataApplicationList `json:"ApplicationList,omitempty" xml:"ApplicationList,omitempty" require:"true" type:"Repeated"`
	EntryApplication *UpdateSwimmingLaneGroupResponseBodyDataEntryApplication  `json:"EntryApplication,omitempty" xml:"EntryApplication,omitempty" require:"true" type:"Struct"`
}

func (s UpdateSwimmingLaneGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneGroupResponseBodyData) SetId(v int64) *UpdateSwimmingLaneGroupResponseBodyData {
	s.Id = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBodyData) SetName(v string) *UpdateSwimmingLaneGroupResponseBodyData {
	s.Name = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBodyData) SetNamespaceId(v string) *UpdateSwimmingLaneGroupResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBodyData) SetApplicationList(v []*UpdateSwimmingLaneGroupResponseBodyDataApplicationList) *UpdateSwimmingLaneGroupResponseBodyData {
	s.ApplicationList = v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBodyData) SetEntryApplication(v *UpdateSwimmingLaneGroupResponseBodyDataEntryApplication) *UpdateSwimmingLaneGroupResponseBodyData {
	s.EntryApplication = v
	return s
}

type UpdateSwimmingLaneGroupResponseBodyDataApplicationList struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneGroupResponseBodyDataApplicationList) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneGroupResponseBodyDataApplicationList) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneGroupResponseBodyDataApplicationList) SetAppId(v string) *UpdateSwimmingLaneGroupResponseBodyDataApplicationList {
	s.AppId = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBodyDataApplicationList) SetAppName(v string) *UpdateSwimmingLaneGroupResponseBodyDataApplicationList {
	s.AppName = &v
	return s
}

type UpdateSwimmingLaneGroupResponseBodyDataEntryApplication struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneGroupResponseBodyDataEntryApplication) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneGroupResponseBodyDataEntryApplication) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneGroupResponseBodyDataEntryApplication) SetAppId(v string) *UpdateSwimmingLaneGroupResponseBodyDataEntryApplication {
	s.AppId = &v
	return s
}

func (s *UpdateSwimmingLaneGroupResponseBodyDataEntryApplication) SetAppName(v string) *UpdateSwimmingLaneGroupResponseBodyDataEntryApplication {
	s.AppName = &v
	return s
}

type UpdateSwimmingLaneGroupResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSwimmingLaneGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSwimmingLaneGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLaneGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLaneGroupResponse) SetHeaders(v map[string]*string) *UpdateSwimmingLaneGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateSwimmingLaneGroupResponse) SetBody(v *UpdateSwimmingLaneGroupResponseBody) *UpdateSwimmingLaneGroupResponse {
	s.Body = v
	return s
}

type UpdateSwimmingLanePriorityQuery struct {
	Priorities *string `json:"Priorities,omitempty" xml:"Priorities,omitempty" require:"true"`
}

func (s UpdateSwimmingLanePriorityQuery) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLanePriorityQuery) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLanePriorityQuery) SetPriorities(v string) *UpdateSwimmingLanePriorityQuery {
	s.Priorities = &v
	return s
}

type UpdateSwimmingLanePriorityRequest struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	Query   *UpdateSwimmingLanePriorityQuery `json:"query,omitempty" xml:"query,omitempty" require:"true"`
}

func (s UpdateSwimmingLanePriorityRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLanePriorityRequest) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLanePriorityRequest) SetHeaders(v map[string]*string) *UpdateSwimmingLanePriorityRequest {
	s.Headers = v
	return s
}

func (s *UpdateSwimmingLanePriorityRequest) SetQuery(v *UpdateSwimmingLanePriorityQuery) *UpdateSwimmingLanePriorityRequest {
	s.Query = v
	return s
}

type UpdateSwimmingLanePriorityResponseBody struct {
	Code      *int                                        `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string                                     `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
	Data      *UpdateSwimmingLanePriorityResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" require:"true" type:"Struct"`
}

func (s UpdateSwimmingLanePriorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLanePriorityResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLanePriorityResponseBody) SetCode(v int) *UpdateSwimmingLanePriorityResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBody) SetMessage(v string) *UpdateSwimmingLanePriorityResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBody) SetRequestId(v string) *UpdateSwimmingLanePriorityResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBody) SetData(v *UpdateSwimmingLanePriorityResponseBodyData) *UpdateSwimmingLanePriorityResponseBody {
	s.Data = v
	return s
}

type UpdateSwimmingLanePriorityResponseBodyData struct {
	EntryRule                       *string                                                                      `json:"EntryRule,omitempty" xml:"EntryRule,omitempty" require:"true"`
	GroupId                         *int64                                                                       `json:"GroupId,omitempty" xml:"GroupId,omitempty" require:"true"`
	Id                              *int64                                                                       `json:"Id,omitempty" xml:"Id,omitempty" require:"true"`
	Name                            *string                                                                      `json:"Name,omitempty" xml:"Name,omitempty" require:"true"`
	NamespaceId                     *string                                                                      `json:"NamespaceId,omitempty" xml:"NamespaceId,omitempty" require:"true"`
	Tag                             *string                                                                      `json:"Tag,omitempty" xml:"Tag,omitempty" require:"true"`
	SwimmingLaneAppRelationShipList []*UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList `json:"SwimmingLaneAppRelationShipList,omitempty" xml:"SwimmingLaneAppRelationShipList,omitempty" require:"true" type:"Repeated"`
}

func (s UpdateSwimmingLanePriorityResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLanePriorityResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLanePriorityResponseBodyData) SetEntryRule(v string) *UpdateSwimmingLanePriorityResponseBodyData {
	s.EntryRule = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyData) SetGroupId(v int64) *UpdateSwimmingLanePriorityResponseBodyData {
	s.GroupId = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyData) SetId(v int64) *UpdateSwimmingLanePriorityResponseBodyData {
	s.Id = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyData) SetName(v string) *UpdateSwimmingLanePriorityResponseBodyData {
	s.Name = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyData) SetNamespaceId(v string) *UpdateSwimmingLanePriorityResponseBodyData {
	s.NamespaceId = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyData) SetTag(v string) *UpdateSwimmingLanePriorityResponseBodyData {
	s.Tag = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyData) SetSwimmingLaneAppRelationShipList(v []*UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList) *UpdateSwimmingLanePriorityResponseBodyData {
	s.SwimmingLaneAppRelationShipList = v
	return s
}

type UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty" require:"true"`
	LaneId  *int64  `json:"LaneId,omitempty" xml:"LaneId,omitempty" require:"true"`
	Rules   *string `json:"Rules,omitempty" xml:"Rules,omitempty" require:"true"`
}

func (s UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList) SetAppId(v string) *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppId = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList) SetAppName(v string) *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList {
	s.AppName = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList) SetLaneId(v int64) *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList {
	s.LaneId = &v
	return s
}

func (s *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList) SetRules(v string) *UpdateSwimmingLanePriorityResponseBodyDataSwimmingLaneAppRelationShipList {
	s.Rules = &v
	return s
}

type UpdateSwimmingLanePriorityResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSwimmingLanePriorityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSwimmingLanePriorityResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSwimmingLanePriorityResponse) GoString() string {
	return s.String()
}

func (s *UpdateSwimmingLanePriorityResponse) SetHeaders(v map[string]*string) *UpdateSwimmingLanePriorityResponse {
	s.Headers = v
	return s
}

func (s *UpdateSwimmingLanePriorityResponse) SetBody(v *UpdateSwimmingLanePriorityResponseBody) *UpdateSwimmingLanePriorityResponse {
	s.Body = v
	return s
}

type UppateEnvHsfTrafficControlBody struct {
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Condition       *string `json:"Condition,omitempty" xml:"Condition,omitempty"`
	Group           *string `json:"Group,omitempty" xml:"Group,omitempty"`
	LabelAdviceName *string `json:"LabelAdviceName,omitempty" xml:"LabelAdviceName,omitempty"`
	MethodName      *string `json:"MethodName,omitempty" xml:"MethodName,omitempty"`
	ParamTypes      *string `json:"ParamTypes,omitempty" xml:"ParamTypes,omitempty"`
	PointcutName    *string `json:"PointcutName,omitempty" xml:"PointcutName,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	TriggerPolicy   *string `json:"TriggerPolicy,omitempty" xml:"TriggerPolicy,omitempty"`
}

func (s UppateEnvHsfTrafficControlBody) String() string {
	return tea.Prettify(s)
}

func (s UppateEnvHsfTrafficControlBody) GoString() string {
	return s.String()
}

func (s *UppateEnvHsfTrafficControlBody) SetAppId(v string) *UppateEnvHsfTrafficControlBody {
	s.AppId = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetCondition(v string) *UppateEnvHsfTrafficControlBody {
	s.Condition = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetGroup(v string) *UppateEnvHsfTrafficControlBody {
	s.Group = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetLabelAdviceName(v string) *UppateEnvHsfTrafficControlBody {
	s.LabelAdviceName = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetMethodName(v string) *UppateEnvHsfTrafficControlBody {
	s.MethodName = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetParamTypes(v string) *UppateEnvHsfTrafficControlBody {
	s.ParamTypes = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetPointcutName(v string) *UppateEnvHsfTrafficControlBody {
	s.PointcutName = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetServiceName(v string) *UppateEnvHsfTrafficControlBody {
	s.ServiceName = &v
	return s
}

func (s *UppateEnvHsfTrafficControlBody) SetTriggerPolicy(v string) *UppateEnvHsfTrafficControlBody {
	s.TriggerPolicy = &v
	return s
}

type UppateEnvHsfTrafficControlRequest struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *UppateEnvHsfTrafficControlBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UppateEnvHsfTrafficControlRequest) String() string {
	return tea.Prettify(s)
}

func (s UppateEnvHsfTrafficControlRequest) GoString() string {
	return s.String()
}

func (s *UppateEnvHsfTrafficControlRequest) SetHeaders(v map[string]*string) *UppateEnvHsfTrafficControlRequest {
	s.Headers = v
	return s
}

func (s *UppateEnvHsfTrafficControlRequest) SetBody(v *UppateEnvHsfTrafficControlBody) *UppateEnvHsfTrafficControlRequest {
	s.Body = v
	return s
}

type UppateEnvHsfTrafficControlResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s UppateEnvHsfTrafficControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UppateEnvHsfTrafficControlResponseBody) GoString() string {
	return s.String()
}

func (s *UppateEnvHsfTrafficControlResponseBody) SetCode(v int) *UppateEnvHsfTrafficControlResponseBody {
	s.Code = &v
	return s
}

func (s *UppateEnvHsfTrafficControlResponseBody) SetMessage(v string) *UppateEnvHsfTrafficControlResponseBody {
	s.Message = &v
	return s
}

func (s *UppateEnvHsfTrafficControlResponseBody) SetRequestId(v string) *UppateEnvHsfTrafficControlResponseBody {
	s.RequestId = &v
	return s
}

type UppateEnvHsfTrafficControlResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UppateEnvHsfTrafficControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UppateEnvHsfTrafficControlResponse) String() string {
	return tea.Prettify(s)
}

func (s UppateEnvHsfTrafficControlResponse) GoString() string {
	return s.String()
}

func (s *UppateEnvHsfTrafficControlResponse) SetHeaders(v map[string]*string) *UppateEnvHsfTrafficControlResponse {
	s.Headers = v
	return s
}

func (s *UppateEnvHsfTrafficControlResponse) SetBody(v *UppateEnvHsfTrafficControlResponseBody) *UppateEnvHsfTrafficControlResponse {
	s.Body = v
	return s
}

type ValidateK8sResourceBody struct {
	AppId     *string `json:"AppId,omitempty" xml:"AppId,omitempty" require:"true"`
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty" require:"true"`
	Format    *string `json:"Format,omitempty" xml:"Format,omitempty" require:"true"`
	Kind      *string `json:"Kind,omitempty" xml:"Kind,omitempty" require:"true"`
	Namespace *string `json:"Namespace,omitempty" xml:"Namespace,omitempty" require:"true"`
}

func (s ValidateK8sResourceBody) String() string {
	return tea.Prettify(s)
}

func (s ValidateK8sResourceBody) GoString() string {
	return s.String()
}

func (s *ValidateK8sResourceBody) SetAppId(v string) *ValidateK8sResourceBody {
	s.AppId = &v
	return s
}

func (s *ValidateK8sResourceBody) SetContent(v string) *ValidateK8sResourceBody {
	s.Content = &v
	return s
}

func (s *ValidateK8sResourceBody) SetFormat(v string) *ValidateK8sResourceBody {
	s.Format = &v
	return s
}

func (s *ValidateK8sResourceBody) SetKind(v string) *ValidateK8sResourceBody {
	s.Kind = &v
	return s
}

func (s *ValidateK8sResourceBody) SetNamespace(v string) *ValidateK8sResourceBody {
	s.Namespace = &v
	return s
}

type ValidateK8sResourceRequest struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	Body    *ValidateK8sResourceBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ValidateK8sResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ValidateK8sResourceRequest) GoString() string {
	return s.String()
}

func (s *ValidateK8sResourceRequest) SetHeaders(v map[string]*string) *ValidateK8sResourceRequest {
	s.Headers = v
	return s
}

func (s *ValidateK8sResourceRequest) SetBody(v *ValidateK8sResourceBody) *ValidateK8sResourceRequest {
	s.Body = v
	return s
}

type ValidateK8sResourceResponseBody struct {
	Code      *int    `json:"Code,omitempty" xml:"Code,omitempty" require:"true"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty" require:"true"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty" require:"true"`
}

func (s ValidateK8sResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ValidateK8sResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ValidateK8sResourceResponseBody) SetCode(v int) *ValidateK8sResourceResponseBody {
	s.Code = &v
	return s
}

func (s *ValidateK8sResourceResponseBody) SetMessage(v string) *ValidateK8sResourceResponseBody {
	s.Message = &v
	return s
}

func (s *ValidateK8sResourceResponseBody) SetRequestId(v string) *ValidateK8sResourceResponseBody {
	s.RequestId = &v
	return s
}

type ValidateK8sResourceResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ValidateK8sResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ValidateK8sResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ValidateK8sResourceResponse) GoString() string {
	return s.String()
}

func (s *ValidateK8sResourceResponse) SetHeaders(v map[string]*string) *ValidateK8sResourceResponse {
	s.Headers = v
	return s
}

func (s *ValidateK8sResourceResponse) SetBody(v *ValidateK8sResourceResponseBody) *ValidateK8sResourceResponse {
	s.Body = v
	return s
}

type Client struct {
	roa.Client
}

func NewClient(config *roa.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *roa.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-2-pop":          tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"ap-south-1":                  tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-3":              tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"ap-southeast-5":              tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("edas.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("edas.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("edas.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("edas.aliyuncs.com"),
		"cn-chengdu":                  tea.String("edas.aliyuncs.com"),
		"cn-edge-1":                   tea.String("edas.aliyuncs.com"),
		"cn-fujian":                   tea.String("edas.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("edas.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("edas.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("edas.aliyuncs.com"),
		"cn-huhehaote":                tea.String("edas.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("edas.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("edas.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("edas.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("edas.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("edas.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("edas.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("edas.aliyuncs.com"),
		"cn-wuhan":                    tea.String("edas.aliyuncs.com"),
		"cn-yushanfang":               tea.String("edas.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("edas.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("edas.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("edas.aliyuncs.com"),
		"eu-west-1":                   tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"me-east-1":                   tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("edas.ap-northeast-1.aliyuncs.com"),
		"us-west-1":                   tea.String("edas.ap-northeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.EndpointHost, _err = client.GetEndpoint(tea.String("edas"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.EndpointHost)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) AbortAndRollbackChangeOrderWithOptions(request *AbortAndRollbackChangeOrderRequest, runtime *util.RuntimeOptions) (_result *AbortAndRollbackChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AbortAndRollbackChangeOrderResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AbortAndRollbackChangeOrder"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/changeorder/change_order_abort_and_rollback"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AbortAndRollbackChangeOrder(request *AbortAndRollbackChangeOrderRequest) (_result *AbortAndRollbackChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AbortAndRollbackChangeOrderResponse{}
	_body, _err := client.AbortAndRollbackChangeOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AbortChangeOrderWithOptions(request *AbortChangeOrderRequest, runtime *util.RuntimeOptions) (_result *AbortChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AbortChangeOrderResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AbortChangeOrder"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/changeorder/change_order_abort"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AbortChangeOrder(request *AbortChangeOrderRequest) (_result *AbortChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AbortChangeOrderResponse{}
	_body, _err := client.AbortChangeOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddLogPathWithOptions(request *AddLogPathRequest, runtime *util.RuntimeOptions) (_result *AddLogPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddLogPathResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AddLogPath"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/log/popListLogDirs"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddLogPath(request *AddLogPathRequest) (_result *AddLogPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddLogPathResponse{}
	_body, _err := client.AddLogPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMockRuleWithOptions(request *AddMockRuleRequest, runtime *util.RuntimeOptions) (_result *AddMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddMockRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AddMockRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/addMockRule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMockRule(request *AddMockRuleRequest) (_result *AddMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMockRuleResponse{}
	_body, _err := client.AddMockRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddServiceTimeConfigWithOptions(request *AddServiceTimeConfigRequest, runtime *util.RuntimeOptions) (_result *AddServiceTimeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AddServiceTimeConfigResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AddServiceTimeConfig"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/timeout/add"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddServiceTimeConfig(request *AddServiceTimeConfigRequest) (_result *AddServiceTimeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddServiceTimeConfigResponse{}
	_body, _err := client.AddServiceTimeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeApplicationWithOptions(request *AuthorizeApplicationRequest, runtime *util.RuntimeOptions) (_result *AuthorizeApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthorizeApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AuthorizeApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/authorize_app"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeApplication(request *AuthorizeApplicationRequest) (_result *AuthorizeApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeApplicationResponse{}
	_body, _err := client.AuthorizeApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeResourceGroupWithOptions(request *AuthorizeResourceGroupRequest, runtime *util.RuntimeOptions) (_result *AuthorizeResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthorizeResourceGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AuthorizeResourceGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/authorize_res_group"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeResourceGroup(request *AuthorizeResourceGroupRequest) (_result *AuthorizeResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeResourceGroupResponse{}
	_body, _err := client.AuthorizeResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeRoleWithOptions(request *AuthorizeRoleRequest, runtime *util.RuntimeOptions) (_result *AuthorizeRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &AuthorizeRoleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("AuthorizeRole"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/authorize_role"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeRole(request *AuthorizeRoleRequest) (_result *AuthorizeRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeRoleResponse{}
	_body, _err := client.AuthorizeRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindEcsSlbWithOptions(request *BindEcsSlbRequest, runtime *util.RuntimeOptions) (_result *BindEcsSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindEcsSlbResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("BindEcsSlb"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/slb/bind_slb"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindEcsSlb(request *BindEcsSlbRequest) (_result *BindEcsSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindEcsSlbResponse{}
	_body, _err := client.BindEcsSlbWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindK8sSlbWithOptions(request *BindK8sSlbRequest, runtime *util.RuntimeOptions) (_result *BindK8sSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindK8sSlbResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("BindK8sSlb"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_slb_binding"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindK8sSlb(request *BindK8sSlbRequest) (_result *BindK8sSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindK8sSlbResponse{}
	_body, _err := client.BindK8sSlbWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindSlbWithOptions(request *BindSlbRequest, runtime *util.RuntimeOptions) (_result *BindSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &BindSlbResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("BindSlb"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/app/bind_slb_json"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindSlb(request *BindSlbRequest) (_result *BindSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindSlbResponse{}
	_body, _err := client.BindSlbWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ChangeDeployGroupWithOptions(request *ChangeDeployGroupRequest, runtime *util.RuntimeOptions) (_result *ChangeDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ChangeDeployGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ChangeDeployGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_change_group"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ChangeDeployGroup(request *ChangeDeployGroupRequest) (_result *ChangeDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ChangeDeployGroupResponse{}
	_body, _err := client.ChangeDeployGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ContinuePipelineWithOptions(request *ContinuePipelineRequest, runtime *util.RuntimeOptions) (_result *ContinuePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ContinuePipelineResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ContinuePipeline"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/changeorder/pipeline_batch_confirm"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ContinuePipeline(request *ContinuePipelineRequest) (_result *ContinuePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ContinuePipelineResponse{}
	_body, _err := client.ContinuePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ConvertK8sResourceWithOptions(request *ConvertK8sResourceRequest, runtime *util.RuntimeOptions) (_result *ConvertK8sResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ConvertK8sResourceResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ConvertK8sResource"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/oam/k8s_resource_convert"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ConvertK8sResource(request *ConvertK8sResourceRequest) (_result *ConvertK8sResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConvertK8sResourceResponse{}
	_body, _err := client.ConvertK8sResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateApplicationScalingRuleWithOptions(request *CreateApplicationScalingRuleRequest, runtime *util.RuntimeOptions) (_result *CreateApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApplicationScalingRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateApplicationScalingRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v1/eam/scale/application_scaling_rule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateApplicationScalingRule(request *CreateApplicationScalingRuleRequest) (_result *CreateApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApplicationScalingRuleResponse{}
	_body, _err := client.CreateApplicationScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateApplicationTemplateWithOptions(request *CreateApplicationTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateApplicationTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateApplicationTemplateResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateApplicationTemplate"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/cnedas/app_template"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateApplicationTemplate(request *CreateApplicationTemplateRequest) (_result *CreateApplicationTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateApplicationTemplateResponse{}
	_body, _err := client.CreateApplicationTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateConfigTemplateWithOptions(request *CreateConfigTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateConfigTemplateResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateConfigTemplate"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/config_template"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateConfigTemplate(request *CreateConfigTemplateRequest) (_result *CreateConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConfigTemplateResponse{}
	_body, _err := client.CreateConfigTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEnvAppGroupWithOptions(request *CreateEnvAppGroupRequest, runtime *util.RuntimeOptions) (_result *CreateEnvAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEnvAppGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateEnvAppGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/gray/env_app_groups"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEnvAppGroup(request *CreateEnvAppGroupRequest) (_result *CreateEnvAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnvAppGroupResponse{}
	_body, _err := client.CreateEnvAppGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEnvHsfTrafficControlWithOptions(request *CreateEnvHsfTrafficControlRequest, runtime *util.RuntimeOptions) (_result *CreateEnvHsfTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEnvHsfTrafficControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateEnvHsfTrafficControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/gray/env_hsf_traffic_control"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEnvHsfTrafficControl(request *CreateEnvHsfTrafficControlRequest) (_result *CreateEnvHsfTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnvHsfTrafficControlResponse{}
	_body, _err := client.CreateEnvHsfTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEnvHttpTrafficControlWithOptions(request *CreateEnvHttpTrafficControlRequest, runtime *util.RuntimeOptions) (_result *CreateEnvHttpTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateEnvHttpTrafficControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateEnvHttpTrafficControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/gray/env_http_traffic_control"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEnvHttpTrafficControl(request *CreateEnvHttpTrafficControlRequest) (_result *CreateEnvHttpTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEnvHttpTrafficControlResponse{}
	_body, _err := client.CreateEnvHttpTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateGrayEnvironmentWithOptions(request *CreateGrayEnvironmentRequest, runtime *util.RuntimeOptions) (_result *CreateGrayEnvironmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateGrayEnvironmentResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateGrayEnvironment"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/gray/env"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateGrayEnvironment(request *CreateGrayEnvironmentRequest) (_result *CreateGrayEnvironmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateGrayEnvironmentResponse{}
	_body, _err := client.CreateGrayEnvironmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateIDCImportCommandWithOptions(request *CreateIDCImportCommandRequest, runtime *util.RuntimeOptions) (_result *CreateIDCImportCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateIDCImportCommandResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateIDCImportCommand"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/create_idc_import_command"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateIDCImportCommand(request *CreateIDCImportCommandRequest) (_result *CreateIDCImportCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateIDCImportCommandResponse{}
	_body, _err := client.CreateIDCImportCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sConfigMapWithOptions(request *CreateK8sConfigMapRequest, runtime *util.RuntimeOptions) (_result *CreateK8sConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateK8sConfigMapResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateK8sConfigMap"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_config_map"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sConfigMap(request *CreateK8sConfigMapRequest) (_result *CreateK8sConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateK8sConfigMapResponse{}
	_body, _err := client.CreateK8sConfigMapWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sIngressRuleWithOptions(tmp *CreateK8sIngressRuleRequest, runtime *util.RuntimeOptions) (_result *CreateK8sIngressRuleResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &CreateK8sIngressRuleShrinkRequest{}
	roautil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmp.Query))) {
		query := &CreateK8sIngressRuleShrinkQuery{}
		roautil.Convert(tmp.Query, query)
		if !tea.BoolValue(util.IsUnset(tmp.Query.IngressConf)) {
			query.IngressConfShrink = util.ToJSONString(tmp.Query.IngressConf)
		}

		request.Query = query
	}

	_result = &CreateK8sIngressRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateK8sIngressRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_ingress"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sIngressRule(request *CreateK8sIngressRuleRequest) (_result *CreateK8sIngressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateK8sIngressRuleResponse{}
	_body, _err := client.CreateK8sIngressRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sSecretWithOptions(request *CreateK8sSecretRequest, runtime *util.RuntimeOptions) (_result *CreateK8sSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &CreateK8sSecretResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateK8sSecret"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_secret"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sSecret(request *CreateK8sSecretRequest) (_result *CreateK8sSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateK8sSecretResponse{}
	_body, _err := client.CreateK8sSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateK8sServiceWithOptions(tmp *CreateK8sServiceRequest, runtime *util.RuntimeOptions) (_result *CreateK8sServiceResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &CreateK8sServiceShrinkRequest{}
	roautil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmp.Query))) {
		query := &CreateK8sServiceShrinkQuery{}
		roautil.Convert(tmp.Query, query)
		if !tea.BoolValue(util.IsUnset(tmp.Query.ServicePorts)) {
			query.ServicePortsShrink = util.ToJSONString(tmp.Query.ServicePorts)
		}

		request.Query = query
	}

	_result = &CreateK8sServiceResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("CreateK8sService"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_service"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateK8sService(request *CreateK8sServiceRequest) (_result *CreateK8sServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateK8sServiceResponse{}
	_body, _err := client.CreateK8sServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DelegateAdminRoleWithOptions(request *DelegateAdminRoleRequest, runtime *util.RuntimeOptions) (_result *DelegateAdminRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DelegateAdminRoleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DelegateAdminRole"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/account/delegate_admin_role"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DelegateAdminRole(request *DelegateAdminRoleRequest) (_result *DelegateAdminRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DelegateAdminRoleResponse{}
	_body, _err := client.DelegateAdminRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApplicationWithOptions(request *DeleteApplicationRequest, runtime *util.RuntimeOptions) (_result *DeleteApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_delete_app"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApplication(request *DeleteApplicationRequest) (_result *DeleteApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApplicationResponse{}
	_body, _err := client.DeleteApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteApplicationScalingRuleWithOptions(request *DeleteApplicationScalingRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteApplicationScalingRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteApplicationScalingRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v1/eam/scale/application_scaling_rule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteApplicationScalingRule(request *DeleteApplicationScalingRuleRequest) (_result *DeleteApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteApplicationScalingRuleResponse{}
	_body, _err := client.DeleteApplicationScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteClusterWithOptions(request *DeleteClusterRequest, runtime *util.RuntimeOptions) (_result *DeleteClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteClusterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteCluster"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/resource/cluster"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCluster(request *DeleteClusterRequest) (_result *DeleteClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteClusterResponse{}
	_body, _err := client.DeleteClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteClusterMemberWithOptions(request *DeleteClusterMemberRequest, runtime *util.RuntimeOptions) (_result *DeleteClusterMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteClusterMemberResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteClusterMember"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/resource/cluster_member"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteClusterMember(request *DeleteClusterMemberRequest) (_result *DeleteClusterMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteClusterMemberResponse{}
	_body, _err := client.DeleteClusterMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConfigCenterWithOptions(request *DeleteConfigCenterRequest, runtime *util.RuntimeOptions) (_result *DeleteConfigCenterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteConfigCenterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteConfigCenter"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/configCenter"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConfigCenter(request *DeleteConfigCenterRequest) (_result *DeleteConfigCenterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConfigCenterResponse{}
	_body, _err := client.DeleteConfigCenterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteConfigTemplateWithOptions(request *DeleteConfigTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteConfigTemplateResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteConfigTemplate"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/config_template"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteConfigTemplate(request *DeleteConfigTemplateRequest) (_result *DeleteConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteConfigTemplateResponse{}
	_body, _err := client.DeleteConfigTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDegradeControlWithOptions(request *DeleteDegradeControlRequest, runtime *util.RuntimeOptions) (_result *DeleteDegradeControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDegradeControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteDegradeControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/degradeControl"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDegradeControl(request *DeleteDegradeControlRequest) (_result *DeleteDegradeControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDegradeControlResponse{}
	_body, _err := client.DeleteDegradeControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteDeployGroupWithOptions(request *DeleteDeployGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteDeployGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteDeployGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/deploy_group"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteDeployGroup(request *DeleteDeployGroupRequest) (_result *DeleteDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDeployGroupResponse{}
	_body, _err := client.DeleteDeployGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEcuWithOptions(request *DeleteEcuRequest, runtime *util.RuntimeOptions) (_result *DeleteEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteEcuResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteEcu"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/delete_ecu"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEcu(request *DeleteEcuRequest) (_result *DeleteEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEcuResponse{}
	_body, _err := client.DeleteEcuWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEnvAppGroupWithOptions(request *DeleteEnvAppGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteEnvAppGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteEnvAppGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/gray/EnvAppGroups"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEnvAppGroup(request *DeleteEnvAppGroupRequest) (_result *DeleteEnvAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvAppGroupResponse{}
	_body, _err := client.DeleteEnvAppGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEnvHsfTrafficControlWithOptions(request *DeleteEnvHsfTrafficControlRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvHsfTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteEnvHsfTrafficControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteEnvHsfTrafficControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/gray/env_hsf_traffic_control"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEnvHsfTrafficControl(request *DeleteEnvHsfTrafficControlRequest) (_result *DeleteEnvHsfTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvHsfTrafficControlResponse{}
	_body, _err := client.DeleteEnvHsfTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEnvHttpTrafficControlWithOptions(request *DeleteEnvHttpTrafficControlRequest, runtime *util.RuntimeOptions) (_result *DeleteEnvHttpTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteEnvHttpTrafficControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteEnvHttpTrafficControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/gray/env_http_traffic_control"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEnvHttpTrafficControl(request *DeleteEnvHttpTrafficControlRequest) (_result *DeleteEnvHttpTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEnvHttpTrafficControlResponse{}
	_body, _err := client.DeleteEnvHttpTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowControlWithOptions(request *DeleteFlowControlRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteFlowControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteFlowControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/flowControl"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowControl(request *DeleteFlowControlRequest) (_result *DeleteFlowControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowControlResponse{}
	_body, _err := client.DeleteFlowControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteGrayEnvironmentWithOptions(request *DeleteGrayEnvironmentRequest, runtime *util.RuntimeOptions) (_result *DeleteGrayEnvironmentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteGrayEnvironmentResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteGrayEnvironment"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/gray/env"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteGrayEnvironment(request *DeleteGrayEnvironmentRequest) (_result *DeleteGrayEnvironmentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGrayEnvironmentResponse{}
	_body, _err := client.DeleteGrayEnvironmentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sApplicationWithOptions(request *DeleteK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *DeleteK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_apps"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sApplication(request *DeleteK8sApplicationRequest) (_result *DeleteK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteK8sApplicationResponse{}
	_body, _err := client.DeleteK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sConfigMapWithOptions(request *DeleteK8sConfigMapRequest, runtime *util.RuntimeOptions) (_result *DeleteK8sConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteK8sConfigMapResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteK8sConfigMap"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_config_map"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sConfigMap(request *DeleteK8sConfigMapRequest) (_result *DeleteK8sConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteK8sConfigMapResponse{}
	_body, _err := client.DeleteK8sConfigMapWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sIngressRuleWithOptions(request *DeleteK8sIngressRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteK8sIngressRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteK8sIngressRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteK8sIngressRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_ingress"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sIngressRule(request *DeleteK8sIngressRuleRequest) (_result *DeleteK8sIngressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteK8sIngressRuleResponse{}
	_body, _err := client.DeleteK8sIngressRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sSecretWithOptions(request *DeleteK8sSecretRequest, runtime *util.RuntimeOptions) (_result *DeleteK8sSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteK8sSecretResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteK8sSecret"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_secret"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sSecret(request *DeleteK8sSecretRequest) (_result *DeleteK8sSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteK8sSecretResponse{}
	_body, _err := client.DeleteK8sSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteK8sServiceWithOptions(request *DeleteK8sServiceRequest, runtime *util.RuntimeOptions) (_result *DeleteK8sServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteK8sServiceResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteK8sService"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_service"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteK8sService(request *DeleteK8sServiceRequest) (_result *DeleteK8sServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteK8sServiceResponse{}
	_body, _err := client.DeleteK8sServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLogPathWithOptions(request *DeleteLogPathRequest, runtime *util.RuntimeOptions) (_result *DeleteLogPathResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteLogPathResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteLogPath"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/log/popListLogDirs"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLogPath(request *DeleteLogPathRequest) (_result *DeleteLogPathResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLogPathResponse{}
	_body, _err := client.DeleteLogPathWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteRoleWithOptions(request *DeleteRoleRequest, runtime *util.RuntimeOptions) (_result *DeleteRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteRoleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteRole"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/delete_role"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteRole(request *DeleteRoleRequest) (_result *DeleteRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteRoleResponse{}
	_body, _err := client.DeleteRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteServiceGroupWithOptions(request *DeleteServiceGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteServiceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteServiceGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteServiceGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/service/serviceGroups"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteServiceGroup(request *DeleteServiceGroupRequest) (_result *DeleteServiceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteServiceGroupResponse{}
	_body, _err := client.DeleteServiceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteServiceTimeConfigWithOptions(request *DeleteServiceTimeConfigRequest, runtime *util.RuntimeOptions) (_result *DeleteServiceTimeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteServiceTimeConfigResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteServiceTimeConfig"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/timeout/remove"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteServiceTimeConfig(request *DeleteServiceTimeConfigRequest) (_result *DeleteServiceTimeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteServiceTimeConfigResponse{}
	_body, _err := client.DeleteServiceTimeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSwimmingLaneWithOptions(request *DeleteSwimmingLaneRequest, runtime *util.RuntimeOptions) (_result *DeleteSwimmingLaneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSwimmingLaneResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteSwimmingLane"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lanes"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSwimmingLane(request *DeleteSwimmingLaneRequest) (_result *DeleteSwimmingLaneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSwimmingLaneResponse{}
	_body, _err := client.DeleteSwimmingLaneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSwimmingLaneGroupWithOptions(request *DeleteSwimmingLaneGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteSwimmingLaneGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteSwimmingLaneGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteSwimmingLaneGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lane_groups"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSwimmingLaneGroup(request *DeleteSwimmingLaneGroupRequest) (_result *DeleteSwimmingLaneGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSwimmingLaneGroupResponse{}
	_body, _err := client.DeleteSwimmingLaneGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUserDefineRegionWithOptions(request *DeleteUserDefineRegionRequest, runtime *util.RuntimeOptions) (_result *DeleteUserDefineRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeleteUserDefineRegionResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeleteUserDefineRegion"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/user_region_def"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUserDefineRegion(request *DeleteUserDefineRegionRequest) (_result *DeleteUserDefineRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserDefineRegionResponse{}
	_body, _err := client.DeleteUserDefineRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeployApplicationWithOptions(request *DeployApplicationRequest, runtime *util.RuntimeOptions) (_result *DeployApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeployApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_deploy"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeployApplication(request *DeployApplicationRequest) (_result *DeployApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployApplicationResponse{}
	_body, _err := client.DeployApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeployK8sApplicationWithOptions(request *DeployK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *DeployK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DeployK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DeployK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_apps"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeployK8sApplication(request *DeployK8sApplicationRequest) (_result *DeployK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeployK8sApplicationResponse{}
	_body, _err := client.DeployK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeAppInstanceListWithOptions(request *DescribeAppInstanceListRequest, runtime *util.RuntimeOptions) (_result *DescribeAppInstanceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeAppInstanceListResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DescribeAppInstanceList"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/oam/app_instance_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeAppInstanceList(request *DescribeAppInstanceListRequest) (_result *DescribeAppInstanceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppInstanceListResponse{}
	_body, _err := client.DescribeAppInstanceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApplicationScalingRuleWithOptions(request *DescribeApplicationScalingRuleRequest, runtime *util.RuntimeOptions) (_result *DescribeApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeApplicationScalingRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DescribeApplicationScalingRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v1/eam/scale/application_scaling_rule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApplicationScalingRule(request *DescribeApplicationScalingRuleRequest) (_result *DescribeApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApplicationScalingRuleResponse{}
	_body, _err := client.DescribeApplicationScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeApplicationScalingRulesWithOptions(request *DescribeApplicationScalingRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeApplicationScalingRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeApplicationScalingRulesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DescribeApplicationScalingRules"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v1/eam/scale/application_scaling_rules"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeApplicationScalingRules(request *DescribeApplicationScalingRulesRequest) (_result *DescribeApplicationScalingRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeApplicationScalingRulesResponse{}
	_body, _err := client.DescribeApplicationScalingRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLocalitySettingWithOptions(request *DescribeLocalitySettingRequest, runtime *util.RuntimeOptions) (_result *DescribeLocalitySettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DescribeLocalitySettingResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DescribeLocalitySetting"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/sp/applications/locality/setting"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLocalitySetting(request *DescribeLocalitySettingRequest) (_result *DescribeLocalitySettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLocalitySettingResponse{}
	_body, _err := client.DescribeLocalitySettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableApplicationScalingRuleWithOptions(request *DisableApplicationScalingRuleRequest, runtime *util.RuntimeOptions) (_result *DisableApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableApplicationScalingRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DisableApplicationScalingRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v1/eam/scale/disable_application_scaling_rule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableApplicationScalingRule(request *DisableApplicationScalingRuleRequest) (_result *DisableApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableApplicationScalingRuleResponse{}
	_body, _err := client.DisableApplicationScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableDegradeControlWithOptions(request *DisableDegradeControlRequest, runtime *util.RuntimeOptions) (_result *DisableDegradeControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableDegradeControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DisableDegradeControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/degradecontrol/disable"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableDegradeControl(request *DisableDegradeControlRequest) (_result *DisableDegradeControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableDegradeControlResponse{}
	_body, _err := client.DisableDegradeControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableFlowControlWithOptions(request *DisableFlowControlRequest, runtime *util.RuntimeOptions) (_result *DisableFlowControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableFlowControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DisableFlowControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/flowcontrol/disable"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableFlowControl(request *DisableFlowControlRequest) (_result *DisableFlowControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableFlowControlResponse{}
	_body, _err := client.DisableFlowControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DisableMockRuleWithOptions(request *DisableMockRuleRequest, runtime *util.RuntimeOptions) (_result *DisableMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &DisableMockRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("DisableMockRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/disableMockRule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DisableMockRule(request *DisableMockRuleRequest) (_result *DisableMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableMockRuleResponse{}
	_body, _err := client.DisableMockRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableApplicationScalingRuleWithOptions(request *EnableApplicationScalingRuleRequest, runtime *util.RuntimeOptions) (_result *EnableApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableApplicationScalingRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("EnableApplicationScalingRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v1/eam/scale/enable_application_scaling_rule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableApplicationScalingRule(request *EnableApplicationScalingRuleRequest) (_result *EnableApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableApplicationScalingRuleResponse{}
	_body, _err := client.EnableApplicationScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableDegradeControlWithOptions(request *EnableDegradeControlRequest, runtime *util.RuntimeOptions) (_result *EnableDegradeControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableDegradeControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("EnableDegradeControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/degradecontrol/enable"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableDegradeControl(request *EnableDegradeControlRequest) (_result *EnableDegradeControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableDegradeControlResponse{}
	_body, _err := client.EnableDegradeControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableFlowControlWithOptions(request *EnableFlowControlRequest, runtime *util.RuntimeOptions) (_result *EnableFlowControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableFlowControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("EnableFlowControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/flowcontrol/enable"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableFlowControl(request *EnableFlowControlRequest) (_result *EnableFlowControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableFlowControlResponse{}
	_body, _err := client.EnableFlowControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) EnableMockRuleWithOptions(request *EnableMockRuleRequest, runtime *util.RuntimeOptions) (_result *EnableMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &EnableMockRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("EnableMockRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/enableMockRule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) EnableMockRule(request *EnableMockRuleRequest) (_result *EnableMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableMockRuleResponse{}
	_body, _err := client.EnableMockRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ExecuteStatusWithOptions(request *ExecuteStatusRequest, runtime *util.RuntimeOptions) (_result *ExecuteStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ExecuteStatusResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ExecuteStatus"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mse/status/execute"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ExecuteStatus(request *ExecuteStatusRequest) (_result *ExecuteStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExecuteStatusResponse{}
	_body, _err := client.ExecuteStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAccountMockRuleWithOptions(request *GetAccountMockRuleRequest, runtime *util.RuntimeOptions) (_result *GetAccountMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAccountMockRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetAccountMockRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/getAccountMockRule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAccountMockRule(request *GetAccountMockRuleRequest) (_result *GetAccountMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAccountMockRuleResponse{}
	_body, _err := client.GetAccountMockRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAppDeploymentWithOptions(request *GetAppDeploymentRequest, runtime *util.RuntimeOptions) (_result *GetAppDeploymentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetAppDeploymentResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetAppDeployment"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/oam/app_deployment"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAppDeployment(request *GetAppDeploymentRequest) (_result *GetAppDeploymentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAppDeploymentResponse{}
	_body, _err := client.GetAppDeploymentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetApplicationWithOptions(request *GetApplicationRequest, runtime *util.RuntimeOptions) (_result *GetApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/app_info"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetApplication(request *GetApplicationRequest) (_result *GetApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetApplicationResponse{}
	_body, _err := client.GetApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetChangeOrderInfoWithOptions(request *GetChangeOrderInfoRequest, runtime *util.RuntimeOptions) (_result *GetChangeOrderInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetChangeOrderInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetChangeOrderInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/change_order_info"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetChangeOrderInfo(request *GetChangeOrderInfoRequest) (_result *GetChangeOrderInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetChangeOrderInfoResponse{}
	_body, _err := client.GetChangeOrderInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetClusterWithOptions(request *GetClusterRequest, runtime *util.RuntimeOptions) (_result *GetClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetClusterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetCluster"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/cluster"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCluster(request *GetClusterRequest) (_result *GetClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetClusterResponse{}
	_body, _err := client.GetClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetContainerConfigurationWithOptions(request *GetContainerConfigurationRequest, runtime *util.RuntimeOptions) (_result *GetContainerConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetContainerConfigurationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetContainerConfiguration"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/app/container_config"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetContainerConfiguration(request *GetContainerConfigurationRequest) (_result *GetContainerConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetContainerConfigurationResponse{}
	_body, _err := client.GetContainerConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEnvTrafficControlWithOptions(request *GetEnvTrafficControlRequest, runtime *util.RuntimeOptions) (_result *GetEnvTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetEnvTrafficControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetEnvTrafficControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/gray/env_traffic_control_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEnvTrafficControl(request *GetEnvTrafficControlRequest) (_result *GetEnvTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEnvTrafficControlResponse{}
	_body, _err := client.GetEnvTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGrayAppGroupWithOptions(request *GetGrayAppGroupRequest, runtime *util.RuntimeOptions) (_result *GetGrayAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetGrayAppGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetGrayAppGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/gray/app_group_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGrayAppGroup(request *GetGrayAppGroupRequest) (_result *GetGrayAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGrayAppGroupResponse{}
	_body, _err := client.GetGrayAppGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGrayAppsWithOptions(request *GetGrayAppsRequest, runtime *util.RuntimeOptions) (_result *GetGrayAppsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetGrayAppsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetGrayApps"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/gray/app_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGrayApps(request *GetGrayAppsRequest) (_result *GetGrayAppsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGrayAppsResponse{}
	_body, _err := client.GetGrayAppsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetGrayEnvironmentsWithOptions(request *GetGrayEnvironmentsRequest, runtime *util.RuntimeOptions) (_result *GetGrayEnvironmentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetGrayEnvironmentsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetGrayEnvironments"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/gray/env_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetGrayEnvironments(request *GetGrayEnvironmentsRequest) (_result *GetGrayEnvironmentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetGrayEnvironmentsResponse{}
	_body, _err := client.GetGrayEnvironmentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetIstioTestMethodWithOptions(request *GetIstioTestMethodRequest, runtime *util.RuntimeOptions) (_result *GetIstioTestMethodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetIstioTestMethodResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetIstioTestMethod"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mse/test/istio/method"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetIstioTestMethod(request *GetIstioTestMethodRequest) (_result *GetIstioTestMethodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetIstioTestMethodResponse{}
	_body, _err := client.GetIstioTestMethodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJavaStartUpConfigWithOptions(request *GetJavaStartUpConfigRequest, runtime *util.RuntimeOptions) (_result *GetJavaStartUpConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetJavaStartUpConfigResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetJavaStartUpConfig"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/oam/java_start_up_config"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJavaStartUpConfig(request *GetJavaStartUpConfigRequest) (_result *GetJavaStartUpConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetJavaStartUpConfigResponse{}
	_body, _err := client.GetJavaStartUpConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJvmConfigurationWithOptions(request *GetJvmConfigurationRequest, runtime *util.RuntimeOptions) (_result *GetJvmConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetJvmConfigurationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetJvmConfiguration"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/app/app_jvm_config"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJvmConfiguration(request *GetJvmConfigurationRequest) (_result *GetJvmConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetJvmConfigurationResponse{}
	_body, _err := client.GetJvmConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetK8sApplicationWithOptions(request *GetK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *GetK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_application"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetK8sApplication(request *GetK8sApplicationRequest) (_result *GetK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetK8sApplicationResponse{}
	_body, _err := client.GetK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetK8sClusterWithOptions(request *GetK8sClusterRequest, runtime *util.RuntimeOptions) (_result *GetK8sClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetK8sClusterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetK8sCluster"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s_clusters"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetK8sCluster(request *GetK8sClusterRequest) (_result *GetK8sClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetK8sClusterResponse{}
	_body, _err := client.GetK8sClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetK8sServicesWithOptions(request *GetK8sServicesRequest, runtime *util.RuntimeOptions) (_result *GetK8sServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetK8sServicesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetK8sServices"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_service"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetK8sServices(request *GetK8sServicesRequest) (_result *GetK8sServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetK8sServicesResponse{}
	_body, _err := client.GetK8sServicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetK8sStorageInfoWithOptions(request *GetK8sStorageInfoRequest, runtime *util.RuntimeOptions) (_result *GetK8sStorageInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetK8sStorageInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetK8sStorageInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_storage"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetK8sStorageInfo(request *GetK8sStorageInfoRequest) (_result *GetK8sStorageInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetK8sStorageInfoResponse{}
	_body, _err := client.GetK8sStorageInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMockRuleByConsumerAppIdWithOptions(request *GetMockRuleByConsumerAppIdRequest, runtime *util.RuntimeOptions) (_result *GetMockRuleByConsumerAppIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMockRuleByConsumerAppIdResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetMockRuleByConsumerAppId"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/getMockRuleByConsumerAppId"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMockRuleByConsumerAppId(request *GetMockRuleByConsumerAppIdRequest) (_result *GetMockRuleByConsumerAppIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMockRuleByConsumerAppIdResponse{}
	_body, _err := client.GetMockRuleByConsumerAppIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMockRuleByIdWithOptions(request *GetMockRuleByIdRequest, runtime *util.RuntimeOptions) (_result *GetMockRuleByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMockRuleByIdResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetMockRuleById"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/getMockRuleById"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMockRuleById(request *GetMockRuleByIdRequest) (_result *GetMockRuleByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMockRuleByIdResponse{}
	_body, _err := client.GetMockRuleByIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMockRuleByProviderAppIdWithOptions(request *GetMockRuleByProviderAppIdRequest, runtime *util.RuntimeOptions) (_result *GetMockRuleByProviderAppIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetMockRuleByProviderAppIdResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetMockRuleByProviderAppId"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/getMockRuleByProviderAppId"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMockRuleByProviderAppId(request *GetMockRuleByProviderAppIdRequest) (_result *GetMockRuleByProviderAppIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMockRuleByProviderAppIdResponse{}
	_body, _err := client.GetMockRuleByProviderAppIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPackageStorageCredentialWithOptions(request *GetPackageStorageCredentialRequest, runtime *util.RuntimeOptions) (_result *GetPackageStorageCredentialResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetPackageStorageCredentialResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetPackageStorageCredential"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/package_storage_credential"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPackageStorageCredential(request *GetPackageStorageCredentialRequest) (_result *GetPackageStorageCredentialResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPackageStorageCredentialResponse{}
	_body, _err := client.GetPackageStorageCredentialWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetScalingRulesWithOptions(request *GetScalingRulesRequest, runtime *util.RuntimeOptions) (_result *GetScalingRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetScalingRulesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetScalingRules"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/app/scalingRules"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetScalingRules(request *GetScalingRulesRequest) (_result *GetScalingRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetScalingRulesResponse{}
	_body, _err := client.GetScalingRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSecureTokenWithOptions(request *GetSecureTokenRequest, runtime *util.RuntimeOptions) (_result *GetSecureTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSecureTokenResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetSecureToken"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/secure_token"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSecureToken(request *GetSecureTokenRequest) (_result *GetSecureTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSecureTokenResponse{}
	_body, _err := client.GetSecureTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceConsumersPageWithOptions(request *GetServiceConsumersPageRequest, runtime *util.RuntimeOptions) (_result *GetServiceConsumersPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceConsumersPageResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetServiceConsumersPage"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mseForOam/getServiceConsumersPage"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceConsumersPage(request *GetServiceConsumersPageRequest) (_result *GetServiceConsumersPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetServiceConsumersPageResponse{}
	_body, _err := client.GetServiceConsumersPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceDetailWithOptions(request *GetServiceDetailRequest, runtime *util.RuntimeOptions) (_result *GetServiceDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceDetailResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetServiceDetail"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mseForOam/getServiceDetail"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceDetail(request *GetServiceDetailRequest) (_result *GetServiceDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetServiceDetailResponse{}
	_body, _err := client.GetServiceDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceListWithOptions(request *GetServiceListRequest, runtime *util.RuntimeOptions) (_result *GetServiceListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceListResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetServiceList"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mseForOam/getServiceList"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceList(request *GetServiceListRequest) (_result *GetServiceListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetServiceListResponse{}
	_body, _err := client.GetServiceListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceListPageWithOptions(request *GetServiceListPageRequest, runtime *util.RuntimeOptions) (_result *GetServiceListPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceListPageResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetServiceListPage"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mseForOam/getServiceListPage"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceListPage(request *GetServiceListPageRequest) (_result *GetServiceListPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetServiceListPageResponse{}
	_body, _err := client.GetServiceListPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceMethodPageWithOptions(request *GetServiceMethodPageRequest, runtime *util.RuntimeOptions) (_result *GetServiceMethodPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceMethodPageResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetServiceMethodPage"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mseForOam/getServiceMethodPage"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceMethodPage(request *GetServiceMethodPageRequest) (_result *GetServiceMethodPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetServiceMethodPageResponse{}
	_body, _err := client.GetServiceMethodPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetServiceProvidersPageWithOptions(request *GetServiceProvidersPageRequest, runtime *util.RuntimeOptions) (_result *GetServiceProvidersPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetServiceProvidersPageResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetServiceProvidersPage"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mseForOam/getServiceProvidersPage"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetServiceProvidersPage(request *GetServiceProvidersPageRequest) (_result *GetServiceProvidersPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetServiceProvidersPageResponse{}
	_body, _err := client.GetServiceProvidersPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSpringCloudTestMethodWithOptions(request *GetSpringCloudTestMethodRequest, runtime *util.RuntimeOptions) (_result *GetSpringCloudTestMethodResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSpringCloudTestMethodResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetSpringCloudTestMethod"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mse/test/springcloud/method"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSpringCloudTestMethod(request *GetSpringCloudTestMethodRequest) (_result *GetSpringCloudTestMethodResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSpringCloudTestMethodResponse{}
	_body, _err := client.GetSpringCloudTestMethodWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSslCertificateListWithOptions(request *GetSslCertificateListRequest, runtime *util.RuntimeOptions) (_result *GetSslCertificateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSslCertificateListResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetSslCertificateList"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/ssl_certificate"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSslCertificateList(request *GetSslCertificateListRequest) (_result *GetSslCertificateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSslCertificateListResponse{}
	_body, _err := client.GetSslCertificateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSubAccountInfoWithOptions(request *GetSubAccountInfoRequest, runtime *util.RuntimeOptions) (_result *GetSubAccountInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSubAccountInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetSubAccountInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/sub_account_info"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSubAccountInfo(request *GetSubAccountInfoRequest) (_result *GetSubAccountInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSubAccountInfoResponse{}
	_body, _err := client.GetSubAccountInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSwimmingLaneWithOptions(request *GetSwimmingLaneRequest, runtime *util.RuntimeOptions) (_result *GetSwimmingLaneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetSwimmingLaneResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetSwimmingLane"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lane"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSwimmingLane(request *GetSwimmingLaneRequest) (_result *GetSwimmingLaneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSwimmingLaneResponse{}
	_body, _err := client.GetSwimmingLaneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetWebContainerConfigWithOptions(request *GetWebContainerConfigRequest, runtime *util.RuntimeOptions) (_result *GetWebContainerConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &GetWebContainerConfigResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("GetWebContainerConfig"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/oam/web_container_config"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetWebContainerConfig(request *GetWebContainerConfigRequest) (_result *GetWebContainerConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetWebContainerConfigResponse{}
	_body, _err := client.GetWebContainerConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ImportK8sClusterWithOptions(request *ImportK8sClusterRequest, runtime *util.RuntimeOptions) (_result *ImportK8sClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ImportK8sClusterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ImportK8sCluster"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/import_k8s_cluster"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ImportK8sCluster(request *ImportK8sClusterRequest) (_result *ImportK8sClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ImportK8sClusterResponse{}
	_body, _err := client.ImportK8sClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertApplicationWithOptions(request *InsertApplicationRequest, runtime *util.RuntimeOptions) (_result *InsertApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_create_app"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertApplication(request *InsertApplicationRequest) (_result *InsertApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertApplicationResponse{}
	_body, _err := client.InsertApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertClusterWithOptions(request *InsertClusterRequest, runtime *util.RuntimeOptions) (_result *InsertClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertClusterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertCluster"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/cluster"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertCluster(request *InsertClusterRequest) (_result *InsertClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertClusterResponse{}
	_body, _err := client.InsertClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertClusterMemberWithOptions(request *InsertClusterMemberRequest, runtime *util.RuntimeOptions) (_result *InsertClusterMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertClusterMemberResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertClusterMember"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/cluster_member"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertClusterMember(request *InsertClusterMemberRequest) (_result *InsertClusterMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertClusterMemberResponse{}
	_body, _err := client.InsertClusterMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertConfigCenterWithOptions(request *InsertConfigCenterRequest, runtime *util.RuntimeOptions) (_result *InsertConfigCenterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertConfigCenterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertConfigCenter"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/configCenter"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertConfigCenter(request *InsertConfigCenterRequest) (_result *InsertConfigCenterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertConfigCenterResponse{}
	_body, _err := client.InsertConfigCenterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertDegradeControlWithOptions(request *InsertDegradeControlRequest, runtime *util.RuntimeOptions) (_result *InsertDegradeControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertDegradeControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertDegradeControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/degradeControl"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertDegradeControl(request *InsertDegradeControlRequest) (_result *InsertDegradeControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertDegradeControlResponse{}
	_body, _err := client.InsertDegradeControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertDeployGroupWithOptions(request *InsertDeployGroupRequest, runtime *util.RuntimeOptions) (_result *InsertDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertDeployGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertDeployGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/deploy_group"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertDeployGroup(request *InsertDeployGroupRequest) (_result *InsertDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertDeployGroupResponse{}
	_body, _err := client.InsertDeployGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertFlowControlWithOptions(request *InsertFlowControlRequest, runtime *util.RuntimeOptions) (_result *InsertFlowControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertFlowControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertFlowControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/flowControl"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertFlowControl(request *InsertFlowControlRequest) (_result *InsertFlowControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertFlowControlResponse{}
	_body, _err := client.InsertFlowControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertK8sApplicationWithOptions(request *InsertK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *InsertK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/create_k8s_app"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertK8sApplication(request *InsertK8sApplicationRequest) (_result *InsertK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertK8sApplicationResponse{}
	_body, _err := client.InsertK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertOrUpdateRegionWithOptions(request *InsertOrUpdateRegionRequest, runtime *util.RuntimeOptions) (_result *InsertOrUpdateRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertOrUpdateRegionResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertOrUpdateRegion"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/user_region_def"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertOrUpdateRegion(request *InsertOrUpdateRegionRequest) (_result *InsertOrUpdateRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertOrUpdateRegionResponse{}
	_body, _err := client.InsertOrUpdateRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertRoleWithOptions(request *InsertRoleRequest, runtime *util.RuntimeOptions) (_result *InsertRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertRoleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertRole"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/create_role"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertRole(request *InsertRoleRequest) (_result *InsertRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertRoleResponse{}
	_body, _err := client.InsertRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertServiceGroupWithOptions(request *InsertServiceGroupRequest, runtime *util.RuntimeOptions) (_result *InsertServiceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertServiceGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertServiceGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/service/serviceGroups"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertServiceGroup(request *InsertServiceGroupRequest) (_result *InsertServiceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertServiceGroupResponse{}
	_body, _err := client.InsertServiceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertSwimmingLaneWithOptions(request *InsertSwimmingLaneRequest, runtime *util.RuntimeOptions) (_result *InsertSwimmingLaneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertSwimmingLaneResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertSwimmingLane"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lanes"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertSwimmingLane(request *InsertSwimmingLaneRequest) (_result *InsertSwimmingLaneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertSwimmingLaneResponse{}
	_body, _err := client.InsertSwimmingLaneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InsertSwimmingLaneGroupWithOptions(request *InsertSwimmingLaneGroupRequest, runtime *util.RuntimeOptions) (_result *InsertSwimmingLaneGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InsertSwimmingLaneGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InsertSwimmingLaneGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lane_groups"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InsertSwimmingLaneGroup(request *InsertSwimmingLaneGroupRequest) (_result *InsertSwimmingLaneGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertSwimmingLaneGroupResponse{}
	_body, _err := client.InsertSwimmingLaneGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallAgentWithOptions(request *InstallAgentRequest, runtime *util.RuntimeOptions) (_result *InstallAgentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &InstallAgentResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("InstallAgent"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/ecss/install_agent"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallAgent(request *InstallAgentRequest) (_result *InstallAgentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallAgentResponse{}
	_body, _err := client.InstallAgentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAliyunRegionWithOptions(request *ListAliyunRegionRequest, runtime *util.RuntimeOptions) (_result *ListAliyunRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAliyunRegionResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListAliyunRegion"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/region_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAliyunRegion(request *ListAliyunRegionRequest) (_result *ListAliyunRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAliyunRegionResponse{}
	_body, _err := client.ListAliyunRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListApplicationWithOptions(request *ListApplicationRequest, runtime *util.RuntimeOptions) (_result *ListApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/app_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListApplication(request *ListApplicationRequest) (_result *ListApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListApplicationResponse{}
	_body, _err := client.ListApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListApplicationEcuWithOptions(request *ListApplicationEcuRequest, runtime *util.RuntimeOptions) (_result *ListApplicationEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListApplicationEcuResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListApplicationEcu"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/ecu_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListApplicationEcu(request *ListApplicationEcuRequest) (_result *ListApplicationEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListApplicationEcuResponse{}
	_body, _err := client.ListApplicationEcuWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAuthorityWithOptions(request *ListAuthorityRequest, runtime *util.RuntimeOptions) (_result *ListAuthorityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListAuthorityResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListAuthority"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/authority_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAuthority(request *ListAuthorityRequest) (_result *ListAuthorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAuthorityResponse{}
	_body, _err := client.ListAuthorityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListBuildPackWithOptions(request *ListBuildPackRequest, runtime *util.RuntimeOptions) (_result *ListBuildPackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListBuildPackResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListBuildPack"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/build_pack_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListBuildPack(request *ListBuildPackRequest) (_result *ListBuildPackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBuildPackResponse{}
	_body, _err := client.ListBuildPackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCSBGatewayWithOptions(request *ListCSBGatewayRequest, runtime *util.RuntimeOptions) (_result *ListCSBGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListCSBGatewayResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListCSBGateway"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/csbgateway/gateway"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCSBGateway(request *ListCSBGatewayRequest) (_result *ListCSBGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCSBGatewayResponse{}
	_body, _err := client.ListCSBGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListChildrenStacksWithOptions(request *ListChildrenStacksRequest, runtime *util.RuntimeOptions) (_result *ListChildrenStacksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListChildrenStacksResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListChildrenStacks"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/s2i/list_children_stack"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListChildrenStacks(request *ListChildrenStacksRequest) (_result *ListChildrenStacksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListChildrenStacksResponse{}
	_body, _err := client.ListChildrenStacksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterWithOptions(request *ListClusterRequest, runtime *util.RuntimeOptions) (_result *ListClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListCluster"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/cluster_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCluster(request *ListClusterRequest) (_result *ListClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterResponse{}
	_body, _err := client.ListClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterMembersWithOptions(request *ListClusterMembersRequest, runtime *util.RuntimeOptions) (_result *ListClusterMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListClusterMembersResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListClusterMembers"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/cluster_member_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterMembers(request *ListClusterMembersRequest) (_result *ListClusterMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterMembersResponse{}
	_body, _err := client.ListClusterMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListComponentsWithOptions(request *ListComponentsRequest, runtime *util.RuntimeOptions) (_result *ListComponentsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListComponentsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListComponents"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/components"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListComponents(request *ListComponentsRequest) (_result *ListComponentsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListComponentsResponse{}
	_body, _err := client.ListComponentsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConfigCentersWithOptions(request *ListConfigCentersRequest, runtime *util.RuntimeOptions) (_result *ListConfigCentersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListConfigCentersResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListConfigCenters"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/configCenters"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConfigCenters(request *ListConfigCentersRequest) (_result *ListConfigCentersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConfigCentersResponse{}
	_body, _err := client.ListConfigCentersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConfigTemplatesWithOptions(request *ListConfigTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListConfigTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListConfigTemplatesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListConfigTemplates"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/config_template"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConfigTemplates(request *ListConfigTemplatesRequest) (_result *ListConfigTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConfigTemplatesResponse{}
	_body, _err := client.ListConfigTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConsumedServicesWithOptions(request *ListConsumedServicesRequest, runtime *util.RuntimeOptions) (_result *ListConsumedServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListConsumedServicesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListConsumedServices"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/service/listConsumedServices"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConsumedServices(request *ListConsumedServicesRequest) (_result *ListConsumedServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConsumedServicesResponse{}
	_body, _err := client.ListConsumedServicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListConvertableEcuWithOptions(request *ListConvertableEcuRequest, runtime *util.RuntimeOptions) (_result *ListConvertableEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListConvertableEcuResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListConvertableEcu"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/convertable_ecu_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListConvertableEcu(request *ListConvertableEcuRequest) (_result *ListConvertableEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListConvertableEcuResponse{}
	_body, _err := client.ListConvertableEcuWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDegradeControlsWithOptions(request *ListDegradeControlsRequest, runtime *util.RuntimeOptions) (_result *ListDegradeControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDegradeControlsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListDegradeControls"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/app/degradeControls"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDegradeControls(request *ListDegradeControlsRequest) (_result *ListDegradeControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDegradeControlsResponse{}
	_body, _err := client.ListDegradeControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDeployGroupWithOptions(request *ListDeployGroupRequest, runtime *util.RuntimeOptions) (_result *ListDeployGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListDeployGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListDeployGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/deploy_group_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDeployGroup(request *ListDeployGroupRequest) (_result *ListDeployGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDeployGroupResponse{}
	_body, _err := client.ListDeployGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEcsNotInClusterWithOptions(request *ListEcsNotInClusterRequest, runtime *util.RuntimeOptions) (_result *ListEcsNotInClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListEcsNotInClusterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListEcsNotInCluster"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/ecs_not_in_cluster"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEcsNotInCluster(request *ListEcsNotInClusterRequest) (_result *ListEcsNotInClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEcsNotInClusterResponse{}
	_body, _err := client.ListEcsNotInClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEcuByRegionWithOptions(request *ListEcuByRegionRequest, runtime *util.RuntimeOptions) (_result *ListEcuByRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListEcuByRegionResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListEcuByRegion"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/ecu_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEcuByRegion(request *ListEcuByRegionRequest) (_result *ListEcuByRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEcuByRegionResponse{}
	_body, _err := client.ListEcuByRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowControlsWithOptions(request *ListFlowControlsRequest, runtime *util.RuntimeOptions) (_result *ListFlowControlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListFlowControlsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListFlowControls"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/app/flowControls"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowControls(request *ListFlowControlsRequest) (_result *ListFlowControlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowControlsResponse{}
	_body, _err := client.ListFlowControlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListHistoryDeployVersionWithOptions(request *ListHistoryDeployVersionRequest, runtime *util.RuntimeOptions) (_result *ListHistoryDeployVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListHistoryDeployVersionResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListHistoryDeployVersion"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/app/deploy_history_version_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListHistoryDeployVersion(request *ListHistoryDeployVersionRequest) (_result *ListHistoryDeployVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListHistoryDeployVersionResponse{}
	_body, _err := client.ListHistoryDeployVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListK8sConfigMapsWithOptions(tmp *ListK8sConfigMapsRequest, runtime *util.RuntimeOptions) (_result *ListK8sConfigMapsResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &ListK8sConfigMapsShrinkRequest{}
	roautil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmp.Query))) {
		query := &ListK8sConfigMapsShrinkQuery{}
		roautil.Convert(tmp.Query, query)
		if !tea.BoolValue(util.IsUnset(tmp.Query.Condition)) {
			query.ConditionShrink = util.ToJSONString(tmp.Query.Condition)
		}

		request.Query = query
	}

	_result = &ListK8sConfigMapsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListK8sConfigMaps"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_config_map"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListK8sConfigMaps(request *ListK8sConfigMapsRequest) (_result *ListK8sConfigMapsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListK8sConfigMapsResponse{}
	_body, _err := client.ListK8sConfigMapsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListK8sIngressRulesWithOptions(request *ListK8sIngressRulesRequest, runtime *util.RuntimeOptions) (_result *ListK8sIngressRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListK8sIngressRulesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListK8sIngressRules"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_ingress"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListK8sIngressRules(request *ListK8sIngressRulesRequest) (_result *ListK8sIngressRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListK8sIngressRulesResponse{}
	_body, _err := client.ListK8sIngressRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListK8sPvcWithOptions(request *ListK8sPvcRequest, runtime *util.RuntimeOptions) (_result *ListK8sPvcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListK8sPvcResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListK8sPvc"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_pvc"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListK8sPvc(request *ListK8sPvcRequest) (_result *ListK8sPvcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListK8sPvcResponse{}
	_body, _err := client.ListK8sPvcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListK8sSecretsWithOptions(request *ListK8sSecretsRequest, runtime *util.RuntimeOptions) (_result *ListK8sSecretsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListK8sSecretsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListK8sSecrets"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_secret"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListK8sSecrets(request *ListK8sSecretsRequest) (_result *ListK8sSecretsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListK8sSecretsResponse{}
	_body, _err := client.ListK8sSecretsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMethodsWithOptions(request *ListMethodsRequest, runtime *util.RuntimeOptions) (_result *ListMethodsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListMethodsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListMethods"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/service/list_methods"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMethods(request *ListMethodsRequest) (_result *ListMethodsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMethodsResponse{}
	_body, _err := client.ListMethodsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListOperationLogsWithOptions(request *ListOperationLogsRequest, runtime *util.RuntimeOptions) (_result *ListOperationLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListOperationLogsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListOperationLogs"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/operationlog/log_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListOperationLogs(request *ListOperationLogsRequest) (_result *ListOperationLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOperationLogsResponse{}
	_body, _err := client.ListOperationLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPublishedServicesWithOptions(request *ListPublishedServicesRequest, runtime *util.RuntimeOptions) (_result *ListPublishedServicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListPublishedServicesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListPublishedServices"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/service/listPublishedServices"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPublishedServices(request *ListPublishedServicesRequest) (_result *ListPublishedServicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPublishedServicesResponse{}
	_body, _err := client.ListPublishedServicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRecentChangeOrderWithOptions(request *ListRecentChangeOrderRequest, runtime *util.RuntimeOptions) (_result *ListRecentChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRecentChangeOrderResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListRecentChangeOrder"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/change_order_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRecentChangeOrder(request *ListRecentChangeOrderRequest) (_result *ListRecentChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRecentChangeOrderResponse{}
	_body, _err := client.ListRecentChangeOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListResourceGroupWithOptions(request *ListResourceGroupRequest, runtime *util.RuntimeOptions) (_result *ListResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListResourceGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListResourceGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/reg_group_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListResourceGroup(request *ListResourceGroupRequest) (_result *ListResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListResourceGroupResponse{}
	_body, _err := client.ListResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRoleWithOptions(request *ListRoleRequest, runtime *util.RuntimeOptions) (_result *ListRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRoleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListRole"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/role_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRole(request *ListRoleRequest) (_result *ListRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRoleResponse{}
	_body, _err := client.ListRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRootStacksWithOptions(request *ListRootStacksRequest, runtime *util.RuntimeOptions) (_result *ListRootStacksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListRootStacksResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListRootStacks"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/s2i/list_root_stack"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRootStacks(request *ListRootStacksRequest) (_result *ListRootStacksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRootStacksResponse{}
	_body, _err := client.ListRootStacksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScaleOutEcuWithOptions(request *ListScaleOutEcuRequest, runtime *util.RuntimeOptions) (_result *ListScaleOutEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListScaleOutEcuResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListScaleOutEcu"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/scale_out_ecu_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScaleOutEcu(request *ListScaleOutEcuRequest) (_result *ListScaleOutEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScaleOutEcuResponse{}
	_body, _err := client.ListScaleOutEcuWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListServiceGroupsWithOptions(request *ListServiceGroupsRequest, runtime *util.RuntimeOptions) (_result *ListServiceGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListServiceGroupsResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListServiceGroups"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/service/serviceGroups"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListServiceGroups(request *ListServiceGroupsRequest) (_result *ListServiceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListServiceGroupsResponse{}
	_body, _err := client.ListServiceGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSlbWithOptions(request *ListSlbRequest, runtime *util.RuntimeOptions) (_result *ListSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSlbResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListSlb"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/slb_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSlb(request *ListSlbRequest) (_result *ListSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSlbResponse{}
	_body, _err := client.ListSlbWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListStatusWithOptions(request *ListStatusRequest, runtime *util.RuntimeOptions) (_result *ListStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListStatusResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListStatus"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mse/status/list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListStatus(request *ListStatusRequest) (_result *ListStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListStatusResponse{}
	_body, _err := client.ListStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSubAccountWithOptions(request *ListSubAccountRequest, runtime *util.RuntimeOptions) (_result *ListSubAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSubAccountResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListSubAccount"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/sub_account_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSubAccount(request *ListSubAccountRequest) (_result *ListSubAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSubAccountResponse{}
	_body, _err := client.ListSubAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSwimmingLaneWithOptions(request *ListSwimmingLaneRequest, runtime *util.RuntimeOptions) (_result *ListSwimmingLaneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSwimmingLaneResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListSwimmingLane"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lanes"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSwimmingLane(request *ListSwimmingLaneRequest) (_result *ListSwimmingLaneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSwimmingLaneResponse{}
	_body, _err := client.ListSwimmingLaneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSwimmingLaneGroupWithOptions(request *ListSwimmingLaneGroupRequest, runtime *util.RuntimeOptions) (_result *ListSwimmingLaneGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListSwimmingLaneGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListSwimmingLaneGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lane_groups"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSwimmingLaneGroup(request *ListSwimmingLaneGroupRequest) (_result *ListSwimmingLaneGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSwimmingLaneGroupResponse{}
	_body, _err := client.ListSwimmingLaneGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(tmp *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &ListTagResourcesShrinkRequest{}
	roautil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmp.Query))) {
		query := &ListTagResourcesShrinkQuery{}
		roautil.Convert(tmp.Query, query)
		if !tea.BoolValue(util.IsUnset(tmp.Query.ResourceIds)) {
			query.ResourceIdsShrink = util.ToJSONString(tmp.Query.ResourceIds)
		}

		if !tea.BoolValue(util.IsUnset(tmp.Query.Tags)) {
			query.TagsShrink = util.ToJSONString(tmp.Query.Tags)
		}

		request.Query = query
	}

	_result = &ListTagResourcesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListTagResources"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/tag/tags"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUserDefineRegionWithOptions(request *ListUserDefineRegionRequest, runtime *util.RuntimeOptions) (_result *ListUserDefineRegionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListUserDefineRegionResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListUserDefineRegion"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/user_region_defs"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUserDefineRegion(request *ListUserDefineRegionRequest) (_result *ListUserDefineRegionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUserDefineRegionResponse{}
	_body, _err := client.ListUserDefineRegionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListVpcWithOptions(request *ListVpcRequest, runtime *util.RuntimeOptions) (_result *ListVpcResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ListVpcResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ListVpc"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/vpc_list"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListVpc(request *ListVpcRequest) (_result *ListVpcResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVpcResponse{}
	_body, _err := client.ListVpcWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) MigrateEcuWithOptions(request *MigrateEcuRequest, runtime *util.RuntimeOptions) (_result *MigrateEcuResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &MigrateEcuResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("MigrateEcu"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/migrate_ecu"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) MigrateEcu(request *MigrateEcuRequest) (_result *MigrateEcuResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateEcuResponse{}
	_body, _err := client.MigrateEcuWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingRuleWithOptions(request *ModifyScalingRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ModifyScalingRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ModifyScalingRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/scaling_rules"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingRule(request *ModifyScalingRuleRequest) (_result *ModifyScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScalingRuleResponse{}
	_body, _err := client.ModifyScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryApplicationStatusWithOptions(request *QueryApplicationStatusRequest, runtime *util.RuntimeOptions) (_result *QueryApplicationStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryApplicationStatusResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryApplicationStatus"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/app/app_status"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryApplicationStatus(request *QueryApplicationStatusRequest) (_result *QueryApplicationStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryApplicationStatusResponse{}
	_body, _err := client.QueryApplicationStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryConfigCenterWithOptions(request *QueryConfigCenterRequest, runtime *util.RuntimeOptions) (_result *QueryConfigCenterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryConfigCenterResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryConfigCenter"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/configCenter"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryConfigCenter(request *QueryConfigCenterRequest) (_result *QueryConfigCenterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConfigCenterResponse{}
	_body, _err := client.QueryConfigCenterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEccInfoWithOptions(request *QueryEccInfoRequest, runtime *util.RuntimeOptions) (_result *QueryEccInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryEccInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryEccInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/ecc"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEccInfo(request *QueryEccInfoRequest) (_result *QueryEccInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEccInfoResponse{}
	_body, _err := client.QueryEccInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryK8sClusterLogProjectInfoWithOptions(request *QueryK8sClusterLogProjectInfoRequest, runtime *util.RuntimeOptions) (_result *QueryK8sClusterLogProjectInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryK8sClusterLogProjectInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryK8sClusterLogProjectInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/sls/project"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryK8sClusterLogProjectInfo(request *QueryK8sClusterLogProjectInfoRequest) (_result *QueryK8sClusterLogProjectInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryK8sClusterLogProjectInfoResponse{}
	_body, _err := client.QueryK8sClusterLogProjectInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMigrateEcuListWithOptions(request *QueryMigrateEcuListRequest, runtime *util.RuntimeOptions) (_result *QueryMigrateEcuListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMigrateEcuListResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryMigrateEcuList"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/migrate_ecu_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMigrateEcuList(request *QueryMigrateEcuListRequest) (_result *QueryMigrateEcuListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMigrateEcuListResponse{}
	_body, _err := client.QueryMigrateEcuListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMigrateRegionListWithOptions(request *QueryMigrateRegionListRequest, runtime *util.RuntimeOptions) (_result *QueryMigrateRegionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryMigrateRegionListResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryMigrateRegionList"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/migrate_region_select"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMigrateRegionList(request *QueryMigrateRegionListRequest) (_result *QueryMigrateRegionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMigrateRegionListResponse{}
	_body, _err := client.QueryMigrateRegionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryRegionConfigWithOptions(request *QueryRegionConfigRequest, runtime *util.RuntimeOptions) (_result *QueryRegionConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryRegionConfigResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryRegionConfig"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/region_config"), nil, request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryRegionConfig(request *QueryRegionConfigRequest) (_result *QueryRegionConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryRegionConfigResponse{}
	_body, _err := client.QueryRegionConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryServiceTimeConfigWithOptions(request *QueryServiceTimeConfigRequest, runtime *util.RuntimeOptions) (_result *QueryServiceTimeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QueryServiceTimeConfigResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QueryServiceTimeConfig"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/timeout/page"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryServiceTimeConfig(request *QueryServiceTimeConfigRequest) (_result *QueryServiceTimeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryServiceTimeConfigResponse{}
	_body, _err := client.QueryServiceTimeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySlsLogStoreListWithOptions(request *QuerySlsLogStoreListRequest, runtime *util.RuntimeOptions) (_result *QuerySlsLogStoreListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &QuerySlsLogStoreListResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("QuerySlsLogStoreList"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/k8s/sls/query_sls_log_store_list"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySlsLogStoreList(request *QuerySlsLogStoreListRequest) (_result *QuerySlsLogStoreListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySlsLogStoreListResponse{}
	_body, _err := client.QuerySlsLogStoreListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveMockRuleWithOptions(request *RemoveMockRuleRequest, runtime *util.RuntimeOptions) (_result *RemoveMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RemoveMockRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("RemoveMockRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/removeMockRule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveMockRule(request *RemoveMockRuleRequest) (_result *RemoveMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveMockRuleResponse{}
	_body, _err := client.RemoveMockRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResetApplicationWithOptions(request *ResetApplicationRequest, runtime *util.RuntimeOptions) (_result *ResetApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ResetApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ResetApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_reset"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResetApplication(request *ResetApplicationRequest) (_result *ResetApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetApplicationResponse{}
	_body, _err := client.ResetApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartApplicationWithOptions(request *RestartApplicationRequest, runtime *util.RuntimeOptions) (_result *RestartApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RestartApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("RestartApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_restart"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartApplication(request *RestartApplicationRequest) (_result *RestartApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartApplicationResponse{}
	_body, _err := client.RestartApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestartK8sApplicationWithOptions(request *RestartK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *RestartK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RestartK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("RestartK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/restart_k8s_app"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestartK8sApplication(request *RestartK8sApplicationRequest) (_result *RestartK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestartK8sApplicationResponse{}
	_body, _err := client.RestartK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RetryChangeOrderTaskWithOptions(request *RetryChangeOrderTaskRequest, runtime *util.RuntimeOptions) (_result *RetryChangeOrderTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RetryChangeOrderTaskResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("RetryChangeOrderTask"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/changeorder/task_retry"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RetryChangeOrderTask(request *RetryChangeOrderTaskRequest) (_result *RetryChangeOrderTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RetryChangeOrderTaskResponse{}
	_body, _err := client.RetryChangeOrderTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackApplicationWithOptions(request *RollbackApplicationRequest, runtime *util.RuntimeOptions) (_result *RollbackApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("RollbackApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_rollback"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackApplication(request *RollbackApplicationRequest) (_result *RollbackApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RollbackApplicationResponse{}
	_body, _err := client.RollbackApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RollbackChangeOrderWithOptions(request *RollbackChangeOrderRequest, runtime *util.RuntimeOptions) (_result *RollbackChangeOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &RollbackChangeOrderResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("RollbackChangeOrder"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/oam/changeorder/rollback"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RollbackChangeOrder(request *RollbackChangeOrderRequest) (_result *RollbackChangeOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RollbackChangeOrderResponse{}
	_body, _err := client.RollbackChangeOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleInApplicationWithOptions(request *ScaleInApplicationRequest, runtime *util.RuntimeOptions) (_result *ScaleInApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ScaleInApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ScaleInApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_scale_in"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleInApplication(request *ScaleInApplicationRequest) (_result *ScaleInApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ScaleInApplicationResponse{}
	_body, _err := client.ScaleInApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleK8sApplicationWithOptions(request *ScaleK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *ScaleK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ScaleK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ScaleK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_apps"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleK8sApplication(request *ScaleK8sApplicationRequest) (_result *ScaleK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ScaleK8sApplicationResponse{}
	_body, _err := client.ScaleK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleOutApplicationWithOptions(request *ScaleOutApplicationRequest, runtime *util.RuntimeOptions) (_result *ScaleOutApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ScaleOutApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ScaleOutApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_scale_out"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleOutApplication(request *ScaleOutApplicationRequest) (_result *ScaleOutApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ScaleOutApplicationResponse{}
	_body, _err := client.ScaleOutApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ScaleoutApplicationWithNewInstancesWithOptions(request *ScaleoutApplicationWithNewInstancesRequest, runtime *util.RuntimeOptions) (_result *ScaleoutApplicationWithNewInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ScaleoutApplicationWithNewInstancesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ScaleoutApplicationWithNewInstances"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/scaling/scale_out"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ScaleoutApplicationWithNewInstances(request *ScaleoutApplicationWithNewInstancesRequest) (_result *ScaleoutApplicationWithNewInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ScaleoutApplicationWithNewInstancesResponse{}
	_body, _err := client.ScaleoutApplicationWithNewInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartApplicationWithOptions(request *StartApplicationRequest, runtime *util.RuntimeOptions) (_result *StartApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("StartApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_start"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartApplication(request *StartApplicationRequest) (_result *StartApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartApplicationResponse{}
	_body, _err := client.StartApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartK8sApplicationWithOptions(request *StartK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *StartK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StartK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("StartK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/start_k8s_app"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartK8sApplication(request *StartK8sApplicationRequest) (_result *StartK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartK8sApplicationResponse{}
	_body, _err := client.StartK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopApplicationWithOptions(request *StopApplicationRequest, runtime *util.RuntimeOptions) (_result *StopApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("StopApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_stop"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopApplication(request *StopApplicationRequest) (_result *StopApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopApplicationResponse{}
	_body, _err := client.StopApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopK8sApplicationWithOptions(request *StopK8sApplicationRequest, runtime *util.RuntimeOptions) (_result *StopK8sApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &StopK8sApplicationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("StopK8sApplication"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/stop_k8s_app"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopK8sApplication(request *StopK8sApplicationRequest) (_result *StopK8sApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopK8sApplicationResponse{}
	_body, _err := client.StopK8sApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SwitchAdvancedMonitoringWithOptions(request *SwitchAdvancedMonitoringRequest, runtime *util.RuntimeOptions) (_result *SwitchAdvancedMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SwitchAdvancedMonitoringResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("SwitchAdvancedMonitoring"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/monitor/advancedMonitorInfo"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SwitchAdvancedMonitoring(request *SwitchAdvancedMonitoringRequest) (_result *SwitchAdvancedMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SwitchAdvancedMonitoringResponse{}
	_body, _err := client.SwitchAdvancedMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SynchronizeResourceWithOptions(request *SynchronizeResourceRequest, runtime *util.RuntimeOptions) (_result *SynchronizeResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &SynchronizeResourceResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("SynchronizeResource"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("/pop/v5/resource/pop_sync_resource"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SynchronizeResource(request *SynchronizeResourceRequest) (_result *SynchronizeResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SynchronizeResourceResponse{}
	_body, _err := client.SynchronizeResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("TagResources"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/tag/tags"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ToggleGrayIngressWithOptions(request *ToggleGrayIngressRequest, runtime *util.RuntimeOptions) (_result *ToggleGrayIngressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ToggleGrayIngressResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ToggleGrayIngress"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/gray/env_switch"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ToggleGrayIngress(request *ToggleGrayIngressRequest) (_result *ToggleGrayIngressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ToggleGrayIngressResponse{}
	_body, _err := client.ToggleGrayIngressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TransformClusterMemberWithOptions(request *TransformClusterMemberRequest, runtime *util.RuntimeOptions) (_result *TransformClusterMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &TransformClusterMemberResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("TransformClusterMember"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/resource/transform_cluster_member"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TransformClusterMember(request *TransformClusterMemberRequest) (_result *TransformClusterMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TransformClusterMemberResponse{}
	_body, _err := client.TransformClusterMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindK8sSlbWithOptions(request *UnbindK8sSlbRequest, runtime *util.RuntimeOptions) (_result *UnbindK8sSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindK8sSlbResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UnbindK8sSlb"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_slb_binding"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindK8sSlb(request *UnbindK8sSlbRequest) (_result *UnbindK8sSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindK8sSlbResponse{}
	_body, _err := client.UnbindK8sSlbWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindSlbWithOptions(request *UnbindSlbRequest, runtime *util.RuntimeOptions) (_result *UnbindSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UnbindSlbResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UnbindSlb"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/app/unbind_slb_json"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindSlb(request *UnbindSlbRequest) (_result *UnbindSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindSlbResponse{}
	_body, _err := client.UnbindSlbWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UntagResources"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("DELETE"), tea.String("AK"), tea.String("/pop/v5/tag/tags"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAccountInfoWithOptions(request *UpdateAccountInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateAccountInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateAccountInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateAccountInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/edit_account_info"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAccountInfo(request *UpdateAccountInfoRequest) (_result *UpdateAccountInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAccountInfoResponse{}
	_body, _err := client.UpdateAccountInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateApplicationBaseInfoWithOptions(request *UpdateApplicationBaseInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateApplicationBaseInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateApplicationBaseInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateApplicationBaseInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/update_app_info"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateApplicationBaseInfo(request *UpdateApplicationBaseInfoRequest) (_result *UpdateApplicationBaseInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateApplicationBaseInfoResponse{}
	_body, _err := client.UpdateApplicationBaseInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateApplicationScalingRuleWithOptions(request *UpdateApplicationScalingRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateApplicationScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateApplicationScalingRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateApplicationScalingRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v1/eam/scale/application_scaling_rule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateApplicationScalingRule(request *UpdateApplicationScalingRuleRequest) (_result *UpdateApplicationScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateApplicationScalingRuleResponse{}
	_body, _err := client.UpdateApplicationScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateConfigTemplateWithOptions(request *UpdateConfigTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateConfigTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateConfigTemplateResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateConfigTemplate"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/config_template"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateConfigTemplate(request *UpdateConfigTemplateRequest) (_result *UpdateConfigTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateConfigTemplateResponse{}
	_body, _err := client.UpdateConfigTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateContainerWithOptions(request *UpdateContainerRequest, runtime *util.RuntimeOptions) (_result *UpdateContainerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateContainer"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/changeorder/co_update_container"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateContainer(request *UpdateContainerRequest) (_result *UpdateContainerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateContainerResponse{}
	_body, _err := client.UpdateContainerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateContainerConfigurationWithOptions(request *UpdateContainerConfigurationRequest, runtime *util.RuntimeOptions) (_result *UpdateContainerConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateContainerConfigurationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateContainerConfiguration"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/container_config"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateContainerConfiguration(request *UpdateContainerConfigurationRequest) (_result *UpdateContainerConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateContainerConfigurationResponse{}
	_body, _err := client.UpdateContainerConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDegradeControlWithOptions(request *UpdateDegradeControlRequest, runtime *util.RuntimeOptions) (_result *UpdateDegradeControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateDegradeControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateDegradeControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/degradeControl"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDegradeControl(request *UpdateDegradeControlRequest) (_result *UpdateDegradeControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDegradeControlResponse{}
	_body, _err := client.UpdateDegradeControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEnvAppGroupWithOptions(request *UpdateEnvAppGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateEnvAppGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEnvAppGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateEnvAppGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/gray/env_app_groups"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEnvAppGroup(request *UpdateEnvAppGroupRequest) (_result *UpdateEnvAppGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnvAppGroupResponse{}
	_body, _err := client.UpdateEnvAppGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEnvHttpTrafficControlWithOptions(request *UpdateEnvHttpTrafficControlRequest, runtime *util.RuntimeOptions) (_result *UpdateEnvHttpTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateEnvHttpTrafficControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateEnvHttpTrafficControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/gray/env_http_traffic_control"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEnvHttpTrafficControl(request *UpdateEnvHttpTrafficControlRequest) (_result *UpdateEnvHttpTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEnvHttpTrafficControlResponse{}
	_body, _err := client.UpdateEnvHttpTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateFlowControlWithOptions(request *UpdateFlowControlRequest, runtime *util.RuntimeOptions) (_result *UpdateFlowControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateFlowControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateFlowControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/flowControl"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateFlowControl(request *UpdateFlowControlRequest) (_result *UpdateFlowControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFlowControlResponse{}
	_body, _err := client.UpdateFlowControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHealthCheckUrlWithOptions(request *UpdateHealthCheckUrlRequest, runtime *util.RuntimeOptions) (_result *UpdateHealthCheckUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateHealthCheckUrlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateHealthCheckUrl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/modify_hc_url"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHealthCheckUrl(request *UpdateHealthCheckUrlRequest) (_result *UpdateHealthCheckUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHealthCheckUrlResponse{}
	_body, _err := client.UpdateHealthCheckUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateHookConfigurationWithOptions(request *UpdateHookConfigurationRequest, runtime *util.RuntimeOptions) (_result *UpdateHookConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateHookConfigurationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateHookConfiguration"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/app/config_app_hook_json"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateHookConfiguration(request *UpdateHookConfigurationRequest) (_result *UpdateHookConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateHookConfigurationResponse{}
	_body, _err := client.UpdateHookConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateJvmConfigurationWithOptions(request *UpdateJvmConfigurationRequest, runtime *util.RuntimeOptions) (_result *UpdateJvmConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateJvmConfigurationResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateJvmConfiguration"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/app/app_jvm_config"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateJvmConfiguration(request *UpdateJvmConfigurationRequest) (_result *UpdateJvmConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateJvmConfigurationResponse{}
	_body, _err := client.UpdateJvmConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sApplicationBaseInfoWithOptions(request *UpdateK8sApplicationBaseInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sApplicationBaseInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateK8sApplicationBaseInfoResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sApplicationBaseInfo"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/oam/update_app_basic_info"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sApplicationBaseInfo(request *UpdateK8sApplicationBaseInfoRequest) (_result *UpdateK8sApplicationBaseInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sApplicationBaseInfoResponse{}
	_body, _err := client.UpdateK8sApplicationBaseInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sApplicationConfigWithOptions(request *UpdateK8sApplicationConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sApplicationConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateK8sApplicationConfigResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sApplicationConfig"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_app_configuration"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sApplicationConfig(request *UpdateK8sApplicationConfigRequest) (_result *UpdateK8sApplicationConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sApplicationConfigResponse{}
	_body, _err := client.UpdateK8sApplicationConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sConfigMapWithOptions(request *UpdateK8sConfigMapRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sConfigMapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateK8sConfigMapResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sConfigMap"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_config_map"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sConfigMap(request *UpdateK8sConfigMapRequest) (_result *UpdateK8sConfigMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sConfigMapResponse{}
	_body, _err := client.UpdateK8sConfigMapWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sIngressRuleWithOptions(tmp *UpdateK8sIngressRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sIngressRuleResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateK8sIngressRuleShrinkRequest{}
	roautil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmp.Query))) {
		query := &UpdateK8sIngressRuleShrinkQuery{}
		roautil.Convert(tmp.Query, query)
		if !tea.BoolValue(util.IsUnset(tmp.Query.IngressConf)) {
			query.IngressConfShrink = util.ToJSONString(tmp.Query.IngressConf)
		}

		request.Query = query
	}

	_result = &UpdateK8sIngressRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sIngressRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_ingress"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sIngressRule(request *UpdateK8sIngressRuleRequest) (_result *UpdateK8sIngressRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sIngressRuleResponse{}
	_body, _err := client.UpdateK8sIngressRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sResourceWithOptions(request *UpdateK8sResourceRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateK8sResourceResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sResource"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/oam/update_k8s_resource_config"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sResource(request *UpdateK8sResourceRequest) (_result *UpdateK8sResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sResourceResponse{}
	_body, _err := client.UpdateK8sResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sSecretWithOptions(request *UpdateK8sSecretRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sSecretResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateK8sSecretResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sSecret"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_secret"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sSecret(request *UpdateK8sSecretRequest) (_result *UpdateK8sSecretResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sSecretResponse{}
	_body, _err := client.UpdateK8sSecretWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sServiceWithOptions(tmp *UpdateK8sServiceRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sServiceResponse, _err error) {
	_err = util.ValidateModel(tmp)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateK8sServiceShrinkRequest{}
	roautil.Convert(tmp, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmp.Query))) {
		query := &UpdateK8sServiceShrinkQuery{}
		roautil.Convert(tmp.Query, query)
		if !tea.BoolValue(util.IsUnset(tmp.Query.ServicePorts)) {
			query.ServicePortsShrink = util.ToJSONString(tmp.Query.ServicePorts)
		}

		request.Query = query
	}

	_result = &UpdateK8sServiceResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sService"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_service"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sService(request *UpdateK8sServiceRequest) (_result *UpdateK8sServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sServiceResponse{}
	_body, _err := client.UpdateK8sServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateK8sSlbWithOptions(request *UpdateK8sSlbRequest, runtime *util.RuntimeOptions) (_result *UpdateK8sSlbResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateK8sSlbResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateK8sSlb"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/k8s_slb_binding"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateK8sSlb(request *UpdateK8sSlbRequest) (_result *UpdateK8sSlbResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateK8sSlbResponse{}
	_body, _err := client.UpdateK8sSlbWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLocalitySettingWithOptions(request *UpdateLocalitySettingRequest, runtime *util.RuntimeOptions) (_result *UpdateLocalitySettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateLocalitySettingResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateLocalitySetting"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/applications/locality/setting"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLocalitySetting(request *UpdateLocalitySettingRequest) (_result *UpdateLocalitySettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLocalitySettingResponse{}
	_body, _err := client.UpdateLocalitySettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMockRuleWithOptions(request *UpdateMockRuleRequest, runtime *util.RuntimeOptions) (_result *UpdateMockRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateMockRuleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateMockRule"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/sp/api/mock/updateMockRule"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMockRule(request *UpdateMockRuleRequest) (_result *UpdateMockRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMockRuleResponse{}
	_body, _err := client.UpdateMockRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateRoleWithOptions(request *UpdateRoleRequest, runtime *util.RuntimeOptions) (_result *UpdateRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateRoleResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateRole"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/account/edit_role"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateRole(request *UpdateRoleRequest) (_result *UpdateRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateRoleResponse{}
	_body, _err := client.UpdateRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSlsLogStoreWithOptions(request *UpdateSlsLogStoreRequest, runtime *util.RuntimeOptions) (_result *UpdateSlsLogStoreResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSlsLogStoreResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateSlsLogStore"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/sls/update_sls_log_store"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSlsLogStore(request *UpdateSlsLogStoreRequest) (_result *UpdateSlsLogStoreResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSlsLogStoreResponse{}
	_body, _err := client.UpdateSlsLogStoreWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSwimmingLaneWithOptions(request *UpdateSwimmingLaneRequest, runtime *util.RuntimeOptions) (_result *UpdateSwimmingLaneResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSwimmingLaneResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateSwimmingLane"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lanes"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSwimmingLane(request *UpdateSwimmingLaneRequest) (_result *UpdateSwimmingLaneResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSwimmingLaneResponse{}
	_body, _err := client.UpdateSwimmingLaneWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSwimmingLaneGroupWithOptions(request *UpdateSwimmingLaneGroupRequest, runtime *util.RuntimeOptions) (_result *UpdateSwimmingLaneGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSwimmingLaneGroupResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateSwimmingLaneGroup"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lane_groups"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSwimmingLaneGroup(request *UpdateSwimmingLaneGroupRequest) (_result *UpdateSwimmingLaneGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSwimmingLaneGroupResponse{}
	_body, _err := client.UpdateSwimmingLaneGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSwimmingLanePriorityWithOptions(request *UpdateSwimmingLanePriorityRequest, runtime *util.RuntimeOptions) (_result *UpdateSwimmingLanePriorityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UpdateSwimmingLanePriorityResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UpdateSwimmingLanePriority"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/trafficmgnt/swimming_lane"), util.StringifyMapValue(tea.ToMap(request.Query)), request.Headers, nil, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSwimmingLanePriority(request *UpdateSwimmingLanePriorityRequest) (_result *UpdateSwimmingLanePriorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSwimmingLanePriorityResponse{}
	_body, _err := client.UpdateSwimmingLanePriorityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UppateEnvHsfTrafficControlWithOptions(request *UppateEnvHsfTrafficControlRequest, runtime *util.RuntimeOptions) (_result *UppateEnvHsfTrafficControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &UppateEnvHsfTrafficControlResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("UppateEnvHsfTrafficControl"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("PUT"), tea.String("AK"), tea.String("/pop/v5/gray/env_hsf_traffic_control"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UppateEnvHsfTrafficControl(request *UppateEnvHsfTrafficControlRequest) (_result *UppateEnvHsfTrafficControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UppateEnvHsfTrafficControlResponse{}
	_body, _err := client.UppateEnvHsfTrafficControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ValidateK8sResourceWithOptions(request *ValidateK8sResourceRequest, runtime *util.RuntimeOptions) (_result *ValidateK8sResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	_result = &ValidateK8sResourceResponse{}
	_body, _err := client.DoRequestWithAction(tea.String("ValidateK8sResource"), tea.String("2017-08-01"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("/pop/v5/k8s/acs/validate_k8s_resource"), nil, request.Headers, tea.ToMap(request.Body), runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ValidateK8sResource(request *ValidateK8sResourceRequest) (_result *ValidateK8sResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ValidateK8sResourceResponse{}
	_body, _err := client.ValidateK8sResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
