// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type CdsFileShareLinkModel struct {
	AccessCount       *int64  `json:"AccessCount,omitempty" xml:"AccessCount,omitempty"`
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator           *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DisableDownload   *bool   `json:"DisableDownload,omitempty" xml:"DisableDownload,omitempty"`
	DisablePreview    *bool   `json:"DisablePreview,omitempty" xml:"DisablePreview,omitempty"`
	DisableSave       *bool   `json:"DisableSave,omitempty" xml:"DisableSave,omitempty"`
	DownloadCount     *int64  `json:"DownloadCount,omitempty" xml:"DownloadCount,omitempty"`
	DownloadLimit     *int64  `json:"DownloadLimit,omitempty" xml:"DownloadLimit,omitempty"`
	DriveId           *string `json:"DriveId,omitempty" xml:"DriveId,omitempty"`
	Expiration        *string `json:"Expiration,omitempty" xml:"Expiration,omitempty"`
	Expired           *bool   `json:"Expired,omitempty" xml:"Expired,omitempty"`
	FileIds           *string `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
	ModifiyTime       *string `json:"ModifiyTime,omitempty" xml:"ModifiyTime,omitempty"`
	PreviewCount      *int64  `json:"PreviewCount,omitempty" xml:"PreviewCount,omitempty"`
	PreviewLimit      *int64  `json:"PreviewLimit,omitempty" xml:"PreviewLimit,omitempty"`
	ReportCount       *int64  `json:"ReportCount,omitempty" xml:"ReportCount,omitempty"`
	SaveCount         *int64  `json:"SaveCount,omitempty" xml:"SaveCount,omitempty"`
	SaveLimit         *int64  `json:"SaveLimit,omitempty" xml:"SaveLimit,omitempty"`
	ShareId           *string `json:"ShareId,omitempty" xml:"ShareId,omitempty"`
	ShareLink         *string `json:"ShareLink,omitempty" xml:"ShareLink,omitempty"`
	ShareName         *string `json:"ShareName,omitempty" xml:"ShareName,omitempty"`
	SharePwd          *string `json:"SharePwd,omitempty" xml:"SharePwd,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VideoPreviewCount *int64  `json:"VideoPreviewCount,omitempty" xml:"VideoPreviewCount,omitempty"`
}

func (s CdsFileShareLinkModel) String() string {
	return tea.Prettify(s)
}

func (s CdsFileShareLinkModel) GoString() string {
	return s.String()
}

func (s *CdsFileShareLinkModel) SetAccessCount(v int64) *CdsFileShareLinkModel {
	s.AccessCount = &v
	return s
}

func (s *CdsFileShareLinkModel) SetCreateTime(v string) *CdsFileShareLinkModel {
	s.CreateTime = &v
	return s
}

func (s *CdsFileShareLinkModel) SetCreator(v string) *CdsFileShareLinkModel {
	s.Creator = &v
	return s
}

func (s *CdsFileShareLinkModel) SetDescription(v string) *CdsFileShareLinkModel {
	s.Description = &v
	return s
}

func (s *CdsFileShareLinkModel) SetDisableDownload(v bool) *CdsFileShareLinkModel {
	s.DisableDownload = &v
	return s
}

func (s *CdsFileShareLinkModel) SetDisablePreview(v bool) *CdsFileShareLinkModel {
	s.DisablePreview = &v
	return s
}

func (s *CdsFileShareLinkModel) SetDisableSave(v bool) *CdsFileShareLinkModel {
	s.DisableSave = &v
	return s
}

func (s *CdsFileShareLinkModel) SetDownloadCount(v int64) *CdsFileShareLinkModel {
	s.DownloadCount = &v
	return s
}

func (s *CdsFileShareLinkModel) SetDownloadLimit(v int64) *CdsFileShareLinkModel {
	s.DownloadLimit = &v
	return s
}

func (s *CdsFileShareLinkModel) SetDriveId(v string) *CdsFileShareLinkModel {
	s.DriveId = &v
	return s
}

func (s *CdsFileShareLinkModel) SetExpiration(v string) *CdsFileShareLinkModel {
	s.Expiration = &v
	return s
}

func (s *CdsFileShareLinkModel) SetExpired(v bool) *CdsFileShareLinkModel {
	s.Expired = &v
	return s
}

func (s *CdsFileShareLinkModel) SetFileIds(v string) *CdsFileShareLinkModel {
	s.FileIds = &v
	return s
}

func (s *CdsFileShareLinkModel) SetModifiyTime(v string) *CdsFileShareLinkModel {
	s.ModifiyTime = &v
	return s
}

func (s *CdsFileShareLinkModel) SetPreviewCount(v int64) *CdsFileShareLinkModel {
	s.PreviewCount = &v
	return s
}

func (s *CdsFileShareLinkModel) SetPreviewLimit(v int64) *CdsFileShareLinkModel {
	s.PreviewLimit = &v
	return s
}

func (s *CdsFileShareLinkModel) SetReportCount(v int64) *CdsFileShareLinkModel {
	s.ReportCount = &v
	return s
}

func (s *CdsFileShareLinkModel) SetSaveCount(v int64) *CdsFileShareLinkModel {
	s.SaveCount = &v
	return s
}

func (s *CdsFileShareLinkModel) SetSaveLimit(v int64) *CdsFileShareLinkModel {
	s.SaveLimit = &v
	return s
}

func (s *CdsFileShareLinkModel) SetShareId(v string) *CdsFileShareLinkModel {
	s.ShareId = &v
	return s
}

func (s *CdsFileShareLinkModel) SetShareLink(v string) *CdsFileShareLinkModel {
	s.ShareLink = &v
	return s
}

func (s *CdsFileShareLinkModel) SetShareName(v string) *CdsFileShareLinkModel {
	s.ShareName = &v
	return s
}

func (s *CdsFileShareLinkModel) SetSharePwd(v string) *CdsFileShareLinkModel {
	s.SharePwd = &v
	return s
}

func (s *CdsFileShareLinkModel) SetStatus(v string) *CdsFileShareLinkModel {
	s.Status = &v
	return s
}

func (s *CdsFileShareLinkModel) SetVideoPreviewCount(v int64) *CdsFileShareLinkModel {
	s.VideoPreviewCount = &v
	return s
}

type FilePermissionMember struct {
	// This parameter is required.
	CdsIdentity        *FilePermissionMemberCdsIdentity `json:"CdsIdentity,omitempty" xml:"CdsIdentity,omitempty" type:"Struct"`
	DisinheritSubGroup *bool                            `json:"DisinheritSubGroup,omitempty" xml:"DisinheritSubGroup,omitempty"`
	ExpireTime         *int64                           `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// This parameter is required.
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
}

func (s FilePermissionMember) String() string {
	return tea.Prettify(s)
}

func (s FilePermissionMember) GoString() string {
	return s.String()
}

func (s *FilePermissionMember) SetCdsIdentity(v *FilePermissionMemberCdsIdentity) *FilePermissionMember {
	s.CdsIdentity = v
	return s
}

func (s *FilePermissionMember) SetDisinheritSubGroup(v bool) *FilePermissionMember {
	s.DisinheritSubGroup = &v
	return s
}

func (s *FilePermissionMember) SetExpireTime(v int64) *FilePermissionMember {
	s.ExpireTime = &v
	return s
}

func (s *FilePermissionMember) SetRoleId(v string) *FilePermissionMember {
	s.RoleId = &v
	return s
}

type FilePermissionMemberCdsIdentity struct {
	// This parameter is required.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s FilePermissionMemberCdsIdentity) String() string {
	return tea.Prettify(s)
}

func (s FilePermissionMemberCdsIdentity) GoString() string {
	return s.String()
}

func (s *FilePermissionMemberCdsIdentity) SetId(v string) *FilePermissionMemberCdsIdentity {
	s.Id = &v
	return s
}

func (s *FilePermissionMemberCdsIdentity) SetType(v string) *FilePermissionMemberCdsIdentity {
	s.Type = &v
	return s
}

type Permission struct {
	CreateTime      *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DestCidrIp      *string `json:"DestCidrIp,omitempty" xml:"DestCidrIp,omitempty"`
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	NicType         *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	Policy          *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	Priority        *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	SourceCidrIp    *string `json:"SourceCidrIp,omitempty" xml:"SourceCidrIp,omitempty"`
	SourcePortRange *string `json:"SourcePortRange,omitempty" xml:"SourcePortRange,omitempty"`
}

func (s Permission) String() string {
	return tea.Prettify(s)
}

func (s Permission) GoString() string {
	return s.String()
}

func (s *Permission) SetCreateTime(v string) *Permission {
	s.CreateTime = &v
	return s
}

func (s *Permission) SetDescription(v string) *Permission {
	s.Description = &v
	return s
}

func (s *Permission) SetDestCidrIp(v string) *Permission {
	s.DestCidrIp = &v
	return s
}

func (s *Permission) SetIpProtocol(v string) *Permission {
	s.IpProtocol = &v
	return s
}

func (s *Permission) SetNicType(v string) *Permission {
	s.NicType = &v
	return s
}

func (s *Permission) SetPolicy(v string) *Permission {
	s.Policy = &v
	return s
}

func (s *Permission) SetPortRange(v string) *Permission {
	s.PortRange = &v
	return s
}

func (s *Permission) SetPriority(v string) *Permission {
	s.Priority = &v
	return s
}

func (s *Permission) SetSourceCidrIp(v string) *Permission {
	s.SourceCidrIp = &v
	return s
}

func (s *Permission) SetSourcePortRange(v string) *Permission {
	s.SourcePortRange = &v
	return s
}

type ActivateOfficeSiteRequest struct {
	// The ID of the convenience office network that is locked.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-803704****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ActivateOfficeSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s ActivateOfficeSiteRequest) GoString() string {
	return s.String()
}

func (s *ActivateOfficeSiteRequest) SetOfficeSiteId(v string) *ActivateOfficeSiteRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ActivateOfficeSiteRequest) SetRegionId(v string) *ActivateOfficeSiteRequest {
	s.RegionId = &v
	return s
}

type ActivateOfficeSiteResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 269BDB16-2CD8-4865-84BD-11C40BC21DB0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ActivateOfficeSiteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ActivateOfficeSiteResponseBody) GoString() string {
	return s.String()
}

func (s *ActivateOfficeSiteResponseBody) SetRequestId(v string) *ActivateOfficeSiteResponseBody {
	s.RequestId = &v
	return s
}

type ActivateOfficeSiteResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ActivateOfficeSiteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ActivateOfficeSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s ActivateOfficeSiteResponse) GoString() string {
	return s.String()
}

func (s *ActivateOfficeSiteResponse) SetHeaders(v map[string]*string) *ActivateOfficeSiteResponse {
	s.Headers = v
	return s
}

func (s *ActivateOfficeSiteResponse) SetStatusCode(v int32) *ActivateOfficeSiteResponse {
	s.StatusCode = &v
	return s
}

func (s *ActivateOfficeSiteResponse) SetBody(v *ActivateOfficeSiteResponseBody) *ActivateOfficeSiteResponse {
	s.Body = v
	return s
}

type AddDesktopOversoldUserGroupRequest struct {
	ImageId         *string                                  `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Name            *string                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	OversoldGroupId *string                                  `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	PolicyGroupId   *string                                  `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	Tag             []*AddDesktopOversoldUserGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s AddDesktopOversoldUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDesktopOversoldUserGroupRequest) GoString() string {
	return s.String()
}

func (s *AddDesktopOversoldUserGroupRequest) SetImageId(v string) *AddDesktopOversoldUserGroupRequest {
	s.ImageId = &v
	return s
}

func (s *AddDesktopOversoldUserGroupRequest) SetName(v string) *AddDesktopOversoldUserGroupRequest {
	s.Name = &v
	return s
}

func (s *AddDesktopOversoldUserGroupRequest) SetOversoldGroupId(v string) *AddDesktopOversoldUserGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *AddDesktopOversoldUserGroupRequest) SetPolicyGroupId(v string) *AddDesktopOversoldUserGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *AddDesktopOversoldUserGroupRequest) SetTag(v []*AddDesktopOversoldUserGroupRequestTag) *AddDesktopOversoldUserGroupRequest {
	s.Tag = v
	return s
}

type AddDesktopOversoldUserGroupRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AddDesktopOversoldUserGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s AddDesktopOversoldUserGroupRequestTag) GoString() string {
	return s.String()
}

func (s *AddDesktopOversoldUserGroupRequestTag) SetKey(v string) *AddDesktopOversoldUserGroupRequestTag {
	s.Key = &v
	return s
}

func (s *AddDesktopOversoldUserGroupRequestTag) SetValue(v string) *AddDesktopOversoldUserGroupRequestTag {
	s.Value = &v
	return s
}

type AddDesktopOversoldUserGroupResponseBody struct {
	Data      *AddDesktopOversoldUserGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddDesktopOversoldUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDesktopOversoldUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddDesktopOversoldUserGroupResponseBody) SetData(v *AddDesktopOversoldUserGroupResponseBodyData) *AddDesktopOversoldUserGroupResponseBody {
	s.Data = v
	return s
}

func (s *AddDesktopOversoldUserGroupResponseBody) SetRequestId(v string) *AddDesktopOversoldUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type AddDesktopOversoldUserGroupResponseBodyData struct {
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AddDesktopOversoldUserGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddDesktopOversoldUserGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddDesktopOversoldUserGroupResponseBodyData) SetUserGroupId(v string) *AddDesktopOversoldUserGroupResponseBodyData {
	s.UserGroupId = &v
	return s
}

type AddDesktopOversoldUserGroupResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddDesktopOversoldUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddDesktopOversoldUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDesktopOversoldUserGroupResponse) GoString() string {
	return s.String()
}

func (s *AddDesktopOversoldUserGroupResponse) SetHeaders(v map[string]*string) *AddDesktopOversoldUserGroupResponse {
	s.Headers = v
	return s
}

func (s *AddDesktopOversoldUserGroupResponse) SetStatusCode(v int32) *AddDesktopOversoldUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDesktopOversoldUserGroupResponse) SetBody(v *AddDesktopOversoldUserGroupResponseBody) *AddDesktopOversoldUserGroupResponse {
	s.Body = v
	return s
}

type AddDevicesRequest struct {
	// The type of the client.
	//
	// Valid values:
	//
	// 	- 1: hardware client.
	//
	// 	- 2: software client.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ClientType *int32 `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The IDs of the devices. You can specify up to 200 IDs.
	//
	// This parameter is required.
	DeviceIds []*string `json:"DeviceIds,omitempty" xml:"DeviceIds,omitempty" type:"Repeated"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDevicesRequest) GoString() string {
	return s.String()
}

func (s *AddDevicesRequest) SetClientType(v int32) *AddDevicesRequest {
	s.ClientType = &v
	return s
}

func (s *AddDevicesRequest) SetDeviceIds(v []*string) *AddDevicesRequest {
	s.DeviceIds = v
	return s
}

func (s *AddDevicesRequest) SetRegionId(v string) *AddDevicesRequest {
	s.RegionId = &v
	return s
}

type AddDevicesResponseBody struct {
	// The execution result. If the request was successful, `success` is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned error message. This parameter is not returned if the value of Code is `success`.
	//
	// example:
	//
	// The parameter is not specified.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A87DBB05-653A-5E4B-B72B-5F4A1E07****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *AddDevicesResponseBody) SetCode(v string) *AddDevicesResponseBody {
	s.Code = &v
	return s
}

func (s *AddDevicesResponseBody) SetMessage(v string) *AddDevicesResponseBody {
	s.Message = &v
	return s
}

func (s *AddDevicesResponseBody) SetRequestId(v string) *AddDevicesResponseBody {
	s.RequestId = &v
	return s
}

type AddDevicesResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDevicesResponse) GoString() string {
	return s.String()
}

func (s *AddDevicesResponse) SetHeaders(v map[string]*string) *AddDevicesResponse {
	s.Headers = v
	return s
}

func (s *AddDevicesResponse) SetStatusCode(v int32) *AddDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDevicesResponse) SetBody(v *AddDevicesResponseBody) *AddDevicesResponse {
	s.Body = v
	return s
}

type AddFilePermissionRequest struct {
	// The ID of the cloud disk whose folder you want to share.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-352282****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The ID of the end user who uses the cloud disk.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6333e553a133ce21e6f747cf948bb9ef95d7****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The ID of the team that uses cloud disks in Cloud Drive Service.
	//
	// example:
	//
	// cg-i1ruuudp92qpj****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The members who are granted the folder permissions.
	//
	// This parameter is required.
	MemberList []*AddFilePermissionRequestMemberList `json:"MemberList,omitempty" xml:"MemberList,omitempty" type:"Repeated"`
	// The region ID of the folder. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddFilePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFilePermissionRequest) GoString() string {
	return s.String()
}

func (s *AddFilePermissionRequest) SetCdsId(v string) *AddFilePermissionRequest {
	s.CdsId = &v
	return s
}

func (s *AddFilePermissionRequest) SetEndUserId(v string) *AddFilePermissionRequest {
	s.EndUserId = &v
	return s
}

func (s *AddFilePermissionRequest) SetFileId(v string) *AddFilePermissionRequest {
	s.FileId = &v
	return s
}

func (s *AddFilePermissionRequest) SetGroupId(v string) *AddFilePermissionRequest {
	s.GroupId = &v
	return s
}

func (s *AddFilePermissionRequest) SetMemberList(v []*AddFilePermissionRequestMemberList) *AddFilePermissionRequest {
	s.MemberList = v
	return s
}

func (s *AddFilePermissionRequest) SetRegionId(v string) *AddFilePermissionRequest {
	s.RegionId = &v
	return s
}

type AddFilePermissionRequestMemberList struct {
	// The user of the cloud disk.
	//
	// This parameter is required.
	CdsIdentity *AddFilePermissionRequestMemberListCdsIdentity `json:"CdsIdentity,omitempty" xml:"CdsIdentity,omitempty" type:"Struct"`
	// Specifies whether the users of the child group can inherit the folder permissions.
	//
	// example:
	//
	// false
	DisinheritSubGroup *bool `json:"DisinheritSubGroup,omitempty" xml:"DisinheritSubGroup,omitempty"`
	// The time when the authorization expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC. The value never expires. You can specify a value that is predefined by the system for this parameter. Example: 4775500800000.
	//
	// example:
	//
	// 4775500800000
	ExpireTime *int64 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The ID of the role to which you want to attach the folder permissions. To configure the folder permissions: you can specify a role or create custom operation permissions. You can use RoleId to specify a role. RoleId is mutually exclusive with ActionList. If you specify both of them, the value of RoleId takes precedence.
	//
	// Valid values:
	//
	// 	- SystemFileEditorWithoutShareLink
	//
	// 	- SystemFileUploaderAndDownloaderWithShareLink
	//
	// 	- SystemFileDownloader
	//
	// 	- SystemFileEditorWithoutDelete
	//
	// 	- SystemFileOwner
	//
	// 	- SystemFileDownloaderWithShareLink
	//
	// 	- SystemFileUploaderAndViewer
	//
	// 	- SystemFileViewer
	//
	// 	- SystemFileEditor
	//
	// 	- SystemFileUploaderWithShareLink
	//
	// 	- SystemFileUploader
	//
	// 	- SystemFileUploaderAndDownloader
	//
	// 	- SystemFileMetaViewer
	//
	// This parameter is required.
	//
	// example:
	//
	// SystemFileUploaderAndDownloader
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
}

func (s AddFilePermissionRequestMemberList) String() string {
	return tea.Prettify(s)
}

func (s AddFilePermissionRequestMemberList) GoString() string {
	return s.String()
}

func (s *AddFilePermissionRequestMemberList) SetCdsIdentity(v *AddFilePermissionRequestMemberListCdsIdentity) *AddFilePermissionRequestMemberList {
	s.CdsIdentity = v
	return s
}

func (s *AddFilePermissionRequestMemberList) SetDisinheritSubGroup(v bool) *AddFilePermissionRequestMemberList {
	s.DisinheritSubGroup = &v
	return s
}

func (s *AddFilePermissionRequestMemberList) SetExpireTime(v int64) *AddFilePermissionRequestMemberList {
	s.ExpireTime = &v
	return s
}

func (s *AddFilePermissionRequestMemberList) SetRoleId(v string) *AddFilePermissionRequestMemberList {
	s.RoleId = &v
	return s
}

type AddFilePermissionRequestMemberListCdsIdentity struct {
	// The ID of the user.
	//
	// This parameter is required.
	//
	// example:
	//
	// user01
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The type of the user.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     IT_Group
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     IT_User
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// IT_User
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddFilePermissionRequestMemberListCdsIdentity) String() string {
	return tea.Prettify(s)
}

func (s AddFilePermissionRequestMemberListCdsIdentity) GoString() string {
	return s.String()
}

func (s *AddFilePermissionRequestMemberListCdsIdentity) SetId(v string) *AddFilePermissionRequestMemberListCdsIdentity {
	s.Id = &v
	return s
}

func (s *AddFilePermissionRequestMemberListCdsIdentity) SetType(v string) *AddFilePermissionRequestMemberListCdsIdentity {
	s.Type = &v
	return s
}

type AddFilePermissionShrinkRequest struct {
	// The ID of the cloud disk whose folder you want to share.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-352282****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The ID of the end user who uses the cloud disk.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6333e553a133ce21e6f747cf948bb9ef95d7****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The ID of the team that uses cloud disks in Cloud Drive Service.
	//
	// example:
	//
	// cg-i1ruuudp92qpj****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The members who are granted the folder permissions.
	//
	// This parameter is required.
	MemberListShrink *string `json:"MemberList,omitempty" xml:"MemberList,omitempty"`
	// The region ID of the folder. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddFilePermissionShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFilePermissionShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddFilePermissionShrinkRequest) SetCdsId(v string) *AddFilePermissionShrinkRequest {
	s.CdsId = &v
	return s
}

func (s *AddFilePermissionShrinkRequest) SetEndUserId(v string) *AddFilePermissionShrinkRequest {
	s.EndUserId = &v
	return s
}

func (s *AddFilePermissionShrinkRequest) SetFileId(v string) *AddFilePermissionShrinkRequest {
	s.FileId = &v
	return s
}

func (s *AddFilePermissionShrinkRequest) SetGroupId(v string) *AddFilePermissionShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *AddFilePermissionShrinkRequest) SetMemberListShrink(v string) *AddFilePermissionShrinkRequest {
	s.MemberListShrink = &v
	return s
}

func (s *AddFilePermissionShrinkRequest) SetRegionId(v string) *AddFilePermissionShrinkRequest {
	s.RegionId = &v
	return s
}

type AddFilePermissionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddFilePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddFilePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *AddFilePermissionResponseBody) SetRequestId(v string) *AddFilePermissionResponseBody {
	s.RequestId = &v
	return s
}

type AddFilePermissionResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddFilePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddFilePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFilePermissionResponse) GoString() string {
	return s.String()
}

func (s *AddFilePermissionResponse) SetHeaders(v map[string]*string) *AddFilePermissionResponse {
	s.Headers = v
	return s
}

func (s *AddFilePermissionResponse) SetStatusCode(v int32) *AddFilePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *AddFilePermissionResponse) SetBody(v *AddFilePermissionResponseBody) *AddFilePermissionResponse {
	s.Body = v
	return s
}

type AddUserToDesktopGroupRequest struct {
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests. The token can only contain ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure the idempotence of a request](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The ID of the desktop group that you want to assign to more regular users.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The IDs of the desktop groups.
	DesktopGroupIds []*string `json:"DesktopGroupIds,omitempty" xml:"DesktopGroupIds,omitempty" type:"Repeated"`
	// The regular users to whom you want to assign the desktop group.
	//
	// This parameter is required.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AddUserToDesktopGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddUserToDesktopGroupRequest) GoString() string {
	return s.String()
}

func (s *AddUserToDesktopGroupRequest) SetClientToken(v string) *AddUserToDesktopGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *AddUserToDesktopGroupRequest) SetDesktopGroupId(v string) *AddUserToDesktopGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *AddUserToDesktopGroupRequest) SetDesktopGroupIds(v []*string) *AddUserToDesktopGroupRequest {
	s.DesktopGroupIds = v
	return s
}

func (s *AddUserToDesktopGroupRequest) SetEndUserIds(v []*string) *AddUserToDesktopGroupRequest {
	s.EndUserIds = v
	return s
}

func (s *AddUserToDesktopGroupRequest) SetRegionId(v string) *AddUserToDesktopGroupRequest {
	s.RegionId = &v
	return s
}

type AddUserToDesktopGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddUserToDesktopGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddUserToDesktopGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddUserToDesktopGroupResponseBody) SetRequestId(v string) *AddUserToDesktopGroupResponseBody {
	s.RequestId = &v
	return s
}

type AddUserToDesktopGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddUserToDesktopGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddUserToDesktopGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddUserToDesktopGroupResponse) GoString() string {
	return s.String()
}

func (s *AddUserToDesktopGroupResponse) SetHeaders(v map[string]*string) *AddUserToDesktopGroupResponse {
	s.Headers = v
	return s
}

func (s *AddUserToDesktopGroupResponse) SetStatusCode(v int32) *AddUserToDesktopGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddUserToDesktopGroupResponse) SetBody(v *AddUserToDesktopGroupResponseBody) *AddUserToDesktopGroupResponse {
	s.Body = v
	return s
}

type AddUserToDesktopOversoldUserGroupRequest struct {
	AddUserAmount   *int32  `json:"AddUserAmount,omitempty" xml:"AddUserAmount,omitempty"`
	EndUserId       *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	UserGroupId     *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s AddUserToDesktopOversoldUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AddUserToDesktopOversoldUserGroupRequest) GoString() string {
	return s.String()
}

func (s *AddUserToDesktopOversoldUserGroupRequest) SetAddUserAmount(v int32) *AddUserToDesktopOversoldUserGroupRequest {
	s.AddUserAmount = &v
	return s
}

func (s *AddUserToDesktopOversoldUserGroupRequest) SetEndUserId(v string) *AddUserToDesktopOversoldUserGroupRequest {
	s.EndUserId = &v
	return s
}

func (s *AddUserToDesktopOversoldUserGroupRequest) SetOversoldGroupId(v string) *AddUserToDesktopOversoldUserGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *AddUserToDesktopOversoldUserGroupRequest) SetUserGroupId(v string) *AddUserToDesktopOversoldUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type AddUserToDesktopOversoldUserGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddUserToDesktopOversoldUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddUserToDesktopOversoldUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AddUserToDesktopOversoldUserGroupResponseBody) SetRequestId(v string) *AddUserToDesktopOversoldUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type AddUserToDesktopOversoldUserGroupResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddUserToDesktopOversoldUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddUserToDesktopOversoldUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AddUserToDesktopOversoldUserGroupResponse) GoString() string {
	return s.String()
}

func (s *AddUserToDesktopOversoldUserGroupResponse) SetHeaders(v map[string]*string) *AddUserToDesktopOversoldUserGroupResponse {
	s.Headers = v
	return s
}

func (s *AddUserToDesktopOversoldUserGroupResponse) SetStatusCode(v int32) *AddUserToDesktopOversoldUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *AddUserToDesktopOversoldUserGroupResponse) SetBody(v *AddUserToDesktopOversoldUserGroupResponseBody) *AddUserToDesktopOversoldUserGroupResponse {
	s.Body = v
	return s
}

type ApplyAutoSnapshotPolicyRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 20 IDs.
	//
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the automatic snapshot policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// sp-ejtum8j5tfcw7****
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ApplyAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyRequest) SetDesktopId(v []*string) *ApplyAutoSnapshotPolicyRequest {
	s.DesktopId = v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetPolicyId(v string) *ApplyAutoSnapshotPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyRequest) SetRegionId(v string) *ApplyAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

type ApplyAutoSnapshotPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 63740E03-1B4B-5A18-AC27-2745A4F2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ApplyAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyResponseBody) SetRequestId(v string) *ApplyAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ApplyAutoSnapshotPolicyResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *ApplyAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *ApplyAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *ApplyAutoSnapshotPolicyResponse) SetStatusCode(v int32) *ApplyAutoSnapshotPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyAutoSnapshotPolicyResponse) SetBody(v *ApplyAutoSnapshotPolicyResponseBody) *ApplyAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type ApplyCoordinatePrivilegeRequest struct {
	// The ID of the application for the coordinate permissions.
	//
	// This parameter is required.
	//
	// example:
	//
	// co-fqsm6e8ee75w61fp9
	CoId *string `json:"CoId,omitempty" xml:"CoId,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// zhangsan
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of user who requires the coordinate permissions.
	//
	// Valid value: TENANT_ADMIN.
	//
	// This parameter is required.
	//
	// example:
	//
	// TENANT_ADMIN
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
	// The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About*	- on the client logon page to view the identifier of the client.
	//
	// example:
	//
	// 8b241d415da244a6936d6d6fa4f20f4d
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ApplyCoordinatePrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinatePrivilegeRequest) GoString() string {
	return s.String()
}

func (s *ApplyCoordinatePrivilegeRequest) SetCoId(v string) *ApplyCoordinatePrivilegeRequest {
	s.CoId = &v
	return s
}

func (s *ApplyCoordinatePrivilegeRequest) SetEndUserId(v string) *ApplyCoordinatePrivilegeRequest {
	s.EndUserId = &v
	return s
}

func (s *ApplyCoordinatePrivilegeRequest) SetRegionId(v string) *ApplyCoordinatePrivilegeRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyCoordinatePrivilegeRequest) SetUserType(v string) *ApplyCoordinatePrivilegeRequest {
	s.UserType = &v
	return s
}

func (s *ApplyCoordinatePrivilegeRequest) SetUuid(v string) *ApplyCoordinatePrivilegeRequest {
	s.Uuid = &v
	return s
}

type ApplyCoordinatePrivilegeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// C43EEAC3-84F8-5C1E-A067-4751C3D1422E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ApplyCoordinatePrivilegeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinatePrivilegeResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyCoordinatePrivilegeResponseBody) SetRequestId(v string) *ApplyCoordinatePrivilegeResponseBody {
	s.RequestId = &v
	return s
}

type ApplyCoordinatePrivilegeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyCoordinatePrivilegeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyCoordinatePrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinatePrivilegeResponse) GoString() string {
	return s.String()
}

func (s *ApplyCoordinatePrivilegeResponse) SetHeaders(v map[string]*string) *ApplyCoordinatePrivilegeResponse {
	s.Headers = v
	return s
}

func (s *ApplyCoordinatePrivilegeResponse) SetStatusCode(v int32) *ApplyCoordinatePrivilegeResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyCoordinatePrivilegeResponse) SetBody(v *ApplyCoordinatePrivilegeResponseBody) *ApplyCoordinatePrivilegeResponse {
	s.Body = v
	return s
}

type ApplyCoordinationForMonitoringRequest struct {
	// The coordination policy.
	//
	// Set the value to FULL_CONTROL.
	//
	// 	- The value FULL_CONTROL specifies that the cloud desktop is shared and remote access to the cloud desktop is allowed.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// FULL_CONTROL
	CoordinatePolicyType *string `json:"CoordinatePolicyType,omitempty" xml:"CoordinatePolicyType,omitempty"`
	// The ID of the end user who initiates the stream collaboration. If the initiator is the administrator, do not specify this parameter.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The type of the initiator.
	//
	// Set the value to ADMIN_INITIATE.
	//
	// 	- The value ADMIN_INITIATE specifies that the administrator initiates the coordination request.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ADMIN_INITIATE
	InitiatorType *string `json:"InitiatorType,omitempty" xml:"InitiatorType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://next.api.aliyun.com/document/ecd/2020-09-30/DescribeRegions) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The list of cloud desktops that run the collaboration task at the same time.
	//
	// This parameter is required.
	ResourceCandidates []*ApplyCoordinationForMonitoringRequestResourceCandidates `json:"ResourceCandidates,omitempty" xml:"ResourceCandidates,omitempty" type:"Repeated"`
	// The universally unique identifier (UUID) of the device.
	//
	// This parameter is required.
	//
	// example:
	//
	// 62f2f1f252f04e0e9d8bc****
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s ApplyCoordinationForMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinationForMonitoringRequest) GoString() string {
	return s.String()
}

func (s *ApplyCoordinationForMonitoringRequest) SetCoordinatePolicyType(v string) *ApplyCoordinationForMonitoringRequest {
	s.CoordinatePolicyType = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequest) SetEndUserId(v string) *ApplyCoordinationForMonitoringRequest {
	s.EndUserId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequest) SetInitiatorType(v string) *ApplyCoordinationForMonitoringRequest {
	s.InitiatorType = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequest) SetRegionId(v string) *ApplyCoordinationForMonitoringRequest {
	s.RegionId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequest) SetResourceCandidates(v []*ApplyCoordinationForMonitoringRequestResourceCandidates) *ApplyCoordinationForMonitoringRequest {
	s.ResourceCandidates = v
	return s
}

func (s *ApplyCoordinationForMonitoringRequest) SetUuid(v string) *ApplyCoordinationForMonitoringRequest {
	s.Uuid = &v
	return s
}

type ApplyCoordinationForMonitoringRequestResourceCandidates struct {
	// The ID of the Alibaba Cloud account to which the current cloud desktop belongs.
	//
	// This parameter is required.
	//
	// example:
	//
	// 130247021517****
	OwnerAliUid *int64 `json:"OwnerAliUid,omitempty" xml:"OwnerAliUid,omitempty"`
	// The ID of the current end user.
	//
	// example:
	//
	// alice
	OwnerEndUserId *string `json:"OwnerEndUserId,omitempty" xml:"OwnerEndUserId,omitempty"`
	// The ID of the cloud desktop.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-08zhejm3h7ilr****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The name of the cloud desktop.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestDesktop
	ResourceName *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
	// The properties of the cloud desktop.
	//
	// example:
	//
	// TestProperty
	ResourceProperties *string `json:"ResourceProperties,omitempty" xml:"ResourceProperties,omitempty"`
	// The region where the resource resides.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	ResourceRegionId *string `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty"`
	// The resource type.
	//
	// Set the value to CLOUD_DESKTOP.
	//
	// 	- The value CLOUD_DESKTOP specifies that the resource is a cloud desktop.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// CLOUD_DESKTOP
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ApplyCoordinationForMonitoringRequestResourceCandidates) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinationForMonitoringRequestResourceCandidates) GoString() string {
	return s.String()
}

func (s *ApplyCoordinationForMonitoringRequestResourceCandidates) SetOwnerAliUid(v int64) *ApplyCoordinationForMonitoringRequestResourceCandidates {
	s.OwnerAliUid = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequestResourceCandidates) SetOwnerEndUserId(v string) *ApplyCoordinationForMonitoringRequestResourceCandidates {
	s.OwnerEndUserId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequestResourceCandidates) SetResourceId(v string) *ApplyCoordinationForMonitoringRequestResourceCandidates {
	s.ResourceId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequestResourceCandidates) SetResourceName(v string) *ApplyCoordinationForMonitoringRequestResourceCandidates {
	s.ResourceName = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequestResourceCandidates) SetResourceProperties(v string) *ApplyCoordinationForMonitoringRequestResourceCandidates {
	s.ResourceProperties = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequestResourceCandidates) SetResourceRegionId(v string) *ApplyCoordinationForMonitoringRequestResourceCandidates {
	s.ResourceRegionId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringRequestResourceCandidates) SetResourceType(v string) *ApplyCoordinationForMonitoringRequestResourceCandidates {
	s.ResourceType = &v
	return s
}

type ApplyCoordinationForMonitoringResponseBody struct {
	// The list of stream collaboration models.
	CoordinateFlowModels []*ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels `json:"CoordinateFlowModels,omitempty" xml:"CoordinateFlowModels,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ApplyCoordinationForMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinationForMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyCoordinationForMonitoringResponseBody) SetCoordinateFlowModels(v []*ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) *ApplyCoordinationForMonitoringResponseBody {
	s.CoordinateFlowModels = v
	return s
}

func (s *ApplyCoordinationForMonitoringResponseBody) SetRequestId(v string) *ApplyCoordinationForMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels struct {
	// The ID of the stream collaboration.
	//
	// example:
	//
	// co-0sot77uale3****
	CoId *string `json:"CoId,omitempty" xml:"CoId,omitempty"`
	// The current status of the collaboration task.
	//
	// Valid values:
	//
	// 	- COORDINATING: The collaboration task is being executed.
	//
	// 	- TERMINATING: The collaboration task is being terminated.
	//
	// 	- TERMINATED: The collaboration task is terminated.
	//
	// 	- PENDING: The collaboration task is pending to be executed.
	//
	// example:
	//
	// PENDING
	CoordinateStatus *string `json:"CoordinateStatus,omitempty" xml:"CoordinateStatus,omitempty"`
	// The ticket that is used to establish the Adaptive Streaming Protocol (ASP)-based connection.
	//
	// example:
	//
	// 1VDQ0VTUw0KW0Rlc2t0b3BdDQpHV1Rva2VuPTAwTzgwL3liS25zUEVGdkF6eU1Pc1ExeHZWdmk4VEE3NFJvU1V1d0dPYm1BNkNJWklDMHVNQklWcjU2NS80S0ZQekQ4aGFTR0ZHelZqMTFGbkRpWWgvUFF1Zm1xSXNGdFRFNFRWMExJNit3TkU0L2RMb04wNXBBSE5Tc3M4dWFXY3lwWE****
	CoordinateTicket *string `json:"CoordinateTicket,omitempty" xml:"CoordinateTicket,omitempty"`
	// The type of the initiator.
	//
	// Valid values:
	//
	// 	- ADMIN_INITIATE_FORCE: The administrator forcibly initiates the collaboration request.
	//
	// 	- ADMIN_INITIATE: The administrator initiates the collaboration request.
	//
	// 	- COORDINATOR_INITIATE_FORCE: The coordinator forcibly initiates the collaboration request.
	//
	// example:
	//
	// COORDINATOR_INITIATE_FORCE
	InitiatorType *string `json:"InitiatorType,omitempty" xml:"InitiatorType,omitempty"`
	// The ID of the Alibaba Cloud account of the end user.
	//
	// example:
	//
	// alice
	OwnerUserId *string `json:"OwnerUserId,omitempty" xml:"OwnerUserId,omitempty"`
	// The ID of the cloud desktop.
	//
	// example:
	//
	// ecd-96vi03f9emqnl****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The name of the cloud desktop.
	//
	// example:
	//
	// TestDesktop
	ResourceName *string `json:"ResourceName,omitempty" xml:"ResourceName,omitempty"`
}

func (s ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) GoString() string {
	return s.String()
}

func (s *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) SetCoId(v string) *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels {
	s.CoId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) SetCoordinateStatus(v string) *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels {
	s.CoordinateStatus = &v
	return s
}

func (s *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) SetCoordinateTicket(v string) *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels {
	s.CoordinateTicket = &v
	return s
}

func (s *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) SetInitiatorType(v string) *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels {
	s.InitiatorType = &v
	return s
}

func (s *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) SetOwnerUserId(v string) *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels {
	s.OwnerUserId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) SetResourceId(v string) *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels {
	s.ResourceId = &v
	return s
}

func (s *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels) SetResourceName(v string) *ApplyCoordinationForMonitoringResponseBodyCoordinateFlowModels {
	s.ResourceName = &v
	return s
}

type ApplyCoordinationForMonitoringResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyCoordinationForMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyCoordinationForMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyCoordinationForMonitoringResponse) GoString() string {
	return s.String()
}

func (s *ApplyCoordinationForMonitoringResponse) SetHeaders(v map[string]*string) *ApplyCoordinationForMonitoringResponse {
	s.Headers = v
	return s
}

func (s *ApplyCoordinationForMonitoringResponse) SetStatusCode(v int32) *ApplyCoordinationForMonitoringResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyCoordinationForMonitoringResponse) SetBody(v *ApplyCoordinationForMonitoringResponseBody) *ApplyCoordinationForMonitoringResponse {
	s.Body = v
	return s
}

type ApproveFotaUpdateRequest struct {
	// Mirror version.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0.0.1-D-20220513.143129
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-138dsptkrt00u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ApproveFotaUpdateRequest) String() string {
	return tea.Prettify(s)
}

func (s ApproveFotaUpdateRequest) GoString() string {
	return s.String()
}

func (s *ApproveFotaUpdateRequest) SetAppVersion(v string) *ApproveFotaUpdateRequest {
	s.AppVersion = &v
	return s
}

func (s *ApproveFotaUpdateRequest) SetDesktopId(v string) *ApproveFotaUpdateRequest {
	s.DesktopId = &v
	return s
}

func (s *ApproveFotaUpdateRequest) SetRegionId(v string) *ApproveFotaUpdateRequest {
	s.RegionId = &v
	return s
}

type ApproveFotaUpdateResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ApproveFotaUpdateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApproveFotaUpdateResponseBody) GoString() string {
	return s.String()
}

func (s *ApproveFotaUpdateResponseBody) SetRequestId(v string) *ApproveFotaUpdateResponseBody {
	s.RequestId = &v
	return s
}

type ApproveFotaUpdateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApproveFotaUpdateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApproveFotaUpdateResponse) String() string {
	return tea.Prettify(s)
}

func (s ApproveFotaUpdateResponse) GoString() string {
	return s.String()
}

func (s *ApproveFotaUpdateResponse) SetHeaders(v map[string]*string) *ApproveFotaUpdateResponse {
	s.Headers = v
	return s
}

func (s *ApproveFotaUpdateResponse) SetStatusCode(v int32) *ApproveFotaUpdateResponse {
	s.StatusCode = &v
	return s
}

func (s *ApproveFotaUpdateResponse) SetBody(v *ApproveFotaUpdateResponseBody) *ApproveFotaUpdateResponse {
	s.Body = v
	return s
}

type AssociateNetworkPackageRequest struct {
	// The ID of the premium bandwidth plan.
	//
	// This parameter is required.
	//
	// example:
	//
	// np-e0iodl3yzb62q****
	NetworkPackageId *string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty"`
	// The ID of the office network. You can call the [DescribeNetworkPackages](https://help.aliyun.com/document_detail/216079.html) to obtain the ID of the office network to which a premium bandwidth plan is bound.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-*********
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s AssociateNetworkPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s AssociateNetworkPackageRequest) GoString() string {
	return s.String()
}

func (s *AssociateNetworkPackageRequest) SetNetworkPackageId(v string) *AssociateNetworkPackageRequest {
	s.NetworkPackageId = &v
	return s
}

func (s *AssociateNetworkPackageRequest) SetOfficeSiteId(v string) *AssociateNetworkPackageRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *AssociateNetworkPackageRequest) SetRegionId(v string) *AssociateNetworkPackageRequest {
	s.RegionId = &v
	return s
}

type AssociateNetworkPackageResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AssociateNetworkPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AssociateNetworkPackageResponseBody) GoString() string {
	return s.String()
}

func (s *AssociateNetworkPackageResponseBody) SetRequestId(v string) *AssociateNetworkPackageResponseBody {
	s.RequestId = &v
	return s
}

type AssociateNetworkPackageResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AssociateNetworkPackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AssociateNetworkPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s AssociateNetworkPackageResponse) GoString() string {
	return s.String()
}

func (s *AssociateNetworkPackageResponse) SetHeaders(v map[string]*string) *AssociateNetworkPackageResponse {
	s.Headers = v
	return s
}

func (s *AssociateNetworkPackageResponse) SetStatusCode(v int32) *AssociateNetworkPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *AssociateNetworkPackageResponse) SetBody(v *AssociateNetworkPackageResponseBody) *AssociateNetworkPackageResponse {
	s.Body = v
	return s
}

type AttachCenRequest struct {
	// The ID of the CEN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cen-3gwy16dojz1m65****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// The Alibaba Cloud account to which the CEN instance belongs.
	//
	// 	- If you own the CEN instance, you can skip this parameter.
	//
	// 	- If you do not own the CEN instance, you must specify the ID of the account that owns the CEN instance.
	//
	// example:
	//
	// 102681951715****
	CenOwnerId *int64 `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty"`
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The verification code. If you do not own the CEN instance, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain a verification code.
	//
	// example:
	//
	// 12****
	VerifyCode *string `json:"VerifyCode,omitempty" xml:"VerifyCode,omitempty"`
}

func (s AttachCenRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachCenRequest) GoString() string {
	return s.String()
}

func (s *AttachCenRequest) SetCenId(v string) *AttachCenRequest {
	s.CenId = &v
	return s
}

func (s *AttachCenRequest) SetCenOwnerId(v int64) *AttachCenRequest {
	s.CenOwnerId = &v
	return s
}

func (s *AttachCenRequest) SetOfficeSiteId(v string) *AttachCenRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *AttachCenRequest) SetRegionId(v string) *AttachCenRequest {
	s.RegionId = &v
	return s
}

func (s *AttachCenRequest) SetVerifyCode(v string) *AttachCenRequest {
	s.VerifyCode = &v
	return s
}

type AttachCenResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachCenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachCenResponseBody) GoString() string {
	return s.String()
}

func (s *AttachCenResponseBody) SetRequestId(v string) *AttachCenResponseBody {
	s.RequestId = &v
	return s
}

type AttachCenResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachCenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachCenResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachCenResponse) GoString() string {
	return s.String()
}

func (s *AttachCenResponse) SetHeaders(v map[string]*string) *AttachCenResponse {
	s.Headers = v
	return s
}

func (s *AttachCenResponse) SetStatusCode(v int32) *AttachCenResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachCenResponse) SetBody(v *AttachCenResponseBody) *AttachCenResponse {
	s.Body = v
	return s
}

type AttachEndUserRequest struct {
	// The address of the Active Directory (AD) office network.
	//
	// example:
	//
	// xn--0zw****
	AdDomain *string `json:"AdDomain,omitempty" xml:"AdDomain,omitempty"`
	// The type of the client.
	//
	// Valid values:
	//
	// 	- 1: hardware client.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ClientType *int32 `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The serial number (SN) of the hardware client.
	//
	// This parameter is required.
	//
	// example:
	//
	// 111810122200F0C24CF7F1BF-*05AY****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// The ID of the convenient office network.
	//
	// example:
	//
	// cn-hangzhou+dir-jedbpr4sl9l37****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The ID of the user that you want to bind to the hardware client.
	//
	// This parameter is required.
	//
	// example:
	//
	// moli
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The account type of the user.
	//
	// Valid values:
	//
	// 	- AD: enterprise AD account.
	//
	// 	- SIMPLE: convenience account
	//
	// example:
	//
	// SIMPLE
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s AttachEndUserRequest) String() string {
	return tea.Prettify(s)
}

func (s AttachEndUserRequest) GoString() string {
	return s.String()
}

func (s *AttachEndUserRequest) SetAdDomain(v string) *AttachEndUserRequest {
	s.AdDomain = &v
	return s
}

func (s *AttachEndUserRequest) SetClientType(v int32) *AttachEndUserRequest {
	s.ClientType = &v
	return s
}

func (s *AttachEndUserRequest) SetDeviceId(v string) *AttachEndUserRequest {
	s.DeviceId = &v
	return s
}

func (s *AttachEndUserRequest) SetDirectoryId(v string) *AttachEndUserRequest {
	s.DirectoryId = &v
	return s
}

func (s *AttachEndUserRequest) SetEndUserId(v string) *AttachEndUserRequest {
	s.EndUserId = &v
	return s
}

func (s *AttachEndUserRequest) SetRegionId(v string) *AttachEndUserRequest {
	s.RegionId = &v
	return s
}

func (s *AttachEndUserRequest) SetUserType(v string) *AttachEndUserRequest {
	s.UserType = &v
	return s
}

type AttachEndUserResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AttachEndUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AttachEndUserResponseBody) GoString() string {
	return s.String()
}

func (s *AttachEndUserResponseBody) SetRequestId(v string) *AttachEndUserResponseBody {
	s.RequestId = &v
	return s
}

type AttachEndUserResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AttachEndUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AttachEndUserResponse) String() string {
	return tea.Prettify(s)
}

func (s AttachEndUserResponse) GoString() string {
	return s.String()
}

func (s *AttachEndUserResponse) SetHeaders(v map[string]*string) *AttachEndUserResponse {
	s.Headers = v
	return s
}

func (s *AttachEndUserResponse) SetStatusCode(v int32) *AttachEndUserResponse {
	s.StatusCode = &v
	return s
}

func (s *AttachEndUserResponse) SetBody(v *AttachEndUserResponseBody) *AttachEndUserResponse {
	s.Body = v
	return s
}

type CancelAutoSnapshotPolicyRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 50 IDs. The IDs cannot be an empty string. The IDs can be up to 64 characters in length and cannot contain `http://` or `https://`. The IDs cannot start with `acs:` or `aliyun`.
	//
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the automatic snapshot policy.
	//
	// example:
	//
	// sp-78lhzpe7kjfnd****
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CancelAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyRequest) SetDesktopId(v []*string) *CancelAutoSnapshotPolicyRequest {
	s.DesktopId = v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetPolicyId(v string) *CancelAutoSnapshotPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *CancelAutoSnapshotPolicyRequest) SetRegionId(v string) *CancelAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

type CancelAutoSnapshotPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 51592A88-0F2C-55E6-AD2C-2AD9C10D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyResponseBody) SetRequestId(v string) *CancelAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type CancelAutoSnapshotPolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *CancelAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *CancelAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *CancelAutoSnapshotPolicyResponse) SetStatusCode(v int32) *CancelAutoSnapshotPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelAutoSnapshotPolicyResponse) SetBody(v *CancelAutoSnapshotPolicyResponseBody) *CancelAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type CancelCdsFileShareLinkRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-352282****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The ID of the file sharing task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7JQX1Fsw****
	ShareId *string `json:"ShareId,omitempty" xml:"ShareId,omitempty"`
}

func (s CancelCdsFileShareLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelCdsFileShareLinkRequest) GoString() string {
	return s.String()
}

func (s *CancelCdsFileShareLinkRequest) SetCdsId(v string) *CancelCdsFileShareLinkRequest {
	s.CdsId = &v
	return s
}

func (s *CancelCdsFileShareLinkRequest) SetShareId(v string) *CancelCdsFileShareLinkRequest {
	s.ShareId = &v
	return s
}

type CancelCdsFileShareLinkResponseBody struct {
	// The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data information.
	//
	// example:
	//
	// true
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message that is returned if the request failed. This parameter is not returned if the value of Code is `success`.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the call was successful.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CancelCdsFileShareLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelCdsFileShareLinkResponseBody) GoString() string {
	return s.String()
}

func (s *CancelCdsFileShareLinkResponseBody) SetCode(v string) *CancelCdsFileShareLinkResponseBody {
	s.Code = &v
	return s
}

func (s *CancelCdsFileShareLinkResponseBody) SetData(v bool) *CancelCdsFileShareLinkResponseBody {
	s.Data = &v
	return s
}

func (s *CancelCdsFileShareLinkResponseBody) SetMessage(v string) *CancelCdsFileShareLinkResponseBody {
	s.Message = &v
	return s
}

func (s *CancelCdsFileShareLinkResponseBody) SetRequestId(v string) *CancelCdsFileShareLinkResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelCdsFileShareLinkResponseBody) SetSuccess(v bool) *CancelCdsFileShareLinkResponseBody {
	s.Success = &v
	return s
}

type CancelCdsFileShareLinkResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelCdsFileShareLinkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelCdsFileShareLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelCdsFileShareLinkResponse) GoString() string {
	return s.String()
}

func (s *CancelCdsFileShareLinkResponse) SetHeaders(v map[string]*string) *CancelCdsFileShareLinkResponse {
	s.Headers = v
	return s
}

func (s *CancelCdsFileShareLinkResponse) SetStatusCode(v int32) *CancelCdsFileShareLinkResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelCdsFileShareLinkResponse) SetBody(v *CancelCdsFileShareLinkResponseBody) *CancelCdsFileShareLinkResponse {
	s.Body = v
	return s
}

type CancelCoordinationForMonitoringRequest struct {
	// The IDs of stream collaboration tasks.
	//
	// This parameter is required.
	CoIds []*string `json:"CoIds,omitempty" xml:"CoIds,omitempty" type:"Repeated"`
	// The ID of the end user that initiates stream collaboration. If the initiator is the administrator, skip this parameter.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the user.
	//
	// Valid value:
	//
	// 	- TENANT_ADMIN: administrator.
	//
	// example:
	//
	// TENANT_ADMIN
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s CancelCoordinationForMonitoringRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelCoordinationForMonitoringRequest) GoString() string {
	return s.String()
}

func (s *CancelCoordinationForMonitoringRequest) SetCoIds(v []*string) *CancelCoordinationForMonitoringRequest {
	s.CoIds = v
	return s
}

func (s *CancelCoordinationForMonitoringRequest) SetEndUserId(v string) *CancelCoordinationForMonitoringRequest {
	s.EndUserId = &v
	return s
}

func (s *CancelCoordinationForMonitoringRequest) SetRegionId(v string) *CancelCoordinationForMonitoringRequest {
	s.RegionId = &v
	return s
}

func (s *CancelCoordinationForMonitoringRequest) SetUserType(v string) *CancelCoordinationForMonitoringRequest {
	s.UserType = &v
	return s
}

type CancelCoordinationForMonitoringResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelCoordinationForMonitoringResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelCoordinationForMonitoringResponseBody) GoString() string {
	return s.String()
}

func (s *CancelCoordinationForMonitoringResponseBody) SetRequestId(v string) *CancelCoordinationForMonitoringResponseBody {
	s.RequestId = &v
	return s
}

type CancelCoordinationForMonitoringResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelCoordinationForMonitoringResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelCoordinationForMonitoringResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelCoordinationForMonitoringResponse) GoString() string {
	return s.String()
}

func (s *CancelCoordinationForMonitoringResponse) SetHeaders(v map[string]*string) *CancelCoordinationForMonitoringResponse {
	s.Headers = v
	return s
}

func (s *CancelCoordinationForMonitoringResponse) SetStatusCode(v int32) *CancelCoordinationForMonitoringResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelCoordinationForMonitoringResponse) SetBody(v *CancelCoordinationForMonitoringResponseBody) *CancelCoordinationForMonitoringResponse {
	s.Body = v
	return s
}

type CancelCopyImageRequest struct {
	// The ID of the new image in the destination region.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-gx2x1dhsmusr2****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the region to which the image is copied.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CancelCopyImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageRequest) GoString() string {
	return s.String()
}

func (s *CancelCopyImageRequest) SetImageId(v string) *CancelCopyImageRequest {
	s.ImageId = &v
	return s
}

func (s *CancelCopyImageRequest) SetRegionId(v string) *CancelCopyImageRequest {
	s.RegionId = &v
	return s
}

type CancelCopyImageResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5BEFE642-A383-4A18-8939-FB7DE452****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelCopyImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageResponseBody) GoString() string {
	return s.String()
}

func (s *CancelCopyImageResponseBody) SetRequestId(v string) *CancelCopyImageResponseBody {
	s.RequestId = &v
	return s
}

type CancelCopyImageResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelCopyImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelCopyImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelCopyImageResponse) GoString() string {
	return s.String()
}

func (s *CancelCopyImageResponse) SetHeaders(v map[string]*string) *CancelCopyImageResponse {
	s.Headers = v
	return s
}

func (s *CancelCopyImageResponse) SetStatusCode(v int32) *CancelCopyImageResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelCopyImageResponse) SetBody(v *CancelCopyImageResponseBody) *CancelCopyImageResponse {
	s.Body = v
	return s
}

type ClonePolicyGroupRequest struct {
	// The name of the policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// testPolicyGroupName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The ID of the policy that you want to clone.
	//
	// This parameter is required.
	//
	// example:
	//
	// pg-gx2x1dhsmthe9****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ClonePolicyGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ClonePolicyGroupRequest) GoString() string {
	return s.String()
}

func (s *ClonePolicyGroupRequest) SetName(v string) *ClonePolicyGroupRequest {
	s.Name = &v
	return s
}

func (s *ClonePolicyGroupRequest) SetPolicyGroupId(v string) *ClonePolicyGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ClonePolicyGroupRequest) SetRegionId(v string) *ClonePolicyGroupRequest {
	s.RegionId = &v
	return s
}

type ClonePolicyGroupResponseBody struct {
	// The ID of the new policy.
	//
	// example:
	//
	// pg-7jcaznnx6go6n****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ClonePolicyGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClonePolicyGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ClonePolicyGroupResponseBody) SetPolicyGroupId(v string) *ClonePolicyGroupResponseBody {
	s.PolicyGroupId = &v
	return s
}

func (s *ClonePolicyGroupResponseBody) SetRequestId(v string) *ClonePolicyGroupResponseBody {
	s.RequestId = &v
	return s
}

type ClonePolicyGroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ClonePolicyGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ClonePolicyGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ClonePolicyGroupResponse) GoString() string {
	return s.String()
}

func (s *ClonePolicyGroupResponse) SetHeaders(v map[string]*string) *ClonePolicyGroupResponse {
	s.Headers = v
	return s
}

func (s *ClonePolicyGroupResponse) SetStatusCode(v int32) *ClonePolicyGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ClonePolicyGroupResponse) SetBody(v *ClonePolicyGroupResponseBody) *ClonePolicyGroupResponse {
	s.Body = v
	return s
}

type CompleteCdsFileRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai+cds-465878****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The name of the end user.
	//
	// example:
	//
	// test0
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The file ID. An ID is the unique identifier of a file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 635a316c94f40f35f5354da29b2aee88c9d1****
	FileId  *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The region ID. You can call the DescribeRegions operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the file uploading task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6C48B55A1FAC4E1A9E0579059514****
	UploadId *string `json:"UploadId,omitempty" xml:"UploadId,omitempty"`
}

func (s CompleteCdsFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CompleteCdsFileRequest) GoString() string {
	return s.String()
}

func (s *CompleteCdsFileRequest) SetCdsId(v string) *CompleteCdsFileRequest {
	s.CdsId = &v
	return s
}

func (s *CompleteCdsFileRequest) SetEndUserId(v string) *CompleteCdsFileRequest {
	s.EndUserId = &v
	return s
}

func (s *CompleteCdsFileRequest) SetFileId(v string) *CompleteCdsFileRequest {
	s.FileId = &v
	return s
}

func (s *CompleteCdsFileRequest) SetGroupId(v string) *CompleteCdsFileRequest {
	s.GroupId = &v
	return s
}

func (s *CompleteCdsFileRequest) SetRegionId(v string) *CompleteCdsFileRequest {
	s.RegionId = &v
	return s
}

func (s *CompleteCdsFileRequest) SetUploadId(v string) *CompleteCdsFileRequest {
	s.UploadId = &v
	return s
}

type CompleteCdsFileResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 05C2791F-41A7-5E7C-B5E4-1401FD0E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CompleteCdsFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CompleteCdsFileResponseBody) GoString() string {
	return s.String()
}

func (s *CompleteCdsFileResponseBody) SetRequestId(v string) *CompleteCdsFileResponseBody {
	s.RequestId = &v
	return s
}

type CompleteCdsFileResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CompleteCdsFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CompleteCdsFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CompleteCdsFileResponse) GoString() string {
	return s.String()
}

func (s *CompleteCdsFileResponse) SetHeaders(v map[string]*string) *CompleteCdsFileResponse {
	s.Headers = v
	return s
}

func (s *CompleteCdsFileResponse) SetStatusCode(v int32) *CompleteCdsFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CompleteCdsFileResponse) SetBody(v *CompleteCdsFileResponseBody) *CompleteCdsFileResponse {
	s.Body = v
	return s
}

type ConfigADConnectorTrustRequest struct {
	// The ID of the enterprise AD office network.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-778418****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// Specifies whether to configure a trust password for the Remote Desktop Services (RDS) License Domain of the enterprise AD office network.
	//
	// Valid values:
	//
	// 	- true: configures a trust password for the RDS License Domain of the AD office network.
	//
	// 	- false: configures a trust password for a regular enterprise AD office network.
	//
	// example:
	//
	// true
	RdsLicenseDomain *bool `json:"RdsLicenseDomain,omitempty" xml:"RdsLicenseDomain,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The trust password. You can specify the password when you configure a trust relationship between the AD domain and the ecd.acs domain.
	//
	// This parameter is required.
	//
	// example:
	//
	// password123***
	TrustKey *string `json:"TrustKey,omitempty" xml:"TrustKey,omitempty"`
}

func (s ConfigADConnectorTrustRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigADConnectorTrustRequest) GoString() string {
	return s.String()
}

func (s *ConfigADConnectorTrustRequest) SetOfficeSiteId(v string) *ConfigADConnectorTrustRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ConfigADConnectorTrustRequest) SetRdsLicenseDomain(v bool) *ConfigADConnectorTrustRequest {
	s.RdsLicenseDomain = &v
	return s
}

func (s *ConfigADConnectorTrustRequest) SetRegionId(v string) *ConfigADConnectorTrustRequest {
	s.RegionId = &v
	return s
}

func (s *ConfigADConnectorTrustRequest) SetTrustKey(v string) *ConfigADConnectorTrustRequest {
	s.TrustKey = &v
	return s
}

type ConfigADConnectorTrustResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfigADConnectorTrustResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigADConnectorTrustResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigADConnectorTrustResponseBody) SetRequestId(v string) *ConfigADConnectorTrustResponseBody {
	s.RequestId = &v
	return s
}

type ConfigADConnectorTrustResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfigADConnectorTrustResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfigADConnectorTrustResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigADConnectorTrustResponse) GoString() string {
	return s.String()
}

func (s *ConfigADConnectorTrustResponse) SetHeaders(v map[string]*string) *ConfigADConnectorTrustResponse {
	s.Headers = v
	return s
}

func (s *ConfigADConnectorTrustResponse) SetStatusCode(v int32) *ConfigADConnectorTrustResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigADConnectorTrustResponse) SetBody(v *ConfigADConnectorTrustResponseBody) *ConfigADConnectorTrustResponse {
	s.Body = v
	return s
}

type ConfigADConnectorUserRequest struct {
	// The password of the AD user that has the permissions to join computers to domains.
	//
	// This parameter is required.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the AD user that has the permissions to join computers to domains.
	//
	// After the username is configured, the cloud desktops in the same AD workspace are joined to the specified OU.
	//
	// This parameter is required.
	//
	// example:
	//
	// Administrator
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// The name of the OU in the AD domain. You can call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) to obtain the OU name.
	//
	// example:
	//
	// example.com/Domain Controllers
	OUName *string `json:"OUName,omitempty" xml:"OUName,omitempty"`
	// The ID of the AD workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-778418****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ConfigADConnectorUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfigADConnectorUserRequest) GoString() string {
	return s.String()
}

func (s *ConfigADConnectorUserRequest) SetDomainPassword(v string) *ConfigADConnectorUserRequest {
	s.DomainPassword = &v
	return s
}

func (s *ConfigADConnectorUserRequest) SetDomainUserName(v string) *ConfigADConnectorUserRequest {
	s.DomainUserName = &v
	return s
}

func (s *ConfigADConnectorUserRequest) SetOUName(v string) *ConfigADConnectorUserRequest {
	s.OUName = &v
	return s
}

func (s *ConfigADConnectorUserRequest) SetOfficeSiteId(v string) *ConfigADConnectorUserRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ConfigADConnectorUserRequest) SetRegionId(v string) *ConfigADConnectorUserRequest {
	s.RegionId = &v
	return s
}

type ConfigADConnectorUserResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ConfigADConnectorUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfigADConnectorUserResponseBody) GoString() string {
	return s.String()
}

func (s *ConfigADConnectorUserResponseBody) SetRequestId(v string) *ConfigADConnectorUserResponseBody {
	s.RequestId = &v
	return s
}

type ConfigADConnectorUserResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfigADConnectorUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfigADConnectorUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfigADConnectorUserResponse) GoString() string {
	return s.String()
}

func (s *ConfigADConnectorUserResponse) SetHeaders(v map[string]*string) *ConfigADConnectorUserResponse {
	s.Headers = v
	return s
}

func (s *ConfigADConnectorUserResponse) SetStatusCode(v int32) *ConfigADConnectorUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfigADConnectorUserResponse) SetBody(v *ConfigADConnectorUserResponseBody) *ConfigADConnectorUserResponse {
	s.Body = v
	return s
}

type CopyCdsFileRequest struct {
	// Specifies whether to automatically rename the file if a file that has the same name exists in the folder to which you want to copy the file. Default value: false.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	AutoRename *bool `json:"AutoRename,omitempty" xml:"AutoRename,omitempty"`
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-352282****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The user ID that you want to use to access the cloud disk.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The file ID. You can call the CreateCdsFile operation to query the file ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 640985a0ca2f71f489d2497682ca0bf468de****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// 目标复制文件所在的个人空间ID（即UserId，您可以在DescribeCloudDriveUsers接口返回的报文中获取。）或者目标复制文件所在的团队空间ID（即GroupId，您可以在DescribeCloudDriveGroups接口返回的报文中获取。）
	//
	// > FileReceiverId和FileReceiverType都为空时，默认复制到文件所在的个人空间。
	//
	// >
	//
	// example:
	//
	// user02
	FileReceiverId *string `json:"FileReceiverId,omitempty" xml:"FileReceiverId,omitempty"`
	// 文件所属的空间类型。
	//
	// example:
	//
	// user
	FileReceiverType *string `json:"FileReceiverType,omitempty" xml:"FileReceiverType,omitempty"`
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the parent folder of the folder to which you want to copy the file. If you want to copy the file to the root directory, set this parameter to root.
	//
	// This parameter is required.
	//
	// example:
	//
	// root
	ParentFolderId *string `json:"ParentFolderId,omitempty" xml:"ParentFolderId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CopyCdsFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyCdsFileRequest) GoString() string {
	return s.String()
}

func (s *CopyCdsFileRequest) SetAutoRename(v bool) *CopyCdsFileRequest {
	s.AutoRename = &v
	return s
}

func (s *CopyCdsFileRequest) SetCdsId(v string) *CopyCdsFileRequest {
	s.CdsId = &v
	return s
}

func (s *CopyCdsFileRequest) SetEndUserId(v string) *CopyCdsFileRequest {
	s.EndUserId = &v
	return s
}

func (s *CopyCdsFileRequest) SetFileId(v string) *CopyCdsFileRequest {
	s.FileId = &v
	return s
}

func (s *CopyCdsFileRequest) SetFileReceiverId(v string) *CopyCdsFileRequest {
	s.FileReceiverId = &v
	return s
}

func (s *CopyCdsFileRequest) SetFileReceiverType(v string) *CopyCdsFileRequest {
	s.FileReceiverType = &v
	return s
}

func (s *CopyCdsFileRequest) SetGroupId(v string) *CopyCdsFileRequest {
	s.GroupId = &v
	return s
}

func (s *CopyCdsFileRequest) SetParentFolderId(v string) *CopyCdsFileRequest {
	s.ParentFolderId = &v
	return s
}

func (s *CopyCdsFileRequest) SetRegionId(v string) *CopyCdsFileRequest {
	s.RegionId = &v
	return s
}

type CopyCdsFileResponseBody struct {
	// The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details about the file copying.
	CopyCdsFileModel *CopyCdsFileResponseBodyCopyCdsFileModel `json:"CopyCdsFileModel,omitempty" xml:"CopyCdsFileModel,omitempty" type:"Struct"`
	// The error message that is returned. This parameter is not returned if the value of Code is success.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 93AD30C1-16B8-5C54-AD23-A51FF53F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CopyCdsFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyCdsFileResponseBody) GoString() string {
	return s.String()
}

func (s *CopyCdsFileResponseBody) SetCode(v string) *CopyCdsFileResponseBody {
	s.Code = &v
	return s
}

func (s *CopyCdsFileResponseBody) SetCopyCdsFileModel(v *CopyCdsFileResponseBodyCopyCdsFileModel) *CopyCdsFileResponseBody {
	s.CopyCdsFileModel = v
	return s
}

func (s *CopyCdsFileResponseBody) SetMessage(v string) *CopyCdsFileResponseBody {
	s.Message = &v
	return s
}

func (s *CopyCdsFileResponseBody) SetRequestId(v string) *CopyCdsFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *CopyCdsFileResponseBody) SetSuccess(v string) *CopyCdsFileResponseBody {
	s.Success = &v
	return s
}

type CopyCdsFileResponseBodyCopyCdsFileModel struct {
	// The ID of the asynchronous task. This parameter is not returned if you copy a file. This parameter is returned if you copy a folder in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.
	//
	// example:
	//
	// 4221bf6e6ab43a255edc4463bffa6f5f5d31****
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// The ID of the copied file or folder.
	//
	// example:
	//
	// 6400727cb878821bcb414615a609b4072463****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s CopyCdsFileResponseBodyCopyCdsFileModel) String() string {
	return tea.Prettify(s)
}

func (s CopyCdsFileResponseBodyCopyCdsFileModel) GoString() string {
	return s.String()
}

func (s *CopyCdsFileResponseBodyCopyCdsFileModel) SetAsyncTaskId(v string) *CopyCdsFileResponseBodyCopyCdsFileModel {
	s.AsyncTaskId = &v
	return s
}

func (s *CopyCdsFileResponseBodyCopyCdsFileModel) SetFileId(v string) *CopyCdsFileResponseBodyCopyCdsFileModel {
	s.FileId = &v
	return s
}

type CopyCdsFileResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CopyCdsFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CopyCdsFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyCdsFileResponse) GoString() string {
	return s.String()
}

func (s *CopyCdsFileResponse) SetHeaders(v map[string]*string) *CopyCdsFileResponse {
	s.Headers = v
	return s
}

func (s *CopyCdsFileResponse) SetStatusCode(v int32) *CopyCdsFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CopyCdsFileResponse) SetBody(v *CopyCdsFileResponseBody) *CopyCdsFileResponse {
	s.Body = v
	return s
}

type CopyImageRequest struct {
	// The description of the new image in the destination region. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// This is a test.
	DestinationDescription *string `json:"DestinationDescription,omitempty" xml:"DestinationDescription,omitempty"`
	// The name of the new image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// Office_Shanghai
	DestinationImageName *string `json:"DestinationImageName,omitempty" xml:"DestinationImageName,omitempty"`
	// The ID of the destination region. The ID must be different from the current region ID of the image. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen
	DestinationRegionId *string `json:"DestinationRegionId,omitempty" xml:"DestinationRegionId,omitempty"`
	// The ID of the image that is copied to the destination region.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-gx2x1dhsmusr2****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CopyImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyImageRequest) GoString() string {
	return s.String()
}

func (s *CopyImageRequest) SetDestinationDescription(v string) *CopyImageRequest {
	s.DestinationDescription = &v
	return s
}

func (s *CopyImageRequest) SetDestinationImageName(v string) *CopyImageRequest {
	s.DestinationImageName = &v
	return s
}

func (s *CopyImageRequest) SetDestinationRegionId(v string) *CopyImageRequest {
	s.DestinationRegionId = &v
	return s
}

func (s *CopyImageRequest) SetImageId(v string) *CopyImageRequest {
	s.ImageId = &v
	return s
}

func (s *CopyImageRequest) SetRegionId(v string) *CopyImageRequest {
	s.RegionId = &v
	return s
}

type CopyImageResponseBody struct {
	// The ID of the image that is being copied.
	//
	// example:
	//
	// m-2g65ljy3ynrdq****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 28A40F12-F340-442B-A35F-46EF6A03****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CopyImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyImageResponseBody) GoString() string {
	return s.String()
}

func (s *CopyImageResponseBody) SetImageId(v string) *CopyImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *CopyImageResponseBody) SetRequestId(v string) *CopyImageResponseBody {
	s.RequestId = &v
	return s
}

type CopyImageResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CopyImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CopyImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyImageResponse) GoString() string {
	return s.String()
}

func (s *CopyImageResponse) SetHeaders(v map[string]*string) *CopyImageResponse {
	s.Headers = v
	return s
}

func (s *CopyImageResponse) SetStatusCode(v int32) *CopyImageResponse {
	s.StatusCode = &v
	return s
}

func (s *CopyImageResponse) SetBody(v *CopyImageResponseBody) *CopyImageResponse {
	s.Body = v
	return s
}

type CreateADConnectorDirectoryRequest struct {
	// The method in which the cloud computer is connected.
	//
	// Valid values:
	//
	// 	- VPC
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Internet (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Any
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Internet
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// The directory name. The name must be 2 to 255 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// testDirectoryName
	DirectoryName *string `json:"DirectoryName,omitempty" xml:"DirectoryName,omitempty"`
	// The IP address of the DNS server corresponding to the enterprise AD. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.
	//
	// This parameter is required.
	//
	// example:
	//
	// ``127.0.**.**``
	DnsAddress []*string `json:"DnsAddress,omitempty" xml:"DnsAddress,omitempty" type:"Repeated"`
	// The fully qualified domain name (FQDN) of the enterprise AD system. The value must contain the hostname and the domain name. You can register each FQDN only once.
	//
	// This parameter is required.
	//
	// example:
	//
	// corp.example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The password of the domain administrator. The password can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the domain administrator. The username can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// sAMAccountName
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     true
	//
	//     <!-- -->
	//
	//     (default)
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Specifies whether to enable Multi-Factor Authentication (MFA). After you enable MFA, all AD users in the directory must enter a dynamic verification code generated by the virtual MFA device in addition to a correct password when they log on to a cloud computer.
	//
	// >  When end users log on to a cloud computer for the first time, they must bind an MFA device.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the AD connector.
	//
	// Valid values:
	//
	// - 1 (General)
	//
	// - 2 (Advanced)
	//
	// example:
	//
	// 1
	Specification *int64 `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The DNS address of the existing AD subdomain.\\
	//
	// If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.
	//
	// example:
	//
	// ``127.0.**.**``
	SubDomainDnsAddress []*string `json:"SubDomainDnsAddress,omitempty" xml:"SubDomainDnsAddress,omitempty" type:"Repeated"`
	// The FQDN of the enterprise AD subdomain. The value must contain the hostname and the subdomain name.
	//
	// example:
	//
	// child.example.com
	SubDomainName *string `json:"SubDomainName,omitempty" xml:"SubDomainName,omitempty"`
	// Details of the vSwitch IDs. You can specify only one vSwitch ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-bp19ocz3erfx15uon****
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
}

func (s CreateADConnectorDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateADConnectorDirectoryRequest) GoString() string {
	return s.String()
}

func (s *CreateADConnectorDirectoryRequest) SetDesktopAccessType(v string) *CreateADConnectorDirectoryRequest {
	s.DesktopAccessType = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDirectoryName(v string) *CreateADConnectorDirectoryRequest {
	s.DirectoryName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDnsAddress(v []*string) *CreateADConnectorDirectoryRequest {
	s.DnsAddress = v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDomainName(v string) *CreateADConnectorDirectoryRequest {
	s.DomainName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDomainPassword(v string) *CreateADConnectorDirectoryRequest {
	s.DomainPassword = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDomainUserName(v string) *CreateADConnectorDirectoryRequest {
	s.DomainUserName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetEnableAdminAccess(v bool) *CreateADConnectorDirectoryRequest {
	s.EnableAdminAccess = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetMfaEnabled(v bool) *CreateADConnectorDirectoryRequest {
	s.MfaEnabled = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetRegionId(v string) *CreateADConnectorDirectoryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetSpecification(v int64) *CreateADConnectorDirectoryRequest {
	s.Specification = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetSubDomainDnsAddress(v []*string) *CreateADConnectorDirectoryRequest {
	s.SubDomainDnsAddress = v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetSubDomainName(v string) *CreateADConnectorDirectoryRequest {
	s.SubDomainName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetVSwitchId(v []*string) *CreateADConnectorDirectoryRequest {
	s.VSwitchId = v
	return s
}

type CreateADConnectorDirectoryResponseBody struct {
	// The details of AD connectors.
	AdConnectors []*CreateADConnectorDirectoryResponseBodyAdConnectors `json:"AdConnectors,omitempty" xml:"AdConnectors,omitempty" type:"Repeated"`
	// The ID of the AD directory.
	//
	// example:
	//
	// cn-hangzhou+dir-gx2x1dhsmu52rd****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 3FE99D5E-93A1-493F-B1CB-0ABD4D05BEFF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The AD trust password.
	//
	// example:
	//
	// 82Tg****
	TrustPassword *string `json:"TrustPassword,omitempty" xml:"TrustPassword,omitempty"`
}

func (s CreateADConnectorDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateADConnectorDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateADConnectorDirectoryResponseBody) SetAdConnectors(v []*CreateADConnectorDirectoryResponseBodyAdConnectors) *CreateADConnectorDirectoryResponseBody {
	s.AdConnectors = v
	return s
}

func (s *CreateADConnectorDirectoryResponseBody) SetDirectoryId(v string) *CreateADConnectorDirectoryResponseBody {
	s.DirectoryId = &v
	return s
}

func (s *CreateADConnectorDirectoryResponseBody) SetRequestId(v string) *CreateADConnectorDirectoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateADConnectorDirectoryResponseBody) SetTrustPassword(v string) *CreateADConnectorDirectoryResponseBody {
	s.TrustPassword = &v
	return s
}

type CreateADConnectorDirectoryResponseBodyAdConnectors struct {
	// The connection address.
	//
	// example:
	//
	// ``127.0.**.**``
	Address *string `json:"Address,omitempty" xml:"Address,omitempty"`
}

func (s CreateADConnectorDirectoryResponseBodyAdConnectors) String() string {
	return tea.Prettify(s)
}

func (s CreateADConnectorDirectoryResponseBodyAdConnectors) GoString() string {
	return s.String()
}

func (s *CreateADConnectorDirectoryResponseBodyAdConnectors) SetAddress(v string) *CreateADConnectorDirectoryResponseBodyAdConnectors {
	s.Address = &v
	return s
}

type CreateADConnectorDirectoryResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateADConnectorDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateADConnectorDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateADConnectorDirectoryResponse) GoString() string {
	return s.String()
}

func (s *CreateADConnectorDirectoryResponse) SetHeaders(v map[string]*string) *CreateADConnectorDirectoryResponse {
	s.Headers = v
	return s
}

func (s *CreateADConnectorDirectoryResponse) SetStatusCode(v int32) *CreateADConnectorDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateADConnectorDirectoryResponse) SetBody(v *CreateADConnectorDirectoryResponseBody) *CreateADConnectorDirectoryResponse {
	s.Body = v
	return s
}

type CreateADConnectorOfficeSiteRequest struct {
	// The hostname of the domain controller. The hostname must comply with the naming conventions for Windows hosts.
	//
	// example:
	//
	// beijing-ad01
	AdHostname       *string `json:"AdHostname,omitempty" xml:"AdHostname,omitempty"`
	BackupDCHostname *string `json:"BackupDCHostname,omitempty" xml:"BackupDCHostname,omitempty"`
	BackupDns        *string `json:"BackupDns,omitempty" xml:"BackupDns,omitempty"`
	// The maximum public bandwidth of the Internet access package. Valid values: 0 to 200.\\
	//
	// If you do not specify this parameter or you set this parameter to 0, Internet access is disabled.
	//
	// example:
	//
	// 1
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The ID of the CEN instance.
	//
	// example:
	//
	// cen-3gwy16dojz1m65****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// The Alibaba Cloud account that creates the Cloud Enterprise Network (CEN) instance.
	//
	// 	- If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
	//
	// 	- If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 102681951715****
	CenOwnerId *int64 `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty"`
	// The IPv4 CIDR block of the virtual private cloud (VPC) that your office network uses. The system creates a VPC for your office network based on the IPv4 CIDR block. We recommend that you set this parameter to one of the following CIDR blocks and their subnets:
	//
	// 	- `10.0.0.0/12` (subnet mask range: 12 to 24 bits)
	//
	// 	- `172.16.0.0/12` (subnet mask range: 12 to 24 bits)
	//
	// 	- `192.168.0.0/16` (subnet mask range: 16 to 24 bits)
	//
	// example:
	//
	// 47.100.XX.XX
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The method to connect to cloud computers from Alibaba Cloud Workspace clients.
	//
	// >  The VPC connection depends on Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to `VPC` or `Any`, PrivateLink is automatically activated.
	//
	// Valid values:
	//
	// - Internet: connects clients to cloud desktops only over the Internet. [Default]
	//
	// - VPC: connects clients to cloud desktops only over a VPC.
	//
	// - Any: connects clients to cloud desktops over the Internet or a VPC. You can select a connection method based on your business requirements when you connect to your cloud desktop from a client.
	//
	// example:
	//
	// Internet
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// The IP address of the DNS server of the enterprise AD system. You can specify only one IP address.
	//
	// This parameter is required.
	//
	// example:
	//
	// 192.168.XX.XX
	DnsAddress []*string `json:"DnsAddress,omitempty" xml:"DnsAddress,omitempty" type:"Repeated"`
	// The domain name of the enterprise AD system. You can register each domain name only once.
	//
	// This parameter is required.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The password of the domain administrator. The password can be up to 64 characters in length.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the domain administrator. The username can be up to 64 characters in length.
	//
	// > Specify the username by using sAMAccountName instead of userPrincipalName.
	//
	// example:
	//
	// Administrator
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     true
	//
	//     <!-- -->
	//
	//     (default)
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Specifies whether to enable Internet access.
	//
	// example:
	//
	// true
	EnableInternetAccess *bool `json:"EnableInternetAccess,omitempty" xml:"EnableInternetAccess,omitempty"`
	// Specifies whether to enable multi-factor authentication (MFA).
	//
	// example:
	//
	// false
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.\\
	//
	// This parameter is empty by default.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The protocol type.
	//
	// Valid value:
	//
	// 	- Adaptive Streaming Protocol (ASP)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The AD connector type.
	//
	// Valid values:
	//
	// 	- 1: General
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- 2: Advanced
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// 1
	Specification *int64 `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The DNS address of the enterprise AD subdomain. If you specify `SubDomainName` but do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.
	//
	// example:
	//
	// 192.168.XX.XX
	SubDomainDnsAddress []*string `json:"SubDomainDnsAddress,omitempty" xml:"SubDomainDnsAddress,omitempty" type:"Repeated"`
	// The domain name of the enterprise AD subdomain.
	//
	// example:
	//
	// child.example.com
	SubDomainName *string   `json:"SubDomainName,omitempty" xml:"SubDomainName,omitempty"`
	VSwitchId     []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
	// The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain the verification code.
	//
	// example:
	//
	// 12****
	VerifyCode *string `json:"VerifyCode,omitempty" xml:"VerifyCode,omitempty"`
}

func (s CreateADConnectorOfficeSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateADConnectorOfficeSiteRequest) GoString() string {
	return s.String()
}

func (s *CreateADConnectorOfficeSiteRequest) SetAdHostname(v string) *CreateADConnectorOfficeSiteRequest {
	s.AdHostname = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetBackupDCHostname(v string) *CreateADConnectorOfficeSiteRequest {
	s.BackupDCHostname = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetBackupDns(v string) *CreateADConnectorOfficeSiteRequest {
	s.BackupDns = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetBandwidth(v int32) *CreateADConnectorOfficeSiteRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetCenId(v string) *CreateADConnectorOfficeSiteRequest {
	s.CenId = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetCenOwnerId(v int64) *CreateADConnectorOfficeSiteRequest {
	s.CenOwnerId = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetCidrBlock(v string) *CreateADConnectorOfficeSiteRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetDesktopAccessType(v string) *CreateADConnectorOfficeSiteRequest {
	s.DesktopAccessType = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetDnsAddress(v []*string) *CreateADConnectorOfficeSiteRequest {
	s.DnsAddress = v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetDomainName(v string) *CreateADConnectorOfficeSiteRequest {
	s.DomainName = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetDomainPassword(v string) *CreateADConnectorOfficeSiteRequest {
	s.DomainPassword = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetDomainUserName(v string) *CreateADConnectorOfficeSiteRequest {
	s.DomainUserName = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetEnableAdminAccess(v bool) *CreateADConnectorOfficeSiteRequest {
	s.EnableAdminAccess = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetEnableInternetAccess(v bool) *CreateADConnectorOfficeSiteRequest {
	s.EnableInternetAccess = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetMfaEnabled(v bool) *CreateADConnectorOfficeSiteRequest {
	s.MfaEnabled = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetOfficeSiteName(v string) *CreateADConnectorOfficeSiteRequest {
	s.OfficeSiteName = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetProtocolType(v string) *CreateADConnectorOfficeSiteRequest {
	s.ProtocolType = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetRegionId(v string) *CreateADConnectorOfficeSiteRequest {
	s.RegionId = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetSpecification(v int64) *CreateADConnectorOfficeSiteRequest {
	s.Specification = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetSubDomainDnsAddress(v []*string) *CreateADConnectorOfficeSiteRequest {
	s.SubDomainDnsAddress = v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetSubDomainName(v string) *CreateADConnectorOfficeSiteRequest {
	s.SubDomainName = &v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetVSwitchId(v []*string) *CreateADConnectorOfficeSiteRequest {
	s.VSwitchId = v
	return s
}

func (s *CreateADConnectorOfficeSiteRequest) SetVerifyCode(v string) *CreateADConnectorOfficeSiteRequest {
	s.VerifyCode = &v
	return s
}

type CreateADConnectorOfficeSiteResponseBody struct {
	// The office network ID.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateADConnectorOfficeSiteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateADConnectorOfficeSiteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateADConnectorOfficeSiteResponseBody) SetOfficeSiteId(v string) *CreateADConnectorOfficeSiteResponseBody {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateADConnectorOfficeSiteResponseBody) SetRequestId(v string) *CreateADConnectorOfficeSiteResponseBody {
	s.RequestId = &v
	return s
}

type CreateADConnectorOfficeSiteResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateADConnectorOfficeSiteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateADConnectorOfficeSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateADConnectorOfficeSiteResponse) GoString() string {
	return s.String()
}

func (s *CreateADConnectorOfficeSiteResponse) SetHeaders(v map[string]*string) *CreateADConnectorOfficeSiteResponse {
	s.Headers = v
	return s
}

func (s *CreateADConnectorOfficeSiteResponse) SetStatusCode(v int32) *CreateADConnectorOfficeSiteResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateADConnectorOfficeSiteResponse) SetBody(v *CreateADConnectorOfficeSiteResponseBody) *CreateADConnectorOfficeSiteResponse {
	s.Body = v
	return s
}

type CreateAndBindNasFileSystemRequest struct {
	// The description of the NAS file system.
	//
	// example:
	//
	// newDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the desktop group.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-fh0vdzyh6rdc*****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// Specifies whether to encrypt data in the NAS file system. You can use keys that are hosted by Key Management Service (KMS) to encrypt data in a file system. When you read and write the encrypted data, the data is automatically decrypted. Valid values:
	//
	// 	- 0: does not encrypt data in the NAS file system.
	//
	// 	- 1: encrypts data in the NAS file system by using a NAS-managed key. ` If you set  `FileSystemType`  to  `standard`  or  `extreme`, you can use a NAS-managed key to encrypt data in a NAS file system.`
	//
	// 	- 2: encrypts data in the NAS file system by using a KMS-managed key. `If` you set FileSystemType`  to  `extreme`, you can use a KMS-managed key to encrypt data in a NAS file system.`
	//
	// Default value: 0.
	//
	// example:
	//
	// 0
	EncryptType *int32 `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// The list of users.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The name of the NAS file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// szy-asp-upm-test
	FileSystemName *string `json:"FileSystemName,omitempty" xml:"FileSystemName,omitempty"`
	// The ID of the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing+dir-15657*****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The storage type of the NAS file system. Valid values:
	//
	// 	- Capacity
	//
	// 	- Performance
	//
	// Default value: Capacity.
	//
	// This parameter is required.
	//
	// example:
	//
	// Capacity
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s CreateAndBindNasFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAndBindNasFileSystemRequest) GoString() string {
	return s.String()
}

func (s *CreateAndBindNasFileSystemRequest) SetDescription(v string) *CreateAndBindNasFileSystemRequest {
	s.Description = &v
	return s
}

func (s *CreateAndBindNasFileSystemRequest) SetDesktopGroupId(v string) *CreateAndBindNasFileSystemRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *CreateAndBindNasFileSystemRequest) SetEncryptType(v int32) *CreateAndBindNasFileSystemRequest {
	s.EncryptType = &v
	return s
}

func (s *CreateAndBindNasFileSystemRequest) SetEndUserIds(v []*string) *CreateAndBindNasFileSystemRequest {
	s.EndUserIds = v
	return s
}

func (s *CreateAndBindNasFileSystemRequest) SetFileSystemName(v string) *CreateAndBindNasFileSystemRequest {
	s.FileSystemName = &v
	return s
}

func (s *CreateAndBindNasFileSystemRequest) SetOfficeSiteId(v string) *CreateAndBindNasFileSystemRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateAndBindNasFileSystemRequest) SetRegionId(v string) *CreateAndBindNasFileSystemRequest {
	s.RegionId = &v
	return s
}

func (s *CreateAndBindNasFileSystemRequest) SetStorageType(v string) *CreateAndBindNasFileSystemRequest {
	s.StorageType = &v
	return s
}

type CreateAndBindNasFileSystemResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// F7E4322D-D679-5ACB-A909-490D2F0E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAndBindNasFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAndBindNasFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAndBindNasFileSystemResponseBody) SetRequestId(v string) *CreateAndBindNasFileSystemResponseBody {
	s.RequestId = &v
	return s
}

type CreateAndBindNasFileSystemResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAndBindNasFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAndBindNasFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAndBindNasFileSystemResponse) GoString() string {
	return s.String()
}

func (s *CreateAndBindNasFileSystemResponse) SetHeaders(v map[string]*string) *CreateAndBindNasFileSystemResponse {
	s.Headers = v
	return s
}

func (s *CreateAndBindNasFileSystemResponse) SetStatusCode(v int32) *CreateAndBindNasFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAndBindNasFileSystemResponse) SetBody(v *CreateAndBindNasFileSystemResponseBody) *CreateAndBindNasFileSystemResponse {
	s.Body = v
	return s
}

type CreateAutoSnapshotPolicyRequest struct {
	// The CRON expression for periodic scheduling.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0 0 2 ? 	- 1-7
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). This parameter is empty by default.
	//
	// This parameter is required.
	//
	// example:
	//
	// test_auto_policy
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.
	//
	// This parameter is required.
	//
	// example:
	//
	// 30
	RetentionDays *int32 `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
}

func (s CreateAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyRequest) SetCronExpression(v string) *CreateAutoSnapshotPolicyRequest {
	s.CronExpression = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetPolicyName(v string) *CreateAutoSnapshotPolicyRequest {
	s.PolicyName = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRegionId(v string) *CreateAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyRequest) SetRetentionDays(v int32) *CreateAutoSnapshotPolicyRequest {
	s.RetentionDays = &v
	return s
}

type CreateAutoSnapshotPolicyResponseBody struct {
	// The ID of the automatic snapshot policy.
	//
	// example:
	//
	// sp-3hpa78d0qyt99****
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 51592A88-0F2C-55E6-AD2C-2AD9C10D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyResponseBody) SetPolicyId(v string) *CreateAutoSnapshotPolicyResponseBody {
	s.PolicyId = &v
	return s
}

func (s *CreateAutoSnapshotPolicyResponseBody) SetRequestId(v string) *CreateAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type CreateAutoSnapshotPolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *CreateAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *CreateAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *CreateAutoSnapshotPolicyResponse) SetStatusCode(v int32) *CreateAutoSnapshotPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAutoSnapshotPolicyResponse) SetBody(v *CreateAutoSnapshotPolicyResponseBody) *CreateAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type CreateBundleRequest struct {
	// The name of the cloud computer template.
	//
	// example:
	//
	// testBundleName
	BundleName *string `json:"BundleName,omitempty" xml:"BundleName,omitempty"`
	// The description of the cloud computer template.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The instance type of the cloud computers. You can call the [DescribeBundles](https://help.aliyun.com/document_detail/436974.html) operation to query cloud computer templates and obtain the instance types supported by the cloud computers from the `DesktopType` response parameter.
	//
	// >  If you want the template to use a non-GPU-accelerated image, you can only select a non-GPU-accelerated instance type. If you want the template to use a GPU-accelerated image, you can only select a GPU-accelerated instance type.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd.basic.large
	DesktopType *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	// The ID of the image.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-4zfb6zj728hhr****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The OS language. This parameter is available only for system images. Valid values:
	//
	// 	- zh-CN: Simplified Chinese
	//
	// 	- zh-HK: Traditional Chinese (Hong Kong)
	//
	// 	- en-US: American English
	//
	// 	- ja-JP: Japanese
	//
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The performance level (PL) of the system disk. When the cloud computer instance type that is specified by the DesktopType parameter is set to a graphical instance type or instance type with a high clock speed, you can set the performance level of the disks. For more information about the differences among disks at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).
	//
	// Valid values:
	//
	// 	- PL1
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL0
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL3
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL2
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PL1
	RootDiskPerformanceLevel *string `json:"RootDiskPerformanceLevel,omitempty" xml:"RootDiskPerformanceLevel,omitempty"`
	// The size of the system disk. Unit: GiB. The value of this parameter must be consistent with the system disk size supported by the cloud computer instance type. For more information, see [Overview](https://help.aliyun.com/document_detail/188609.html).
	//
	// This parameter is required.
	//
	// example:
	//
	// 80
	RootDiskSizeGib *int32 `json:"RootDiskSizeGib,omitempty" xml:"RootDiskSizeGib,omitempty"`
	// The PL of the data disk. When the cloud computer instance type that is specified by the DesktopType parameter is set to a graphical instance type or instance type with a high clock speed, you can set the performance level of the disks. For more information about the differences among disks at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).
	//
	// Valid values:
	//
	// 	- PL1
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL0
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL3
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL2
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PL1
	UserDiskPerformanceLevel *string `json:"UserDiskPerformanceLevel,omitempty" xml:"UserDiskPerformanceLevel,omitempty"`
	// The data disk sizes. You can configure only one data disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// 70
	UserDiskSizeGib []*int32 `json:"UserDiskSizeGib,omitempty" xml:"UserDiskSizeGib,omitempty" type:"Repeated"`
}

func (s CreateBundleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBundleRequest) GoString() string {
	return s.String()
}

func (s *CreateBundleRequest) SetBundleName(v string) *CreateBundleRequest {
	s.BundleName = &v
	return s
}

func (s *CreateBundleRequest) SetDescription(v string) *CreateBundleRequest {
	s.Description = &v
	return s
}

func (s *CreateBundleRequest) SetDesktopType(v string) *CreateBundleRequest {
	s.DesktopType = &v
	return s
}

func (s *CreateBundleRequest) SetImageId(v string) *CreateBundleRequest {
	s.ImageId = &v
	return s
}

func (s *CreateBundleRequest) SetLanguage(v string) *CreateBundleRequest {
	s.Language = &v
	return s
}

func (s *CreateBundleRequest) SetRegionId(v string) *CreateBundleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateBundleRequest) SetRootDiskPerformanceLevel(v string) *CreateBundleRequest {
	s.RootDiskPerformanceLevel = &v
	return s
}

func (s *CreateBundleRequest) SetRootDiskSizeGib(v int32) *CreateBundleRequest {
	s.RootDiskSizeGib = &v
	return s
}

func (s *CreateBundleRequest) SetUserDiskPerformanceLevel(v string) *CreateBundleRequest {
	s.UserDiskPerformanceLevel = &v
	return s
}

func (s *CreateBundleRequest) SetUserDiskSizeGib(v []*int32) *CreateBundleRequest {
	s.UserDiskSizeGib = v
	return s
}

type CreateBundleResponseBody struct {
	// The ID of the cloud computer template.
	//
	// example:
	//
	// b-cezrnfgecbich****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateBundleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBundleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBundleResponseBody) SetBundleId(v string) *CreateBundleResponseBody {
	s.BundleId = &v
	return s
}

func (s *CreateBundleResponseBody) SetRequestId(v string) *CreateBundleResponseBody {
	s.RequestId = &v
	return s
}

type CreateBundleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBundleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBundleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBundleResponse) GoString() string {
	return s.String()
}

func (s *CreateBundleResponse) SetHeaders(v map[string]*string) *CreateBundleResponse {
	s.Headers = v
	return s
}

func (s *CreateBundleResponse) SetStatusCode(v int32) *CreateBundleResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBundleResponse) SetBody(v *CreateBundleResponseBody) *CreateBundleResponse {
	s.Body = v
	return s
}

type CreateCdsFileRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-82414*****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The policy that is used when the file that you want to upload has the same name as an existing file in the cloud disk.
	//
	// Valid values:
	//
	// 	- refuse
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     denies creating the file
	//
	//     <!-- -->
	//
	//     .
	//
	// 	- auto_rename
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     automatically renames the file
	//
	//     <!-- -->
	//
	//     .
	//
	// 	- ignore
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     allows the file to use the same name as the existing file in the cloud disk
	//
	//     <!-- -->
	//
	//     .
	//
	// 	- over_write
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     overwrites the existing file in the cloud disk
	//
	//     <!-- -->
	//
	//     .
	//
	// example:
	//
	// ignore
	ConflictPolicy *string `json:"ConflictPolicy,omitempty" xml:"ConflictPolicy,omitempty"`
	// The user ID.
	//
	// example:
	//
	// test1
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The hash value of the SHA1 algorithm that is used by the file.
	//
	// example:
	//
	// 7C4A8D09CA3762AF61E59520943DC26494F8****
	FileHash *string `json:"FileHash,omitempty" xml:"FileHash,omitempty"`
	// The file size. Unit: bytes.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2048
	FileLength *int64 `json:"FileLength,omitempty" xml:"FileLength,omitempty"`
	// The file name.
	//
	// This parameter is required.
	//
	// example:
	//
	// testFile.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The file type.
	//
	// Valid values:
	//
	// 	- file
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- folder
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	GroupId  *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the parent folder.
	//
	// This parameter is required.
	//
	// example:
	//
	// 637c9163b453b1a384874264ba79f3f9eab9****
	ParentFileId *string `json:"ParentFileId,omitempty" xml:"ParentFileId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateCdsFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCdsFileRequest) GoString() string {
	return s.String()
}

func (s *CreateCdsFileRequest) SetCdsId(v string) *CreateCdsFileRequest {
	s.CdsId = &v
	return s
}

func (s *CreateCdsFileRequest) SetConflictPolicy(v string) *CreateCdsFileRequest {
	s.ConflictPolicy = &v
	return s
}

func (s *CreateCdsFileRequest) SetEndUserId(v string) *CreateCdsFileRequest {
	s.EndUserId = &v
	return s
}

func (s *CreateCdsFileRequest) SetFileHash(v string) *CreateCdsFileRequest {
	s.FileHash = &v
	return s
}

func (s *CreateCdsFileRequest) SetFileLength(v int64) *CreateCdsFileRequest {
	s.FileLength = &v
	return s
}

func (s *CreateCdsFileRequest) SetFileName(v string) *CreateCdsFileRequest {
	s.FileName = &v
	return s
}

func (s *CreateCdsFileRequest) SetFileType(v string) *CreateCdsFileRequest {
	s.FileType = &v
	return s
}

func (s *CreateCdsFileRequest) SetGroupId(v string) *CreateCdsFileRequest {
	s.GroupId = &v
	return s
}

func (s *CreateCdsFileRequest) SetParentFileId(v string) *CreateCdsFileRequest {
	s.ParentFileId = &v
	return s
}

func (s *CreateCdsFileRequest) SetRegionId(v string) *CreateCdsFileRequest {
	s.RegionId = &v
	return s
}

type CreateCdsFileResponseBody struct {
	FileModel *CreateCdsFileResponseBodyFileModel `json:"FileModel,omitempty" xml:"FileModel,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 2BAFE05D-FFB9-5938-96D0-08017DB9****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCdsFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCdsFileResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCdsFileResponseBody) SetFileModel(v *CreateCdsFileResponseBodyFileModel) *CreateCdsFileResponseBody {
	s.FileModel = v
	return s
}

func (s *CreateCdsFileResponseBody) SetRequestId(v string) *CreateCdsFileResponseBody {
	s.RequestId = &v
	return s
}

type CreateCdsFileResponseBodyFileModel struct {
	FileId    *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	UploadId  *string `json:"UploadId,omitempty" xml:"UploadId,omitempty"`
	UploadUrl *string `json:"UploadUrl,omitempty" xml:"UploadUrl,omitempty"`
}

func (s CreateCdsFileResponseBodyFileModel) String() string {
	return tea.Prettify(s)
}

func (s CreateCdsFileResponseBodyFileModel) GoString() string {
	return s.String()
}

func (s *CreateCdsFileResponseBodyFileModel) SetFileId(v string) *CreateCdsFileResponseBodyFileModel {
	s.FileId = &v
	return s
}

func (s *CreateCdsFileResponseBodyFileModel) SetUploadId(v string) *CreateCdsFileResponseBodyFileModel {
	s.UploadId = &v
	return s
}

func (s *CreateCdsFileResponseBodyFileModel) SetUploadUrl(v string) *CreateCdsFileResponseBodyFileModel {
	s.UploadUrl = &v
	return s
}

type CreateCdsFileResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCdsFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCdsFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCdsFileResponse) GoString() string {
	return s.String()
}

func (s *CreateCdsFileResponse) SetHeaders(v map[string]*string) *CreateCdsFileResponse {
	s.Headers = v
	return s
}

func (s *CreateCdsFileResponse) SetStatusCode(v int32) *CreateCdsFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCdsFileResponse) SetBody(v *CreateCdsFileResponseBody) *CreateCdsFileResponse {
	s.Body = v
	return s
}

type CreateCdsFileShareLinkRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai+cds-135515****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The description of the file sharing task. The description must be 0 to 1,024 characters in length.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to prohibit the download of the files that are being shared.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     prohibits file download
	//
	//     <!-- -->
	//
	//     .
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     allows file download
	//
	//     <!-- -->
	//
	//     .
	//
	// example:
	//
	// false
	DisableDownload *bool `json:"DisableDownload,omitempty" xml:"DisableDownload,omitempty"`
	// Specifies whether to prohibit the preview of the files that are being shared.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     prohibits file preview
	//
	//     <!-- -->
	//
	//     .
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     allows file preview
	//
	//     <!-- -->
	//
	//     .
	//
	// example:
	//
	// false
	DisablePreview *bool `json:"DisablePreview,omitempty" xml:"DisablePreview,omitempty"`
	// Specifies whether to prohibit the dump of the files that are being shared.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     prohibits file dump
	//
	//     <!-- -->
	//
	//     .
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     allows file dump
	//
	//     <!-- -->
	//
	//     .
	//
	// example:
	//
	// false
	DisableSave *bool `json:"DisableSave,omitempty" xml:"DisableSave,omitempty"`
	// The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
	//
	// example:
	//
	// 100
	DownloadLimit *int64 `json:"DownloadLimit,omitempty" xml:"DownloadLimit,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.
	//
	// example:
	//
	// 2020-06-28T11:33:00.000+08:00
	Expiration *string `json:"Expiration,omitempty" xml:"Expiration,omitempty"`
	// The file IDs.
	FileIds []*string `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Repeated"`
	GroupId *string   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be previewed.
	//
	// example:
	//
	// 100
	PreviewLimit *int64 `json:"PreviewLimit,omitempty" xml:"PreviewLimit,omitempty"`
	// The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be dumped.
	//
	// example:
	//
	// 100
	SaveLimit *int64 `json:"SaveLimit,omitempty" xml:"SaveLimit,omitempty"`
	// The name of the file sharing task. If you leave this parameter empty, the file name that corresponds to the first ID in the file ID list is used. The name must be 0 to 128 characters in length.
	//
	// example:
	//
	// view.txt
	ShareName *string `json:"ShareName,omitempty" xml:"ShareName,omitempty"`
	// The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.
	//
	// example:
	//
	// 12345678
	SharePwd *string `json:"SharePwd,omitempty" xml:"SharePwd,omitempty"`
}

func (s CreateCdsFileShareLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCdsFileShareLinkRequest) GoString() string {
	return s.String()
}

func (s *CreateCdsFileShareLinkRequest) SetCdsId(v string) *CreateCdsFileShareLinkRequest {
	s.CdsId = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetDescription(v string) *CreateCdsFileShareLinkRequest {
	s.Description = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetDisableDownload(v bool) *CreateCdsFileShareLinkRequest {
	s.DisableDownload = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetDisablePreview(v bool) *CreateCdsFileShareLinkRequest {
	s.DisablePreview = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetDisableSave(v bool) *CreateCdsFileShareLinkRequest {
	s.DisableSave = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetDownloadLimit(v int64) *CreateCdsFileShareLinkRequest {
	s.DownloadLimit = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetEndUserId(v string) *CreateCdsFileShareLinkRequest {
	s.EndUserId = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetExpiration(v string) *CreateCdsFileShareLinkRequest {
	s.Expiration = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetFileIds(v []*string) *CreateCdsFileShareLinkRequest {
	s.FileIds = v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetGroupId(v string) *CreateCdsFileShareLinkRequest {
	s.GroupId = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetPreviewLimit(v int64) *CreateCdsFileShareLinkRequest {
	s.PreviewLimit = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetSaveLimit(v int64) *CreateCdsFileShareLinkRequest {
	s.SaveLimit = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetShareName(v string) *CreateCdsFileShareLinkRequest {
	s.ShareName = &v
	return s
}

func (s *CreateCdsFileShareLinkRequest) SetSharePwd(v string) *CreateCdsFileShareLinkRequest {
	s.SharePwd = &v
	return s
}

type CreateCdsFileShareLinkResponseBody struct {
	// The operation result. The value success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data information.
	Data *CdsFileShareLinkModel `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message that is returned. This parameter is not returned if the value of Code is success.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 51592A88-0F2C-55E6-AD2C-2AD9C10D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCdsFileShareLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCdsFileShareLinkResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCdsFileShareLinkResponseBody) SetCode(v string) *CreateCdsFileShareLinkResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCdsFileShareLinkResponseBody) SetData(v *CdsFileShareLinkModel) *CreateCdsFileShareLinkResponseBody {
	s.Data = v
	return s
}

func (s *CreateCdsFileShareLinkResponseBody) SetMessage(v string) *CreateCdsFileShareLinkResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCdsFileShareLinkResponseBody) SetRequestId(v string) *CreateCdsFileShareLinkResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCdsFileShareLinkResponseBody) SetSuccess(v bool) *CreateCdsFileShareLinkResponseBody {
	s.Success = &v
	return s
}

type CreateCdsFileShareLinkResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCdsFileShareLinkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCdsFileShareLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCdsFileShareLinkResponse) GoString() string {
	return s.String()
}

func (s *CreateCdsFileShareLinkResponse) SetHeaders(v map[string]*string) *CreateCdsFileShareLinkResponse {
	s.Headers = v
	return s
}

func (s *CreateCdsFileShareLinkResponse) SetStatusCode(v int32) *CreateCdsFileShareLinkResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCdsFileShareLinkResponse) SetBody(v *CreateCdsFileShareLinkResponseBody) *CreateCdsFileShareLinkResponse {
	s.Body = v
	return s
}

type CreateCloudDriveServiceRequest struct {
	AutoPay   *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The business type.
	//
	// example:
	//
	// 3
	BizType       *int32  `json:"BizType,omitempty" xml:"BizType,omitempty"`
	CdsChargeType *string `json:"CdsChargeType,omitempty" xml:"CdsChargeType,omitempty"`
	// example:
	//
	// cen-g4ba1mkji8nj6****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// example:
	//
	// test.local
	DomainName *string   `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	EndUserId  []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 536870912000
	MaxSize *int64 `json:"MaxSize,omitempty" xml:"MaxSize,omitempty"`
	// The name of the cloud disk that you want to create in Cloud Drive Service.
	//
	// example:
	//
	// wuying-pds
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// cn-hangzhou+dir-400695****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// example:
	//
	// SIMPLE
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	Period         *int64  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit     *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The solution ID.
	//
	// example:
	//
	// co-0esnf8kb8zpfbqmvt
	SolutionId *string `json:"SolutionId,omitempty" xml:"SolutionId,omitempty"`
	UserCount  *int64  `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	// example:
	//
	// 1024000
	UserMaxSize *int64 `json:"UserMaxSize,omitempty" xml:"UserMaxSize,omitempty"`
}

func (s CreateCloudDriveServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveServiceRequest) SetAutoPay(v bool) *CreateCloudDriveServiceRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetAutoRenew(v bool) *CreateCloudDriveServiceRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetBizType(v int32) *CreateCloudDriveServiceRequest {
	s.BizType = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetCdsChargeType(v string) *CreateCloudDriveServiceRequest {
	s.CdsChargeType = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetCenId(v string) *CreateCloudDriveServiceRequest {
	s.CenId = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetDomainName(v string) *CreateCloudDriveServiceRequest {
	s.DomainName = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetEndUserId(v []*string) *CreateCloudDriveServiceRequest {
	s.EndUserId = v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetMaxSize(v int64) *CreateCloudDriveServiceRequest {
	s.MaxSize = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetName(v string) *CreateCloudDriveServiceRequest {
	s.Name = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetOfficeSiteId(v string) *CreateCloudDriveServiceRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetOfficeSiteType(v string) *CreateCloudDriveServiceRequest {
	s.OfficeSiteType = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetPeriod(v int64) *CreateCloudDriveServiceRequest {
	s.Period = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetPeriodUnit(v string) *CreateCloudDriveServiceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetRegionId(v string) *CreateCloudDriveServiceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetSolutionId(v string) *CreateCloudDriveServiceRequest {
	s.SolutionId = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetUserCount(v int64) *CreateCloudDriveServiceRequest {
	s.UserCount = &v
	return s
}

func (s *CreateCloudDriveServiceRequest) SetUserMaxSize(v int64) *CreateCloudDriveServiceRequest {
	s.UserMaxSize = &v
	return s
}

type CreateCloudDriveServiceResponseBody struct {
	// The ID of the attached cloud disk.
	//
	// example:
	//
	// cn-hangzhou+cds-7782057786
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The name of the cloud disk that is created in Cloud Drive Service.
	//
	// example:
	//
	// CDS_Windows_1126
	CdsName *string `json:"CdsName,omitempty" xml:"CdsName,omitempty"`
	// example:
	//
	// cen-638u3wxds9snyc****
	CenId               *string                                                 `json:"CenId,omitempty" xml:"CenId,omitempty"`
	ConflictCdsAndOrder *CreateCloudDriveServiceResponseBodyConflictCdsAndOrder `json:"ConflictCdsAndOrder,omitempty" xml:"ConflictCdsAndOrder,omitempty" type:"Struct"`
	// example:
	//
	// test1.local
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ErrorCode  *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The maximum capacity of each instance in Cloud Drive Service. Unit: GiB
	//
	// example:
	//
	// 213674622976
	MaxSize *string `json:"MaxSize,omitempty" xml:"MaxSize,omitempty"`
	// example:
	//
	// AD_CONNECTOR
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	OrderId        *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 062B1439-709A-580E-85DF-CE97A1560565
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCloudDriveServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveServiceResponseBody) SetCdsId(v string) *CreateCloudDriveServiceResponseBody {
	s.CdsId = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetCdsName(v string) *CreateCloudDriveServiceResponseBody {
	s.CdsName = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetCenId(v string) *CreateCloudDriveServiceResponseBody {
	s.CenId = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetConflictCdsAndOrder(v *CreateCloudDriveServiceResponseBodyConflictCdsAndOrder) *CreateCloudDriveServiceResponseBody {
	s.ConflictCdsAndOrder = v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetDomainName(v string) *CreateCloudDriveServiceResponseBody {
	s.DomainName = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetErrorCode(v string) *CreateCloudDriveServiceResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetMaxSize(v string) *CreateCloudDriveServiceResponseBody {
	s.MaxSize = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetOfficeSiteType(v string) *CreateCloudDriveServiceResponseBody {
	s.OfficeSiteType = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetOrderId(v string) *CreateCloudDriveServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBody) SetRequestId(v string) *CreateCloudDriveServiceResponseBody {
	s.RequestId = &v
	return s
}

type CreateCloudDriveServiceResponseBodyConflictCdsAndOrder struct {
	ConflictCds   []*CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds   `json:"ConflictCds,omitempty" xml:"ConflictCds,omitempty" type:"Repeated"`
	ConflictOrder []*CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder `json:"ConflictOrder,omitempty" xml:"ConflictOrder,omitempty" type:"Repeated"`
}

func (s CreateCloudDriveServiceResponseBodyConflictCdsAndOrder) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveServiceResponseBodyConflictCdsAndOrder) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveServiceResponseBodyConflictCdsAndOrder) SetConflictCds(v []*CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds) *CreateCloudDriveServiceResponseBodyConflictCdsAndOrder {
	s.ConflictCds = v
	return s
}

func (s *CreateCloudDriveServiceResponseBodyConflictCdsAndOrder) SetConflictOrder(v []*CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder) *CreateCloudDriveServiceResponseBodyConflictCdsAndOrder {
	s.ConflictOrder = v
	return s
}

type CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds struct {
	CdsId    *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds) SetCdsId(v string) *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds {
	s.CdsId = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds) SetRegionId(v string) *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictCds {
	s.RegionId = &v
	return s
}

type CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder struct {
	CdsId    *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	OrderId  *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder) SetCdsId(v string) *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder {
	s.CdsId = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder) SetOrderId(v string) *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder {
	s.OrderId = &v
	return s
}

func (s *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder) SetRegionId(v string) *CreateCloudDriveServiceResponseBodyConflictCdsAndOrderConflictOrder {
	s.RegionId = &v
	return s
}

type CreateCloudDriveServiceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCloudDriveServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCloudDriveServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveServiceResponse) SetHeaders(v map[string]*string) *CreateCloudDriveServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudDriveServiceResponse) SetStatusCode(v int32) *CreateCloudDriveServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudDriveServiceResponse) SetBody(v *CreateCloudDriveServiceResponseBody) *CreateCloudDriveServiceResponse {
	s.Body = v
	return s
}

type CreateCloudDriveUsersRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-352282****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The IDs of the end users.
	//
	// This parameter is required.
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The maximum storage space of an end user. Unit: bytes.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1024
	UserMaxSize *int64 `json:"UserMaxSize,omitempty" xml:"UserMaxSize,omitempty"`
}

func (s CreateCloudDriveUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveUsersRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveUsersRequest) SetCdsId(v string) *CreateCloudDriveUsersRequest {
	s.CdsId = &v
	return s
}

func (s *CreateCloudDriveUsersRequest) SetEndUserId(v []*string) *CreateCloudDriveUsersRequest {
	s.EndUserId = v
	return s
}

func (s *CreateCloudDriveUsersRequest) SetRegionId(v string) *CreateCloudDriveUsersRequest {
	s.RegionId = &v
	return s
}

func (s *CreateCloudDriveUsersRequest) SetUserMaxSize(v int64) *CreateCloudDriveUsersRequest {
	s.UserMaxSize = &v
	return s
}

type CreateCloudDriveUsersResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 05F0A7AE-17F1-53DF-BD99-ABF936FA****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCloudDriveUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveUsersResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveUsersResponseBody) SetRequestId(v string) *CreateCloudDriveUsersResponseBody {
	s.RequestId = &v
	return s
}

type CreateCloudDriveUsersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCloudDriveUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCloudDriveUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudDriveUsersResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudDriveUsersResponse) SetHeaders(v map[string]*string) *CreateCloudDriveUsersResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudDriveUsersResponse) SetStatusCode(v int32) *CreateCloudDriveUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudDriveUsersResponse) SetBody(v *CreateCloudDriveUsersResponseBody) *CreateCloudDriveUsersResponse {
	s.Body = v
	return s
}

type CreateDesktopGroupRequest struct {
	// The end users whom you want to add to all types of desktop groups.
	//
	// example:
	//
	// Alice
	AllClassifyUsers *bool `json:"AllClassifyUsers,omitempty" xml:"AllClassifyUsers,omitempty"`
	// Specifies whether to automatically create cloud desktops in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required.
	//
	// example:
	//
	// 1
	AllowAutoSetup *int32 `json:"AllowAutoSetup,omitempty" xml:"AllowAutoSetup,omitempty"`
	// Specifies whether to reserve cloud desktops if you set the billing method to pay-as-you-go. If you set the ChargeType parameter to PostPaid, this parameter is required. Valid values: 0: does not allow the system to reserve cloud desktops. N: allows the system to reserve N cloud desktops. The variable N must be an integer that ranges from 1 to 100.
	//
	// example:
	//
	// 1
	AllowBufferCount *int32 `json:"AllowBufferCount,omitempty" xml:"AllowBufferCount,omitempty"`
	// Specifies whether to enable automatic payment.
	//
	// example:
	//
	// true
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// Specifies whether to enable auto-renewal.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The number of sessions that are allowed per cloud desktop in a multi-session desktop group.
	//
	// example:
	//
	// 1
	BindAmount *int64 `json:"BindAmount,omitempty" xml:"BindAmount,omitempty"`
	// The ID of the desktop template.
	//
	// This parameter is required.
	//
	// example:
	//
	// b-je9hani001wfn****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The number of cloud desktops that you want to purchase. Valid values: 0 to 200.
	//
	// example:
	//
	// 3
	BuyDesktopsCount *int32 `json:"BuyDesktopsCount,omitempty" xml:"BuyDesktopsCount,omitempty"`
	// The billing method of the cloud desktops in the desktop group.
	//
	// This parameter is required.
	//
	// example:
	//
	// PrePaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The type of the desktop group.
	//
	// example:
	//
	// teacher
	Classify *string `json:"Classify,omitempty" xml:"Classify,omitempty"`
	// The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but make sure that the token is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length. For more information, see [How to ensure idempotence](https://help.aliyun.com/document_detail/25693.html).
	//
	// example:
	//
	// 123e4567-e89b-12d3-a456-426655440000
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// The remarks on the desktop group.
	//
	// example:
	//
	// test
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.
	//
	// example:
	//
	// 300000
	ConnectDuration *int64 `json:"ConnectDuration,omitempty" xml:"ConnectDuration,omitempty"`
	// The default number of cloud desktops to create when you create the desktop group. Default value: 1.
	//
	// example:
	//
	// 1
	DefaultInitDesktopCount *int32 `json:"DefaultInitDesktopCount,omitempty" xml:"DefaultInitDesktopCount,omitempty"`
	// The name of the desktop group.
	//
	// example:
	//
	// desktopGroupName1
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// The ID of the directory.
	//
	// example:
	//
	// hide
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The end users that can use the desktop group.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The File Storage NAS (NAS) file system that is used after data roaming is enabled.
	//
	// example:
	//
	// 04f314****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The desktop group version.
	//
	// example:
	//
	// 2
	GroupVersion *int32 `json:"GroupVersion,omitempty" xml:"GroupVersion,omitempty"`
	// The maximum period of time for which a session remains idle. If an end user performs no operations on a cloud desktop by using keyboards or mouses during a session, the session becomes idle. When the specified maximum period of time is reached, the session automatically disconnects. Unit: milliseconds. This parameter is required only for cloud desktops in the same desktop group.
	//
	// example:
	//
	// 300000
	IdleDisconnectDuration *int64 `json:"IdleDisconnectDuration,omitempty" xml:"IdleDisconnectDuration,omitempty"`
	// The retention period of the cloud desktop after the end user disconnects from the cloud desktop. Unit: milliseconds.
	//
	// example:
	//
	// 6000
	KeepDuration *int64 `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	// The load balancing policy of the multi-session desktop group.
	//
	// example:
	//
	// 0
	LoadPolicy *int64 `json:"LoadPolicy,omitempty" xml:"LoadPolicy,omitempty"`
	// The maximum number of cloud desktops that the desktop group can contain. Valid values: 0 to 200.
	//
	// example:
	//
	// 50
	MaxDesktopsCount *int32 `json:"MaxDesktopsCount,omitempty" xml:"MaxDesktopsCount,omitempty"`
	// The minimum number of cloud desktops that must be contained in the desktop group if you set the billing method to subscription. If you set the ChargeType parameter to PrePaid, this parameter is required. Valid values: 0 to the value of MaxDesktopsCount. Default value: 1.
	//
	// example:
	//
	// 1
	MinDesktopsCount *int32 `json:"MinDesktopsCount,omitempty" xml:"MinDesktopsCount,omitempty"`
	// The ID of the workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+os-c5cy7q578s8jc****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The type of the desktop group.
	//
	// example:
	//
	// 0
	OwnType *int32 `json:"OwnType,omitempty" xml:"OwnType,omitempty"`
	// The subscription period of the cloud desktops in the desktop group. The unit is specified by the PeriodUnit parameter. The Period parameter takes effect only if you set the ChargeType parameter to PrePaid.
	//
	// 	- Valid values if you set the PeriodUnit parameter to Month:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 6
	//
	// 	- Valid values if you set the PeriodUnit parameter to Year:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 4
	//
	//     	- 5
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The ID of the policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// pg-9c2d6t2dwflqr****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// Specifies whether to enable data roaming.
	//
	// example:
	//
	// false
	ProfileFollowSwitch *bool   `json:"ProfileFollowSwitch,omitempty" xml:"ProfileFollowSwitch,omitempty"`
	PromotionId         *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session desktop group. `Ratio of connected sessions = Number of connected sessions/(Total number of cloud desktops × Maximum number of sessions allowed for each cloud desktop) × 100%`. When the specified threshold is reached, new cloud desktops are automatically created. When the specified threshold is not reached, idle cloud desktops are released.
	//
	// example:
	//
	// 0.5
	RatioThreshold *float32 `json:"RatioThreshold,omitempty" xml:"RatioThreshold,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies which type of the disk to reset for cloud desktops in the desktop group.
	//
	// example:
	//
	// 0
	ResetType *int64 `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// The ID of the scaling policy.
	//
	// > This parameter is unavailable.
	//
	// example:
	//
	// hide
	ScaleStrategyId *string `json:"ScaleStrategyId,omitempty" xml:"ScaleStrategyId,omitempty"`
	// The period of time before the idle cloud desktop is stopped. When the specified period of time is reached, the idle cloud desktop automatically stops. If an end user connects to a stopped cloud desktop, the cloud desktop automatically starts. Unit: milliseconds.
	//
	// example:
	//
	// 300000
	StopDuration *int64 `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
	// The tags that you want to attach to the cloud computer pool. You can specify 1 to 20 tags.
	Tag []*CreateDesktopGroupRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// Specifies whether to enable disk encryption.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
	// The ID of the virtual private cloud (VPC) in which you want to create the desktop group.
	//
	// example:
	//
	// hide
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateDesktopGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDesktopGroupRequest) SetAllClassifyUsers(v bool) *CreateDesktopGroupRequest {
	s.AllClassifyUsers = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetAllowAutoSetup(v int32) *CreateDesktopGroupRequest {
	s.AllowAutoSetup = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetAllowBufferCount(v int32) *CreateDesktopGroupRequest {
	s.AllowBufferCount = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetAutoPay(v bool) *CreateDesktopGroupRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetAutoRenew(v bool) *CreateDesktopGroupRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetBindAmount(v int64) *CreateDesktopGroupRequest {
	s.BindAmount = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetBundleId(v string) *CreateDesktopGroupRequest {
	s.BundleId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetBuyDesktopsCount(v int32) *CreateDesktopGroupRequest {
	s.BuyDesktopsCount = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetChargeType(v string) *CreateDesktopGroupRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetClassify(v string) *CreateDesktopGroupRequest {
	s.Classify = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetClientToken(v string) *CreateDesktopGroupRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetComments(v string) *CreateDesktopGroupRequest {
	s.Comments = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetConnectDuration(v int64) *CreateDesktopGroupRequest {
	s.ConnectDuration = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetDefaultInitDesktopCount(v int32) *CreateDesktopGroupRequest {
	s.DefaultInitDesktopCount = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetDesktopGroupName(v string) *CreateDesktopGroupRequest {
	s.DesktopGroupName = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetDirectoryId(v string) *CreateDesktopGroupRequest {
	s.DirectoryId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetEndUserIds(v []*string) *CreateDesktopGroupRequest {
	s.EndUserIds = v
	return s
}

func (s *CreateDesktopGroupRequest) SetFileSystemId(v string) *CreateDesktopGroupRequest {
	s.FileSystemId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetGroupVersion(v int32) *CreateDesktopGroupRequest {
	s.GroupVersion = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetIdleDisconnectDuration(v int64) *CreateDesktopGroupRequest {
	s.IdleDisconnectDuration = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetKeepDuration(v int64) *CreateDesktopGroupRequest {
	s.KeepDuration = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetLoadPolicy(v int64) *CreateDesktopGroupRequest {
	s.LoadPolicy = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetMaxDesktopsCount(v int32) *CreateDesktopGroupRequest {
	s.MaxDesktopsCount = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetMinDesktopsCount(v int32) *CreateDesktopGroupRequest {
	s.MinDesktopsCount = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetOfficeSiteId(v string) *CreateDesktopGroupRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetOwnType(v int32) *CreateDesktopGroupRequest {
	s.OwnType = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetPeriod(v int32) *CreateDesktopGroupRequest {
	s.Period = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetPeriodUnit(v string) *CreateDesktopGroupRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetPolicyGroupId(v string) *CreateDesktopGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetProfileFollowSwitch(v bool) *CreateDesktopGroupRequest {
	s.ProfileFollowSwitch = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetPromotionId(v string) *CreateDesktopGroupRequest {
	s.PromotionId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetRatioThreshold(v float32) *CreateDesktopGroupRequest {
	s.RatioThreshold = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetRegionId(v string) *CreateDesktopGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetResetType(v int64) *CreateDesktopGroupRequest {
	s.ResetType = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetScaleStrategyId(v string) *CreateDesktopGroupRequest {
	s.ScaleStrategyId = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetStopDuration(v int64) *CreateDesktopGroupRequest {
	s.StopDuration = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetTag(v []*CreateDesktopGroupRequestTag) *CreateDesktopGroupRequest {
	s.Tag = v
	return s
}

func (s *CreateDesktopGroupRequest) SetVolumeEncryptionEnabled(v bool) *CreateDesktopGroupRequest {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetVolumeEncryptionKey(v string) *CreateDesktopGroupRequest {
	s.VolumeEncryptionKey = &v
	return s
}

func (s *CreateDesktopGroupRequest) SetVpcId(v string) *CreateDesktopGroupRequest {
	s.VpcId = &v
	return s
}

type CreateDesktopGroupRequestTag struct {
	// The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
	//
	// This parameter is required.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDesktopGroupRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopGroupRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDesktopGroupRequestTag) SetKey(v string) *CreateDesktopGroupRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDesktopGroupRequestTag) SetValue(v string) *CreateDesktopGroupRequestTag {
	s.Value = &v
	return s
}

type CreateDesktopGroupResponseBody struct {
	// The ID of the desktop group.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The IDs of the orders.
	OrderIds []*string `json:"OrderIds,omitempty" xml:"OrderIds,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 3EB7FCEE-D731-4948-85A3-4B2C341CA983
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDesktopGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDesktopGroupResponseBody) SetDesktopGroupId(v string) *CreateDesktopGroupResponseBody {
	s.DesktopGroupId = &v
	return s
}

func (s *CreateDesktopGroupResponseBody) SetOrderIds(v []*string) *CreateDesktopGroupResponseBody {
	s.OrderIds = v
	return s
}

func (s *CreateDesktopGroupResponseBody) SetRequestId(v string) *CreateDesktopGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateDesktopGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDesktopGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDesktopGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDesktopGroupResponse) SetHeaders(v map[string]*string) *CreateDesktopGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDesktopGroupResponse) SetStatusCode(v int32) *CreateDesktopGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDesktopGroupResponse) SetBody(v *CreateDesktopGroupResponseBody) *CreateDesktopGroupResponse {
	s.Body = v
	return s
}

type CreateDesktopOversoldGroupRequest struct {
	ConcurrenceCount       *int32  `json:"ConcurrenceCount,omitempty" xml:"ConcurrenceCount,omitempty"`
	DataDiskSize           *int32  `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DesktopType            *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	DirectoryId            *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	IdleDisconnectDuration *int64  `json:"IdleDisconnectDuration,omitempty" xml:"IdleDisconnectDuration,omitempty"`
	ImageId                *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	KeepDuration           *int32  `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OversoldUserCount      *int32  `json:"OversoldUserCount,omitempty" xml:"OversoldUserCount,omitempty"`
	OversoldWarn           *int32  `json:"OversoldWarn,omitempty" xml:"OversoldWarn,omitempty"`
	Period                 *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit             *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	PolicyGroupId          *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	StopDuration           *int32  `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
	SystemDiskSize         *int32  `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s CreateDesktopOversoldGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopOversoldGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateDesktopOversoldGroupRequest) SetConcurrenceCount(v int32) *CreateDesktopOversoldGroupRequest {
	s.ConcurrenceCount = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetDataDiskSize(v int32) *CreateDesktopOversoldGroupRequest {
	s.DataDiskSize = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetDescription(v string) *CreateDesktopOversoldGroupRequest {
	s.Description = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetDesktopType(v string) *CreateDesktopOversoldGroupRequest {
	s.DesktopType = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetDirectoryId(v string) *CreateDesktopOversoldGroupRequest {
	s.DirectoryId = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetIdleDisconnectDuration(v int64) *CreateDesktopOversoldGroupRequest {
	s.IdleDisconnectDuration = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetImageId(v string) *CreateDesktopOversoldGroupRequest {
	s.ImageId = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetKeepDuration(v int32) *CreateDesktopOversoldGroupRequest {
	s.KeepDuration = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetName(v string) *CreateDesktopOversoldGroupRequest {
	s.Name = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetOversoldUserCount(v int32) *CreateDesktopOversoldGroupRequest {
	s.OversoldUserCount = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetOversoldWarn(v int32) *CreateDesktopOversoldGroupRequest {
	s.OversoldWarn = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetPeriod(v int32) *CreateDesktopOversoldGroupRequest {
	s.Period = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetPeriodUnit(v string) *CreateDesktopOversoldGroupRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetPolicyGroupId(v string) *CreateDesktopOversoldGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetStopDuration(v int32) *CreateDesktopOversoldGroupRequest {
	s.StopDuration = &v
	return s
}

func (s *CreateDesktopOversoldGroupRequest) SetSystemDiskSize(v int32) *CreateDesktopOversoldGroupRequest {
	s.SystemDiskSize = &v
	return s
}

type CreateDesktopOversoldGroupResponseBody struct {
	Data      *CreateDesktopOversoldGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDesktopOversoldGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopOversoldGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDesktopOversoldGroupResponseBody) SetData(v *CreateDesktopOversoldGroupResponseBodyData) *CreateDesktopOversoldGroupResponseBody {
	s.Data = v
	return s
}

func (s *CreateDesktopOversoldGroupResponseBody) SetRequestId(v string) *CreateDesktopOversoldGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateDesktopOversoldGroupResponseBodyData struct {
	OrderId         *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
}

func (s CreateDesktopOversoldGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopOversoldGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateDesktopOversoldGroupResponseBodyData) SetOrderId(v int64) *CreateDesktopOversoldGroupResponseBodyData {
	s.OrderId = &v
	return s
}

func (s *CreateDesktopOversoldGroupResponseBodyData) SetOversoldGroupId(v string) *CreateDesktopOversoldGroupResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

type CreateDesktopOversoldGroupResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDesktopOversoldGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDesktopOversoldGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopOversoldGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateDesktopOversoldGroupResponse) SetHeaders(v map[string]*string) *CreateDesktopOversoldGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateDesktopOversoldGroupResponse) SetStatusCode(v int32) *CreateDesktopOversoldGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDesktopOversoldGroupResponse) SetBody(v *CreateDesktopOversoldGroupResponseBody) *CreateDesktopOversoldGroupResponse {
	s.Body = v
	return s
}

type CreateDesktopsRequest struct {
	// The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: 1.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Specifies whether to enable automatic payment.
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// Specifies whether to enable auto-renewal. This parameter takes effect only when the ChargeType parameter is set to PrePaid.
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The ID of the cloud computer template.
	//
	// example:
	//
	// b-je9hani001wfn****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The cloud computer templates.
	//
	// if can be null:
	// true
	BundleModels []*CreateDesktopsRequestBundleModels `json:"BundleModels,omitempty" xml:"BundleModels,omitempty" type:"Repeated"`
	// The billing method of the cloud computers.
	//
	// Default value: PostPaid. Valid values:
	//
	// 	- Postpaid: pay-as-you-go
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PrePaid: subscription
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PrePaid
	ChargeType        *string                                 `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DesktopAttachment *CreateDesktopsRequestDesktopAttachment `json:"DesktopAttachment,omitempty" xml:"DesktopAttachment,omitempty" type:"Struct"`
	// The private IP address of the cloud computer.
	//
	// example:
	//
	// 10.0.0.1
	DesktopMemberIp *string `json:"DesktopMemberIp,omitempty" xml:"DesktopMemberIp,omitempty"`
	// The name of the cloud computer. The name must meet the following requirements:
	//
	// 	- The name must be 1 to 64 characters in length.
	//
	// 	- The name must start with a letter but cannot start with `http://` or `https://`.
	//
	// 	- The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// example:
	//
	// testDesktopName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// Specifies whether to automatically add suffixes to the names of cloud computers when you create multiple cloud computers at the same time.
	//
	// Default value: true. Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- False
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	DesktopNameSuffix *bool `json:"DesktopNameSuffix,omitempty" xml:"DesktopNameSuffix,omitempty"`
	// The details of the scheduled task on cloud computers.
	//
	// if can be null:
	// true
	DesktopTimers []*CreateDesktopsRequestDesktopTimers `json:"DesktopTimers,omitempty" xml:"DesktopTimers,omitempty" type:"Repeated"`
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The IDs of the end users to which you want to assign the cloud computers. You can specify 1 to 100 IDs.
	//
	// example:
	//
	// 123456789
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The ID of the cloud computer pool.
	//
	// example:
	//
	// dg-boyczi8enfyc5****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
	//
	// The hostnames must meet the following requirements:
	//
	// 	- The hostnames must be 2 to 15 characters in length.
	//
	// 	- The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
	//
	// When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
	//
	// 	- `name_prefix`: the prefix of the hostname.
	//
	// 	- `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
	//
	// 	- `name_suffix`: the suffix of the hostname.
	//
	// example:
	//
	// testhost
	Hostname *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// > This parameter is not publicly available.
	MonthDesktopSetting *CreateDesktopsRequestMonthDesktopSetting `json:"MonthDesktopSetting,omitempty" xml:"MonthDesktopSetting,omitempty" type:"Struct"`
	// The office network ID.
	//
	// example:
	//
	// cn-hangzhou+os-c5cy7q578s8jc****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The subscription duration of the cloud desktop that you want to create. The unit is specified by the `PeriodUnit` parameter. This parameter takes effect and is required only when the `ChargeType` parameter is set to `PrePaid`.
	//
	// 	- Valid values if the `PeriodUnit` parameter is set to `Month`:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 6
	//
	// 	- Valid values if the `PeriodUnit` parameter is set to `Year`:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 4
	//
	//     	- 5
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The ID of the policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// system-all-enabled-policy
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The ID of the sales promotion.
	//
	// example:
	//
	// 23141
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId  *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SnapshotPolicyId *string `json:"SnapshotPolicyId,omitempty" xml:"SnapshotPolicyId,omitempty"`
	// The tags that you want to add to the cloud desktop.
	Tag          []*CreateDesktopsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TimerGroupId *string                     `json:"TimerGroupId,omitempty" xml:"TimerGroupId,omitempty"`
	// How the cloud computers are assigned.
	//
	// >  If you do not specify the `EndUserId` parameter, the cloud computers are not assigned to end users after the cloud computers are created.
	//
	// Default value: ALL. Valid values:
	//
	// 	- ALL: If you specify the EndUserId parameter, the cloud computers are assigned to all specified end users after the cloud computers are created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PER_USER: If you specify the EndUserId parameter, the cloud computers are evenly assigned to the specified end users after the cloud computers are created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     In this case, you must make sure that the value of the Amount parameter can be divided by the N value of the EndUserId.N parameter that you specify.
	//
	//     <!-- -->
	//
	// example:
	//
	// ALL
	UserAssignMode *string `json:"UserAssignMode,omitempty" xml:"UserAssignMode,omitempty"`
	// Details about the custom command scripts.
	UserCommands []*CreateDesktopsRequestUserCommands `json:"UserCommands,omitempty" xml:"UserCommands,omitempty" type:"Repeated"`
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Specifies whether to enable disk encryption.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsRequest) GoString() string {
	return s.String()
}

func (s *CreateDesktopsRequest) SetAmount(v int32) *CreateDesktopsRequest {
	s.Amount = &v
	return s
}

func (s *CreateDesktopsRequest) SetAutoPay(v bool) *CreateDesktopsRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateDesktopsRequest) SetAutoRenew(v bool) *CreateDesktopsRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateDesktopsRequest) SetBundleId(v string) *CreateDesktopsRequest {
	s.BundleId = &v
	return s
}

func (s *CreateDesktopsRequest) SetBundleModels(v []*CreateDesktopsRequestBundleModels) *CreateDesktopsRequest {
	s.BundleModels = v
	return s
}

func (s *CreateDesktopsRequest) SetChargeType(v string) *CreateDesktopsRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateDesktopsRequest) SetDesktopAttachment(v *CreateDesktopsRequestDesktopAttachment) *CreateDesktopsRequest {
	s.DesktopAttachment = v
	return s
}

func (s *CreateDesktopsRequest) SetDesktopMemberIp(v string) *CreateDesktopsRequest {
	s.DesktopMemberIp = &v
	return s
}

func (s *CreateDesktopsRequest) SetDesktopName(v string) *CreateDesktopsRequest {
	s.DesktopName = &v
	return s
}

func (s *CreateDesktopsRequest) SetDesktopNameSuffix(v bool) *CreateDesktopsRequest {
	s.DesktopNameSuffix = &v
	return s
}

func (s *CreateDesktopsRequest) SetDesktopTimers(v []*CreateDesktopsRequestDesktopTimers) *CreateDesktopsRequest {
	s.DesktopTimers = v
	return s
}

func (s *CreateDesktopsRequest) SetDirectoryId(v string) *CreateDesktopsRequest {
	s.DirectoryId = &v
	return s
}

func (s *CreateDesktopsRequest) SetEndUserId(v []*string) *CreateDesktopsRequest {
	s.EndUserId = v
	return s
}

func (s *CreateDesktopsRequest) SetGroupId(v string) *CreateDesktopsRequest {
	s.GroupId = &v
	return s
}

func (s *CreateDesktopsRequest) SetHostname(v string) *CreateDesktopsRequest {
	s.Hostname = &v
	return s
}

func (s *CreateDesktopsRequest) SetMonthDesktopSetting(v *CreateDesktopsRequestMonthDesktopSetting) *CreateDesktopsRequest {
	s.MonthDesktopSetting = v
	return s
}

func (s *CreateDesktopsRequest) SetOfficeSiteId(v string) *CreateDesktopsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateDesktopsRequest) SetPeriod(v int32) *CreateDesktopsRequest {
	s.Period = &v
	return s
}

func (s *CreateDesktopsRequest) SetPeriodUnit(v string) *CreateDesktopsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDesktopsRequest) SetPolicyGroupId(v string) *CreateDesktopsRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *CreateDesktopsRequest) SetPromotionId(v string) *CreateDesktopsRequest {
	s.PromotionId = &v
	return s
}

func (s *CreateDesktopsRequest) SetRegionId(v string) *CreateDesktopsRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDesktopsRequest) SetResourceGroupId(v string) *CreateDesktopsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDesktopsRequest) SetSnapshotPolicyId(v string) *CreateDesktopsRequest {
	s.SnapshotPolicyId = &v
	return s
}

func (s *CreateDesktopsRequest) SetTag(v []*CreateDesktopsRequestTag) *CreateDesktopsRequest {
	s.Tag = v
	return s
}

func (s *CreateDesktopsRequest) SetTimerGroupId(v string) *CreateDesktopsRequest {
	s.TimerGroupId = &v
	return s
}

func (s *CreateDesktopsRequest) SetUserAssignMode(v string) *CreateDesktopsRequest {
	s.UserAssignMode = &v
	return s
}

func (s *CreateDesktopsRequest) SetUserCommands(v []*CreateDesktopsRequestUserCommands) *CreateDesktopsRequest {
	s.UserCommands = v
	return s
}

func (s *CreateDesktopsRequest) SetUserName(v string) *CreateDesktopsRequest {
	s.UserName = &v
	return s
}

func (s *CreateDesktopsRequest) SetVolumeEncryptionEnabled(v bool) *CreateDesktopsRequest {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *CreateDesktopsRequest) SetVolumeEncryptionKey(v string) *CreateDesktopsRequest {
	s.VolumeEncryptionKey = &v
	return s
}

func (s *CreateDesktopsRequest) SetVpcId(v string) *CreateDesktopsRequest {
	s.VpcId = &v
	return s
}

type CreateDesktopsRequestBundleModels struct {
	// The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: null.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The ID of a cloud computer template.
	//
	// example:
	//
	// b-je9hani001wfn****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The name of the cloud computer. The name must meet the following requirements:
	//
	// 	- The name must be 1 to 64 characters in length.
	//
	// 	- The name must start with a letter but cannot start with `http://` or `https://`.
	//
	// 	- The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// example:
	//
	// testDesktopName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The IDs of the end users to whom the cloud computer are assigned.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
	//
	// The hostnames must meet the following requirements:
	//
	// 	- The hostnames must be 2 to 15 characters in length.
	//
	// 	- The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
	//
	// When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
	//
	// 	- `name_prefix`: the prefix of the hostname.
	//
	// 	- `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
	//
	// 	- `name_suffix`: the suffix of the hostname.
	//
	// example:
	//
	// testhost
	Hostname *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// Specifies whether to enable disk encryption.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
}

func (s CreateDesktopsRequestBundleModels) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsRequestBundleModels) GoString() string {
	return s.String()
}

func (s *CreateDesktopsRequestBundleModels) SetAmount(v int32) *CreateDesktopsRequestBundleModels {
	s.Amount = &v
	return s
}

func (s *CreateDesktopsRequestBundleModels) SetBundleId(v string) *CreateDesktopsRequestBundleModels {
	s.BundleId = &v
	return s
}

func (s *CreateDesktopsRequestBundleModels) SetDesktopName(v string) *CreateDesktopsRequestBundleModels {
	s.DesktopName = &v
	return s
}

func (s *CreateDesktopsRequestBundleModels) SetEndUserIds(v []*string) *CreateDesktopsRequestBundleModels {
	s.EndUserIds = v
	return s
}

func (s *CreateDesktopsRequestBundleModels) SetHostname(v string) *CreateDesktopsRequestBundleModels {
	s.Hostname = &v
	return s
}

func (s *CreateDesktopsRequestBundleModels) SetVolumeEncryptionEnabled(v bool) *CreateDesktopsRequestBundleModels {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *CreateDesktopsRequestBundleModels) SetVolumeEncryptionKey(v string) *CreateDesktopsRequestBundleModels {
	s.VolumeEncryptionKey = &v
	return s
}

type CreateDesktopsRequestDesktopAttachment struct {
	DataDiskCategory   *string `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	DataDiskPerLevel   *string `json:"DataDiskPerLevel,omitempty" xml:"DataDiskPerLevel,omitempty"`
	DataDiskSize       *int32  `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	DefaultLanguage    *string `json:"DefaultLanguage,omitempty" xml:"DefaultLanguage,omitempty"`
	DesktopType        *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	ImageId            *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	SystemDiskCategory *string `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	SystemDiskPerLevel *string `json:"SystemDiskPerLevel,omitempty" xml:"SystemDiskPerLevel,omitempty"`
	SystemDiskSize     *int32  `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s CreateDesktopsRequestDesktopAttachment) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsRequestDesktopAttachment) GoString() string {
	return s.String()
}

func (s *CreateDesktopsRequestDesktopAttachment) SetDataDiskCategory(v string) *CreateDesktopsRequestDesktopAttachment {
	s.DataDiskCategory = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetDataDiskPerLevel(v string) *CreateDesktopsRequestDesktopAttachment {
	s.DataDiskPerLevel = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetDataDiskSize(v int32) *CreateDesktopsRequestDesktopAttachment {
	s.DataDiskSize = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetDefaultLanguage(v string) *CreateDesktopsRequestDesktopAttachment {
	s.DefaultLanguage = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetDesktopType(v string) *CreateDesktopsRequestDesktopAttachment {
	s.DesktopType = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetImageId(v string) *CreateDesktopsRequestDesktopAttachment {
	s.ImageId = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetSystemDiskCategory(v string) *CreateDesktopsRequestDesktopAttachment {
	s.SystemDiskCategory = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetSystemDiskPerLevel(v string) *CreateDesktopsRequestDesktopAttachment {
	s.SystemDiskPerLevel = &v
	return s
}

func (s *CreateDesktopsRequestDesktopAttachment) SetSystemDiskSize(v int32) *CreateDesktopsRequestDesktopAttachment {
	s.SystemDiskSize = &v
	return s
}

type CreateDesktopsRequestDesktopTimers struct {
	// Specifies whether to allow the end user to configure the scheduled task.
	//
	// example:
	//
	// true
	AllowClientSetting *bool `json:"AllowClientSetting,omitempty" xml:"AllowClientSetting,omitempty"`
	// The cron expression for the scheduled task.
	//
	// >  The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\	- 1,2,3,4,5,6,7
	//
	// example:
	//
	// 0 40 7 ? 	- 1,2,3,4,5,6,7
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// Specifies whether to forcibly execute the scheduled task.
	//
	// Valid values:
	//
	// 	- true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false: does not forcibly execute the scheduled task.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// True
	Enforce *bool `json:"Enforce,omitempty" xml:"Enforce,omitempty"`
	// The interval at which cloud computers are created. Unit: minutes.
	//
	// example:
	//
	// 10
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.
	//
	// Valid values:
	//
	// 	- Hibernate: hibernates the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Shutdown: stops the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Shutdown
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The reset type of the cloud computers.
	//
	// Valid values:
	//
	// 	- RESET_TYPE_SYSTEM: resets the system disks.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RESET_TYPE_BOTH: resets the system disks and data disks.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// RESET_TYPE_SYSTEM
	ResetType *string `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// The type of the scheduled task.
	//
	// example:
	//
	// NoOperationReboot
	TimerType *string `json:"TimerType,omitempty" xml:"TimerType,omitempty"`
}

func (s CreateDesktopsRequestDesktopTimers) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsRequestDesktopTimers) GoString() string {
	return s.String()
}

func (s *CreateDesktopsRequestDesktopTimers) SetAllowClientSetting(v bool) *CreateDesktopsRequestDesktopTimers {
	s.AllowClientSetting = &v
	return s
}

func (s *CreateDesktopsRequestDesktopTimers) SetCronExpression(v string) *CreateDesktopsRequestDesktopTimers {
	s.CronExpression = &v
	return s
}

func (s *CreateDesktopsRequestDesktopTimers) SetEnforce(v bool) *CreateDesktopsRequestDesktopTimers {
	s.Enforce = &v
	return s
}

func (s *CreateDesktopsRequestDesktopTimers) SetInterval(v int32) *CreateDesktopsRequestDesktopTimers {
	s.Interval = &v
	return s
}

func (s *CreateDesktopsRequestDesktopTimers) SetOperationType(v string) *CreateDesktopsRequestDesktopTimers {
	s.OperationType = &v
	return s
}

func (s *CreateDesktopsRequestDesktopTimers) SetResetType(v string) *CreateDesktopsRequestDesktopTimers {
	s.ResetType = &v
	return s
}

func (s *CreateDesktopsRequestDesktopTimers) SetTimerType(v string) *CreateDesktopsRequestDesktopTimers {
	s.TimerType = &v
	return s
}

type CreateDesktopsRequestMonthDesktopSetting struct {
	// > This parameter is not publicly available.
	//
	// example:
	//
	// null
	BuyerId *int64 `json:"BuyerId,omitempty" xml:"BuyerId,omitempty"`
	// > This parameter is not publicly available.
	//
	// example:
	//
	// null
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// > This parameter is not publicly available.
	//
	// example:
	//
	// null
	UseDuration *int32 `json:"UseDuration,omitempty" xml:"UseDuration,omitempty"`
}

func (s CreateDesktopsRequestMonthDesktopSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsRequestMonthDesktopSetting) GoString() string {
	return s.String()
}

func (s *CreateDesktopsRequestMonthDesktopSetting) SetBuyerId(v int64) *CreateDesktopsRequestMonthDesktopSetting {
	s.BuyerId = &v
	return s
}

func (s *CreateDesktopsRequestMonthDesktopSetting) SetDesktopId(v string) *CreateDesktopsRequestMonthDesktopSetting {
	s.DesktopId = &v
	return s
}

func (s *CreateDesktopsRequestMonthDesktopSetting) SetUseDuration(v int32) *CreateDesktopsRequestMonthDesktopSetting {
	s.UseDuration = &v
	return s
}

type CreateDesktopsRequestTag struct {
	// The key of the tag. You can specify 1 to 20 keys for a tag.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag. You can specify 1 to 20 values for a tag.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDesktopsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDesktopsRequestTag) SetKey(v string) *CreateDesktopsRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDesktopsRequestTag) SetValue(v string) *CreateDesktopsRequestTag {
	s.Value = &v
	return s
}

type CreateDesktopsRequestUserCommands struct {
	// The command content.
	//
	// example:
	//
	// bmV3LWl0ZW0gZDpcdGVzdF91c2VyX2NvbW1hbmRzLnR4dCAtdHlwZSBm****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The encoding mode of the command content.
	//
	// Valid values:
	//
	// 	- Base64: encodes the command content in Base64.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PlainText: does not encode the command content.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Base64
	ContentEncoding *string `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	// The language type of the command.
	//
	// Valid values:
	//
	// 	- RunPowerShellScript: PowerShell commands (applicable to Windows cloud computers).
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RunShellScript: shell commands (applicable to Linux cloud computers).
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RunBatScript: batch commands (applicable to Windows cloud computers).
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// RunPowerShellScript
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
}

func (s CreateDesktopsRequestUserCommands) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsRequestUserCommands) GoString() string {
	return s.String()
}

func (s *CreateDesktopsRequestUserCommands) SetContent(v string) *CreateDesktopsRequestUserCommands {
	s.Content = &v
	return s
}

func (s *CreateDesktopsRequestUserCommands) SetContentEncoding(v string) *CreateDesktopsRequestUserCommands {
	s.ContentEncoding = &v
	return s
}

func (s *CreateDesktopsRequestUserCommands) SetContentType(v string) *CreateDesktopsRequestUserCommands {
	s.ContentType = &v
	return s
}

type CreateDesktopsShrinkRequest struct {
	// The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: 1.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// Specifies whether to enable automatic payment.
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// Specifies whether to enable auto-renewal. This parameter takes effect only when the ChargeType parameter is set to PrePaid.
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The ID of the cloud computer template.
	//
	// example:
	//
	// b-je9hani001wfn****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The cloud computer templates.
	//
	// if can be null:
	// true
	BundleModels []*CreateDesktopsShrinkRequestBundleModels `json:"BundleModels,omitempty" xml:"BundleModels,omitempty" type:"Repeated"`
	// The billing method of the cloud computers.
	//
	// Default value: PostPaid. Valid values:
	//
	// 	- Postpaid: pay-as-you-go
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PrePaid: subscription
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PrePaid
	ChargeType              *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DesktopAttachmentShrink *string `json:"DesktopAttachment,omitempty" xml:"DesktopAttachment,omitempty"`
	// The private IP address of the cloud computer.
	//
	// example:
	//
	// 10.0.0.1
	DesktopMemberIp *string `json:"DesktopMemberIp,omitempty" xml:"DesktopMemberIp,omitempty"`
	// The name of the cloud computer. The name must meet the following requirements:
	//
	// 	- The name must be 1 to 64 characters in length.
	//
	// 	- The name must start with a letter but cannot start with `http://` or `https://`.
	//
	// 	- The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// example:
	//
	// testDesktopName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// Specifies whether to automatically add suffixes to the names of cloud computers when you create multiple cloud computers at the same time.
	//
	// Default value: true. Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- False
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	DesktopNameSuffix *bool `json:"DesktopNameSuffix,omitempty" xml:"DesktopNameSuffix,omitempty"`
	// The details of the scheduled task on cloud computers.
	//
	// if can be null:
	// true
	DesktopTimers []*CreateDesktopsShrinkRequestDesktopTimers `json:"DesktopTimers,omitempty" xml:"DesktopTimers,omitempty" type:"Repeated"`
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The IDs of the end users to which you want to assign the cloud computers. You can specify 1 to 100 IDs.
	//
	// example:
	//
	// 123456789
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The ID of the cloud computer pool.
	//
	// example:
	//
	// dg-boyczi8enfyc5****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
	//
	// The hostnames must meet the following requirements:
	//
	// 	- The hostnames must be 2 to 15 characters in length.
	//
	// 	- The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
	//
	// When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
	//
	// 	- `name_prefix`: the prefix of the hostname.
	//
	// 	- `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
	//
	// 	- `name_suffix`: the suffix of the hostname.
	//
	// example:
	//
	// testhost
	Hostname *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// > This parameter is not publicly available.
	MonthDesktopSetting *CreateDesktopsShrinkRequestMonthDesktopSetting `json:"MonthDesktopSetting,omitempty" xml:"MonthDesktopSetting,omitempty" type:"Struct"`
	// The office network ID.
	//
	// example:
	//
	// cn-hangzhou+os-c5cy7q578s8jc****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The subscription duration of the cloud desktop that you want to create. The unit is specified by the `PeriodUnit` parameter. This parameter takes effect and is required only when the `ChargeType` parameter is set to `PrePaid`.
	//
	// 	- Valid values if the `PeriodUnit` parameter is set to `Month`:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 6
	//
	// 	- Valid values if the `PeriodUnit` parameter is set to `Year`:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 4
	//
	//     	- 5
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The ID of the policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// system-all-enabled-policy
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The ID of the sales promotion.
	//
	// example:
	//
	// 23141
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId         *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId  *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	SnapshotPolicyId *string `json:"SnapshotPolicyId,omitempty" xml:"SnapshotPolicyId,omitempty"`
	// The tags that you want to add to the cloud desktop.
	Tag          []*CreateDesktopsShrinkRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TimerGroupId *string                           `json:"TimerGroupId,omitempty" xml:"TimerGroupId,omitempty"`
	// How the cloud computers are assigned.
	//
	// >  If you do not specify the `EndUserId` parameter, the cloud computers are not assigned to end users after the cloud computers are created.
	//
	// Default value: ALL. Valid values:
	//
	// 	- ALL: If you specify the EndUserId parameter, the cloud computers are assigned to all specified end users after the cloud computers are created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PER_USER: If you specify the EndUserId parameter, the cloud computers are evenly assigned to the specified end users after the cloud computers are created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     In this case, you must make sure that the value of the Amount parameter can be divided by the N value of the EndUserId.N parameter that you specify.
	//
	//     <!-- -->
	//
	// example:
	//
	// ALL
	UserAssignMode *string `json:"UserAssignMode,omitempty" xml:"UserAssignMode,omitempty"`
	// Details about the custom command scripts.
	UserCommands []*CreateDesktopsShrinkRequestUserCommands `json:"UserCommands,omitempty" xml:"UserCommands,omitempty" type:"Repeated"`
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// Specifies whether to enable disk encryption.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that you want to use when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to obtain a list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s CreateDesktopsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDesktopsShrinkRequest) SetAmount(v int32) *CreateDesktopsShrinkRequest {
	s.Amount = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetAutoPay(v bool) *CreateDesktopsShrinkRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetAutoRenew(v bool) *CreateDesktopsShrinkRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetBundleId(v string) *CreateDesktopsShrinkRequest {
	s.BundleId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetBundleModels(v []*CreateDesktopsShrinkRequestBundleModels) *CreateDesktopsShrinkRequest {
	s.BundleModels = v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetChargeType(v string) *CreateDesktopsShrinkRequest {
	s.ChargeType = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetDesktopAttachmentShrink(v string) *CreateDesktopsShrinkRequest {
	s.DesktopAttachmentShrink = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetDesktopMemberIp(v string) *CreateDesktopsShrinkRequest {
	s.DesktopMemberIp = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetDesktopName(v string) *CreateDesktopsShrinkRequest {
	s.DesktopName = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetDesktopNameSuffix(v bool) *CreateDesktopsShrinkRequest {
	s.DesktopNameSuffix = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetDesktopTimers(v []*CreateDesktopsShrinkRequestDesktopTimers) *CreateDesktopsShrinkRequest {
	s.DesktopTimers = v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetDirectoryId(v string) *CreateDesktopsShrinkRequest {
	s.DirectoryId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetEndUserId(v []*string) *CreateDesktopsShrinkRequest {
	s.EndUserId = v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetGroupId(v string) *CreateDesktopsShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetHostname(v string) *CreateDesktopsShrinkRequest {
	s.Hostname = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetMonthDesktopSetting(v *CreateDesktopsShrinkRequestMonthDesktopSetting) *CreateDesktopsShrinkRequest {
	s.MonthDesktopSetting = v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetOfficeSiteId(v string) *CreateDesktopsShrinkRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetPeriod(v int32) *CreateDesktopsShrinkRequest {
	s.Period = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetPeriodUnit(v string) *CreateDesktopsShrinkRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetPolicyGroupId(v string) *CreateDesktopsShrinkRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetPromotionId(v string) *CreateDesktopsShrinkRequest {
	s.PromotionId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetRegionId(v string) *CreateDesktopsShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetResourceGroupId(v string) *CreateDesktopsShrinkRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetSnapshotPolicyId(v string) *CreateDesktopsShrinkRequest {
	s.SnapshotPolicyId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetTag(v []*CreateDesktopsShrinkRequestTag) *CreateDesktopsShrinkRequest {
	s.Tag = v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetTimerGroupId(v string) *CreateDesktopsShrinkRequest {
	s.TimerGroupId = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetUserAssignMode(v string) *CreateDesktopsShrinkRequest {
	s.UserAssignMode = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetUserCommands(v []*CreateDesktopsShrinkRequestUserCommands) *CreateDesktopsShrinkRequest {
	s.UserCommands = v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetUserName(v string) *CreateDesktopsShrinkRequest {
	s.UserName = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetVolumeEncryptionEnabled(v bool) *CreateDesktopsShrinkRequest {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetVolumeEncryptionKey(v string) *CreateDesktopsShrinkRequest {
	s.VolumeEncryptionKey = &v
	return s
}

func (s *CreateDesktopsShrinkRequest) SetVpcId(v string) *CreateDesktopsShrinkRequest {
	s.VpcId = &v
	return s
}

type CreateDesktopsShrinkRequestBundleModels struct {
	// The number of cloud computers that you want to create. Valid values: 1 to 300. Default value: null.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The ID of a cloud computer template.
	//
	// example:
	//
	// b-je9hani001wfn****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The name of the cloud computer. The name must meet the following requirements:
	//
	// 	- The name must be 1 to 64 characters in length.
	//
	// 	- The name must start with a letter but cannot start with `http://` or `https://`.
	//
	// 	- The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// example:
	//
	// testDesktopName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The IDs of the end users to whom the cloud computer are assigned.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The custom hostnames of the cloud computers. This parameter is valid only if the office network is an AD office network and the operating system type of the cloud computers is Windows.
	//
	// The hostnames must meet the following requirements:
	//
	// 	- The hostnames must be 2 to 15 characters in length.
	//
	// 	- The hostnames can contain only letters, digits, and hyphens (-). The hostnames cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
	//
	// When you create multiple cloud computers, you can use the `name_prefix[begin_number,bits]name_suffix` naming format to name the cloud computers. For example, if you set the value of the Hostname parameter to ecd-[1,4]-test, the hostname of the first cloud computer is ecd-0001-test, the hostname of the second cloud computer is ecd-0002-test, and so on.
	//
	// 	- `name_prefix`: the prefix of the hostname.
	//
	// 	- `[begin_number,bits]`: the sequential number in the hostname. The `begin_number` value is the starting digit. Valid values of begin_number: 0 to 999999. Default value: 0. The `bits` value is the number of digits. Valid values: 1 to 6. Default value: 6.
	//
	// 	- `name_suffix`: the suffix of the hostname.
	//
	// example:
	//
	// testhost
	Hostname *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// Specifies whether to enable disk encryption.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
}

func (s CreateDesktopsShrinkRequestBundleModels) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsShrinkRequestBundleModels) GoString() string {
	return s.String()
}

func (s *CreateDesktopsShrinkRequestBundleModels) SetAmount(v int32) *CreateDesktopsShrinkRequestBundleModels {
	s.Amount = &v
	return s
}

func (s *CreateDesktopsShrinkRequestBundleModels) SetBundleId(v string) *CreateDesktopsShrinkRequestBundleModels {
	s.BundleId = &v
	return s
}

func (s *CreateDesktopsShrinkRequestBundleModels) SetDesktopName(v string) *CreateDesktopsShrinkRequestBundleModels {
	s.DesktopName = &v
	return s
}

func (s *CreateDesktopsShrinkRequestBundleModels) SetEndUserIds(v []*string) *CreateDesktopsShrinkRequestBundleModels {
	s.EndUserIds = v
	return s
}

func (s *CreateDesktopsShrinkRequestBundleModels) SetHostname(v string) *CreateDesktopsShrinkRequestBundleModels {
	s.Hostname = &v
	return s
}

func (s *CreateDesktopsShrinkRequestBundleModels) SetVolumeEncryptionEnabled(v bool) *CreateDesktopsShrinkRequestBundleModels {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *CreateDesktopsShrinkRequestBundleModels) SetVolumeEncryptionKey(v string) *CreateDesktopsShrinkRequestBundleModels {
	s.VolumeEncryptionKey = &v
	return s
}

type CreateDesktopsShrinkRequestDesktopTimers struct {
	// Specifies whether to allow the end user to configure the scheduled task.
	//
	// example:
	//
	// true
	AllowClientSetting *bool `json:"AllowClientSetting,omitempty" xml:"AllowClientSetting,omitempty"`
	// The cron expression for the scheduled task.
	//
	// >  The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\	- 1,2,3,4,5,6,7
	//
	// example:
	//
	// 0 40 7 ? 	- 1,2,3,4,5,6,7
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// Specifies whether to forcibly execute the scheduled task.
	//
	// Valid values:
	//
	// 	- true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false: does not forcibly execute the scheduled task.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// True
	Enforce *bool `json:"Enforce,omitempty" xml:"Enforce,omitempty"`
	// The interval at which cloud computers are created. Unit: minutes.
	//
	// example:
	//
	// 10
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.
	//
	// Valid values:
	//
	// 	- Hibernate: hibernates the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Shutdown: stops the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Shutdown
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The reset type of the cloud computers.
	//
	// Valid values:
	//
	// 	- RESET_TYPE_SYSTEM: resets the system disks.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RESET_TYPE_BOTH: resets the system disks and data disks.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// RESET_TYPE_SYSTEM
	ResetType *string `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// The type of the scheduled task.
	//
	// example:
	//
	// NoOperationReboot
	TimerType *string `json:"TimerType,omitempty" xml:"TimerType,omitempty"`
}

func (s CreateDesktopsShrinkRequestDesktopTimers) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsShrinkRequestDesktopTimers) GoString() string {
	return s.String()
}

func (s *CreateDesktopsShrinkRequestDesktopTimers) SetAllowClientSetting(v bool) *CreateDesktopsShrinkRequestDesktopTimers {
	s.AllowClientSetting = &v
	return s
}

func (s *CreateDesktopsShrinkRequestDesktopTimers) SetCronExpression(v string) *CreateDesktopsShrinkRequestDesktopTimers {
	s.CronExpression = &v
	return s
}

func (s *CreateDesktopsShrinkRequestDesktopTimers) SetEnforce(v bool) *CreateDesktopsShrinkRequestDesktopTimers {
	s.Enforce = &v
	return s
}

func (s *CreateDesktopsShrinkRequestDesktopTimers) SetInterval(v int32) *CreateDesktopsShrinkRequestDesktopTimers {
	s.Interval = &v
	return s
}

func (s *CreateDesktopsShrinkRequestDesktopTimers) SetOperationType(v string) *CreateDesktopsShrinkRequestDesktopTimers {
	s.OperationType = &v
	return s
}

func (s *CreateDesktopsShrinkRequestDesktopTimers) SetResetType(v string) *CreateDesktopsShrinkRequestDesktopTimers {
	s.ResetType = &v
	return s
}

func (s *CreateDesktopsShrinkRequestDesktopTimers) SetTimerType(v string) *CreateDesktopsShrinkRequestDesktopTimers {
	s.TimerType = &v
	return s
}

type CreateDesktopsShrinkRequestMonthDesktopSetting struct {
	// > This parameter is not publicly available.
	//
	// example:
	//
	// null
	BuyerId *int64 `json:"BuyerId,omitempty" xml:"BuyerId,omitempty"`
	// > This parameter is not publicly available.
	//
	// example:
	//
	// null
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// > This parameter is not publicly available.
	//
	// example:
	//
	// null
	UseDuration *int32 `json:"UseDuration,omitempty" xml:"UseDuration,omitempty"`
}

func (s CreateDesktopsShrinkRequestMonthDesktopSetting) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsShrinkRequestMonthDesktopSetting) GoString() string {
	return s.String()
}

func (s *CreateDesktopsShrinkRequestMonthDesktopSetting) SetBuyerId(v int64) *CreateDesktopsShrinkRequestMonthDesktopSetting {
	s.BuyerId = &v
	return s
}

func (s *CreateDesktopsShrinkRequestMonthDesktopSetting) SetDesktopId(v string) *CreateDesktopsShrinkRequestMonthDesktopSetting {
	s.DesktopId = &v
	return s
}

func (s *CreateDesktopsShrinkRequestMonthDesktopSetting) SetUseDuration(v int32) *CreateDesktopsShrinkRequestMonthDesktopSetting {
	s.UseDuration = &v
	return s
}

type CreateDesktopsShrinkRequestTag struct {
	// The key of the tag. You can specify 1 to 20 keys for a tag.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag. You can specify 1 to 20 values for a tag.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateDesktopsShrinkRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsShrinkRequestTag) GoString() string {
	return s.String()
}

func (s *CreateDesktopsShrinkRequestTag) SetKey(v string) *CreateDesktopsShrinkRequestTag {
	s.Key = &v
	return s
}

func (s *CreateDesktopsShrinkRequestTag) SetValue(v string) *CreateDesktopsShrinkRequestTag {
	s.Value = &v
	return s
}

type CreateDesktopsShrinkRequestUserCommands struct {
	// The command content.
	//
	// example:
	//
	// bmV3LWl0ZW0gZDpcdGVzdF91c2VyX2NvbW1hbmRzLnR4dCAtdHlwZSBm****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// The encoding mode of the command content.
	//
	// Valid values:
	//
	// 	- Base64: encodes the command content in Base64.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PlainText: does not encode the command content.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Base64
	ContentEncoding *string `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	// The language type of the command.
	//
	// Valid values:
	//
	// 	- RunPowerShellScript: PowerShell commands (applicable to Windows cloud computers).
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RunShellScript: shell commands (applicable to Linux cloud computers).
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RunBatScript: batch commands (applicable to Windows cloud computers).
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// RunPowerShellScript
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
}

func (s CreateDesktopsShrinkRequestUserCommands) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsShrinkRequestUserCommands) GoString() string {
	return s.String()
}

func (s *CreateDesktopsShrinkRequestUserCommands) SetContent(v string) *CreateDesktopsShrinkRequestUserCommands {
	s.Content = &v
	return s
}

func (s *CreateDesktopsShrinkRequestUserCommands) SetContentEncoding(v string) *CreateDesktopsShrinkRequestUserCommands {
	s.ContentEncoding = &v
	return s
}

func (s *CreateDesktopsShrinkRequestUserCommands) SetContentType(v string) *CreateDesktopsShrinkRequestUserCommands {
	s.ContentType = &v
	return s
}

type CreateDesktopsResponseBody struct {
	// The IDs of the cloud computers that are created. If multiple cloud computers are created, multiple IDs are returned.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the order.
	//
	// > This parameter is returned only when you set the ChargeType parameter to PrePaid.
	//
	// example:
	//
	// 123456789
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDesktopsResponseBody) SetDesktopId(v []*string) *CreateDesktopsResponseBody {
	s.DesktopId = v
	return s
}

func (s *CreateDesktopsResponseBody) SetOrderId(v string) *CreateDesktopsResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateDesktopsResponseBody) SetRequestId(v string) *CreateDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type CreateDesktopsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDesktopsResponse) GoString() string {
	return s.String()
}

func (s *CreateDesktopsResponse) SetHeaders(v map[string]*string) *CreateDesktopsResponse {
	s.Headers = v
	return s
}

func (s *CreateDesktopsResponse) SetStatusCode(v int32) *CreateDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDesktopsResponse) SetBody(v *CreateDesktopsResponseBody) *CreateDesktopsResponse {
	s.Body = v
	return s
}

type CreateDiskEncryptionServiceRequest struct {
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateDiskEncryptionServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskEncryptionServiceRequest) GoString() string {
	return s.String()
}

func (s *CreateDiskEncryptionServiceRequest) SetRegionId(v string) *CreateDiskEncryptionServiceRequest {
	s.RegionId = &v
	return s
}

type CreateDiskEncryptionServiceResponseBody struct {
	// The order ID.
	//
	// example:
	//
	// 214552063030752
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDiskEncryptionServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskEncryptionServiceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiskEncryptionServiceResponseBody) SetOrderId(v string) *CreateDiskEncryptionServiceResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateDiskEncryptionServiceResponseBody) SetRequestId(v string) *CreateDiskEncryptionServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDiskEncryptionServiceResponseBody) SetSuccess(v bool) *CreateDiskEncryptionServiceResponseBody {
	s.Success = &v
	return s
}

type CreateDiskEncryptionServiceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDiskEncryptionServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDiskEncryptionServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiskEncryptionServiceResponse) GoString() string {
	return s.String()
}

func (s *CreateDiskEncryptionServiceResponse) SetHeaders(v map[string]*string) *CreateDiskEncryptionServiceResponse {
	s.Headers = v
	return s
}

func (s *CreateDiskEncryptionServiceResponse) SetStatusCode(v int32) *CreateDiskEncryptionServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiskEncryptionServiceResponse) SetBody(v *CreateDiskEncryptionServiceResponseBody) *CreateDiskEncryptionServiceResponse {
	s.Body = v
	return s
}

type CreateImageRequest struct {
	// Specifies whether to clear private data of users. If you set AutoCleanUserdata to `true`, the custom image clears the data directories, excluding the `Administrator` and `Public` directories, in the `C:\\Users` directory.
	//
	// example:
	//
	// false
	AutoCleanUserdata *bool `json:"AutoCleanUserdata,omitempty" xml:"AutoCleanUserdata,omitempty"`
	// The description of the custom image. The description must be 2 to 256 characters in length. It cannot start with `http://` or `https://`.
	//
	// example:
	//
	// This is description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The disk data that is contained in the custom image.
	//
	// Valid values:
	//
	// - SYSTEM: only contain data from system disks.
	//
	// - ALL: contain data from system disks and user disks. [default]
	//
	// example:
	//
	// ALL
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testImageName
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	ImageResourceType *string `json:"ImageResourceType,omitempty" xml:"ImageResourceType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// s-2zefuwk8l6ytcgd3bf4o
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The IDs of the snapshots.
	SnapshotIds []*string `json:"SnapshotIds,omitempty" xml:"SnapshotIds,omitempty" type:"Repeated"`
}

func (s CreateImageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateImageRequest) GoString() string {
	return s.String()
}

func (s *CreateImageRequest) SetAutoCleanUserdata(v bool) *CreateImageRequest {
	s.AutoCleanUserdata = &v
	return s
}

func (s *CreateImageRequest) SetDescription(v string) *CreateImageRequest {
	s.Description = &v
	return s
}

func (s *CreateImageRequest) SetDesktopId(v string) *CreateImageRequest {
	s.DesktopId = &v
	return s
}

func (s *CreateImageRequest) SetDiskType(v string) *CreateImageRequest {
	s.DiskType = &v
	return s
}

func (s *CreateImageRequest) SetImageName(v string) *CreateImageRequest {
	s.ImageName = &v
	return s
}

func (s *CreateImageRequest) SetImageResourceType(v string) *CreateImageRequest {
	s.ImageResourceType = &v
	return s
}

func (s *CreateImageRequest) SetRegionId(v string) *CreateImageRequest {
	s.RegionId = &v
	return s
}

func (s *CreateImageRequest) SetSnapshotId(v string) *CreateImageRequest {
	s.SnapshotId = &v
	return s
}

func (s *CreateImageRequest) SetSnapshotIds(v []*string) *CreateImageRequest {
	s.SnapshotIds = v
	return s
}

type CreateImageResponseBody struct {
	// The ID of the image.
	//
	// example:
	//
	// m-gx2x1dhsmusr2****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateImageResponseBody) SetImageId(v string) *CreateImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *CreateImageResponseBody) SetRequestId(v string) *CreateImageResponseBody {
	s.RequestId = &v
	return s
}

type CreateImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateImageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateImageResponse) GoString() string {
	return s.String()
}

func (s *CreateImageResponse) SetHeaders(v map[string]*string) *CreateImageResponse {
	s.Headers = v
	return s
}

func (s *CreateImageResponse) SetStatusCode(v int32) *CreateImageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateImageResponse) SetBody(v *CreateImageResponseBody) *CreateImageResponse {
	s.Body = v
	return s
}

type CreateNASFileSystemRequest struct {
	// Description of the NAS file system.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Whether the file system is encrypted. Uses KMS service-managed keys to encrypt the file system\\"s on-disk data. No decryption is required when reading and writing encrypted data. Possible values and their meanings:
	//
	// - 0: Not encrypted.
	//
	// - 1: Encrypted using NAS-managed keys.
	//
	// Default value: 0
	//
	// example:
	//
	// 0
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// Name of the NAS file system.
	//
	// The file name must follow these rules:
	//
	// - Length: 2 to 128 English or Chinese characters.
	//
	// - Must start with an uppercase or lowercase letter or a Chinese character, cannot start with http:// or https://.
	//
	// - Can include numbers, underscores (_), or hyphens (-).
	//
	// example:
	//
	// testNAS
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// Region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Storage specification type of the NAS file system. Allowed values:
	//
	// - Capacity: Capacity type.
	//
	// - Performance: Performance type.
	//
	// Default value: Capacity
	//
	// example:
	//
	// Capacity
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s CreateNASFileSystemRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNASFileSystemRequest) GoString() string {
	return s.String()
}

func (s *CreateNASFileSystemRequest) SetDescription(v string) *CreateNASFileSystemRequest {
	s.Description = &v
	return s
}

func (s *CreateNASFileSystemRequest) SetEncryptType(v string) *CreateNASFileSystemRequest {
	s.EncryptType = &v
	return s
}

func (s *CreateNASFileSystemRequest) SetName(v string) *CreateNASFileSystemRequest {
	s.Name = &v
	return s
}

func (s *CreateNASFileSystemRequest) SetOfficeSiteId(v string) *CreateNASFileSystemRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateNASFileSystemRequest) SetRegionId(v string) *CreateNASFileSystemRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNASFileSystemRequest) SetStorageType(v string) *CreateNASFileSystemRequest {
	s.StorageType = &v
	return s
}

type CreateNASFileSystemResponseBody struct {
	// ID of the NAS file system.
	//
	// example:
	//
	// 04f314****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// Name of the NAS file system.
	//
	// example:
	//
	// testNAS
	FileSystemName *string `json:"FileSystemName,omitempty" xml:"FileSystemName,omitempty"`
	// Mount point domain.
	//
	// example:
	//
	// 04f314****-at***.cn-hangzhou.nas.aliyuncs.com
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	// Workspace ID.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// Request ID.
	//
	// example:
	//
	// 269BDB16-2CD8-4865-84BD-11C40BC21DB0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNASFileSystemResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNASFileSystemResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNASFileSystemResponseBody) SetFileSystemId(v string) *CreateNASFileSystemResponseBody {
	s.FileSystemId = &v
	return s
}

func (s *CreateNASFileSystemResponseBody) SetFileSystemName(v string) *CreateNASFileSystemResponseBody {
	s.FileSystemName = &v
	return s
}

func (s *CreateNASFileSystemResponseBody) SetMountTargetDomain(v string) *CreateNASFileSystemResponseBody {
	s.MountTargetDomain = &v
	return s
}

func (s *CreateNASFileSystemResponseBody) SetOfficeSiteId(v string) *CreateNASFileSystemResponseBody {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateNASFileSystemResponseBody) SetRequestId(v string) *CreateNASFileSystemResponseBody {
	s.RequestId = &v
	return s
}

type CreateNASFileSystemResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNASFileSystemResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNASFileSystemResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNASFileSystemResponse) GoString() string {
	return s.String()
}

func (s *CreateNASFileSystemResponse) SetHeaders(v map[string]*string) *CreateNASFileSystemResponse {
	s.Headers = v
	return s
}

func (s *CreateNASFileSystemResponse) SetStatusCode(v int32) *CreateNASFileSystemResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNASFileSystemResponse) SetBody(v *CreateNASFileSystemResponseBody) *CreateNASFileSystemResponse {
	s.Body = v
	return s
}

type CreateNetworkPackageRequest struct {
	// Specifies whether to enable the automatic payment feature.
	//
	// Valid values:
	//
	// 	- true (default): enables the auto-payment feature.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     Make sure that your account has sufficient balance. Otherwise, no order is generated.
	//
	//     <!-- -->
	//
	// 	- false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// Specifies whether to enable auto-renewal for the premium bandwidth plan.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.
	//
	// 	- Valid values if the premium bandwidth plan is a subscription plan: 2 to 1000.
	//
	// 	- Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by data transfer (PayByTraffic): 2 to 200.
	//
	// 	- Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by fixed bandwidth (PayByBandwidth): 2 to 1000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The charge type of the premium bandwidth plan.
	//
	// 	- Valid value when the `PayType` parameter is set to `PrePaid`:
	//
	//     	- PayByBandwidth: charges by fixed bandwidth.
	//
	// 	- Valid values when the `PayType` parameter is set to `PostPaid`:
	//
	//     	- PayByTraffic: charges by data transfer.
	//
	//     	- PayByBandwidth: charges by fixed bandwidth.
	//
	// example:
	//
	// PayByTraffic
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The billing method of the premium bandwidth plan.
	//
	// Valid values:
	//
	// 	- PostPaid: pay-as-you-go
	//
	// 	- PrePaid: subscription
	//
	// example:
	//
	// PrePaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The subscription duration of the premium bandwidth plan. This parameter takes effect and is required only when the `PayType` parameter is set to `PrePaid`. The valid values of this parameter vary based on the `PeriodUnit` value.
	//
	// 	- Valid value when the `PeriodUnit` parameter is set to `Week`: 1
	//
	// 	- Valid values when the `PeriodUnit` parameter is set to `Month`: 1, 2, 3, and 6
	//
	// 	- Valid values when the `PeriodUnit` parameter is set to `Year`: 1, 2, and 3
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration of the premium bandwidth plan. This parameter takes effect and is required only when the `PayType` parameter is set to `PrePaid`.
	//
	// Valid values:
	//
	// 	- Month
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Year
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Week
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The ID of the sales promotion.
	//
	// example:
	//
	// 23141
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CreateNetworkPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkPackageRequest) GoString() string {
	return s.String()
}

func (s *CreateNetworkPackageRequest) SetAutoPay(v bool) *CreateNetworkPackageRequest {
	s.AutoPay = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetAutoRenew(v bool) *CreateNetworkPackageRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetBandwidth(v int32) *CreateNetworkPackageRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetInternetChargeType(v string) *CreateNetworkPackageRequest {
	s.InternetChargeType = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetOfficeSiteId(v string) *CreateNetworkPackageRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetPayType(v string) *CreateNetworkPackageRequest {
	s.PayType = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetPeriod(v int32) *CreateNetworkPackageRequest {
	s.Period = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetPeriodUnit(v string) *CreateNetworkPackageRequest {
	s.PeriodUnit = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetPromotionId(v string) *CreateNetworkPackageRequest {
	s.PromotionId = &v
	return s
}

func (s *CreateNetworkPackageRequest) SetRegionId(v string) *CreateNetworkPackageRequest {
	s.RegionId = &v
	return s
}

type CreateNetworkPackageResponseBody struct {
	// The ID of the premium bandwidth plan.
	//
	// example:
	//
	// np-amtp8e8q1o9e4****
	NetworkPackageId *string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty"`
	// The ID of the bill.
	//
	// example:
	//
	// 234526262716724
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 269BDB16-2CD8-4865-84BD-11C40BC21DB0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateNetworkPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkPackageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNetworkPackageResponseBody) SetNetworkPackageId(v string) *CreateNetworkPackageResponseBody {
	s.NetworkPackageId = &v
	return s
}

func (s *CreateNetworkPackageResponseBody) SetOrderId(v string) *CreateNetworkPackageResponseBody {
	s.OrderId = &v
	return s
}

func (s *CreateNetworkPackageResponseBody) SetRequestId(v string) *CreateNetworkPackageResponseBody {
	s.RequestId = &v
	return s
}

type CreateNetworkPackageResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateNetworkPackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateNetworkPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNetworkPackageResponse) GoString() string {
	return s.String()
}

func (s *CreateNetworkPackageResponse) SetHeaders(v map[string]*string) *CreateNetworkPackageResponse {
	s.Headers = v
	return s
}

func (s *CreateNetworkPackageResponse) SetStatusCode(v int32) *CreateNetworkPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateNetworkPackageResponse) SetBody(v *CreateNetworkPackageResponseBody) *CreateNetworkPackageResponse {
	s.Body = v
	return s
}

type CreatePolicyGroupRequest struct {
	// Specifies whether users have the administrator permissions after they connect to cloud desktops.
	//
	// >  This parameter is in invitational preview and not available to the public.
	//
	// example:
	//
	// deny
	AdminAccess *string `json:"AdminAccess,omitempty" xml:"AdminAccess,omitempty"`
	// Specifies whether to enable the anti-screenshot feature.
	//
	// Valid values:
	//
	// 	- off: Anti-screenshot is disabled. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: Anti-screenshot is enabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	AppContentProtection *string `json:"AppContentProtection,omitempty" xml:"AppContentProtection,omitempty"`
	// The client IP address whitelists. Only the client IP addresses in whitelists can access the cloud desktop.
	AuthorizeAccessPolicyRule []*CreatePolicyGroupRequestAuthorizeAccessPolicyRule `json:"AuthorizeAccessPolicyRule,omitempty" xml:"AuthorizeAccessPolicyRule,omitempty" type:"Repeated"`
	// The security group rules.
	AuthorizeSecurityPolicyRule []*CreatePolicyGroupRequestAuthorizeSecurityPolicyRule `json:"AuthorizeSecurityPolicyRule,omitempty" xml:"AuthorizeSecurityPolicyRule,omitempty" type:"Repeated"`
	// Specifies whether to enable the webcam redirection feature.
	//
	// Valid values:
	//
	// 	- off: Webcam redirection is disabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: Webcam redirection is enabled. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// on
	CameraRedirect *string `json:"CameraRedirect,omitempty" xml:"CameraRedirect,omitempty"`
	// The logon methods. You can use this parameter to determine which clients can be used to connect to the cloud desktop.
	ClientType []*CreatePolicyGroupRequestClientType `json:"ClientType,omitempty" xml:"ClientType,omitempty" type:"Repeated"`
	// The permissions on the clipboard.
	//
	// Valid values:
	//
	// 	- read: specifies one-way transfer
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     You can copy data from your local computer to the cloud desktop, but cannot copy data from the cloud desktop to your local computer.
	//
	//     <!-- -->
	//
	// 	- readwrite: specifies two-way transfer
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     You can copy data between your local computer and the cloud desktop.
	//
	//     <!-- -->
	//
	// 	- off: disables both one-way and two-way transfer
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     You cannot copy data between your local computer and the cloud desktop. This value is the default value.
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	Clipboard       *string                                    `json:"Clipboard,omitempty" xml:"Clipboard,omitempty"`
	DeviceRedirects []*CreatePolicyGroupRequestDeviceRedirects `json:"DeviceRedirects,omitempty" xml:"DeviceRedirects,omitempty" type:"Repeated"`
	DeviceRules     []*CreatePolicyGroupRequestDeviceRules     `json:"DeviceRules,omitempty" xml:"DeviceRules,omitempty" type:"Repeated"`
	// Access control for domain names. The wildcard character (\\*) is supported for domain names. Separate multiple domain names with commas (,). Valid values:
	//
	// 	- off
	//
	// 	- on
	//
	// example:
	//
	// off
	DomainList *string `json:"DomainList,omitempty" xml:"DomainList,omitempty"`
	// The details of the domain name resolution policy.
	DomainResolveRule []*CreatePolicyGroupRequestDomainResolveRule `json:"DomainResolveRule,omitempty" xml:"DomainResolveRule,omitempty" type:"Repeated"`
	// The type of the domain name resolution policy.
	//
	// Valid values:
	//
	// 	- OFF
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ON
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// OFF
	DomainResolveRuleType *string `json:"DomainResolveRuleType,omitempty" xml:"DomainResolveRuleType,omitempty"`
	// Specifies whether to allow end users to seek assistance from the administrator. Valid values: ON OFF
	//
	// example:
	//
	// ON
	EndUserApplyAdminCoordinate *string `json:"EndUserApplyAdminCoordinate,omitempty" xml:"EndUserApplyAdminCoordinate,omitempty"`
	// The switch for collaboration between end users. Valid values: ON OFF
	//
	// example:
	//
	// ON
	EndUserGroupCoordinate *string `json:"EndUserGroupCoordinate,omitempty" xml:"EndUserGroupCoordinate,omitempty"`
	// Specifies whether to enable the image display quality feature for the Graphics cloud desktop. If you have high requirements for desktop performance and user experience, we recommend that you enable this feature. For example, you can enable this feature in professional design scenarios.
	//
	// Valid values:
	//
	// 	- off
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	GpuAcceleration *string `json:"GpuAcceleration,omitempty" xml:"GpuAcceleration,omitempty"`
	// The policy for HTML5 client access.
	//
	// > We recommend that you use the ClientType parameter to manage the type of Alibaba Cloud Workspace clients for desktop connection.
	//
	// Valid values:
	//
	// 	- off: HTML5 client access is disabled. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: HTML5 client access is enabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	Html5Access *string `json:"Html5Access,omitempty" xml:"Html5Access,omitempty"`
	// The file transfer policy for HTML5 clients.
	//
	// Valid values:
	//
	// 	- all: Files can be uploaded and downloaded between your computer and HTML5 clients.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- download: Files on HTML5 clients can be downloaded to your computer.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- upload: Files on your computer can be uploaded to HTML5 clients.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- off: File transfer between HTML5 clients and your computer is disabled. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	Html5FileTransfer *string `json:"Html5FileTransfer,omitempty" xml:"Html5FileTransfer,omitempty"`
	// The protocol that you want to use for network communication. Valid values: -TCP: Only TCP is allowed. -BOTH: Automatic switch between TCP and UDP is allowed. Default value: TCP.
	//
	// example:
	//
	// both
	InternetCommunicationProtocol *string `json:"InternetCommunicationProtocol,omitempty" xml:"InternetCommunicationProtocol,omitempty"`
	// The permissions on local disk mapping.
	//
	// Valid values:
	//
	// 	- read: read-only
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     The disks on your local computer are mapped to the cloud desktop. You can only read (copy) files on the local computer.
	//
	//     <!-- -->
	//
	// 	- readwrite: read and write
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     The disks on your local computer are mapped to the cloud desktop. You can read (copy) and modify files on your local computer.
	//
	//     <!-- -->
	//
	// 	- off:
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     The disks on your local computer are not mapped to the cloud desktop. This value is the default value.
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	LocalDrive       *string `json:"LocalDrive,omitempty" xml:"LocalDrive,omitempty"`
	MaxReconnectTime *int32  `json:"MaxReconnectTime,omitempty" xml:"MaxReconnectTime,omitempty"`
	// The name of the policy.
	//
	// example:
	//
	// testPolicyGroupName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Specifies whether to enable the network redirection feature.
	//
	// > This feature is in invitational preview and is not available to the public.
	//
	// Valid values:
	//
	// 	- off (default): The network redirection feature is disabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: The network redirection feature is enabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	NetRedirect *string `json:"NetRedirect,omitempty" xml:"NetRedirect,omitempty"`
	// Specifies whether to allow user preemption.
	//
	// > To improve user experience and ensure data security, multiple end users cannot connect to the same cloud desktop at the same time. The default value of this parameter is `off`, and the value cannot be changed.
	//
	// example:
	//
	// off
	PreemptLogin *string `json:"PreemptLogin,omitempty" xml:"PreemptLogin,omitempty"`
	// The names of the users that are allowed to connect to the same cloud desktop at the same time. You can specify up to five usernames.
	//
	// > To improve user experience and ensure data security, we recommend that you disable the user preemption feature.
	//
	// example:
	//
	// Alice
	PreemptLoginUser []*string `json:"PreemptLoginUser,omitempty" xml:"PreemptLoginUser,omitempty" type:"Repeated"`
	// The policy for printer redirection.
	//
	// Valid values:
	//
	// 	- off: Printer redirection is disabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: Printer redirection is enabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// on
	PrinterRedirection *string `json:"PrinterRedirection,omitempty" xml:"PrinterRedirection,omitempty"`
	// Specifies whether to enable the custom screen recording feature.
	//
	// Valid values:
	//
	// 	- off: Custom screen recording is disabled. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: Custom screen recording is enabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// OFF
	RecordContent *string `json:"RecordContent,omitempty" xml:"RecordContent,omitempty"`
	// The duration in which the custom screen recording is valid. Default value: 30. Unit: days.
	//
	// example:
	//
	// 30
	RecordContentExpires *int64 `json:"RecordContentExpires,omitempty" xml:"RecordContentExpires,omitempty"`
	// Specifies whether to enable screen recording.
	//
	// Valid values:
	//
	// 	- ALLTIME: All operations that are performed by end users on cloud desktops are recorded. The recording starts immediately when end users connect to cloud desktops and ends when the end users disconnect from the cloud desktops.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PERIOD: The operations that are performed by end users on cloud desktops during a specified period of time are recorded. You must set the start time and end time for the recording period.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- OFF: Screen recording is disabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// OFF
	Recording *string `json:"Recording,omitempty" xml:"Recording,omitempty"`
	// Specifies whether to record audio data during the screen recording. Valid values:
	//
	// 	- on: records audio and video data
	//
	// 	- off: records only video data
	//
	// example:
	//
	// on
	RecordingAudio *string `json:"RecordingAudio,omitempty" xml:"RecordingAudio,omitempty"`
	// The duration from the time when the screen recording starts to the time when the screen recording stops. If you specify the Recording parameter, you must also specify the RecordingDuration parameter. When the specified duration ends, a recording file is generated.
	//
	// example:
	//
	// 15
	RecordingDuration *int32 `json:"RecordingDuration,omitempty" xml:"RecordingDuration,omitempty"`
	// The time when the screen recording stops. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.
	//
	// example:
	//
	// 08:59:00
	RecordingEndTime *string `json:"RecordingEndTime,omitempty" xml:"RecordingEndTime,omitempty"`
	// The duration in which the screen recording is valid. Unit: days.
	//
	// example:
	//
	// 15
	RecordingExpires *int64 `json:"RecordingExpires,omitempty" xml:"RecordingExpires,omitempty"`
	// The frame rate of screen recording.
	//
	// Valid values:
	//
	// 	- 2
	//
	// 	- 5
	//
	// 	- 10
	//
	// 	- 15
	//
	// example:
	//
	// 2
	RecordingFps *int64 `json:"RecordingFps,omitempty" xml:"RecordingFps,omitempty"`
	// The time when screen recording starts. Specify the value in the HH:MM:SS format. The value of this parameter is valid only if you set the Recording parameter to PERIOD.
	//
	// example:
	//
	// 08:00:00
	RecordingStartTime *string `json:"RecordingStartTime,omitempty" xml:"RecordingStartTime,omitempty"`
	// Specifies whether the feature to send screen recording notifications to clients is enabled. Valid values: on and off.
	//
	// example:
	//
	// off
	RecordingUserNotify *string `json:"RecordingUserNotify,omitempty" xml:"RecordingUserNotify,omitempty"`
	// The notification content sent to clients when screen recording is enabled. By default, you do not need to specify this parameter.
	//
	// example:
	//
	// Your desktop is being recorded.
	RecordingUserNotifyMessage *string `json:"RecordingUserNotifyMessage,omitempty" xml:"RecordingUserNotifyMessage,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The permission to control the keyboard and the mouse during remote assistance.
	//
	// Valid values:
	//
	// 	- optionalControl: By default, this feature is disabled. You can enable it by applying permissions.
	//
	// 	- fullControl: The permission is granted.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- disableControl: The permission is revoked.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// fullControl
	RemoteCoordinate *string `json:"RemoteCoordinate,omitempty" xml:"RemoteCoordinate,omitempty"`
	// The effective scope of the policy. Valid values:
	//
	// 	- GLOBAL: The policy takes effect globally.
	//
	// 	- IP: The policy takes effect for specified IP addresses.
	//
	// example:
	//
	// GLOBAL
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// The effective CIDR block ranges. If you set the Scope parameter to IP, you must specify this parameter.
	ScopeValue []*string `json:"ScopeValue,omitempty" xml:"ScopeValue,omitempty" type:"Repeated"`
	// Specifies whether to enable USB redirection.
	//
	// Valid values:
	//
	// 	- off: USB redirection is disabled. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: USB redirection is enabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	UsbRedirect *string `json:"UsbRedirect,omitempty" xml:"UsbRedirect,omitempty"`
	// The USB redirection rules.
	UsbSupplyRedirectRule []*CreatePolicyGroupRequestUsbSupplyRedirectRule `json:"UsbSupplyRedirectRule,omitempty" xml:"UsbSupplyRedirectRule,omitempty" type:"Repeated"`
	// Specifies whether to enable the multimedia redirection feature. Valid values:
	//
	// 	- on: Multimedia redirection is enabled.
	//
	// 	- off: Multimedia redirection is disabled.
	//
	// example:
	//
	// on
	VideoRedirect *string `json:"VideoRedirect,omitempty" xml:"VideoRedirect,omitempty"`
	// The policy for image display quality.
	//
	// Valid values:
	//
	// 	- high
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- low
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- lossless
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- medium: adaptive. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// medium
	VisualQuality *string `json:"VisualQuality,omitempty" xml:"VisualQuality,omitempty"`
	// Specifies whether to enable watermarking.
	//
	// Valid values:
	//
	// 	- off: Watermarking is disabled. This value is the default value.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- on: Watermarking is enabled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// off
	Watermark *string `json:"Watermark,omitempty" xml:"Watermark,omitempty"`
	// The anti-screen photo feature. Valid values: on and off.
	//
	// example:
	//
	// off
	WatermarkAntiCam *string `json:"WatermarkAntiCam,omitempty" xml:"WatermarkAntiCam,omitempty"`
	// The font color of the watermark. Valid values: 0 to 16777215.
	//
	// example:
	//
	// 0
	WatermarkColor *int32 `json:"WatermarkColor,omitempty" xml:"WatermarkColor,omitempty"`
	// The inclination angle of the watermark. Valid values: -10 to -30.
	//
	// example:
	//
	// -10
	WatermarkDegree *float64 `json:"WatermarkDegree,omitempty" xml:"WatermarkDegree,omitempty"`
	// The font size of the watermark. Valid values: 10 to 20.
	//
	// example:
	//
	// 10
	WatermarkFontSize *int32 `json:"WatermarkFontSize,omitempty" xml:"WatermarkFontSize,omitempty"`
	// The font style of the watermark. Valid values:
	//
	// 	- plain
	//
	// 	- bold
	//
	// example:
	//
	// plain
	WatermarkFontStyle *string `json:"WatermarkFontStyle,omitempty" xml:"WatermarkFontStyle,omitempty"`
	// The invisible watermark enhancement feature. Valid values: low, medium, and high.
	//
	// example:
	//
	// medium
	WatermarkPower *string `json:"WatermarkPower,omitempty" xml:"WatermarkPower,omitempty"`
	// The number of watermark rows. This parameter is now invalid.
	//
	// example:
	//
	// 5
	WatermarkRowAmount *int32 `json:"WatermarkRowAmount,omitempty" xml:"WatermarkRowAmount,omitempty"`
	// The security priority for invisible watermarks. Valid values: on and off.
	//
	// example:
	//
	// on
	WatermarkSecurity *string `json:"WatermarkSecurity,omitempty" xml:"WatermarkSecurity,omitempty"`
	// The transparency of the watermark.
	//
	// Valid values:
	//
	// 	- LIGHT
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DARK
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- MIDDLE
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// LIGHT
	WatermarkTransparency *string `json:"WatermarkTransparency,omitempty" xml:"WatermarkTransparency,omitempty"`
	// The transparency of the watermark. A larger value specifies that the watermark is less transparent. Valid values: 10 to 100.
	//
	// example:
	//
	// 10
	WatermarkTransparencyValue *int32 `json:"WatermarkTransparencyValue,omitempty" xml:"WatermarkTransparencyValue,omitempty"`
	// The type of the watermark. You can specify multiple types of watermarks at the same time. Separate multiple watermark types with commas (,).
	//
	// Valid values:
	//
	// 	- EndUserId: The ID of the end user is displayed.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- HostName: The rightmost 15 characters of the cloud desktop ID are displayed.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// EndUserId
	WatermarkType *string `json:"WatermarkType,omitempty" xml:"WatermarkType,omitempty"`
	WyAssistant   *string `json:"WyAssistant,omitempty" xml:"WyAssistant,omitempty"`
}

func (s CreatePolicyGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequest) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequest) SetAdminAccess(v string) *CreatePolicyGroupRequest {
	s.AdminAccess = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetAppContentProtection(v string) *CreatePolicyGroupRequest {
	s.AppContentProtection = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetAuthorizeAccessPolicyRule(v []*CreatePolicyGroupRequestAuthorizeAccessPolicyRule) *CreatePolicyGroupRequest {
	s.AuthorizeAccessPolicyRule = v
	return s
}

func (s *CreatePolicyGroupRequest) SetAuthorizeSecurityPolicyRule(v []*CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) *CreatePolicyGroupRequest {
	s.AuthorizeSecurityPolicyRule = v
	return s
}

func (s *CreatePolicyGroupRequest) SetCameraRedirect(v string) *CreatePolicyGroupRequest {
	s.CameraRedirect = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetClientType(v []*CreatePolicyGroupRequestClientType) *CreatePolicyGroupRequest {
	s.ClientType = v
	return s
}

func (s *CreatePolicyGroupRequest) SetClipboard(v string) *CreatePolicyGroupRequest {
	s.Clipboard = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetDeviceRedirects(v []*CreatePolicyGroupRequestDeviceRedirects) *CreatePolicyGroupRequest {
	s.DeviceRedirects = v
	return s
}

func (s *CreatePolicyGroupRequest) SetDeviceRules(v []*CreatePolicyGroupRequestDeviceRules) *CreatePolicyGroupRequest {
	s.DeviceRules = v
	return s
}

func (s *CreatePolicyGroupRequest) SetDomainList(v string) *CreatePolicyGroupRequest {
	s.DomainList = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetDomainResolveRule(v []*CreatePolicyGroupRequestDomainResolveRule) *CreatePolicyGroupRequest {
	s.DomainResolveRule = v
	return s
}

func (s *CreatePolicyGroupRequest) SetDomainResolveRuleType(v string) *CreatePolicyGroupRequest {
	s.DomainResolveRuleType = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetEndUserApplyAdminCoordinate(v string) *CreatePolicyGroupRequest {
	s.EndUserApplyAdminCoordinate = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetEndUserGroupCoordinate(v string) *CreatePolicyGroupRequest {
	s.EndUserGroupCoordinate = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetGpuAcceleration(v string) *CreatePolicyGroupRequest {
	s.GpuAcceleration = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetHtml5Access(v string) *CreatePolicyGroupRequest {
	s.Html5Access = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetHtml5FileTransfer(v string) *CreatePolicyGroupRequest {
	s.Html5FileTransfer = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetInternetCommunicationProtocol(v string) *CreatePolicyGroupRequest {
	s.InternetCommunicationProtocol = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetLocalDrive(v string) *CreatePolicyGroupRequest {
	s.LocalDrive = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetMaxReconnectTime(v int32) *CreatePolicyGroupRequest {
	s.MaxReconnectTime = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetName(v string) *CreatePolicyGroupRequest {
	s.Name = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetNetRedirect(v string) *CreatePolicyGroupRequest {
	s.NetRedirect = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetPreemptLogin(v string) *CreatePolicyGroupRequest {
	s.PreemptLogin = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetPreemptLoginUser(v []*string) *CreatePolicyGroupRequest {
	s.PreemptLoginUser = v
	return s
}

func (s *CreatePolicyGroupRequest) SetPrinterRedirection(v string) *CreatePolicyGroupRequest {
	s.PrinterRedirection = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordContent(v string) *CreatePolicyGroupRequest {
	s.RecordContent = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordContentExpires(v int64) *CreatePolicyGroupRequest {
	s.RecordContentExpires = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecording(v string) *CreatePolicyGroupRequest {
	s.Recording = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingAudio(v string) *CreatePolicyGroupRequest {
	s.RecordingAudio = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingDuration(v int32) *CreatePolicyGroupRequest {
	s.RecordingDuration = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingEndTime(v string) *CreatePolicyGroupRequest {
	s.RecordingEndTime = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingExpires(v int64) *CreatePolicyGroupRequest {
	s.RecordingExpires = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingFps(v int64) *CreatePolicyGroupRequest {
	s.RecordingFps = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingStartTime(v string) *CreatePolicyGroupRequest {
	s.RecordingStartTime = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingUserNotify(v string) *CreatePolicyGroupRequest {
	s.RecordingUserNotify = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRecordingUserNotifyMessage(v string) *CreatePolicyGroupRequest {
	s.RecordingUserNotifyMessage = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRegionId(v string) *CreatePolicyGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetRemoteCoordinate(v string) *CreatePolicyGroupRequest {
	s.RemoteCoordinate = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetScope(v string) *CreatePolicyGroupRequest {
	s.Scope = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetScopeValue(v []*string) *CreatePolicyGroupRequest {
	s.ScopeValue = v
	return s
}

func (s *CreatePolicyGroupRequest) SetUsbRedirect(v string) *CreatePolicyGroupRequest {
	s.UsbRedirect = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetUsbSupplyRedirectRule(v []*CreatePolicyGroupRequestUsbSupplyRedirectRule) *CreatePolicyGroupRequest {
	s.UsbSupplyRedirectRule = v
	return s
}

func (s *CreatePolicyGroupRequest) SetVideoRedirect(v string) *CreatePolicyGroupRequest {
	s.VideoRedirect = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetVisualQuality(v string) *CreatePolicyGroupRequest {
	s.VisualQuality = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermark(v string) *CreatePolicyGroupRequest {
	s.Watermark = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkAntiCam(v string) *CreatePolicyGroupRequest {
	s.WatermarkAntiCam = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkColor(v int32) *CreatePolicyGroupRequest {
	s.WatermarkColor = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkDegree(v float64) *CreatePolicyGroupRequest {
	s.WatermarkDegree = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkFontSize(v int32) *CreatePolicyGroupRequest {
	s.WatermarkFontSize = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkFontStyle(v string) *CreatePolicyGroupRequest {
	s.WatermarkFontStyle = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkPower(v string) *CreatePolicyGroupRequest {
	s.WatermarkPower = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkRowAmount(v int32) *CreatePolicyGroupRequest {
	s.WatermarkRowAmount = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkSecurity(v string) *CreatePolicyGroupRequest {
	s.WatermarkSecurity = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkTransparency(v string) *CreatePolicyGroupRequest {
	s.WatermarkTransparency = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkTransparencyValue(v int32) *CreatePolicyGroupRequest {
	s.WatermarkTransparencyValue = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWatermarkType(v string) *CreatePolicyGroupRequest {
	s.WatermarkType = &v
	return s
}

func (s *CreatePolicyGroupRequest) SetWyAssistant(v string) *CreatePolicyGroupRequest {
	s.WyAssistant = &v
	return s
}

type CreatePolicyGroupRequestAuthorizeAccessPolicyRule struct {
	// The IPv4 CIDR block that you want to access from the client. The value is an IPv4 CIDR block.
	//
	// example:
	//
	// 47.100.XX.XX/16
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The description of the client IP address whitelist.
	//
	// example:
	//
	// North China Branch
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s CreatePolicyGroupRequestAuthorizeAccessPolicyRule) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequestAuthorizeAccessPolicyRule) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequestAuthorizeAccessPolicyRule) SetCidrIp(v string) *CreatePolicyGroupRequestAuthorizeAccessPolicyRule {
	s.CidrIp = &v
	return s
}

func (s *CreatePolicyGroupRequestAuthorizeAccessPolicyRule) SetDescription(v string) *CreatePolicyGroupRequestAuthorizeAccessPolicyRule {
	s.Description = &v
	return s
}

type CreatePolicyGroupRequestAuthorizeSecurityPolicyRule struct {
	// The IPv4 CIDR block of the security group rule.
	//
	// example:
	//
	// 47.100.XX.XX/16
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The description of the security group rule.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The protocol type of the security group rule.
	//
	// Valid values:
	//
	// 	- TCP
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- UDP
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ALL: all protocols
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- GRE
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ICMP: ICMP (IPv4)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// tcp
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The authorization policy of the security group rule.
	//
	// Valid values:
	//
	// 	- drop: denies all access requests
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     If no denied messages are returned, the requests timed out or failed.
	//
	//     <!-- -->
	//
	// 	- accept: accepts all access requests
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     This value is the default value.
	//
	//     <!-- -->
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The port range of the security group rule. The value range of this parameter varies based on the value of the IpProtocol parameter.
	//
	// 	- If you set the IpProtocol parameter to TCP or UDP, the value range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
	//
	// 	- If you set the IpProtocol parameter to ICMP, the start port number and the end port number are -1/-1.
	//
	// 	- If you set the IpProtocol parameter to GRE, the start port number and the end port number are -1/-1.
	//
	// 	- If you set the IpProtocol parameter to ALL, the start port number and the end port number are -1/-1.
	//
	// For more information about the common ports of applications, see [Common ports](https://help.aliyun.com/document_detail/40724.html).
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the security group rule. A smaller value specifies a higher priority.\\
	//
	// Valid values: 1 to 60.\\
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The direction of the security group rule.
	//
	// Valid values:
	//
	// 	- outflow: outbound
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- inflow: inbound
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// inflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) SetCidrIp(v string) *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.CidrIp = &v
	return s
}

func (s *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) SetDescription(v string) *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Description = &v
	return s
}

func (s *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) SetIpProtocol(v string) *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.IpProtocol = &v
	return s
}

func (s *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) SetPolicy(v string) *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Policy = &v
	return s
}

func (s *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) SetPortRange(v string) *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.PortRange = &v
	return s
}

func (s *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) SetPriority(v string) *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Priority = &v
	return s
}

func (s *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule) SetType(v string) *CreatePolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Type = &v
	return s
}

type CreatePolicyGroupRequestClientType struct {
	// The type of the client.
	//
	// > By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.
	//
	// Valid values:
	//
	// 	- html5: web clients
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- android: Android clients
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- linux: Alibaba Cloud Workspace clients
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ios: iOS clients
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- windows: Windows clients
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- macos: macOS clients
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// windows
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// Specifies whether a specific client type can be used to connect to the cloud desktop.
	//
	// > By default, if you do not specify the ClientType parameter, all types of clients can be used to connect to cloud desktops.
	//
	// Valid values:
	//
	// 	- OFF: Clients of the specified type cannot be used to connect to cloud desktops.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ON: Clients of the specified type can be used to connect to cloud desktops.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ON
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreatePolicyGroupRequestClientType) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequestClientType) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequestClientType) SetClientType(v string) *CreatePolicyGroupRequestClientType {
	s.ClientType = &v
	return s
}

func (s *CreatePolicyGroupRequestClientType) SetStatus(v string) *CreatePolicyGroupRequestClientType {
	s.Status = &v
	return s
}

type CreatePolicyGroupRequestDeviceRedirects struct {
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	RedirectType *string `json:"RedirectType,omitempty" xml:"RedirectType,omitempty"`
}

func (s CreatePolicyGroupRequestDeviceRedirects) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequestDeviceRedirects) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequestDeviceRedirects) SetDeviceType(v string) *CreatePolicyGroupRequestDeviceRedirects {
	s.DeviceType = &v
	return s
}

func (s *CreatePolicyGroupRequestDeviceRedirects) SetRedirectType(v string) *CreatePolicyGroupRequestDeviceRedirects {
	s.RedirectType = &v
	return s
}

type CreatePolicyGroupRequestDeviceRules struct {
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DevicePid    *string `json:"DevicePid,omitempty" xml:"DevicePid,omitempty"`
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	DeviceVid    *string `json:"DeviceVid,omitempty" xml:"DeviceVid,omitempty"`
	OptCommand   *string `json:"OptCommand,omitempty" xml:"OptCommand,omitempty"`
	RedirectType *string `json:"RedirectType,omitempty" xml:"RedirectType,omitempty"`
}

func (s CreatePolicyGroupRequestDeviceRules) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequestDeviceRules) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequestDeviceRules) SetDeviceName(v string) *CreatePolicyGroupRequestDeviceRules {
	s.DeviceName = &v
	return s
}

func (s *CreatePolicyGroupRequestDeviceRules) SetDevicePid(v string) *CreatePolicyGroupRequestDeviceRules {
	s.DevicePid = &v
	return s
}

func (s *CreatePolicyGroupRequestDeviceRules) SetDeviceType(v string) *CreatePolicyGroupRequestDeviceRules {
	s.DeviceType = &v
	return s
}

func (s *CreatePolicyGroupRequestDeviceRules) SetDeviceVid(v string) *CreatePolicyGroupRequestDeviceRules {
	s.DeviceVid = &v
	return s
}

func (s *CreatePolicyGroupRequestDeviceRules) SetOptCommand(v string) *CreatePolicyGroupRequestDeviceRules {
	s.OptCommand = &v
	return s
}

func (s *CreatePolicyGroupRequestDeviceRules) SetRedirectType(v string) *CreatePolicyGroupRequestDeviceRules {
	s.RedirectType = &v
	return s
}

type CreatePolicyGroupRequestDomainResolveRule struct {
	// The description of the policy.
	//
	// example:
	//
	// system policy
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The domain name.
	//
	// example:
	//
	// *.baidu.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// Specifies whether to allow the policy.
	//
	// Valid values:
	//
	// 	- allow
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- block
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// allow
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
}

func (s CreatePolicyGroupRequestDomainResolveRule) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequestDomainResolveRule) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequestDomainResolveRule) SetDescription(v string) *CreatePolicyGroupRequestDomainResolveRule {
	s.Description = &v
	return s
}

func (s *CreatePolicyGroupRequestDomainResolveRule) SetDomain(v string) *CreatePolicyGroupRequestDomainResolveRule {
	s.Domain = &v
	return s
}

func (s *CreatePolicyGroupRequestDomainResolveRule) SetPolicy(v string) *CreatePolicyGroupRequestDomainResolveRule {
	s.Policy = &v
	return s
}

type CreatePolicyGroupRequestUsbSupplyRedirectRule struct {
	// The description of the rule.
	//
	// example:
	//
	// Test rule
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The class of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
	//
	// example:
	//
	// 0Eh
	DeviceClass *string `json:"DeviceClass,omitempty" xml:"DeviceClass,omitempty"`
	// The subclass of the device. If you set the `usbRuleType` parameter to 1, you must specify this parameter. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
	//
	// example:
	//
	// xxh
	DeviceSubclass *string `json:"DeviceSubclass,omitempty" xml:"DeviceSubclass,omitempty"`
	// The ID of the service.
	//
	// example:
	//
	// 08**
	ProductId *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	// The type of USB redirection.
	//
	// Valid values:
	//
	// 	- 1: allows USB redirection
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- 2: forbids USB redirection
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// 1
	UsbRedirectType *int64 `json:"UsbRedirectType,omitempty" xml:"UsbRedirectType,omitempty"`
	// The type of the USB redirection rule.
	//
	// Valid values:
	//
	// 	- 1: by device class
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- 2: by device vendor
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// 1
	UsbRuleType *int64 `json:"UsbRuleType,omitempty" xml:"UsbRuleType,omitempty"`
	// The ID of the vendor. For more information, see [Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).
	//
	// example:
	//
	// 04**
	VendorId *string `json:"VendorId,omitempty" xml:"VendorId,omitempty"`
}

func (s CreatePolicyGroupRequestUsbSupplyRedirectRule) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupRequestUsbSupplyRedirectRule) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupRequestUsbSupplyRedirectRule) SetDescription(v string) *CreatePolicyGroupRequestUsbSupplyRedirectRule {
	s.Description = &v
	return s
}

func (s *CreatePolicyGroupRequestUsbSupplyRedirectRule) SetDeviceClass(v string) *CreatePolicyGroupRequestUsbSupplyRedirectRule {
	s.DeviceClass = &v
	return s
}

func (s *CreatePolicyGroupRequestUsbSupplyRedirectRule) SetDeviceSubclass(v string) *CreatePolicyGroupRequestUsbSupplyRedirectRule {
	s.DeviceSubclass = &v
	return s
}

func (s *CreatePolicyGroupRequestUsbSupplyRedirectRule) SetProductId(v string) *CreatePolicyGroupRequestUsbSupplyRedirectRule {
	s.ProductId = &v
	return s
}

func (s *CreatePolicyGroupRequestUsbSupplyRedirectRule) SetUsbRedirectType(v int64) *CreatePolicyGroupRequestUsbSupplyRedirectRule {
	s.UsbRedirectType = &v
	return s
}

func (s *CreatePolicyGroupRequestUsbSupplyRedirectRule) SetUsbRuleType(v int64) *CreatePolicyGroupRequestUsbSupplyRedirectRule {
	s.UsbRuleType = &v
	return s
}

func (s *CreatePolicyGroupRequestUsbSupplyRedirectRule) SetVendorId(v string) *CreatePolicyGroupRequestUsbSupplyRedirectRule {
	s.VendorId = &v
	return s
}

type CreatePolicyGroupResponseBody struct {
	// The ID of the policy.
	//
	// example:
	//
	// pg-gx2x1dhsmthe9****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePolicyGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupResponseBody) SetPolicyGroupId(v string) *CreatePolicyGroupResponseBody {
	s.PolicyGroupId = &v
	return s
}

func (s *CreatePolicyGroupResponseBody) SetRequestId(v string) *CreatePolicyGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreatePolicyGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePolicyGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePolicyGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePolicyGroupResponse) GoString() string {
	return s.String()
}

func (s *CreatePolicyGroupResponse) SetHeaders(v map[string]*string) *CreatePolicyGroupResponse {
	s.Headers = v
	return s
}

func (s *CreatePolicyGroupResponse) SetStatusCode(v int32) *CreatePolicyGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePolicyGroupResponse) SetBody(v *CreatePolicyGroupResponseBody) *CreatePolicyGroupResponse {
	s.Body = v
	return s
}

type CreateRAMDirectoryRequest struct {
	// The method in which the cloud computer is connected.
	//
	// Valid values:
	//
	// 	- VPC
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Internet (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Any
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Internet
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// The directory name. The name must be 2 to 255 characters in length. It must start with a letter but cannot start with `http://` or `https://`. The name can contain digits, colons (:), underscores (_), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// testDirectoryName
	DirectoryName *string `json:"DirectoryName,omitempty" xml:"DirectoryName,omitempty"`
	// Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     true
	//
	//     <!-- -->
	//
	//     (default)
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Specifies whether to enable Internet access.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	EnableInternetAccess *bool `json:"EnableInternetAccess,omitempty" xml:"EnableInternetAccess,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The vSwitch IDs. You can configure only one vSwitch.
	//
	// This parameter is required.
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
}

func (s CreateRAMDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRAMDirectoryRequest) GoString() string {
	return s.String()
}

func (s *CreateRAMDirectoryRequest) SetDesktopAccessType(v string) *CreateRAMDirectoryRequest {
	s.DesktopAccessType = &v
	return s
}

func (s *CreateRAMDirectoryRequest) SetDirectoryName(v string) *CreateRAMDirectoryRequest {
	s.DirectoryName = &v
	return s
}

func (s *CreateRAMDirectoryRequest) SetEnableAdminAccess(v bool) *CreateRAMDirectoryRequest {
	s.EnableAdminAccess = &v
	return s
}

func (s *CreateRAMDirectoryRequest) SetEnableInternetAccess(v bool) *CreateRAMDirectoryRequest {
	s.EnableInternetAccess = &v
	return s
}

func (s *CreateRAMDirectoryRequest) SetRegionId(v string) *CreateRAMDirectoryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateRAMDirectoryRequest) SetVSwitchId(v []*string) *CreateRAMDirectoryRequest {
	s.VSwitchId = v
	return s
}

type CreateRAMDirectoryResponseBody struct {
	// The RAM directory ID.
	//
	// example:
	//
	// dri-uf62w3qzt4aigvlcb****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateRAMDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRAMDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRAMDirectoryResponseBody) SetDirectoryId(v string) *CreateRAMDirectoryResponseBody {
	s.DirectoryId = &v
	return s
}

func (s *CreateRAMDirectoryResponseBody) SetRequestId(v string) *CreateRAMDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type CreateRAMDirectoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateRAMDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateRAMDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRAMDirectoryResponse) GoString() string {
	return s.String()
}

func (s *CreateRAMDirectoryResponse) SetHeaders(v map[string]*string) *CreateRAMDirectoryResponse {
	s.Headers = v
	return s
}

func (s *CreateRAMDirectoryResponse) SetStatusCode(v int32) *CreateRAMDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRAMDirectoryResponse) SetBody(v *CreateRAMDirectoryResponseBody) *CreateRAMDirectoryResponse {
	s.Body = v
	return s
}

type CreateSimpleOfficeSiteRequest struct {
	// The maximum public bandwidth. Value range: 10 to 200. Unit: Mbit/s. This parameter is available if you set `EnableInternetAccess` to `true`.
	//
	// example:
	//
	// 10
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The Cloud Enterprise Network (CEN) instance ID.
	//
	// >  If you want end users to connect to cloud computers from Alibaba Cloud Workspace clients over VPCs, you can attach the office network to a CEN instance. The CEN instance is the one that connects to your on-premises network over VPN Gateway or Express Connect.
	//
	// example:
	//
	// cen-3gwy16dojz1m65****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// The ID of the Alibaba Cloud account to which the Cloud Enterprise Network (CEN) instance belongs.
	//
	// - If you do not specify the CenId parameter, or the CEN instance that is specified by the CenId parameter belongs to the current Alibaba Cloud account, skip this parameter.
	//
	// - If you specify the CenId parameter and the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, enter the ID of the Alibaba Cloud account.
	//
	// example:
	//
	// 118272523431****
	CenOwnerId *int64 `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty"`
	// The IPv4 CIDR block that you want the office network to use in the virtual private cloud (VPC) of the office network. The system automatically creates a VPC for the office network based on the IPv4 CIDR block. We recommend that you set this parameter to one of the following CIDR blocks and their subnets:
	//
	// 	- `10.0.0.0/12` (subnet mask range: 12 to 14 bits)
	//
	// 	- `172.16.0.0/12` (subnet mask range: 12 to 24 bits)
	//
	// 	- `192.168.0.0/16` (subnet mask range: 16 to 24 bits)
	//
	// example:
	//
	// 172.16.0.0/12
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// Specifies whether to create a CloudBox-based office network.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	CloudBoxOfficeSite *bool `json:"CloudBoxOfficeSite,omitempty" xml:"CloudBoxOfficeSite,omitempty"`
	// The method to connect to cloud computers from Alibaba Cloud Workspace clients.
	//
	// >  The VPC connection depends on Alibaba Cloud PrivateLink. You can use PrivateLink for free. When you set this parameter to VPC or Any, PrivateLink is automatically activated.````
	//
	// example:
	//
	// Internet
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
	//
	// Valid values:
	//
	// 	- true (default)
	//
	// 	- false
	//
	// example:
	//
	// true
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Specifies whether to enable Internet access.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	EnableInternetAccess *bool `json:"EnableInternetAccess,omitempty" xml:"EnableInternetAccess,omitempty"`
	// Specifies whether to enable trusted device verification.
	//
	// example:
	//
	// true
	NeedVerifyZeroDevice *bool `json:"NeedVerifyZeroDevice,omitempty" xml:"NeedVerifyZeroDevice,omitempty"`
	// The office network name. The name must be 2 to 255 characters in length. It can contain digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// TestOfficeSite_Simple
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the vSwitches that you want to specify in VPCs. This parameter is required only when you create CloudBox-based office networks.
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
	// The verification code. If the CEN instance that you specify for the CenId parameter belongs to another Alibaba Cloud account, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/335132.html) operation to obtain the verification code.
	//
	// example:
	//
	// 123456
	VerifyCode *string `json:"VerifyCode,omitempty" xml:"VerifyCode,omitempty"`
	// The network type of the office network.
	//
	// Valid values:
	//
	// 	- standard: advanced
	//
	// 	- basic: basic
	//
	// example:
	//
	// standard
	VpcType *string `json:"VpcType,omitempty" xml:"VpcType,omitempty"`
}

func (s CreateSimpleOfficeSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSimpleOfficeSiteRequest) GoString() string {
	return s.String()
}

func (s *CreateSimpleOfficeSiteRequest) SetBandwidth(v int32) *CreateSimpleOfficeSiteRequest {
	s.Bandwidth = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetCenId(v string) *CreateSimpleOfficeSiteRequest {
	s.CenId = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetCenOwnerId(v int64) *CreateSimpleOfficeSiteRequest {
	s.CenOwnerId = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetCidrBlock(v string) *CreateSimpleOfficeSiteRequest {
	s.CidrBlock = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetCloudBoxOfficeSite(v bool) *CreateSimpleOfficeSiteRequest {
	s.CloudBoxOfficeSite = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetDesktopAccessType(v string) *CreateSimpleOfficeSiteRequest {
	s.DesktopAccessType = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetEnableAdminAccess(v bool) *CreateSimpleOfficeSiteRequest {
	s.EnableAdminAccess = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetEnableInternetAccess(v bool) *CreateSimpleOfficeSiteRequest {
	s.EnableInternetAccess = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetNeedVerifyZeroDevice(v bool) *CreateSimpleOfficeSiteRequest {
	s.NeedVerifyZeroDevice = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetOfficeSiteName(v string) *CreateSimpleOfficeSiteRequest {
	s.OfficeSiteName = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetRegionId(v string) *CreateSimpleOfficeSiteRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetVSwitchId(v []*string) *CreateSimpleOfficeSiteRequest {
	s.VSwitchId = v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetVerifyCode(v string) *CreateSimpleOfficeSiteRequest {
	s.VerifyCode = &v
	return s
}

func (s *CreateSimpleOfficeSiteRequest) SetVpcType(v string) *CreateSimpleOfficeSiteRequest {
	s.VpcType = &v
	return s
}

type CreateSimpleOfficeSiteResponseBody struct {
	// The office network ID.
	//
	// example:
	//
	// cn-hangzhou+os-c5cy7q578s8jc****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateSimpleOfficeSiteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSimpleOfficeSiteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSimpleOfficeSiteResponseBody) SetOfficeSiteId(v string) *CreateSimpleOfficeSiteResponseBody {
	s.OfficeSiteId = &v
	return s
}

func (s *CreateSimpleOfficeSiteResponseBody) SetRequestId(v string) *CreateSimpleOfficeSiteResponseBody {
	s.RequestId = &v
	return s
}

type CreateSimpleOfficeSiteResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSimpleOfficeSiteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSimpleOfficeSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSimpleOfficeSiteResponse) GoString() string {
	return s.String()
}

func (s *CreateSimpleOfficeSiteResponse) SetHeaders(v map[string]*string) *CreateSimpleOfficeSiteResponse {
	s.Headers = v
	return s
}

func (s *CreateSimpleOfficeSiteResponse) SetStatusCode(v int32) *CreateSimpleOfficeSiteResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSimpleOfficeSiteResponse) SetBody(v *CreateSimpleOfficeSiteResponseBody) *CreateSimpleOfficeSiteResponse {
	s.Body = v
	return s
}

type CreateSnapshotRequest struct {
	// The description of the snapshot. The description can be up to 128 characters in length.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****"
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The name of the snapshot. The name must be 2 to 127 characters in length. The name must start with a letter. The name can contain letters, digits, underscores (_), and hyphens (-). The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.
	//
	// This parameter is required.
	//
	// example:
	//
	// testSnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	// The type of the disk for which you want to create a snapshot.
	//
	// Valid values:
	//
	// 	- system: system disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- data: data disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// system
	SourceDiskType *string `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
}

func (s CreateSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotRequest) GoString() string {
	return s.String()
}

func (s *CreateSnapshotRequest) SetDescription(v string) *CreateSnapshotRequest {
	s.Description = &v
	return s
}

func (s *CreateSnapshotRequest) SetDesktopId(v string) *CreateSnapshotRequest {
	s.DesktopId = &v
	return s
}

func (s *CreateSnapshotRequest) SetRegionId(v string) *CreateSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *CreateSnapshotRequest) SetSnapshotName(v string) *CreateSnapshotRequest {
	s.SnapshotName = &v
	return s
}

func (s *CreateSnapshotRequest) SetSourceDiskType(v string) *CreateSnapshotRequest {
	s.SourceDiskType = &v
	return s
}

type CreateSnapshotResponseBody struct {
	// The ID of the region.
	//
	// example:
	//
	// 3EB7FCEE-D731-4948-85A3-4B2C341CA983
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the snapshot.
	//
	// example:
	//
	// s-2ze81owrnv9pity4****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s CreateSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponseBody) SetRequestId(v string) *CreateSnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSnapshotResponseBody) SetSnapshotId(v string) *CreateSnapshotResponseBody {
	s.SnapshotId = &v
	return s
}

type CreateSnapshotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSnapshotResponse) GoString() string {
	return s.String()
}

func (s *CreateSnapshotResponse) SetHeaders(v map[string]*string) *CreateSnapshotResponse {
	s.Headers = v
	return s
}

func (s *CreateSnapshotResponse) SetStatusCode(v int32) *CreateSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSnapshotResponse) SetBody(v *CreateSnapshotResponseBody) *CreateSnapshotResponse {
	s.Body = v
	return s
}

type DeleteAutoSnapshotPolicyRequest struct {
	// The IDs of the automatic snapshot policies that you want to delete.
	//
	// This parameter is required.
	PolicyId []*string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyRequest) SetPolicyId(v []*string) *DeleteAutoSnapshotPolicyRequest {
	s.PolicyId = v
	return s
}

func (s *DeleteAutoSnapshotPolicyRequest) SetRegionId(v string) *DeleteAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

type DeleteAutoSnapshotPolicyResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 51592A88-0F2C-55E6-AD2C-2AD9C10D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyResponseBody) SetRequestId(v string) *DeleteAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DeleteAutoSnapshotPolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *DeleteAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *DeleteAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *DeleteAutoSnapshotPolicyResponse) SetStatusCode(v int32) *DeleteAutoSnapshotPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAutoSnapshotPolicyResponse) SetBody(v *DeleteAutoSnapshotPolicyResponseBody) *DeleteAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type DeleteBundlesRequest struct {
	// The IDs of the cloud computer templates. You can specify 1 to 100 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// b-cezrnfgecbich****
	BundleId []*string `json:"BundleId,omitempty" xml:"BundleId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteBundlesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteBundlesRequest) GoString() string {
	return s.String()
}

func (s *DeleteBundlesRequest) SetBundleId(v []*string) *DeleteBundlesRequest {
	s.BundleId = v
	return s
}

func (s *DeleteBundlesRequest) SetRegionId(v string) *DeleteBundlesRequest {
	s.RegionId = &v
	return s
}

type DeleteBundlesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteBundlesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteBundlesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteBundlesResponseBody) SetRequestId(v string) *DeleteBundlesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteBundlesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteBundlesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteBundlesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteBundlesResponse) GoString() string {
	return s.String()
}

func (s *DeleteBundlesResponse) SetHeaders(v map[string]*string) *DeleteBundlesResponse {
	s.Headers = v
	return s
}

func (s *DeleteBundlesResponse) SetStatusCode(v int32) *DeleteBundlesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteBundlesResponse) SetBody(v *DeleteBundlesResponseBody) *DeleteBundlesResponse {
	s.Body = v
	return s
}

type DeleteCdsFileRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-066224****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The ID of the end user who uses the cloud disk.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the file. The ID is a unique identifier for the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6333e553a133ce21e6f747cf948bb9ef95d7****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The group ID.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteCdsFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCdsFileRequest) GoString() string {
	return s.String()
}

func (s *DeleteCdsFileRequest) SetCdsId(v string) *DeleteCdsFileRequest {
	s.CdsId = &v
	return s
}

func (s *DeleteCdsFileRequest) SetEndUserId(v string) *DeleteCdsFileRequest {
	s.EndUserId = &v
	return s
}

func (s *DeleteCdsFileRequest) SetFileId(v string) *DeleteCdsFileRequest {
	s.FileId = &v
	return s
}

func (s *DeleteCdsFileRequest) SetGroupId(v string) *DeleteCdsFileRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteCdsFileRequest) SetRegionId(v string) *DeleteCdsFileRequest {
	s.RegionId = &v
	return s
}

type DeleteCdsFileResponseBody struct {
	// The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the data is returned.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 5CC5E450-FC43-4F5B-B540-9964BD31****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCdsFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCdsFileResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCdsFileResponseBody) SetCode(v string) *DeleteCdsFileResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCdsFileResponseBody) SetData(v string) *DeleteCdsFileResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCdsFileResponseBody) SetMessage(v string) *DeleteCdsFileResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCdsFileResponseBody) SetRequestId(v string) *DeleteCdsFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCdsFileResponseBody) SetSuccess(v bool) *DeleteCdsFileResponseBody {
	s.Success = &v
	return s
}

type DeleteCdsFileResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCdsFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCdsFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCdsFileResponse) GoString() string {
	return s.String()
}

func (s *DeleteCdsFileResponse) SetHeaders(v map[string]*string) *DeleteCdsFileResponse {
	s.Headers = v
	return s
}

func (s *DeleteCdsFileResponse) SetStatusCode(v int32) *DeleteCdsFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCdsFileResponse) SetBody(v *DeleteCdsFileResponseBody) *DeleteCdsFileResponse {
	s.Body = v
	return s
}

type DeleteCloudDriveGroupsRequest struct {
	// The ID of the cloud disk in Cloud Drive Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-532033****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The IDs of the teams that you want to delete. You can delete multiple teams at a time.
	GroupId []*string `json:"GroupId,omitempty" xml:"GroupId,omitempty" type:"Repeated"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteCloudDriveGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudDriveGroupsRequest) GoString() string {
	return s.String()
}

func (s *DeleteCloudDriveGroupsRequest) SetCdsId(v string) *DeleteCloudDriveGroupsRequest {
	s.CdsId = &v
	return s
}

func (s *DeleteCloudDriveGroupsRequest) SetGroupId(v []*string) *DeleteCloudDriveGroupsRequest {
	s.GroupId = v
	return s
}

func (s *DeleteCloudDriveGroupsRequest) SetRegionId(v string) *DeleteCloudDriveGroupsRequest {
	s.RegionId = &v
	return s
}

type DeleteCloudDriveGroupsResponseBody struct {
	// The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data information.
	//
	// example:
	//
	// []
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message returned. This parameter is not returned if the value of Code is `success`.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true: The request is successful. false: The request fails.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCloudDriveGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudDriveGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCloudDriveGroupsResponseBody) SetCode(v string) *DeleteCloudDriveGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCloudDriveGroupsResponseBody) SetData(v string) *DeleteCloudDriveGroupsResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCloudDriveGroupsResponseBody) SetMessage(v string) *DeleteCloudDriveGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCloudDriveGroupsResponseBody) SetRequestId(v string) *DeleteCloudDriveGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCloudDriveGroupsResponseBody) SetSuccess(v bool) *DeleteCloudDriveGroupsResponseBody {
	s.Success = &v
	return s
}

type DeleteCloudDriveGroupsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCloudDriveGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCloudDriveGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudDriveGroupsResponse) GoString() string {
	return s.String()
}

func (s *DeleteCloudDriveGroupsResponse) SetHeaders(v map[string]*string) *DeleteCloudDriveGroupsResponse {
	s.Headers = v
	return s
}

func (s *DeleteCloudDriveGroupsResponse) SetStatusCode(v int32) *DeleteCloudDriveGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCloudDriveGroupsResponse) SetBody(v *DeleteCloudDriveGroupsResponseBody) *DeleteCloudDriveGroupsResponse {
	s.Body = v
	return s
}

type DeleteCloudDriveUsersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-64326*****
	CdsId     *string   `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteCloudDriveUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudDriveUsersRequest) GoString() string {
	return s.String()
}

func (s *DeleteCloudDriveUsersRequest) SetCdsId(v string) *DeleteCloudDriveUsersRequest {
	s.CdsId = &v
	return s
}

func (s *DeleteCloudDriveUsersRequest) SetEndUserId(v []*string) *DeleteCloudDriveUsersRequest {
	s.EndUserId = v
	return s
}

func (s *DeleteCloudDriveUsersRequest) SetRegionId(v string) *DeleteCloudDriveUsersRequest {
	s.RegionId = &v
	return s
}

type DeleteCloudDriveUsersResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCloudDriveUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudDriveUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCloudDriveUsersResponseBody) SetRequestId(v string) *DeleteCloudDriveUsersResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCloudDriveUsersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCloudDriveUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCloudDriveUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudDriveUsersResponse) GoString() string {
	return s.String()
}

func (s *DeleteCloudDriveUsersResponse) SetHeaders(v map[string]*string) *DeleteCloudDriveUsersResponse {
	s.Headers = v
	return s
}

func (s *DeleteCloudDriveUsersResponse) SetStatusCode(v int32) *DeleteCloudDriveUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCloudDriveUsersResponse) SetBody(v *DeleteCloudDriveUsersResponseBody) *DeleteCloudDriveUsersResponse {
	s.Body = v
	return s
}

type DeleteDesktopGroupRequest struct {
	// The ID of the desktop group.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDesktopGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDesktopGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteDesktopGroupRequest) SetDesktopGroupId(v string) *DeleteDesktopGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DeleteDesktopGroupRequest) SetRegionId(v string) *DeleteDesktopGroupRequest {
	s.RegionId = &v
	return s
}

type DeleteDesktopGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDesktopGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDesktopGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDesktopGroupResponseBody) SetRequestId(v string) *DeleteDesktopGroupResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDesktopGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDesktopGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDesktopGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDesktopGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteDesktopGroupResponse) SetHeaders(v map[string]*string) *DeleteDesktopGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteDesktopGroupResponse) SetStatusCode(v int32) *DeleteDesktopGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDesktopGroupResponse) SetBody(v *DeleteDesktopGroupResponseBody) *DeleteDesktopGroupResponse {
	s.Body = v
	return s
}

type DeleteDesktopsRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 100 IDs.
	//
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDesktopsRequest) GoString() string {
	return s.String()
}

func (s *DeleteDesktopsRequest) SetDesktopId(v []*string) *DeleteDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *DeleteDesktopsRequest) SetRegionId(v string) *DeleteDesktopsRequest {
	s.RegionId = &v
	return s
}

type DeleteDesktopsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDesktopsResponseBody) SetRequestId(v string) *DeleteDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDesktopsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDesktopsResponse) GoString() string {
	return s.String()
}

func (s *DeleteDesktopsResponse) SetHeaders(v map[string]*string) *DeleteDesktopsResponse {
	s.Headers = v
	return s
}

func (s *DeleteDesktopsResponse) SetStatusCode(v int32) *DeleteDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDesktopsResponse) SetBody(v *DeleteDesktopsResponseBody) *DeleteDesktopsResponse {
	s.Body = v
	return s
}

type DeleteDevicesRequest struct {
	// The type of the client.
	//
	// Valid values:
	//
	// 	- 1: hardware client.
	//
	// 	- 2: software client.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ClientType *int32 `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The IDs of the devices. You can specify up to 200 IDs.
	//
	// This parameter is required.
	DeviceIds []*string `json:"DeviceIds,omitempty" xml:"DeviceIds,omitempty" type:"Repeated"`
	// Specifies whether to forcefully delete the device if the device is bound to a user.
	//
	// Valid values:
	//
	// 	- 0: do not forcefully delete the device.
	//
	// 	- 1: forcefully delete the device.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	Force *int32 `json:"Force,omitempty" xml:"Force,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicesRequest) GoString() string {
	return s.String()
}

func (s *DeleteDevicesRequest) SetClientType(v int32) *DeleteDevicesRequest {
	s.ClientType = &v
	return s
}

func (s *DeleteDevicesRequest) SetDeviceIds(v []*string) *DeleteDevicesRequest {
	s.DeviceIds = v
	return s
}

func (s *DeleteDevicesRequest) SetForce(v int32) *DeleteDevicesRequest {
	s.Force = &v
	return s
}

func (s *DeleteDevicesRequest) SetRegionId(v string) *DeleteDevicesRequest {
	s.RegionId = &v
	return s
}

type DeleteDevicesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 2AF861B4-0ECC-130C-B100-21A01E02****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDevicesResponseBody) SetRequestId(v string) *DeleteDevicesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDevicesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDevicesResponse) GoString() string {
	return s.String()
}

func (s *DeleteDevicesResponse) SetHeaders(v map[string]*string) *DeleteDevicesResponse {
	s.Headers = v
	return s
}

func (s *DeleteDevicesResponse) SetStatusCode(v int32) *DeleteDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDevicesResponse) SetBody(v *DeleteDevicesResponseBody) *DeleteDevicesResponse {
	s.Body = v
	return s
}

type DeleteDirectoriesRequest struct {
	// The directory IDs. You can specify one or more directory IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-gx2x1dhsmu52rd****
	DirectoryId []*string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteDirectoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDirectoriesRequest) GoString() string {
	return s.String()
}

func (s *DeleteDirectoriesRequest) SetDirectoryId(v []*string) *DeleteDirectoriesRequest {
	s.DirectoryId = v
	return s
}

func (s *DeleteDirectoriesRequest) SetRegionId(v string) *DeleteDirectoriesRequest {
	s.RegionId = &v
	return s
}

type DeleteDirectoriesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 5CC5E450-FC43-4F5B-B540-9964BD313427
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDirectoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDirectoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDirectoriesResponseBody) SetRequestId(v string) *DeleteDirectoriesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDirectoriesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDirectoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDirectoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDirectoriesResponse) GoString() string {
	return s.String()
}

func (s *DeleteDirectoriesResponse) SetHeaders(v map[string]*string) *DeleteDirectoriesResponse {
	s.Headers = v
	return s
}

func (s *DeleteDirectoriesResponse) SetStatusCode(v int32) *DeleteDirectoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDirectoriesResponse) SetBody(v *DeleteDirectoriesResponseBody) *DeleteDirectoriesResponse {
	s.Body = v
	return s
}

type DeleteEduRoomRequest struct {
	// This parameter is required.
	EduRoomId *string `json:"EduRoomId,omitempty" xml:"EduRoomId,omitempty"`
	// This parameter is required.
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteEduRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEduRoomRequest) GoString() string {
	return s.String()
}

func (s *DeleteEduRoomRequest) SetEduRoomId(v string) *DeleteEduRoomRequest {
	s.EduRoomId = &v
	return s
}

func (s *DeleteEduRoomRequest) SetRegionId(v string) *DeleteEduRoomRequest {
	s.RegionId = &v
	return s
}

type DeleteEduRoomResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEduRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEduRoomResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEduRoomResponseBody) SetRequestId(v string) *DeleteEduRoomResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEduRoomResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEduRoomResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEduRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEduRoomResponse) GoString() string {
	return s.String()
}

func (s *DeleteEduRoomResponse) SetHeaders(v map[string]*string) *DeleteEduRoomResponse {
	s.Headers = v
	return s
}

func (s *DeleteEduRoomResponse) SetStatusCode(v int32) *DeleteEduRoomResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEduRoomResponse) SetBody(v *DeleteEduRoomResponseBody) *DeleteEduRoomResponse {
	s.Body = v
	return s
}

type DeleteImagesRequest struct {
	// Specifies whether to delete the associated template.
	//
	// example:
	//
	// true
	DeleteCascadedBundle *bool `json:"DeleteCascadedBundle,omitempty" xml:"DeleteCascadedBundle,omitempty"`
	// The image IDs. You can specify 1 to 100 image IDs.
	//
	// This parameter is required.
	ImageId []*string `json:"ImageId,omitempty" xml:"ImageId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteImagesRequest) GoString() string {
	return s.String()
}

func (s *DeleteImagesRequest) SetDeleteCascadedBundle(v bool) *DeleteImagesRequest {
	s.DeleteCascadedBundle = &v
	return s
}

func (s *DeleteImagesRequest) SetImageId(v []*string) *DeleteImagesRequest {
	s.ImageId = v
	return s
}

func (s *DeleteImagesRequest) SetRegionId(v string) *DeleteImagesRequest {
	s.RegionId = &v
	return s
}

type DeleteImagesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteImagesResponseBody) SetRequestId(v string) *DeleteImagesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteImagesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteImagesResponse) GoString() string {
	return s.String()
}

func (s *DeleteImagesResponse) SetHeaders(v map[string]*string) *DeleteImagesResponse {
	s.Headers = v
	return s
}

func (s *DeleteImagesResponse) SetStatusCode(v int32) *DeleteImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteImagesResponse) SetBody(v *DeleteImagesResponseBody) *DeleteImagesResponse {
	s.Body = v
	return s
}

type DeleteNASFileSystemsRequest struct {
	// The IDs of the NAS file systems that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// 04f314****
	FileSystemId []*string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty" type:"Repeated"`
	// The region ID of the NAS file system that you want to delete.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteNASFileSystemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNASFileSystemsRequest) GoString() string {
	return s.String()
}

func (s *DeleteNASFileSystemsRequest) SetFileSystemId(v []*string) *DeleteNASFileSystemsRequest {
	s.FileSystemId = v
	return s
}

func (s *DeleteNASFileSystemsRequest) SetRegionId(v string) *DeleteNASFileSystemsRequest {
	s.RegionId = &v
	return s
}

type DeleteNASFileSystemsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNASFileSystemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNASFileSystemsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNASFileSystemsResponseBody) SetRequestId(v string) *DeleteNASFileSystemsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNASFileSystemsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNASFileSystemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNASFileSystemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNASFileSystemsResponse) GoString() string {
	return s.String()
}

func (s *DeleteNASFileSystemsResponse) SetHeaders(v map[string]*string) *DeleteNASFileSystemsResponse {
	s.Headers = v
	return s
}

func (s *DeleteNASFileSystemsResponse) SetStatusCode(v int32) *DeleteNASFileSystemsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNASFileSystemsResponse) SetBody(v *DeleteNASFileSystemsResponseBody) *DeleteNASFileSystemsResponse {
	s.Body = v
	return s
}

type DeleteNetworkPackagesRequest struct {
	// The IDs of premium bandwidth plans. You can specify one or more IDs.
	//
	// This parameter is required.
	NetworkPackageId []*string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteNetworkPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkPackagesRequest) GoString() string {
	return s.String()
}

func (s *DeleteNetworkPackagesRequest) SetNetworkPackageId(v []*string) *DeleteNetworkPackagesRequest {
	s.NetworkPackageId = v
	return s
}

func (s *DeleteNetworkPackagesRequest) SetRegionId(v string) *DeleteNetworkPackagesRequest {
	s.RegionId = &v
	return s
}

type DeleteNetworkPackagesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNetworkPackagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkPackagesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNetworkPackagesResponseBody) SetRequestId(v string) *DeleteNetworkPackagesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNetworkPackagesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteNetworkPackagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteNetworkPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNetworkPackagesResponse) GoString() string {
	return s.String()
}

func (s *DeleteNetworkPackagesResponse) SetHeaders(v map[string]*string) *DeleteNetworkPackagesResponse {
	s.Headers = v
	return s
}

func (s *DeleteNetworkPackagesResponse) SetStatusCode(v int32) *DeleteNetworkPackagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteNetworkPackagesResponse) SetBody(v *DeleteNetworkPackagesResponseBody) *DeleteNetworkPackagesResponse {
	s.Body = v
	return s
}

type DeleteOfficeSitesRequest struct {
	// The IDs of the office networks. You can specify 1 to 100 office networks.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId []*string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteOfficeSitesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteOfficeSitesRequest) GoString() string {
	return s.String()
}

func (s *DeleteOfficeSitesRequest) SetOfficeSiteId(v []*string) *DeleteOfficeSitesRequest {
	s.OfficeSiteId = v
	return s
}

func (s *DeleteOfficeSitesRequest) SetRegionId(v string) *DeleteOfficeSitesRequest {
	s.RegionId = &v
	return s
}

type DeleteOfficeSitesResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteOfficeSitesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteOfficeSitesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteOfficeSitesResponseBody) SetRequestId(v string) *DeleteOfficeSitesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteOfficeSitesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteOfficeSitesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteOfficeSitesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteOfficeSitesResponse) GoString() string {
	return s.String()
}

func (s *DeleteOfficeSitesResponse) SetHeaders(v map[string]*string) *DeleteOfficeSitesResponse {
	s.Headers = v
	return s
}

func (s *DeleteOfficeSitesResponse) SetStatusCode(v int32) *DeleteOfficeSitesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteOfficeSitesResponse) SetBody(v *DeleteOfficeSitesResponseBody) *DeleteOfficeSitesResponse {
	s.Body = v
	return s
}

type DeletePolicyGroupsRequest struct {
	// The ID of the policy. You can specify 1 to 100 policy IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// pg-gx2x1dhsmthe9****
	PolicyGroupId []*string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty" type:"Repeated"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeletePolicyGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePolicyGroupsRequest) GoString() string {
	return s.String()
}

func (s *DeletePolicyGroupsRequest) SetPolicyGroupId(v []*string) *DeletePolicyGroupsRequest {
	s.PolicyGroupId = v
	return s
}

func (s *DeletePolicyGroupsRequest) SetRegionId(v string) *DeletePolicyGroupsRequest {
	s.RegionId = &v
	return s
}

type DeletePolicyGroupsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePolicyGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePolicyGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePolicyGroupsResponseBody) SetRequestId(v string) *DeletePolicyGroupsResponseBody {
	s.RequestId = &v
	return s
}

type DeletePolicyGroupsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePolicyGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePolicyGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePolicyGroupsResponse) GoString() string {
	return s.String()
}

func (s *DeletePolicyGroupsResponse) SetHeaders(v map[string]*string) *DeletePolicyGroupsResponse {
	s.Headers = v
	return s
}

func (s *DeletePolicyGroupsResponse) SetStatusCode(v int32) *DeletePolicyGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePolicyGroupsResponse) SetBody(v *DeletePolicyGroupsResponseBody) *DeletePolicyGroupsResponse {
	s.Body = v
	return s
}

type DeleteSnapshotRequest struct {
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The snapshot IDs. You can specify 1 to 100 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// s-2ze81owrnv9pity4****
	SnapshotId []*string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty" type:"Repeated"`
}

func (s DeleteSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotRequest) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotRequest) SetRegionId(v string) *DeleteSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteSnapshotRequest) SetSnapshotId(v []*string) *DeleteSnapshotRequest {
	s.SnapshotId = v
	return s
}

type DeleteSnapshotResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponseBody) SetRequestId(v string) *DeleteSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSnapshotResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSnapshotResponse) GoString() string {
	return s.String()
}

func (s *DeleteSnapshotResponse) SetHeaders(v map[string]*string) *DeleteSnapshotResponse {
	s.Headers = v
	return s
}

func (s *DeleteSnapshotResponse) SetStatusCode(v int32) *DeleteSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSnapshotResponse) SetBody(v *DeleteSnapshotResponseBody) *DeleteSnapshotResponse {
	s.Body = v
	return s
}

type DeleteVirtualMFADeviceRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The serial number of the virtual MFA device, which is a unique identifier.
	//
	// You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device that is bound by AD users.
	//
	// This parameter is required.
	//
	// example:
	//
	// a25f297f-f2e1-4a44-bbf1-5f48a6e5****
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
}

func (s DeleteVirtualMFADeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualMFADeviceRequest) GoString() string {
	return s.String()
}

func (s *DeleteVirtualMFADeviceRequest) SetRegionId(v string) *DeleteVirtualMFADeviceRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteVirtualMFADeviceRequest) SetSerialNumber(v string) *DeleteVirtualMFADeviceRequest {
	s.SerialNumber = &v
	return s
}

type DeleteVirtualMFADeviceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteVirtualMFADeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualMFADeviceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteVirtualMFADeviceResponseBody) SetRequestId(v string) *DeleteVirtualMFADeviceResponseBody {
	s.RequestId = &v
	return s
}

type DeleteVirtualMFADeviceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteVirtualMFADeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteVirtualMFADeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteVirtualMFADeviceResponse) GoString() string {
	return s.String()
}

func (s *DeleteVirtualMFADeviceResponse) SetHeaders(v map[string]*string) *DeleteVirtualMFADeviceResponse {
	s.Headers = v
	return s
}

func (s *DeleteVirtualMFADeviceResponse) SetStatusCode(v int32) *DeleteVirtualMFADeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteVirtualMFADeviceResponse) SetBody(v *DeleteVirtualMFADeviceResponseBody) *DeleteVirtualMFADeviceResponse {
	s.Body = v
	return s
}

type DescribeAclEntriesRequest struct {
	// The number of entries per page. Maximum value: 1600.
	//
	// Default value: 1600.
	//
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used for the next query. If this parameter is empty, all results have been returned.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6kRxd1mKkNnHlUy14zdjl/I
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the instance to which the ACL applies. You can specify an office network ID or a cloud computer ID.
	//
	// example:
	//
	// cn-hangzhou+dir-****
	SourceId *string `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	// The granularity of the ACL.
	//
	// Valid values:
	//
	// 	- desktop: cloud computer
	//
	// 	- vpc: office network
	//
	// example:
	//
	// desktop
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s DescribeAclEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAclEntriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAclEntriesRequest) SetMaxResults(v int32) *DescribeAclEntriesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeAclEntriesRequest) SetNextToken(v string) *DescribeAclEntriesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeAclEntriesRequest) SetRegionId(v string) *DescribeAclEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeAclEntriesRequest) SetSourceId(v string) *DescribeAclEntriesRequest {
	s.SourceId = &v
	return s
}

func (s *DescribeAclEntriesRequest) SetSourceType(v string) *DescribeAclEntriesRequest {
	s.SourceType = &v
	return s
}

type DescribeAclEntriesResponseBody struct {
	// The ACL entries.
	AclEntries []*DescribeAclEntriesResponseBodyAclEntries `json:"AclEntries,omitempty" xml:"AclEntries,omitempty" type:"Repeated"`
	// The token that is used to start the next query. If the value of this parameter is empty, all results are returned.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAclEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAclEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAclEntriesResponseBody) SetAclEntries(v []*DescribeAclEntriesResponseBodyAclEntries) *DescribeAclEntriesResponseBody {
	s.AclEntries = v
	return s
}

func (s *DescribeAclEntriesResponseBody) SetNextToken(v string) *DescribeAclEntriesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeAclEntriesResponseBody) SetRequestId(v string) *DescribeAclEntriesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAclEntriesResponseBodyAclEntries struct {
	// The ACL type.
	//
	// Valid values:
	//
	// 	- allow: whitelist
	//
	// 	- disable: blacklist
	//
	// example:
	//
	// allow
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The ID of the instance to which the ACL applies, such as an office network ID or a cloud computer ID.
	//
	// example:
	//
	// ecd-fsafeweh***
	SourceId *string `json:"SourceId,omitempty" xml:"SourceId,omitempty"`
	// The granularity of the ACL.
	//
	// Valid values:
	//
	// 	- desktop: cloud computer
	//
	// 	- vpc: office network
	//
	// example:
	//
	// desktop
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s DescribeAclEntriesResponseBodyAclEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeAclEntriesResponseBodyAclEntries) GoString() string {
	return s.String()
}

func (s *DescribeAclEntriesResponseBodyAclEntries) SetPolicy(v string) *DescribeAclEntriesResponseBodyAclEntries {
	s.Policy = &v
	return s
}

func (s *DescribeAclEntriesResponseBodyAclEntries) SetSourceId(v string) *DescribeAclEntriesResponseBodyAclEntries {
	s.SourceId = &v
	return s
}

func (s *DescribeAclEntriesResponseBodyAclEntries) SetSourceType(v string) *DescribeAclEntriesResponseBodyAclEntries {
	s.SourceType = &v
	return s
}

type DescribeAclEntriesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAclEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAclEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAclEntriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAclEntriesResponse) SetHeaders(v map[string]*string) *DescribeAclEntriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAclEntriesResponse) SetStatusCode(v int32) *DescribeAclEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAclEntriesResponse) SetBody(v *DescribeAclEntriesResponseBody) *DescribeAclEntriesResponse {
	s.Body = v
	return s
}

type DescribeAutoSnapshotPolicyRequest struct {
	// The number of entries to return on each page.
	//
	// 	- Maximum value: 100
	//
	// 	- Default value: 20
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6mqIGdPhID94rjhZFGsvpJo
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the automatic snapshot policy.
	//
	// example:
	//
	// sp-c5tv9d64ebjnj****
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The name of the automatic snapshot policy.
	//
	// example:
	//
	// Test 1201
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyRequest) SetMaxResults(v int32) *DescribeAutoSnapshotPolicyRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyRequest) SetNextToken(v string) *DescribeAutoSnapshotPolicyRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyRequest) SetPolicyId(v string) *DescribeAutoSnapshotPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyRequest) SetPolicyName(v string) *DescribeAutoSnapshotPolicyRequest {
	s.PolicyName = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyRequest) SetRegionId(v string) *DescribeAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

type DescribeAutoSnapshotPolicyResponseBody struct {
	// The details of the queried automatic snapshot policies.
	AutoSnapshotPolicies []*DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies `json:"AutoSnapshotPolicies,omitempty" xml:"AutoSnapshotPolicies,omitempty" type:"Repeated"`
	// The token that is used to start the next query. If this parameter is empty, all results haven been returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// A7F6612E-59CC-59F9-9DD1-91867FCC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyResponseBody) SetAutoSnapshotPolicies(v []*DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) *DescribeAutoSnapshotPolicyResponseBody {
	s.AutoSnapshotPolicies = v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBody) SetNextToken(v string) *DescribeAutoSnapshotPolicyResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBody) SetRequestId(v string) *DescribeAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies struct {
	// The time when the automatic snapshot policy was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2023-01-11T09:14:00Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The cron expression that specifies when Elastic Desktop Service creates snapshots on the cloud computers.
	//
	// example:
	//
	// 0 0 5,7 ? 	- 2/2
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// The number of cloud computers to which the automatic snapshot policy is applied.
	//
	// example:
	//
	// 5
	DesktopNum *int32 `json:"DesktopNum,omitempty" xml:"DesktopNum,omitempty"`
	// The ID of the automatic snapshot policy.
	//
	// example:
	//
	// sp-3e3bmfcdkjfl1****
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The name of the automatic snapshot policy.
	//
	// example:
	//
	// snapshot01
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The ID of the region to which the automatic snapshot policy belongs.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.
	//
	// example:
	//
	// 3
	RetentionDays *string `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
	// The status of the automatic snapshot policy.
	//
	// Valid values:
	//
	// 	- Expire: The automatic snapshot policy cannot be used because you have overdue payments in your account.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Normal: The automatic snapshot policy is normal.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The points in time at which the auto snapshots were created.
	//
	// The parameter values are a JSON array. Example: `["0", "1", ... "23"]`. A maximum of 24 points in time are returned. The points in time are separated with commas (,).
	//
	// example:
	//
	// ["17","18"]
	TimePoints *string `json:"TimePoints,omitempty" xml:"TimePoints,omitempty"`
}

func (s DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetCreationTime(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.CreationTime = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetCronExpression(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.CronExpression = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetDesktopNum(v int32) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.DesktopNum = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetPolicyId(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.PolicyId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetPolicyName(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.PolicyName = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetRegionId(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.RegionId = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetRetentionDays(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.RetentionDays = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetStatus(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.Status = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies) SetTimePoints(v string) *DescribeAutoSnapshotPolicyResponseBodyAutoSnapshotPolicies {
	s.TimePoints = &v
	return s
}

type DescribeAutoSnapshotPolicyResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *DescribeAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponse) SetStatusCode(v int32) *DescribeAutoSnapshotPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoSnapshotPolicyResponse) SetBody(v *DescribeAutoSnapshotPolicyResponseBody) *DescribeAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type DescribeBundlesRequest struct {
	// The IDs of the cloud computer templates. You can specify 1 to 100 IDs.
	//
	// example:
	//
	// bundle_ecd_graphics.2xlarge_s15d15_win2019
	BundleId []*string `json:"BundleId,omitempty" xml:"BundleId,omitempty" type:"Repeated"`
	// The type of the cloud computer template.
	//
	// Valid values:
	//
	// 	- SYSTEM: system template
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CUSTOM: custom template
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	BundleType *string `json:"BundleType,omitempty" xml:"BundleType,omitempty"`
	// Specifies whether to query the inventory status of the cloud computer instance type.
	//
	// example:
	//
	// true
	CheckStock *bool `json:"CheckStock,omitempty" xml:"CheckStock,omitempty"`
	// The number of vCPUs contained in the cloud computer instance type.
	//
	// example:
	//
	// 2
	CpuCount *int32 `json:"CpuCount,omitempty" xml:"CpuCount,omitempty"`
	// The instance family of the cloud computers.
	//
	// Valid values:
	//
	// 	- eds.graphics: graphical instance families
	//
	// 	- eds.hf: instance families with high clock speeds
	//
	// 	- eds.general: general-purpose instance families
	//
	// example:
	//
	// eds.general
	DesktopTypeFamily *string `json:"DesktopTypeFamily,omitempty" xml:"DesktopTypeFamily,omitempty"`
	// This parameter is now in invitational preview and not publicly available.
	//
	// example:
	//
	// This parameter is now in invitational preview and unavailable.
	FotaChannel *string `json:"FotaChannel,omitempty" xml:"FotaChannel,omitempty"`
	// Specifies whether the cloud computers in the template belong to a cloud computer pool.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	FromDesktopGroup *bool `json:"FromDesktopGroup,omitempty" xml:"FromDesktopGroup,omitempty"`
	// The number of GPUs contained in the cloud computer instance type.
	//
	// example:
	//
	// 1
	GpuCount      *float32 `json:"GpuCount,omitempty" xml:"GpuCount,omitempty"`
	GpuDriverType *string  `json:"GpuDriverType,omitempty" xml:"GpuDriverType,omitempty"`
	// The image ID.
	ImageId []*string `json:"ImageId,omitempty" xml:"ImageId,omitempty" type:"Repeated"`
	// The number of entries to return on each page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The memory size of the cloud computer instance type. Unit: GiB.
	//
	// example:
	//
	// 4
	MemorySize *int32 `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	// The token that is used to start the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The type of the OS.
	//
	// Valid values:
	//
	// 	- Linux
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX: High-definition Experience (HDX) protocol
	//
	// 	- ASP: in-house Adaptive Streaming Protocol (ASP) (recommend)
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The scenario to use the image.
	//
	// example:
	//
	// FastBuy
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// The desktop template that is selected based on specific criteria.
	//
	// example:
	//
	// true
	SelectedBundle *bool `json:"SelectedBundle,omitempty" xml:"SelectedBundle,omitempty"`
	// The type of the session.
	//
	// Enumeration Value:
	//
	// 	- **SingleSession**
	//
	// 	- **MultipleSession**
	//
	// example:
	//
	// SingleSession
	SessionType *string `json:"SessionType,omitempty" xml:"SessionType,omitempty"`
	// Specifies whether to return multi-session cloud computer templates. Default value: false.
	//
	// example:
	//
	// false
	SupportMultiSession *bool `json:"SupportMultiSession,omitempty" xml:"SupportMultiSession,omitempty"`
	// Specifies whether to enable disk encryption.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
}

func (s DescribeBundlesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBundlesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBundlesRequest) SetBundleId(v []*string) *DescribeBundlesRequest {
	s.BundleId = v
	return s
}

func (s *DescribeBundlesRequest) SetBundleType(v string) *DescribeBundlesRequest {
	s.BundleType = &v
	return s
}

func (s *DescribeBundlesRequest) SetCheckStock(v bool) *DescribeBundlesRequest {
	s.CheckStock = &v
	return s
}

func (s *DescribeBundlesRequest) SetCpuCount(v int32) *DescribeBundlesRequest {
	s.CpuCount = &v
	return s
}

func (s *DescribeBundlesRequest) SetDesktopTypeFamily(v string) *DescribeBundlesRequest {
	s.DesktopTypeFamily = &v
	return s
}

func (s *DescribeBundlesRequest) SetFotaChannel(v string) *DescribeBundlesRequest {
	s.FotaChannel = &v
	return s
}

func (s *DescribeBundlesRequest) SetFromDesktopGroup(v bool) *DescribeBundlesRequest {
	s.FromDesktopGroup = &v
	return s
}

func (s *DescribeBundlesRequest) SetGpuCount(v float32) *DescribeBundlesRequest {
	s.GpuCount = &v
	return s
}

func (s *DescribeBundlesRequest) SetGpuDriverType(v string) *DescribeBundlesRequest {
	s.GpuDriverType = &v
	return s
}

func (s *DescribeBundlesRequest) SetImageId(v []*string) *DescribeBundlesRequest {
	s.ImageId = v
	return s
}

func (s *DescribeBundlesRequest) SetMaxResults(v int32) *DescribeBundlesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeBundlesRequest) SetMemorySize(v int32) *DescribeBundlesRequest {
	s.MemorySize = &v
	return s
}

func (s *DescribeBundlesRequest) SetNextToken(v string) *DescribeBundlesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeBundlesRequest) SetOsType(v string) *DescribeBundlesRequest {
	s.OsType = &v
	return s
}

func (s *DescribeBundlesRequest) SetProtocolType(v string) *DescribeBundlesRequest {
	s.ProtocolType = &v
	return s
}

func (s *DescribeBundlesRequest) SetRegionId(v string) *DescribeBundlesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeBundlesRequest) SetScope(v string) *DescribeBundlesRequest {
	s.Scope = &v
	return s
}

func (s *DescribeBundlesRequest) SetSelectedBundle(v bool) *DescribeBundlesRequest {
	s.SelectedBundle = &v
	return s
}

func (s *DescribeBundlesRequest) SetSessionType(v string) *DescribeBundlesRequest {
	s.SessionType = &v
	return s
}

func (s *DescribeBundlesRequest) SetSupportMultiSession(v bool) *DescribeBundlesRequest {
	s.SupportMultiSession = &v
	return s
}

func (s *DescribeBundlesRequest) SetVolumeEncryptionEnabled(v bool) *DescribeBundlesRequest {
	s.VolumeEncryptionEnabled = &v
	return s
}

type DescribeBundlesResponseBody struct {
	// The details of the queried cloud computer templates.
	Bundles []*DescribeBundlesResponseBodyBundles `json:"Bundles,omitempty" xml:"Bundles,omitempty" type:"Repeated"`
	// The token that is used for the next query. If this parameter is empty, all results have been returned.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6lu3PTF6h3zE8egwlYuv8M8
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// BCC854D8-5D1E-46D3-96EF-797A5DD36789
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBundlesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBundlesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBundlesResponseBody) SetBundles(v []*DescribeBundlesResponseBodyBundles) *DescribeBundlesResponseBody {
	s.Bundles = v
	return s
}

func (s *DescribeBundlesResponseBody) SetNextToken(v string) *DescribeBundlesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeBundlesResponseBody) SetRequestId(v string) *DescribeBundlesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBundlesResponseBodyBundles struct {
	// The ID of the cloud computer template.
	//
	// example:
	//
	// bundle_ecd_graphics.2xlarge_s15d15_win2019
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The name of the cloud computer template.
	//
	// example:
	//
	// Advanced graphics with Windows 2019
	BundleName *string `json:"BundleName,omitempty" xml:"BundleName,omitempty"`
	// The type of the cloud computer template.
	//
	// Valid values:
	//
	// 	- SYSTEM: system template
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CUSTOM: custom template
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	BundleType *string `json:"BundleType,omitempty" xml:"BundleType,omitempty"`
	// The time when the cloud computer template was created.
	//
	// example:
	//
	// 2021-09-30T06:09Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the cloud computer template.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The instance type of the cloud computer.
	//
	// example:
	//
	// ecd.graphics.2xlarge
	DesktopType *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	// The details of the cloud computer instance type.
	DesktopTypeAttribute *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute `json:"DesktopTypeAttribute,omitempty" xml:"DesktopTypeAttribute,omitempty" type:"Struct"`
	// The instance family of the cloud computer.
	//
	// Valid values:
	//
	// 	- eds.graphics: graphical instance family
	//
	// 	- eds.hf: instance family with a high clock speed
	//
	// 	- eds.general: general-purpose instance family
	//
	// example:
	//
	// eds.general
	DesktopTypeFamily *string `json:"DesktopTypeFamily,omitempty" xml:"DesktopTypeFamily,omitempty"`
	// Details of the disks.
	Disks []*DescribeBundlesResponseBodyBundlesDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
	// The image ID.
	//
	// example:
	//
	// desktopimage-windows-server-2019-64-ch-vgpu
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The image name.
	//
	// example:
	//
	// Windows server 2019 Chinese
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The status of the image.
	//
	// example:
	//
	// Available
	ImageStatus *string `json:"ImageStatus,omitempty" xml:"ImageStatus,omitempty"`
	// The OS language of the image.
	//
	// example:
	//
	// en-US
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The type of the OS.
	//
	// Valid values:
	//
	// 	- Linux
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The OS.
	//
	// Valid values:
	//
	// 	- Ubuntu
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows Server 2022
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- UOS
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CentOS
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows Server 2019
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows Server 2016
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows Server 2019
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX: HDX protocol
	//
	// 	- ASP: in-house ASP
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The session type.
	//
	// Valid values:
	//
	// 	- 0: single-session
	//
	// 	- 1: multi-session
	//
	// example:
	//
	// 0
	SessionType *string `json:"SessionType,omitempty" xml:"SessionType,omitempty"`
	// The inventory status of the cloud computer instance type. This parameter is returned only if you set the `CheckStock` parameter to `true`.
	//
	// example:
	//
	// Sufficient
	StockState *string `json:"StockState,omitempty" xml:"StockState,omitempty"`
	// Indicates whether disk encryption is enabled.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
}

func (s DescribeBundlesResponseBodyBundles) String() string {
	return tea.Prettify(s)
}

func (s DescribeBundlesResponseBodyBundles) GoString() string {
	return s.String()
}

func (s *DescribeBundlesResponseBodyBundles) SetBundleId(v string) *DescribeBundlesResponseBodyBundles {
	s.BundleId = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetBundleName(v string) *DescribeBundlesResponseBodyBundles {
	s.BundleName = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetBundleType(v string) *DescribeBundlesResponseBodyBundles {
	s.BundleType = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetCreationTime(v string) *DescribeBundlesResponseBodyBundles {
	s.CreationTime = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetDescription(v string) *DescribeBundlesResponseBodyBundles {
	s.Description = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetDesktopType(v string) *DescribeBundlesResponseBodyBundles {
	s.DesktopType = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetDesktopTypeAttribute(v *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute) *DescribeBundlesResponseBodyBundles {
	s.DesktopTypeAttribute = v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetDesktopTypeFamily(v string) *DescribeBundlesResponseBodyBundles {
	s.DesktopTypeFamily = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetDisks(v []*DescribeBundlesResponseBodyBundlesDisks) *DescribeBundlesResponseBodyBundles {
	s.Disks = v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetImageId(v string) *DescribeBundlesResponseBodyBundles {
	s.ImageId = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetImageName(v string) *DescribeBundlesResponseBodyBundles {
	s.ImageName = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetImageStatus(v string) *DescribeBundlesResponseBodyBundles {
	s.ImageStatus = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetLanguage(v string) *DescribeBundlesResponseBodyBundles {
	s.Language = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetOsType(v string) *DescribeBundlesResponseBodyBundles {
	s.OsType = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetPlatform(v string) *DescribeBundlesResponseBodyBundles {
	s.Platform = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetProtocolType(v string) *DescribeBundlesResponseBodyBundles {
	s.ProtocolType = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetSessionType(v string) *DescribeBundlesResponseBodyBundles {
	s.SessionType = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetStockState(v string) *DescribeBundlesResponseBodyBundles {
	s.StockState = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetVolumeEncryptionEnabled(v bool) *DescribeBundlesResponseBodyBundles {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundles) SetVolumeEncryptionKey(v string) *DescribeBundlesResponseBodyBundles {
	s.VolumeEncryptionKey = &v
	return s
}

type DescribeBundlesResponseBodyBundlesDesktopTypeAttribute struct {
	// The number of vCPUs.
	//
	// example:
	//
	// 10
	CpuCount *int32 `json:"CpuCount,omitempty" xml:"CpuCount,omitempty"`
	// The number of GPUs.
	//
	// example:
	//
	// 0.5
	GpuCount *float32 `json:"GpuCount,omitempty" xml:"GpuCount,omitempty"`
	// The GPU type.
	//
	// example:
	//
	// NVIDIA T4
	GpuSpec *string `json:"GpuSpec,omitempty" xml:"GpuSpec,omitempty"`
	// The memory size. Unit: MiB.
	//
	// example:
	//
	// 47104
	MemorySize *int32 `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
}

func (s DescribeBundlesResponseBodyBundlesDesktopTypeAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeBundlesResponseBodyBundlesDesktopTypeAttribute) GoString() string {
	return s.String()
}

func (s *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute) SetCpuCount(v int32) *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute {
	s.CpuCount = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute) SetGpuCount(v float32) *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute {
	s.GpuCount = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute) SetGpuSpec(v string) *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute {
	s.GpuSpec = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute) SetMemorySize(v int32) *DescribeBundlesResponseBodyBundlesDesktopTypeAttribute {
	s.MemorySize = &v
	return s
}

type DescribeBundlesResponseBodyBundlesDisks struct {
	// The PL of the disk.
	//
	// Valid values:
	//
	// 	- PL1
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL0
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL3
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL2
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PL0
	DiskPerformanceLevel *string `json:"DiskPerformanceLevel,omitempty" xml:"DiskPerformanceLevel,omitempty"`
	// The size of the disk. Unit: GiB.
	//
	// example:
	//
	// 150
	DiskSize *int32 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The type of the disk.
	//
	// Valid values:
	//
	// 	- SYSTEM: system disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DATA: data disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
}

func (s DescribeBundlesResponseBodyBundlesDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeBundlesResponseBodyBundlesDisks) GoString() string {
	return s.String()
}

func (s *DescribeBundlesResponseBodyBundlesDisks) SetDiskPerformanceLevel(v string) *DescribeBundlesResponseBodyBundlesDisks {
	s.DiskPerformanceLevel = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundlesDisks) SetDiskSize(v int32) *DescribeBundlesResponseBodyBundlesDisks {
	s.DiskSize = &v
	return s
}

func (s *DescribeBundlesResponseBodyBundlesDisks) SetDiskType(v string) *DescribeBundlesResponseBodyBundlesDisks {
	s.DiskType = &v
	return s
}

type DescribeBundlesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBundlesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBundlesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBundlesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBundlesResponse) SetHeaders(v map[string]*string) *DescribeBundlesResponse {
	s.Headers = v
	return s
}

func (s *DescribeBundlesResponse) SetStatusCode(v int32) *DescribeBundlesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBundlesResponse) SetBody(v *DescribeBundlesResponseBody) *DescribeBundlesResponse {
	s.Body = v
	return s
}

type DescribeCdsFileShareLinksRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-532033****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The users that create the file sharing links.
	Creators []*string `json:"Creators,omitempty" xml:"Creators,omitempty" type:"Repeated"`
	// The maximum number of resources to return. Valid values: 1 to 100. Default value: 100. The number of returned resources must be less than or equal to the specified number.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// Specifies the marker after which the returned list begins. If this parameter is not specified, all results are returned. Default value: null.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the file sharing link.
	//
	// example:
	//
	// 7JQX1Fs****
	ShareId *string `json:"ShareId,omitempty" xml:"ShareId,omitempty"`
	// The sharing name for fuzzy search.
	//
	// example:
	//
	// user
	ShareName *string `json:"ShareName,omitempty" xml:"ShareName,omitempty"`
	// The file sharing status. Valid values: ● disabled: canceled ● enabled: valid
	//
	// example:
	//
	// disabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeCdsFileShareLinksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCdsFileShareLinksRequest) GoString() string {
	return s.String()
}

func (s *DescribeCdsFileShareLinksRequest) SetCdsId(v string) *DescribeCdsFileShareLinksRequest {
	s.CdsId = &v
	return s
}

func (s *DescribeCdsFileShareLinksRequest) SetCreators(v []*string) *DescribeCdsFileShareLinksRequest {
	s.Creators = v
	return s
}

func (s *DescribeCdsFileShareLinksRequest) SetMaxResults(v int32) *DescribeCdsFileShareLinksRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeCdsFileShareLinksRequest) SetNextToken(v string) *DescribeCdsFileShareLinksRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeCdsFileShareLinksRequest) SetShareId(v string) *DescribeCdsFileShareLinksRequest {
	s.ShareId = &v
	return s
}

func (s *DescribeCdsFileShareLinksRequest) SetShareName(v string) *DescribeCdsFileShareLinksRequest {
	s.ShareName = &v
	return s
}

func (s *DescribeCdsFileShareLinksRequest) SetStatus(v string) *DescribeCdsFileShareLinksRequest {
	s.Status = &v
	return s
}

type DescribeCdsFileShareLinksResponseBody struct {
	// The operation result. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data information.
	Data []*CdsFileShareLinkModel `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The error message that is returned. This parameter is not returned if the value of Code is `success`.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6mnFXZiT7NdvGNgkInJ****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCdsFileShareLinksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCdsFileShareLinksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCdsFileShareLinksResponseBody) SetCode(v string) *DescribeCdsFileShareLinksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCdsFileShareLinksResponseBody) SetData(v []*CdsFileShareLinkModel) *DescribeCdsFileShareLinksResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCdsFileShareLinksResponseBody) SetMessage(v string) *DescribeCdsFileShareLinksResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCdsFileShareLinksResponseBody) SetNextToken(v string) *DescribeCdsFileShareLinksResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeCdsFileShareLinksResponseBody) SetRequestId(v string) *DescribeCdsFileShareLinksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCdsFileShareLinksResponseBody) SetSuccess(v bool) *DescribeCdsFileShareLinksResponseBody {
	s.Success = &v
	return s
}

type DescribeCdsFileShareLinksResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCdsFileShareLinksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCdsFileShareLinksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCdsFileShareLinksResponse) GoString() string {
	return s.String()
}

func (s *DescribeCdsFileShareLinksResponse) SetHeaders(v map[string]*string) *DescribeCdsFileShareLinksResponse {
	s.Headers = v
	return s
}

func (s *DescribeCdsFileShareLinksResponse) SetStatusCode(v int32) *DescribeCdsFileShareLinksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCdsFileShareLinksResponse) SetBody(v *DescribeCdsFileShareLinksResponseBody) *DescribeCdsFileShareLinksResponse {
	s.Body = v
	return s
}

type DescribeCensRequest struct {
	// The page number.\\
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.\\
	//
	// Default value: 50.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCensRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCensRequest) GoString() string {
	return s.String()
}

func (s *DescribeCensRequest) SetPageNumber(v int32) *DescribeCensRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeCensRequest) SetPageSize(v int32) *DescribeCensRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCensRequest) SetRegionId(v string) *DescribeCensRequest {
	s.RegionId = &v
	return s
}

type DescribeCensResponseBody struct {
	// Details of the CEN instances.
	Cens []*DescribeCensResponseBodyCens `json:"Cens,omitempty" xml:"Cens,omitempty" type:"Repeated"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 50
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of CEN instances returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeCensResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCensResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCensResponseBody) SetCens(v []*DescribeCensResponseBodyCens) *DescribeCensResponseBody {
	s.Cens = v
	return s
}

func (s *DescribeCensResponseBody) SetPageNumber(v int32) *DescribeCensResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeCensResponseBody) SetPageSize(v int32) *DescribeCensResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeCensResponseBody) SetRequestId(v string) *DescribeCensResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCensResponseBody) SetTotalCount(v int32) *DescribeCensResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeCensResponseBodyCens struct {
	// The ID of the CEN instance.
	//
	// example:
	//
	// cen-3gwy16dojz1m65****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// The time when the CEN instance was created.
	//
	// example:
	//
	// 2021-06-16T08:46Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The description of the CEN instance.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The IPv6 level.
	//
	// >  IPv6 is not supported.
	//
	// Valid value:
	//
	// 	- DISABLED
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// DISABLED
	Ipv6Level *string `json:"Ipv6Level,omitempty" xml:"Ipv6Level,omitempty"`
	// The name of the CEN instance.
	//
	// example:
	//
	// testCen
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The bandwidth plans that are bound to the CEN instance.
	PackageIds []*DescribeCensResponseBodyCensPackageIds `json:"PackageIds,omitempty" xml:"PackageIds,omitempty" type:"Repeated"`
	// The tolerated level of CIDR block conflict.
	//
	// Valid value:
	//
	// 	- REDUCED: CIDR block conflicts are allowed, but the conflicting CIDR blocks cannot be identical.
	//
	// example:
	//
	// REDUCED
	ProtectionLevel *string `json:"ProtectionLevel,omitempty" xml:"ProtectionLevel,omitempty"`
	// The status of the CEN instance.
	//
	// Valid values:
	//
	// 	- Creating
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Active
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Deleting
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags of the CEN instance.
	Tags []*DescribeCensResponseBodyCensTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeCensResponseBodyCens) String() string {
	return tea.Prettify(s)
}

func (s DescribeCensResponseBodyCens) GoString() string {
	return s.String()
}

func (s *DescribeCensResponseBodyCens) SetCenId(v string) *DescribeCensResponseBodyCens {
	s.CenId = &v
	return s
}

func (s *DescribeCensResponseBodyCens) SetCreationTime(v string) *DescribeCensResponseBodyCens {
	s.CreationTime = &v
	return s
}

func (s *DescribeCensResponseBodyCens) SetDescription(v string) *DescribeCensResponseBodyCens {
	s.Description = &v
	return s
}

func (s *DescribeCensResponseBodyCens) SetIpv6Level(v string) *DescribeCensResponseBodyCens {
	s.Ipv6Level = &v
	return s
}

func (s *DescribeCensResponseBodyCens) SetName(v string) *DescribeCensResponseBodyCens {
	s.Name = &v
	return s
}

func (s *DescribeCensResponseBodyCens) SetPackageIds(v []*DescribeCensResponseBodyCensPackageIds) *DescribeCensResponseBodyCens {
	s.PackageIds = v
	return s
}

func (s *DescribeCensResponseBodyCens) SetProtectionLevel(v string) *DescribeCensResponseBodyCens {
	s.ProtectionLevel = &v
	return s
}

func (s *DescribeCensResponseBodyCens) SetStatus(v string) *DescribeCensResponseBodyCens {
	s.Status = &v
	return s
}

func (s *DescribeCensResponseBodyCens) SetTags(v []*DescribeCensResponseBodyCensTags) *DescribeCensResponseBodyCens {
	s.Tags = v
	return s
}

type DescribeCensResponseBodyCensPackageIds struct {
	// The ID of the bandwidth plan that is bound to the CEN instance.
	//
	// example:
	//
	// cenbwp-4c2zaavbvh5f42****
	PackageId *string `json:"PackageId,omitempty" xml:"PackageId,omitempty"`
}

func (s DescribeCensResponseBodyCensPackageIds) String() string {
	return tea.Prettify(s)
}

func (s DescribeCensResponseBodyCensPackageIds) GoString() string {
	return s.String()
}

func (s *DescribeCensResponseBodyCensPackageIds) SetPackageId(v string) *DescribeCensResponseBodyCensPackageIds {
	s.PackageId = &v
	return s
}

type DescribeCensResponseBodyCensTags struct {
	// The key of the tag.
	//
	// example:
	//
	// testKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// testValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeCensResponseBodyCensTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeCensResponseBodyCensTags) GoString() string {
	return s.String()
}

func (s *DescribeCensResponseBodyCensTags) SetKey(v string) *DescribeCensResponseBodyCensTags {
	s.Key = &v
	return s
}

func (s *DescribeCensResponseBodyCensTags) SetValue(v string) *DescribeCensResponseBodyCensTags {
	s.Value = &v
	return s
}

type DescribeCensResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCensResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCensResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCensResponse) GoString() string {
	return s.String()
}

func (s *DescribeCensResponse) SetHeaders(v map[string]*string) *DescribeCensResponse {
	s.Headers = v
	return s
}

func (s *DescribeCensResponse) SetStatusCode(v int32) *DescribeCensResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCensResponse) SetBody(v *DescribeCensResponseBody) *DescribeCensResponse {
	s.Body = v
	return s
}

type DescribeClientEventsRequest struct {
	// The cloud desktop ID. If you do not specify a value for this parameter, events of all cloud desktops in the specified region are queried.
	//
	// example:
	//
	// ecd-8fupvkhg0aayu****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The IP address of the cloud desktop. If you do not specify a value for this parameter, the events of all cloud desktops in the specified region are queried.
	//
	// example:
	//
	// 10.10.*.*
	DesktopIp *string `json:"DesktopIp,omitempty" xml:"DesktopIp,omitempty"`
	// The cloud desktop name.
	//
	// example:
	//
	// test
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// This parameter is not available to the public.
	//
	// example:
	//
	// cn-hangzhou+dir-bh77qa8nmjot4****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
	//
	// If you do not specify a value for this parameter, the current time is used.
	//
	// example:
	//
	// 2020-11-31T06:32:31Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The information about the end user that connects to the cloud desktop from the Elastic Desktop Service (EDS) client. The information can be a Resource Access Management (RAM) user ID or an Active Directory (AD) username. If you do not specify a value for this parameter, the events of all end users in the specified region are queried.
	//
	// example:
	//
	// 28961708130834****
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The type of the events that you want to query. If you specify multiple values for the EventTypes parameter, the events of all specified types are returned. If you do not specify values for the EventTypes and EventType parameters, all events of end users in the specified region are returned.
	//
	// Valid values:
	//
	// 	- DESKTOP_STOP: End users stop the cloud desktop.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- GET_LITE_CONNECTION_TICKET: End users obtain the credential for reconnecting to the cloud desktop upon disconnection.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DESKTOP_DISCONNECT: End users disconnect desktop sessions.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- GET_CONNECTION_TICKET: End users request to connect to the cloud desktop.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CLIENT_LOGIN: End users log on to the cloud desktop.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DESKTOP_REBOOT: End users restart the cloud desktop.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DESKTOP_CONNECT: End users establish desktop sessions.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DESKTOP_START: End users start the cloud desktop.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// DESKTOP_DISCONNECT
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The array of event types that you want to query. You can specify multiple event types. The response contains all or specified types of events.
	EventTypes []*string `json:"EventTypes,omitempty" xml:"EventTypes,omitempty" type:"Repeated"`
	// The number of entries per page.\\
	//
	// Default value: 100.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the workspace to which the cloud desktop belongs. If you do not specify a value for this parameter, the events of all workspaces in the specified region are queried.
	//
	// example:
	//
	// cn-hangzhou+dir-bh77qa8nmjot4****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The workspace name.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.\\
	//
	// If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.
	//
	// example:
	//
	// 2020-11-30T06:32:31Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeClientEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientEventsRequest) GoString() string {
	return s.String()
}

func (s *DescribeClientEventsRequest) SetDesktopId(v string) *DescribeClientEventsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeClientEventsRequest) SetDesktopIp(v string) *DescribeClientEventsRequest {
	s.DesktopIp = &v
	return s
}

func (s *DescribeClientEventsRequest) SetDesktopName(v string) *DescribeClientEventsRequest {
	s.DesktopName = &v
	return s
}

func (s *DescribeClientEventsRequest) SetDirectoryId(v string) *DescribeClientEventsRequest {
	s.DirectoryId = &v
	return s
}

func (s *DescribeClientEventsRequest) SetEndTime(v string) *DescribeClientEventsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeClientEventsRequest) SetEndUserId(v string) *DescribeClientEventsRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeClientEventsRequest) SetEventType(v string) *DescribeClientEventsRequest {
	s.EventType = &v
	return s
}

func (s *DescribeClientEventsRequest) SetEventTypes(v []*string) *DescribeClientEventsRequest {
	s.EventTypes = v
	return s
}

func (s *DescribeClientEventsRequest) SetMaxResults(v int32) *DescribeClientEventsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeClientEventsRequest) SetNextToken(v string) *DescribeClientEventsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeClientEventsRequest) SetOfficeSiteId(v string) *DescribeClientEventsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeClientEventsRequest) SetOfficeSiteName(v string) *DescribeClientEventsRequest {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeClientEventsRequest) SetRegionId(v string) *DescribeClientEventsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClientEventsRequest) SetStartTime(v string) *DescribeClientEventsRequest {
	s.StartTime = &v
	return s
}

type DescribeClientEventsResponseBody struct {
	// The information about the events of an end user.
	Events []*DescribeClientEventsResponseBodyEvents `json:"Events,omitempty" xml:"Events,omitempty" type:"Repeated"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 28A40F12-F340-442B-A35F-46EF6A03227B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClientEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientEventsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClientEventsResponseBody) SetEvents(v []*DescribeClientEventsResponseBodyEvents) *DescribeClientEventsResponseBody {
	s.Events = v
	return s
}

func (s *DescribeClientEventsResponseBody) SetNextToken(v string) *DescribeClientEventsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeClientEventsResponseBody) SetRequestId(v string) *DescribeClientEventsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClientEventsResponseBodyEvents struct {
	// The ID of the Alibaba Cloud account with which the event is associated.
	//
	// example:
	//
	// 112259558861****
	AliUid *string `json:"AliUid,omitempty" xml:"AliUid,omitempty"`
	// The number of bytes that are received.
	//
	// example:
	//
	// 8665
	BytesReceived *string `json:"BytesReceived,omitempty" xml:"BytesReceived,omitempty"`
	// The number of bytes that are sent.
	//
	// example:
	//
	// 2345
	BytesSend *string `json:"BytesSend,omitempty" xml:"BytesSend,omitempty"`
	// The IP address of the client.
	//
	// example:
	//
	// 100.68.*.*
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The OS that the client runs.
	//
	// example:
	//
	// Darwin 17.7.0 x64
	ClientOS *string `json:"ClientOS,omitempty" xml:"ClientOS,omitempty"`
	// The client version.
	//
	// example:
	//
	// 1.0.4 202012021700
	ClientVersion *string `json:"ClientVersion,omitempty" xml:"ClientVersion,omitempty"`
	// The desktop group ID.
	//
	// example:
	//
	// dg-kadkdfaf****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The desktop group name.
	//
	// example:
	//
	// testName
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// The cloud desktop ID.
	//
	// example:
	//
	// ecd-8fupvkhg0aayu****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The IP address of the cloud desktop.
	//
	// example:
	//
	// 10.10.*.*
	DesktopIp *string `json:"DesktopIp,omitempty" xml:"DesktopIp,omitempty"`
	// The cloud desktop name.
	//
	// example:
	//
	// test
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The ID of the directory to which the cloud desktop belongs.
	//
	// example:
	//
	// cn-hangzhou+dir-bh77qa8nmjot4****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The directory type.
	//
	// example:
	//
	// RAM
	DirectoryType *string `json:"DirectoryType,omitempty" xml:"DirectoryType,omitempty"`
	// The information about the end user that connects to the cloud desktop from the EDS client. The information can be a RAM user ID or an AD username.
	//
	// example:
	//
	// 28961708130834****
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The event ID.
	//
	// example:
	//
	// 5651188b-3070-d1cc-5311-75753d59****
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// The time when the event occurred.
	//
	// example:
	//
	// 2020-11-30T06:32:31Z
	EventTime *string `json:"EventTime,omitempty" xml:"EventTime,omitempty"`
	// The event type. Valid values:
	//
	// example:
	//
	// DESKTOP_DISCONNECT
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The ID of the workspace to which the cloud desktop belongs.
	//
	// example:
	//
	// cn-hangzhou+dir-bh77qa8nmjot4****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The workspace name.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The account type of the workspace.
	//
	// Valid values:
	//
	// 	- SIMPLE: convenience account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- AD_CONNECTOR: enterprise AD account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SIMPLE
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the event. If you set the EventType parameter to `DESKTOP_DISCONNECT` or `GET_CONNECTION_TICKET`, this parameter is returned. Valid values:
	//
	// 	- 200\\. The value indicates that the request is successful.
	//
	// 	- An error message. The value indicates that the request failed. Example: FailedToGetConnectionTicket.
	//
	// example:
	//
	// 200
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClientEventsResponseBodyEvents) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientEventsResponseBodyEvents) GoString() string {
	return s.String()
}

func (s *DescribeClientEventsResponseBodyEvents) SetAliUid(v string) *DescribeClientEventsResponseBodyEvents {
	s.AliUid = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetBytesReceived(v string) *DescribeClientEventsResponseBodyEvents {
	s.BytesReceived = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetBytesSend(v string) *DescribeClientEventsResponseBodyEvents {
	s.BytesSend = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetClientIp(v string) *DescribeClientEventsResponseBodyEvents {
	s.ClientIp = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetClientOS(v string) *DescribeClientEventsResponseBodyEvents {
	s.ClientOS = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetClientVersion(v string) *DescribeClientEventsResponseBodyEvents {
	s.ClientVersion = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetDesktopGroupId(v string) *DescribeClientEventsResponseBodyEvents {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetDesktopGroupName(v string) *DescribeClientEventsResponseBodyEvents {
	s.DesktopGroupName = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetDesktopId(v string) *DescribeClientEventsResponseBodyEvents {
	s.DesktopId = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetDesktopIp(v string) *DescribeClientEventsResponseBodyEvents {
	s.DesktopIp = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetDesktopName(v string) *DescribeClientEventsResponseBodyEvents {
	s.DesktopName = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetDirectoryId(v string) *DescribeClientEventsResponseBodyEvents {
	s.DirectoryId = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetDirectoryType(v string) *DescribeClientEventsResponseBodyEvents {
	s.DirectoryType = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetEndUserId(v string) *DescribeClientEventsResponseBodyEvents {
	s.EndUserId = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetEventId(v string) *DescribeClientEventsResponseBodyEvents {
	s.EventId = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetEventTime(v string) *DescribeClientEventsResponseBodyEvents {
	s.EventTime = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetEventType(v string) *DescribeClientEventsResponseBodyEvents {
	s.EventType = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetOfficeSiteId(v string) *DescribeClientEventsResponseBodyEvents {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetOfficeSiteName(v string) *DescribeClientEventsResponseBodyEvents {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetOfficeSiteType(v string) *DescribeClientEventsResponseBodyEvents {
	s.OfficeSiteType = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetRegionId(v string) *DescribeClientEventsResponseBodyEvents {
	s.RegionId = &v
	return s
}

func (s *DescribeClientEventsResponseBodyEvents) SetStatus(v string) *DescribeClientEventsResponseBodyEvents {
	s.Status = &v
	return s
}

type DescribeClientEventsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClientEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClientEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClientEventsResponse) GoString() string {
	return s.String()
}

func (s *DescribeClientEventsResponse) SetHeaders(v map[string]*string) *DescribeClientEventsResponse {
	s.Headers = v
	return s
}

func (s *DescribeClientEventsResponse) SetStatusCode(v int32) *DescribeClientEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClientEventsResponse) SetBody(v *DescribeClientEventsResponseBody) *DescribeClientEventsResponse {
	s.Body = v
	return s
}

type DescribeCloudDriveGroupsRequest struct {
	// The ID of the cloud disk in Cloud Drive Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai+cds-135515****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// cn-hangzhou+dir-jedbpr4sl9l37****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The workspace name.
	//
	// example:
	//
	// testDirectoryName
	DirectoryName *string `json:"DirectoryName,omitempty" xml:"DirectoryName,omitempty"`
	// The team space status. Valid values:
	//
	// 	- enabled
	//
	// 	- disabled
	//
	// Default value: enabled.
	//
	// example:
	//
	// enabled
	DriveStatus *string `json:"DriveStatus,omitempty" xml:"DriveStatus,omitempty"`
	// Specifies whether the space is increased.
	//
	// 	- binding: increased
	//
	// 	- unbound: not increased
	//
	// Default value: null. The default value indicates that all spaces are queried.
	//
	// if can be null:
	// true
	//
	// example:
	//
	// binding
	DriveType *string `json:"DriveType,omitempty" xml:"DriveType,omitempty"`
	// The team ID.
	GroupId []*string `json:"GroupId,omitempty" xml:"GroupId,omitempty" type:"Repeated"`
	// The team name for fuzzy search.
	//
	// example:
	//
	// Test Team 1
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// The team type.
	//
	// 	- org: organizational structure
	//
	// 	- directory: workspace
	//
	// Default value: null. The default value indicates that all types of teams are queried.
	//
	// example:
	//
	// org
	GroupType *string `json:"GroupType,omitempty" xml:"GroupType,omitempty"`
	// The number of entries to return on each page.
	//
	// 	- Valid values: 1 to 100
	//
	// 	- Default value: 20
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6lY3I2VNHLwy+nIoSXh****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the parent node. If a parent node ID is specified, the subnodes are queried. If you set the value of this parameter to root, the root node is queried.
	//
	// Default value: null. The default value indicates that all nodes are queried.
	//
	// example:
	//
	// cg-e70ga4ixp30ur****
	ParentGroupId *string `json:"ParentGroupId,omitempty" xml:"ParentGroupId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudDriveGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveGroupsRequest) SetCdsId(v string) *DescribeCloudDriveGroupsRequest {
	s.CdsId = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetDirectoryId(v string) *DescribeCloudDriveGroupsRequest {
	s.DirectoryId = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetDirectoryName(v string) *DescribeCloudDriveGroupsRequest {
	s.DirectoryName = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetDriveStatus(v string) *DescribeCloudDriveGroupsRequest {
	s.DriveStatus = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetDriveType(v string) *DescribeCloudDriveGroupsRequest {
	s.DriveType = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetGroupId(v []*string) *DescribeCloudDriveGroupsRequest {
	s.GroupId = v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetGroupName(v string) *DescribeCloudDriveGroupsRequest {
	s.GroupName = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetGroupType(v string) *DescribeCloudDriveGroupsRequest {
	s.GroupType = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetMaxResults(v int32) *DescribeCloudDriveGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetNextToken(v string) *DescribeCloudDriveGroupsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetParentGroupId(v string) *DescribeCloudDriveGroupsRequest {
	s.ParentGroupId = &v
	return s
}

func (s *DescribeCloudDriveGroupsRequest) SetRegionId(v string) *DescribeCloudDriveGroupsRequest {
	s.RegionId = &v
	return s
}

type DescribeCloudDriveGroupsResponseBody struct {
	// The list of team spaces.
	CloudDriveGroups []*DescribeCloudDriveGroupsResponseBodyCloudDriveGroups `json:"CloudDriveGroups,omitempty" xml:"CloudDriveGroups,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 0
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// EF015AE5-B30A-5189-B519-735CEE40****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudDriveGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveGroupsResponseBody) SetCloudDriveGroups(v []*DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) *DescribeCloudDriveGroupsResponseBody {
	s.CloudDriveGroups = v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBody) SetCount(v int64) *DescribeCloudDriveGroupsResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBody) SetNextToken(v string) *DescribeCloudDriveGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBody) SetRequestId(v string) *DescribeCloudDriveGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBody) SetSuccess(v bool) *DescribeCloudDriveGroupsResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudDriveGroupsResponseBodyCloudDriveGroups struct {
	AdminUserIds   *string                                                               `json:"AdminUserIds,omitempty" xml:"AdminUserIds,omitempty"`
	AdminUserInfos []*DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos `json:"AdminUserInfos,omitempty" xml:"AdminUserInfos,omitempty" type:"Repeated"`
	// The time when the team space was created.
	//
	// example:
	//
	// 2022-04-11T07:44:21Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// cn-hangzhou+dir-959593****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The team space ID.
	//
	// example:
	//
	// sh1234
	DriveId *string `json:"DriveId,omitempty" xml:"DriveId,omitempty"`
	// The team ID.
	//
	// example:
	//
	// cg-e70ga4ixp30ur****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The name of the team space.
	//
	// example:
	//
	// Test Team 1
	GroupName      *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	OrgId          *string `json:"OrgId,omitempty" xml:"OrgId,omitempty"`
	RecycleBinSize *string `json:"RecycleBinSize,omitempty" xml:"RecycleBinSize,omitempty"`
	// The team space status. Valid values:
	//
	// 	- enabled
	//
	// 	- disabled
	//
	// Default value: enabled.
	//
	// example:
	//
	// enabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The total capacity of the team space.
	//
	// example:
	//
	// 5368709120
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
	// The capacity of the used space. Unit: bytes.
	//
	// example:
	//
	// 1024000000
	UsedSize *string `json:"UsedSize,omitempty" xml:"UsedSize,omitempty"`
}

func (s DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetAdminUserIds(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.AdminUserIds = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetAdminUserInfos(v []*DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.AdminUserInfos = v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetCreateTime(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.CreateTime = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetDirectoryId(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.DirectoryId = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetDriveId(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.DriveId = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetGroupId(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.GroupId = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetGroupName(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.GroupName = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetOrgId(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.OrgId = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetRecycleBinSize(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.RecycleBinSize = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetStatus(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.Status = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetTotalSize(v int64) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.TotalSize = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups) SetUsedSize(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroups {
	s.UsedSize = &v
	return s
}

type DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos struct {
	Email        *string `json:"Email,omitempty" xml:"Email,omitempty"`
	EndUserId    *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	JobNumber    *string `json:"JobNumber,omitempty" xml:"JobNumber,omitempty"`
	NickName     *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	Phone        *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	RealNickName *string `json:"RealNickName,omitempty" xml:"RealNickName,omitempty"`
	Remark       *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
}

func (s DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) SetEmail(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos {
	s.Email = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) SetEndUserId(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos {
	s.EndUserId = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) SetJobNumber(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos {
	s.JobNumber = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) SetNickName(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos {
	s.NickName = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) SetPhone(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos {
	s.Phone = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) SetRealNickName(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos {
	s.RealNickName = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos) SetRemark(v string) *DescribeCloudDriveGroupsResponseBodyCloudDriveGroupsAdminUserInfos {
	s.Remark = &v
	return s
}

type DescribeCloudDriveGroupsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudDriveGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudDriveGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveGroupsResponse) SetHeaders(v map[string]*string) *DescribeCloudDriveGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudDriveGroupsResponse) SetStatusCode(v int32) *DescribeCloudDriveGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudDriveGroupsResponse) SetBody(v *DescribeCloudDriveGroupsResponseBody) *DescribeCloudDriveGroupsResponse {
	s.Body = v
	return s
}

type DescribeCloudDrivePermissionsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-82414*****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudDrivePermissionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDrivePermissionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudDrivePermissionsRequest) SetCdsId(v string) *DescribeCloudDrivePermissionsRequest {
	s.CdsId = &v
	return s
}

func (s *DescribeCloudDrivePermissionsRequest) SetRegionId(v string) *DescribeCloudDrivePermissionsRequest {
	s.RegionId = &v
	return s
}

type DescribeCloudDrivePermissionsResponseBody struct {
	CloudDrivePermissionModels []*DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels `json:"CloudDrivePermissionModels,omitempty" xml:"CloudDrivePermissionModels,omitempty" type:"Repeated"`
	// example:
	//
	// A87DBB05-653A-5E4B-B72B-5F4A1E07E5B3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCloudDrivePermissionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDrivePermissionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudDrivePermissionsResponseBody) SetCloudDrivePermissionModels(v []*DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels) *DescribeCloudDrivePermissionsResponseBody {
	s.CloudDrivePermissionModels = v
	return s
}

func (s *DescribeCloudDrivePermissionsResponseBody) SetRequestId(v string) *DescribeCloudDrivePermissionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels struct {
	EndUsers []*string `json:"EndUsers,omitempty" xml:"EndUsers,omitempty" type:"Repeated"`
	// example:
	//
	// CDS_DOWNLOAD
	Permission *string `json:"Permission,omitempty" xml:"Permission,omitempty"`
}

func (s DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels) GoString() string {
	return s.String()
}

func (s *DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels) SetEndUsers(v []*string) *DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels {
	s.EndUsers = v
	return s
}

func (s *DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels) SetPermission(v string) *DescribeCloudDrivePermissionsResponseBodyCloudDrivePermissionModels {
	s.Permission = &v
	return s
}

type DescribeCloudDrivePermissionsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudDrivePermissionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudDrivePermissionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDrivePermissionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudDrivePermissionsResponse) SetHeaders(v map[string]*string) *DescribeCloudDrivePermissionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudDrivePermissionsResponse) SetStatusCode(v int32) *DescribeCloudDrivePermissionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudDrivePermissionsResponse) SetBody(v *DescribeCloudDrivePermissionsResponseBody) *DescribeCloudDrivePermissionsResponse {
	s.Body = v
	return s
}

type DescribeCloudDriveUsersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-066224****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// example:
	//
	// abc
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCloudDriveUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveUsersRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveUsersRequest) SetCdsId(v string) *DescribeCloudDriveUsersRequest {
	s.CdsId = &v
	return s
}

func (s *DescribeCloudDriveUsersRequest) SetEndUserId(v string) *DescribeCloudDriveUsersRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeCloudDriveUsersRequest) SetMaxResults(v int32) *DescribeCloudDriveUsersRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeCloudDriveUsersRequest) SetNextToken(v string) *DescribeCloudDriveUsersRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeCloudDriveUsersRequest) SetRegionId(v string) *DescribeCloudDriveUsersRequest {
	s.RegionId = &v
	return s
}

type DescribeCloudDriveUsersResponseBody struct {
	CloudDriveUsers []*DescribeCloudDriveUsersResponseBodyCloudDriveUsers `json:"CloudDriveUsers,omitempty" xml:"CloudDriveUsers,omitempty" type:"Repeated"`
	// example:
	//
	// aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// F083AAE5-7AA9-53BB-9060-AFFB2C18****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCloudDriveUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveUsersResponseBody) SetCloudDriveUsers(v []*DescribeCloudDriveUsersResponseBodyCloudDriveUsers) *DescribeCloudDriveUsersResponseBody {
	s.CloudDriveUsers = v
	return s
}

func (s *DescribeCloudDriveUsersResponseBody) SetNextToken(v string) *DescribeCloudDriveUsersResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeCloudDriveUsersResponseBody) SetRequestId(v string) *DescribeCloudDriveUsersResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCloudDriveUsersResponseBodyCloudDriveUsers struct {
	// example:
	//
	// 8
	DriveId   *string `json:"DriveId,omitempty" xml:"DriveId,omitempty"`
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// example:
	//
	// enabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 10240000
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
	// example:
	//
	// 20490
	UsedSize *int64 `json:"UsedSize,omitempty" xml:"UsedSize,omitempty"`
	// example:
	//
	// abc
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// abc
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeCloudDriveUsersResponseBodyCloudDriveUsers) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveUsersResponseBodyCloudDriveUsers) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveUsersResponseBodyCloudDriveUsers) SetDriveId(v string) *DescribeCloudDriveUsersResponseBodyCloudDriveUsers {
	s.DriveId = &v
	return s
}

func (s *DescribeCloudDriveUsersResponseBodyCloudDriveUsers) SetEndUserId(v string) *DescribeCloudDriveUsersResponseBodyCloudDriveUsers {
	s.EndUserId = &v
	return s
}

func (s *DescribeCloudDriveUsersResponseBodyCloudDriveUsers) SetStatus(v string) *DescribeCloudDriveUsersResponseBodyCloudDriveUsers {
	s.Status = &v
	return s
}

func (s *DescribeCloudDriveUsersResponseBodyCloudDriveUsers) SetTotalSize(v int64) *DescribeCloudDriveUsersResponseBodyCloudDriveUsers {
	s.TotalSize = &v
	return s
}

func (s *DescribeCloudDriveUsersResponseBodyCloudDriveUsers) SetUsedSize(v int64) *DescribeCloudDriveUsersResponseBodyCloudDriveUsers {
	s.UsedSize = &v
	return s
}

func (s *DescribeCloudDriveUsersResponseBodyCloudDriveUsers) SetUserId(v string) *DescribeCloudDriveUsersResponseBodyCloudDriveUsers {
	s.UserId = &v
	return s
}

func (s *DescribeCloudDriveUsersResponseBodyCloudDriveUsers) SetUserName(v string) *DescribeCloudDriveUsersResponseBodyCloudDriveUsers {
	s.UserName = &v
	return s
}

type DescribeCloudDriveUsersResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudDriveUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudDriveUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudDriveUsersResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudDriveUsersResponse) SetHeaders(v map[string]*string) *DescribeCloudDriveUsersResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudDriveUsersResponse) SetStatusCode(v int32) *DescribeCloudDriveUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudDriveUsersResponse) SetBody(v *DescribeCloudDriveUsersResponseBody) *DescribeCloudDriveUsersResponse {
	s.Body = v
	return s
}

type DescribeCustomizedListHeadersRequest struct {
	// example:
	//
	// zh-CN
	LangType *string `json:"LangType,omitempty" xml:"LangType,omitempty"`
	// example:
	//
	// desktop
	ListType *string `json:"ListType,omitempty" xml:"ListType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeCustomizedListHeadersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomizedListHeadersRequest) GoString() string {
	return s.String()
}

func (s *DescribeCustomizedListHeadersRequest) SetLangType(v string) *DescribeCustomizedListHeadersRequest {
	s.LangType = &v
	return s
}

func (s *DescribeCustomizedListHeadersRequest) SetListType(v string) *DescribeCustomizedListHeadersRequest {
	s.ListType = &v
	return s
}

func (s *DescribeCustomizedListHeadersRequest) SetRegionId(v string) *DescribeCustomizedListHeadersRequest {
	s.RegionId = &v
	return s
}

type DescribeCustomizedListHeadersResponseBody struct {
	Headers []*DescribeCustomizedListHeadersResponseBodyHeaders `json:"Headers,omitempty" xml:"Headers,omitempty" type:"Repeated"`
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeCustomizedListHeadersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomizedListHeadersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCustomizedListHeadersResponseBody) SetHeaders(v []*DescribeCustomizedListHeadersResponseBodyHeaders) *DescribeCustomizedListHeadersResponseBody {
	s.Headers = v
	return s
}

func (s *DescribeCustomizedListHeadersResponseBody) SetRequestId(v string) *DescribeCustomizedListHeadersResponseBody {
	s.RequestId = &v
	return s
}

type DescribeCustomizedListHeadersResponseBodyHeaders struct {
	// example:
	//
	// display
	DisplayType *string `json:"DisplayType,omitempty" xml:"DisplayType,omitempty"`
	// example:
	//
	// pay_type
	HeaderKey  *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
	HeaderName *string `json:"HeaderName,omitempty" xml:"HeaderName,omitempty"`
}

func (s DescribeCustomizedListHeadersResponseBodyHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomizedListHeadersResponseBodyHeaders) GoString() string {
	return s.String()
}

func (s *DescribeCustomizedListHeadersResponseBodyHeaders) SetDisplayType(v string) *DescribeCustomizedListHeadersResponseBodyHeaders {
	s.DisplayType = &v
	return s
}

func (s *DescribeCustomizedListHeadersResponseBodyHeaders) SetHeaderKey(v string) *DescribeCustomizedListHeadersResponseBodyHeaders {
	s.HeaderKey = &v
	return s
}

func (s *DescribeCustomizedListHeadersResponseBodyHeaders) SetHeaderName(v string) *DescribeCustomizedListHeadersResponseBodyHeaders {
	s.HeaderName = &v
	return s
}

type DescribeCustomizedListHeadersResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCustomizedListHeadersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCustomizedListHeadersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCustomizedListHeadersResponse) GoString() string {
	return s.String()
}

func (s *DescribeCustomizedListHeadersResponse) SetHeaders(v map[string]*string) *DescribeCustomizedListHeadersResponse {
	s.Headers = v
	return s
}

func (s *DescribeCustomizedListHeadersResponse) SetStatusCode(v int32) *DescribeCustomizedListHeadersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCustomizedListHeadersResponse) SetBody(v *DescribeCustomizedListHeadersResponseBody) *DescribeCustomizedListHeadersResponse {
	s.Body = v
	return s
}

type DescribeDesktopGroupSessionsRequest struct {
	// The end of the time range to query.
	//
	// example:
	//
	// "2022-08-31T06:56:45Z"
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// xianqiu
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// "asdfdfsdfsdfds"
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The type of the session.
	//
	// Valid values:
	//
	// 	- 0: single-session
	//
	// 	- 1: multi-session
	//
	// example:
	//
	// 1
	OwnType *int32 `json:"OwnType,omitempty" xml:"OwnType,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the session.
	//
	// Valid values:
	//
	// 	- Connected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Disconnected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Connected
	SessionStatus *string `json:"SessionStatus,omitempty" xml:"SessionStatus,omitempty"`
	// The beginning of the time range to query.
	//
	// example:
	//
	// "2022-08-31T06:56:45Z"
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDesktopGroupSessionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupSessionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupSessionsRequest) SetEndTime(v string) *DescribeDesktopGroupSessionsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDesktopGroupSessionsRequest) SetEndUserId(v string) *DescribeDesktopGroupSessionsRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopGroupSessionsRequest) SetMaxResults(v int32) *DescribeDesktopGroupSessionsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDesktopGroupSessionsRequest) SetNextToken(v string) *DescribeDesktopGroupSessionsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopGroupSessionsRequest) SetOwnType(v int32) *DescribeDesktopGroupSessionsRequest {
	s.OwnType = &v
	return s
}

func (s *DescribeDesktopGroupSessionsRequest) SetRegionId(v string) *DescribeDesktopGroupSessionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDesktopGroupSessionsRequest) SetSessionStatus(v string) *DescribeDesktopGroupSessionsRequest {
	s.SessionStatus = &v
	return s
}

func (s *DescribeDesktopGroupSessionsRequest) SetStartTime(v string) *DescribeDesktopGroupSessionsRequest {
	s.StartTime = &v
	return s
}

type DescribeDesktopGroupSessionsResponseBody struct {
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// D0920845-7359-59FC-9899-B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The sessions.
	Sessions []*DescribeDesktopGroupSessionsResponseBodySessions `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The total number of sessions.
	//
	// example:
	//
	// 15
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDesktopGroupSessionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupSessionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupSessionsResponseBody) SetNextToken(v string) *DescribeDesktopGroupSessionsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBody) SetRequestId(v string) *DescribeDesktopGroupSessionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBody) SetSessions(v []*DescribeDesktopGroupSessionsResponseBodySessions) *DescribeDesktopGroupSessionsResponseBody {
	s.Sessions = v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBody) SetTotalCount(v int32) *DescribeDesktopGroupSessionsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDesktopGroupSessionsResponseBodySessions struct {
	// The IP address of the client.
	//
	// example:
	//
	// 172.21.XX.XX
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The OS that the client runs.
	//
	// example:
	//
	// windows_\\"Windows10Enterprise\\"10.0(Build22000)
	ClientOS *string `json:"ClientOS,omitempty" xml:"ClientOS,omitempty"`
	// The version of the client.
	//
	// example:
	//
	// 2.0.0-R-20221030.08****
	ClientVersion *string `json:"ClientVersion,omitempty" xml:"ClientVersion,omitempty"`
	// The ID of the desktop group.
	//
	// example:
	//
	// dg-iaqu3bi2xtie****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The name of the desktop group.
	//
	// example:
	//
	// Test
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// If the session is being established, the value of this parameter indicates the ID of the current cloud desktop. If the session is disconnected, the value of this parameter indicates the ID of the cloud desktop that was most recently connected.
	//
	// example:
	//
	// ecd-g6t1ukbaea****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The point in time when the end user applies for administrator assistance.
	//
	// example:
	//
	// 1678794261000
	EndUserApplyCoordinateTime *int64 `json:"EndUserApplyCoordinateTime,omitempty" xml:"EndUserApplyCoordinateTime,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// xianqiu
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The end time of the most recent connection.
	//
	// example:
	//
	// 2022-08-31 06:56:45
	LastSessionEndTime *string `json:"LastSessionEndTime,omitempty" xml:"LastSessionEndTime,omitempty"`
	// The start time of the most recent connection.
	//
	// example:
	//
	// 2022-08-31 06:56:45
	LastSessionStartTime *string `json:"LastSessionStartTime,omitempty" xml:"LastSessionStartTime,omitempty"`
	// The duration of the most recent session.
	//
	// example:
	//
	// 120
	LatestConnectionTime *int64 `json:"LatestConnectionTime,omitempty" xml:"LatestConnectionTime,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// cn-hangzhou+dir-8904****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The name of the workspace.
	//
	// example:
	//
	// Test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The OS. Valid values:
	//
	// 	- Windows
	//
	// 	- Linux
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The type of the session.
	//
	// Valid values:
	//
	// 	- 0: single-session
	//
	// 	- 1: multi-session
	//
	// example:
	//
	// 0
	OwnType *int32 `json:"OwnType,omitempty" xml:"OwnType,omitempty"`
	// The type of the protocol.
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The duration during which the cloud desktop stays in the Idle state.
	//
	// example:
	//
	// 120
	SessionIdleTime *int64 `json:"SessionIdleTime,omitempty" xml:"SessionIdleTime,omitempty"`
	// The state of the session.
	//
	// Valid values:
	//
	// 	- Connected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Disconnected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Connected
	SessionStatus *string `json:"SessionStatus,omitempty" xml:"SessionStatus,omitempty"`
	// The total duration of the sessions.
	//
	// example:
	//
	// 120
	TotalConnectionDuration *int64 `json:"TotalConnectionDuration,omitempty" xml:"TotalConnectionDuration,omitempty"`
}

func (s DescribeDesktopGroupSessionsResponseBodySessions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupSessionsResponseBodySessions) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetClientIp(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.ClientIp = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetClientOS(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.ClientOS = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetClientVersion(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.ClientVersion = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetDesktopGroupId(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetDesktopGroupName(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.DesktopGroupName = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetDesktopId(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.DesktopId = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetEndUserApplyCoordinateTime(v int64) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.EndUserApplyCoordinateTime = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetEndUserId(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetLastSessionEndTime(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.LastSessionEndTime = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetLastSessionStartTime(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.LastSessionStartTime = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetLatestConnectionTime(v int64) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.LatestConnectionTime = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetOfficeSiteId(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetOfficeSiteName(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetOsType(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.OsType = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetOwnType(v int32) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.OwnType = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetProtocolType(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetSessionIdleTime(v int64) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.SessionIdleTime = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetSessionStatus(v string) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.SessionStatus = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponseBodySessions) SetTotalConnectionDuration(v int64) *DescribeDesktopGroupSessionsResponseBodySessions {
	s.TotalConnectionDuration = &v
	return s
}

type DescribeDesktopGroupSessionsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopGroupSessionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopGroupSessionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupSessionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupSessionsResponse) SetHeaders(v map[string]*string) *DescribeDesktopGroupSessionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopGroupSessionsResponse) SetStatusCode(v int32) *DescribeDesktopGroupSessionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopGroupSessionsResponse) SetBody(v *DescribeDesktopGroupSessionsResponseBody) *DescribeDesktopGroupSessionsResponse {
	s.Body = v
	return s
}

type DescribeDesktopGroupsRequest struct {
	// The IDs of the cloud computer templates.
	BundleId []*string `json:"BundleId,omitempty" xml:"BundleId,omitempty" type:"Repeated"`
	// The ID of the cloud computer pool.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The name of the cloud computer pool to query. Fuzzy search is supported.
	//
	// example:
	//
	// testName
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// The authorized user IDs of cloud computer pools.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The authorized users that you want to exclude.
	ExcludedEndUserIds []*string `json:"ExcludedEndUserIds,omitempty" xml:"ExcludedEndUserIds,omitempty" type:"Repeated"`
	// The IDs of the images.
	//
	// if can be null:
	// false
	ImageId []*string `json:"ImageId,omitempty" xml:"ImageId,omitempty" type:"Repeated"`
	// The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the office network to which the cloud computer pool belongs.
	//
	// example:
	//
	// cn-hangzhou+dir-467671****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The type of the cloud computer pool.
	//
	// >  This parameter is not publicly available.
	//
	// Valid values:
	//
	// 	- 0: individual (single session)
	//
	// 	- 1: shared (multiple sessions)
	//
	// example:
	//
	// 0
	OwnType *int64 `json:"OwnType,omitempty" xml:"OwnType,omitempty"`
	// The subscription duration of the cloud computer pool. The unit is specified by the `PeriodUnit` parameter.
	//
	// 	- Valid values if the `PeriodUnit` parameter is set to `Month`:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 6
	//
	// 	- Valid values if the `PeriodUnit` parameter is set to `Year`:
	//
	//     	- 1
	//
	//     	- 2
	//
	//     	- 3
	//
	//     	- 4
	//
	//     	- 5
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The ID of the policy that you want to associate with the cloud computer pool.
	//
	// example:
	//
	// pg-53iyi2aar0nd6****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- High-definition Experience (HDX)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Adaptive Streaming Protocol (ASP)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The payment status of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: unpaid
	//
	// 	- 1: paid
	//
	// 	- 2: overdue or expired
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The tags attached to the cloud computer pool. You can specify 1 to 20 tags.
	Tag []*DescribeDesktopGroupsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeDesktopGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupsRequest) SetBundleId(v []*string) *DescribeDesktopGroupsRequest {
	s.BundleId = v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetDesktopGroupId(v string) *DescribeDesktopGroupsRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetDesktopGroupName(v string) *DescribeDesktopGroupsRequest {
	s.DesktopGroupName = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetEndUserIds(v []*string) *DescribeDesktopGroupsRequest {
	s.EndUserIds = v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetExcludedEndUserIds(v []*string) *DescribeDesktopGroupsRequest {
	s.ExcludedEndUserIds = v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetImageId(v []*string) *DescribeDesktopGroupsRequest {
	s.ImageId = v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetMaxResults(v int32) *DescribeDesktopGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetNextToken(v string) *DescribeDesktopGroupsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetOfficeSiteId(v string) *DescribeDesktopGroupsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetOwnType(v int64) *DescribeDesktopGroupsRequest {
	s.OwnType = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetPeriod(v int32) *DescribeDesktopGroupsRequest {
	s.Period = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetPeriodUnit(v string) *DescribeDesktopGroupsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetPolicyGroupId(v string) *DescribeDesktopGroupsRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetProtocolType(v string) *DescribeDesktopGroupsRequest {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetRegionId(v string) *DescribeDesktopGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetStatus(v int32) *DescribeDesktopGroupsRequest {
	s.Status = &v
	return s
}

func (s *DescribeDesktopGroupsRequest) SetTag(v []*DescribeDesktopGroupsRequestTag) *DescribeDesktopGroupsRequest {
	s.Tag = v
	return s
}

type DescribeDesktopGroupsRequestTag struct {
	// The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDesktopGroupsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupsRequestTag) SetKey(v string) *DescribeDesktopGroupsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDesktopGroupsRequestTag) SetValue(v string) *DescribeDesktopGroupsRequestTag {
	s.Value = &v
	return s
}

type DescribeDesktopGroupsResponseBody struct {
	// The cloud computer pools.
	DesktopGroups []*DescribeDesktopGroupsResponseBodyDesktopGroups `json:"DesktopGroups,omitempty" xml:"DesktopGroups,omitempty" type:"Repeated"`
	// The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDesktopGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupsResponseBody) SetDesktopGroups(v []*DescribeDesktopGroupsResponseBodyDesktopGroups) *DescribeDesktopGroupsResponseBody {
	s.DesktopGroups = v
	return s
}

func (s *DescribeDesktopGroupsResponseBody) SetNextToken(v string) *DescribeDesktopGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBody) SetRequestId(v string) *DescribeDesktopGroupsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDesktopGroupsResponseBodyDesktopGroups struct {
	// The number of concurrent sessions that is allowed for each cloud computer pool in a multi-session cloud computer pool.
	//
	// example:
	//
	// 1
	BindAmount *int64 `json:"BindAmount,omitempty" xml:"BindAmount,omitempty"`
	// 	- This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter specifies the number of cloud computers to purchase in the pool. Valid values: 0 to 200.
	//
	// 	- For a pay-as-you-go pool, this parameter specifies the minimum number of cloud computers to create in the pool. Valid values: 0 to `MaxDesktopsCount`. Default value: 1.
	//
	// example:
	//
	// 5
	BuyDesktopsCount *int32 `json:"BuyDesktopsCount,omitempty" xml:"BuyDesktopsCount,omitempty"`
	// The remarks.
	//
	// example:
	//
	// test
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The maximum period of time during which a session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds.
	//
	// example:
	//
	// 90000
	ConnectDuration *int64 `json:"ConnectDuration,omitempty" xml:"ConnectDuration,omitempty"`
	// The number of cloud computers in each state.
	CountPerStatus []*DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus `json:"CountPerStatus,omitempty" xml:"CountPerStatus,omitempty" type:"Repeated"`
	// The number of vCPUs.
	//
	// example:
	//
	// 4
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The time when the cloud computer pool was created.
	//
	// example:
	//
	// 2022-02-17T14:51:07Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The Alibaba Cloud account that creates the cloud computer pool.
	//
	// example:
	//
	// 1007214305******
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The category of the user disk.
	//
	// Valid values:
	//
	// 	- cloud_efficiency: ultra disk
	//
	// 	- cloud_ssd: standard SSD
	//
	// 	- cloud_essd: enhanced SSD (ESSD)
	//
	// example:
	//
	// cloud_ssd
	DataDiskCategory *string `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	// The user disk capacity. Unit: GiB.
	//
	// example:
	//
	// 50
	DataDiskSize *string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The number of cloud computers that are created.
	//
	// example:
	//
	// 2
	DesktopCount *int32 `json:"DesktopCount,omitempty" xml:"DesktopCount,omitempty"`
	// The ID of the cloud computer pool.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The name of the cloud computer pool.
	//
	// example:
	//
	// test1
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// The cloud computer type. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the IDs of the cloud computer types supported by WUYING Workspace.
	//
	// example:
	//
	// eds.enterprise_office.4c4g
	DesktopType *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	// The number of users that are granted permissions to use the cloud computer pool.
	//
	// example:
	//
	// 1
	EndUserCount *int32 `json:"EndUserCount,omitempty" xml:"EndUserCount,omitempty"`
	// The time when the subscription cloud computer pool expires.
	//
	// example:
	//
	// 2022-03-17T16:00:00Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The number of GPUs.
	//
	// example:
	//
	// 1
	GpuCount *float32 `json:"GpuCount,omitempty" xml:"GpuCount,omitempty"`
	// The version of the GPU driver.
	//
	// example:
	//
	// 12
	GpuDriverVersion *string `json:"GpuDriverVersion,omitempty" xml:"GpuDriverVersion,omitempty"`
	// The GPU memory.
	//
	// example:
	//
	// 16 GiB
	GpuSpec *string `json:"GpuSpec,omitempty" xml:"GpuSpec,omitempty"`
	// The period of time after which a session is closed. After an end user connects to a cloud computer, the session is established. If the system does not detect inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds.
	//
	// example:
	//
	// 90000
	IdleDisconnectDuration *int64 `json:"IdleDisconnectDuration,omitempty" xml:"IdleDisconnectDuration,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-gq15cq5ydlvwn****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The keep-alive duration of a session after the session is disconnected. Valid values: 180000 (3 minutes) to 345600000 (4 days). Unit: milliseconds. If you set this parameter to 0, the session is permanently retained after it is disconnected.
	//
	// When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can continue to access data of the session.
	//
	// example:
	//
	// 1000
	KeepDuration *int64 `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	// The load balancing policy of the multi-session cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: depth-first
	//
	// 	- 1: breadth-first
	//
	// example:
	//
	// 1
	LoadPolicy *int64 `json:"LoadPolicy,omitempty" xml:"LoadPolicy,omitempty"`
	// The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool.
	//
	// example:
	//
	// 10
	MaxDesktopsCount *int32 `json:"MaxDesktopsCount,omitempty" xml:"MaxDesktopsCount,omitempty"`
	// The memory size. Unit: MiB.
	//
	// example:
	//
	// 16384
	Memory *int64 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool.
	//
	// example:
	//
	// 1
	MinDesktopsCount *int32 `json:"MinDesktopsCount,omitempty" xml:"MinDesktopsCount,omitempty"`
	// The name of the office network in which the cloud computer pool resides.
	//
	// example:
	//
	// cn-hangzhou+dir-467671****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The ID of the office network to which the cloud computer pool belongs.
	//
	// example:
	//
	// testName
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The account type of the office network.
	//
	// Valid values:
	//
	// 	- PERSONAL: individual office network
	//
	// 	- SIMPLE: convenience office network
	//
	// 	- AD_CONNECTOR: enterprise Active Directory (AD) office network
	//
	// 	- RAM: Resource Access Management (RAM)-based office network
	//
	// example:
	//
	// SIMPLE
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	// The OS.
	//
	// Valid values:
	//
	// 	- Linux
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The ID of the cloud computer template.
	//
	// example:
	//
	// bundle_eds_general_4c8g_s8d5_win2019
	OwnBundleId *string `json:"OwnBundleId,omitempty" xml:"OwnBundleId,omitempty"`
	// The name of the cloud computer template.
	//
	// example:
	//
	// test
	OwnBundleName *string `json:"OwnBundleName,omitempty" xml:"OwnBundleName,omitempty"`
	// The type of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: individual (single session)
	//
	// 	- 1: shared (multiple sessions)
	//
	// example:
	//
	// 0
	OwnType *int64 `json:"OwnType,omitempty" xml:"OwnType,omitempty"`
	// The billing method of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- PostPaid: pay-as-you-go
	//
	// 	- PrePaid: subscription
	//
	// example:
	//
	// PrePaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the policy that is associated with the cloud computer pool.
	//
	// example:
	//
	// pg-53iyi2aar0nd6c8qj
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The name of the policy that is associated with the cloud computer pool.
	//
	// example:
	//
	// test-policy
	PolicyGroupName *string `json:"PolicyGroupName,omitempty" xml:"PolicyGroupName,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ASP
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The threshold for the ratio of connected sessions. This parameter indicates the condition that triggers auto scaling in a multi-session cloud computer pool. The ratio of connected sessions is calculated by using the following formula:
	//
	// `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`.
	//
	// When the specified threshold is reached, new cloud computers are automatically created. When the specified threshold is not reached, idle cloud computers are released.
	//
	// example:
	//
	// 0.85
	RatioThreshold *float32 `json:"RatioThreshold,omitempty" xml:"RatioThreshold,omitempty"`
	// The disk reset type of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: does not reset disks
	//
	// 	- 1: resets only the system disks
	//
	// 	- 2: resets only the user disks
	//
	// 	- 3: resets the system disks and user disks
	//
	// example:
	//
	// 0
	ResetType *int64 `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// The payment status of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: unpaid
	//
	// 	- 1: paid
	//
	// 	- 2: overdue or expired
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The period of time after which an idle cloud computer is stopped. When the specified period of time is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer is automatically started. Unit: milliseconds.
	//
	// example:
	//
	// 900000
	StopDuration *int64 `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
	// The ID of the subnet.
	//
	// example:
	//
	// vsw-uf63bb6*****8gfytm
	SubnetId *string `json:"SubnetId,omitempty" xml:"SubnetId,omitempty"`
	// The category of the system disk.
	//
	// Valid values:
	//
	// 	- cloud_efficiency: ultra disk
	//
	// 	- cloud_ssd: standard SSD
	//
	// 	- cloud_essd: enhanced SSD (ESSD)
	//
	// example:
	//
	// cloud_ssd
	SystemDiskCategory *string `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	// The system disk capacity. Unit: GiB.
	//
	// example:
	//
	// 80
	SystemDiskSize *int32 `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	// The tags attached to the cloud computer pool.
	Tags []*DescribeDesktopGroupsResponseBodyDesktopGroupsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// The version number of the cloud computer pool.
	//
	// example:
	//
	// 2
	Version *int32 `json:"Version,omitempty" xml:"Version,omitempty"`
	// Indicates whether disk encryption is enabled.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key for disk encryption.
	//
	// example:
	//
	// e5409ada-xxxx-xxxx-xxxx-89e31e23e993
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
}

func (s DescribeDesktopGroupsResponseBodyDesktopGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupsResponseBodyDesktopGroups) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetBindAmount(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.BindAmount = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetBuyDesktopsCount(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.BuyDesktopsCount = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetComments(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.Comments = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetConnectDuration(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.ConnectDuration = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetCountPerStatus(v []*DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.CountPerStatus = v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetCpu(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.Cpu = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetCreateTime(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.CreateTime = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetCreator(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.Creator = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetDataDiskCategory(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetDataDiskSize(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetDesktopCount(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.DesktopCount = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetDesktopGroupId(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetDesktopGroupName(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.DesktopGroupName = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetDesktopType(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.DesktopType = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetEndUserCount(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.EndUserCount = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetExpiredTime(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetGpuCount(v float32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.GpuCount = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetGpuDriverVersion(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.GpuDriverVersion = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetGpuSpec(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.GpuSpec = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetIdleDisconnectDuration(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.IdleDisconnectDuration = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetImageId(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.ImageId = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetKeepDuration(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.KeepDuration = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetLoadPolicy(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.LoadPolicy = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetMaxDesktopsCount(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.MaxDesktopsCount = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetMemory(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.Memory = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetMinDesktopsCount(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.MinDesktopsCount = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetOfficeSiteId(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetOfficeSiteName(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetOfficeSiteType(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.OfficeSiteType = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetOsType(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.OsType = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetOwnBundleId(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.OwnBundleId = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetOwnBundleName(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.OwnBundleName = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetOwnType(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.OwnType = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetPayType(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.PayType = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetPolicyGroupId(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetPolicyGroupName(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.PolicyGroupName = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetProtocolType(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetRatioThreshold(v float32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.RatioThreshold = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetResetType(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.ResetType = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetStatus(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.Status = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetStopDuration(v int64) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.StopDuration = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetSubnetId(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.SubnetId = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetSystemDiskCategory(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetSystemDiskSize(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.SystemDiskSize = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetTags(v []*DescribeDesktopGroupsResponseBodyDesktopGroupsTags) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.Tags = v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetVersion(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.Version = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetVolumeEncryptionEnabled(v bool) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroups) SetVolumeEncryptionKey(v string) *DescribeDesktopGroupsResponseBodyDesktopGroups {
	s.VolumeEncryptionKey = &v
	return s
}

type DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus struct {
	// The total number of cloud computers.
	//
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The status of the cloud computer.
	//
	// Valid values:
	//
	// 	- Stopped
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Starting
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Rebuilding
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Running
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Stopping
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Expired
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Deleted
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Pending
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus) SetCount(v int32) *DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus {
	s.Count = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus) SetStatus(v string) *DescribeDesktopGroupsResponseBodyDesktopGroupsCountPerStatus {
	s.Status = &v
	return s
}

type DescribeDesktopGroupsResponseBodyDesktopGroupsTags struct {
	// The key of the tag.
	//
	// example:
	//
	// desktop_group_name
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag.
	//
	// example:
	//
	// ds-dq2mybjr23yw*****
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDesktopGroupsResponseBodyDesktopGroupsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupsResponseBodyDesktopGroupsTags) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroupsTags) SetKey(v string) *DescribeDesktopGroupsResponseBodyDesktopGroupsTags {
	s.Key = &v
	return s
}

func (s *DescribeDesktopGroupsResponseBodyDesktopGroupsTags) SetValue(v string) *DescribeDesktopGroupsResponseBodyDesktopGroupsTags {
	s.Value = &v
	return s
}

type DescribeDesktopGroupsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopGroupsResponse) SetHeaders(v map[string]*string) *DescribeDesktopGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopGroupsResponse) SetStatusCode(v int32) *DescribeDesktopGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopGroupsResponse) SetBody(v *DescribeDesktopGroupsResponseBody) *DescribeDesktopGroupsResponse {
	s.Body = v
	return s
}

type DescribeDesktopInfoRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 100 IDs.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDesktopInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopInfoRequest) SetDesktopId(v []*string) *DescribeDesktopInfoRequest {
	s.DesktopId = v
	return s
}

func (s *DescribeDesktopInfoRequest) SetRegionId(v string) *DescribeDesktopInfoRequest {
	s.RegionId = &v
	return s
}

type DescribeDesktopInfoResponseBody struct {
	// The basic information about cloud computers.
	Desktops []*DescribeDesktopInfoResponseBodyDesktops `json:"Desktops,omitempty" xml:"Desktops,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 062B1439-709A-580E-85DF-CE97A1560565
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDesktopInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopInfoResponseBody) SetDesktops(v []*DescribeDesktopInfoResponseBodyDesktops) *DescribeDesktopInfoResponseBody {
	s.Desktops = v
	return s
}

func (s *DescribeDesktopInfoResponseBody) SetRequestId(v string) *DescribeDesktopInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDesktopInfoResponseBodyDesktops struct {
	// The connection status of the user.
	//
	// Valid values:
	//
	// 	- Connected
	//
	// 	- Disconnected
	//
	// example:
	//
	// Disconnected
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// The version of the cloud computer image.
	//
	// example:
	//
	// 1.4.0-R-***
	CurrentAppVersion *string `json:"CurrentAppVersion,omitempty" xml:"CurrentAppVersion,omitempty"`
	// The ID of the cloud computer pool.
	//
	// example:
	//
	// dg-3uiojcc0j4kh7****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The status of the cloud computer.
	//
	// Valid values:
	//
	// 	- Stopped
	//
	// 	- Failed
	//
	// 	- Starting
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Expired
	//
	// 	- Deleted
	//
	// 	- Pending
	//
	// example:
	//
	// Running
	DesktopStatus *string `json:"DesktopStatus,omitempty" xml:"DesktopStatus,omitempty"`
	// The information about flags that are used to manage cloud computers.
	ManagementFlag []*string `json:"ManagementFlag,omitempty" xml:"ManagementFlag,omitempty" type:"Repeated"`
	// The size of the update package. Unit: KB.
	//
	// example:
	//
	// 568533470
	NewAppSize *int64 `json:"NewAppSize,omitempty" xml:"NewAppSize,omitempty"`
	// The version number of the image that can be updated on the cloud computer.
	//
	// example:
	//
	// 1.6.0-R-***
	NewAppVersion *string `json:"NewAppVersion,omitempty" xml:"NewAppVersion,omitempty"`
	// The description of the image version that can be updated.
	//
	// example:
	//
	// Test package 03-07
	ReleaseNote *string `json:"ReleaseNote,omitempty" xml:"ReleaseNote,omitempty"`
	// The time when the cloud computer was first started.
	//
	// example:
	//
	// 2020-11-06T08:31Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDesktopInfoResponseBodyDesktops) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopInfoResponseBodyDesktops) GoString() string {
	return s.String()
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetConnectionStatus(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.ConnectionStatus = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetCurrentAppVersion(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.CurrentAppVersion = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetDesktopGroupId(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetDesktopId(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.DesktopId = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetDesktopStatus(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.DesktopStatus = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetManagementFlag(v []*string) *DescribeDesktopInfoResponseBodyDesktops {
	s.ManagementFlag = v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetNewAppSize(v int64) *DescribeDesktopInfoResponseBodyDesktops {
	s.NewAppSize = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetNewAppVersion(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.NewAppVersion = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetReleaseNote(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.ReleaseNote = &v
	return s
}

func (s *DescribeDesktopInfoResponseBodyDesktops) SetStartTime(v string) *DescribeDesktopInfoResponseBodyDesktops {
	s.StartTime = &v
	return s
}

type DescribeDesktopInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopInfoResponse) SetHeaders(v map[string]*string) *DescribeDesktopInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopInfoResponse) SetStatusCode(v int32) *DescribeDesktopInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopInfoResponse) SetBody(v *DescribeDesktopInfoResponseBody) *DescribeDesktopInfoResponse {
	s.Body = v
	return s
}

type DescribeDesktopOversoldGroupRequest struct {
	MaxResults       *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken        *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OversoldGroupIds []*string `json:"OversoldGroupIds,omitempty" xml:"OversoldGroupIds,omitempty" type:"Repeated"`
}

func (s DescribeDesktopOversoldGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldGroupRequest) SetMaxResults(v int32) *DescribeDesktopOversoldGroupRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDesktopOversoldGroupRequest) SetNextToken(v string) *DescribeDesktopOversoldGroupRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopOversoldGroupRequest) SetOversoldGroupIds(v []*string) *DescribeDesktopOversoldGroupRequest {
	s.OversoldGroupIds = v
	return s
}

type DescribeDesktopOversoldGroupResponseBody struct {
	Count     *int32                                          `json:"Count,omitempty" xml:"Count,omitempty"`
	Data      []*DescribeDesktopOversoldGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	NextToken *string                                         `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDesktopOversoldGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldGroupResponseBody) SetCount(v int32) *DescribeDesktopOversoldGroupResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBody) SetData(v []*DescribeDesktopOversoldGroupResponseBodyData) *DescribeDesktopOversoldGroupResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBody) SetNextToken(v string) *DescribeDesktopOversoldGroupResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBody) SetRequestId(v string) *DescribeDesktopOversoldGroupResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDesktopOversoldGroupResponseBodyData struct {
	ConcurrenceCount       *int32  `json:"ConcurrenceCount,omitempty" xml:"ConcurrenceCount,omitempty"`
	CurConcurrenceCount    *int32  `json:"CurConcurrenceCount,omitempty" xml:"CurConcurrenceCount,omitempty"`
	DataDiskSize           *int32  `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	DesktopType            *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	DirectoryId            *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	ExpireTime             *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	IdleDisconnectDuration *string `json:"IdleDisconnectDuration,omitempty" xml:"IdleDisconnectDuration,omitempty"`
	ImageId                *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	KeepDuration           *string `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OversoldGroupId        *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	OversoldUserCount      *int32  `json:"OversoldUserCount,omitempty" xml:"OversoldUserCount,omitempty"`
	OversoldWarn           *int32  `json:"OversoldWarn,omitempty" xml:"OversoldWarn,omitempty"`
	PolicyGroupId          *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	SaleStatus             *string `json:"SaleStatus,omitempty" xml:"SaleStatus,omitempty"`
	Status                 *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StopDuration           *int64  `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
	SystemDiskSize         *int32  `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribeDesktopOversoldGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetConcurrenceCount(v int32) *DescribeDesktopOversoldGroupResponseBodyData {
	s.ConcurrenceCount = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetCurConcurrenceCount(v int32) *DescribeDesktopOversoldGroupResponseBodyData {
	s.CurConcurrenceCount = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetDataDiskSize(v int32) *DescribeDesktopOversoldGroupResponseBodyData {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetDescription(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetDesktopType(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.DesktopType = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetDirectoryId(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetExpireTime(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetIdleDisconnectDuration(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.IdleDisconnectDuration = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetImageId(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.ImageId = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetKeepDuration(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.KeepDuration = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetName(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetOversoldGroupId(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetOversoldUserCount(v int32) *DescribeDesktopOversoldGroupResponseBodyData {
	s.OversoldUserCount = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetOversoldWarn(v int32) *DescribeDesktopOversoldGroupResponseBodyData {
	s.OversoldWarn = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetPolicyGroupId(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetSaleStatus(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.SaleStatus = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetStatus(v string) *DescribeDesktopOversoldGroupResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetStopDuration(v int64) *DescribeDesktopOversoldGroupResponseBodyData {
	s.StopDuration = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponseBodyData) SetSystemDiskSize(v int32) *DescribeDesktopOversoldGroupResponseBodyData {
	s.SystemDiskSize = &v
	return s
}

type DescribeDesktopOversoldGroupResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopOversoldGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopOversoldGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldGroupResponse) SetHeaders(v map[string]*string) *DescribeDesktopOversoldGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopOversoldGroupResponse) SetStatusCode(v int32) *DescribeDesktopOversoldGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopOversoldGroupResponse) SetBody(v *DescribeDesktopOversoldGroupResponseBody) *DescribeDesktopOversoldGroupResponse {
	s.Body = v
	return s
}

type DescribeDesktopOversoldUserRequest struct {
	ClientToken     *string   `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	EndUserId       *string   `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	MaxResults      *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken       *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OversoldGroupId *string   `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	UserDesktopIds  []*string `json:"UserDesktopIds,omitempty" xml:"UserDesktopIds,omitempty" type:"Repeated"`
	UserGroupId     *string   `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DescribeDesktopOversoldUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserRequest) SetClientToken(v string) *DescribeDesktopOversoldUserRequest {
	s.ClientToken = &v
	return s
}

func (s *DescribeDesktopOversoldUserRequest) SetEndUserId(v string) *DescribeDesktopOversoldUserRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopOversoldUserRequest) SetMaxResults(v int32) *DescribeDesktopOversoldUserRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDesktopOversoldUserRequest) SetNextToken(v string) *DescribeDesktopOversoldUserRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopOversoldUserRequest) SetOversoldGroupId(v string) *DescribeDesktopOversoldUserRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribeDesktopOversoldUserRequest) SetUserDesktopIds(v []*string) *DescribeDesktopOversoldUserRequest {
	s.UserDesktopIds = v
	return s
}

func (s *DescribeDesktopOversoldUserRequest) SetUserGroupId(v string) *DescribeDesktopOversoldUserRequest {
	s.UserGroupId = &v
	return s
}

type DescribeDesktopOversoldUserResponseBody struct {
	Count     *int32                                         `json:"Count,omitempty" xml:"Count,omitempty"`
	Data      []*DescribeDesktopOversoldUserResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	NextToken *string                                        `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDesktopOversoldUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserResponseBody) SetCount(v int32) *DescribeDesktopOversoldUserResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeDesktopOversoldUserResponseBody) SetData(v []*DescribeDesktopOversoldUserResponseBodyData) *DescribeDesktopOversoldUserResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDesktopOversoldUserResponseBody) SetNextToken(v string) *DescribeDesktopOversoldUserResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopOversoldUserResponseBody) SetRequestId(v string) *DescribeDesktopOversoldUserResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDesktopOversoldUserResponseBodyData struct {
	EndUserId       *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	UserDesktopId   *string `json:"UserDesktopId,omitempty" xml:"UserDesktopId,omitempty"`
	UserGroupId     *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DescribeDesktopOversoldUserResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserResponseBodyData) SetEndUserId(v string) *DescribeDesktopOversoldUserResponseBodyData {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopOversoldUserResponseBodyData) SetOversoldGroupId(v string) *DescribeDesktopOversoldUserResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribeDesktopOversoldUserResponseBodyData) SetUserDesktopId(v string) *DescribeDesktopOversoldUserResponseBodyData {
	s.UserDesktopId = &v
	return s
}

func (s *DescribeDesktopOversoldUserResponseBodyData) SetUserGroupId(v string) *DescribeDesktopOversoldUserResponseBodyData {
	s.UserGroupId = &v
	return s
}

type DescribeDesktopOversoldUserResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopOversoldUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopOversoldUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserResponse) SetHeaders(v map[string]*string) *DescribeDesktopOversoldUserResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopOversoldUserResponse) SetStatusCode(v int32) *DescribeDesktopOversoldUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopOversoldUserResponse) SetBody(v *DescribeDesktopOversoldUserResponseBody) *DescribeDesktopOversoldUserResponse {
	s.Body = v
	return s
}

type DescribeDesktopOversoldUserGroupRequest struct {
	MaxResults      *int32    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken       *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OversoldGroupId *string   `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	UserGroupIds    []*string `json:"UserGroupIds,omitempty" xml:"UserGroupIds,omitempty" type:"Repeated"`
}

func (s DescribeDesktopOversoldUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserGroupRequest) SetMaxResults(v int32) *DescribeDesktopOversoldUserGroupRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupRequest) SetNextToken(v string) *DescribeDesktopOversoldUserGroupRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupRequest) SetOversoldGroupId(v string) *DescribeDesktopOversoldUserGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupRequest) SetUserGroupIds(v []*string) *DescribeDesktopOversoldUserGroupRequest {
	s.UserGroupIds = v
	return s
}

type DescribeDesktopOversoldUserGroupResponseBody struct {
	Count     *int32                                              `json:"Count,omitempty" xml:"Count,omitempty"`
	Data      []*DescribeDesktopOversoldUserGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	NextToken *string                                             `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDesktopOversoldUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserGroupResponseBody) SetCount(v int32) *DescribeDesktopOversoldUserGroupResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponseBody) SetData(v []*DescribeDesktopOversoldUserGroupResponseBodyData) *DescribeDesktopOversoldUserGroupResponseBody {
	s.Data = v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponseBody) SetNextToken(v string) *DescribeDesktopOversoldUserGroupResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponseBody) SetRequestId(v string) *DescribeDesktopOversoldUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDesktopOversoldUserGroupResponseBodyData struct {
	ImageId         *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	PolicyGroupId   *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	UserGroupId     *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DescribeDesktopOversoldUserGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserGroupResponseBodyData) SetImageId(v string) *DescribeDesktopOversoldUserGroupResponseBodyData {
	s.ImageId = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponseBodyData) SetName(v string) *DescribeDesktopOversoldUserGroupResponseBodyData {
	s.Name = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponseBodyData) SetOversoldGroupId(v string) *DescribeDesktopOversoldUserGroupResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponseBodyData) SetPolicyGroupId(v string) *DescribeDesktopOversoldUserGroupResponseBodyData {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponseBodyData) SetUserGroupId(v string) *DescribeDesktopOversoldUserGroupResponseBodyData {
	s.UserGroupId = &v
	return s
}

type DescribeDesktopOversoldUserGroupResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopOversoldUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopOversoldUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopOversoldUserGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopOversoldUserGroupResponse) SetHeaders(v map[string]*string) *DescribeDesktopOversoldUserGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponse) SetStatusCode(v int32) *DescribeDesktopOversoldUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopOversoldUserGroupResponse) SetBody(v *DescribeDesktopOversoldUserGroupResponseBody) *DescribeDesktopOversoldUserGroupResponse {
	s.Body = v
	return s
}

type DescribeDesktopSessionsRequest struct {
	CheckOsSession *bool `json:"CheckOsSession,omitempty" xml:"CheckOsSession,omitempty"`
	// The IDs of the cloud computers. You can specify the IDs of 1 to 100 cloud computers.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The name of the cloud computer.
	//
	// example:
	//
	// DemoComputer
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The end of the time range to query.
	//
	// example:
	//
	// 2023-02-13T02:51:43Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// testUser
	EndUserId       *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	EndUserIdFilter *string `json:"EndUserIdFilter,omitempty" xml:"EndUserIdFilter,omitempty"`
	// The ID of the office network.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries returned per page.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The state of the session.
	//
	// Valid values:
	//
	// 	- Connected
	//
	// 	- Disconnected
	//
	// example:
	//
	// Connected
	SessionStatus *string `json:"SessionStatus,omitempty" xml:"SessionStatus,omitempty"`
	// The start of the time range to query.
	//
	// example:
	//
	// 2023-01-28T02:31:43Z
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	SubPayType *string `json:"SubPayType,omitempty" xml:"SubPayType,omitempty"`
}

func (s DescribeDesktopSessionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopSessionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopSessionsRequest) SetCheckOsSession(v bool) *DescribeDesktopSessionsRequest {
	s.CheckOsSession = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetDesktopId(v []*string) *DescribeDesktopSessionsRequest {
	s.DesktopId = v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetDesktopName(v string) *DescribeDesktopSessionsRequest {
	s.DesktopName = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetEndTime(v string) *DescribeDesktopSessionsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetEndUserId(v string) *DescribeDesktopSessionsRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetEndUserIdFilter(v string) *DescribeDesktopSessionsRequest {
	s.EndUserIdFilter = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetOfficeSiteId(v string) *DescribeDesktopSessionsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetPageNumber(v int32) *DescribeDesktopSessionsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetPageSize(v int32) *DescribeDesktopSessionsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetRegionId(v string) *DescribeDesktopSessionsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetSessionStatus(v string) *DescribeDesktopSessionsRequest {
	s.SessionStatus = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetStartTime(v string) *DescribeDesktopSessionsRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeDesktopSessionsRequest) SetSubPayType(v string) *DescribeDesktopSessionsRequest {
	s.SubPayType = &v
	return s
}

type DescribeDesktopSessionsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 3EC4A6DB-EC8D-55B0-9038-543DE671****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details of the session.
	Sessions []*DescribeDesktopSessionsResponseBodySessions `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The total number of entries returned.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDesktopSessionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopSessionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopSessionsResponseBody) SetRequestId(v string) *DescribeDesktopSessionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBody) SetSessions(v []*DescribeDesktopSessionsResponseBodySessions) *DescribeDesktopSessionsResponseBody {
	s.Sessions = v
	return s
}

func (s *DescribeDesktopSessionsResponseBody) SetTotalCount(v int32) *DescribeDesktopSessionsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDesktopSessionsResponseBodySessions struct {
	// The IP address of the client.
	//
	// example:
	//
	// 172.21.XX.XX
	ClientIp *string `json:"ClientIp,omitempty" xml:"ClientIp,omitempty"`
	// The client OS.
	//
	// example:
	//
	// windows_\\"Windows10Enterprise\\"10.0(Build22000)
	ClientOS *string `json:"ClientOS,omitempty" xml:"ClientOS,omitempty"`
	// The client version.
	//
	// example:
	//
	// 2.0.0-R-20221030.08****
	ClientVersion *string `json:"ClientVersion,omitempty" xml:"ClientVersion,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-g6t1ukbaea****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// testDesktop
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The duration of the remote assistance. Unit: seconds.
	//
	// example:
	//
	// 120
	EndUserApplyCoordinateTime *int64 `json:"EndUserApplyCoordinateTime,omitempty" xml:"EndUserApplyCoordinateTime,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// testUser
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The duration of the last connection to the cloud computer. Unit: seconds.
	//
	// example:
	//
	// 120
	LatestConnectionTime *int64 `json:"LatestConnectionTime,omitempty" xml:"LatestConnectionTime,omitempty"`
	// The ID of the office network.
	//
	// example:
	//
	// cn-hangzhou+dir-8904****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The name of the office network.
	//
	// example:
	//
	// DemoOfficeSite
	OfficeSiteName  *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	OsSessionStatus *string `json:"OsSessionStatus,omitempty" xml:"OsSessionStatus,omitempty"`
	// The OS.
	//
	// Valid values:
	//
	// 	- Linux
	//
	// 	- Windows
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX
	//
	// 	- ASP
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The end time of the session.
	//
	// example:
	//
	// 2023-01-28T02:31:43Z
	SessionEndTime *string `json:"SessionEndTime,omitempty" xml:"SessionEndTime,omitempty"`
	// The idle duration of the session. Unit: seconds.
	//
	// example:
	//
	// 120
	SessionIdleTime *int64 `json:"SessionIdleTime,omitempty" xml:"SessionIdleTime,omitempty"`
	// The start time of the session.
	//
	// example:
	//
	// 2023-01-28T02:31:43Z
	SessionStartTime *string `json:"SessionStartTime,omitempty" xml:"SessionStartTime,omitempty"`
	// The state of the session.
	//
	// Valid values:
	//
	// 	- Connected
	//
	// 	- Disconnected
	//
	// example:
	//
	// Connected
	SessionStatus *string `json:"SessionStatus,omitempty" xml:"SessionStatus,omitempty"`
	SubPayType    *string `json:"SubPayType,omitempty" xml:"SubPayType,omitempty"`
	// The total connection duration. Unit: seconds.
	//
	// example:
	//
	// 240
	TotalConnectionTime *int64 `json:"TotalConnectionTime,omitempty" xml:"TotalConnectionTime,omitempty"`
}

func (s DescribeDesktopSessionsResponseBodySessions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopSessionsResponseBodySessions) GoString() string {
	return s.String()
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetClientIp(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.ClientIp = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetClientOS(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.ClientOS = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetClientVersion(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.ClientVersion = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetDesktopId(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.DesktopId = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetDesktopName(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.DesktopName = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetEndUserApplyCoordinateTime(v int64) *DescribeDesktopSessionsResponseBodySessions {
	s.EndUserApplyCoordinateTime = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetEndUserId(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetLatestConnectionTime(v int64) *DescribeDesktopSessionsResponseBodySessions {
	s.LatestConnectionTime = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetOfficeSiteId(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetOfficeSiteName(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetOsSessionStatus(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.OsSessionStatus = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetOsType(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.OsType = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetProtocolType(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetSessionEndTime(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.SessionEndTime = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetSessionIdleTime(v int64) *DescribeDesktopSessionsResponseBodySessions {
	s.SessionIdleTime = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetSessionStartTime(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.SessionStartTime = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetSessionStatus(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.SessionStatus = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetSubPayType(v string) *DescribeDesktopSessionsResponseBodySessions {
	s.SubPayType = &v
	return s
}

func (s *DescribeDesktopSessionsResponseBodySessions) SetTotalConnectionTime(v int64) *DescribeDesktopSessionsResponseBodySessions {
	s.TotalConnectionTime = &v
	return s
}

type DescribeDesktopSessionsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopSessionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopSessionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopSessionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopSessionsResponse) SetHeaders(v map[string]*string) *DescribeDesktopSessionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopSessionsResponse) SetStatusCode(v int32) *DescribeDesktopSessionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopSessionsResponse) SetBody(v *DescribeDesktopSessionsResponseBody) *DescribeDesktopSessionsResponse {
	s.Body = v
	return s
}

type DescribeDesktopTypesRequest struct {
	// Applicable Scope of specifications. Default value: `Public`
	//
	// example:
	//
	// Public
	AppliedScope *string `json:"AppliedScope,omitempty" xml:"AppliedScope,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 2
	CpuCount *int32 `json:"CpuCount,omitempty" xml:"CpuCount,omitempty"`
	// The ID of the cloud computer pool when you change instance types of cloud computers. If you specify this parameter, the information about whether the instance type is compatible with the cloud computer pool is included in the response.
	//
	// example:
	//
	// dg-abcdefg****
	DesktopGroupIdForModify *string `json:"DesktopGroupIdForModify,omitempty" xml:"DesktopGroupIdForModify,omitempty"`
	// The ID of the cloud computer when you change instance types of cloud computers. If you specify this parameter, the information about whether the instance type is compatible with the cloud computer is included in the response.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopIdForModify *string `json:"DesktopIdForModify,omitempty" xml:"DesktopIdForModify,omitempty"`
	// The IDs of the instance types of cloud computers.
	//
	// >  If the values of the `InstanceTypeFamily` and `DesktopTypeId` parameters are empty, all instance types of cloud computers are queried.
	//
	// Valid values:
	//
	// 	- eds.hf.4c8g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.basic.large
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.advanced.large
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.basic.small
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.graphics.2xlarge
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.hf.8c16g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.hf.12c24g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.8c16g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.16c32g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.advanced.xlarge
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.graphics.16c1t4
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.graphics.xlarge
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.performance.2xlarge
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.8c32g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.2c2g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.2c4g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.graphics.24c1t4
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.4c8g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.4c16g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general.2c8g
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ecd.graphics.xlarge
	DesktopTypeId     *string   `json:"DesktopTypeId,omitempty" xml:"DesktopTypeId,omitempty"`
	DesktopTypeIdList []*string `json:"DesktopTypeIdList,omitempty" xml:"DesktopTypeIdList,omitempty" type:"Repeated"`
	// The number of GPUs.
	//
	// example:
	//
	// 1
	GpuCount      *float32 `json:"GpuCount,omitempty" xml:"GpuCount,omitempty"`
	GpuDriverType *string  `json:"GpuDriverType,omitempty" xml:"GpuDriverType,omitempty"`
	// The name of the instance family.
	//
	// >  If the values of the `InstanceTypeFamily` and `DesktopTypeId` parameters are empty, all instance families of cloud computers are queried.
	//
	// Valid values:
	//
	// 	- ecd.advanced
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.graphics
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.basic
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.hf
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.graphics
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- eds.general
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ecd.performance
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ecd.graphics
	InstanceTypeFamily *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	// The memory size. Unit: MiB.
	//
	// example:
	//
	// 4
	MemorySize *int32  `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	OrderBy    *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The order type.
	//
	// example:
	//
	// DOWNGRADE
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Scope    *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
}

func (s DescribeDesktopTypesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopTypesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopTypesRequest) SetAppliedScope(v string) *DescribeDesktopTypesRequest {
	s.AppliedScope = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetCpuCount(v int32) *DescribeDesktopTypesRequest {
	s.CpuCount = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetDesktopGroupIdForModify(v string) *DescribeDesktopTypesRequest {
	s.DesktopGroupIdForModify = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetDesktopIdForModify(v string) *DescribeDesktopTypesRequest {
	s.DesktopIdForModify = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetDesktopTypeId(v string) *DescribeDesktopTypesRequest {
	s.DesktopTypeId = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetDesktopTypeIdList(v []*string) *DescribeDesktopTypesRequest {
	s.DesktopTypeIdList = v
	return s
}

func (s *DescribeDesktopTypesRequest) SetGpuCount(v float32) *DescribeDesktopTypesRequest {
	s.GpuCount = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetGpuDriverType(v string) *DescribeDesktopTypesRequest {
	s.GpuDriverType = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetInstanceTypeFamily(v string) *DescribeDesktopTypesRequest {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetMemorySize(v int32) *DescribeDesktopTypesRequest {
	s.MemorySize = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetOrderBy(v string) *DescribeDesktopTypesRequest {
	s.OrderBy = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetOrderType(v string) *DescribeDesktopTypesRequest {
	s.OrderType = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetRegionId(v string) *DescribeDesktopTypesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetScope(v string) *DescribeDesktopTypesRequest {
	s.Scope = &v
	return s
}

func (s *DescribeDesktopTypesRequest) SetSortType(v string) *DescribeDesktopTypesRequest {
	s.SortType = &v
	return s
}

type DescribeDesktopTypesResponseBody struct {
	// Details of cloud desktop types.
	DesktopTypes []*DescribeDesktopTypesResponseBodyDesktopTypes `json:"DesktopTypes,omitempty" xml:"DesktopTypes,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDesktopTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopTypesResponseBody) SetDesktopTypes(v []*DescribeDesktopTypesResponseBodyDesktopTypes) *DescribeDesktopTypesResponseBody {
	s.DesktopTypes = v
	return s
}

func (s *DescribeDesktopTypesResponseBody) SetRequestId(v string) *DescribeDesktopTypesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDesktopTypesResponseBodyDesktopTypes struct {
	// The number of vCPUs.
	//
	// example:
	//
	// 2
	CpuCount *string `json:"CpuCount,omitempty" xml:"CpuCount,omitempty"`
	// The size of the data disk. Unit: GiB.
	//
	// example:
	//
	// 150
	DataDiskSize *string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The ID of the cloud desktop type.
	//
	// example:
	//
	// ecd.graphics.xlarge
	DesktopTypeId *string `json:"DesktopTypeId,omitempty" xml:"DesktopTypeId,omitempty"`
	// The status of the cloud desktop type. If SUFFICIENT is returned, the number of cloud desktops of the type is sufficient.
	//
	// example:
	//
	// SUFFICIENT
	DesktopTypeStatus *string `json:"DesktopTypeStatus,omitempty" xml:"DesktopTypeStatus,omitempty"`
	// The number of GPUs.
	//
	// example:
	//
	// 1
	GpuCount  *float32 `json:"GpuCount,omitempty" xml:"GpuCount,omitempty"`
	GpuMemory *int32   `json:"GpuMemory,omitempty" xml:"GpuMemory,omitempty"`
	// The GPU memory.
	//
	// example:
	//
	// 16 GiB
	GpuSpec *string `json:"GpuSpec,omitempty" xml:"GpuSpec,omitempty"`
	// The family of the cloud desktop type.
	//
	// example:
	//
	// ecd.graphics
	InstanceTypeFamily *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	// The memory size. Unit: MiB.
	//
	// example:
	//
	// 23552
	MemorySize *string   `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	Scopes     []*string `json:"Scopes,omitempty" xml:"Scopes,omitempty" type:"Repeated"`
	StockState *string   `json:"StockState,omitempty" xml:"StockState,omitempty"`
	// The size of the system disk. Unit: GiB.
	//
	// example:
	//
	// 150
	SystemDiskSize *string `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribeDesktopTypesResponseBodyDesktopTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopTypesResponseBodyDesktopTypes) GoString() string {
	return s.String()
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetCpuCount(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.CpuCount = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetDataDiskSize(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetDesktopTypeId(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.DesktopTypeId = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetDesktopTypeStatus(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.DesktopTypeStatus = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetGpuCount(v float32) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.GpuCount = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetGpuMemory(v int32) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.GpuMemory = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetGpuSpec(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.GpuSpec = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetInstanceTypeFamily(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.InstanceTypeFamily = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetMemorySize(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.MemorySize = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetScopes(v []*string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.Scopes = v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetStockState(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.StockState = &v
	return s
}

func (s *DescribeDesktopTypesResponseBodyDesktopTypes) SetSystemDiskSize(v string) *DescribeDesktopTypesResponseBodyDesktopTypes {
	s.SystemDiskSize = &v
	return s
}

type DescribeDesktopTypesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopTypesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopTypesResponse) SetHeaders(v map[string]*string) *DescribeDesktopTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopTypesResponse) SetStatusCode(v int32) *DescribeDesktopTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopTypesResponse) SetBody(v *DescribeDesktopTypesResponseBody) *DescribeDesktopTypesResponse {
	s.Body = v
	return s
}

type DescribeDesktopsRequest struct {
	// The billing method of the cloud desktop.
	//
	// example:
	//
	// PostPaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The ID of the desktop group. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud desktops in the specified desktop group.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The IDs of the cloud desktops. You can specify 1 to 100 cloud desktop IDs.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The name of the cloud desktop.
	//
	// example:
	//
	// testDesktopName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The status of the cloud desktop.
	//
	// example:
	//
	// Running
	DesktopStatus *string `json:"DesktopStatus,omitempty" xml:"DesktopStatus,omitempty"`
	// The list of desktop status.
	DesktopStatusList []*string `json:"DesktopStatusList,omitempty" xml:"DesktopStatusList,omitempty" type:"Repeated"`
	// The new desktop type. You can call the [DescribeDesktopTypes](~~DescribeDesktopTypes~~) operation to query the IDs of supported desktop types.
	//
	// example:
	//
	// eds.general.2c8g
	DesktopType *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	// The ID of the directory, The ID is the same as the workspace ID.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The IDs of the end users that are assigned the cloud desktop. You can specify 1 to 100 end user IDs.
	//
	// > Only one end user can use the cloud desktop at a time.
	//
	// example:
	//
	// alice
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The IDs of the end users that are excluded from the end users that are assigned the cloud desktop. You can specify 1 to 100 end user IDs.
	//
	// example:
	//
	// andy
	ExcludedEndUserId []*string `json:"ExcludedEndUserId,omitempty" xml:"ExcludedEndUserId,omitempty" type:"Repeated"`
	// The time when the subscription cloud desktop expires.
	//
	// example:
	//
	// 2022-12-31T15:59:59Z
	ExpiredTime       *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	FillResourceGroup *bool   `json:"FillResourceGroup,omitempty" xml:"FillResourceGroup,omitempty"`
	// Specifies whether to filter cloud desktops in the desktop group.
	//
	// example:
	//
	// false
	FilterDesktopGroup *bool   `json:"FilterDesktopGroup,omitempty" xml:"FilterDesktopGroup,omitempty"`
	GpuInstanceGroupId *string `json:"GpuInstanceGroupId,omitempty" xml:"GpuInstanceGroupId,omitempty"`
	// The ID of the desktop group.
	//
	// > The desktop group feature is in invitational preview. If you want to use this feature, submit a ticket.
	//
	// example:
	//
	// dg-boyczi8enfyc5****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The IDs of the images.
	ImageId []*string `json:"ImageId,omitempty" xml:"ImageId,omitempty" type:"Repeated"`
	// The flag that is used to manage the cloud desktops.
	//
	// example:
	//
	// NoFlag
	ManagementFlag *string `json:"ManagementFlag,omitempty" xml:"ManagementFlag,omitempty"`
	// The number of entries per page.
	//
	// 	- Maximum value: 100
	//
	// 	- Default value: 10
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The name of the workspace.
	//
	// example:
	//
	// testName
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The progress when the cloud desktop was created.
	//
	// example:
	//
	// true
	OnlyDesktopGroup *bool `json:"OnlyDesktopGroup,omitempty" xml:"OnlyDesktopGroup,omitempty"`
	// The types of the OSs.
	OsTypes    []*string `json:"OsTypes,omitempty" xml:"OsTypes,omitempty" type:"Repeated"`
	PageNumber *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the policy.
	//
	// example:
	//
	// system-all-enabled-policy
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The type of the protocol.
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	QosRuleId    *string `json:"QosRuleId,omitempty" xml:"QosRuleId,omitempty"`
	// Specifies whether to query the information about image update of the cloud desktop.
	//
	// example:
	//
	// false
	QueryFotaUpdate *bool `json:"QueryFotaUpdate,omitempty" xml:"QueryFotaUpdate,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The ID of the snapshot policy.
	//
	// example:
	//
	// sp-hb12mclyne09xw***
	SnapshotPolicyId *string `json:"SnapshotPolicyId,omitempty" xml:"SnapshotPolicyId,omitempty"`
	SubPayType       *string `json:"SubPayType,omitempty" xml:"SubPayType,omitempty"`
	// The tags. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud desktops by group for easy searching and batch operations. For more information, see [Use tags to manage cloud desktops](https://help.aliyun.com/document_detail/203781.html).
	Tag []*DescribeDesktopsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The name of the end user.
	//
	// example:
	//
	// Alice
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsRequest) SetChargeType(v string) *DescribeDesktopsRequest {
	s.ChargeType = &v
	return s
}

func (s *DescribeDesktopsRequest) SetDesktopGroupId(v string) *DescribeDesktopsRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetDesktopId(v []*string) *DescribeDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *DescribeDesktopsRequest) SetDesktopName(v string) *DescribeDesktopsRequest {
	s.DesktopName = &v
	return s
}

func (s *DescribeDesktopsRequest) SetDesktopStatus(v string) *DescribeDesktopsRequest {
	s.DesktopStatus = &v
	return s
}

func (s *DescribeDesktopsRequest) SetDesktopStatusList(v []*string) *DescribeDesktopsRequest {
	s.DesktopStatusList = v
	return s
}

func (s *DescribeDesktopsRequest) SetDesktopType(v string) *DescribeDesktopsRequest {
	s.DesktopType = &v
	return s
}

func (s *DescribeDesktopsRequest) SetDirectoryId(v string) *DescribeDesktopsRequest {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetEndUserId(v []*string) *DescribeDesktopsRequest {
	s.EndUserId = v
	return s
}

func (s *DescribeDesktopsRequest) SetExcludedEndUserId(v []*string) *DescribeDesktopsRequest {
	s.ExcludedEndUserId = v
	return s
}

func (s *DescribeDesktopsRequest) SetExpiredTime(v string) *DescribeDesktopsRequest {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDesktopsRequest) SetFillResourceGroup(v bool) *DescribeDesktopsRequest {
	s.FillResourceGroup = &v
	return s
}

func (s *DescribeDesktopsRequest) SetFilterDesktopGroup(v bool) *DescribeDesktopsRequest {
	s.FilterDesktopGroup = &v
	return s
}

func (s *DescribeDesktopsRequest) SetGpuInstanceGroupId(v string) *DescribeDesktopsRequest {
	s.GpuInstanceGroupId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetGroupId(v string) *DescribeDesktopsRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetImageId(v []*string) *DescribeDesktopsRequest {
	s.ImageId = v
	return s
}

func (s *DescribeDesktopsRequest) SetManagementFlag(v string) *DescribeDesktopsRequest {
	s.ManagementFlag = &v
	return s
}

func (s *DescribeDesktopsRequest) SetMaxResults(v int32) *DescribeDesktopsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDesktopsRequest) SetNextToken(v string) *DescribeDesktopsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopsRequest) SetOfficeSiteId(v string) *DescribeDesktopsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetOfficeSiteName(v string) *DescribeDesktopsRequest {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeDesktopsRequest) SetOnlyDesktopGroup(v bool) *DescribeDesktopsRequest {
	s.OnlyDesktopGroup = &v
	return s
}

func (s *DescribeDesktopsRequest) SetOsTypes(v []*string) *DescribeDesktopsRequest {
	s.OsTypes = v
	return s
}

func (s *DescribeDesktopsRequest) SetPageNumber(v int32) *DescribeDesktopsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDesktopsRequest) SetPageSize(v int32) *DescribeDesktopsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDesktopsRequest) SetPolicyGroupId(v string) *DescribeDesktopsRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetProtocolType(v string) *DescribeDesktopsRequest {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopsRequest) SetQosRuleId(v string) *DescribeDesktopsRequest {
	s.QosRuleId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetQueryFotaUpdate(v bool) *DescribeDesktopsRequest {
	s.QueryFotaUpdate = &v
	return s
}

func (s *DescribeDesktopsRequest) SetRegionId(v string) *DescribeDesktopsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetResourceGroupId(v string) *DescribeDesktopsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetSnapshotPolicyId(v string) *DescribeDesktopsRequest {
	s.SnapshotPolicyId = &v
	return s
}

func (s *DescribeDesktopsRequest) SetSubPayType(v string) *DescribeDesktopsRequest {
	s.SubPayType = &v
	return s
}

func (s *DescribeDesktopsRequest) SetTag(v []*DescribeDesktopsRequestTag) *DescribeDesktopsRequest {
	s.Tag = v
	return s
}

func (s *DescribeDesktopsRequest) SetUserName(v string) *DescribeDesktopsRequest {
	s.UserName = &v
	return s
}

type DescribeDesktopsRequestTag struct {
	// The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `aliyun` or `acs:`.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDesktopsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsRequestTag) SetKey(v string) *DescribeDesktopsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeDesktopsRequestTag) SetValue(v string) *DescribeDesktopsRequestTag {
	s.Value = &v
	return s
}

type DescribeDesktopsResponseBody struct {
	// The details about the cloud desktops.
	Desktops []*DescribeDesktopsResponseBodyDesktops `json:"Desktops,omitempty" xml:"Desktops,omitempty" type:"Repeated"`
	// The token that is used for the next query. If this parameter is left empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken  *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 484256DA-D816-44D2-9D86-B6EE4D5BA78C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of cloud desktops.
	//
	// example:
	//
	// 1
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponseBody) SetDesktops(v []*DescribeDesktopsResponseBodyDesktops) *DescribeDesktopsResponseBody {
	s.Desktops = v
	return s
}

func (s *DescribeDesktopsResponseBody) SetNextToken(v string) *DescribeDesktopsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopsResponseBody) SetPageNumber(v int32) *DescribeDesktopsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *DescribeDesktopsResponseBody) SetPageSize(v int32) *DescribeDesktopsResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeDesktopsResponseBody) SetRequestId(v string) *DescribeDesktopsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDesktopsResponseBody) SetTotalCount(v int32) *DescribeDesktopsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeDesktopsResponseBodyDesktops struct {
	// The number of sessions that are allowed for each cloud desktop in the multi-session desktop group.
	//
	// example:
	//
	// 10
	BindAmount *int32 `json:"BindAmount,omitempty" xml:"BindAmount,omitempty"`
	// The ID of the desktop template that is used to create the cloud desktop.
	//
	// example:
	//
	// b-2g65ljy4291vl****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The name of the desktop template that is used to create the cloud desktop.
	//
	// example:
	//
	// Name
	BundleName *string `json:"BundleName,omitempty" xml:"BundleName,omitempty"`
	// The billing method of the cloud desktop.
	//
	// Default value: PostPaid. Valid values:
	//
	// 	- Postpaid: pay-as-you-go
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PrePaid: subscription
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PostPaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The connection status of the end user.
	//
	// Valid values:
	//
	// 	- Unknown
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Connected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Disconnected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Disconnected
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 2
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The time when the cloud desktop was created.
	//
	// example:
	//
	// 2020-11-06T08:28Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// >  This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// null
	DataDiskCategory *string `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	// >  This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// null
	DataDiskSize *string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The ID of the desktop group to which the cloud desktop belongs. Default value: null.
	//
	// example:
	//
	// null
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The cloud desktop ID.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The cloud desktop name.
	//
	// example:
	//
	// testDesktopName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The status of the cloud desktop.
	//
	// example:
	//
	// Running
	DesktopStatus *string `json:"DesktopStatus,omitempty" xml:"DesktopStatus,omitempty"`
	// The type of the cloud desktop.
	//
	// example:
	//
	// ecd.basic.large
	DesktopType *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	// The directory ID. The value of this parameter is the same as the workspace ID that is indicated by the OfficeSiteId parameter.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// >  This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// SIMPLE
	DirectoryType *string `json:"DirectoryType,omitempty" xml:"DirectoryType,omitempty"`
	// Details of the disks.
	Disks []*DescribeDesktopsResponseBodyDesktopsDisks `json:"Disks,omitempty" xml:"Disks,omitempty" type:"Repeated"`
	// The number of times for which the cloud desktop can be downgraded.
	//
	// example:
	//
	// 3
	DowngradeQuota *int64 `json:"DowngradeQuota,omitempty" xml:"DowngradeQuota,omitempty"`
	// The number of times for which the cloud desktop has been downgraded.
	//
	// example:
	//
	// 0
	DowngradedTimes *int64 `json:"DowngradedTimes,omitempty" xml:"DowngradedTimes,omitempty"`
	// The IDs of the end users who are authorized to connect to the cloud desktop.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The time when the subscription cloud desktop expires.
	//
	// example:
	//
	// 2021-12-31T15:59Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The information about the image version that the cloud desktop uses.
	FotaUpdate *DescribeDesktopsResponseBodyDesktopsFotaUpdate `json:"FotaUpdate,omitempty" xml:"FotaUpdate,omitempty" type:"Struct"`
	// Indicates whether the cloud desktop is a GPU-accelerated desktop.
	//
	// example:
	//
	// 0
	GpuCategory *int64 `json:"GpuCategory,omitempty" xml:"GpuCategory,omitempty"`
	// The number of GPU cores.
	//
	// example:
	//
	// 1
	GpuCount *float32 `json:"GpuCount,omitempty" xml:"GpuCount,omitempty"`
	// The version number of the GPU driver of the cloud desktop.
	//
	// example:
	//
	// null
	GpuDriverVersion *string `json:"GpuDriverVersion,omitempty" xml:"GpuDriverVersion,omitempty"`
	// The GPU Specifications.
	//
	// example:
	//
	// NVIDIA T4
	GpuSpec *string `json:"GpuSpec,omitempty" xml:"GpuSpec,omitempty"`
	// >  This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// true
	HibernationBeta *bool `json:"HibernationBeta,omitempty" xml:"HibernationBeta,omitempty"`
	// >  This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// true
	HibernationOptionsConfigured *bool `json:"HibernationOptionsConfigured,omitempty" xml:"HibernationOptionsConfigured,omitempty"`
	// The hostname of the cloud desktop.
	//
	// example:
	//
	// testName
	HostName *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	// The image ID.
	//
	// example:
	//
	// m-4zfb6zj728hhr****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The flag that is used to manage the cloud desktop.
	//
	// Valid values:
	//
	// 	- Updating: The configurations of the cloud desktop are being updated.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NoFlag: No flags are available.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// NoFlag
	ManagementFlag *string `json:"ManagementFlag,omitempty" xml:"ManagementFlag,omitempty"`
	// The flags that are used to manage the cloud desktops.
	ManagementFlags []*string `json:"ManagementFlags,omitempty" xml:"ManagementFlags,omitempty" type:"Repeated"`
	// The memory size. Unit: MiB.
	//
	// example:
	//
	// 4096
	Memory *int64 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The ID of the secondary network interface controller (NIC) created by the RAM or Active Directory (AD) user in Elastic Desktop Service (EDS). You do not have permissions to modify this parameter.
	//
	// example:
	//
	// 123456
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The IP address of the secondary NIC that is created by the RAM or AD user in EDS.
	//
	// example:
	//
	// 192.168.74.165
	NetworkInterfaceIp *string `json:"NetworkInterfaceIp,omitempty" xml:"NetworkInterfaceIp,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The workspace name.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The account type of the workspace.
	//
	// Valid values:
	//
	// 	- SIMPLE: convenience account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- AD_CONNECTOR: enterprise AD account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SIMPLE
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	// The virtual private cloud (VPC) type of the workspace.
	//
	// Valid values:
	//
	// 	- standard
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- customized
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- basic
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// basic
	OfficeSiteVpcType *string `json:"OfficeSiteVpcType,omitempty" xml:"OfficeSiteVpcType,omitempty"`
	// The OS that is defined in the desktop template.
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The information about the OS platform. Valid values:
	//
	// 	- CentOS
	//
	// 	- Ubuntu
	//
	// 	- Windows Server 2016
	//
	// 	- Windows Server 2019
	//
	// 	- UOS
	//
	// example:
	//
	// Ubuntu
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// The policy ID.
	//
	// example:
	//
	// system-all-enabled-policy
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The policy IDs.
	PolicyGroupIdList []*string `json:"PolicyGroupIdList,omitempty" xml:"PolicyGroupIdList,omitempty" type:"Repeated"`
	// The policy name.
	//
	// example:
	//
	// test
	PolicyGroupName *string `json:"PolicyGroupName,omitempty" xml:"PolicyGroupName,omitempty"`
	// The policy names.
	PolicyGroupNameList []*string `json:"PolicyGroupNameList,omitempty" xml:"PolicyGroupNameList,omitempty" type:"Repeated"`
	// The progress when the cloud desktop was created.
	//
	// example:
	//
	// 100%
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The protocol.
	//
	// Valid values:
	//
	// 	- HDX: High-definition Experience (HDX) protocol
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ASP: Adaptive Streaming Protocol (ASP) developed by Alibaba Cloud
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ASP
	ProtocolType   *string                                               `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	ResourceGroups []*DescribeDesktopsResponseBodyDesktopsResourceGroups `json:"ResourceGroups,omitempty" xml:"ResourceGroups,omitempty" type:"Repeated"`
	// The type of the session.
	//
	// Valid values:
	//
	// 	- SINGLE_SESSION
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- MULTIPLE_SESSION
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SINGLE_SESSION
	SessionType *string `json:"SessionType,omitempty" xml:"SessionType,omitempty"`
	// The information about the desktop sessions of end users.
	Sessions []*DescribeDesktopsResponseBodyDesktopsSessions `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The ID of the snapshot policy.
	//
	// example:
	//
	// sp-gi007jgyc3kcey2bb
	SnapshotPolicyId *string `json:"SnapshotPolicyId,omitempty" xml:"SnapshotPolicyId,omitempty"`
	// The name of the snapshot policy.
	//
	// example:
	//
	// testSnapshotName
	SnapshotPolicyName *string `json:"SnapshotPolicyName,omitempty" xml:"SnapshotPolicyName,omitempty"`
	// The time when the cloud desktop was first started.
	//
	// example:
	//
	// 2020-11-06T08:31Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// Indicates whether the cloud desktop supports hibernation.
	//
	// example:
	//
	// true
	SupportHibernation *bool `json:"SupportHibernation,omitempty" xml:"SupportHibernation,omitempty"`
	// >  This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// null
	SystemDiskCategory *string `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	// >  This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// 0
	SystemDiskSize *int32 `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	// Details about the tags.
	Tags []*DescribeDesktopsResponseBodyDesktopsTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// Indicates whether disk encryption is enabled.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
	// The zone type. Default value: **AvailabilityZone**. This value indicates Alibaba Cloud zones.
	//
	// example:
	//
	// AvailabilityZone
	ZoneType *string `json:"ZoneType,omitempty" xml:"ZoneType,omitempty"`
}

func (s DescribeDesktopsResponseBodyDesktops) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponseBodyDesktops) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponseBodyDesktops) SetBindAmount(v int32) *DescribeDesktopsResponseBodyDesktops {
	s.BindAmount = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetBundleId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.BundleId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetBundleName(v string) *DescribeDesktopsResponseBodyDesktops {
	s.BundleName = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetChargeType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.ChargeType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetConnectionStatus(v string) *DescribeDesktopsResponseBodyDesktops {
	s.ConnectionStatus = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetCpu(v int32) *DescribeDesktopsResponseBodyDesktops {
	s.Cpu = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetCreationTime(v string) *DescribeDesktopsResponseBodyDesktops {
	s.CreationTime = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDataDiskCategory(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDataDiskSize(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDesktopGroupId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDesktopId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DesktopId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDesktopName(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DesktopName = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDesktopStatus(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DesktopStatus = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDesktopType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DesktopType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDirectoryId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDirectoryType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.DirectoryType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDisks(v []*DescribeDesktopsResponseBodyDesktopsDisks) *DescribeDesktopsResponseBodyDesktops {
	s.Disks = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDowngradeQuota(v int64) *DescribeDesktopsResponseBodyDesktops {
	s.DowngradeQuota = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetDowngradedTimes(v int64) *DescribeDesktopsResponseBodyDesktops {
	s.DowngradedTimes = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetEndUserIds(v []*string) *DescribeDesktopsResponseBodyDesktops {
	s.EndUserIds = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetExpiredTime(v string) *DescribeDesktopsResponseBodyDesktops {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetFotaUpdate(v *DescribeDesktopsResponseBodyDesktopsFotaUpdate) *DescribeDesktopsResponseBodyDesktops {
	s.FotaUpdate = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetGpuCategory(v int64) *DescribeDesktopsResponseBodyDesktops {
	s.GpuCategory = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetGpuCount(v float32) *DescribeDesktopsResponseBodyDesktops {
	s.GpuCount = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetGpuDriverVersion(v string) *DescribeDesktopsResponseBodyDesktops {
	s.GpuDriverVersion = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetGpuSpec(v string) *DescribeDesktopsResponseBodyDesktops {
	s.GpuSpec = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetHibernationBeta(v bool) *DescribeDesktopsResponseBodyDesktops {
	s.HibernationBeta = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetHibernationOptionsConfigured(v bool) *DescribeDesktopsResponseBodyDesktops {
	s.HibernationOptionsConfigured = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetHostName(v string) *DescribeDesktopsResponseBodyDesktops {
	s.HostName = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetImageId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.ImageId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetManagementFlag(v string) *DescribeDesktopsResponseBodyDesktops {
	s.ManagementFlag = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetManagementFlags(v []*string) *DescribeDesktopsResponseBodyDesktops {
	s.ManagementFlags = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetMemory(v int64) *DescribeDesktopsResponseBodyDesktops {
	s.Memory = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetNetworkInterfaceId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetNetworkInterfaceIp(v string) *DescribeDesktopsResponseBodyDesktops {
	s.NetworkInterfaceIp = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetOfficeSiteId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetOfficeSiteName(v string) *DescribeDesktopsResponseBodyDesktops {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetOfficeSiteType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.OfficeSiteType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetOfficeSiteVpcType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.OfficeSiteVpcType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetOsType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.OsType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetPlatform(v string) *DescribeDesktopsResponseBodyDesktops {
	s.Platform = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetPolicyGroupId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetPolicyGroupIdList(v []*string) *DescribeDesktopsResponseBodyDesktops {
	s.PolicyGroupIdList = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetPolicyGroupName(v string) *DescribeDesktopsResponseBodyDesktops {
	s.PolicyGroupName = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetPolicyGroupNameList(v []*string) *DescribeDesktopsResponseBodyDesktops {
	s.PolicyGroupNameList = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetProgress(v string) *DescribeDesktopsResponseBodyDesktops {
	s.Progress = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetProtocolType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetResourceGroups(v []*DescribeDesktopsResponseBodyDesktopsResourceGroups) *DescribeDesktopsResponseBodyDesktops {
	s.ResourceGroups = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetSessionType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.SessionType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetSessions(v []*DescribeDesktopsResponseBodyDesktopsSessions) *DescribeDesktopsResponseBodyDesktops {
	s.Sessions = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetSnapshotPolicyId(v string) *DescribeDesktopsResponseBodyDesktops {
	s.SnapshotPolicyId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetSnapshotPolicyName(v string) *DescribeDesktopsResponseBodyDesktops {
	s.SnapshotPolicyName = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetStartTime(v string) *DescribeDesktopsResponseBodyDesktops {
	s.StartTime = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetSupportHibernation(v bool) *DescribeDesktopsResponseBodyDesktops {
	s.SupportHibernation = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetSystemDiskCategory(v string) *DescribeDesktopsResponseBodyDesktops {
	s.SystemDiskCategory = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetSystemDiskSize(v int32) *DescribeDesktopsResponseBodyDesktops {
	s.SystemDiskSize = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetTags(v []*DescribeDesktopsResponseBodyDesktopsTags) *DescribeDesktopsResponseBodyDesktops {
	s.Tags = v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetVolumeEncryptionEnabled(v bool) *DescribeDesktopsResponseBodyDesktops {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetVolumeEncryptionKey(v string) *DescribeDesktopsResponseBodyDesktops {
	s.VolumeEncryptionKey = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktops) SetZoneType(v string) *DescribeDesktopsResponseBodyDesktops {
	s.ZoneType = &v
	return s
}

type DescribeDesktopsResponseBodyDesktopsDisks struct {
	DiskCategory *string `json:"DiskCategory,omitempty" xml:"DiskCategory,omitempty"`
	// The disk ID.
	//
	// example:
	//
	// d-jedbpr4sl9l37****
	DiskId *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	// The disk size. Unit: GiB.
	//
	// example:
	//
	// 80
	DiskSize *int32 `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	// The type of the disk.
	//
	// Valid values:
	//
	// 	- SYSTEM: system disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DATA: data disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The performance level (PL) of the disk when an enhanced SSD (ESSD) is used. Valid values:
	//
	// 	- PL0
	//
	// 	- PL1
	//
	// 	- PL2
	//
	// 	- PL3
	//
	// For more information about the differences among ESSDs at different PLs, see [Enhanced SSDs](https://help.aliyun.com/document_detail/122389.html).
	//
	// example:
	//
	// PL0
	PerformanceLevel *string `json:"PerformanceLevel,omitempty" xml:"PerformanceLevel,omitempty"`
}

func (s DescribeDesktopsResponseBodyDesktopsDisks) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponseBodyDesktopsDisks) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponseBodyDesktopsDisks) SetDiskCategory(v string) *DescribeDesktopsResponseBodyDesktopsDisks {
	s.DiskCategory = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsDisks) SetDiskId(v string) *DescribeDesktopsResponseBodyDesktopsDisks {
	s.DiskId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsDisks) SetDiskSize(v int32) *DescribeDesktopsResponseBodyDesktopsDisks {
	s.DiskSize = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsDisks) SetDiskType(v string) *DescribeDesktopsResponseBodyDesktopsDisks {
	s.DiskType = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsDisks) SetPerformanceLevel(v string) *DescribeDesktopsResponseBodyDesktopsDisks {
	s.PerformanceLevel = &v
	return s
}

type DescribeDesktopsResponseBodyDesktopsFotaUpdate struct {
	// The current image version of the cloud desktop.
	//
	// example:
	//
	// 0.0.0-D-20220102.000000
	CurrentAppVersion *string `json:"CurrentAppVersion,omitempty" xml:"CurrentAppVersion,omitempty"`
	// The image version to which the cloud desktop can be updated.
	//
	// example:
	//
	// 0.0.0-R-20220307.190736
	NewAppVersion *string `json:"NewAppVersion,omitempty" xml:"NewAppVersion,omitempty"`
	// The description of the image version to which the cloud desktop can be updated.
	//
	// example:
	//
	// Upgrade package for testing 03-07
	ReleaseNote *string `json:"ReleaseNote,omitempty" xml:"ReleaseNote,omitempty"`
	// The English description of the image version to which the cloud desktop can be updated.
	//
	// example:
	//
	// Release note
	ReleaseNoteEn *string `json:"ReleaseNoteEn,omitempty" xml:"ReleaseNoteEn,omitempty"`
	// The Japanese description of the image version to which the cloud desktop can be updated.
	//
	// example:
	//
	// リリースノート
	ReleaseNoteJp *string `json:"ReleaseNoteJp,omitempty" xml:"ReleaseNoteJp,omitempty"`
	// The size of the installation package for the image to which the cloud desktop can be updated. Unit: KB.
	//
	// example:
	//
	// 108815097
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeDesktopsResponseBodyDesktopsFotaUpdate) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponseBodyDesktopsFotaUpdate) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponseBodyDesktopsFotaUpdate) SetCurrentAppVersion(v string) *DescribeDesktopsResponseBodyDesktopsFotaUpdate {
	s.CurrentAppVersion = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsFotaUpdate) SetNewAppVersion(v string) *DescribeDesktopsResponseBodyDesktopsFotaUpdate {
	s.NewAppVersion = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsFotaUpdate) SetReleaseNote(v string) *DescribeDesktopsResponseBodyDesktopsFotaUpdate {
	s.ReleaseNote = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsFotaUpdate) SetReleaseNoteEn(v string) *DescribeDesktopsResponseBodyDesktopsFotaUpdate {
	s.ReleaseNoteEn = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsFotaUpdate) SetReleaseNoteJp(v string) *DescribeDesktopsResponseBodyDesktopsFotaUpdate {
	s.ReleaseNoteJp = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsFotaUpdate) SetSize(v int64) *DescribeDesktopsResponseBodyDesktopsFotaUpdate {
	s.Size = &v
	return s
}

type DescribeDesktopsResponseBodyDesktopsResourceGroups struct {
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeDesktopsResponseBodyDesktopsResourceGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponseBodyDesktopsResourceGroups) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponseBodyDesktopsResourceGroups) SetId(v string) *DescribeDesktopsResponseBodyDesktopsResourceGroups {
	s.Id = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsResourceGroups) SetName(v string) *DescribeDesktopsResponseBodyDesktopsResourceGroups {
	s.Name = &v
	return s
}

type DescribeDesktopsResponseBodyDesktopsSessions struct {
	// The ID of the end user who logged on to the cloud desktop.
	//
	// example:
	//
	// 29615820929547****
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The time when the desktop session was established.
	//
	// example:
	//
	// 2021-03-07T08:23Z
	EstablishmentTime *string `json:"EstablishmentTime,omitempty" xml:"EstablishmentTime,omitempty"`
	// The name of the external user.
	//
	// example:
	//
	// Testname
	ExternalUserName *string `json:"ExternalUserName,omitempty" xml:"ExternalUserName,omitempty"`
}

func (s DescribeDesktopsResponseBodyDesktopsSessions) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponseBodyDesktopsSessions) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponseBodyDesktopsSessions) SetEndUserId(v string) *DescribeDesktopsResponseBodyDesktopsSessions {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsSessions) SetEstablishmentTime(v string) *DescribeDesktopsResponseBodyDesktopsSessions {
	s.EstablishmentTime = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsSessions) SetExternalUserName(v string) *DescribeDesktopsResponseBodyDesktopsSessions {
	s.ExternalUserName = &v
	return s
}

type DescribeDesktopsResponseBodyDesktopsTags struct {
	// The tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeDesktopsResponseBodyDesktopsTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponseBodyDesktopsTags) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponseBodyDesktopsTags) SetKey(v string) *DescribeDesktopsResponseBodyDesktopsTags {
	s.Key = &v
	return s
}

func (s *DescribeDesktopsResponseBodyDesktopsTags) SetValue(v string) *DescribeDesktopsResponseBodyDesktopsTags {
	s.Value = &v
	return s
}

type DescribeDesktopsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsResponse) SetHeaders(v map[string]*string) *DescribeDesktopsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopsResponse) SetStatusCode(v int32) *DescribeDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopsResponse) SetBody(v *DescribeDesktopsResponseBody) *DescribeDesktopsResponse {
	s.Body = v
	return s
}

type DescribeDesktopsInGroupRequest struct {
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// Specifies whether to ignore deletion flags.
	//
	// Default value: true. Valid values:
	//
	// 	- true: ignores deletion flags. The cloud computers that were deleted are returned.
	//
	// 	- false: does not ignore deletion flags. The cloud computers that were deleted are not returned.
	//
	// example:
	//
	// true
	IgnoreDeleted *bool `json:"IgnoreDeleted,omitempty" xml:"IgnoreDeleted,omitempty"`
	// The number of entries to return on each page. Valid values: 1 to 100. Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The billing method of the desktop group.
	//
	// example:
	//
	// PrePaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeDesktopsInGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsInGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsInGroupRequest) SetDesktopGroupId(v string) *DescribeDesktopsInGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeDesktopsInGroupRequest) SetIgnoreDeleted(v bool) *DescribeDesktopsInGroupRequest {
	s.IgnoreDeleted = &v
	return s
}

func (s *DescribeDesktopsInGroupRequest) SetMaxResults(v int32) *DescribeDesktopsInGroupRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDesktopsInGroupRequest) SetNextToken(v string) *DescribeDesktopsInGroupRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopsInGroupRequest) SetPayType(v string) *DescribeDesktopsInGroupRequest {
	s.PayType = &v
	return s
}

func (s *DescribeDesktopsInGroupRequest) SetRegionId(v string) *DescribeDesktopsInGroupRequest {
	s.RegionId = &v
	return s
}

type DescribeDesktopsInGroupResponseBody struct {
	// The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The number of subscription cloud computers that are in the Connected state.
	//
	// example:
	//
	// 100
	OnlinePrePaidDesktopsCount *int32 `json:"OnlinePrePaidDesktopsCount,omitempty" xml:"OnlinePrePaidDesktopsCount,omitempty"`
	// The details about subscription cloud computers.
	PaidDesktops []*DescribeDesktopsInGroupResponseBodyPaidDesktops `json:"PaidDesktops,omitempty" xml:"PaidDesktops,omitempty" type:"Repeated"`
	// The total number of queried subscription cloud computers.
	//
	// example:
	//
	// 10
	PaidDesktopsCount *int32 `json:"PaidDesktopsCount,omitempty" xml:"PaidDesktopsCount,omitempty"`
	// The details about pay-as-you-go cloud computers.
	PostPaidDesktops []*DescribeDesktopsInGroupResponseBodyPostPaidDesktops `json:"PostPaidDesktops,omitempty" xml:"PostPaidDesktops,omitempty" type:"Repeated"`
	// The total number of queried pay-as-you-go cloud computers.
	//
	// example:
	//
	// 10
	PostPaidDesktopsCount *int32 `json:"PostPaidDesktopsCount,omitempty" xml:"PostPaidDesktopsCount,omitempty"`
	// The total amount of bills for pay-as-you-go cloud computers.
	//
	// example:
	//
	// 10000
	PostPaidDesktopsTotalAmount *int32 `json:"PostPaidDesktopsTotalAmount,omitempty" xml:"PostPaidDesktopsTotalAmount,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The number of subscription cloud computers that are in the Running state.
	//
	// example:
	//
	// 100
	RunningPrePaidDesktopsCount *int32 `json:"RunningPrePaidDesktopsCount,omitempty" xml:"RunningPrePaidDesktopsCount,omitempty"`
	// The number of subscription cloud computers that are in the Stopped state.
	//
	// example:
	//
	// 100
	StopedPrePaidDesktopsCount *int32 `json:"StopedPrePaidDesktopsCount,omitempty" xml:"StopedPrePaidDesktopsCount,omitempty"`
	// The number of subscription cloud computers that are in the Stopped state.
	//
	// example:
	//
	// 100
	StoppedPrePaidDesktopsCount *int32 `json:"StoppedPrePaidDesktopsCount,omitempty" xml:"StoppedPrePaidDesktopsCount,omitempty"`
}

func (s DescribeDesktopsInGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsInGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsInGroupResponseBody) SetNextToken(v string) *DescribeDesktopsInGroupResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetOnlinePrePaidDesktopsCount(v int32) *DescribeDesktopsInGroupResponseBody {
	s.OnlinePrePaidDesktopsCount = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetPaidDesktops(v []*DescribeDesktopsInGroupResponseBodyPaidDesktops) *DescribeDesktopsInGroupResponseBody {
	s.PaidDesktops = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetPaidDesktopsCount(v int32) *DescribeDesktopsInGroupResponseBody {
	s.PaidDesktopsCount = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetPostPaidDesktops(v []*DescribeDesktopsInGroupResponseBodyPostPaidDesktops) *DescribeDesktopsInGroupResponseBody {
	s.PostPaidDesktops = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetPostPaidDesktopsCount(v int32) *DescribeDesktopsInGroupResponseBody {
	s.PostPaidDesktopsCount = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetPostPaidDesktopsTotalAmount(v int32) *DescribeDesktopsInGroupResponseBody {
	s.PostPaidDesktopsTotalAmount = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetRequestId(v string) *DescribeDesktopsInGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetRunningPrePaidDesktopsCount(v int32) *DescribeDesktopsInGroupResponseBody {
	s.RunningPrePaidDesktopsCount = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetStopedPrePaidDesktopsCount(v int32) *DescribeDesktopsInGroupResponseBody {
	s.StopedPrePaidDesktopsCount = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBody) SetStoppedPrePaidDesktopsCount(v int32) *DescribeDesktopsInGroupResponseBody {
	s.StoppedPrePaidDesktopsCount = &v
	return s
}

type DescribeDesktopsInGroupResponseBodyPaidDesktops struct {
	// The connection status of the cloud computer.
	//
	// Valid values:
	//
	// 	- Unknown
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Connected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Disconnected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Connected
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ud-7ftf5b6yu77b0****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The status of the cloud computer.
	//
	// Valid values:
	//
	// 	- Stopped
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Starting
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Rebuilding
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Running
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Stopping
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Expired
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Deleted
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Pending
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Running
	DesktopStatus *string `json:"DesktopStatus,omitempty" xml:"DesktopStatus,omitempty"`
	// The type of the disk.
	//
	// Valid values:
	//
	// 	- SYSTEM: system disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DATA: data disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The ID of the authorized user of the cloud computer.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The IDs of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The username of the authorized user.
	//
	// example:
	//
	// alice
	EndUserName *string `json:"EndUserName,omitempty" xml:"EndUserName,omitempty"`
	// The usernames of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
	EndUserNames []*string `json:"EndUserNames,omitempty" xml:"EndUserNames,omitempty" type:"Repeated"`
	// The image version.
	//
	// example:
	//
	// 0.1.0-R-20220914.17****
	FotaVersion *string `json:"FotaVersion,omitempty" xml:"FotaVersion,omitempty"`
	// The version of the GPU driver.
	//
	// example:
	//
	// 1.0
	GpuDriverVersion *string `json:"GpuDriverVersion,omitempty" xml:"GpuDriverVersion,omitempty"`
	// The image ID.
	//
	// example:
	//
	// m-hn5v2mmk0****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The image name.
	//
	// example:
	//
	// Win10_ZC
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The flag that is used to manage the cloud computer.
	//
	// Valid values:
	//
	// 	- Updating: The configurations of the cloud computer are being updated.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NoFlag: No flags are attached to the cloud computer.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// NoFlag
	ManagementFlag *string `json:"ManagementFlag,omitempty" xml:"ManagementFlag,omitempty"`
	// The flags that are used to manage the cloud computers.
	ManagementFlags []*string `json:"ManagementFlags,omitempty" xml:"ManagementFlags,omitempty" type:"Repeated"`
	// The IP address of the member network interface controller (NIC) of the instance.
	//
	// example:
	//
	// 192.168.XX.XX
	MemberEniIp *string `json:"MemberEniIp,omitempty" xml:"MemberEniIp,omitempty"`
	// The OS.
	//
	// Valid values:
	//
	// 	- Linux
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The IP address of the primary NIC of the instance.
	//
	// example:
	//
	// 192.168.XX.XX
	PrimaryEniIp *string `json:"PrimaryEniIp,omitempty" xml:"PrimaryEniIp,omitempty"`
	// The protocol.
	//
	// Valid values:
	//
	// 	- HDX: High-definition Experience (HDX) protocol
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ASP: Adaptive Streaming Protocol (ASP) protocol provided by Alibaba Cloud
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The time when the cloud computer was reset.
	//
	// example:
	//
	// 2021-03-03 08:48:08
	ResetTime *string `json:"ResetTime,omitempty" xml:"ResetTime,omitempty"`
	// The system disk size. Unit: GiB.
	//
	// example:
	//
	// 80
	SystemDiskSize *int32 `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribeDesktopsInGroupResponseBodyPaidDesktops) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsInGroupResponseBodyPaidDesktops) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetConnectionStatus(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.ConnectionStatus = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetDesktopId(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.DesktopId = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetDesktopName(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.DesktopName = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetDesktopStatus(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.DesktopStatus = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetDiskType(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.DiskType = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetEndUserId(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetEndUserIds(v []*string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.EndUserIds = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetEndUserName(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.EndUserName = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetEndUserNames(v []*string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.EndUserNames = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetFotaVersion(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.FotaVersion = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetGpuDriverVersion(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.GpuDriverVersion = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetImageId(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.ImageId = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetImageName(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.ImageName = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetManagementFlag(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.ManagementFlag = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetManagementFlags(v []*string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.ManagementFlags = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetMemberEniIp(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.MemberEniIp = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetOsType(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.OsType = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetPrimaryEniIp(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.PrimaryEniIp = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetProtocolType(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetResetTime(v string) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.ResetTime = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPaidDesktops) SetSystemDiskSize(v int32) *DescribeDesktopsInGroupResponseBodyPaidDesktops {
	s.SystemDiskSize = &v
	return s
}

type DescribeDesktopsInGroupResponseBodyPostPaidDesktops struct {
	// The connection status of the cloud computer.
	//
	// Valid values:
	//
	// 	- Unknown
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Connected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Disconnected
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Connected
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// The retention period of the cloud computer.
	//
	// example:
	//
	// 4153958447
	CreateDuration *string `json:"CreateDuration,omitempty" xml:"CreateDuration,omitempty"`
	// The time when the cloud computer was created.
	//
	// example:
	//
	// 2022-01-21T06:34:57Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ud-2i8qxpv6t1a07****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The status of the cloud computer.
	//
	// Valid values:
	//
	// 	- Stopped
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Starting
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Rebuilding
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Running
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Stopping
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Expired
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Deleted
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Pending
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Stopped
	DesktopStatus *string `json:"DesktopStatus,omitempty" xml:"DesktopStatus,omitempty"`
	// The type of the disk.
	//
	// Valid values:
	//
	// 	- SYSTEM: system disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DATA: data disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	DiskType *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	// The ID of the authorized user.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The IDs of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The username of the authorized user.
	//
	// example:
	//
	// alice
	EndUserName *string `json:"EndUserName,omitempty" xml:"EndUserName,omitempty"`
	// The usernames of the end users who are connected to the cloud computers in the cloud computer pool. If no end users are connected, no values are returned for this parameter.
	EndUserNames []*string `json:"EndUserNames,omitempty" xml:"EndUserNames,omitempty" type:"Repeated"`
	// The image version.
	//
	// example:
	//
	// 0.1.0-R-20220914.17****
	FotaVersion *string `json:"FotaVersion,omitempty" xml:"FotaVersion,omitempty"`
	// The version of the GPU driver.
	//
	// example:
	//
	// 1.0
	GpuDriverVersion *string `json:"GpuDriverVersion,omitempty" xml:"GpuDriverVersion,omitempty"`
	// The image ID.
	//
	// example:
	//
	// m-hn5v2mmk0****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The image name.
	//
	// example:
	//
	// Win10_ZC
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The flag that is used to manage the cloud computer.
	//
	// Valid values:
	//
	// 	- Updating: The configurations of the cloud computer are being updated.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NoFlag: No flags are attached to the cloud computer.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// NoFlag
	ManagementFlag *string `json:"ManagementFlag,omitempty" xml:"ManagementFlag,omitempty"`
	// The flags that are used to manage the cloud computers.
	ManagementFlags []*string `json:"ManagementFlags,omitempty" xml:"ManagementFlags,omitempty" type:"Repeated"`
	// The IP address of the member NIC of the instance.
	//
	// example:
	//
	// 192.168.XX.XX
	MemberEniIp *string `json:"MemberEniIp,omitempty" xml:"MemberEniIp,omitempty"`
	// The OS.
	//
	// Valid values:
	//
	// 	- Linux
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The IP address of the primary NIC of the instance.
	//
	// example:
	//
	// 192.168.XX.XX
	PrimaryEniIp *string `json:"PrimaryEniIp,omitempty" xml:"PrimaryEniIp,omitempty"`
	// The protocol.
	//
	// Valid values:
	//
	// 	- HDX: HDX protocol
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ASP: ASP protocol provided by Alibaba Cloud
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// HDX
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The time when the cloud computer was released.
	//
	// example:
	//
	// 2022-01-21T16:34:57Z
	ReleaseTime *string `json:"ReleaseTime,omitempty" xml:"ReleaseTime,omitempty"`
	// The time when the cloud computer was reset.
	//
	// example:
	//
	// 2021-03-03 08:48:08
	ResetTime *string `json:"ResetTime,omitempty" xml:"ResetTime,omitempty"`
	// The system disk size. Unit: GiB.
	//
	// example:
	//
	// 80
	SystemDiskSize *int32 `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribeDesktopsInGroupResponseBodyPostPaidDesktops) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsInGroupResponseBodyPostPaidDesktops) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetConnectionStatus(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ConnectionStatus = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetCreateDuration(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.CreateDuration = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetCreateTime(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.CreateTime = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetDesktopId(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.DesktopId = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetDesktopName(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.DesktopName = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetDesktopStatus(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.DesktopStatus = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetDiskType(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.DiskType = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetEndUserId(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.EndUserId = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetEndUserIds(v []*string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.EndUserIds = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetEndUserName(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.EndUserName = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetEndUserNames(v []*string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.EndUserNames = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetFotaVersion(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.FotaVersion = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetGpuDriverVersion(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.GpuDriverVersion = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetImageId(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ImageId = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetImageName(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ImageName = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetManagementFlag(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ManagementFlag = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetManagementFlags(v []*string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ManagementFlags = v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetMemberEniIp(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.MemberEniIp = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetOsType(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.OsType = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetPrimaryEniIp(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.PrimaryEniIp = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetProtocolType(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ProtocolType = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetReleaseTime(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ReleaseTime = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetResetTime(v string) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.ResetTime = &v
	return s
}

func (s *DescribeDesktopsInGroupResponseBodyPostPaidDesktops) SetSystemDiskSize(v int32) *DescribeDesktopsInGroupResponseBodyPostPaidDesktops {
	s.SystemDiskSize = &v
	return s
}

type DescribeDesktopsInGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDesktopsInGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDesktopsInGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDesktopsInGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeDesktopsInGroupResponse) SetHeaders(v map[string]*string) *DescribeDesktopsInGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeDesktopsInGroupResponse) SetStatusCode(v int32) *DescribeDesktopsInGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDesktopsInGroupResponse) SetBody(v *DescribeDesktopsInGroupResponseBody) *DescribeDesktopsInGroupResponse {
	s.Body = v
	return s
}

type DescribeDevicesRequest struct {
	// The address of the Active Directory (AD) office network.
	//
	// example:
	//
	// xn--0zw****
	AdDomain *string `json:"AdDomain,omitempty" xml:"AdDomain,omitempty"`
	// The type of the client.
	//
	// Valid values:
	//
	// 	- 1: hardware client.
	//
	// 	- 2: software client.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The ID of the device. The serial number (SN) of the hardware client or the UUID of the software client.
	//
	// example:
	//
	// 5F52817BE267A43C608D245070D2****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// The ID of the convenient office network.
	//
	// example:
	//
	// cn-hangzhou+dir-jedbpr4sl9l37****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The ID of the bound user.
	//
	// example:
	//
	// moli
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The page number.
	//
	// example:
	//
	// 10
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries per page.
	//
	// example:
	//
	// 1
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
	//
	// example:
	//
	// cn-hangzhou
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The account type of the user.
	//
	// Valid values:
	//
	// 	- AD: enterprise AD account.
	//
	// 	- SIMPLE: convenience account
	//
	// example:
	//
	// SIMPLE
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s DescribeDevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDevicesRequest) SetAdDomain(v string) *DescribeDevicesRequest {
	s.AdDomain = &v
	return s
}

func (s *DescribeDevicesRequest) SetClientType(v string) *DescribeDevicesRequest {
	s.ClientType = &v
	return s
}

func (s *DescribeDevicesRequest) SetDeviceId(v string) *DescribeDevicesRequest {
	s.DeviceId = &v
	return s
}

func (s *DescribeDevicesRequest) SetDirectoryId(v string) *DescribeDevicesRequest {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDevicesRequest) SetEndUserId(v string) *DescribeDevicesRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeDevicesRequest) SetPageNumber(v int32) *DescribeDevicesRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeDevicesRequest) SetPageSize(v int32) *DescribeDevicesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDevicesRequest) SetRegion(v string) *DescribeDevicesRequest {
	s.Region = &v
	return s
}

func (s *DescribeDevicesRequest) SetUserType(v string) *DescribeDevicesRequest {
	s.UserType = &v
	return s
}

type DescribeDevicesResponseBody struct {
	// The information about devices that you queried.
	Devices []*DescribeDevicesResponseBodyDevices `json:"Devices,omitempty" xml:"Devices,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 5BEFE642-A383-4A18-8939-FB7DE452****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBody) SetDevices(v []*DescribeDevicesResponseBodyDevices) *DescribeDevicesResponseBody {
	s.Devices = v
	return s
}

func (s *DescribeDevicesResponseBody) SetRequestId(v string) *DescribeDevicesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDevicesResponseBodyDevices struct {
	// The ID of the device. The serial number (SN) of the hardware client or the UUID of the software client.
	//
	// example:
	//
	// 5F52817BE267A43C608D245070D2****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// The users who are bound to the device.
	EndUserList []*DescribeDevicesResponseBodyDevicesEndUserList `json:"EndUserList,omitempty" xml:"EndUserList,omitempty" type:"Repeated"`
}

func (s DescribeDevicesResponseBodyDevices) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBodyDevices) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBodyDevices) SetDeviceId(v string) *DescribeDevicesResponseBodyDevices {
	s.DeviceId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevices) SetEndUserList(v []*DescribeDevicesResponseBodyDevicesEndUserList) *DescribeDevicesResponseBodyDevices {
	s.EndUserList = v
	return s
}

type DescribeDevicesResponseBodyDevicesEndUserList struct {
	// The address of the AD office network.
	//
	// example:
	//
	// xn--0zw****
	AdDomain *string `json:"AdDomain,omitempty" xml:"AdDomain,omitempty"`
	// The ID of the convenient office network.
	//
	// example:
	//
	// cn-hangzhou+dir-jedbpr4sl9l37****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The ID of the user.
	//
	// example:
	//
	// moli
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The account type of the user.
	//
	// Valid values:
	//
	// 	- AD: enterprise AD account.
	//
	// 	- SIMPLE: convenience account
	//
	// example:
	//
	// SIMPLE
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s DescribeDevicesResponseBodyDevicesEndUserList) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponseBodyDevicesEndUserList) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponseBodyDevicesEndUserList) SetAdDomain(v string) *DescribeDevicesResponseBodyDevicesEndUserList {
	s.AdDomain = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesEndUserList) SetDirectoryId(v string) *DescribeDevicesResponseBodyDevicesEndUserList {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesEndUserList) SetEndUserId(v string) *DescribeDevicesResponseBodyDevicesEndUserList {
	s.EndUserId = &v
	return s
}

func (s *DescribeDevicesResponseBodyDevicesEndUserList) SetUserType(v string) *DescribeDevicesResponseBodyDevicesEndUserList {
	s.UserType = &v
	return s
}

type DescribeDevicesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDevicesResponse) SetHeaders(v map[string]*string) *DescribeDevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDevicesResponse) SetStatusCode(v int32) *DescribeDevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDevicesResponse) SetBody(v *DescribeDevicesResponseBody) *DescribeDevicesResponse {
	s.Body = v
	return s
}

type DescribeDirectoriesRequest struct {
	// Details of directory IDs. You can specify one or more directory IDs.
	//
	// example:
	//
	// cn-hangzhou+dir-gx2x1dhsmu52rd****
	DirectoryId []*string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty" type:"Repeated"`
	// The directory status. This parameter is equivalent to `Status`.
	//
	// example:
	//
	// REGISTERED
	DirectoryStatus *string `json:"DirectoryStatus,omitempty" xml:"DirectoryStatus,omitempty"`
	// The directory type.
	//
	// Valid values:
	//
	// 	- SIMPLE: a directory of the convenience account type
	//
	// 	- AD_CONNECTOR: an AD directory
	//
	// 	- RAM: a RAM directory
	//
	// example:
	//
	// RAM
	DirectoryType *string `json:"DirectoryType,omitempty" xml:"DirectoryType,omitempty"`
	// The number of entries to return on each page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The directory status.
	//
	// Valid values:
	//
	// 	- REGISTERING: The directory is being registered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DEREGISTERING: The directory is being deregistered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- REGISTERED: The directory is registered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NEEDCONFIGTRUST: A trust relationship needs to be configured for the directory.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CONFIGTRUSTFAILED: A trust relationship fails to be configured for the directory.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DEREGISTERED: The directory is deregistered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ERROR: One or more configurations of the directory are invalid.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CONFIGTRUSTING: A trust relationship is being configured.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NEEDCONFIGUSER: Users need to be configured for the directory.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// REGISTERED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeDirectoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesRequest) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesRequest) SetDirectoryId(v []*string) *DescribeDirectoriesRequest {
	s.DirectoryId = v
	return s
}

func (s *DescribeDirectoriesRequest) SetDirectoryStatus(v string) *DescribeDirectoriesRequest {
	s.DirectoryStatus = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetDirectoryType(v string) *DescribeDirectoriesRequest {
	s.DirectoryType = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetMaxResults(v int32) *DescribeDirectoriesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetNextToken(v string) *DescribeDirectoriesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetRegionId(v string) *DescribeDirectoriesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDirectoriesRequest) SetStatus(v string) *DescribeDirectoriesRequest {
	s.Status = &v
	return s
}

type DescribeDirectoriesResponseBody struct {
	// The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows. This parameter is returned only when the directory type is AD office network.
	//
	// example:
	//
	// cnshsv21hmc****
	AdHostname *string `json:"AdHostname,omitempty" xml:"AdHostname,omitempty"`
	// The directories.
	Directories []*DescribeDirectoriesResponseBodyDirectories `json:"Directories,omitempty" xml:"Directories,omitempty" type:"Repeated"`
	// The token that is used for the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// F369A091-002F-49C8-AD55-02A776297C7B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeDirectoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponseBody) SetAdHostname(v string) *DescribeDirectoriesResponseBody {
	s.AdHostname = &v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetDirectories(v []*DescribeDirectoriesResponseBodyDirectories) *DescribeDirectoriesResponseBody {
	s.Directories = v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetNextToken(v string) *DescribeDirectoriesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeDirectoriesResponseBody) SetRequestId(v string) *DescribeDirectoriesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeDirectoriesResponseBodyDirectories struct {
	// Details of the AD connector.
	ADConnectors []*DescribeDirectoriesResponseBodyDirectoriesADConnectors `json:"ADConnectors,omitempty" xml:"ADConnectors,omitempty" type:"Repeated"`
	// example:
	//
	// dc001
	AdHostname *string `json:"AdHostname,omitempty" xml:"AdHostname,omitempty"`
	// example:
	//
	// dc002
	BackupDCHostname *string `json:"BackupDCHostname,omitempty" xml:"BackupDCHostname,omitempty"`
	// example:
	//
	// 192.168.2.100
	BackupDns *string `json:"BackupDns,omitempty" xml:"BackupDns,omitempty"`
	// The time when the directory was created.
	//
	// example:
	//
	// 2020-11-02T01:44Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The security group ID. This parameter is returned only when the directory type is AD office network.
	//
	// example:
	//
	// sg-bp1ce64o4g9mdf5u****
	CustomSecurityGroupId *string `json:"CustomSecurityGroupId,omitempty" xml:"CustomSecurityGroupId,omitempty"`
	// The method in which the cloud computer is connected.
	//
	// Valid values:
	//
	// 	- VPC
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Internet
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Any
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Internet
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// The endpoint that is used to connect to cloud computers in the directory over a VPC.
	//
	// example:
	//
	// http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com
	DesktopVpcEndpoint *string `json:"DesktopVpcEndpoint,omitempty" xml:"DesktopVpcEndpoint,omitempty"`
	// The directory ID.
	//
	// example:
	//
	// cn-hangzhou+dir-gx2x1dhsmu52rd****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The directory type.
	//
	// Valid values:
	//
	// 	- AD_CONNECTOR: AD directory
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RAM: RAM directory
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// RAM
	DirectoryType *string `json:"DirectoryType,omitempty" xml:"DirectoryType,omitempty"`
	// The DNS address of the directory.
	DnsAddress []*string `json:"DnsAddress,omitempty" xml:"DnsAddress,omitempty" type:"Repeated"`
	// The username of a DNS user.
	//
	// example:
	//
	// testDnsUserName
	DnsUserName *string `json:"DnsUserName,omitempty" xml:"DnsUserName,omitempty"`
	// The domain name.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The password of the domain administrator. This parameter is returned only when the directory type is AD office network.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the domain administrator.
	//
	// example:
	//
	// sAMAccountName
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// Indicates whether the local administrator permissions are granted to users that use cloud computers in the office network.
	//
	// example:
	//
	// true
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Indicates whether cloud computers can communicate with each other in the directory.
	//
	// example:
	//
	// true
	EnableCrossDesktopAccess *bool `json:"EnableCrossDesktopAccess,omitempty" xml:"EnableCrossDesktopAccess,omitempty"`
	// Indicates whether access over the Internet is enabled.
	//
	// >  This parameter is unavailable.
	//
	// example:
	//
	// false
	EnableInternetAccess *bool `json:"EnableInternetAccess,omitempty" xml:"EnableInternetAccess,omitempty"`
	// The IDs of File Storage NAS (NAS) file systems.
	FileSystemIds []*string `json:"FileSystemIds,omitempty" xml:"FileSystemIds,omitempty" type:"Repeated"`
	// The registration logs. This parameter is returned only when the directory type is AD office network.
	Logs []*DescribeDirectoriesResponseBodyDirectoriesLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	// Indicates whether MFA is enabled.
	//
	// example:
	//
	// false
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The directory name.
	//
	// example:
	//
	// testDirectoryName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Indicates whether two-step verification for logons is enabled. This parameter is returned only for directories of convenience account type.\\
	//
	// If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to an Alibaba Cloud Workspace client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.
	//
	// example:
	//
	// false
	NeedVerifyLoginRisk *bool `json:"NeedVerifyLoginRisk,omitempty" xml:"NeedVerifyLoginRisk,omitempty"`
	// The organization unit that you selected when you added the cloud computer to the domain.
	//
	// example:
	//
	// example.com/Domain Controllers
	OuName *string `json:"OuName,omitempty" xml:"OuName,omitempty"`
	// Indicates whether single sign-on (SSO) is enabled.
	//
	// example:
	//
	// false
	SsoEnabled *bool `json:"SsoEnabled,omitempty" xml:"SsoEnabled,omitempty"`
	// The status of the AD directory.
	//
	// Valid values:
	//
	// 	- REGISTERING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- REGISTERED
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// REGISTERING
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The DNS address of the enterprise AD subdomain.
	SubDnsAddress []*string `json:"SubDnsAddress,omitempty" xml:"SubDnsAddress,omitempty" type:"Repeated"`
	// The fully qualified domain name (FQDN) of the existing AD subdomain. The value contains both the host name and the domain name.
	//
	// example:
	//
	// child.example.com
	SubDomainName *string `json:"SubDomainName,omitempty" xml:"SubDomainName,omitempty"`
	// The AD trust password. This parameter is returned only when the directory type is AD office network.
	//
	// example:
	//
	// 82Tg****
	TrustPassword *string `json:"TrustPassword,omitempty" xml:"TrustPassword,omitempty"`
	// The IDs of the vSwitches specified when the directory was created.
	VSwitchIds []*string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Repeated"`
	// The ID of the VPC to which the vSwitch belongs. This parameter is returned only when the directory type is AD office network.
	//
	// example:
	//
	// vpc-uf6tz5k67puge5jn8****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s DescribeDirectoriesResponseBodyDirectories) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponseBodyDirectories) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetADConnectors(v []*DescribeDirectoriesResponseBodyDirectoriesADConnectors) *DescribeDirectoriesResponseBodyDirectories {
	s.ADConnectors = v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetAdHostname(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.AdHostname = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetBackupDCHostname(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.BackupDCHostname = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetBackupDns(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.BackupDns = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetCreationTime(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.CreationTime = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetCustomSecurityGroupId(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.CustomSecurityGroupId = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDesktopAccessType(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DesktopAccessType = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDesktopVpcEndpoint(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DesktopVpcEndpoint = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDirectoryId(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DirectoryId = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDirectoryType(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DirectoryType = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDnsAddress(v []*string) *DescribeDirectoriesResponseBodyDirectories {
	s.DnsAddress = v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDnsUserName(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DnsUserName = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDomainName(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DomainName = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDomainPassword(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DomainPassword = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetDomainUserName(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.DomainUserName = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetEnableAdminAccess(v bool) *DescribeDirectoriesResponseBodyDirectories {
	s.EnableAdminAccess = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetEnableCrossDesktopAccess(v bool) *DescribeDirectoriesResponseBodyDirectories {
	s.EnableCrossDesktopAccess = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetEnableInternetAccess(v bool) *DescribeDirectoriesResponseBodyDirectories {
	s.EnableInternetAccess = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetFileSystemIds(v []*string) *DescribeDirectoriesResponseBodyDirectories {
	s.FileSystemIds = v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetLogs(v []*DescribeDirectoriesResponseBodyDirectoriesLogs) *DescribeDirectoriesResponseBodyDirectories {
	s.Logs = v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetMfaEnabled(v bool) *DescribeDirectoriesResponseBodyDirectories {
	s.MfaEnabled = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetName(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.Name = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetNeedVerifyLoginRisk(v bool) *DescribeDirectoriesResponseBodyDirectories {
	s.NeedVerifyLoginRisk = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetOuName(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.OuName = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetSsoEnabled(v bool) *DescribeDirectoriesResponseBodyDirectories {
	s.SsoEnabled = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetStatus(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.Status = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetSubDnsAddress(v []*string) *DescribeDirectoriesResponseBodyDirectories {
	s.SubDnsAddress = v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetSubDomainName(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.SubDomainName = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetTrustPassword(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.TrustPassword = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetVSwitchIds(v []*string) *DescribeDirectoriesResponseBodyDirectories {
	s.VSwitchIds = v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectories) SetVpcId(v string) *DescribeDirectoriesResponseBodyDirectories {
	s.VpcId = &v
	return s
}

type DescribeDirectoriesResponseBodyDirectoriesADConnectors struct {
	// The connection address.
	//
	// example:
	//
	// ``172.17.**.**``
	ADConnectorAddress *string `json:"ADConnectorAddress,omitempty" xml:"ADConnectorAddress,omitempty"`
	// Valid values:
	//
	// 	- CONNECT_ERROR
	//
	// 	- RUNNING
	//
	// 	- CONNECTING: You must configure domain trust for your AD system.
	//
	// 	- EXPIRED
	//
	// 	- CREATING
	//
	// example:
	//
	// RUNNING
	ConnectorStatus *string `json:"ConnectorStatus,omitempty" xml:"ConnectorStatus,omitempty"`
	// The ID of the NIC to which the AD connector is mounted.
	//
	// example:
	//
	// eni-bp1i4wx78lgosrj6****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The AD connector type.
	//
	// Valid values:
	//
	// 	- 1: General
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- 2: Advanced
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// 1
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The trust password of the AD domain controller.
	//
	// example:
	//
	// yfpoAD****
	TrustKey *string `json:"TrustKey,omitempty" xml:"TrustKey,omitempty"`
	// The ID of the vSwitch with which the AD connector is associated.
	//
	// example:
	//
	// vsw-bp19ocz3erfx15uon****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeDirectoriesResponseBodyDirectoriesADConnectors) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponseBodyDirectoriesADConnectors) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponseBodyDirectoriesADConnectors) SetADConnectorAddress(v string) *DescribeDirectoriesResponseBodyDirectoriesADConnectors {
	s.ADConnectorAddress = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesADConnectors) SetConnectorStatus(v string) *DescribeDirectoriesResponseBodyDirectoriesADConnectors {
	s.ConnectorStatus = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesADConnectors) SetNetworkInterfaceId(v string) *DescribeDirectoriesResponseBodyDirectoriesADConnectors {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesADConnectors) SetSpecification(v string) *DescribeDirectoriesResponseBodyDirectoriesADConnectors {
	s.Specification = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesADConnectors) SetTrustKey(v string) *DescribeDirectoriesResponseBodyDirectoriesADConnectors {
	s.TrustKey = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesADConnectors) SetVSwitchId(v string) *DescribeDirectoriesResponseBodyDirectoriesADConnectors {
	s.VSwitchId = &v
	return s
}

type DescribeDirectoriesResponseBodyDirectoriesLogs struct {
	// The level of the log entry.
	//
	// Valid values:
	//
	// 	- ERROR
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- INFO
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- WARN
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// INFO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// Details of the log entry.
	//
	// example:
	//
	// code:success | message:Create Connector complete.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The step that corresponds to the log entry.
	//
	// example:
	//
	// DescribeDirectories
	Step *string `json:"Step,omitempty" xml:"Step,omitempty"`
	// The time when the log entry was printed.
	//
	// example:
	//
	// 2021-01-22T06:45Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeDirectoriesResponseBodyDirectoriesLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponseBodyDirectoriesLogs) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponseBodyDirectoriesLogs) SetLevel(v string) *DescribeDirectoriesResponseBodyDirectoriesLogs {
	s.Level = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesLogs) SetMessage(v string) *DescribeDirectoriesResponseBodyDirectoriesLogs {
	s.Message = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesLogs) SetStep(v string) *DescribeDirectoriesResponseBodyDirectoriesLogs {
	s.Step = &v
	return s
}

func (s *DescribeDirectoriesResponseBodyDirectoriesLogs) SetTimeStamp(v string) *DescribeDirectoriesResponseBodyDirectoriesLogs {
	s.TimeStamp = &v
	return s
}

type DescribeDirectoriesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDirectoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDirectoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDirectoriesResponse) GoString() string {
	return s.String()
}

func (s *DescribeDirectoriesResponse) SetHeaders(v map[string]*string) *DescribeDirectoriesResponse {
	s.Headers = v
	return s
}

func (s *DescribeDirectoriesResponse) SetStatusCode(v int32) *DescribeDirectoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDirectoriesResponse) SetBody(v *DescribeDirectoriesResponseBody) *DescribeDirectoriesResponse {
	s.Body = v
	return s
}

type DescribeFlowMetricRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1664714703743
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// desktop
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// intranetOutRate
	MetricType *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 60
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1651817220643
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeFlowMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowMetricRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowMetricRequest) SetEndTime(v string) *DescribeFlowMetricRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowMetricRequest) SetInstanceId(v string) *DescribeFlowMetricRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeFlowMetricRequest) SetInstanceType(v string) *DescribeFlowMetricRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeFlowMetricRequest) SetMetricType(v string) *DescribeFlowMetricRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeFlowMetricRequest) SetPeriod(v int32) *DescribeFlowMetricRequest {
	s.Period = &v
	return s
}

func (s *DescribeFlowMetricRequest) SetRegionId(v string) *DescribeFlowMetricRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowMetricRequest) SetStartTime(v string) *DescribeFlowMetricRequest {
	s.StartTime = &v
	return s
}

type DescribeFlowMetricResponseBody struct {
	// example:
	//
	// {\\"instanceId\\": \\"np-4wrye3ishxi47****\\", \\"requestId\\": \\"4F0CD5B6-70D6-5115-A2F7-7EAC3981****\\", \\"dataPoints\\": [{\\"timeStamp\\": 1636510320000, \\"Average\\": 293752.0}]}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// 6857EDCB-631F-5405-BE95-45CBB4C3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFlowMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowMetricResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowMetricResponseBody) SetData(v string) *DescribeFlowMetricResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeFlowMetricResponseBody) SetRequestId(v string) *DescribeFlowMetricResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFlowMetricResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowMetricResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowMetricResponse) SetHeaders(v map[string]*string) *DescribeFlowMetricResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowMetricResponse) SetStatusCode(v int32) *DescribeFlowMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowMetricResponse) SetBody(v *DescribeFlowMetricResponseBody) *DescribeFlowMetricResponse {
	s.Body = v
	return s
}

type DescribeFlowStatisticRequest struct {
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The number of the page to return.\\
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// The number of entries to return on each page.
	//
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The statistic collection interval. Unit: seconds.
	//
	// Valid values:
	//
	// 	- 3600: 1 hour
	//
	// 	- 10800: 3 hours
	//
	// 	- 86400: 24 hours
	//
	// This parameter is required.
	//
	// example:
	//
	// 3600
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowStatisticRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowStatisticRequest) SetDesktopId(v string) *DescribeFlowStatisticRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeFlowStatisticRequest) SetOfficeSiteId(v string) *DescribeFlowStatisticRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeFlowStatisticRequest) SetPageNumber(v int32) *DescribeFlowStatisticRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowStatisticRequest) SetPageSize(v int32) *DescribeFlowStatisticRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowStatisticRequest) SetPeriod(v int32) *DescribeFlowStatisticRequest {
	s.Period = &v
	return s
}

func (s *DescribeFlowStatisticRequest) SetRegionId(v string) *DescribeFlowStatisticRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowStatisticResponseBody struct {
	// The number of available cloud computers in the office network.
	//
	// example:
	//
	// 10
	DesktopCount *int32 `json:"DesktopCount,omitempty" xml:"DesktopCount,omitempty"`
	// The traffic statistics.
	DesktopFlowStatistic []*DescribeFlowStatisticResponseBodyDesktopFlowStatistic `json:"DesktopFlowStatistic,omitempty" xml:"DesktopFlowStatistic,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 269BDB16-2CD8-4865-84BD-11C40BC2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFlowStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowStatisticResponseBody) SetDesktopCount(v int32) *DescribeFlowStatisticResponseBody {
	s.DesktopCount = &v
	return s
}

func (s *DescribeFlowStatisticResponseBody) SetDesktopFlowStatistic(v []*DescribeFlowStatisticResponseBodyDesktopFlowStatistic) *DescribeFlowStatisticResponseBody {
	s.DesktopFlowStatistic = v
	return s
}

func (s *DescribeFlowStatisticResponseBody) SetRequestId(v string) *DescribeFlowStatisticResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFlowStatisticResponseBodyDesktopFlowStatistic struct {
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-8bslxqq0csytn****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// desktop-1
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The traffic amount. Unit: KB.
	//
	// example:
	//
	// 1000
	FlowIn *string `json:"FlowIn,omitempty" xml:"FlowIn,omitempty"`
	// The traffic ranking.
	//
	// example:
	//
	// 1
	FlowRank *int32 `json:"FlowRank,omitempty" xml:"FlowRank,omitempty"`
}

func (s DescribeFlowStatisticResponseBodyDesktopFlowStatistic) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowStatisticResponseBodyDesktopFlowStatistic) GoString() string {
	return s.String()
}

func (s *DescribeFlowStatisticResponseBodyDesktopFlowStatistic) SetDesktopId(v string) *DescribeFlowStatisticResponseBodyDesktopFlowStatistic {
	s.DesktopId = &v
	return s
}

func (s *DescribeFlowStatisticResponseBodyDesktopFlowStatistic) SetDesktopName(v string) *DescribeFlowStatisticResponseBodyDesktopFlowStatistic {
	s.DesktopName = &v
	return s
}

func (s *DescribeFlowStatisticResponseBodyDesktopFlowStatistic) SetFlowIn(v string) *DescribeFlowStatisticResponseBodyDesktopFlowStatistic {
	s.FlowIn = &v
	return s
}

func (s *DescribeFlowStatisticResponseBodyDesktopFlowStatistic) SetFlowRank(v int32) *DescribeFlowStatisticResponseBodyDesktopFlowStatistic {
	s.FlowRank = &v
	return s
}

type DescribeFlowStatisticResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowStatisticResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowStatisticResponse) SetHeaders(v map[string]*string) *DescribeFlowStatisticResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowStatisticResponse) SetStatusCode(v int32) *DescribeFlowStatisticResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowStatisticResponse) SetBody(v *DescribeFlowStatisticResponseBody) *DescribeFlowStatisticResponse {
	s.Body = v
	return s
}

type DescribeFotaPendingDesktopsRequest struct {
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The number of entries per page.
	//
	// 	- Valid values: 1 to 100.
	//
	// 	- Default value: 20.
	//
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of `NextToken`.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the office network. You can call the [DescribeOfficeSites](https://help.aliyun.com/document_detail/216071.html) operation to obtain the value of this parameter.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the image update task. You can call the [DescribeFotaTasks](https://help.aliyun.com/document_detail/437001.html) operation to obtain the value of this parameter.
	//
	// example:
	//
	// aot-c4khwrp9ocml4****
	TaskUid *string `json:"TaskUid,omitempty" xml:"TaskUid,omitempty"`
}

func (s DescribeFotaPendingDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaPendingDesktopsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFotaPendingDesktopsRequest) SetDesktopId(v string) *DescribeFotaPendingDesktopsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeFotaPendingDesktopsRequest) SetDesktopName(v string) *DescribeFotaPendingDesktopsRequest {
	s.DesktopName = &v
	return s
}

func (s *DescribeFotaPendingDesktopsRequest) SetMaxResults(v int32) *DescribeFotaPendingDesktopsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeFotaPendingDesktopsRequest) SetNextToken(v string) *DescribeFotaPendingDesktopsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeFotaPendingDesktopsRequest) SetOfficeSiteId(v string) *DescribeFotaPendingDesktopsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeFotaPendingDesktopsRequest) SetRegionId(v string) *DescribeFotaPendingDesktopsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFotaPendingDesktopsRequest) SetTaskUid(v string) *DescribeFotaPendingDesktopsRequest {
	s.TaskUid = &v
	return s
}

type DescribeFotaPendingDesktopsResponseBody struct {
	// The response code.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The cloud computers whose images can be and are pending to be updated to the version specified in `TaskUid`.
	FotaPendingDesktops []*DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops `json:"FotaPendingDesktops,omitempty" xml:"FotaPendingDesktops,omitempty" type:"Repeated"`
	// The returned message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFotaPendingDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaPendingDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFotaPendingDesktopsResponseBody) SetCode(v string) *DescribeFotaPendingDesktopsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBody) SetFotaPendingDesktops(v []*DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) *DescribeFotaPendingDesktopsResponseBody {
	s.FotaPendingDesktops = v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBody) SetMessage(v string) *DescribeFotaPendingDesktopsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBody) SetNextToken(v string) *DescribeFotaPendingDesktopsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBody) SetRequestId(v string) *DescribeFotaPendingDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops struct {
	// The current version of the image used by the cloud computer.
	//
	// example:
	//
	// 0.0.1-D-20220513.143129
	CurrentAppVersion *string `json:"CurrentAppVersion,omitempty" xml:"CurrentAppVersion,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-bvdtu3jn97o1r****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// TestDesktop
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// > This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden
	FotaProject *string `json:"FotaProject,omitempty" xml:"FotaProject,omitempty"`
	// The ID of the office network.
	//
	// example:
	//
	// cn-hangzhou+dir-815419****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The connected sessions.
	Sessions []*DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The status of the cloud computer.
	//
	// Valid values:
	//
	// 	- 0: The cloud computer is being created.
	//
	// 	- 1: The cloud computer is being started.
	//
	// 	- 2: The cloud computer is running.
	//
	// 	- 3: The cloud computer is being stopped.
	//
	// 	- 5: The cloud computer is stopped.
	//
	// 	- 6: The cloud computer expires.
	//
	// 	- 7: The cloud computer is deleted.
	//
	// 	- 9: Failed to create the cloud computer.
	//
	// example:
	//
	// 2
	Status *int64 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) GoString() string {
	return s.String()
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) SetCurrentAppVersion(v string) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops {
	s.CurrentAppVersion = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) SetDesktopId(v string) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops {
	s.DesktopId = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) SetDesktopName(v string) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops {
	s.DesktopName = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) SetFotaProject(v string) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops {
	s.FotaProject = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) SetOfficeSiteId(v string) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) SetSessions(v []*DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops {
	s.Sessions = v
	return s
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops) SetStatus(v int64) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktops {
	s.Status = &v
	return s
}

type DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions struct {
	// The ID of the end user that connects to the cloud computer.
	//
	// example:
	//
	// end user id
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
}

func (s DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions) GoString() string {
	return s.String()
}

func (s *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions) SetEndUserId(v string) *DescribeFotaPendingDesktopsResponseBodyFotaPendingDesktopsSessions {
	s.EndUserId = &v
	return s
}

type DescribeFotaPendingDesktopsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFotaPendingDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFotaPendingDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaPendingDesktopsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFotaPendingDesktopsResponse) SetHeaders(v map[string]*string) *DescribeFotaPendingDesktopsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFotaPendingDesktopsResponse) SetStatusCode(v int32) *DescribeFotaPendingDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFotaPendingDesktopsResponse) SetBody(v *DescribeFotaPendingDesktopsResponseBody) *DescribeFotaPendingDesktopsResponse {
	s.Body = v
	return s
}

type DescribeFotaTasksRequest struct {
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	FotaStatus *string `json:"FotaStatus,omitempty" xml:"FotaStatus,omitempty"`
	// The language of the image version to update.
	//
	// Valid values:
	//
	// 	- en: English.
	//
	// 	- zh: Simplified Chinese.
	//
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The number of entries per page.
	//
	// 	- Valid values: 1 to 100
	//
	// 	- Default value: 20
	//
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. If the NextToken parameter is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the image update tasks.
	TaskUid []*string `json:"TaskUid,omitempty" xml:"TaskUid,omitempty" type:"Repeated"`
	// Specifies whether to automatically push the image update task.
	//
	// Valid values:
	//
	// 	- Running: automatically pushes the image update task.
	//
	// 	- Pending: does not automatically push the image update task.
	//
	// example:
	//
	// Pending
	UserStatus *string `json:"UserStatus,omitempty" xml:"UserStatus,omitempty"`
}

func (s DescribeFotaTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeFotaTasksRequest) SetFotaStatus(v string) *DescribeFotaTasksRequest {
	s.FotaStatus = &v
	return s
}

func (s *DescribeFotaTasksRequest) SetLang(v string) *DescribeFotaTasksRequest {
	s.Lang = &v
	return s
}

func (s *DescribeFotaTasksRequest) SetMaxResults(v int32) *DescribeFotaTasksRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeFotaTasksRequest) SetNextToken(v string) *DescribeFotaTasksRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeFotaTasksRequest) SetRegionId(v string) *DescribeFotaTasksRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFotaTasksRequest) SetTaskUid(v []*string) *DescribeFotaTasksRequest {
	s.TaskUid = v
	return s
}

func (s *DescribeFotaTasksRequest) SetUserStatus(v string) *DescribeFotaTasksRequest {
	s.UserStatus = &v
	return s
}

type DescribeFotaTasksResponseBody struct {
	// The returned message. If the request was successful, a `success` is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Details about the image update task.
	FotaTasks []*DescribeFotaTasksResponseBodyFotaTasks `json:"FotaTasks,omitempty" xml:"FotaTasks,omitempty" type:"Repeated"`
	// The returned error message. This parameter is not returned if the Code value is a `success` message.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFotaTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFotaTasksResponseBody) SetCode(v string) *DescribeFotaTasksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeFotaTasksResponseBody) SetFotaTasks(v []*DescribeFotaTasksResponseBodyFotaTasks) *DescribeFotaTasksResponseBody {
	s.FotaTasks = v
	return s
}

func (s *DescribeFotaTasksResponseBody) SetMessage(v string) *DescribeFotaTasksResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeFotaTasksResponseBody) SetNextToken(v string) *DescribeFotaTasksResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeFotaTasksResponseBody) SetRequestId(v string) *DescribeFotaTasksResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFotaTasksResponseBodyFotaTasks struct {
	// The image version. You can call the [DescribeImages](https://help.aliyun.com/document_detail/188895.html) operation to obtain the value of this parameter.
	//
	// example:
	//
	// 0.0.1-D-20220513.143129
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// >  This parameter is not publicly available.
	//
	// example:
	//
	// To be hidden.
	FotaProject *string `json:"FotaProject,omitempty" xml:"FotaProject,omitempty"`
	// The number of custom images that can be updated to this version.
	//
	// example:
	//
	// 1
	PendingCustomImageCount *int32 `json:"PendingCustomImageCount,omitempty" xml:"PendingCustomImageCount,omitempty"`
	// The number of cloud computers whose images can be updated to this version.
	//
	// example:
	//
	// 1
	PendingDesktopCount *int32 `json:"PendingDesktopCount,omitempty" xml:"PendingDesktopCount,omitempty"`
	// The time when the image version available for update was published.
	//
	// example:
	//
	// 2022-05-31T04:28:48Z
	PublishTime *string `json:"PublishTime,omitempty" xml:"PublishTime,omitempty"`
	// The description of the image version available for update.
	//
	// example:
	//
	// test
	ReleaseNote *string `json:"ReleaseNote,omitempty" xml:"ReleaseNote,omitempty"`
	// The size of the update package. Unit: KB.
	//
	// example:
	//
	// 568533470
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// Indicates whether the image update task is automatically pushed.
	//
	// Valid values:
	//
	// 	- Running: automatically pushes the image update task.
	//
	// 	- Pending: does not automatically push the image update task.
	//
	// example:
	//
	// valid
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The ID of the image upgrade task.
	//
	// example:
	//
	// aot-c4khwrp9ocml4****
	TaskUid *string `json:"TaskUid,omitempty" xml:"TaskUid,omitempty"`
}

func (s DescribeFotaTasksResponseBodyFotaTasks) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaTasksResponseBodyFotaTasks) GoString() string {
	return s.String()
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetAppVersion(v string) *DescribeFotaTasksResponseBodyFotaTasks {
	s.AppVersion = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetFotaProject(v string) *DescribeFotaTasksResponseBodyFotaTasks {
	s.FotaProject = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetPendingCustomImageCount(v int32) *DescribeFotaTasksResponseBodyFotaTasks {
	s.PendingCustomImageCount = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetPendingDesktopCount(v int32) *DescribeFotaTasksResponseBodyFotaTasks {
	s.PendingDesktopCount = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetPublishTime(v string) *DescribeFotaTasksResponseBodyFotaTasks {
	s.PublishTime = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetReleaseNote(v string) *DescribeFotaTasksResponseBodyFotaTasks {
	s.ReleaseNote = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetSize(v int32) *DescribeFotaTasksResponseBodyFotaTasks {
	s.Size = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetStatus(v string) *DescribeFotaTasksResponseBodyFotaTasks {
	s.Status = &v
	return s
}

func (s *DescribeFotaTasksResponseBodyFotaTasks) SetTaskUid(v string) *DescribeFotaTasksResponseBodyFotaTasks {
	s.TaskUid = &v
	return s
}

type DescribeFotaTasksResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFotaTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFotaTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFotaTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeFotaTasksResponse) SetHeaders(v map[string]*string) *DescribeFotaTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeFotaTasksResponse) SetStatusCode(v int32) *DescribeFotaTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFotaTasksResponse) SetBody(v *DescribeFotaTasksResponseBody) *DescribeFotaTasksResponse {
	s.Body = v
	return s
}

type DescribeGuestApplicationsRequest struct {
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-asw3giklqvfqe****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The ID of the end user.
	//
	// This parameter is required.
	//
	// example:
	//
	// demo001
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeGuestApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGuestApplicationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeGuestApplicationsRequest) SetDesktopId(v string) *DescribeGuestApplicationsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeGuestApplicationsRequest) SetEndUserId(v string) *DescribeGuestApplicationsRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeGuestApplicationsRequest) SetRegionId(v string) *DescribeGuestApplicationsRequest {
	s.RegionId = &v
	return s
}

type DescribeGuestApplicationsResponseBody struct {
	// The details of the applications.
	Applications []*DescribeGuestApplicationsResponseBodyApplications `json:"Applications,omitempty" xml:"Applications,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 272CF39E-B5DE-5BE3-A09B-B43F1026****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeGuestApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGuestApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGuestApplicationsResponseBody) SetApplications(v []*DescribeGuestApplicationsResponseBodyApplications) *DescribeGuestApplicationsResponseBody {
	s.Applications = v
	return s
}

func (s *DescribeGuestApplicationsResponseBody) SetRequestId(v string) *DescribeGuestApplicationsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeGuestApplicationsResponseBodyApplications struct {
	// The application name.
	//
	// example:
	//
	// Google Chrome
	ApplicationName *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	// The application version.
	//
	// example:
	//
	// 115.0.5790.110
	ApplicationVersion *string `json:"ApplicationVersion,omitempty" xml:"ApplicationVersion,omitempty"`
	// The CPU utilization (%).
	//
	// example:
	//
	// 89
	CpuPercent *float64 `json:"CpuPercent,omitempty" xml:"CpuPercent,omitempty"`
	// The GPU utilization (%).
	//
	// example:
	//
	// 15
	GpuPercent *float64 `json:"GpuPercent,omitempty" xml:"GpuPercent,omitempty"`
	// The icon URL of the application.
	//
	// example:
	//
	// https://app-center-icon-prod-shanghai.oss-cn-shanghai.aliyuncs.com/market/preload/default****.png
	IconUrl *string `json:"IconUrl,omitempty" xml:"IconUrl,omitempty"`
	// The I/O read and write performance.
	//
	// example:
	//
	// 124906.0
	IoSpeed *float64 `json:"IoSpeed,omitempty" xml:"IoSpeed,omitempty"`
	// The memory utilization (%).
	//
	// example:
	//
	// 34
	MemPercent *float64 `json:"MemPercent,omitempty" xml:"MemPercent,omitempty"`
	// The process ID (PID).
	//
	// example:
	//
	// 1357
	Pid *int32 `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The process information.
	ProcessData []*DescribeGuestApplicationsResponseBodyApplicationsProcessData `json:"ProcessData,omitempty" xml:"ProcessData,omitempty" type:"Repeated"`
	// The path to the process.
	//
	// example:
	//
	// C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\ch****.exe
	ProcessPath *string `json:"ProcessPath,omitempty" xml:"ProcessPath,omitempty"`
	// The application status.
	//
	// example:
	//
	// Running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeGuestApplicationsResponseBodyApplications) String() string {
	return tea.Prettify(s)
}

func (s DescribeGuestApplicationsResponseBodyApplications) GoString() string {
	return s.String()
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetApplicationName(v string) *DescribeGuestApplicationsResponseBodyApplications {
	s.ApplicationName = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetApplicationVersion(v string) *DescribeGuestApplicationsResponseBodyApplications {
	s.ApplicationVersion = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetCpuPercent(v float64) *DescribeGuestApplicationsResponseBodyApplications {
	s.CpuPercent = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetGpuPercent(v float64) *DescribeGuestApplicationsResponseBodyApplications {
	s.GpuPercent = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetIconUrl(v string) *DescribeGuestApplicationsResponseBodyApplications {
	s.IconUrl = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetIoSpeed(v float64) *DescribeGuestApplicationsResponseBodyApplications {
	s.IoSpeed = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetMemPercent(v float64) *DescribeGuestApplicationsResponseBodyApplications {
	s.MemPercent = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetPid(v int32) *DescribeGuestApplicationsResponseBodyApplications {
	s.Pid = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetProcessData(v []*DescribeGuestApplicationsResponseBodyApplicationsProcessData) *DescribeGuestApplicationsResponseBodyApplications {
	s.ProcessData = v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetProcessPath(v string) *DescribeGuestApplicationsResponseBodyApplications {
	s.ProcessPath = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplications) SetStatus(v string) *DescribeGuestApplicationsResponseBodyApplications {
	s.Status = &v
	return s
}

type DescribeGuestApplicationsResponseBodyApplicationsProcessData struct {
	// The application name.
	//
	// example:
	//
	// Google Chrome
	ApplicationName *string `json:"ApplicationName,omitempty" xml:"ApplicationName,omitempty"`
	// The application version.
	//
	// example:
	//
	// 115.0.5790.110
	ApplicationVersion *string `json:"ApplicationVersion,omitempty" xml:"ApplicationVersion,omitempty"`
	// The CPU utilization (%).
	//
	// example:
	//
	// 89
	CpuPercent *float64 `json:"CpuPercent,omitempty" xml:"CpuPercent,omitempty"`
	// The GPU utilization (%).
	//
	// example:
	//
	// 15
	GpuPercent *float64 `json:"GpuPercent,omitempty" xml:"GpuPercent,omitempty"`
	// The I/O read and write performance.
	//
	// example:
	//
	// 124906.0
	Iospeed *float64 `json:"Iospeed,omitempty" xml:"Iospeed,omitempty"`
	// The memory utilization (%).
	//
	// example:
	//
	// 34
	MemPercent *float64 `json:"MemPercent,omitempty" xml:"MemPercent,omitempty"`
	// The PID.
	//
	// example:
	//
	// 1357
	Pid *int32 `json:"Pid,omitempty" xml:"Pid,omitempty"`
	// The path to the process.
	//
	// example:
	//
	// C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\ch****.exe
	ProcessPath *string `json:"ProcessPath,omitempty" xml:"ProcessPath,omitempty"`
}

func (s DescribeGuestApplicationsResponseBodyApplicationsProcessData) String() string {
	return tea.Prettify(s)
}

func (s DescribeGuestApplicationsResponseBodyApplicationsProcessData) GoString() string {
	return s.String()
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetApplicationName(v string) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.ApplicationName = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetApplicationVersion(v string) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.ApplicationVersion = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetCpuPercent(v float64) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.CpuPercent = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetGpuPercent(v float64) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.GpuPercent = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetIospeed(v float64) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.Iospeed = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetMemPercent(v float64) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.MemPercent = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetPid(v int32) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.Pid = &v
	return s
}

func (s *DescribeGuestApplicationsResponseBodyApplicationsProcessData) SetProcessPath(v string) *DescribeGuestApplicationsResponseBodyApplicationsProcessData {
	s.ProcessPath = &v
	return s
}

type DescribeGuestApplicationsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGuestApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGuestApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGuestApplicationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeGuestApplicationsResponse) SetHeaders(v map[string]*string) *DescribeGuestApplicationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeGuestApplicationsResponse) SetStatusCode(v int32) *DescribeGuestApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGuestApplicationsResponse) SetBody(v *DescribeGuestApplicationsResponseBody) *DescribeGuestApplicationsResponse {
	s.Body = v
	return s
}

type DescribeImageModifiedRecordsRequest struct {
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-bd53sfmysz8ir****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The maximum number of entries to return on each page.
	//
	// 	- Maximum value: 100.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6l3d+SWeOobbIlDLjwhjkTk
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeImageModifiedRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageModifiedRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeImageModifiedRecordsRequest) SetDesktopId(v string) *DescribeImageModifiedRecordsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeImageModifiedRecordsRequest) SetMaxResults(v int32) *DescribeImageModifiedRecordsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeImageModifiedRecordsRequest) SetNextToken(v string) *DescribeImageModifiedRecordsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeImageModifiedRecordsRequest) SetRegionId(v string) *DescribeImageModifiedRecordsRequest {
	s.RegionId = &v
	return s
}

type DescribeImageModifiedRecordsResponseBody struct {
	// Details about the image modification record.
	ImageModifiedRecords []*DescribeImageModifiedRecordsResponseBodyImageModifiedRecords `json:"ImageModifiedRecords,omitempty" xml:"ImageModifiedRecords,omitempty" type:"Repeated"`
	// If the NextToken parameter is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6koN7RqHg3d2z8LKmSoe821
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// DC40EE61-7E83-59ED-AEA6-7EE9C437F352
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of image modification records.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeImageModifiedRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageModifiedRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImageModifiedRecordsResponseBody) SetImageModifiedRecords(v []*DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) *DescribeImageModifiedRecordsResponseBody {
	s.ImageModifiedRecords = v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBody) SetNextToken(v string) *DescribeImageModifiedRecordsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBody) SetRequestId(v string) *DescribeImageModifiedRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBody) SetTotalCount(v int32) *DescribeImageModifiedRecordsResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeImageModifiedRecordsResponseBodyImageModifiedRecords struct {
	// The ID of the original image.
	//
	// example:
	//
	// m-8rnz2imrpcfuh****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the original image.
	//
	// example:
	//
	// win10-0307
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The ID of the new image after the image was modified.
	//
	// example:
	//
	// xxxNewImageID
	NewImageId *string `json:"NewImageId,omitempty" xml:"NewImageId,omitempty"`
	// The name of the new image after the image was modified.
	//
	// example:
	//
	// xxxxImageID
	NewImageName *string `json:"NewImageName,omitempty" xml:"NewImageName,omitempty"`
	// The status of the image modification.
	//
	// Valid values:
	//
	// 	- 0: The image is being modified.
	//
	// 	- 1: The image is successfully modified.
	//
	// 	- 2: The image fails to be modified.
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The time when the image was last modified.
	//
	// example:
	//
	// 2022-03-03T02:43:44.851Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) GoString() string {
	return s.String()
}

func (s *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) SetImageId(v string) *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords {
	s.ImageId = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) SetImageName(v string) *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords {
	s.ImageName = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) SetNewImageId(v string) *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords {
	s.NewImageId = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) SetNewImageName(v string) *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords {
	s.NewImageName = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) SetStatus(v int32) *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords {
	s.Status = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords) SetUpdateTime(v string) *DescribeImageModifiedRecordsResponseBodyImageModifiedRecords {
	s.UpdateTime = &v
	return s
}

type DescribeImageModifiedRecordsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeImageModifiedRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeImageModifiedRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImageModifiedRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeImageModifiedRecordsResponse) SetHeaders(v map[string]*string) *DescribeImageModifiedRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeImageModifiedRecordsResponse) SetStatusCode(v int32) *DescribeImageModifiedRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImageModifiedRecordsResponse) SetBody(v *DescribeImageModifiedRecordsResponseBody) *DescribeImageModifiedRecordsResponse {
	s.Body = v
	return s
}

type DescribeImagePermissionRequest struct {
	// The image ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-4zfb6zj728hhr****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeImagePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagePermissionRequest) GoString() string {
	return s.String()
}

func (s *DescribeImagePermissionRequest) SetImageId(v string) *DescribeImagePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *DescribeImagePermissionRequest) SetRegionId(v string) *DescribeImagePermissionRequest {
	s.RegionId = &v
	return s
}

type DescribeImagePermissionResponseBody struct {
	// The IDs of the Alibaba Cloud accounts with which the image is shared.
	AliUids []*string `json:"AliUids,omitempty" xml:"AliUids,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImagePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImagePermissionResponseBody) SetAliUids(v []*string) *DescribeImagePermissionResponseBody {
	s.AliUids = v
	return s
}

func (s *DescribeImagePermissionResponseBody) SetRequestId(v string) *DescribeImagePermissionResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImagePermissionResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeImagePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeImagePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagePermissionResponse) GoString() string {
	return s.String()
}

func (s *DescribeImagePermissionResponse) SetHeaders(v map[string]*string) *DescribeImagePermissionResponse {
	s.Headers = v
	return s
}

func (s *DescribeImagePermissionResponse) SetStatusCode(v int32) *DescribeImagePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImagePermissionResponse) SetBody(v *DescribeImagePermissionResponseBody) *DescribeImagePermissionResponse {
	s.Body = v
	return s
}

type DescribeImagesRequest struct {
	// The instance type of the cloud computer. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/436816.html) operation to obtain the parameter value.
	//
	// example:
	//
	// ecd.graphics.xlarge
	DesktopInstanceType *string `json:"DesktopInstanceType,omitempty" xml:"DesktopInstanceType,omitempty"`
	// The image version.
	//
	// example:
	//
	// 0.0.3-R-20220616.133609
	FotaVersion *string `json:"FotaVersion,omitempty" xml:"FotaVersion,omitempty"`
	// Specifies whether the images are GPU-accelerated images.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	GpuCategory *bool `json:"GpuCategory,omitempty" xml:"GpuCategory,omitempty"`
	// The version of the GPU driver.
	//
	// example:
	//
	// 417.22
	GpuDriverVersion *string `json:"GpuDriverVersion,omitempty" xml:"GpuDriverVersion,omitempty"`
	// The IDs of the images. You can specify one or more image IDs.
	//
	// example:
	//
	// m-gx2x1dhsmusr2****
	ImageId []*string `json:"ImageId,omitempty" xml:"ImageId,omitempty" type:"Repeated"`
	// The image name.
	//
	// example:
	//
	// Win_01
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The state of the image.
	//
	// example:
	//
	// Available
	ImageStatus *string `json:"ImageStatus,omitempty" xml:"ImageStatus,omitempty"`
	// The type of the image.
	//
	// example:
	//
	// SYSTEM
	ImageType *string `json:"ImageType,omitempty" xml:"ImageType,omitempty"`
	// The language of the OS.
	//
	// example:
	//
	// en-US
	LanguageType *string `json:"LanguageType,omitempty" xml:"LanguageType,omitempty"`
	// The maximum number of entries to return on each page.
	//
	// 	- Maximum value: 100.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If you do not specify this parameter, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The type of the operating system of the images. Default value: `null`.
	//
	// Valid values:
	//
	// 	- Linux
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX: High-definition Experience (HDX) protocol
	//
	// 	- ASP: in-house Adaptive Streaming Protocol (ASP) (recommended)
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The session type.
	//
	// example:
	//
	// SINGLE_SESSION
	SessionType *string `json:"SessionType,omitempty" xml:"SessionType,omitempty"`
}

func (s DescribeImagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeImagesRequest) SetDesktopInstanceType(v string) *DescribeImagesRequest {
	s.DesktopInstanceType = &v
	return s
}

func (s *DescribeImagesRequest) SetFotaVersion(v string) *DescribeImagesRequest {
	s.FotaVersion = &v
	return s
}

func (s *DescribeImagesRequest) SetGpuCategory(v bool) *DescribeImagesRequest {
	s.GpuCategory = &v
	return s
}

func (s *DescribeImagesRequest) SetGpuDriverVersion(v string) *DescribeImagesRequest {
	s.GpuDriverVersion = &v
	return s
}

func (s *DescribeImagesRequest) SetImageId(v []*string) *DescribeImagesRequest {
	s.ImageId = v
	return s
}

func (s *DescribeImagesRequest) SetImageName(v string) *DescribeImagesRequest {
	s.ImageName = &v
	return s
}

func (s *DescribeImagesRequest) SetImageStatus(v string) *DescribeImagesRequest {
	s.ImageStatus = &v
	return s
}

func (s *DescribeImagesRequest) SetImageType(v string) *DescribeImagesRequest {
	s.ImageType = &v
	return s
}

func (s *DescribeImagesRequest) SetLanguageType(v string) *DescribeImagesRequest {
	s.LanguageType = &v
	return s
}

func (s *DescribeImagesRequest) SetMaxResults(v int32) *DescribeImagesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeImagesRequest) SetNextToken(v string) *DescribeImagesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeImagesRequest) SetOsType(v string) *DescribeImagesRequest {
	s.OsType = &v
	return s
}

func (s *DescribeImagesRequest) SetProtocolType(v string) *DescribeImagesRequest {
	s.ProtocolType = &v
	return s
}

func (s *DescribeImagesRequest) SetRegionId(v string) *DescribeImagesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeImagesRequest) SetSessionType(v string) *DescribeImagesRequest {
	s.SessionType = &v
	return s
}

type DescribeImagesResponseBody struct {
	// The details of the images.
	Images []*DescribeImagesResponseBodyImages `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	// The token that determines the start point of the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeImagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBody) SetImages(v []*DescribeImagesResponseBodyImages) *DescribeImagesResponseBody {
	s.Images = v
	return s
}

func (s *DescribeImagesResponseBody) SetNextToken(v string) *DescribeImagesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeImagesResponseBody) SetRequestId(v string) *DescribeImagesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeImagesResponseBodyImages struct {
	// The version of the image.
	//
	// example:
	//
	// 1.0.0
	AppVersion *string `json:"AppVersion,omitempty" xml:"AppVersion,omitempty"`
	// The time when the image was created.
	//
	// example:
	//
	// 2018-01-10T01:01:10Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The size of the data disk. Unit: GiB.
	//
	// example:
	//
	// 150
	DataDiskSize *int32 `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The description of the image.
	//
	// example:
	//
	// This is description.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Indicates whether the image is a GPU-accelerated image.
	//
	// example:
	//
	// false
	GpuCategory *bool `json:"GpuCategory,omitempty" xml:"GpuCategory,omitempty"`
	// The version number of the GPU driver.
	//
	// example:
	//
	// 417.22
	GpuDriverVersion *string `json:"GpuDriverVersion,omitempty" xml:"GpuDriverVersion,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-gx2x1dhsmusr2****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The type of the image.
	//
	// Valid values:
	//
	// 	- SYSTEM
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CUSTOM
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	ImageType *string `json:"ImageType,omitempty" xml:"ImageType,omitempty"`
	// The name of the image.
	//
	// example:
	//
	// testImageName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the operating system.
	//
	// example:
	//
	// WINDOWS
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The operating system type of the image.
	//
	// Valid values:
	//
	// 	- Ubuntu
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows Server 2022
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- UOS
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CentOS
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows Server 2019
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- SQL Server 2016
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows 10
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows Server 2019
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// The creation progress of the image. Unit: %.
	//
	// example:
	//
	// 100%
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX: High-definition Experience (HDX) protocol
	//
	// 	- ASP: in-house Adaptive Streaming Protocol (ASP) (recommended)
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The type of the image session.
	//
	// Valid values:
	//
	// 	- SINGLE_SESSION: single-session image.
	//
	// 	- MULTIPLE_SESSION: multi-session image.
	//
	// example:
	//
	// MULTIPLE_SESSION
	SessionType *string `json:"SessionType,omitempty" xml:"SessionType,omitempty"`
	// The number of shared images.
	//
	// example:
	//
	// 1
	SharedCount *int32 `json:"SharedCount,omitempty" xml:"SharedCount,omitempty"`
	// The size of the image. Unit: GiB.
	//
	// example:
	//
	// 40
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The status of the image.
	//
	// Valid values:
	//
	// 	- Creating
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Available
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CreateFailed
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The languages of the operating system.
	SupportedLanguages []*string `json:"SupportedLanguages,omitempty" xml:"SupportedLanguages,omitempty" type:"Repeated"`
	// The time when the image was last modified.
	//
	// example:
	//
	// 2021-12-22T02:48:43Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// Indicates whether disk encryption is enabled.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
}

func (s DescribeImagesResponseBodyImages) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponseBodyImages) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponseBodyImages) SetAppVersion(v string) *DescribeImagesResponseBodyImages {
	s.AppVersion = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetCreationTime(v string) *DescribeImagesResponseBodyImages {
	s.CreationTime = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetDataDiskSize(v int32) *DescribeImagesResponseBodyImages {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetDescription(v string) *DescribeImagesResponseBodyImages {
	s.Description = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetGpuCategory(v bool) *DescribeImagesResponseBodyImages {
	s.GpuCategory = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetGpuDriverVersion(v string) *DescribeImagesResponseBodyImages {
	s.GpuDriverVersion = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetImageId(v string) *DescribeImagesResponseBodyImages {
	s.ImageId = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetImageType(v string) *DescribeImagesResponseBodyImages {
	s.ImageType = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetName(v string) *DescribeImagesResponseBodyImages {
	s.Name = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetOsType(v string) *DescribeImagesResponseBodyImages {
	s.OsType = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetPlatform(v string) *DescribeImagesResponseBodyImages {
	s.Platform = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetProgress(v string) *DescribeImagesResponseBodyImages {
	s.Progress = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetProtocolType(v string) *DescribeImagesResponseBodyImages {
	s.ProtocolType = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetSessionType(v string) *DescribeImagesResponseBodyImages {
	s.SessionType = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetSharedCount(v int32) *DescribeImagesResponseBodyImages {
	s.SharedCount = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetSize(v int32) *DescribeImagesResponseBodyImages {
	s.Size = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetStatus(v string) *DescribeImagesResponseBodyImages {
	s.Status = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetSupportedLanguages(v []*string) *DescribeImagesResponseBodyImages {
	s.SupportedLanguages = v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetUpdateTime(v string) *DescribeImagesResponseBodyImages {
	s.UpdateTime = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetVolumeEncryptionEnabled(v bool) *DescribeImagesResponseBodyImages {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *DescribeImagesResponseBodyImages) SetVolumeEncryptionKey(v string) *DescribeImagesResponseBodyImages {
	s.VolumeEncryptionKey = &v
	return s
}

type DescribeImagesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeImagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeImagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeImagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeImagesResponse) SetHeaders(v map[string]*string) *DescribeImagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeImagesResponse) SetStatusCode(v int32) *DescribeImagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeImagesResponse) SetBody(v *DescribeImagesResponseBody) *DescribeImagesResponse {
	s.Body = v
	return s
}

type DescribeInvocationsRequest struct {
	// The type of the command. Valid values:
	//
	// 	- RunBatScript
	//
	// 	- RunPowerShellScript
	//
	// example:
	//
	// RunPowerShellScript
	CommandType *string `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	// The encoding method of the command content and output. Valid values:
	//
	// 	- PlainText
	//
	// 	- Base64
	//
	// Default value: Base64.
	//
	// example:
	//
	// PlainText
	ContentEncoding *string `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	// The ID of the cloud desktop. If you specify a cloud desktop, all the execution records of Cloud Assistant commands on the cloud desktop are queried.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The IDs of the cloud desktops.
	DesktopIds []*string `json:"DesktopIds,omitempty" xml:"DesktopIds,omitempty" type:"Repeated"`
	// The ID of the end user.
	//
	// example:
	//
	// test1
	EndUserId             *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	IncludeInvokeDesktops *bool   `json:"IncludeInvokeDesktops,omitempty" xml:"IncludeInvokeDesktops,omitempty"`
	// Specifies whether to return command outputs in the response. Valid values:
	//
	// 	- true: returns command outputs.
	//
	// 	- false: does not return command outputs.
	//
	// Default value: false.
	//
	// example:
	//
	// false
	IncludeOutput *bool `json:"IncludeOutput,omitempty" xml:"IncludeOutput,omitempty"`
	// The ID of the execution.
	//
	// example:
	//
	// t-hz0jdfwd9f****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The overall execution status of a command. The overall execution status is determined by the execution status of the command on one or more cloud desktops. Valid values:
	//
	// 	- Running: The execution is in progress on one or more cloud desktops.
	//
	// 	- Finished: The execution is finished on all cloud desktops, or the execution is manually stopped on some cloud desktops and the execution is finished on others.
	//
	// 	- Failed: The execution failed on all cloud desktops.
	//
	// 	- PartialFailed: The execution failed on some cloud desktops.
	//
	// 	- Stopped: The execution is stopped.
	//
	// Default value: Running.
	//
	// example:
	//
	// Finished
	InvokeStatus *string `json:"InvokeStatus,omitempty" xml:"InvokeStatus,omitempty"`
	// The number of entries per page.
	//
	// 	- Valid values: 1 to 50.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The query token. Set the value to the NextToken value that is returned from the last call to the previous DescribeInvocations operation.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeInvocationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsRequest) SetCommandType(v string) *DescribeInvocationsRequest {
	s.CommandType = &v
	return s
}

func (s *DescribeInvocationsRequest) SetContentEncoding(v string) *DescribeInvocationsRequest {
	s.ContentEncoding = &v
	return s
}

func (s *DescribeInvocationsRequest) SetDesktopId(v string) *DescribeInvocationsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetDesktopIds(v []*string) *DescribeInvocationsRequest {
	s.DesktopIds = v
	return s
}

func (s *DescribeInvocationsRequest) SetEndUserId(v string) *DescribeInvocationsRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetIncludeInvokeDesktops(v bool) *DescribeInvocationsRequest {
	s.IncludeInvokeDesktops = &v
	return s
}

func (s *DescribeInvocationsRequest) SetIncludeOutput(v bool) *DescribeInvocationsRequest {
	s.IncludeOutput = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInvokeId(v string) *DescribeInvocationsRequest {
	s.InvokeId = &v
	return s
}

func (s *DescribeInvocationsRequest) SetInvokeStatus(v string) *DescribeInvocationsRequest {
	s.InvokeStatus = &v
	return s
}

func (s *DescribeInvocationsRequest) SetMaxResults(v int32) *DescribeInvocationsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeInvocationsRequest) SetNextToken(v string) *DescribeInvocationsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeInvocationsRequest) SetRegionId(v string) *DescribeInvocationsRequest {
	s.RegionId = &v
	return s
}

type DescribeInvocationsResponseBody struct {
	// Details about execution records of the command.
	Invocations []*DescribeInvocationsResponseBodyInvocations `json:"Invocations,omitempty" xml:"Invocations,omitempty" type:"Repeated"`
	// The query token that is returned from this call.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeInvocationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBody) SetInvocations(v []*DescribeInvocationsResponseBodyInvocations) *DescribeInvocationsResponseBody {
	s.Invocations = v
	return s
}

func (s *DescribeInvocationsResponseBody) SetNextToken(v string) *DescribeInvocationsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeInvocationsResponseBody) SetRequestId(v string) *DescribeInvocationsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeInvocationsResponseBodyInvocations struct {
	// The Base64-encoded command content.
	//
	// example:
	//
	// cnBtIC1xYSB8IGdyZXAgdnNm****
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// The type of the command.
	//
	// example:
	//
	// RunPowerShellScript
	CommandType *string `json:"CommandType,omitempty" xml:"CommandType,omitempty"`
	// The time when the execution task is created.
	//
	// example:
	//
	// 2020-12-19T09:15:46Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// User1
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The overall execution status of the command. The overall execution status is determined by the execution status on all involved cloud desktops. The valid values include:
	//
	// 	- Pending: The system is verifying or sending the command. If the execution status on at least one cloud desktop is Pending, the overall execution status is Pending.
	//
	// 	- Running: The execution is in progress on cloud desktops. If the execution status on at least one cloud desktop is Running, the overall execution status is Running.
	//
	// 	- Success: If the execution status on all cloud desktops is Success or Stopped, or the execution status on at least one cloud desktop is Success, the overall execution status is Success.
	//
	// 	- Failed: If the execution status on all cloud desktops is Stopped or Failed, the overall execution status is Failed. If one or more execution status of a cloud desktop is one of the following values, Failed is returned:
	//
	//     	- Invalid: The command is invalid.
	//
	//     	- Aborted: The command fails to be sent.
	//
	//     	- Failed: The command is executed, but the exit code is not 0.
	//
	//     	- Timeout: The command times out.
	//
	//     	- Error: An error occurs in the command.
	//
	// 	- Stopping: The execution is being stopped. If the execution status on at least one cloud desktop is Stopping, the overall execution state is Stopping.
	//
	// 	- Stopped: The execution is stopped. If the execution status on all cloud desktops is Stopped, the overall execution state is Stopped. If the execution status on a cloud desktop is one of the following values, Stopped is returned:
	//
	//     	- Cancelled: The execution is canceled.
	//
	//     	- Terminated: The execution is terminated.
	//
	// 	- PartialFailed: The execution succeeded on some cloud desktops and failed on others. If the execution status on different cloud desktops is Success, Failed, or Stopped, the overall execution state is PartialFailed.
	//
	// example:
	//
	// Pending
	InvocationStatus          *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	InvokeDesktopCount        *int32  `json:"InvokeDesktopCount,omitempty" xml:"InvokeDesktopCount,omitempty"`
	InvokeDesktopSucceedCount *int32  `json:"InvokeDesktopSucceedCount,omitempty" xml:"InvokeDesktopSucceedCount,omitempty"`
	// The cloud desktops on which the command is executed.
	InvokeDesktops []*DescribeInvocationsResponseBodyInvocationsInvokeDesktops `json:"InvokeDesktops,omitempty" xml:"InvokeDesktops,omitempty" type:"Repeated"`
	// The ID of the execution.
	//
	// example:
	//
	// t-hz0jdfwd9f****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
}

func (s DescribeInvocationsResponseBodyInvocations) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseBodyInvocations) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandContent(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandContent = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCommandType(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CommandType = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetCreationTime(v string) *DescribeInvocationsResponseBodyInvocations {
	s.CreationTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetEndUserId(v string) *DescribeInvocationsResponseBodyInvocations {
	s.EndUserId = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvocationStatus(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeDesktopCount(v int32) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeDesktopCount = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeDesktopSucceedCount(v int32) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeDesktopSucceedCount = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeDesktops(v []*DescribeInvocationsResponseBodyInvocationsInvokeDesktops) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeDesktops = v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocations) SetInvokeId(v string) *DescribeInvocationsResponseBodyInvocations {
	s.InvokeId = &v
	return s
}

type DescribeInvocationsResponseBodyInvocationsInvokeDesktops struct {
	// The time when the command execution was performed.
	//
	// example:
	//
	// 2020-12-20T06:15:54Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The ID of the cloud desktop.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud desktop.
	//
	// example:
	//
	// demo1234
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The size of the text that is truncated and discarded when the Output value exceeds 24 KB in size.
	//
	// example:
	//
	// 0
	Dropped *int32 `json:"Dropped,omitempty" xml:"Dropped,omitempty"`
	// The code that indicates the reason why a command failed to be sent or executed. The valid values include:
	//
	// 	- If this parameter is empty, the execution is normal.
	//
	// 	- InstanceNotExists: The specified cloud desktop does not exist or is released.
	//
	// 	- InstanceReleased: The cloud desktop is released during the execution.
	//
	// 	- InstanceNotRunning: The cloud desktop is not running during the execution.
	//
	// 	- CommandNotApplicable: The command cannot be used on the cloud desktop.
	//
	// 	- ClientNotRunning: The Cloud Assistant client is not running.
	//
	// 	- ClientNotResponse: The Cloud Assistant client does not respond.
	//
	// 	- ClientIsUpgrading: The Cloud Assistant client is being upgraded.
	//
	// 	- ClientNeedUpgrade: The Cloud Assistant client needs to be upgraded.
	//
	// 	- DeliveryTimeout: The time to send the command in the request times out.
	//
	// 	- ExecutionTimeout: The execution times out.
	//
	// 	- ExecutionException: An exception occurs during the execution.
	//
	// 	- ExecutionInterrupted: The execution is interrupted.
	//
	// 	- ExitCodeNonzero: The execution finishes, but the exit code is not 0.
	//
	// example:
	//
	// InstanceNotExists
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// Details about the reason why the command failed to be sent or executed. The valid values include:
	//
	// 	- If this parameter is empty, the execution is normal.
	//
	// 	- the specified instance does not exists: The cloud desktop does not exist or is released.
	//
	// 	- the instance has released when create task: The cloud desktop is released during execution.
	//
	// 	- the instance is not running when create task: The cloud desktop is not running when the execution is being performed.
	//
	// 	- the command is not applicable: The command cannot be used on the specified cloud desktop.
	//
	// 	- the aliyun service is not running on the instance: The Cloud Assistance client is not running.
	//
	// 	- the aliyun service in the instance does not response: The Cloud Assistant client is not responding.
	//
	// 	- the aliyun service in the instance is upgrading now: The Cloud Assistant client is being upgraded.
	//
	// 	- the aliyun service in the instance need upgrade: The Cloud Assistant client needs to be upgraded.
	//
	// 	- the command delivery has been timeout: The command that is sent in the request times out.
	//
	// 	- the command execution has been timeout: The execution times out.
	//
	// 	- the command execution got an exception: An exception occurs when the command is running.
	//
	// 	- the command execution has been interrupted: The execution is interrupted.
	//
	// 	- the command execution exit code is not zero: The execution finishes, but the exit code is not 0.
	//
	// example:
	//
	// The specified instance does not exist.
	ErrorInfo *string `json:"ErrorInfo,omitempty" xml:"ErrorInfo,omitempty"`
	// The exit code of the execution.
	//
	// example:
	//
	// 0
	ExitCode *int64 `json:"ExitCode,omitempty" xml:"ExitCode,omitempty"`
	// The time when the command execution ended.
	//
	// example:
	//
	// 2020-12-20T06:15:56Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// The execution status on the cloud desktop.
	//
	// example:
	//
	// Success
	InvocationStatus *string `json:"InvocationStatus,omitempty" xml:"InvocationStatus,omitempty"`
	// The command output.
	//
	// 	- If the IncludeOutput parameter is set to false, Output is not returned.
	//
	// 	- If the ContentEncoding parameter is set to Base64, the value of Output is the output information that is encoded in Base64.
	//
	// example:
	//
	// OutPutTestmsg
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// The number of times that the command is executed on the cloud desktop.
	//
	// example:
	//
	// 0
	Repeats *int32 `json:"Repeats,omitempty" xml:"Repeats,omitempty"`
	// The start time of the execution on the cloud desktop.
	//
	// example:
	//
	// 2020-12-20T06:15:55Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The time when you called the [StopInvocation](~~196957#doc-api-ecd-StopInvocation~~ "You can call this operation to stop a Cloud Assistant command that is running on one or cloud desktops.") operation to manually stop the command.
	//
	// example:
	//
	// 2020-12-25T09:15:47Z
	StopTime *string `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	// The time when the execution status was updated.
	//
	// example:
	//
	// 2020-12-25T06:15:56Z
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeInvocationsResponseBodyInvocationsInvokeDesktops) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponseBodyInvocationsInvokeDesktops) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetCreationTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.CreationTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetDesktopId(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.DesktopId = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetDesktopName(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.DesktopName = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetDropped(v int32) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.Dropped = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetErrorCode(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetErrorInfo(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.ErrorInfo = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetExitCode(v int64) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.ExitCode = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetFinishTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.FinishTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetInvocationStatus(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.InvocationStatus = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetOutput(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.Output = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetRepeats(v int32) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.Repeats = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetStartTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.StartTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetStopTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.StopTime = &v
	return s
}

func (s *DescribeInvocationsResponseBodyInvocationsInvokeDesktops) SetUpdateTime(v string) *DescribeInvocationsResponseBodyInvocationsInvokeDesktops {
	s.UpdateTime = &v
	return s
}

type DescribeInvocationsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInvocationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInvocationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvocationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvocationsResponse) SetHeaders(v map[string]*string) *DescribeInvocationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvocationsResponse) SetStatusCode(v int32) *DescribeInvocationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInvocationsResponse) SetBody(v *DescribeInvocationsResponseBody) *DescribeInvocationsResponse {
	s.Body = v
	return s
}

type DescribeKmsKeysRequest struct {
	// The ID of the region. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeKmsKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeKmsKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeKmsKeysRequest) SetRegionId(v string) *DescribeKmsKeysRequest {
	s.RegionId = &v
	return s
}

type DescribeKmsKeysResponseBody struct {
	// The authorization status.
	//
	// example:
	//
	// authorized
	AuthorizeStatus *string `json:"AuthorizeStatus,omitempty" xml:"AuthorizeStatus,omitempty"`
	// Details about the customer master keys (CMKs).
	Keys []*DescribeKmsKeysResponseBodyKeys `json:"Keys,omitempty" xml:"Keys,omitempty" type:"Repeated"`
	// Indicates whether KMS is activated.
	//
	// example:
	//
	// enabled
	KmsServiceStatus *string `json:"KmsServiceStatus,omitempty" xml:"KmsServiceStatus,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeKmsKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeKmsKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeKmsKeysResponseBody) SetAuthorizeStatus(v string) *DescribeKmsKeysResponseBody {
	s.AuthorizeStatus = &v
	return s
}

func (s *DescribeKmsKeysResponseBody) SetKeys(v []*DescribeKmsKeysResponseBodyKeys) *DescribeKmsKeysResponseBody {
	s.Keys = v
	return s
}

func (s *DescribeKmsKeysResponseBody) SetKmsServiceStatus(v string) *DescribeKmsKeysResponseBody {
	s.KmsServiceStatus = &v
	return s
}

func (s *DescribeKmsKeysResponseBody) SetRequestId(v string) *DescribeKmsKeysResponseBody {
	s.RequestId = &v
	return s
}

type DescribeKmsKeysResponseBodyKeys struct {
	// The alias of the key.
	//
	// example:
	//
	// TestAlias
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	// The Alibaba Cloud Resource Name (ARN) of the key in KMS.
	//
	// example:
	//
	// acs:kms:cn-hangzhou:154035569884****:key/05754286-3ba2-4fa6-8d41-4323aca6****
	Arn *string `json:"Arn,omitempty" xml:"Arn,omitempty"`
	// The ID of the key.
	//
	// example:
	//
	// 05754286-3ba2-4fa6-8d41-4323aca6****
	KeyId *string `json:"KeyId,omitempty" xml:"KeyId,omitempty"`
	// The type of the key.
	//
	// example:
	//
	// ServiceKey
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeKmsKeysResponseBodyKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeKmsKeysResponseBodyKeys) GoString() string {
	return s.String()
}

func (s *DescribeKmsKeysResponseBodyKeys) SetAlias(v string) *DescribeKmsKeysResponseBodyKeys {
	s.Alias = &v
	return s
}

func (s *DescribeKmsKeysResponseBodyKeys) SetArn(v string) *DescribeKmsKeysResponseBodyKeys {
	s.Arn = &v
	return s
}

func (s *DescribeKmsKeysResponseBodyKeys) SetKeyId(v string) *DescribeKmsKeysResponseBodyKeys {
	s.KeyId = &v
	return s
}

func (s *DescribeKmsKeysResponseBodyKeys) SetType(v string) *DescribeKmsKeysResponseBodyKeys {
	s.Type = &v
	return s
}

type DescribeKmsKeysResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeKmsKeysResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeKmsKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeKmsKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeKmsKeysResponse) SetHeaders(v map[string]*string) *DescribeKmsKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeKmsKeysResponse) SetStatusCode(v int32) *DescribeKmsKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeKmsKeysResponse) SetBody(v *DescribeKmsKeysResponseBody) *DescribeKmsKeysResponse {
	s.Body = v
	return s
}

type DescribeModificationPriceRequest struct {
	// example:
	//
	// 20
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// example:
	//
	// ecd-0gfv2z3sf95zvt****
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// example:
	//
	// eds.enterprise_office.8c16g
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// Desktop
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// example:
	//
	// 80
	RootDiskSizeGib *int32 `json:"RootDiskSizeGib,omitempty" xml:"RootDiskSizeGib,omitempty"`
	// example:
	//
	// 50
	UserDiskSizeGib *int32 `json:"UserDiskSizeGib,omitempty" xml:"UserDiskSizeGib,omitempty"`
}

func (s DescribeModificationPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeModificationPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeModificationPriceRequest) SetBandwidth(v int32) *DescribeModificationPriceRequest {
	s.Bandwidth = &v
	return s
}

func (s *DescribeModificationPriceRequest) SetInstanceId(v string) *DescribeModificationPriceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeModificationPriceRequest) SetInstanceType(v string) *DescribeModificationPriceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribeModificationPriceRequest) SetRegionId(v string) *DescribeModificationPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeModificationPriceRequest) SetResourceType(v string) *DescribeModificationPriceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribeModificationPriceRequest) SetRootDiskSizeGib(v int32) *DescribeModificationPriceRequest {
	s.RootDiskSizeGib = &v
	return s
}

func (s *DescribeModificationPriceRequest) SetUserDiskSizeGib(v int32) *DescribeModificationPriceRequest {
	s.UserDiskSizeGib = &v
	return s
}

type DescribeModificationPriceResponseBody struct {
	PriceInfo *DescribeModificationPriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	// example:
	//
	// 48174475-5EB2-5F99-A9E9-6F892D645****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeModificationPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeModificationPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeModificationPriceResponseBody) SetPriceInfo(v *DescribeModificationPriceResponseBodyPriceInfo) *DescribeModificationPriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribeModificationPriceResponseBody) SetRequestId(v string) *DescribeModificationPriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeModificationPriceResponseBodyPriceInfo struct {
	Price *DescribeModificationPriceResponseBodyPriceInfoPrice   `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
	Rules []*DescribeModificationPriceResponseBodyPriceInfoRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeModificationPriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeModificationPriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeModificationPriceResponseBodyPriceInfo) SetPrice(v *DescribeModificationPriceResponseBodyPriceInfoPrice) *DescribeModificationPriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfo) SetRules(v []*DescribeModificationPriceResponseBodyPriceInfoRules) *DescribeModificationPriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribeModificationPriceResponseBodyPriceInfoPrice struct {
	// example:
	//
	// CNY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// example:
	//
	// 15.8
	DiscountPrice *float32           `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OrderLines    map[string]*string `json:"OrderLines,omitempty" xml:"OrderLines,omitempty"`
	// example:
	//
	// 79.0
	OriginalPrice *float32                                                         `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	Promotions    []*DescribeModificationPriceResponseBodyPriceInfoPricePromotions `json:"Promotions,omitempty" xml:"Promotions,omitempty" type:"Repeated"`
	// example:
	//
	// 63.2
	TradePrice *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribeModificationPriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeModificationPriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribeModificationPriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribeModificationPriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPrice) SetOrderLines(v map[string]*string) *DescribeModificationPriceResponseBodyPriceInfoPrice {
	s.OrderLines = v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribeModificationPriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPrice) SetPromotions(v []*DescribeModificationPriceResponseBodyPriceInfoPricePromotions) *DescribeModificationPriceResponseBodyPriceInfoPrice {
	s.Promotions = v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribeModificationPriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

type DescribeModificationPriceResponseBodyPriceInfoPricePromotions struct {
	// example:
	//
	// test
	OptionCode    *string `json:"OptionCode,omitempty" xml:"OptionCode,omitempty"`
	PromotionDesc *string `json:"PromotionDesc,omitempty" xml:"PromotionDesc,omitempty"`
	// example:
	//
	// promo_option
	PromotionId   *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	PromotionName *string `json:"PromotionName,omitempty" xml:"PromotionName,omitempty"`
	// example:
	//
	// false
	Selected *bool `json:"Selected,omitempty" xml:"Selected,omitempty"`
}

func (s DescribeModificationPriceResponseBodyPriceInfoPricePromotions) String() string {
	return tea.Prettify(s)
}

func (s DescribeModificationPriceResponseBodyPriceInfoPricePromotions) GoString() string {
	return s.String()
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPricePromotions) SetOptionCode(v string) *DescribeModificationPriceResponseBodyPriceInfoPricePromotions {
	s.OptionCode = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPricePromotions) SetPromotionDesc(v string) *DescribeModificationPriceResponseBodyPriceInfoPricePromotions {
	s.PromotionDesc = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPricePromotions) SetPromotionId(v string) *DescribeModificationPriceResponseBodyPriceInfoPricePromotions {
	s.PromotionId = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPricePromotions) SetPromotionName(v string) *DescribeModificationPriceResponseBodyPriceInfoPricePromotions {
	s.PromotionName = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoPricePromotions) SetSelected(v bool) *DescribeModificationPriceResponseBodyPriceInfoPricePromotions {
	s.Selected = &v
	return s
}

type DescribeModificationPriceResponseBodyPriceInfoRules struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 14806
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeModificationPriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeModificationPriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribeModificationPriceResponseBodyPriceInfoRules) SetDescription(v string) *DescribeModificationPriceResponseBodyPriceInfoRules {
	s.Description = &v
	return s
}

func (s *DescribeModificationPriceResponseBodyPriceInfoRules) SetRuleId(v int64) *DescribeModificationPriceResponseBodyPriceInfoRules {
	s.RuleId = &v
	return s
}

type DescribeModificationPriceResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeModificationPriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeModificationPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeModificationPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeModificationPriceResponse) SetHeaders(v map[string]*string) *DescribeModificationPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeModificationPriceResponse) SetStatusCode(v int32) *DescribeModificationPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeModificationPriceResponse) SetBody(v *DescribeModificationPriceResponseBody) *DescribeModificationPriceResponse {
	s.Body = v
	return s
}

type DescribeNASFileSystemsRequest struct {
	// The IDs of the NAS file system.
	//
	// example:
	//
	// 04f314****
	FileSystemId []*string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty" type:"Repeated"`
	// Specifies whether to filter NAS file systems that only support the user profile management (UPM) feature.
	//
	// example:
	//
	// false
	MatchCompatibleProfile *bool `json:"MatchCompatibleProfile,omitempty" xml:"MatchCompatibleProfile,omitempty"`
	// The number of entries to return on each page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeNASFileSystemsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNASFileSystemsRequest) GoString() string {
	return s.String()
}

func (s *DescribeNASFileSystemsRequest) SetFileSystemId(v []*string) *DescribeNASFileSystemsRequest {
	s.FileSystemId = v
	return s
}

func (s *DescribeNASFileSystemsRequest) SetMatchCompatibleProfile(v bool) *DescribeNASFileSystemsRequest {
	s.MatchCompatibleProfile = &v
	return s
}

func (s *DescribeNASFileSystemsRequest) SetMaxResults(v int32) *DescribeNASFileSystemsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeNASFileSystemsRequest) SetNextToken(v string) *DescribeNASFileSystemsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeNASFileSystemsRequest) SetOfficeSiteId(v string) *DescribeNASFileSystemsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeNASFileSystemsRequest) SetRegionId(v string) *DescribeNASFileSystemsRequest {
	s.RegionId = &v
	return s
}

type DescribeNASFileSystemsResponseBody struct {
	// Details about the NAS file systems.
	FileSystems []*DescribeNASFileSystemsResponseBodyFileSystems `json:"FileSystems,omitempty" xml:"FileSystems,omitempty" type:"Repeated"`
	// The token that determines the start point of the next query. This parameter is empty if no additional results exist.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 269BDB16-2CD8-4865-84BD-11C40BC21DB0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNASFileSystemsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNASFileSystemsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNASFileSystemsResponseBody) SetFileSystems(v []*DescribeNASFileSystemsResponseBodyFileSystems) *DescribeNASFileSystemsResponseBody {
	s.FileSystems = v
	return s
}

func (s *DescribeNASFileSystemsResponseBody) SetNextToken(v string) *DescribeNASFileSystemsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBody) SetRequestId(v string) *DescribeNASFileSystemsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNASFileSystemsResponseBodyFileSystems struct {
	// The total capacity of the NAS file system. Unit: GiB.
	//
	// 	- The Capacity type has 10 PiB of storage, which is equal to 10,485,760 GiB.
	//
	// 	- The Performance type has 1 PiB of storage, which is equal to 1,048,576 GiB.
	//
	// example:
	//
	// 10485760
	Capacity *int64 `json:"Capacity,omitempty" xml:"Capacity,omitempty"`
	// The time when the NAS file system was created.
	//
	// example:
	//
	// 2021-05-10T11:39Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The description of the NAS file system.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The desktop groups that are associated with the NAS file systems that support the UPM feature.
	DesktopGroups []*DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups `json:"DesktopGroups,omitempty" xml:"DesktopGroups,omitempty" type:"Repeated"`
	// Indicates whether disk encryption is enabled.
	//
	// example:
	//
	// false
	EncryptionEnabled *bool `json:"EncryptionEnabled,omitempty" xml:"EncryptionEnabled,omitempty"`
	// The ID of the NAS file system.
	//
	// example:
	//
	// 04f314****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The name of the NAS file system.
	//
	// example:
	//
	// testNAS
	FileSystemName *string `json:"FileSystemName,omitempty" xml:"FileSystemName,omitempty"`
	// The status of the NAS file system. The possible values include:
	//
	// 	- Pending: The NAS file system is being created.
	//
	// 	- Running: The NAS file system is running.
	//
	// 	- Stopped: The NAS file system is stopped.
	//
	// 	- Deleting: The NAS file system is being deleted.
	//
	// 	- Deleted: The NAS file system is deleted.
	//
	// 	- Invalid: The NAS file system is invalid.
	//
	// example:
	//
	// Running
	FileSystemStatus *string `json:"FileSystemStatus,omitempty" xml:"FileSystemStatus,omitempty"`
	// The type of the NAS file system. Valid value: Universal NAS. This value indicates that the NAS file system is a General-purpose one.
	//
	// example:
	//
	// standard
	FileSystemType *string `json:"FileSystemType,omitempty" xml:"FileSystemType,omitempty"`
	// The used storage of the NAS file system. Unit: byte.
	//
	// example:
	//
	// 0
	MeteredSize *int64 `json:"MeteredSize,omitempty" xml:"MeteredSize,omitempty"`
	// The domain name of the mount target.
	//
	// example:
	//
	// 04f314****-at***.cn-hangzhou.nas.aliyuncs.com
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	// The status of the mount target. The possible values include:
	//
	// 	- Pending: The mount target is being created.
	//
	// 	- Active: The mount target is enabled.
	//
	// 	- Inactive: The mount target is disabled.
	//
	// 	- Deleting: The mount target is being deleted.
	//
	// 	- Invalid: The mount target is invalid.
	//
	// example:
	//
	// Active
	MountTargetStatus *string `json:"MountTargetStatus,omitempty" xml:"MountTargetStatus,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The name of the workspace.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// Indicates whether the User Profile Management (UPM) feature is supported.
	//
	// example:
	//
	// false
	ProfileCompatible *bool `json:"ProfileCompatible,omitempty" xml:"ProfileCompatible,omitempty"`
	// The ID of the region.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The storage type of the NAS file system. Valid values:
	//
	// 	- Capacity
	//
	// 	- Performance
	//
	// example:
	//
	// Capacity
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
	// Indicates whether the Server Message Block (SMB) access control list (ACL) feature was enabled.
	//
	// example:
	//
	// false
	SupportAcl *bool `json:"SupportAcl,omitempty" xml:"SupportAcl,omitempty"`
	// The ID of the zone where the NAS file system resides.
	//
	// example:
	//
	// cn-hangzhou-f
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeNASFileSystemsResponseBodyFileSystems) String() string {
	return tea.Prettify(s)
}

func (s DescribeNASFileSystemsResponseBodyFileSystems) GoString() string {
	return s.String()
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetCapacity(v int64) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.Capacity = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetCreateTime(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.CreateTime = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetDescription(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.Description = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetDesktopGroups(v []*DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.DesktopGroups = v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetEncryptionEnabled(v bool) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.EncryptionEnabled = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetFileSystemId(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.FileSystemId = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetFileSystemName(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.FileSystemName = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetFileSystemStatus(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.FileSystemStatus = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetFileSystemType(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.FileSystemType = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetMeteredSize(v int64) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.MeteredSize = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetMountTargetDomain(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.MountTargetDomain = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetMountTargetStatus(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.MountTargetStatus = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetOfficeSiteId(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetOfficeSiteName(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetProfileCompatible(v bool) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.ProfileCompatible = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetRegionId(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.RegionId = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetStorageType(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.StorageType = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetSupportAcl(v bool) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.SupportAcl = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystems) SetZoneId(v string) *DescribeNASFileSystemsResponseBodyFileSystems {
	s.ZoneId = &v
	return s
}

type DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups struct {
	// The ID of the desktop group.
	//
	// example:
	//
	// dg-9eeyf15b25nyl****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The name of the desktop group.
	//
	// example:
	//
	// test_dg
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
}

func (s DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups) GoString() string {
	return s.String()
}

func (s *DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups) SetDesktopGroupId(v string) *DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups) SetDesktopGroupName(v string) *DescribeNASFileSystemsResponseBodyFileSystemsDesktopGroups {
	s.DesktopGroupName = &v
	return s
}

type DescribeNASFileSystemsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNASFileSystemsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNASFileSystemsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNASFileSystemsResponse) GoString() string {
	return s.String()
}

func (s *DescribeNASFileSystemsResponse) SetHeaders(v map[string]*string) *DescribeNASFileSystemsResponse {
	s.Headers = v
	return s
}

func (s *DescribeNASFileSystemsResponse) SetStatusCode(v int32) *DescribeNASFileSystemsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNASFileSystemsResponse) SetBody(v *DescribeNASFileSystemsResponseBody) *DescribeNASFileSystemsResponse {
	s.Body = v
	return s
}

type DescribeNetworkPackagesRequest struct {
	// The charge type of the pay-as-you-go premium bandwidth plan.
	//
	// Valid values:
	//
	// 	- PayByTraffic: charges by data transfer.
	//
	// 	- PayByBandwidth: charges by fixed bandwidth.
	//
	// example:
	//
	// PayByBandwidth
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The number of entries to return on each page.
	//
	// 	- Maximum value: 100
	//
	// 	- Default value: 10
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The ID of the premium bandwidth plan. You can specify 1 to 100 IDs.
	//
	// example:
	//
	// np-amtp8e8q1o9e4****
	NetworkPackageId []*string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty" type:"Repeated"`
	// The token that determines the start point of the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeNetworkPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkPackagesRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetworkPackagesRequest) SetInternetChargeType(v string) *DescribeNetworkPackagesRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeNetworkPackagesRequest) SetMaxResults(v int32) *DescribeNetworkPackagesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeNetworkPackagesRequest) SetNetworkPackageId(v []*string) *DescribeNetworkPackagesRequest {
	s.NetworkPackageId = v
	return s
}

func (s *DescribeNetworkPackagesRequest) SetNextToken(v string) *DescribeNetworkPackagesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkPackagesRequest) SetRegionId(v string) *DescribeNetworkPackagesRequest {
	s.RegionId = &v
	return s
}

type DescribeNetworkPackagesResponseBody struct {
	// The premium bandwidth plans.
	NetworkPackages []*DescribeNetworkPackagesResponseBodyNetworkPackages `json:"NetworkPackages,omitempty" xml:"NetworkPackages,omitempty" type:"Repeated"`
	// The token that is used to start the next query. If the value of this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3C83E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeNetworkPackagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkPackagesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetworkPackagesResponseBody) SetNetworkPackages(v []*DescribeNetworkPackagesResponseBodyNetworkPackages) *DescribeNetworkPackagesResponseBody {
	s.NetworkPackages = v
	return s
}

func (s *DescribeNetworkPackagesResponseBody) SetNextToken(v string) *DescribeNetworkPackagesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBody) SetRequestId(v string) *DescribeNetworkPackagesResponseBody {
	s.RequestId = &v
	return s
}

type DescribeNetworkPackagesResponseBodyNetworkPackages struct {
	// The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.
	//
	// example:
	//
	// 10
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The business status.
	//
	// Valid values:
	//
	// 	- Expired
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Normal
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Normal
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// The time when the premium bandwidth plan was created.
	//
	// example:
	//
	// 2021-05-10T02:35:26Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The public egress IP address of the premium bandwidth plan.
	EipAddresses []*string `json:"EipAddresses,omitempty" xml:"EipAddresses,omitempty" type:"Repeated"`
	// The time when the premium bandwidth plan expires.
	//
	// 	- If the plan is a subscription one, the time when the plan expires is returned.
	//
	// 	- If the plan is a pay-as-you-go one, `2099-12-31T15:59:59Z` is returned.
	//
	// example:
	//
	// 2099-12-31T15:59:59Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The charge type of the premium bandwidth plan.
	//
	// 	- Valid value when the `PayType` parameter is set to `PrePaid`:
	//
	//     	- PayByBandwidth: charges by fixed bandwidth.
	//
	// 	- Valid values when the `PayType` parameter is set to `PostPaid`:
	//
	//     	- PayByTraffic: charges by data transfer.
	//
	//     	- PayByBandwidth: charges by fixed bandwidth.
	//
	// example:
	//
	// PayByTraffic
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The ID of the premium bandwidth plan.
	//
	// example:
	//
	// np-amtp8e8q1o9e4****
	NetworkPackageId *string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty"`
	// The status of the premium bandwidth plan.
	//
	// Valid values:
	//
	// 	- Creating
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Released
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- InUse
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Releasing
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// InUse
	NetworkPackageStatus *string `json:"NetworkPackageStatus,omitempty" xml:"NetworkPackageStatus,omitempty"`
	// The office network ID.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The office network name.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The type of the office network.
	//
	// Valid values:
	//
	// 	- standard: advanced office network
	//
	// 	- customized: custom office network
	//
	// 	- basic: basic office network
	//
	// example:
	//
	// basic
	OfficeSiteVpcType *string `json:"OfficeSiteVpcType,omitempty" xml:"OfficeSiteVpcType,omitempty"`
	// The billing method of the premium bandwidth plan.
	//
	// Valid values:
	//
	// 	- PostPaid: pay-as-you-go
	//
	// 	- PrePaid: subscription
	//
	// example:
	//
	// PostPaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The time when the reserved network bandwidth took effect.
	//
	// example:
	//
	// 2021-07-10T00:00:00Z
	ReservationActiveTime *string `json:"ReservationActiveTime,omitempty" xml:"ReservationActiveTime,omitempty"`
	// The peak bandwidth that is reserved for the premium bandwidth plan. Unit: Mbit/s.
	//
	// example:
	//
	// 20
	ReservationBandwidth *int32 `json:"ReservationBandwidth,omitempty" xml:"ReservationBandwidth,omitempty"`
	// The billing method of the reserved network bandwidth.
	//
	// Valid values:
	//
	// 	- PayByTraffic: charges by data transfer.
	//
	// 	- PayByBandwidth: charges by fixed bandwidth.
	//
	// example:
	//
	// PayByBandwidth
	ReservationInternetChargeType *string `json:"ReservationInternetChargeType,omitempty" xml:"ReservationInternetChargeType,omitempty"`
}

func (s DescribeNetworkPackagesResponseBodyNetworkPackages) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkPackagesResponseBodyNetworkPackages) GoString() string {
	return s.String()
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetBandwidth(v int32) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.Bandwidth = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetBusinessStatus(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.BusinessStatus = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetCreateTime(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.CreateTime = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetEipAddresses(v []*string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.EipAddresses = v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetExpiredTime(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetInternetChargeType(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.InternetChargeType = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetNetworkPackageId(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.NetworkPackageId = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetNetworkPackageStatus(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.NetworkPackageStatus = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetOfficeSiteId(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetOfficeSiteName(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.OfficeSiteName = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetOfficeSiteVpcType(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.OfficeSiteVpcType = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetPayType(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.PayType = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetReservationActiveTime(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.ReservationActiveTime = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetReservationBandwidth(v int32) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.ReservationBandwidth = &v
	return s
}

func (s *DescribeNetworkPackagesResponseBodyNetworkPackages) SetReservationInternetChargeType(v string) *DescribeNetworkPackagesResponseBodyNetworkPackages {
	s.ReservationInternetChargeType = &v
	return s
}

type DescribeNetworkPackagesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNetworkPackagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNetworkPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetworkPackagesResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetworkPackagesResponse) SetHeaders(v map[string]*string) *DescribeNetworkPackagesResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetworkPackagesResponse) SetStatusCode(v int32) *DescribeNetworkPackagesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetworkPackagesResponse) SetBody(v *DescribeNetworkPackagesResponseBody) *DescribeNetworkPackagesResponse {
	s.Body = v
	return s
}

type DescribeOfficeSitesRequest struct {
	// The number of entries to return on each page.
	//
	// 	- Maximum value: 100.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The office network IDs. You can specify the IDs of 1 to 100 office networks.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId []*string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty" type:"Repeated"`
	// The account type of the office network.
	//
	// Valid values:
	//
	// 	- SIMPLE: convenience account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- AD_CONNECTOR: enterprise Active Directory (AD) account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SIMPLE
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The security protection setting of the office network.
	//
	// Valid values:
	//
	// 	- SASE: SASE is configured.
	//
	// 	- OFF: No security protection setting is configured.
	//
	// example:
	//
	// SASE
	SecurityProtection *string `json:"SecurityProtection,omitempty" xml:"SecurityProtection,omitempty"`
	// The office network status.
	//
	// Valid values:
	//
	// 	- REGISTERING: The office network is being registered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DEREGISTERING: The office network is being deregistered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- REGISTERED: The office network is registered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NEEDCONFIGTRUST: A trust relationship is required for the office network.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CONFIGTRUSTFAILED: A trust relationship fails to be configured for the office network.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DEREGISTERED: The office network is deregistered.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ERROR: One or more configurations of the office network are invalid.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CONFIGTRUSTING: A trust relationship is being configured for the office network.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NEEDCONFIGUSER: Users are required for the office network.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// REGISTERED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeOfficeSitesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfficeSitesRequest) GoString() string {
	return s.String()
}

func (s *DescribeOfficeSitesRequest) SetMaxResults(v int32) *DescribeOfficeSitesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeOfficeSitesRequest) SetNextToken(v string) *DescribeOfficeSitesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeOfficeSitesRequest) SetOfficeSiteId(v []*string) *DescribeOfficeSitesRequest {
	s.OfficeSiteId = v
	return s
}

func (s *DescribeOfficeSitesRequest) SetOfficeSiteType(v string) *DescribeOfficeSitesRequest {
	s.OfficeSiteType = &v
	return s
}

func (s *DescribeOfficeSitesRequest) SetRegionId(v string) *DescribeOfficeSitesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeOfficeSitesRequest) SetSecurityProtection(v string) *DescribeOfficeSitesRequest {
	s.SecurityProtection = &v
	return s
}

func (s *DescribeOfficeSitesRequest) SetStatus(v string) *DescribeOfficeSitesRequest {
	s.Status = &v
	return s
}

type DescribeOfficeSitesResponseBody struct {
	// The token that determines the start point of the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The information about office networks.
	OfficeSites []*DescribeOfficeSitesResponseBodyOfficeSites `json:"OfficeSites,omitempty" xml:"OfficeSites,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of entries returned.
	//
	// example:
	//
	// 20
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeOfficeSitesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfficeSitesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOfficeSitesResponseBody) SetNextToken(v string) *DescribeOfficeSitesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeOfficeSitesResponseBody) SetOfficeSites(v []*DescribeOfficeSitesResponseBodyOfficeSites) *DescribeOfficeSitesResponseBody {
	s.OfficeSites = v
	return s
}

func (s *DescribeOfficeSitesResponseBody) SetRequestId(v string) *DescribeOfficeSitesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOfficeSitesResponseBody) SetTotalCount(v int32) *DescribeOfficeSitesResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeOfficeSitesResponseBodyOfficeSites struct {
	// Details of AD connectors.
	ADConnectors []*DescribeOfficeSitesResponseBodyOfficeSitesADConnectors `json:"ADConnectors,omitempty" xml:"ADConnectors,omitempty" type:"Repeated"`
	// The hostname of the domain controller. The hostname must comply with the hostname naming convention of Windows.
	//
	// example:
	//
	// beijing-ad01
	AdHostname *string `json:"AdHostname,omitempty" xml:"AdHostname,omitempty"`
	// The hostname of the secondary domain controller.
	//
	// example:
	//
	// beijing-ad02
	BackupDCHostname *string `json:"BackupDCHostname,omitempty" xml:"BackupDCHostname,omitempty"`
	// The DNS address of the secondary domain controller.
	//
	// example:
	//
	// 172.24.XX.XX
	BackupDns *string `json:"BackupDns,omitempty" xml:"BackupDns,omitempty"`
	// The maximum public bandwidth value. Valid values: 0 to 1000.\\
	//
	// If you leave this parameter empty or set this parameter to 0, Internet access is not enabled.
	//
	// example:
	//
	// 10
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The CEN instance status.
	//
	// example:
	//
	// attached
	CenAttachStatus *string `json:"CenAttachStatus,omitempty" xml:"CenAttachStatus,omitempty"`
	// The CEN instance ID.
	//
	// example:
	//
	// cen-3gwy16dojz1m65****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// The IPv4 CIDR block of the VPC that the office network uses.
	//
	// example:
	//
	// 172.16.0.0/16
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// Indicates whether the CloudBox-based office network is created.
	//
	// Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	CloudBoxOfficeSite *bool `json:"CloudBoxOfficeSite,omitempty" xml:"CloudBoxOfficeSite,omitempty"`
	// The time when the office network was created.
	//
	// example:
	//
	// 2021-05-06T05:58Z
	CreationTime      *string   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CustomAccessPoint *string   `json:"CustomAccessPoint,omitempty" xml:"CustomAccessPoint,omitempty"`
	CustomDnsAddress  []*string `json:"CustomDnsAddress,omitempty" xml:"CustomDnsAddress,omitempty" type:"Repeated"`
	// The ID of the security group.
	//
	// example:
	//
	// sg-bp1ce64o4g9mdf5u****
	CustomSecurityGroupId *string `json:"CustomSecurityGroupId,omitempty" xml:"CustomSecurityGroupId,omitempty"`
	// The method that is used to connect cloud computers that reside in the office network from Alibaba Cloud Workspace clients.
	//
	// >  The VPC connection depends on Alibaba Cloud PrivateLink. You can use Alibaba Cloud PrivateLink for free. When you set this parameter to `VPC` or `Any`, PrivateLink is automatically activated.
	//
	// Valid values:
	//
	// 	- INTERNET (default): Cloud computers are connected from Alibaba Cloud Workspace clients over the Internet.
	//
	// 	- VPC: Cloud computers are connected from Alibaba Cloud Workspace clients over the VPC.
	//
	// 	- ANY: Cloud computers are connected from Alibaba Cloud Workspace clients over the Internet or the VPC. When end users connect to cloud computers from Alibaba Cloud Workspace clients, you can choose a connection method based on your business requirements.
	//
	// example:
	//
	// INTERNET
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// The number of cloud computers that are created.
	//
	// example:
	//
	// 1
	DesktopCount *int64 `json:"DesktopCount,omitempty" xml:"DesktopCount,omitempty"`
	// The endpoint that is used to connect to cloud computers in the directory over a VPC.
	//
	// example:
	//
	// http://ep-bp1s2vmbj55r5rzc****.epsrv-bp1pcfhpwvlpny01****.cn-hangzhou.privatelink.aliyuncs.com
	DesktopVpcEndpoint *string `json:"DesktopVpcEndpoint,omitempty" xml:"DesktopVpcEndpoint,omitempty"`
	// The array of DNS addresses in the AD domains.
	DnsAddress []*string `json:"DnsAddress,omitempty" xml:"DnsAddress,omitempty" type:"Repeated"`
	// The username of a Domain Name System (DNS) user.
	//
	// example:
	//
	// testDnsUserName
	DnsUserName *string `json:"DnsUserName,omitempty" xml:"DnsUserName,omitempty"`
	// The domain name of the enterprise AD.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The password of the domain administrator.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the domain administrator.
	//
	// example:
	//
	// Administrator
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// Indicates whether the local administrator permissions are granted to users that are authorized to use cloud computers in the office network.
	//
	// Valid values:
	//
	// 	- true (default)
	//
	// 	- false
	//
	// example:
	//
	// true
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Indicates whether the connection between cloud computers in the office network is enabled. After you enable the connection between cloud computers in the office network, cloud computers in the office network can access each other.
	//
	// example:
	//
	// false
	EnableCrossDesktopAccess *bool `json:"EnableCrossDesktopAccess,omitempty" xml:"EnableCrossDesktopAccess,omitempty"`
	// Indicates whether Internet access is enabled.
	//
	// example:
	//
	// false
	EnableInternetAccess *bool `json:"EnableInternetAccess,omitempty" xml:"EnableInternetAccess,omitempty"`
	// Indicates whether route access control is enabled for cloud services.
	//
	// example:
	//
	// false
	EnableServiceRoute *bool `json:"EnableServiceRoute,omitempty" xml:"EnableServiceRoute,omitempty"`
	// An array of File Storage NAS (NAS) file system IDs.
	FileSystemIds []*string `json:"FileSystemIds,omitempty" xml:"FileSystemIds,omitempty" type:"Repeated"`
	// Details about registration logs.
	Logs []*DescribeOfficeSitesResponseBodyOfficeSitesLogs `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	// Indicates whether multi-factor authentication (MFA) is enabled.
	//
	// example:
	//
	// false
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The name of the office network. The name is unique in a region.
	//
	// example:
	//
	// test
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Indicates whether two-factor verification is enabled when an end user logs on to an Alibaba Cloud Workspace client. This parameter is required only for convenience office networks. If two-factor verification is enabled, the system checks whether security risks exist within the logon account when a convenience user logs on to the client. If risks are detected, the system sends a verification code to the email address that is associated with the account. Then, the convenience user can log on to the client only after the user enters the correct verification code.
	//
	// example:
	//
	// false
	NeedVerifyLoginRisk *bool `json:"NeedVerifyLoginRisk,omitempty" xml:"NeedVerifyLoginRisk,omitempty"`
	// Indicates whether the trusted device verification is enabled.
	//
	// Valid values:
	//
	// 	- true
	//
	// 	- false
	//
	// example:
	//
	// true
	NeedVerifyZeroDevice *bool `json:"NeedVerifyZeroDevice,omitempty" xml:"NeedVerifyZeroDevice,omitempty"`
	// The premium bandwidth plan ID.
	//
	// example:
	//
	// np-amtp8e8q1o9e4****
	NetworkPackageId *string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty"`
	NmVersion        *string `json:"NmVersion,omitempty" xml:"NmVersion,omitempty"`
	// The IDs of the office networks.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The account type of the office network.
	//
	// Valid values:
	//
	// 	- SIMPLE: the convenience account
	//
	// 	- AD_CONNECTOR: the enterprise AD account
	//
	// example:
	//
	// AD_CONNECTOR
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	// The organizational unit (OU) in the AD domain to which the office network is connected.
	//
	// example:
	//
	// example.com/Domain Controllers
	OuName *string `json:"OuName,omitempty" xml:"OuName,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX
	//
	// 	- ASP
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The IP address of the RDS license.
	//
	// example:
	//
	// 47.100.XX.XX
	RdsLicenseAddress *string `json:"RdsLicenseAddress,omitempty" xml:"RdsLicenseAddress,omitempty"`
	// The domain name of the RDS license.
	//
	// example:
	//
	// test.com
	RdsLicenseDomainName *string `json:"RdsLicenseDomainName,omitempty" xml:"RdsLicenseDomainName,omitempty"`
	// The remote desktop service (RDS) license status.
	//
	// example:
	//
	// 2
	RdsLicenseStatus *string                                                      `json:"RdsLicenseStatus,omitempty" xml:"RdsLicenseStatus,omitempty"`
	ResourceAmounts  []*DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts `json:"ResourceAmounts,omitempty" xml:"ResourceAmounts,omitempty" type:"Repeated"`
	// The security protection setting of the office network.
	//
	// Valid values:
	//
	// 	- SASE: SASE is configured.
	//
	// 	- OFF: No security protection setting is configured.
	//
	// example:
	//
	// SASE
	SecurityProtection *string `json:"SecurityProtection,omitempty" xml:"SecurityProtection,omitempty"`
	// Indicates whether single sign-on (SSO) is enabled.
	//
	// example:
	//
	// false
	SsoEnabled *bool `json:"SsoEnabled,omitempty" xml:"SsoEnabled,omitempty"`
	// The SSO type.
	//
	// Valid values:
	//
	// 	- SAML.
	//
	// example:
	//
	// null
	SsoType *string `json:"SsoType,omitempty" xml:"SsoType,omitempty"`
	// The office network status.
	//
	// Valid values:
	//
	// 	- REGISTERING: The office network is being registered.
	//
	// 	- DEREGISTERING: The office network is being deregistered.
	//
	// 	- REGISTERED: The office network is registered.
	//
	// 	- NEEDCONFIGTRUST: A trust relationship is required for the office network.
	//
	// 	- CONFIGTRUSTFAILED: A trust relationship fails to be configured for the office network.
	//
	// 	- DEREGISTERED: The office network is deregistered.
	//
	// 	- ERROR: One or more configurations of the office network are invalid.
	//
	// 	- CONFIGTRUSTING: A trust relationship is being configured for the office network.
	//
	// 	- NEEDCONFIGUSER: Users are required for the office network.
	//
	// example:
	//
	// REGISTERED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// An array of DNS addresses for AD subdomains.
	SubDnsAddress []*string `json:"SubDnsAddress,omitempty" xml:"SubDnsAddress,omitempty" type:"Repeated"`
	// The username of enterprise AD subdomain.
	//
	// example:
	//
	// testSubDnsUserName
	SubDomainName *string `json:"SubDomainName,omitempty" xml:"SubDomainName,omitempty"`
	// The subnet mode of the office network.
	//
	// Valid values:
	//
	// 	- 0: disabled.
	//
	// 	- 1: enabled.
	//
	// example:
	//
	// 0
	SubnetMode *string `json:"SubnetMode,omitempty" xml:"SubnetMode,omitempty"`
	// The total number of cloud computers.
	//
	// example:
	//
	// 0
	TotalEdsCount *int64 `json:"TotalEdsCount,omitempty" xml:"TotalEdsCount,omitempty"`
	// The number of pooled cloud computers in the cloud computer pool.
	//
	// example:
	//
	// 0
	TotalEdsCountForGroup *int64 `json:"TotalEdsCountForGroup,omitempty" xml:"TotalEdsCountForGroup,omitempty"`
	TotalResourceAmount   *int64 `json:"TotalResourceAmount,omitempty" xml:"TotalResourceAmount,omitempty"`
	// >  This parameter is unavailable.
	//
	// example:
	//
	// null
	TrustPassword *string `json:"TrustPassword,omitempty" xml:"TrustPassword,omitempty"`
	// An array of VSwitch IDs.
	VSwitchIds []*string `json:"VSwitchIds,omitempty" xml:"VSwitchIds,omitempty" type:"Repeated"`
	// The VPC ID.
	//
	// example:
	//
	// vpc-uf6tz5k67puge5jn8****
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The VPC type.
	//
	// Valid values:
	//
	// 	- Basic
	//
	// 	- Customized
	//
	// 	- Standard
	//
	// example:
	//
	// Basic
	VpcType *string `json:"VpcType,omitempty" xml:"VpcType,omitempty"`
}

func (s DescribeOfficeSitesResponseBodyOfficeSites) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfficeSitesResponseBodyOfficeSites) GoString() string {
	return s.String()
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetADConnectors(v []*DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.ADConnectors = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetAdHostname(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.AdHostname = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetBackupDCHostname(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.BackupDCHostname = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetBackupDns(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.BackupDns = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetBandwidth(v int32) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.Bandwidth = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCenAttachStatus(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CenAttachStatus = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCenId(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CenId = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCidrBlock(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CidrBlock = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCloudBoxOfficeSite(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CloudBoxOfficeSite = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCreationTime(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CreationTime = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCustomAccessPoint(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CustomAccessPoint = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCustomDnsAddress(v []*string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CustomDnsAddress = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetCustomSecurityGroupId(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.CustomSecurityGroupId = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDesktopAccessType(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DesktopAccessType = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDesktopCount(v int64) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DesktopCount = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDesktopVpcEndpoint(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DesktopVpcEndpoint = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDnsAddress(v []*string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DnsAddress = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDnsUserName(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DnsUserName = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDomainName(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DomainName = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDomainPassword(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DomainPassword = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetDomainUserName(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.DomainUserName = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetEnableAdminAccess(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.EnableAdminAccess = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetEnableCrossDesktopAccess(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.EnableCrossDesktopAccess = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetEnableInternetAccess(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.EnableInternetAccess = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetEnableServiceRoute(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.EnableServiceRoute = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetFileSystemIds(v []*string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.FileSystemIds = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetLogs(v []*DescribeOfficeSitesResponseBodyOfficeSitesLogs) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.Logs = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetMfaEnabled(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.MfaEnabled = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetName(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.Name = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetNeedVerifyLoginRisk(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.NeedVerifyLoginRisk = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetNeedVerifyZeroDevice(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.NeedVerifyZeroDevice = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetNetworkPackageId(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.NetworkPackageId = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetNmVersion(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.NmVersion = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetOfficeSiteId(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetOfficeSiteType(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.OfficeSiteType = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetOuName(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.OuName = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetProtocolType(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.ProtocolType = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetRdsLicenseAddress(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.RdsLicenseAddress = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetRdsLicenseDomainName(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.RdsLicenseDomainName = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetRdsLicenseStatus(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.RdsLicenseStatus = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetResourceAmounts(v []*DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.ResourceAmounts = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetSecurityProtection(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.SecurityProtection = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetSsoEnabled(v bool) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.SsoEnabled = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetSsoType(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.SsoType = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetStatus(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.Status = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetSubDnsAddress(v []*string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.SubDnsAddress = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetSubDomainName(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.SubDomainName = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetSubnetMode(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.SubnetMode = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetTotalEdsCount(v int64) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.TotalEdsCount = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetTotalEdsCountForGroup(v int64) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.TotalEdsCountForGroup = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetTotalResourceAmount(v int64) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.TotalResourceAmount = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetTrustPassword(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.TrustPassword = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetVSwitchIds(v []*string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.VSwitchIds = v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetVpcId(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.VpcId = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSites) SetVpcType(v string) *DescribeOfficeSitesResponseBodyOfficeSites {
	s.VpcType = &v
	return s
}

type DescribeOfficeSitesResponseBodyOfficeSitesADConnectors struct {
	// The connection address of the AD connector.
	//
	// example:
	//
	// 172.24.*.*
	ADConnectorAddress *string `json:"ADConnectorAddress,omitempty" xml:"ADConnectorAddress,omitempty"`
	// The status of the AD connector.
	//
	// Valid values:
	//
	// 	- CONNECT_ERROR
	//
	// 	- RUNNING
	//
	// 	- CONNECTING (You must configure the AD domain in which the AD connector is used.)
	//
	// 	- EXPIRED
	//
	// 	- CREATING
	//
	// example:
	//
	// RUNNING
	ConnectorStatus *string `json:"ConnectorStatus,omitempty" xml:"ConnectorStatus,omitempty"`
	// The ID of an elastic network interface (ENI) to which the AD connector is mounted.
	//
	// example:
	//
	// eni-bp1i4wx78lgosrj6****
	NetworkInterfaceId *string `json:"NetworkInterfaceId,omitempty" xml:"NetworkInterfaceId,omitempty"`
	// The AD connector type.
	//
	// Valid values:
	//
	// 	- 1: General
	//
	// 	- 2: Advanced
	//
	// example:
	//
	// 1
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The trust password that is specified when you configure the AD trust relationship.
	//
	// example:
	//
	// password123***
	TrustKey *string `json:"TrustKey,omitempty" xml:"TrustKey,omitempty"`
	// The ID of the vSwitch that resides in the network of the AD connector.
	//
	// example:
	//
	// vsw-bp19ocz3erfx15uon****
	VSwitchId *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) GoString() string {
	return s.String()
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) SetADConnectorAddress(v string) *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors {
	s.ADConnectorAddress = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) SetConnectorStatus(v string) *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors {
	s.ConnectorStatus = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) SetNetworkInterfaceId(v string) *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors {
	s.NetworkInterfaceId = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) SetSpecification(v string) *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors {
	s.Specification = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) SetTrustKey(v string) *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors {
	s.TrustKey = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors) SetVSwitchId(v string) *DescribeOfficeSitesResponseBodyOfficeSitesADConnectors {
	s.VSwitchId = &v
	return s
}

type DescribeOfficeSitesResponseBodyOfficeSitesLogs struct {
	// The log severity.
	//
	// Valid values:
	//
	// 	- ERROR
	//
	// 	- INFO
	//
	// 	- WARN
	//
	// example:
	//
	// INFO
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// Details of the log entry.
	//
	// example:
	//
	// code:success | message:Create Connector complete
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The step in the log entry.
	//
	// example:
	//
	// CREATE_CONNECTOR
	Step *string `json:"Step,omitempty" xml:"Step,omitempty"`
	// The time when the log entry was printed.
	//
	// example:
	//
	// 2021-05-12T09:42Z
	TimeStamp *string `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
}

func (s DescribeOfficeSitesResponseBodyOfficeSitesLogs) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfficeSitesResponseBodyOfficeSitesLogs) GoString() string {
	return s.String()
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesLogs) SetLevel(v string) *DescribeOfficeSitesResponseBodyOfficeSitesLogs {
	s.Level = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesLogs) SetMessage(v string) *DescribeOfficeSitesResponseBodyOfficeSitesLogs {
	s.Message = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesLogs) SetStep(v string) *DescribeOfficeSitesResponseBodyOfficeSitesLogs {
	s.Step = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesLogs) SetTimeStamp(v string) *DescribeOfficeSitesResponseBodyOfficeSitesLogs {
	s.TimeStamp = &v
	return s
}

type DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts struct {
	Amount       *int64  `json:"amount,omitempty" xml:"amount,omitempty"`
	ResourceType *string `json:"resourceType,omitempty" xml:"resourceType,omitempty"`
}

func (s DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts) GoString() string {
	return s.String()
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts) SetAmount(v int64) *DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts {
	s.Amount = &v
	return s
}

func (s *DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts) SetResourceType(v string) *DescribeOfficeSitesResponseBodyOfficeSitesResourceAmounts {
	s.ResourceType = &v
	return s
}

type DescribeOfficeSitesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOfficeSitesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOfficeSitesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOfficeSitesResponse) GoString() string {
	return s.String()
}

func (s *DescribeOfficeSitesResponse) SetHeaders(v map[string]*string) *DescribeOfficeSitesResponse {
	s.Headers = v
	return s
}

func (s *DescribeOfficeSitesResponse) SetStatusCode(v int32) *DescribeOfficeSitesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOfficeSitesResponse) SetBody(v *DescribeOfficeSitesResponseBody) *DescribeOfficeSitesResponse {
	s.Body = v
	return s
}

type DescribePolicyGroupsRequest struct {
	// The number of entries per page.
	//
	// 	- Valid values: 1 to 100
	//
	// 	- Default value: 10
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The policy IDs. You can specify one or more policy IDs.
	//
	// example:
	//
	// system-all-enabled-policy
	PolicyGroupId []*string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The effective scope of the policy. Valid values:
	//
	// 	- GLOBAL: The policy takes effect globally.
	//
	// 	- IP: The policy takes effect based on the IP address.
	//
	// 	- ALL: The policy takes effect without limits.
	//
	// Default value: GLOBAL.
	//
	// example:
	//
	// ALL
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s DescribePolicyGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsRequest) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsRequest) SetMaxResults(v int32) *DescribePolicyGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribePolicyGroupsRequest) SetNextToken(v string) *DescribePolicyGroupsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribePolicyGroupsRequest) SetPolicyGroupId(v []*string) *DescribePolicyGroupsRequest {
	s.PolicyGroupId = v
	return s
}

func (s *DescribePolicyGroupsRequest) SetRegionId(v string) *DescribePolicyGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePolicyGroupsRequest) SetScope(v string) *DescribePolicyGroupsRequest {
	s.Scope = &v
	return s
}

type DescribePolicyGroupsResponseBody struct {
	// The details of the policies.
	DescribePolicyGroups []*DescribePolicyGroupsResponseBodyDescribePolicyGroups `json:"DescribePolicyGroups,omitempty" xml:"DescribePolicyGroups,omitempty" type:"Repeated"`
	// A pagination token. It can be used in the next request to retrieve a new page of results. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 473469C7-AA6F-4DC5-B3DB-A3DC0DE3****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePolicyGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBody) SetDescribePolicyGroups(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroups) *DescribePolicyGroupsResponseBody {
	s.DescribePolicyGroups = v
	return s
}

func (s *DescribePolicyGroupsResponseBody) SetNextToken(v string) *DescribePolicyGroupsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribePolicyGroupsResponseBody) SetRequestId(v string) *DescribePolicyGroupsResponseBody {
	s.RequestId = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroups struct {
	// Indicates whether users have the administrator permissions after they connect to cloud desktops.
	//
	// >  This parameter is in invitational preview and not available to the public.
	//
	// example:
	//
	// deny
	AdminAccess *string `json:"AdminAccess,omitempty" xml:"AdminAccess,omitempty"`
	// Indicates whether the anti-screenshot feature is enabled. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// Default value: off.
	//
	// example:
	//
	// off
	AppContentProtection *string `json:"AppContentProtection,omitempty" xml:"AppContentProtection,omitempty"`
	// The client CIDR blocks in a whitelist.
	AuthorizeAccessPolicyRules []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules `json:"AuthorizeAccessPolicyRules,omitempty" xml:"AuthorizeAccessPolicyRules,omitempty" type:"Repeated"`
	// The security group rules.
	AuthorizeSecurityPolicyRules []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules `json:"AuthorizeSecurityPolicyRules,omitempty" xml:"AuthorizeSecurityPolicyRules,omitempty" type:"Repeated"`
	// Indicates whether the webcam redirection feature is enabled.
	//
	// Valid values:
	//
	// 	- off
	//
	// 	- on (default)
	//
	// example:
	//
	// on
	CameraRedirect *string `json:"CameraRedirect,omitempty" xml:"CameraRedirect,omitempty"`
	// The logon methods.
	ClientTypes []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes `json:"ClientTypes,omitempty" xml:"ClientTypes,omitempty" type:"Repeated"`
	// The permissions on the clipboard.
	//
	// Valid values:
	//
	// 	- read: One-way transfer is allowed.
	//
	// 	- readwrite: Two-way transfer is allowed.
	//
	// 	- off: Two-way transfer is not allowed.
	//
	// example:
	//
	// readwrite
	Clipboard        *string `json:"Clipboard,omitempty" xml:"Clipboard,omitempty"`
	ColorEnhancement *string `json:"ColorEnhancement,omitempty" xml:"ColorEnhancement,omitempty"`
	// The CPU underclocking duration. Valid values: 30 to 120.
	//
	// example:
	//
	// 30
	CpuDownGradeDuration *int32 `json:"CpuDownGradeDuration,omitempty" xml:"CpuDownGradeDuration,omitempty"`
	// The process whitelist that is not restricted by the CPU usage limit.
	CpuProcessors []*string `json:"CpuProcessors,omitempty" xml:"CpuProcessors,omitempty" type:"Repeated"`
	// Indicates whether the switch for CPU protection mode is turned on. Valid values: on and off.
	//
	// example:
	//
	// on
	CpuProtectedMode *string `json:"CpuProtectedMode,omitempty" xml:"CpuProtectedMode,omitempty"`
	// The overall CPU utilization. Valid values: 70 to 90.
	//
	// example:
	//
	// 70
	CpuRateLimit *int32 `json:"CpuRateLimit,omitempty" xml:"CpuRateLimit,omitempty"`
	// The overall CPU sampling duration. Valid values: 10 to 60.
	//
	// example:
	//
	// 10
	CpuSampleDuration *int32 `json:"CpuSampleDuration,omitempty" xml:"CpuSampleDuration,omitempty"`
	// The usage of a single CPU. Valid values: 70 to 100.
	//
	// example:
	//
	// 70
	CpuSingleRateLimit *int32                                                                 `json:"CpuSingleRateLimit,omitempty" xml:"CpuSingleRateLimit,omitempty"`
	DeviceRedirects    []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects `json:"DeviceRedirects,omitempty" xml:"DeviceRedirects,omitempty" type:"Repeated"`
	DeviceRules        []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules     `json:"DeviceRules,omitempty" xml:"DeviceRules,omitempty" type:"Repeated"`
	DisplayMode        *string                                                                `json:"DisplayMode,omitempty" xml:"DisplayMode,omitempty"`
	// Indicates whether the access control for domain names is enabled. The domain names can contain wildcard characters (\\*). Multiple domain names are separated by commas (,). Valid values:
	//
	// 	- off
	//
	// 	- on
	//
	// example:
	//
	// off
	DomainList *string `json:"DomainList,omitempty" xml:"DomainList,omitempty"`
	// The rule of domain name resolution.
	DomainResolveRule []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule `json:"DomainResolveRule,omitempty" xml:"DomainResolveRule,omitempty" type:"Repeated"`
	// Indicates whether the switch for domain name resolution is turned on.
	//
	// Valid values:
	//
	// 	- off
	//
	// 	- on
	//
	// example:
	//
	// on
	DomainResolveRuleType *string `json:"DomainResolveRuleType,omitempty" xml:"DomainResolveRuleType,omitempty"`
	// The number of cloud desktops that are associated with the policy.\\
	//
	// This parameter is returned only for custom policies.
	//
	// example:
	//
	// 1
	EdsCount *int32 `json:"EdsCount,omitempty" xml:"EdsCount,omitempty"`
	// Indicates whether the switch for end users to ask for assistance from the administrator is turned on. Valid values: on and off.
	//
	// example:
	//
	// on
	EndUserApplyAdminCoordinate *string `json:"EndUserApplyAdminCoordinate,omitempty" xml:"EndUserApplyAdminCoordinate,omitempty"`
	// Indicates whether the switch for stream collaboration between end users is turned on. Valid values: on and off.
	//
	// example:
	//
	// on
	EndUserGroupCoordinate *string `json:"EndUserGroupCoordinate,omitempty" xml:"EndUserGroupCoordinate,omitempty"`
	// Indicates whether the image quality feature is enabled for Graphics cloud desktops. If you have high requirements for desktop performance and user experience, we recommend that you enable this feature. For example, you can enable this feature in professional graphic design scenarios.
	//
	// Valid values:
	//
	// 	- off
	//
	// 	- on
	//
	// example:
	//
	// off
	GpuAcceleration *string `json:"GpuAcceleration,omitempty" xml:"GpuAcceleration,omitempty"`
	// Indicates whether the access policy on HTML5 clients is allowed.
	//
	// Valid values:
	//
	// 	- off (default)
	//
	// 	- on
	//
	// example:
	//
	// off
	Html5Access *string `json:"Html5Access,omitempty" xml:"Html5Access,omitempty"`
	// The file transfer policy for HTML5 clients.
	//
	// Valid values:
	//
	// 	- all: Files can be uploaded and downloaded between your local computer and HTML5 clients.
	//
	// 	- download: Files on HTML5 clients can be downloaded to your local computer.
	//
	// 	- upload: Files on your local computer can be uploaded to HTML5 clients.
	//
	// 	- off (default): File transfer between HTML5 clients and your computer is disabled.
	//
	// example:
	//
	// off
	Html5FileTransfer *string `json:"Html5FileTransfer,omitempty" xml:"Html5FileTransfer,omitempty"`
	// The protocol that is used for network communication. Valid values:
	//
	// 	- TCP: Only TCP can be used.
	//
	// 	- BOTH: TCP or UDP can be used. The system switches between TCP and UDP based on the actual network condition.
	//
	// Default value: TCP.
	//
	// example:
	//
	// BOTH
	InternetCommunicationProtocol *string `json:"InternetCommunicationProtocol,omitempty" xml:"InternetCommunicationProtocol,omitempty"`
	// The permissions on local disk mapping.
	//
	// Valid values:
	//
	// 	- read: read-only
	//
	// 	- readwrite: read and write
	//
	// 	- off: no permissions
	//
	// example:
	//
	// readwrite
	LocalDrive       *string `json:"LocalDrive,omitempty" xml:"LocalDrive,omitempty"`
	MaxReconnectTime *int32  `json:"MaxReconnectTime,omitempty" xml:"MaxReconnectTime,omitempty"`
	// The duration required for underclocking memory by a single process. Valid values: 30 to 120.
	//
	// example:
	//
	// 30
	MemoryDownGradeDuration *int32 `json:"MemoryDownGradeDuration,omitempty" xml:"MemoryDownGradeDuration,omitempty"`
	// The whitelist of processes that are not restricted by the memory usage limit.
	MemoryProcessors []*string `json:"MemoryProcessors,omitempty" xml:"MemoryProcessors,omitempty" type:"Repeated"`
	// Indicates whether the switch for memory protection mode is turned on. Valid values: on and off.
	//
	// example:
	//
	// on
	MemoryProtectedMode *string `json:"MemoryProtectedMode,omitempty" xml:"MemoryProtectedMode,omitempty"`
	// The overall memory usage. Valid values: 70 to 90.
	//
	// example:
	//
	// 70
	MemoryRateLimit *int32 `json:"MemoryRateLimit,omitempty" xml:"MemoryRateLimit,omitempty"`
	// The overall sampling duration of memory statistics. Valid values: 30 to 60.
	//
	// example:
	//
	// 30
	MemorySampleDuration *int32 `json:"MemorySampleDuration,omitempty" xml:"MemorySampleDuration,omitempty"`
	// The memory usage of a single process. Valid values: 30 to 60.
	//
	// example:
	//
	// 30
	MemorySingleRateLimit *int32 `json:"MemorySingleRateLimit,omitempty" xml:"MemorySingleRateLimit,omitempty"`
	// The policy name.
	//
	// example:
	//
	// testPolicyGroupName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// Indicates whether the network redirection feature is enabled. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// Default value: off.
	//
	// >  This parameter is in invitational preview and not available to the public.
	//
	// example:
	//
	// off
	NetRedirect *string `json:"NetRedirect,omitempty" xml:"NetRedirect,omitempty"`
	// The network redirection rule.
	//
	// >  This parameter is in invitational preview and not available to the public.
	NetRedirectRule []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule `json:"NetRedirectRule,omitempty" xml:"NetRedirectRule,omitempty" type:"Repeated"`
	// The policy ID.
	//
	// example:
	//
	// pg-gx2x1dhsmthe9****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The policy type.
	//
	// Valid values:
	//
	// 	- SYSTEM
	//
	// 	- CUSTOM
	//
	// example:
	//
	// SYSTEM
	PolicyGroupType *string `json:"PolicyGroupType,omitempty" xml:"PolicyGroupType,omitempty"`
	// The policy status.
	//
	// Valid values:
	//
	// 	- AVAILABLE
	//
	// 	- CREATING
	//
	// example:
	//
	// AVAILABLE
	PolicyStatus *string `json:"PolicyStatus,omitempty" xml:"PolicyStatus,omitempty"`
	// Indicates whether user preemption is allowed. The value is fixed to `off`, which indicates that user preemption is not allowed.
	//
	// example:
	//
	// off
	PreemptLogin *string `json:"PreemptLogin,omitempty" xml:"PreemptLogin,omitempty"`
	// The names of the users that are allowed to connect to the cloud desktop to which another user is logged on.
	PreemptLoginUsers []*string `json:"PreemptLoginUsers,omitempty" xml:"PreemptLoginUsers,omitempty" type:"Repeated"`
	// Indicates whether the printer redirection feature is enabled.
	//
	// Valid values:
	//
	// 	- off
	//
	// 	- on
	//
	// example:
	//
	// on
	PrinterRedirection *string `json:"PrinterRedirection,omitempty" xml:"PrinterRedirection,omitempty"`
	QualityEnhancement *string `json:"QualityEnhancement,omitempty" xml:"QualityEnhancement,omitempty"`
	// Indicates whether the custom screen recording feature is enabled. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// Default value: off.
	//
	// example:
	//
	// off
	RecordContent *string `json:"RecordContent,omitempty" xml:"RecordContent,omitempty"`
	// The period when the custom screen recording can be retained before expiration. Default value: 30 days.
	//
	// example:
	//
	// 30
	RecordContentExpires *int64 `json:"RecordContentExpires,omitempty" xml:"RecordContentExpires,omitempty"`
	// Indicates whether the screen recording feature is enabled.
	//
	// Valid values:
	//
	// 	- ALLTIME: All operations that are performed by end users on cloud desktops are recorded. The recording starts immediately when end users connect to cloud desktops and ends after the end users disconnect from the cloud desktops.
	//
	// 	- PERIOD: The operations that are performed by end users on cloud desktops during a specified period of time are recorded. You must specify the start time and the end time of the recording.
	//
	// 	- OFF: The screen recording feature is disabled.
	//
	// example:
	//
	// OFF
	Recording *string `json:"Recording,omitempty" xml:"Recording,omitempty"`
	// Indicates whether to record audio or video data that is generated on the cloud desktop during screen recording. Valid values:
	//
	// 	- on: records audio and video data.
	//
	// 	- off: records only video data.
	//
	// example:
	//
	// on
	RecordingAudio *string `json:"RecordingAudio,omitempty" xml:"RecordingAudio,omitempty"`
	// This parameter is used with the Recording parameter to generate a screen recording file after you specify the duration of screen recording.
	//
	// example:
	//
	// 10
	RecordingDuration *int32 `json:"RecordingDuration,omitempty" xml:"RecordingDuration,omitempty"`
	// The time when the screen recording ended. The value is in the HH:MM:SS format. The value takes effect only when Recording is set to PERIOD.
	//
	// example:
	//
	// 08:59:00
	RecordingEndTime *string `json:"RecordingEndTime,omitempty" xml:"RecordingEndTime,omitempty"`
	// The period in which the screen recording audit is valid. Valid values: 15 to 180. Unit: day.
	//
	// example:
	//
	// 15
	RecordingExpires *int64 `json:"RecordingExpires,omitempty" xml:"RecordingExpires,omitempty"`
	// The frame rate of screen recording. Unit: fps. Valid values:
	//
	// 	- 2
	//
	// 	- 5
	//
	// 	- 10
	//
	// 	- 15
	//
	// example:
	//
	// 5
	RecordingFps *int64 `json:"RecordingFps,omitempty" xml:"RecordingFps,omitempty"`
	// The time when the screen recording was started. The value is in the HH:MM:SS format. The value takes effect only when Recording is set to PERIOD.
	//
	// example:
	//
	// 08:00:00
	RecordingStartTime *string `json:"RecordingStartTime,omitempty" xml:"RecordingStartTime,omitempty"`
	// Indicates whether the client notification of screen recording is enabled. Valid values: on and off.
	//
	// example:
	//
	// off
	RecordingUserNotify *string `json:"RecordingUserNotify,omitempty" xml:"RecordingUserNotify,omitempty"`
	// The notification content of screen recording. By default, this parameter is left empty.
	//
	// example:
	//
	// Your desktop is being recorded
	RecordingUserNotifyMessage *string `json:"RecordingUserNotifyMessage,omitempty" xml:"RecordingUserNotifyMessage,omitempty"`
	// The permissions on the keyboard and mouse to control the cloud desktop during remote assistance. Valid values:
	//
	// 	- fullControl: The keyboard and mouse are fully controlled.
	//
	// 	- optionalControl: By default, you do not have the permissions on the keyboard or mouse to control the cloud desktop during remote assistance. You can apply for the permissions.
	//
	// 	- disableControl: The keyboard and mouse are not controlled.
	//
	// example:
	//
	// fullControl
	RemoteCoordinate *string `json:"RemoteCoordinate,omitempty" xml:"RemoteCoordinate,omitempty"`
	ResourceRegionId *string `json:"ResourceRegionId,omitempty" xml:"ResourceRegionId,omitempty"`
	// The effective scope of the policy. Valid values:
	//
	// 	- GLOBAL: The policy takes effect globally.
	//
	// 	- IP: The policy takes effect based on IP addresses.
	//
	// example:
	//
	// GLOBAL
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// This parameter is required when Scope is set to IP. This parameter takes effect when Scope is set to IP.
	ScopeValue        []*string `json:"ScopeValue,omitempty" xml:"ScopeValue,omitempty" type:"Repeated"`
	SmoothEnhancement *string   `json:"SmoothEnhancement,omitempty" xml:"SmoothEnhancement,omitempty"`
	StreamingMode     *string   `json:"StreamingMode,omitempty" xml:"StreamingMode,omitempty"`
	TargetFps         *int32    `json:"TargetFps,omitempty" xml:"TargetFps,omitempty"`
	// Indicates whether the USB redirection feature is enabled.
	//
	// Valid values:
	//
	// 	- off
	//
	// 	- on
	//
	// example:
	//
	// on
	UsbRedirect *string `json:"UsbRedirect,omitempty" xml:"UsbRedirect,omitempty"`
	// The USB redirection rule.
	UsbSupplyRedirectRule []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule `json:"UsbSupplyRedirectRule,omitempty" xml:"UsbSupplyRedirectRule,omitempty" type:"Repeated"`
	VideoEncAvgKbps       *int32                                                                       `json:"VideoEncAvgKbps,omitempty" xml:"VideoEncAvgKbps,omitempty"`
	VideoEncMaxQP         *int32                                                                       `json:"VideoEncMaxQP,omitempty" xml:"VideoEncMaxQP,omitempty"`
	VideoEncMinQP         *int32                                                                       `json:"VideoEncMinQP,omitempty" xml:"VideoEncMinQP,omitempty"`
	VideoEncPeakKbps      *int32                                                                       `json:"VideoEncPeakKbps,omitempty" xml:"VideoEncPeakKbps,omitempty"`
	VideoEncPolicy        *string                                                                      `json:"VideoEncPolicy,omitempty" xml:"VideoEncPolicy,omitempty"`
	// Indicates whether the multimedia redirection feature is enabled. Valid values: on and off.
	//
	// example:
	//
	// off
	VideoRedirect *string `json:"VideoRedirect,omitempty" xml:"VideoRedirect,omitempty"`
	// The image display quality.
	//
	// Valid values:
	//
	// 	- high: high-definition (HD)
	//
	// 	- low: fluent
	//
	// 	- medium (default): adaptive
	//
	// 	- lossless: no quality loss
	//
	// example:
	//
	// medium
	VisualQuality *string `json:"VisualQuality,omitempty" xml:"VisualQuality,omitempty"`
	// Indicates whether the watermarking feature is enabled.
	//
	// Valid values:
	//
	// 	- off
	//
	// 	- on
	//
	// example:
	//
	// on
	Watermark *string `json:"Watermark,omitempty" xml:"Watermark,omitempty"`
	// Indicates whether the anti-screen photo feature is enabled for invisible watermarks. Valid values: on and off.
	//
	// example:
	//
	// off
	WatermarkAntiCam *string `json:"WatermarkAntiCam,omitempty" xml:"WatermarkAntiCam,omitempty"`
	// The font color in red, green, and blue (RGB) of the watermark. Valid values: 0 to 16777215.
	//
	// example:
	//
	// 0
	WatermarkColor *int32 `json:"WatermarkColor,omitempty" xml:"WatermarkColor,omitempty"`
	// This parameter is unavailable for public use.
	//
	// example:
	//
	// test
	WatermarkCustomText *string `json:"WatermarkCustomText,omitempty" xml:"WatermarkCustomText,omitempty"`
	// The slope of the watermark. Valid values: -10 to -30.
	//
	// example:
	//
	// -10
	WatermarkDegree *float64 `json:"WatermarkDegree,omitempty" xml:"WatermarkDegree,omitempty"`
	// The font size of the watermark. Valid values: 10 to 20.
	//
	// example:
	//
	// 10
	WatermarkFontSize *int32 `json:"WatermarkFontSize,omitempty" xml:"WatermarkFontSize,omitempty"`
	// The font style of the watermark. Valid values:
	//
	// 	- plain
	//
	// 	- bold
	//
	// example:
	//
	// plain
	WatermarkFontStyle *string `json:"WatermarkFontStyle,omitempty" xml:"WatermarkFontStyle,omitempty"`
	// The invisible watermark enhancement feature. Valid values: low, medium, and high.
	//
	// example:
	//
	// medium
	WatermarkPower *string `json:"WatermarkPower,omitempty" xml:"WatermarkPower,omitempty"`
	// The number of watermark rows. This parameter is now invalid.
	//
	// example:
	//
	// 5
	WatermarkRowAmount *int32 `json:"WatermarkRowAmount,omitempty" xml:"WatermarkRowAmount,omitempty"`
	// Indicates whether the security priority for invisible watermarks is enabled. Valid values: on and off.
	//
	// example:
	//
	// on
	WatermarkSecurity *string `json:"WatermarkSecurity,omitempty" xml:"WatermarkSecurity,omitempty"`
	// The watermark transparency.
	//
	// Valid values:
	//
	// 	- LIGHT
	//
	// 	- DARK
	//
	// 	- MIDDLE
	//
	// example:
	//
	// LIGHT
	WatermarkTransparency *string `json:"WatermarkTransparency,omitempty" xml:"WatermarkTransparency,omitempty"`
	// The watermark transparency. A greater value indicates that the watermark is less transparent. Valid values: 10 to 100.
	//
	// example:
	//
	// 10
	WatermarkTransparencyValue *int32 `json:"WatermarkTransparencyValue,omitempty" xml:"WatermarkTransparencyValue,omitempty"`
	// The watermark type.
	//
	// Valid values:
	//
	// 	- HostName,EndUserId: The watermark is displayed in the following format: Rightmost 15 characters of the cloud desktop ID,Username.
	//
	// 	- EndUserId: The username is displayed.
	//
	// 	- EndUserId,HostName: The watermark is displayed in the following format: Username,Rightmost 15 characters of the cloud desktop ID.
	//
	// 	- HostName: The rightmost 15 characters of the cloud desktop ID are displayed.
	//
	// example:
	//
	// EndUserId
	WatermarkType *string `json:"WatermarkType,omitempty" xml:"WatermarkType,omitempty"`
	WyAssistant   *string `json:"WyAssistant,omitempty" xml:"WyAssistant,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroups) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroups) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetAdminAccess(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.AdminAccess = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetAppContentProtection(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.AppContentProtection = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetAuthorizeAccessPolicyRules(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.AuthorizeAccessPolicyRules = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetAuthorizeSecurityPolicyRules(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.AuthorizeSecurityPolicyRules = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetCameraRedirect(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.CameraRedirect = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetClientTypes(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.ClientTypes = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetClipboard(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.Clipboard = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetColorEnhancement(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.ColorEnhancement = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetCpuDownGradeDuration(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.CpuDownGradeDuration = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetCpuProcessors(v []*string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.CpuProcessors = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetCpuProtectedMode(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.CpuProtectedMode = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetCpuRateLimit(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.CpuRateLimit = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetCpuSampleDuration(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.CpuSampleDuration = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetCpuSingleRateLimit(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.CpuSingleRateLimit = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetDeviceRedirects(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.DeviceRedirects = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetDeviceRules(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.DeviceRules = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetDisplayMode(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.DisplayMode = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetDomainList(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.DomainList = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetDomainResolveRule(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.DomainResolveRule = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetDomainResolveRuleType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.DomainResolveRuleType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetEdsCount(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.EdsCount = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetEndUserApplyAdminCoordinate(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.EndUserApplyAdminCoordinate = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetEndUserGroupCoordinate(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.EndUserGroupCoordinate = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetGpuAcceleration(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.GpuAcceleration = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetHtml5Access(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.Html5Access = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetHtml5FileTransfer(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.Html5FileTransfer = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetInternetCommunicationProtocol(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.InternetCommunicationProtocol = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetLocalDrive(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.LocalDrive = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetMaxReconnectTime(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.MaxReconnectTime = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetMemoryDownGradeDuration(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.MemoryDownGradeDuration = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetMemoryProcessors(v []*string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.MemoryProcessors = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetMemoryProtectedMode(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.MemoryProtectedMode = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetMemoryRateLimit(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.MemoryRateLimit = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetMemorySampleDuration(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.MemorySampleDuration = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetMemorySingleRateLimit(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.MemorySingleRateLimit = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetName(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.Name = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetNetRedirect(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.NetRedirect = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetNetRedirectRule(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.NetRedirectRule = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetPolicyGroupId(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetPolicyGroupType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.PolicyGroupType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetPolicyStatus(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.PolicyStatus = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetPreemptLogin(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.PreemptLogin = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetPreemptLoginUsers(v []*string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.PreemptLoginUsers = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetPrinterRedirection(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.PrinterRedirection = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetQualityEnhancement(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.QualityEnhancement = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordContent(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordContent = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordContentExpires(v int64) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordContentExpires = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecording(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.Recording = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingAudio(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingAudio = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingDuration(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingDuration = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingEndTime(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingEndTime = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingExpires(v int64) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingExpires = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingFps(v int64) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingFps = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingStartTime(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingStartTime = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingUserNotify(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingUserNotify = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRecordingUserNotifyMessage(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RecordingUserNotifyMessage = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetRemoteCoordinate(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.RemoteCoordinate = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetResourceRegionId(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.ResourceRegionId = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetScope(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.Scope = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetScopeValue(v []*string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.ScopeValue = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetSmoothEnhancement(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.SmoothEnhancement = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetStreamingMode(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.StreamingMode = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetTargetFps(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.TargetFps = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetUsbRedirect(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.UsbRedirect = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetUsbSupplyRedirectRule(v []*DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.UsbSupplyRedirectRule = v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetVideoEncAvgKbps(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.VideoEncAvgKbps = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetVideoEncMaxQP(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.VideoEncMaxQP = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetVideoEncMinQP(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.VideoEncMinQP = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetVideoEncPeakKbps(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.VideoEncPeakKbps = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetVideoEncPolicy(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.VideoEncPolicy = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetVideoRedirect(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.VideoRedirect = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetVisualQuality(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.VisualQuality = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermark(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.Watermark = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkAntiCam(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkAntiCam = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkColor(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkColor = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkCustomText(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkCustomText = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkDegree(v float64) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkDegree = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkFontSize(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkFontSize = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkFontStyle(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkFontStyle = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkPower(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkPower = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkRowAmount(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkRowAmount = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkSecurity(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkSecurity = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkTransparency(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkTransparency = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkTransparencyValue(v int32) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkTransparencyValue = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWatermarkType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WatermarkType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroups) SetWyAssistant(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroups {
	s.WyAssistant = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules struct {
	// The CIDR block that is allowed to access the client. The value is an IPv4 CIDR block.
	//
	// example:
	//
	// 47.100.XX.XX/16
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The remarks on the CIDR block that is allowed to access the client.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules) SetCidrIp(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules {
	s.CidrIp = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules) SetDescription(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeAccessPolicyRules {
	s.Description = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules struct {
	// The object to which the security group rule applies. The value is an IPv4 CIDR block.
	//
	// example:
	//
	// 47.100.XX.XX/16
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The description of the security group rule.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The protocol type of the security group rule.
	//
	// Valid values:
	//
	// 	- tcp: Transmission Control Protocol (TCP)
	//
	// 	- udp: User Datagram Protocol (UDP)
	//
	// 	- all: all protocols
	//
	// 	- gre: Generic Routing Encapsulation (GRE)
	//
	// 	- icmp: Internet Control Message Protocol (ICMP) for IPv4
	//
	// example:
	//
	// tcp
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The authorization of the security group rule.
	//
	// Valid values:
	//
	// 	- drop: denies all access requests.
	//
	// 	- accept: accepts all access requests.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The port range of the security group rule.
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the security group rule. A smaller value indicates a higher priority.
	//
	// example:
	//
	// 1
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The direction of the security group rule.
	//
	// Valid values:
	//
	// 	- outflow: outbound
	//
	// 	- inflow: inbound
	//
	// example:
	//
	// inflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) SetCidrIp(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules {
	s.CidrIp = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) SetDescription(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules {
	s.Description = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) SetIpProtocol(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules {
	s.IpProtocol = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) SetPolicy(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules {
	s.Policy = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) SetPortRange(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules {
	s.PortRange = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) SetPriority(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules {
	s.Priority = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules) SetType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsAuthorizeSecurityPolicyRules {
	s.Type = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes struct {
	// The client type.
	//
	// Valid values:
	//
	// 	- html5: web client
	//
	// 	- linux: Alibaba Cloud Workspace hardware terminal
	//
	// 	- android: Android client
	//
	// 	- windows: Windows client
	//
	// 	- ios: iOS client
	//
	// 	- macos: macOS client
	//
	// example:
	//
	// windows
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// Indicates whether a specific type of client is allowed to connect to the cloud desktop.
	//
	// Valid values:
	//
	// 	- OFF
	//
	// 	- ON
	//
	// example:
	//
	// ON
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes) SetClientType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes {
	s.ClientType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes) SetStatus(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsClientTypes {
	s.Status = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects struct {
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	RedirectType *string `json:"RedirectType,omitempty" xml:"RedirectType,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects) SetDeviceType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects {
	s.DeviceType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects) SetRedirectType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRedirects {
	s.RedirectType = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules struct {
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DevicePid    *string `json:"DevicePid,omitempty" xml:"DevicePid,omitempty"`
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	DeviceVid    *string `json:"DeviceVid,omitempty" xml:"DeviceVid,omitempty"`
	OptCommand   *string `json:"OptCommand,omitempty" xml:"OptCommand,omitempty"`
	RedirectType *string `json:"RedirectType,omitempty" xml:"RedirectType,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) SetDeviceName(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules {
	s.DeviceName = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) SetDevicePid(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules {
	s.DevicePid = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) SetDeviceType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules {
	s.DeviceType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) SetDeviceVid(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules {
	s.DeviceVid = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) SetOptCommand(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules {
	s.OptCommand = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules) SetRedirectType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDeviceRules {
	s.RedirectType = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule struct {
	// The rule description.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The domain name.
	//
	// example:
	//
	// *.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// Indicates whether the domain name resolution is allowed. Valid values:
	//
	// 	- allow
	//
	// 	- block
	//
	// example:
	//
	// allow
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule) SetDescription(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule {
	s.Description = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule) SetDomain(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule {
	s.Domain = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule) SetPolicy(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsDomainResolveRule {
	s.Policy = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule struct {
	// The rule content.
	//
	// example:
	//
	// *.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// Indicates whether the rule is allowed.
	//
	// Valid values:
	//
	// 	- allow
	//
	// 	- block
	//
	// example:
	//
	// allow
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The rule type.
	//
	// Valid values:
	//
	// 	- prc: process
	//
	// 	- domain: domain name
	//
	// example:
	//
	// domain
	RuleType *string `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule) SetDomain(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule {
	s.Domain = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule) SetPolicy(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule {
	s.Policy = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule) SetRuleType(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsNetRedirectRule {
	s.RuleType = &v
	return s
}

type DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule struct {
	// The rule description.
	//
	// example:
	//
	// Test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The device class. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
	//
	// example:
	//
	// 0Eh
	DeviceClass *string `json:"DeviceClass,omitempty" xml:"DeviceClass,omitempty"`
	// The subclass of the device. This parameter is required when `usbRuleType` is set to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes).
	//
	// example:
	//
	// xxh
	DeviceSubclass *string `json:"DeviceSubclass,omitempty" xml:"DeviceSubclass,omitempty"`
	// The product ID.
	//
	// example:
	//
	// 08**
	ProductId *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	// Indicates whether USB redirection is allowed.
	//
	// Valid values:
	//
	// 	- 1: allowed
	//
	// 	- 2: not allowed
	//
	// example:
	//
	// 1
	UsbRedirectType *int64 `json:"UsbRedirectType,omitempty" xml:"UsbRedirectType,omitempty"`
	// The type of the USB redirection rule.
	//
	// Valid values:
	//
	// 	- 1: by device class
	//
	// 	- 2: by device vendor
	//
	// example:
	//
	// 1
	UsbRuleType *int64 `json:"UsbRuleType,omitempty" xml:"UsbRuleType,omitempty"`
	// The vendor ID (VID). For more information, see [Valid USB VIDs](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf).
	//
	// example:
	//
	// 04**
	VendorId *string `json:"VendorId,omitempty" xml:"VendorId,omitempty"`
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) SetDescription(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule {
	s.Description = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) SetDeviceClass(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule {
	s.DeviceClass = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) SetDeviceSubclass(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule {
	s.DeviceSubclass = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) SetProductId(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule {
	s.ProductId = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) SetUsbRedirectType(v int64) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule {
	s.UsbRedirectType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) SetUsbRuleType(v int64) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule {
	s.UsbRuleType = &v
	return s
}

func (s *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule) SetVendorId(v string) *DescribePolicyGroupsResponseBodyDescribePolicyGroupsUsbSupplyRedirectRule {
	s.VendorId = &v
	return s
}

type DescribePolicyGroupsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePolicyGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePolicyGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePolicyGroupsResponse) GoString() string {
	return s.String()
}

func (s *DescribePolicyGroupsResponse) SetHeaders(v map[string]*string) *DescribePolicyGroupsResponse {
	s.Headers = v
	return s
}

func (s *DescribePolicyGroupsResponse) SetStatusCode(v int32) *DescribePolicyGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePolicyGroupsResponse) SetBody(v *DescribePolicyGroupsResponseBody) *DescribePolicyGroupsResponse {
	s.Body = v
	return s
}

type DescribePriceRequest struct {
	// The number of the resources. Default value: 1.
	//
	// example:
	//
	// 1
	Amount *int32 `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The maximum public bandwidth. Unit: Mbit/s.
	//
	// 	- Valid values if the PayByTraffic parameter is set to PayByBandwidth: 10 to 1000
	//
	// 	- Valid values if the PayByTraffic parameter is set to PayByTraffic: 10 to 200
	//
	// example:
	//
	// 10
	Bandwidth         *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	Duration          *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	GroupDesktopCount *int32 `json:"GroupDesktopCount,omitempty" xml:"GroupDesktopCount,omitempty"`
	// The resource specifications.
	//
	// 	- If you set ResourceType to Desktop, set this parameter to one of the following values:
	//
	//     	- ecd.basic.small
	//
	//     	- ecd.basic.large
	//
	//     	- ecd.advanced.large
	//
	//     	- ecd.advanced.xlarge
	//
	//     	- ecd.performance.2xlarge
	//
	//     	- ecd.graphics.xlarge
	//
	//     	- ecd.graphics.2xlarge
	//
	//     	- ecd.advanced.xlarge_s8d2
	//
	//     	- ecd.advanced.xlarge_s8d7
	//
	//     	- ecd.graphics.1g72c
	//
	//     	- eds.general.2c2g
	//
	//     	- eds.general.2c4g
	//
	//     	- eds.general.2c8g
	//
	//     	- eds.general.4c8g
	//
	//     	- eds.general.4c16g
	//
	//     	- eds.general.8c16g
	//
	//     	- eds.general.8c32g
	//
	//     	- eds.general.16c32g
	//
	// 	- If you set ResourceType to OfficeSite, set this parameter to large.
	//
	// 	- If you set ResourceType to Bandwidth, leave this parameter empty.
	//
	// example:
	//
	// eds.general.2c2g
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// The metering method of the Internet access package. Valid values:
	//
	// 	- PayByBandwidth: pay-by-bandwidth
	//
	// 	- PayByTraffic: pay-by-data-transfer
	//
	// example:
	//
	// PayByTraffic
	InternetChargeType *string `json:"InternetChargeType,omitempty" xml:"InternetChargeType,omitempty"`
	// The OS. Valid values:
	//
	// 	- Windows
	//
	// 	- Linux
	//
	// Default value: Windows.
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The subscription duration. Default value: 1.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the billing cycle. Valid values:
	//
	// 	- Hour
	//
	// 	- Month
	//
	// 	- Year
	//
	// Default value: Hour.
	//
	// example:
	//
	// Hour
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The promotion ID.
	//
	// example:
	//
	// 123456
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource type. Valid values:
	//
	// 	- Desktop: cloud desktop
	//
	// 	- OfficeSite: workspace
	//
	// 	- Bandwidth: network bandwidth
	//
	// Default value: Desktop.
	//
	// example:
	//
	// Desktop
	ResourceType     *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	RootDiskCategory *string `json:"RootDiskCategory,omitempty" xml:"RootDiskCategory,omitempty"`
	// The system disk size. Unit: GiB.
	//
	// example:
	//
	// 80
	RootDiskSizeGib  *int32  `json:"RootDiskSizeGib,omitempty" xml:"RootDiskSizeGib,omitempty"`
	UserDiskCategory *string `json:"UserDiskCategory,omitempty" xml:"UserDiskCategory,omitempty"`
	// The data disk size. Unit: GiB.
	//
	// example:
	//
	// 100
	UserDiskSizeGib *int32 `json:"UserDiskSizeGib,omitempty" xml:"UserDiskSizeGib,omitempty"`
}

func (s DescribePriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceRequest) SetAmount(v int32) *DescribePriceRequest {
	s.Amount = &v
	return s
}

func (s *DescribePriceRequest) SetBandwidth(v int32) *DescribePriceRequest {
	s.Bandwidth = &v
	return s
}

func (s *DescribePriceRequest) SetDuration(v int32) *DescribePriceRequest {
	s.Duration = &v
	return s
}

func (s *DescribePriceRequest) SetGroupDesktopCount(v int32) *DescribePriceRequest {
	s.GroupDesktopCount = &v
	return s
}

func (s *DescribePriceRequest) SetInstanceType(v string) *DescribePriceRequest {
	s.InstanceType = &v
	return s
}

func (s *DescribePriceRequest) SetInternetChargeType(v string) *DescribePriceRequest {
	s.InternetChargeType = &v
	return s
}

func (s *DescribePriceRequest) SetOsType(v string) *DescribePriceRequest {
	s.OsType = &v
	return s
}

func (s *DescribePriceRequest) SetPeriod(v int32) *DescribePriceRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceRequest) SetPeriodUnit(v string) *DescribePriceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribePriceRequest) SetPromotionId(v string) *DescribePriceRequest {
	s.PromotionId = &v
	return s
}

func (s *DescribePriceRequest) SetRegionId(v string) *DescribePriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribePriceRequest) SetResourceType(v string) *DescribePriceRequest {
	s.ResourceType = &v
	return s
}

func (s *DescribePriceRequest) SetRootDiskCategory(v string) *DescribePriceRequest {
	s.RootDiskCategory = &v
	return s
}

func (s *DescribePriceRequest) SetRootDiskSizeGib(v int32) *DescribePriceRequest {
	s.RootDiskSizeGib = &v
	return s
}

func (s *DescribePriceRequest) SetUserDiskCategory(v string) *DescribePriceRequest {
	s.UserDiskCategory = &v
	return s
}

func (s *DescribePriceRequest) SetUserDiskSizeGib(v int32) *DescribePriceRequest {
	s.UserDiskSizeGib = &v
	return s
}

type DescribePriceResponseBody struct {
	// The price details.
	PriceInfo *DescribePriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// B1175630-3C44-4389-A3C1-15639FFC8EBC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBody) SetPriceInfo(v *DescribePriceResponseBodyPriceInfo) *DescribePriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribePriceResponseBody) SetRequestId(v string) *DescribePriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribePriceResponseBodyPriceInfo struct {
	FreeCdsQuota *bool  `json:"FreeCdsQuota,omitempty" xml:"FreeCdsQuota,omitempty"`
	FreeCdsSize  *int64 `json:"FreeCdsSize,omitempty" xml:"FreeCdsSize,omitempty"`
	// The information about the price.
	Price *DescribePriceResponseBodyPriceInfoPrice `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
	// The details of the promotion rules.
	Rules []*DescribePriceResponseBodyPriceInfoRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribePriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfo) SetFreeCdsQuota(v bool) *DescribePriceResponseBodyPriceInfo {
	s.FreeCdsQuota = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetFreeCdsSize(v int64) *DescribePriceResponseBodyPriceInfo {
	s.FreeCdsSize = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetPrice(v *DescribePriceResponseBodyPriceInfoPrice) *DescribePriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfo) SetRules(v []*DescribePriceResponseBodyPriceInfoRules) *DescribePriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribePriceResponseBodyPriceInfoPrice struct {
	// The unit of the currency.
	//
	// example:
	//
	// CNY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// The discounted price.
	//
	// example:
	//
	// 0
	DiscountPrice *float32           `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OrderLines    map[string]*string `json:"OrderLines,omitempty" xml:"OrderLines,omitempty"`
	// The original price.
	//
	// example:
	//
	// 2.796
	OriginalPrice *float32 `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	// The details of the promotion.
	Promotions []*DescribePriceResponseBodyPriceInfoPricePromotions `json:"Promotions,omitempty" xml:"Promotions,omitempty" type:"Repeated"`
	SpPrice    *int64                                               `json:"SpPrice,omitempty" xml:"SpPrice,omitempty"`
	// The actual price that is paid. The original price minus the discounted part equals the actual price.
	//
	// example:
	//
	// 2.796
	TradePrice *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribePriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetOrderLines(v map[string]*string) *DescribePriceResponseBodyPriceInfoPrice {
	s.OrderLines = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetPromotions(v []*DescribePriceResponseBodyPriceInfoPricePromotions) *DescribePriceResponseBodyPriceInfoPrice {
	s.Promotions = v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetSpPrice(v int64) *DescribePriceResponseBodyPriceInfoPrice {
	s.SpPrice = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribePriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

type DescribePriceResponseBodyPriceInfoPricePromotions struct {
	// The description of the promotion rule.
	//
	// example:
	//
	// test
	OptionCode *string `json:"OptionCode,omitempty" xml:"OptionCode,omitempty"`
	// The description of the promotion.
	//
	// example:
	//
	// Get started with new services with a discount.
	PromotionDesc *string `json:"PromotionDesc,omitempty" xml:"PromotionDesc,omitempty"`
	// The promotion ID.
	//
	// example:
	//
	// 123456
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The promotion name.
	//
	// example:
	//
	// Special Offer
	PromotionName *string `json:"PromotionName,omitempty" xml:"PromotionName,omitempty"`
	// Indicates whether an item is selected.
	//
	// example:
	//
	// false
	Selected *bool `json:"Selected,omitempty" xml:"Selected,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoPricePromotions) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoPricePromotions) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoPricePromotions) SetOptionCode(v string) *DescribePriceResponseBodyPriceInfoPricePromotions {
	s.OptionCode = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPricePromotions) SetPromotionDesc(v string) *DescribePriceResponseBodyPriceInfoPricePromotions {
	s.PromotionDesc = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPricePromotions) SetPromotionId(v string) *DescribePriceResponseBodyPriceInfoPricePromotions {
	s.PromotionId = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPricePromotions) SetPromotionName(v string) *DescribePriceResponseBodyPriceInfoPricePromotions {
	s.PromotionName = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoPricePromotions) SetSelected(v bool) *DescribePriceResponseBodyPriceInfoPricePromotions {
	s.Selected = &v
	return s
}

type DescribePriceResponseBodyPriceInfoRules struct {
	// The description of the rule.
	//
	// example:
	//
	// Receive a 15% discount on a one-year subscription.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The rule ID.
	//
	// example:
	//
	// 587
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribePriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribePriceResponseBodyPriceInfoRules) SetDescription(v string) *DescribePriceResponseBodyPriceInfoRules {
	s.Description = &v
	return s
}

func (s *DescribePriceResponseBodyPriceInfoRules) SetRuleId(v int64) *DescribePriceResponseBodyPriceInfoRules {
	s.RuleId = &v
	return s
}

type DescribePriceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceResponse) SetHeaders(v map[string]*string) *DescribePriceResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceResponse) SetStatusCode(v int32) *DescribePriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePriceResponse) SetBody(v *DescribePriceResponseBody) *DescribePriceResponse {
	s.Body = v
	return s
}

type DescribePriceForCreateDesktopOversoldGroupRequest struct {
	ConcurrenceCount  *int32  `json:"ConcurrenceCount,omitempty" xml:"ConcurrenceCount,omitempty"`
	DataDiskSize      *int32  `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	DesktopType       *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	OversoldUserCount *int32  `json:"OversoldUserCount,omitempty" xml:"OversoldUserCount,omitempty"`
	Period            *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit        *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	SystemDiskSize    *int32  `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s DescribePriceForCreateDesktopOversoldGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForCreateDesktopOversoldGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceForCreateDesktopOversoldGroupRequest) SetConcurrenceCount(v int32) *DescribePriceForCreateDesktopOversoldGroupRequest {
	s.ConcurrenceCount = &v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupRequest) SetDataDiskSize(v int32) *DescribePriceForCreateDesktopOversoldGroupRequest {
	s.DataDiskSize = &v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupRequest) SetDesktopType(v string) *DescribePriceForCreateDesktopOversoldGroupRequest {
	s.DesktopType = &v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupRequest) SetOversoldUserCount(v int32) *DescribePriceForCreateDesktopOversoldGroupRequest {
	s.OversoldUserCount = &v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupRequest) SetPeriod(v int32) *DescribePriceForCreateDesktopOversoldGroupRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupRequest) SetPeriodUnit(v string) *DescribePriceForCreateDesktopOversoldGroupRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupRequest) SetSystemDiskSize(v int32) *DescribePriceForCreateDesktopOversoldGroupRequest {
	s.SystemDiskSize = &v
	return s
}

type DescribePriceForCreateDesktopOversoldGroupResponseBody struct {
	Data      *DescribePriceForCreateDesktopOversoldGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePriceForCreateDesktopOversoldGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForCreateDesktopOversoldGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceForCreateDesktopOversoldGroupResponseBody) SetData(v *DescribePriceForCreateDesktopOversoldGroupResponseBodyData) *DescribePriceForCreateDesktopOversoldGroupResponseBody {
	s.Data = v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupResponseBody) SetRequestId(v string) *DescribePriceForCreateDesktopOversoldGroupResponseBody {
	s.RequestId = &v
	return s
}

type DescribePriceForCreateDesktopOversoldGroupResponseBodyData struct {
	Price *string `json:"Price,omitempty" xml:"Price,omitempty"`
}

func (s DescribePriceForCreateDesktopOversoldGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForCreateDesktopOversoldGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribePriceForCreateDesktopOversoldGroupResponseBodyData) SetPrice(v string) *DescribePriceForCreateDesktopOversoldGroupResponseBodyData {
	s.Price = &v
	return s
}

type DescribePriceForCreateDesktopOversoldGroupResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePriceForCreateDesktopOversoldGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePriceForCreateDesktopOversoldGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForCreateDesktopOversoldGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceForCreateDesktopOversoldGroupResponse) SetHeaders(v map[string]*string) *DescribePriceForCreateDesktopOversoldGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupResponse) SetStatusCode(v int32) *DescribePriceForCreateDesktopOversoldGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePriceForCreateDesktopOversoldGroupResponse) SetBody(v *DescribePriceForCreateDesktopOversoldGroupResponseBody) *DescribePriceForCreateDesktopOversoldGroupResponse {
	s.Body = v
	return s
}

type DescribePriceForModifyDesktopOversoldGroupSaleRequest struct {
	ConcurrenceCount  *int32  `json:"ConcurrenceCount,omitempty" xml:"ConcurrenceCount,omitempty"`
	OversoldGroupId   *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	OversoldUserCount *int32  `json:"OversoldUserCount,omitempty" xml:"OversoldUserCount,omitempty"`
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleRequest) SetConcurrenceCount(v int32) *DescribePriceForModifyDesktopOversoldGroupSaleRequest {
	s.ConcurrenceCount = &v
	return s
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleRequest) SetOversoldGroupId(v string) *DescribePriceForModifyDesktopOversoldGroupSaleRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleRequest) SetOversoldUserCount(v int32) *DescribePriceForModifyDesktopOversoldGroupSaleRequest {
	s.OversoldUserCount = &v
	return s
}

type DescribePriceForModifyDesktopOversoldGroupSaleResponseBody struct {
	Data      *DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleResponseBody) SetData(v *DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData) *DescribePriceForModifyDesktopOversoldGroupSaleResponseBody {
	s.Data = v
	return s
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleResponseBody) SetRequestId(v string) *DescribePriceForModifyDesktopOversoldGroupSaleResponseBody {
	s.RequestId = &v
	return s
}

type DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData struct {
	Price *string `json:"Price,omitempty" xml:"Price,omitempty"`
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData) SetPrice(v string) *DescribePriceForModifyDesktopOversoldGroupSaleResponseBodyData {
	s.Price = &v
	return s
}

type DescribePriceForModifyDesktopOversoldGroupSaleResponse struct {
	Headers    map[string]*string                                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePriceForModifyDesktopOversoldGroupSaleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForModifyDesktopOversoldGroupSaleResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleResponse) SetHeaders(v map[string]*string) *DescribePriceForModifyDesktopOversoldGroupSaleResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleResponse) SetStatusCode(v int32) *DescribePriceForModifyDesktopOversoldGroupSaleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePriceForModifyDesktopOversoldGroupSaleResponse) SetBody(v *DescribePriceForModifyDesktopOversoldGroupSaleResponseBody) *DescribePriceForModifyDesktopOversoldGroupSaleResponse {
	s.Body = v
	return s
}

type DescribePriceForRenewDesktopOversoldGroupRequest struct {
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	Period          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit      *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s DescribePriceForRenewDesktopOversoldGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForRenewDesktopOversoldGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribePriceForRenewDesktopOversoldGroupRequest) SetOversoldGroupId(v string) *DescribePriceForRenewDesktopOversoldGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribePriceForRenewDesktopOversoldGroupRequest) SetPeriod(v int32) *DescribePriceForRenewDesktopOversoldGroupRequest {
	s.Period = &v
	return s
}

func (s *DescribePriceForRenewDesktopOversoldGroupRequest) SetPeriodUnit(v string) *DescribePriceForRenewDesktopOversoldGroupRequest {
	s.PeriodUnit = &v
	return s
}

type DescribePriceForRenewDesktopOversoldGroupResponseBody struct {
	Data      *DescribePriceForRenewDesktopOversoldGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePriceForRenewDesktopOversoldGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForRenewDesktopOversoldGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePriceForRenewDesktopOversoldGroupResponseBody) SetData(v *DescribePriceForRenewDesktopOversoldGroupResponseBodyData) *DescribePriceForRenewDesktopOversoldGroupResponseBody {
	s.Data = v
	return s
}

func (s *DescribePriceForRenewDesktopOversoldGroupResponseBody) SetRequestId(v string) *DescribePriceForRenewDesktopOversoldGroupResponseBody {
	s.RequestId = &v
	return s
}

type DescribePriceForRenewDesktopOversoldGroupResponseBodyData struct {
	Price *string `json:"Price,omitempty" xml:"Price,omitempty"`
}

func (s DescribePriceForRenewDesktopOversoldGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForRenewDesktopOversoldGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribePriceForRenewDesktopOversoldGroupResponseBodyData) SetPrice(v string) *DescribePriceForRenewDesktopOversoldGroupResponseBodyData {
	s.Price = &v
	return s
}

type DescribePriceForRenewDesktopOversoldGroupResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePriceForRenewDesktopOversoldGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePriceForRenewDesktopOversoldGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePriceForRenewDesktopOversoldGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribePriceForRenewDesktopOversoldGroupResponse) SetHeaders(v map[string]*string) *DescribePriceForRenewDesktopOversoldGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribePriceForRenewDesktopOversoldGroupResponse) SetStatusCode(v int32) *DescribePriceForRenewDesktopOversoldGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePriceForRenewDesktopOversoldGroupResponse) SetBody(v *DescribePriceForRenewDesktopOversoldGroupResponseBody) *DescribePriceForRenewDesktopOversoldGroupResponse {
	s.Body = v
	return s
}

type DescribeRecordingsRequest struct {
	// example:
	//
	// ecd-hlh41mk78dugw****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// example:
	//
	// 20230424004441
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// false
	NeedSignedUrl *bool `json:"NeedSignedUrl,omitempty" xml:"NeedSignedUrl,omitempty"`
	// example:
	//
	// aGN4YzAxQGNuLWhhbmd6aG91LjExNzU5NTMyNjgzMTQ1****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// pg-gx2x1dhsmthe9****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 10
	SignedUrlExpireMinutes *int32 `json:"SignedUrlExpireMinutes,omitempty" xml:"SignedUrlExpireMinutes,omitempty"`
	// example:
	//
	// 20230424000000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRecordingsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordingsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRecordingsRequest) SetDesktopId(v string) *DescribeRecordingsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeRecordingsRequest) SetEndTime(v string) *DescribeRecordingsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeRecordingsRequest) SetMaxResults(v int32) *DescribeRecordingsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeRecordingsRequest) SetNeedSignedUrl(v bool) *DescribeRecordingsRequest {
	s.NeedSignedUrl = &v
	return s
}

func (s *DescribeRecordingsRequest) SetNextToken(v string) *DescribeRecordingsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeRecordingsRequest) SetPolicyGroupId(v string) *DescribeRecordingsRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeRecordingsRequest) SetRegionId(v string) *DescribeRecordingsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRecordingsRequest) SetSignedUrlExpireMinutes(v int32) *DescribeRecordingsRequest {
	s.SignedUrlExpireMinutes = &v
	return s
}

func (s *DescribeRecordingsRequest) SetStartTime(v string) *DescribeRecordingsRequest {
	s.StartTime = &v
	return s
}

type DescribeRecordingsResponseBody struct {
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nbCQ7ar+fECeh1IuWQXi39R5eoJ68zWp99mTAKRRNRhw==
	NextToken  *string                                     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	Recordings []*DescribeRecordingsResponseBodyRecordings `json:"Recordings,omitempty" xml:"Recordings,omitempty" type:"Repeated"`
	// example:
	//
	// 327CFE78-1C0D-51AC-A9C6-BCEDF0DD44D6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRecordingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordingsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRecordingsResponseBody) SetNextToken(v string) *DescribeRecordingsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeRecordingsResponseBody) SetRecordings(v []*DescribeRecordingsResponseBodyRecordings) *DescribeRecordingsResponseBody {
	s.Recordings = v
	return s
}

func (s *DescribeRecordingsResponseBody) SetRequestId(v string) *DescribeRecordingsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRecordingsResponseBodyRecordings struct {
	// example:
	//
	// ecd-10v0vuvm616sk****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// example:
	//
	// DemoComputer
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// example:
	//
	// 2023-04-10T07:26:06Z
	EndTime    *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// example:
	//
	// pg-4w5nk44zo5yl129dd/1mk78dugw344.mp4
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// example:
	//
	// pg-6dn811rzrwh9ws4z6
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// example:
	//
	// 1742845
	RecordingSize *int32 `json:"RecordingSize,omitempty" xml:"RecordingSize,omitempty"`
	// example:
	//
	// alltime
	RecordingType *string `json:"RecordingType,omitempty" xml:"RecordingType,omitempty"`
	SignedUrl     *string `json:"SignedUrl,omitempty" xml:"SignedUrl,omitempty"`
	// example:
	//
	// 2023-04-10T07:26:06Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeRecordingsResponseBodyRecordings) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordingsResponseBodyRecordings) GoString() string {
	return s.String()
}

func (s *DescribeRecordingsResponseBodyRecordings) SetDesktopId(v string) *DescribeRecordingsResponseBodyRecordings {
	s.DesktopId = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetDesktopName(v string) *DescribeRecordingsResponseBodyRecordings {
	s.DesktopName = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetEndTime(v string) *DescribeRecordingsResponseBodyRecordings {
	s.EndTime = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetEndUserIds(v []*string) *DescribeRecordingsResponseBodyRecordings {
	s.EndUserIds = v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetFilePath(v string) *DescribeRecordingsResponseBodyRecordings {
	s.FilePath = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetPolicyGroupId(v string) *DescribeRecordingsResponseBodyRecordings {
	s.PolicyGroupId = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetRecordingSize(v int32) *DescribeRecordingsResponseBodyRecordings {
	s.RecordingSize = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetRecordingType(v string) *DescribeRecordingsResponseBodyRecordings {
	s.RecordingType = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetSignedUrl(v string) *DescribeRecordingsResponseBodyRecordings {
	s.SignedUrl = &v
	return s
}

func (s *DescribeRecordingsResponseBodyRecordings) SetStartTime(v string) *DescribeRecordingsResponseBodyRecordings {
	s.StartTime = &v
	return s
}

type DescribeRecordingsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRecordingsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRecordingsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRecordingsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRecordingsResponse) SetHeaders(v map[string]*string) *DescribeRecordingsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRecordingsResponse) SetStatusCode(v int32) *DescribeRecordingsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRecordingsResponse) SetBody(v *DescribeRecordingsResponseBody) *DescribeRecordingsResponse {
	s.Body = v
	return s
}

type DescribeRefundPriceRequest struct {
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// example:
	//
	// RemainRefund
	RefundType *string `json:"RefundType,omitempty" xml:"RefundType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRefundPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRefundPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRefundPriceRequest) SetDesktopId(v []*string) *DescribeRefundPriceRequest {
	s.DesktopId = v
	return s
}

func (s *DescribeRefundPriceRequest) SetRefundType(v string) *DescribeRefundPriceRequest {
	s.RefundType = &v
	return s
}

func (s *DescribeRefundPriceRequest) SetRegionId(v string) *DescribeRefundPriceRequest {
	s.RegionId = &v
	return s
}

type DescribeRefundPriceResponseBody struct {
	PriceInfo *DescribeRefundPriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRefundPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRefundPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRefundPriceResponseBody) SetPriceInfo(v *DescribeRefundPriceResponseBodyPriceInfo) *DescribeRefundPriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribeRefundPriceResponseBody) SetRequestId(v string) *DescribeRefundPriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRefundPriceResponseBodyPriceInfo struct {
	// example:
	//
	// CNY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// example:
	//
	// 3990.75
	RefundFee *float32 `json:"RefundFee,omitempty" xml:"RefundFee,omitempty"`
}

func (s DescribeRefundPriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRefundPriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeRefundPriceResponseBodyPriceInfo) SetCurrency(v string) *DescribeRefundPriceResponseBodyPriceInfo {
	s.Currency = &v
	return s
}

func (s *DescribeRefundPriceResponseBodyPriceInfo) SetRefundFee(v float32) *DescribeRefundPriceResponseBodyPriceInfo {
	s.RefundFee = &v
	return s
}

type DescribeRefundPriceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRefundPriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRefundPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRefundPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRefundPriceResponse) SetHeaders(v map[string]*string) *DescribeRefundPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeRefundPriceResponse) SetStatusCode(v int32) *DescribeRefundPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRefundPriceResponse) SetBody(v *DescribeRefundPriceResponseBody) *DescribeRefundPriceResponse {
	s.Body = v
	return s
}

type DescribeRegionsRequest struct {
	// The display name of the region, which varies based on the current language.
	//
	// example:
	//
	// zh
	AcceptLanguage *string `json:"AcceptLanguage,omitempty" xml:"AcceptLanguage,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeRegionsRequest) SetAcceptLanguage(v string) *DescribeRegionsRequest {
	s.AcceptLanguage = &v
	return s
}

func (s *DescribeRegionsRequest) SetRegionId(v string) *DescribeRegionsRequest {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponseBody struct {
	// The information about regions.
	Regions []*DescribeRegionsResponseBodyRegions `json:"Regions,omitempty" xml:"Regions,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetRegions(v []*DescribeRegionsResponseBodyRegions) *DescribeRegionsResponseBody {
	s.Regions = v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRegionsResponseBodyRegions struct {
	// The display name of the region, which varies based on the current language.
	//
	// example:
	//
	// China (Hangzhou)
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	// The endpoint of the region.
	//
	// example:
	//
	// ecd.cn-hangzhou.aliyuncs.com
	RegionEndpoint *string `json:"RegionEndpoint,omitempty" xml:"RegionEndpoint,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeRegionsResponseBodyRegions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyRegions) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyRegions) SetLocalName(v string) *DescribeRegionsResponseBodyRegions {
	s.LocalName = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) SetRegionEndpoint(v string) *DescribeRegionsResponseBodyRegions {
	s.RegionEndpoint = &v
	return s
}

func (s *DescribeRegionsResponseBodyRegions) SetRegionId(v string) *DescribeRegionsResponseBodyRegions {
	s.RegionId = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeRenewalPriceRequest struct {
	// example:
	//
	// ecd-6ldllk9zxcpfhs****
	InstanceId  *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	InstanceIds []*string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// Desktop
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s DescribeRenewalPriceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceRequest) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceRequest) SetInstanceId(v string) *DescribeRenewalPriceRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetInstanceIds(v []*string) *DescribeRenewalPriceRequest {
	s.InstanceIds = v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPeriod(v int32) *DescribeRenewalPriceRequest {
	s.Period = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetPeriodUnit(v string) *DescribeRenewalPriceRequest {
	s.PeriodUnit = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetRegionId(v string) *DescribeRenewalPriceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeRenewalPriceRequest) SetResourceType(v string) *DescribeRenewalPriceRequest {
	s.ResourceType = &v
	return s
}

type DescribeRenewalPriceResponseBody struct {
	PriceInfo *DescribeRenewalPriceResponseBodyPriceInfo `json:"PriceInfo,omitempty" xml:"PriceInfo,omitempty" type:"Struct"`
	// example:
	//
	// 72E47B1E-6B11-5A11-A27C-7A80F866****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeRenewalPriceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBody) SetPriceInfo(v *DescribeRenewalPriceResponseBodyPriceInfo) *DescribeRenewalPriceResponseBody {
	s.PriceInfo = v
	return s
}

func (s *DescribeRenewalPriceResponseBody) SetRequestId(v string) *DescribeRenewalPriceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfo struct {
	Price *DescribeRenewalPriceResponseBodyPriceInfoPrice   `json:"Price,omitempty" xml:"Price,omitempty" type:"Struct"`
	Rules []*DescribeRenewalPriceResponseBodyPriceInfoRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfo) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetPrice(v *DescribeRenewalPriceResponseBodyPriceInfoPrice) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.Price = v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfo) SetRules(v []*DescribeRenewalPriceResponseBodyPriceInfoRules) *DescribeRenewalPriceResponseBodyPriceInfo {
	s.Rules = v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoPrice struct {
	// example:
	//
	// CNY
	Currency *string `json:"Currency,omitempty" xml:"Currency,omitempty"`
	// example:
	//
	// 15.8
	DiscountPrice *float32           `json:"DiscountPrice,omitempty" xml:"DiscountPrice,omitempty"`
	OrderLines    map[string]*string `json:"OrderLines,omitempty" xml:"OrderLines,omitempty"`
	// example:
	//
	// 79.0
	OriginalPrice *float32                                                    `json:"OriginalPrice,omitempty" xml:"OriginalPrice,omitempty"`
	Promotions    []*DescribeRenewalPriceResponseBodyPriceInfoPricePromotions `json:"Promotions,omitempty" xml:"Promotions,omitempty" type:"Repeated"`
	// example:
	//
	// 63.2
	TradePrice *float32 `json:"TradePrice,omitempty" xml:"TradePrice,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPrice) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPrice) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetCurrency(v string) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.Currency = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetDiscountPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.DiscountPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetOrderLines(v map[string]*string) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.OrderLines = v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetOriginalPrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.OriginalPrice = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetPromotions(v []*DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.Promotions = v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPrice) SetTradePrice(v float32) *DescribeRenewalPriceResponseBodyPriceInfoPrice {
	s.TradePrice = &v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoPricePromotions struct {
	// example:
	//
	// test
	OptionCode    *string `json:"OptionCode,omitempty" xml:"OptionCode,omitempty"`
	PromotionDesc *string `json:"PromotionDesc,omitempty" xml:"PromotionDesc,omitempty"`
	// example:
	//
	// promo_option
	PromotionId   *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	PromotionName *string `json:"PromotionName,omitempty" xml:"PromotionName,omitempty"`
	// example:
	//
	// false
	Selected *bool `json:"Selected,omitempty" xml:"Selected,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) SetOptionCode(v string) *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions {
	s.OptionCode = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) SetPromotionDesc(v string) *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions {
	s.PromotionDesc = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) SetPromotionId(v string) *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions {
	s.PromotionId = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) SetPromotionName(v string) *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions {
	s.PromotionName = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions) SetSelected(v bool) *DescribeRenewalPriceResponseBodyPriceInfoPricePromotions {
	s.Selected = &v
	return s
}

type DescribeRenewalPriceResponseBodyPriceInfoRules struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 29644
	RuleId *int64 `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s DescribeRenewalPriceResponseBodyPriceInfoRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponseBodyPriceInfoRules) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoRules) SetDescription(v string) *DescribeRenewalPriceResponseBodyPriceInfoRules {
	s.Description = &v
	return s
}

func (s *DescribeRenewalPriceResponseBodyPriceInfoRules) SetRuleId(v int64) *DescribeRenewalPriceResponseBodyPriceInfoRules {
	s.RuleId = &v
	return s
}

type DescribeRenewalPriceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRenewalPriceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRenewalPriceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRenewalPriceResponse) GoString() string {
	return s.String()
}

func (s *DescribeRenewalPriceResponse) SetHeaders(v map[string]*string) *DescribeRenewalPriceResponse {
	s.Headers = v
	return s
}

func (s *DescribeRenewalPriceResponse) SetStatusCode(v int32) *DescribeRenewalPriceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRenewalPriceResponse) SetBody(v *DescribeRenewalPriceResponseBody) *DescribeRenewalPriceResponse {
	s.Body = v
	return s
}

type DescribeSessionStatisticRequest struct {
	// The end of the time range to query.
	//
	// example:
	//
	// 1677808889806
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// cn-shanghai+dir-259382****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The query interval. Unit: seconds. Valid values:
	//
	// 	- 60
	//
	// 	- 120
	//
	// example:
	//
	// 60
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The region ID.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies to search for session information by region ID. This parameter is used to filter desktop information of a specific region.
	//
	// example:
	//
	// cn-hangzhou
	SearchRegionId *string `json:"SearchRegionId,omitempty" xml:"SearchRegionId,omitempty"`
	// The beginning of the time range to query.
	//
	// example:
	//
	// 1679449506572
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSessionStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSessionStatisticRequest) GoString() string {
	return s.String()
}

func (s *DescribeSessionStatisticRequest) SetEndTime(v string) *DescribeSessionStatisticRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSessionStatisticRequest) SetOfficeSiteId(v string) *DescribeSessionStatisticRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeSessionStatisticRequest) SetPeriod(v int32) *DescribeSessionStatisticRequest {
	s.Period = &v
	return s
}

func (s *DescribeSessionStatisticRequest) SetRegionId(v string) *DescribeSessionStatisticRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSessionStatisticRequest) SetSearchRegionId(v string) *DescribeSessionStatisticRequest {
	s.SearchRegionId = &v
	return s
}

func (s *DescribeSessionStatisticRequest) SetStartTime(v string) *DescribeSessionStatisticRequest {
	s.StartTime = &v
	return s
}

type DescribeSessionStatisticResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// C5528624-C6ED-5CA4-A4A2-7C30DBF2****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The statistics.
	Statistic []*DescribeSessionStatisticResponseBodyStatistic `json:"Statistic,omitempty" xml:"Statistic,omitempty" type:"Repeated"`
	// The total number of sessions returned.
	//
	// example:
	//
	// 1
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeSessionStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSessionStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSessionStatisticResponseBody) SetRequestId(v string) *DescribeSessionStatisticResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSessionStatisticResponseBody) SetStatistic(v []*DescribeSessionStatisticResponseBodyStatistic) *DescribeSessionStatisticResponseBody {
	s.Statistic = v
	return s
}

func (s *DescribeSessionStatisticResponseBody) SetTotalCount(v string) *DescribeSessionStatisticResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeSessionStatisticResponseBodyStatistic struct {
	// The total number of sessions in the time range.
	//
	// example:
	//
	// 4
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The point in time.
	//
	// example:
	//
	// 1690164443508
	TimePoint *int64 `json:"TimePoint,omitempty" xml:"TimePoint,omitempty"`
}

func (s DescribeSessionStatisticResponseBodyStatistic) String() string {
	return tea.Prettify(s)
}

func (s DescribeSessionStatisticResponseBodyStatistic) GoString() string {
	return s.String()
}

func (s *DescribeSessionStatisticResponseBodyStatistic) SetCount(v int64) *DescribeSessionStatisticResponseBodyStatistic {
	s.Count = &v
	return s
}

func (s *DescribeSessionStatisticResponseBodyStatistic) SetTimePoint(v int64) *DescribeSessionStatisticResponseBodyStatistic {
	s.TimePoint = &v
	return s
}

type DescribeSessionStatisticResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSessionStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSessionStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSessionStatisticResponse) GoString() string {
	return s.String()
}

func (s *DescribeSessionStatisticResponse) SetHeaders(v map[string]*string) *DescribeSessionStatisticResponse {
	s.Headers = v
	return s
}

func (s *DescribeSessionStatisticResponse) SetStatusCode(v int32) *DescribeSessionStatisticResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSessionStatisticResponse) SetBody(v *DescribeSessionStatisticResponseBody) *DescribeSessionStatisticResponse {
	s.Body = v
	return s
}

type DescribeSnapshotsRequest struct {
	// The user who creates the snapshot.
	//
	// example:
	//
	// Administrator
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.
	//
	// example:
	//
	// 2020-11-31T06:32:31Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The maximum number of entries to return on each page.
	//
	// 	- Valid values: 1 to 100
	//
	// 	- Default value: 10
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// 8051af8d01b5479bec9f5ddf02e4a8fbd0ab6e7e43f8****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The snapshot ID.
	//
	// example:
	//
	// s-2ze81owrnv9pity4****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The name of the snapshot. The name must be 2 to 127 characters in length. The name must start with a letter. The name can contain letters, digits, underscores (_), and hyphens (-). The name cannot start with `auto` because snapshots whose names start with auto are recognized as automatic snapshots.
	//
	// example:
	//
	// test_data_disk
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	// The category of the snapshots.
	//
	// Default value: all. Valid values:
	//
	// 	- all: all snapshot categories
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- auto: automatic snapshots
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- user: manual snapshots
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// user
	SnapshotType *string `json:"SnapshotType,omitempty" xml:"SnapshotType,omitempty"`
	// The type of the disk for which the snapshot is created.
	//
	// >  The value of this parameter is not case-sensitive.
	//
	// Valid values:
	//
	// 	- Data: data disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- System: system disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// system
	SourceDiskType *string `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	// The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-MM-ddTHH:mm:ssZ` format. The time must be in UTC.
	//
	// example:
	//
	// 2020-11-30T06:32:31Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeSnapshotsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsRequest) SetCreator(v string) *DescribeSnapshotsRequest {
	s.Creator = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetDesktopId(v string) *DescribeSnapshotsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetDesktopName(v string) *DescribeSnapshotsRequest {
	s.DesktopName = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetEndTime(v string) *DescribeSnapshotsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetMaxResults(v int32) *DescribeSnapshotsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetNextToken(v string) *DescribeSnapshotsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetRegionId(v string) *DescribeSnapshotsRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotId(v string) *DescribeSnapshotsRequest {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotName(v string) *DescribeSnapshotsRequest {
	s.SnapshotName = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSnapshotType(v string) *DescribeSnapshotsRequest {
	s.SnapshotType = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetSourceDiskType(v string) *DescribeSnapshotsRequest {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotsRequest) SetStartTime(v string) *DescribeSnapshotsRequest {
	s.StartTime = &v
	return s
}

type DescribeSnapshotsResponseBody struct {
	// If the NextToken parameter is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 51592A88-0F2C-55E6-AD2C-2AD9C10D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details of the queried snapshots.
	Snapshots []*DescribeSnapshotsResponseBodySnapshots `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
}

func (s DescribeSnapshotsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBody) SetNextToken(v string) *DescribeSnapshotsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetRequestId(v string) *DescribeSnapshotsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSnapshotsResponseBody) SetSnapshots(v []*DescribeSnapshotsResponseBodySnapshots) *DescribeSnapshotsResponseBody {
	s.Snapshots = v
	return s
}

type DescribeSnapshotsResponseBodySnapshots struct {
	// The point in time at which the snapshot was created. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-20T14:52:28Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The user who creates the snapshot.
	//
	// example:
	//
	// Administrator
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The time when the snapshot was deleted. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the `yyyy-mm-ddthh:mm:ssz` format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-20T14:52:28Z
	DeletionTime *string `json:"DeletionTime,omitempty" xml:"DeletionTime,omitempty"`
	// The description of the snapshot.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the cloud computer to which the snapshot belongs.
	//
	// example:
	//
	// ecd-g03l3tlm8djoj****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// test
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The status of the cloud computer.
	//
	// Valid values:
	//
	// 	- Stopped
	//
	// 	- Starting
	//
	// 	- Rebuilding
	//
	// 	- Running
	//
	// 	- Stopping
	//
	// 	- Expired
	//
	// 	- Deleted
	//
	// 	- Pending
	//
	// example:
	//
	// Running
	DesktopStatus *string `json:"DesktopStatus,omitempty" xml:"DesktopStatus,omitempty"`
	// The progress of creating the snapshot. Unit: %.
	//
	// example:
	//
	// 100%
	Progress *string `json:"Progress,omitempty" xml:"Progress,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- HDX: High-definition Experience (HDX) protocol
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ASP: in-house Adaptive Streaming Protocol (ASP)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The remaining time that is required to complete the snapshot creation. Unit: seconds.
	//
	// >  When the `Status` value is `PROGRESSING`, the `RemainTime` value is `-1`. A value of -1 indicates that the system is calculating the remaining time.
	//
	// example:
	//
	// 30
	RemainTime *int32 `json:"RemainTime,omitempty" xml:"RemainTime,omitempty"`
	// The snapshot ID.
	//
	// example:
	//
	// s-2zeipxmnhej803x7****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
	// The name of the snapshot.
	//
	// example:
	//
	// testSnapshotName
	SnapshotName *string `json:"SnapshotName,omitempty" xml:"SnapshotName,omitempty"`
	// The type of the snapshot.
	//
	// Valid values:
	//
	// 	- AUTO: automatic snapshot
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- USER: manual snapshot
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// USER
	SnapshotType *string `json:"SnapshotType,omitempty" xml:"SnapshotType,omitempty"`
	// The capacity of the source disk. Unit: GiB.
	//
	// example:
	//
	// 150
	SourceDiskSize *string `json:"SourceDiskSize,omitempty" xml:"SourceDiskSize,omitempty"`
	// The type of the source disk.
	//
	// Valid values:
	//
	// 	- SYSTEM: system disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DATA: data disk
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SYSTEM
	SourceDiskType *string `json:"SourceDiskType,omitempty" xml:"SourceDiskType,omitempty"`
	// The status of the snapshot.
	//
	// Valid values:
	//
	// 	- PROGRESSING: The snapshot is being created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- FAILED: The snapshot fails to be created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ACCOMPLISHED: The snapshot is created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// ACCOMPLISHED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// Indicates whether disk encryption is enabled.
	//
	// example:
	//
	// false
	VolumeEncryptionEnabled *bool `json:"VolumeEncryptionEnabled,omitempty" xml:"VolumeEncryptionEnabled,omitempty"`
	// The ID of the Key Management Service (KMS) key that is used when disk encryption is enabled. You can call the [ListKeys](https://help.aliyun.com/document_detail/28951.html) operation to query the list of KMS keys.
	//
	// example:
	//
	// 08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4****
	VolumeEncryptionKey *string `json:"VolumeEncryptionKey,omitempty" xml:"VolumeEncryptionKey,omitempty"`
}

func (s DescribeSnapshotsResponseBodySnapshots) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponseBodySnapshots) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetCreationTime(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.CreationTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetCreator(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Creator = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetDeletionTime(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.DeletionTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetDescription(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Description = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetDesktopId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.DesktopId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetDesktopName(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.DesktopName = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetDesktopStatus(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.DesktopStatus = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetProgress(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Progress = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetProtocolType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.ProtocolType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetRemainTime(v int32) *DescribeSnapshotsResponseBodySnapshots {
	s.RemainTime = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotId(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotId = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotName(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotName = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSnapshotType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SnapshotType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskSize(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskSize = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetSourceDiskType(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.SourceDiskType = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetStatus(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.Status = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetVolumeEncryptionEnabled(v bool) *DescribeSnapshotsResponseBodySnapshots {
	s.VolumeEncryptionEnabled = &v
	return s
}

func (s *DescribeSnapshotsResponseBodySnapshots) SetVolumeEncryptionKey(v string) *DescribeSnapshotsResponseBodySnapshots {
	s.VolumeEncryptionKey = &v
	return s
}

type DescribeSnapshotsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSnapshotsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSnapshotsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSnapshotsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSnapshotsResponse) SetHeaders(v map[string]*string) *DescribeSnapshotsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSnapshotsResponse) SetStatusCode(v int32) *DescribeSnapshotsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSnapshotsResponse) SetBody(v *DescribeSnapshotsResponseBody) *DescribeSnapshotsResponse {
	s.Body = v
	return s
}

type DescribeUserConnectTimeRequest struct {
	EndTime         *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EndUserId       *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	MaxResults      *int32  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken       *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	StartTime       *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	UserDesktopId   *string `json:"UserDesktopId,omitempty" xml:"UserDesktopId,omitempty"`
	UserGroupId     *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DescribeUserConnectTimeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectTimeRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectTimeRequest) SetEndTime(v string) *DescribeUserConnectTimeRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeUserConnectTimeRequest) SetEndUserId(v string) *DescribeUserConnectTimeRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeUserConnectTimeRequest) SetMaxResults(v int32) *DescribeUserConnectTimeRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeUserConnectTimeRequest) SetNextToken(v string) *DescribeUserConnectTimeRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeUserConnectTimeRequest) SetOversoldGroupId(v string) *DescribeUserConnectTimeRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribeUserConnectTimeRequest) SetStartTime(v string) *DescribeUserConnectTimeRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeUserConnectTimeRequest) SetUserDesktopId(v string) *DescribeUserConnectTimeRequest {
	s.UserDesktopId = &v
	return s
}

func (s *DescribeUserConnectTimeRequest) SetUserGroupId(v string) *DescribeUserConnectTimeRequest {
	s.UserGroupId = &v
	return s
}

type DescribeUserConnectTimeResponseBody struct {
	Count     *int32                                     `json:"Count,omitempty" xml:"Count,omitempty"`
	Data      []*DescribeUserConnectTimeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	NextToken *string                                    `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserConnectTimeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectTimeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectTimeResponseBody) SetCount(v int32) *DescribeUserConnectTimeResponseBody {
	s.Count = &v
	return s
}

func (s *DescribeUserConnectTimeResponseBody) SetData(v []*DescribeUserConnectTimeResponseBodyData) *DescribeUserConnectTimeResponseBody {
	s.Data = v
	return s
}

func (s *DescribeUserConnectTimeResponseBody) SetNextToken(v string) *DescribeUserConnectTimeResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeUserConnectTimeResponseBody) SetRequestId(v string) *DescribeUserConnectTimeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserConnectTimeResponseBodyData struct {
	EndConnectTime   *string `json:"EndConnectTime,omitempty" xml:"EndConnectTime,omitempty"`
	EndUserId        *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	OversoldGroupId  *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	StartConnectTime *string `json:"StartConnectTime,omitempty" xml:"StartConnectTime,omitempty"`
	UserDesktopId    *string `json:"UserDesktopId,omitempty" xml:"UserDesktopId,omitempty"`
	UserGroupId      *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s DescribeUserConnectTimeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectTimeResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectTimeResponseBodyData) SetEndConnectTime(v string) *DescribeUserConnectTimeResponseBodyData {
	s.EndConnectTime = &v
	return s
}

func (s *DescribeUserConnectTimeResponseBodyData) SetEndUserId(v string) *DescribeUserConnectTimeResponseBodyData {
	s.EndUserId = &v
	return s
}

func (s *DescribeUserConnectTimeResponseBodyData) SetOversoldGroupId(v string) *DescribeUserConnectTimeResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

func (s *DescribeUserConnectTimeResponseBodyData) SetStartConnectTime(v string) *DescribeUserConnectTimeResponseBodyData {
	s.StartConnectTime = &v
	return s
}

func (s *DescribeUserConnectTimeResponseBodyData) SetUserDesktopId(v string) *DescribeUserConnectTimeResponseBodyData {
	s.UserDesktopId = &v
	return s
}

func (s *DescribeUserConnectTimeResponseBodyData) SetUserGroupId(v string) *DescribeUserConnectTimeResponseBodyData {
	s.UserGroupId = &v
	return s
}

type DescribeUserConnectTimeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserConnectTimeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserConnectTimeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectTimeResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectTimeResponse) SetHeaders(v map[string]*string) *DescribeUserConnectTimeResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserConnectTimeResponse) SetStatusCode(v int32) *DescribeUserConnectTimeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserConnectTimeResponse) SetBody(v *DescribeUserConnectTimeResponseBody) *DescribeUserConnectTimeResponse {
	s.Body = v
	return s
}

type DescribeUserConnectionRecordsRequest struct {
	// The duration when the cloud desktop is connected, which is the minimum value for condition filtering.
	//
	// example:
	//
	// 100
	ConnectDurationFrom *int64 `json:"ConnectDurationFrom,omitempty" xml:"ConnectDurationFrom,omitempty"`
	// The duration when the cloud desktop is connected, which is the maximum value for condition filtering.
	//
	// example:
	//
	// 100
	ConnectDurationTo *int64 `json:"ConnectDurationTo,omitempty" xml:"ConnectDurationTo,omitempty"`
	// The time when the cloud desktop stops to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1631266200000
	ConnectEndTimeFrom *int64 `json:"ConnectEndTimeFrom,omitempty" xml:"ConnectEndTimeFrom,omitempty"`
	// The time when the cloud desktop stops to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1631268000000
	ConnectEndTimeTo *int64 `json:"ConnectEndTimeTo,omitempty" xml:"ConnectEndTimeTo,omitempty"`
	// The time when the cloud desktop starts to be connected, which is the minimum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1631239200000
	ConnectStartTimeFrom *int64 `json:"ConnectStartTimeFrom,omitempty" xml:"ConnectStartTimeFrom,omitempty"`
	// The time when the cloud desktop starts to be connected, which is the maximum value for condition filtering. The value is a UNIX timestamp. Unit: milliseconds.
	//
	// example:
	//
	// 1631241000000
	ConnectStartTimeTo *int64 `json:"ConnectStartTimeTo,omitempty" xml:"ConnectStartTimeTo,omitempty"`
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-138dsptkrt00u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The ID of the authorized user.
	//
	// This parameter is required.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The type of the user account.
	//
	// Valid values:
	//
	// 	- SIMPLE: convenience account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- AD_CONNECTOR: enterprise AD account
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// SIMPLE
	EndUserType *string `json:"EndUserType,omitempty" xml:"EndUserType,omitempty"`
	// The number of entries to return on each page. Maximum value: 100. Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeUserConnectionRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectionRecordsRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectionRecordsRequest) SetConnectDurationFrom(v int64) *DescribeUserConnectionRecordsRequest {
	s.ConnectDurationFrom = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetConnectDurationTo(v int64) *DescribeUserConnectionRecordsRequest {
	s.ConnectDurationTo = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetConnectEndTimeFrom(v int64) *DescribeUserConnectionRecordsRequest {
	s.ConnectEndTimeFrom = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetConnectEndTimeTo(v int64) *DescribeUserConnectionRecordsRequest {
	s.ConnectEndTimeTo = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetConnectStartTimeFrom(v int64) *DescribeUserConnectionRecordsRequest {
	s.ConnectStartTimeFrom = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetConnectStartTimeTo(v int64) *DescribeUserConnectionRecordsRequest {
	s.ConnectStartTimeTo = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetDesktopGroupId(v string) *DescribeUserConnectionRecordsRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetDesktopId(v string) *DescribeUserConnectionRecordsRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetEndUserId(v string) *DescribeUserConnectionRecordsRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetEndUserType(v string) *DescribeUserConnectionRecordsRequest {
	s.EndUserType = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetMaxResults(v int32) *DescribeUserConnectionRecordsRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetNextToken(v string) *DescribeUserConnectionRecordsRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeUserConnectionRecordsRequest) SetRegionId(v string) *DescribeUserConnectionRecordsRequest {
	s.RegionId = &v
	return s
}

type DescribeUserConnectionRecordsResponseBody struct {
	// Details about connection records of the end user.
	ConnectionRecords []*DescribeUserConnectionRecordsResponseBodyConnectionRecords `json:"ConnectionRecords,omitempty" xml:"ConnectionRecords,omitempty" type:"Repeated"`
	// The token that is used to start the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 2CC66B0A-BA3B-5D87-BFBE-11AAAD7A8E03
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUserConnectionRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectionRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectionRecordsResponseBody) SetConnectionRecords(v []*DescribeUserConnectionRecordsResponseBodyConnectionRecords) *DescribeUserConnectionRecordsResponseBody {
	s.ConnectionRecords = v
	return s
}

func (s *DescribeUserConnectionRecordsResponseBody) SetNextToken(v string) *DescribeUserConnectionRecordsResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeUserConnectionRecordsResponseBody) SetRequestId(v string) *DescribeUserConnectionRecordsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUserConnectionRecordsResponseBodyConnectionRecords struct {
	// The duration for which the end user is connected to the cloud computer. Unit: seconds.
	//
	// example:
	//
	// 3405035000
	ConnectDuration *string `json:"ConnectDuration,omitempty" xml:"ConnectDuration,omitempty"`
	// The time when the end user disconnected from the cloud computer.
	//
	// example:
	//
	// 2022-02-27T20:03:13Z
	ConnectEndTime *string `json:"ConnectEndTime,omitempty" xml:"ConnectEndTime,omitempty"`
	// The time when the end user connected to the cloud computer.
	//
	// example:
	//
	// 2022-01-19T10:12:38Z
	ConnectStartTime *string `json:"ConnectStartTime,omitempty" xml:"ConnectStartTime,omitempty"`
	// The ID of the connection record.
	//
	// example:
	//
	// 528
	ConnectionRecordId *string `json:"ConnectionRecordId,omitempty" xml:"ConnectionRecordId,omitempty"`
	// The ID of the cloud computer to which the end user connected.
	//
	// example:
	//
	// ud-2hawufy3uedi1****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer to which the end user connected.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
}

func (s DescribeUserConnectionRecordsResponseBodyConnectionRecords) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectionRecordsResponseBodyConnectionRecords) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectionRecordsResponseBodyConnectionRecords) SetConnectDuration(v string) *DescribeUserConnectionRecordsResponseBodyConnectionRecords {
	s.ConnectDuration = &v
	return s
}

func (s *DescribeUserConnectionRecordsResponseBodyConnectionRecords) SetConnectEndTime(v string) *DescribeUserConnectionRecordsResponseBodyConnectionRecords {
	s.ConnectEndTime = &v
	return s
}

func (s *DescribeUserConnectionRecordsResponseBodyConnectionRecords) SetConnectStartTime(v string) *DescribeUserConnectionRecordsResponseBodyConnectionRecords {
	s.ConnectStartTime = &v
	return s
}

func (s *DescribeUserConnectionRecordsResponseBodyConnectionRecords) SetConnectionRecordId(v string) *DescribeUserConnectionRecordsResponseBodyConnectionRecords {
	s.ConnectionRecordId = &v
	return s
}

func (s *DescribeUserConnectionRecordsResponseBodyConnectionRecords) SetDesktopId(v string) *DescribeUserConnectionRecordsResponseBodyConnectionRecords {
	s.DesktopId = &v
	return s
}

func (s *DescribeUserConnectionRecordsResponseBodyConnectionRecords) SetDesktopName(v string) *DescribeUserConnectionRecordsResponseBodyConnectionRecords {
	s.DesktopName = &v
	return s
}

type DescribeUserConnectionRecordsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserConnectionRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserConnectionRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserConnectionRecordsResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserConnectionRecordsResponse) SetHeaders(v map[string]*string) *DescribeUserConnectionRecordsResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserConnectionRecordsResponse) SetStatusCode(v int32) *DescribeUserConnectionRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserConnectionRecordsResponse) SetBody(v *DescribeUserConnectionRecordsResponseBody) *DescribeUserConnectionRecordsResponse {
	s.Body = v
	return s
}

type DescribeUserProfilePathRulesRequest struct {
	// The desktop group ID. This parameter is required when you set RuleType parameter to DesktopGroup.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The rule type that you want to configure for the directory.
	//
	// Valid values:
	//
	// 	- DesktopGroup
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Default
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// DesktopGroup
	RuleType *string `json:"RuleType,omitempty" xml:"RuleType,omitempty"`
}

func (s DescribeUserProfilePathRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserProfilePathRulesRequest) GoString() string {
	return s.String()
}

func (s *DescribeUserProfilePathRulesRequest) SetDesktopGroupId(v string) *DescribeUserProfilePathRulesRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeUserProfilePathRulesRequest) SetRegionId(v string) *DescribeUserProfilePathRulesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeUserProfilePathRulesRequest) SetRuleType(v string) *DescribeUserProfilePathRulesRequest {
	s.RuleType = &v
	return s
}

type DescribeUserProfilePathRulesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// A87DBB05-653A-5E4B-B72B-5F4A1E07****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The directory blacklist and whitelist.
	UserProfilePathRule *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule `json:"UserProfilePathRule,omitempty" xml:"UserProfilePathRule,omitempty" type:"Struct"`
}

func (s DescribeUserProfilePathRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserProfilePathRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUserProfilePathRulesResponseBody) SetRequestId(v string) *DescribeUserProfilePathRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUserProfilePathRulesResponseBody) SetUserProfilePathRule(v *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule) *DescribeUserProfilePathRulesResponseBody {
	s.UserProfilePathRule = v
	return s
}

type DescribeUserProfilePathRulesResponseBodyUserProfilePathRule struct {
	// The desktop group ID.
	//
	// example:
	//
	// dg-4i8fvpv6tfs03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The directory rules.
	Rules []*DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules `json:"Rules,omitempty" xml:"Rules,omitempty" type:"Repeated"`
	// The directory type that is configured for the directory.
	//
	// Valid values:
	//
	// 	- DesktopGroup
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Default
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Default
	UserProfileRuleType *string `json:"UserProfileRuleType,omitempty" xml:"UserProfileRuleType,omitempty"`
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRule) GoString() string {
	return s.String()
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule) SetDesktopGroupId(v string) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule) SetRules(v []*DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule {
	s.Rules = v
	return s
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule) SetUserProfileRuleType(v string) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRule {
	s.UserProfileRuleType = &v
	return s
}

type DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules struct {
	// The blacklist that is configured.
	BlackPath *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath `json:"BlackPath,omitempty" xml:"BlackPath,omitempty" type:"Struct"`
	// The directories in the whitelist.
	WhitePaths []*DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths `json:"WhitePaths,omitempty" xml:"WhitePaths,omitempty" type:"Repeated"`
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules) GoString() string {
	return s.String()
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules) SetBlackPath(v *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules {
	s.BlackPath = v
	return s
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules) SetWhitePaths(v []*DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRules {
	s.WhitePaths = v
	return s
}

type DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath struct {
	// The path.
	//
	// example:
	//
	// AppLocal/Data
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The path type.
	//
	// Valid values:
	//
	// 	- file
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- folder
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// file
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath) GoString() string {
	return s.String()
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath) SetPath(v string) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath {
	s.Path = &v
	return s
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath) SetType(v string) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesBlackPath {
	s.Type = &v
	return s
}

type DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths struct {
	// The path.
	//
	// example:
	//
	// games
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The path type.
	//
	// Valid values:
	//
	// 	- file
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- folder
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// folder
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths) GoString() string {
	return s.String()
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths) SetPath(v string) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths {
	s.Path = &v
	return s
}

func (s *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths) SetType(v string) *DescribeUserProfilePathRulesResponseBodyUserProfilePathRuleRulesWhitePaths {
	s.Type = &v
	return s
}

type DescribeUserProfilePathRulesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUserProfilePathRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUserProfilePathRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUserProfilePathRulesResponse) GoString() string {
	return s.String()
}

func (s *DescribeUserProfilePathRulesResponse) SetHeaders(v map[string]*string) *DescribeUserProfilePathRulesResponse {
	s.Headers = v
	return s
}

func (s *DescribeUserProfilePathRulesResponse) SetStatusCode(v int32) *DescribeUserProfilePathRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUserProfilePathRulesResponse) SetBody(v *DescribeUserProfilePathRulesResponseBody) *DescribeUserProfilePathRulesResponse {
	s.Body = v
	return s
}

type DescribeUsersInGroupRequest struct {
	// The status of the desktop connection for the end user.
	//
	// Valid values:
	//
	// - 0: Disconnected.
	//
	// - 1: Connected.
	//
	// example:
	//
	// 1
	ConnectState *int32 `json:"ConnectState,omitempty" xml:"ConnectState,omitempty"`
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-8ttn55ujj8nj8****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The ID of the authorized user.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The IDs of the authorized users.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The query string for fuzzy match. If you specify this parameter, the system returns all results that contain the string.
	//
	// example:
	//
	// alice
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// The number of entries to return on each page.
	//
	// 	- Maximum value: 100.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the organization to which the end user belongs.
	//
	// example:
	//
	// org-d0fua2oyukw8j****
	OrgId *string `json:"OrgId,omitempty" xml:"OrgId,omitempty"`
	// Specifies whether to query user details.
	//
	// Valid values:
	//
	// 	- true (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	QueryUserDetail *bool `json:"QueryUserDetail,omitempty" xml:"QueryUserDetail,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeUsersInGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersInGroupRequest) GoString() string {
	return s.String()
}

func (s *DescribeUsersInGroupRequest) SetConnectState(v int32) *DescribeUsersInGroupRequest {
	s.ConnectState = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetDesktopGroupId(v string) *DescribeUsersInGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetEndUserId(v string) *DescribeUsersInGroupRequest {
	s.EndUserId = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetEndUserIds(v []*string) *DescribeUsersInGroupRequest {
	s.EndUserIds = v
	return s
}

func (s *DescribeUsersInGroupRequest) SetFilter(v string) *DescribeUsersInGroupRequest {
	s.Filter = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetMaxResults(v int32) *DescribeUsersInGroupRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetNextToken(v string) *DescribeUsersInGroupRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetOrgId(v string) *DescribeUsersInGroupRequest {
	s.OrgId = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetQueryUserDetail(v bool) *DescribeUsersInGroupRequest {
	s.QueryUserDetail = &v
	return s
}

func (s *DescribeUsersInGroupRequest) SetRegionId(v string) *DescribeUsersInGroupRequest {
	s.RegionId = &v
	return s
}

type DescribeUsersInGroupResponseBody struct {
	// The list of authorized users.
	EndUsers []*DescribeUsersInGroupResponseBodyEndUsers `json:"EndUsers,omitempty" xml:"EndUsers,omitempty" type:"Repeated"`
	// The token that is used to start the next query.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The total number of authorized users that is connected to cloud computers in the cloud computer pool.
	//
	// example:
	//
	// 0
	OnlineUsersCount *int32 `json:"OnlineUsersCount,omitempty" xml:"OnlineUsersCount,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The total number of authorized users of the cloud computer pool.
	//
	// example:
	//
	// 1
	UsersCount *int32 `json:"UsersCount,omitempty" xml:"UsersCount,omitempty"`
}

func (s DescribeUsersInGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersInGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUsersInGroupResponseBody) SetEndUsers(v []*DescribeUsersInGroupResponseBodyEndUsers) *DescribeUsersInGroupResponseBody {
	s.EndUsers = v
	return s
}

func (s *DescribeUsersInGroupResponseBody) SetNextToken(v string) *DescribeUsersInGroupResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeUsersInGroupResponseBody) SetOnlineUsersCount(v int32) *DescribeUsersInGroupResponseBody {
	s.OnlineUsersCount = &v
	return s
}

func (s *DescribeUsersInGroupResponseBody) SetRequestId(v string) *DescribeUsersInGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeUsersInGroupResponseBody) SetUsersCount(v int32) *DescribeUsersInGroupResponseBody {
	s.UsersCount = &v
	return s
}

type DescribeUsersInGroupResponseBodyEndUsers struct {
	// The connection status.
	//
	// Valid values:
	//
	// 	- 0: disconnected
	//
	// 	- 1: connecting
	//
	// example:
	//
	// 1
	ConnectionStatus *string `json:"ConnectionStatus,omitempty" xml:"ConnectionStatus,omitempty"`
	// The ID of the cloud computer.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud computer.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The display name of the enterprise AD account.
	//
	// example:
	//
	// alice
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The email address of the authorized user.
	//
	// example:
	//
	// alice@example.com
	EndUserEmail *string `json:"EndUserEmail,omitempty" xml:"EndUserEmail,omitempty"`
	// The ID of the authorized user.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The username of the authorized user.
	//
	// example:
	//
	// alice
	EndUserName *string `json:"EndUserName,omitempty" xml:"EndUserName,omitempty"`
	// The mobile number of the authorized user.
	//
	// example:
	//
	// 1381111****
	EndUserPhone *string `json:"EndUserPhone,omitempty" xml:"EndUserPhone,omitempty"`
	// The remarks.
	//
	// example:
	//
	// Note
	EndUserRemark *string `json:"EndUserRemark,omitempty" xml:"EndUserRemark,omitempty"`
	// The user account type.
	//
	// Valid values:
	//
	// 	- SIMPLE: convenience account
	//
	// 	- AD_CONNECTOR: enterprise Active Directory (AD) account
	//
	// example:
	//
	// SIMPLE
	EndUserType *string `json:"EndUserType,omitempty" xml:"EndUserType,omitempty"`
	// The appended information.
	ExternalInfo *DescribeUsersInGroupResponseBodyEndUsersExternalInfo `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty" type:"Struct"`
	// The ID of the cloud computer that is used by the user.
	//
	// example:
	//
	// ud-i896ze8hazpvl****
	UserDesktopId *string `json:"UserDesktopId,omitempty" xml:"UserDesktopId,omitempty"`
	// Details about the seats of users.
	UserSetPropertiesModels []*DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels `json:"UserSetPropertiesModels,omitempty" xml:"UserSetPropertiesModels,omitempty" type:"Repeated"`
}

func (s DescribeUsersInGroupResponseBodyEndUsers) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersInGroupResponseBodyEndUsers) GoString() string {
	return s.String()
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetConnectionStatus(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.ConnectionStatus = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetDesktopId(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.DesktopId = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetDesktopName(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.DesktopName = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetDisplayName(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.DisplayName = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetEndUserEmail(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.EndUserEmail = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetEndUserId(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.EndUserId = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetEndUserName(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.EndUserName = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetEndUserPhone(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.EndUserPhone = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetEndUserRemark(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.EndUserRemark = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetEndUserType(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.EndUserType = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetExternalInfo(v *DescribeUsersInGroupResponseBodyEndUsersExternalInfo) *DescribeUsersInGroupResponseBodyEndUsers {
	s.ExternalInfo = v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetUserDesktopId(v string) *DescribeUsersInGroupResponseBodyEndUsers {
	s.UserDesktopId = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsers) SetUserSetPropertiesModels(v []*DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) *DescribeUsersInGroupResponseBodyEndUsers {
	s.UserSetPropertiesModels = v
	return s
}

type DescribeUsersInGroupResponseBodyEndUsersExternalInfo struct {
	// The external name.
	//
	// example:
	//
	// nameDemo
	ExternalName *string `json:"ExternalName,omitempty" xml:"ExternalName,omitempty"`
	// The employee ID.
	//
	// example:
	//
	// 123
	JobNumber *string `json:"JobNumber,omitempty" xml:"JobNumber,omitempty"`
}

func (s DescribeUsersInGroupResponseBodyEndUsersExternalInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersInGroupResponseBodyEndUsersExternalInfo) GoString() string {
	return s.String()
}

func (s *DescribeUsersInGroupResponseBodyEndUsersExternalInfo) SetExternalName(v string) *DescribeUsersInGroupResponseBodyEndUsersExternalInfo {
	s.ExternalName = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsersExternalInfo) SetJobNumber(v string) *DescribeUsersInGroupResponseBodyEndUsersExternalInfo {
	s.JobNumber = &v
	return s
}

type DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels struct {
	// The property ID.
	//
	// example:
	//
	// 123
	PropertyId *int64 `json:"PropertyId,omitempty" xml:"PropertyId,omitempty"`
	// The property name.
	//
	// example:
	//
	// key
	PropertyKey *string `json:"PropertyKey,omitempty" xml:"PropertyKey,omitempty"`
	// The property type.
	//
	// Valid values:
	//
	// 	- 1: system property
	//
	// 	- 2: custom property
	//
	// example:
	//
	// 1
	PropertyType *int32 `json:"PropertyType,omitempty" xml:"PropertyType,omitempty"`
	// Details about property values.
	PropertyValues []*DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues `json:"PropertyValues,omitempty" xml:"PropertyValues,omitempty" type:"Repeated"`
	// The user ID.
	//
	// example:
	//
	// 123
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The username.
	//
	// example:
	//
	// nameDemo
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) GoString() string {
	return s.String()
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) SetPropertyId(v int64) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels {
	s.PropertyId = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) SetPropertyKey(v string) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels {
	s.PropertyKey = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) SetPropertyType(v int32) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels {
	s.PropertyType = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) SetPropertyValues(v []*DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels {
	s.PropertyValues = v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) SetUserId(v int64) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels {
	s.UserId = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels) SetUserName(v string) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModels {
	s.UserName = &v
	return s
}

type DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues struct {
	// The property value.
	//
	// example:
	//
	// value
	PropertyValue *string `json:"PropertyValue,omitempty" xml:"PropertyValue,omitempty"`
	// The ID of the property value.
	//
	// example:
	//
	// 123
	PropertyValueId *int64 `json:"PropertyValueId,omitempty" xml:"PropertyValueId,omitempty"`
}

func (s DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues) GoString() string {
	return s.String()
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues) SetPropertyValue(v string) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues {
	s.PropertyValue = &v
	return s
}

func (s *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues) SetPropertyValueId(v int64) *DescribeUsersInGroupResponseBodyEndUsersUserSetPropertiesModelsPropertyValues {
	s.PropertyValueId = &v
	return s
}

type DescribeUsersInGroupResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUsersInGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUsersInGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersInGroupResponse) GoString() string {
	return s.String()
}

func (s *DescribeUsersInGroupResponse) SetHeaders(v map[string]*string) *DescribeUsersInGroupResponse {
	s.Headers = v
	return s
}

func (s *DescribeUsersInGroupResponse) SetStatusCode(v int32) *DescribeUsersInGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUsersInGroupResponse) SetBody(v *DescribeUsersInGroupResponseBody) *DescribeUsersInGroupResponse {
	s.Body = v
	return s
}

type DescribeUsersPasswordRequest struct {
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-gq8u6whi9f6k8****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeUsersPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersPasswordRequest) GoString() string {
	return s.String()
}

func (s *DescribeUsersPasswordRequest) SetDesktopId(v string) *DescribeUsersPasswordRequest {
	s.DesktopId = &v
	return s
}

func (s *DescribeUsersPasswordRequest) SetRegionId(v string) *DescribeUsersPasswordRequest {
	s.RegionId = &v
	return s
}

type DescribeUsersPasswordResponseBody struct {
	// The authorized users of the cloud computer.
	DesktopUsers []*DescribeUsersPasswordResponseBodyDesktopUsers `json:"DesktopUsers,omitempty" xml:"DesktopUsers,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// F7B4B17B-5C8A-514C-AA4D-F8090E3A63E9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeUsersPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeUsersPasswordResponseBody) SetDesktopUsers(v []*DescribeUsersPasswordResponseBodyDesktopUsers) *DescribeUsersPasswordResponseBody {
	s.DesktopUsers = v
	return s
}

func (s *DescribeUsersPasswordResponseBody) SetRequestId(v string) *DescribeUsersPasswordResponseBody {
	s.RequestId = &v
	return s
}

type DescribeUsersPasswordResponseBodyDesktopUsers struct {
	// The display name of the end user.
	//
	// example:
	//
	// alice_1365*****
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The password of the end user.
	//
	// example:
	//
	// tes123
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
}

func (s DescribeUsersPasswordResponseBodyDesktopUsers) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersPasswordResponseBodyDesktopUsers) GoString() string {
	return s.String()
}

func (s *DescribeUsersPasswordResponseBodyDesktopUsers) SetDisplayName(v string) *DescribeUsersPasswordResponseBodyDesktopUsers {
	s.DisplayName = &v
	return s
}

func (s *DescribeUsersPasswordResponseBodyDesktopUsers) SetEndUserId(v string) *DescribeUsersPasswordResponseBodyDesktopUsers {
	s.EndUserId = &v
	return s
}

func (s *DescribeUsersPasswordResponseBodyDesktopUsers) SetPassword(v string) *DescribeUsersPasswordResponseBodyDesktopUsers {
	s.Password = &v
	return s
}

type DescribeUsersPasswordResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeUsersPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeUsersPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeUsersPasswordResponse) GoString() string {
	return s.String()
}

func (s *DescribeUsersPasswordResponse) SetHeaders(v map[string]*string) *DescribeUsersPasswordResponse {
	s.Headers = v
	return s
}

func (s *DescribeUsersPasswordResponse) SetStatusCode(v int32) *DescribeUsersPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeUsersPasswordResponse) SetBody(v *DescribeUsersPasswordResponseBody) *DescribeUsersPasswordResponse {
	s.Body = v
	return s
}

type DescribeVirtualMFADevicesRequest struct {
	// The names of the AD users.
	//
	// example:
	//
	// testuser
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The number of entries per page. Valid values: 1 to 500. Default value: 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// cn-hangzhou+dir-269345****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeVirtualMFADevicesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualMFADevicesRequest) GoString() string {
	return s.String()
}

func (s *DescribeVirtualMFADevicesRequest) SetEndUserId(v []*string) *DescribeVirtualMFADevicesRequest {
	s.EndUserId = v
	return s
}

func (s *DescribeVirtualMFADevicesRequest) SetMaxResults(v int32) *DescribeVirtualMFADevicesRequest {
	s.MaxResults = &v
	return s
}

func (s *DescribeVirtualMFADevicesRequest) SetNextToken(v string) *DescribeVirtualMFADevicesRequest {
	s.NextToken = &v
	return s
}

func (s *DescribeVirtualMFADevicesRequest) SetOfficeSiteId(v string) *DescribeVirtualMFADevicesRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeVirtualMFADevicesRequest) SetRegionId(v string) *DescribeVirtualMFADevicesRequest {
	s.RegionId = &v
	return s
}

type DescribeVirtualMFADevicesResponseBody struct {
	// A pagination token. It can be used in the next request to retrieve a new page of results.If NextToken is empty, no next page exists.
	//
	// example:
	//
	// AAAAAV3MpHK1AP0pfERHZN5pu6nmB7qrRFJ8vmttjxPL23as
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// FB550AAB-FB36-4A91-93F6-F4374AF65403
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details of the virtual MFA devices.
	VirtualMFADevices []*DescribeVirtualMFADevicesResponseBodyVirtualMFADevices `json:"VirtualMFADevices,omitempty" xml:"VirtualMFADevices,omitempty" type:"Repeated"`
}

func (s DescribeVirtualMFADevicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualMFADevicesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeVirtualMFADevicesResponseBody) SetNextToken(v string) *DescribeVirtualMFADevicesResponseBody {
	s.NextToken = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBody) SetRequestId(v string) *DescribeVirtualMFADevicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBody) SetVirtualMFADevices(v []*DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) *DescribeVirtualMFADevicesResponseBody {
	s.VirtualMFADevices = v
	return s
}

type DescribeVirtualMFADevicesResponseBodyVirtualMFADevices struct {
	// The number of consecutive failures to bind the virtual MFA device, or the number of failures on the verification of the virtual MFA device.
	//
	// example:
	//
	// 1
	ConsecutiveFails *int32 `json:"ConsecutiveFails,omitempty" xml:"ConsecutiveFails,omitempty"`
	// > This parameter is in invitational preview and is not publicly available.
	//
	// example:
	//
	// cn-hangzhou+dir-gx2x1dhsmu52rd****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The name of the AD user who uses the virtual MFA device.
	//
	// example:
	//
	// usertest
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The time when the virtual MFA device was started. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-20T14:52:28Z
	GmtEnabled *string `json:"GmtEnabled,omitempty" xml:"GmtEnabled,omitempty"`
	// The time when a locked virtual MFA device was automatically unlocked. The time follows the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-12-21T15:21:28Z
	GmtUnlock *string `json:"GmtUnlock,omitempty" xml:"GmtUnlock,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// cn-hangzhou+dir-269345****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The serial number of the virtual MFA device, which is a unique identifier.
	//
	// example:
	//
	// a25f297f-f2e1-4a44-bbf1-5f48a6e5****
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	// The status of the virtual MFA device.
	//
	// Valid values:
	//
	// 	- LOCKED
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- UNBOUND
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NORMAL
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// NORMAL
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) GoString() string {
	return s.String()
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetConsecutiveFails(v int32) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.ConsecutiveFails = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetDirectoryId(v string) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.DirectoryId = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetEndUserId(v string) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.EndUserId = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetGmtEnabled(v string) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.GmtEnabled = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetGmtUnlock(v string) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.GmtUnlock = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetOfficeSiteId(v string) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.OfficeSiteId = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetSerialNumber(v string) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.SerialNumber = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices) SetStatus(v string) *DescribeVirtualMFADevicesResponseBodyVirtualMFADevices {
	s.Status = &v
	return s
}

type DescribeVirtualMFADevicesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeVirtualMFADevicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeVirtualMFADevicesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeVirtualMFADevicesResponse) GoString() string {
	return s.String()
}

func (s *DescribeVirtualMFADevicesResponse) SetHeaders(v map[string]*string) *DescribeVirtualMFADevicesResponse {
	s.Headers = v
	return s
}

func (s *DescribeVirtualMFADevicesResponse) SetStatusCode(v int32) *DescribeVirtualMFADevicesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeVirtualMFADevicesResponse) SetBody(v *DescribeVirtualMFADevicesResponseBody) *DescribeVirtualMFADevicesResponse {
	s.Body = v
	return s
}

type DescribeZonesRequest struct {
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the zone. Default value: `AvailabilityZone`. This value indicates Alibaba Cloud zones.
	//
	// example:
	//
	// AvailabilityZone
	ZoneType *string `json:"ZoneType,omitempty" xml:"ZoneType,omitempty"`
}

func (s DescribeZonesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesRequest) GoString() string {
	return s.String()
}

func (s *DescribeZonesRequest) SetRegionId(v string) *DescribeZonesRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeZonesRequest) SetZoneType(v string) *DescribeZonesRequest {
	s.ZoneType = &v
	return s
}

type DescribeZonesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Details of zones.
	Zones []*DescribeZonesResponseBodyZones `json:"Zones,omitempty" xml:"Zones,omitempty" type:"Repeated"`
}

func (s DescribeZonesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBody) SetRequestId(v string) *DescribeZonesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeZonesResponseBody) SetZones(v []*DescribeZonesResponseBodyZones) *DescribeZonesResponseBody {
	s.Zones = v
	return s
}

type DescribeZonesResponseBodyZones struct {
	// The zone ID.
	//
	// example:
	//
	// cn-hangzhou-h
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeZonesResponseBodyZones) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponseBodyZones) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponseBodyZones) SetZoneId(v string) *DescribeZonesResponseBodyZones {
	s.ZoneId = &v
	return s
}

type DescribeZonesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeZonesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeZonesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeZonesResponse) GoString() string {
	return s.String()
}

func (s *DescribeZonesResponse) SetHeaders(v map[string]*string) *DescribeZonesResponse {
	s.Headers = v
	return s
}

func (s *DescribeZonesResponse) SetStatusCode(v int32) *DescribeZonesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeZonesResponse) SetBody(v *DescribeZonesResponseBody) *DescribeZonesResponse {
	s.Body = v
	return s
}

type DetachCenRequest struct {
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DetachCenRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachCenRequest) GoString() string {
	return s.String()
}

func (s *DetachCenRequest) SetOfficeSiteId(v string) *DetachCenRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *DetachCenRequest) SetRegionId(v string) *DetachCenRequest {
	s.RegionId = &v
	return s
}

type DetachCenResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachCenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachCenResponseBody) GoString() string {
	return s.String()
}

func (s *DetachCenResponseBody) SetRequestId(v string) *DetachCenResponseBody {
	s.RequestId = &v
	return s
}

type DetachCenResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachCenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachCenResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachCenResponse) GoString() string {
	return s.String()
}

func (s *DetachCenResponse) SetHeaders(v map[string]*string) *DetachCenResponse {
	s.Headers = v
	return s
}

func (s *DetachCenResponse) SetStatusCode(v int32) *DetachCenResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachCenResponse) SetBody(v *DetachCenResponseBody) *DetachCenResponse {
	s.Body = v
	return s
}

type DetachEndUserRequest struct {
	// The address of the Active Directory (AD) office network.
	//
	// example:
	//
	// xn--0zw****
	AdDomain *string `json:"AdDomain,omitempty" xml:"AdDomain,omitempty"`
	// The type of the client.
	//
	// Valid values:
	//
	// 	- 1: hardware client.
	//
	// This parameter is required.
	//
	// example:
	//
	// 2
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The serial number (SN) of the hardware client.
	//
	// This parameter is required.
	//
	// example:
	//
	// F9E52EDCCB2B****
	DeviceId *string `json:"DeviceId,omitempty" xml:"DeviceId,omitempty"`
	// The ID of the convenient office network.
	//
	// example:
	//
	// cn-hangzhou+dir-jedbpr4sl9l37****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The ID of the user that you want to unbind from the hardware client.
	//
	// This parameter is required.
	//
	// example:
	//
	// moli
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by WUYING Workspace.
	//
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DetachEndUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachEndUserRequest) GoString() string {
	return s.String()
}

func (s *DetachEndUserRequest) SetAdDomain(v string) *DetachEndUserRequest {
	s.AdDomain = &v
	return s
}

func (s *DetachEndUserRequest) SetClientType(v string) *DetachEndUserRequest {
	s.ClientType = &v
	return s
}

func (s *DetachEndUserRequest) SetDeviceId(v string) *DetachEndUserRequest {
	s.DeviceId = &v
	return s
}

func (s *DetachEndUserRequest) SetDirectoryId(v string) *DetachEndUserRequest {
	s.DirectoryId = &v
	return s
}

func (s *DetachEndUserRequest) SetEndUserId(v string) *DetachEndUserRequest {
	s.EndUserId = &v
	return s
}

func (s *DetachEndUserRequest) SetRegion(v string) *DetachEndUserRequest {
	s.Region = &v
	return s
}

type DetachEndUserResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachEndUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachEndUserResponseBody) GoString() string {
	return s.String()
}

func (s *DetachEndUserResponseBody) SetRequestId(v string) *DetachEndUserResponseBody {
	s.RequestId = &v
	return s
}

type DetachEndUserResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetachEndUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetachEndUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachEndUserResponse) GoString() string {
	return s.String()
}

func (s *DetachEndUserResponse) SetHeaders(v map[string]*string) *DetachEndUserResponse {
	s.Headers = v
	return s
}

func (s *DetachEndUserResponse) SetStatusCode(v int32) *DetachEndUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DetachEndUserResponse) SetBody(v *DetachEndUserResponseBody) *DetachEndUserResponse {
	s.Body = v
	return s
}

type DisableDesktopsInGroupRequest struct {
	// The ID of the desktop group.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The IDs of cloud desktops.
	//
	// This parameter is required.
	DesktopIds []*string `json:"DesktopIds,omitempty" xml:"DesktopIds,omitempty" type:"Repeated"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DisableDesktopsInGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableDesktopsInGroupRequest) GoString() string {
	return s.String()
}

func (s *DisableDesktopsInGroupRequest) SetDesktopGroupId(v string) *DisableDesktopsInGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *DisableDesktopsInGroupRequest) SetDesktopIds(v []*string) *DisableDesktopsInGroupRequest {
	s.DesktopIds = v
	return s
}

func (s *DisableDesktopsInGroupRequest) SetRegionId(v string) *DisableDesktopsInGroupRequest {
	s.RegionId = &v
	return s
}

type DisableDesktopsInGroupResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 34FB4D97-C0D9-5534-ABC6-90C7EBD5****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisableDesktopsInGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableDesktopsInGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DisableDesktopsInGroupResponseBody) SetRequestId(v string) *DisableDesktopsInGroupResponseBody {
	s.RequestId = &v
	return s
}

type DisableDesktopsInGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisableDesktopsInGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisableDesktopsInGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableDesktopsInGroupResponse) GoString() string {
	return s.String()
}

func (s *DisableDesktopsInGroupResponse) SetHeaders(v map[string]*string) *DisableDesktopsInGroupResponse {
	s.Headers = v
	return s
}

func (s *DisableDesktopsInGroupResponse) SetStatusCode(v int32) *DisableDesktopsInGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableDesktopsInGroupResponse) SetBody(v *DisableDesktopsInGroupResponseBody) *DisableDesktopsInGroupResponse {
	s.Body = v
	return s
}

type DisconnectDesktopSessionsRequest struct {
	// Specifies whether to perform precheck. If you perform precheck, the system does not disconnect from desktop sessions. Only the sessions that do not meet specific conditions are returned.
	//
	// example:
	//
	// true
	PreCheck *bool `json:"PreCheck,omitempty" xml:"PreCheck,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The session details.
	//
	// This parameter is required.
	Sessions []*DisconnectDesktopSessionsRequestSessions `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
}

func (s DisconnectDesktopSessionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DisconnectDesktopSessionsRequest) GoString() string {
	return s.String()
}

func (s *DisconnectDesktopSessionsRequest) SetPreCheck(v bool) *DisconnectDesktopSessionsRequest {
	s.PreCheck = &v
	return s
}

func (s *DisconnectDesktopSessionsRequest) SetRegionId(v string) *DisconnectDesktopSessionsRequest {
	s.RegionId = &v
	return s
}

func (s *DisconnectDesktopSessionsRequest) SetSessions(v []*DisconnectDesktopSessionsRequestSessions) *DisconnectDesktopSessionsRequest {
	s.Sessions = v
	return s
}

type DisconnectDesktopSessionsRequestSessions struct {
	// The cloud desktop ID.
	//
	// example:
	//
	// ecd-90g15fkhsxxxn0unj
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The end user ID.
	//
	// example:
	//
	// wy01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
}

func (s DisconnectDesktopSessionsRequestSessions) String() string {
	return tea.Prettify(s)
}

func (s DisconnectDesktopSessionsRequestSessions) GoString() string {
	return s.String()
}

func (s *DisconnectDesktopSessionsRequestSessions) SetDesktopId(v string) *DisconnectDesktopSessionsRequestSessions {
	s.DesktopId = &v
	return s
}

func (s *DisconnectDesktopSessionsRequestSessions) SetEndUserId(v string) *DisconnectDesktopSessionsRequestSessions {
	s.EndUserId = &v
	return s
}

type DisconnectDesktopSessionsResponseBody struct {
	// The list of invalid sessions.
	InvalidSessions []*DisconnectDesktopSessionsResponseBodyInvalidSessions `json:"InvalidSessions,omitempty" xml:"InvalidSessions,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 2507CFA8-FEAB-5208-98F5-5E028C50XXXX
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DisconnectDesktopSessionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisconnectDesktopSessionsResponseBody) GoString() string {
	return s.String()
}

func (s *DisconnectDesktopSessionsResponseBody) SetInvalidSessions(v []*DisconnectDesktopSessionsResponseBodyInvalidSessions) *DisconnectDesktopSessionsResponseBody {
	s.InvalidSessions = v
	return s
}

func (s *DisconnectDesktopSessionsResponseBody) SetRequestId(v string) *DisconnectDesktopSessionsResponseBody {
	s.RequestId = &v
	return s
}

type DisconnectDesktopSessionsResponseBodyInvalidSessions struct {
	// The cloud desktop ID.
	//
	// example:
	//
	// ecd-2jv6wugbkp65pxxxx
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The end user ID.
	//
	// example:
	//
	// wy01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
}

func (s DisconnectDesktopSessionsResponseBodyInvalidSessions) String() string {
	return tea.Prettify(s)
}

func (s DisconnectDesktopSessionsResponseBodyInvalidSessions) GoString() string {
	return s.String()
}

func (s *DisconnectDesktopSessionsResponseBodyInvalidSessions) SetDesktopId(v string) *DisconnectDesktopSessionsResponseBodyInvalidSessions {
	s.DesktopId = &v
	return s
}

func (s *DisconnectDesktopSessionsResponseBodyInvalidSessions) SetEndUserId(v string) *DisconnectDesktopSessionsResponseBodyInvalidSessions {
	s.EndUserId = &v
	return s
}

type DisconnectDesktopSessionsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DisconnectDesktopSessionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DisconnectDesktopSessionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DisconnectDesktopSessionsResponse) GoString() string {
	return s.String()
}

func (s *DisconnectDesktopSessionsResponse) SetHeaders(v map[string]*string) *DisconnectDesktopSessionsResponse {
	s.Headers = v
	return s
}

func (s *DisconnectDesktopSessionsResponse) SetStatusCode(v int32) *DisconnectDesktopSessionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DisconnectDesktopSessionsResponse) SetBody(v *DisconnectDesktopSessionsResponseBody) *DisconnectDesktopSessionsResponse {
	s.Body = v
	return s
}

type DissociateNetworkPackageRequest struct {
	// The ID of the premium bandwidth plan. You can call the [DescribeNetworkPackages](https://help.aliyun.com/document_detail/216079.html) operation to obtain the ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// np-*********
	NetworkPackageId *string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DissociateNetworkPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DissociateNetworkPackageRequest) GoString() string {
	return s.String()
}

func (s *DissociateNetworkPackageRequest) SetNetworkPackageId(v string) *DissociateNetworkPackageRequest {
	s.NetworkPackageId = &v
	return s
}

func (s *DissociateNetworkPackageRequest) SetRegionId(v string) *DissociateNetworkPackageRequest {
	s.RegionId = &v
	return s
}

type DissociateNetworkPackageResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DissociateNetworkPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DissociateNetworkPackageResponseBody) GoString() string {
	return s.String()
}

func (s *DissociateNetworkPackageResponseBody) SetRequestId(v string) *DissociateNetworkPackageResponseBody {
	s.RequestId = &v
	return s
}

type DissociateNetworkPackageResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DissociateNetworkPackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DissociateNetworkPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DissociateNetworkPackageResponse) GoString() string {
	return s.String()
}

func (s *DissociateNetworkPackageResponse) SetHeaders(v map[string]*string) *DissociateNetworkPackageResponse {
	s.Headers = v
	return s
}

func (s *DissociateNetworkPackageResponse) SetStatusCode(v int32) *DissociateNetworkPackageResponse {
	s.StatusCode = &v
	return s
}

func (s *DissociateNetworkPackageResponse) SetBody(v *DissociateNetworkPackageResponseBody) *DissociateNetworkPackageResponse {
	s.Body = v
	return s
}

type DownloadCdsFileRequest struct {
	// example:
	//
	// cn-hangzhou+cds-643267****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// example:
	//
	// user****
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// example:
	//
	// 63f3257b68b018170b194d87b875512d108f****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// cg-i1ruuudp92qpj****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DownloadCdsFileRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadCdsFileRequest) GoString() string {
	return s.String()
}

func (s *DownloadCdsFileRequest) SetCdsId(v string) *DownloadCdsFileRequest {
	s.CdsId = &v
	return s
}

func (s *DownloadCdsFileRequest) SetEndUserId(v string) *DownloadCdsFileRequest {
	s.EndUserId = &v
	return s
}

func (s *DownloadCdsFileRequest) SetFileId(v string) *DownloadCdsFileRequest {
	s.FileId = &v
	return s
}

func (s *DownloadCdsFileRequest) SetGroupId(v string) *DownloadCdsFileRequest {
	s.GroupId = &v
	return s
}

func (s *DownloadCdsFileRequest) SetRegionId(v string) *DownloadCdsFileRequest {
	s.RegionId = &v
	return s
}

type DownloadCdsFileResponseBody struct {
	DownloadFileModel *DownloadCdsFileResponseBodyDownloadFileModel `json:"DownloadFileModel,omitempty" xml:"DownloadFileModel,omitempty" type:"Struct"`
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// E3ED9519-DD73-5C86-9C0A-43C9281C****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DownloadCdsFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadCdsFileResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadCdsFileResponseBody) SetDownloadFileModel(v *DownloadCdsFileResponseBodyDownloadFileModel) *DownloadCdsFileResponseBody {
	s.DownloadFileModel = v
	return s
}

func (s *DownloadCdsFileResponseBody) SetMessage(v string) *DownloadCdsFileResponseBody {
	s.Message = &v
	return s
}

func (s *DownloadCdsFileResponseBody) SetRequestId(v string) *DownloadCdsFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadCdsFileResponseBody) SetSuccess(v bool) *DownloadCdsFileResponseBody {
	s.Success = &v
	return s
}

type DownloadCdsFileResponseBodyDownloadFileModel struct {
	DownloadType *string `json:"DownloadType,omitempty" xml:"DownloadType,omitempty"`
	// example:
	//
	// https://pds-XXXX-bj-1693807057.oss-cn-beijing.aliyuncs.com/A0SKfLOp%2F2%2F6662612e0570fb2bdd5549759716d433439f0572%2F6662612ee3804e4901794928b14f9a7477640ee7?di=XXXX&dr=1030&f=667d5a322ebf7409e91c485d808fb3bd8a73efbb&response-content-disposition=attachment%3B%20
	DownloadUrl      *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	ExpirationSecond *string `json:"ExpirationSecond,omitempty" xml:"ExpirationSecond,omitempty"`
	// example:
	//
	// 2024-07-18T02:55:49.795Z
	ExpirationTime *string `json:"ExpirationTime,omitempty" xml:"ExpirationTime,omitempty"`
	// example:
	//
	// 667d5a322ebf7409e91c485d808fb3bd8a73efbb
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// example:
	//
	// 1594642
	Size      *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
}

func (s DownloadCdsFileResponseBodyDownloadFileModel) String() string {
	return tea.Prettify(s)
}

func (s DownloadCdsFileResponseBodyDownloadFileModel) GoString() string {
	return s.String()
}

func (s *DownloadCdsFileResponseBodyDownloadFileModel) SetDownloadType(v string) *DownloadCdsFileResponseBodyDownloadFileModel {
	s.DownloadType = &v
	return s
}

func (s *DownloadCdsFileResponseBodyDownloadFileModel) SetDownloadUrl(v string) *DownloadCdsFileResponseBodyDownloadFileModel {
	s.DownloadUrl = &v
	return s
}

func (s *DownloadCdsFileResponseBodyDownloadFileModel) SetExpirationSecond(v string) *DownloadCdsFileResponseBodyDownloadFileModel {
	s.ExpirationSecond = &v
	return s
}

func (s *DownloadCdsFileResponseBodyDownloadFileModel) SetExpirationTime(v string) *DownloadCdsFileResponseBodyDownloadFileModel {
	s.ExpirationTime = &v
	return s
}

func (s *DownloadCdsFileResponseBodyDownloadFileModel) SetFileId(v string) *DownloadCdsFileResponseBodyDownloadFileModel {
	s.FileId = &v
	return s
}

func (s *DownloadCdsFileResponseBodyDownloadFileModel) SetSize(v int64) *DownloadCdsFileResponseBodyDownloadFileModel {
	s.Size = &v
	return s
}

func (s *DownloadCdsFileResponseBodyDownloadFileModel) SetStreamUrl(v string) *DownloadCdsFileResponseBodyDownloadFileModel {
	s.StreamUrl = &v
	return s
}

type DownloadCdsFileResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadCdsFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadCdsFileResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadCdsFileResponse) GoString() string {
	return s.String()
}

func (s *DownloadCdsFileResponse) SetHeaders(v map[string]*string) *DownloadCdsFileResponse {
	s.Headers = v
	return s
}

func (s *DownloadCdsFileResponse) SetStatusCode(v int32) *DownloadCdsFileResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadCdsFileResponse) SetBody(v *DownloadCdsFileResponseBody) *DownloadCdsFileResponse {
	s.Body = v
	return s
}

type ExportClientEventsRequest struct {
	// The ID of the cloud desktop.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The name of the cloud desktop.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The end of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.
	//
	// If you do not specify a value for this parameter, the current time is used.
	//
	// example:
	//
	// 2022-03-23T07:11:01Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the endpoint user.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The type of event that you want to query. Valid values:
	//
	// 	- DESKTOP_CONNECT: The desktop session is established.
	//
	// 	- DESKTOP_DISCONNECT: The desktop session is disconnected.
	//
	// 	- DESKTOP_REBOOT: The cloud desktop is restarted.
	//
	// 	- CLIENT_AD_LOGIN: The AD user logs on to the client.
	//
	// 	- GET_CONNECTION_TICKET: The request to connect to the cloud desktop is sent.
	//
	// 	- DESKTOP_START: The cloud desktop is started.
	//
	// 	- DESKTOP_STOP: The cloud desktop is stopped.
	//
	// If you do not specify a value for this parameter, events of all types are queried.
	//
	// example:
	//
	// CLIENT_LOGIN
	EventType *string `json:"EventType,omitempty" xml:"EventType,omitempty"`
	// The types of event.
	EventTypes []*string `json:"EventTypes,omitempty" xml:"EventTypes,omitempty" type:"Repeated"`
	// The language in which the cloud desktop is displayed in the console UI. You can export the list of cloud desktops in the specified language. Valid values:
	//
	// 	- `zh-CN`: Simplified Chinese
	//
	// 	- `en-GB`: English (United Kingdom)
	//
	// Default value: `zh-CN`.
	//
	// example:
	//
	// zh-CN
	LangType *string `json:"LangType,omitempty" xml:"LangType,omitempty"`
	// The number of entries to return on each page.
	//
	// 	- Maximum value: 5000.
	//
	// 	- Default value: 5000.
	//
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The ID of the workspace.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The name of the workspace.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The beginning of the time range to query. Specify the time in the [ISO 8601](https://help.aliyun.com/document_detail/25696.html) standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.
	//
	// If you do not specify a value for this parameter, all events that occurred before the point in time that you specify for `EndTime` are queried.
	//
	// example:
	//
	// 2022-03-23T04:10:21Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ExportClientEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportClientEventsRequest) GoString() string {
	return s.String()
}

func (s *ExportClientEventsRequest) SetDesktopId(v string) *ExportClientEventsRequest {
	s.DesktopId = &v
	return s
}

func (s *ExportClientEventsRequest) SetDesktopName(v string) *ExportClientEventsRequest {
	s.DesktopName = &v
	return s
}

func (s *ExportClientEventsRequest) SetEndTime(v string) *ExportClientEventsRequest {
	s.EndTime = &v
	return s
}

func (s *ExportClientEventsRequest) SetEndUserId(v string) *ExportClientEventsRequest {
	s.EndUserId = &v
	return s
}

func (s *ExportClientEventsRequest) SetEventType(v string) *ExportClientEventsRequest {
	s.EventType = &v
	return s
}

func (s *ExportClientEventsRequest) SetEventTypes(v []*string) *ExportClientEventsRequest {
	s.EventTypes = v
	return s
}

func (s *ExportClientEventsRequest) SetLangType(v string) *ExportClientEventsRequest {
	s.LangType = &v
	return s
}

func (s *ExportClientEventsRequest) SetMaxResults(v int32) *ExportClientEventsRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportClientEventsRequest) SetOfficeSiteId(v string) *ExportClientEventsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ExportClientEventsRequest) SetOfficeSiteName(v string) *ExportClientEventsRequest {
	s.OfficeSiteName = &v
	return s
}

func (s *ExportClientEventsRequest) SetRegionId(v string) *ExportClientEventsRequest {
	s.RegionId = &v
	return s
}

func (s *ExportClientEventsRequest) SetStartTime(v string) *ExportClientEventsRequest {
	s.StartTime = &v
	return s
}

type ExportClientEventsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The download address from which you can export desktop groups.
	//
	// example:
	//
	// https://cn-shanghai-servicemanager.oss-cn-shanghai.aliyuncs.com/A0_CLIENT_EVENT/EDS_Events%20List_20220519234611_w5HuD83KGs.csv?Expires=1652975773&OSSAccessKeyId=LTYL****8tso&Signature=4erMG*********k%3D
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ExportClientEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportClientEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ExportClientEventsResponseBody) SetRequestId(v string) *ExportClientEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportClientEventsResponseBody) SetUrl(v string) *ExportClientEventsResponseBody {
	s.Url = &v
	return s
}

type ExportClientEventsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportClientEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportClientEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportClientEventsResponse) GoString() string {
	return s.String()
}

func (s *ExportClientEventsResponse) SetHeaders(v map[string]*string) *ExportClientEventsResponse {
	s.Headers = v
	return s
}

func (s *ExportClientEventsResponse) SetStatusCode(v int32) *ExportClientEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportClientEventsResponse) SetBody(v *ExportClientEventsResponseBody) *ExportClientEventsResponse {
	s.Body = v
	return s
}

type ExportDesktopGroupInfoRequest struct {
	// The billing method of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- PostPaid: pay-as-you-go.
	//
	// 	- PrePaid: subscription.
	//
	// example:
	//
	// PrePaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The IDs of the cloud computer pools.
	DesktopGroupId []*string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty" type:"Repeated"`
	// The name of the cloud computer pool.
	//
	// example:
	//
	// test
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// The authorized user IDs of cloud computer pools.
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The time when the subscription cloud computer pool expires.
	//
	// example:
	//
	// 2022-12-31T15:59Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The language of the response.
	//
	// example:
	//
	// zh-CN
	LangType *string `json:"LangType,omitempty" xml:"LangType,omitempty"`
	// The number of entries to return on each page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this parameter is left empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the office network to which the cloud computer pool belongs.
	//
	// example:
	//
	// cn-hangzhou+dir-467671****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The ID of the policy that is associated with the cloud computer pool.
	//
	// example:
	//
	// pg-53iyi2aar0nd6****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags attached to the cloud computer pool. You can specify 1 to 20 tags.
	Tag []*ExportDesktopGroupInfoRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ExportDesktopGroupInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopGroupInfoRequest) GoString() string {
	return s.String()
}

func (s *ExportDesktopGroupInfoRequest) SetChargeType(v string) *ExportDesktopGroupInfoRequest {
	s.ChargeType = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetDesktopGroupId(v []*string) *ExportDesktopGroupInfoRequest {
	s.DesktopGroupId = v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetDesktopGroupName(v string) *ExportDesktopGroupInfoRequest {
	s.DesktopGroupName = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetEndUserId(v []*string) *ExportDesktopGroupInfoRequest {
	s.EndUserId = v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetExpiredTime(v string) *ExportDesktopGroupInfoRequest {
	s.ExpiredTime = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetLangType(v string) *ExportDesktopGroupInfoRequest {
	s.LangType = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetMaxResults(v int32) *ExportDesktopGroupInfoRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetNextToken(v string) *ExportDesktopGroupInfoRequest {
	s.NextToken = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetOfficeSiteId(v string) *ExportDesktopGroupInfoRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetPolicyGroupId(v string) *ExportDesktopGroupInfoRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetRegionId(v string) *ExportDesktopGroupInfoRequest {
	s.RegionId = &v
	return s
}

func (s *ExportDesktopGroupInfoRequest) SetTag(v []*ExportDesktopGroupInfoRequestTag) *ExportDesktopGroupInfoRequest {
	s.Tag = v
	return s
}

type ExportDesktopGroupInfoRequestTag struct {
	// The key of the tag. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `aliyun` or `acs:`. You cannot specify an empty string as a tag key.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The value of the tag. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ExportDesktopGroupInfoRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopGroupInfoRequestTag) GoString() string {
	return s.String()
}

func (s *ExportDesktopGroupInfoRequestTag) SetKey(v string) *ExportDesktopGroupInfoRequestTag {
	s.Key = &v
	return s
}

func (s *ExportDesktopGroupInfoRequestTag) SetValue(v string) *ExportDesktopGroupInfoRequestTag {
	s.Value = &v
	return s
}

type ExportDesktopGroupInfoResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 24E05D3E-08F4-551E-B1F0-F6D84EE0BCCC
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The URL from which you can download the exported cloud computer pools. The details of the cloud computer pools include:
	//
	// 	- IDs and names of the cloud computer pools
	//
	// 	- IDs and names of the office networks
	//
	// 	- Cloud computer pool templates
	//
	// 	- Number of CPU cores and memory size
	//
	// 	- System disks and data disks
	//
	// 	- Names of security policies
	//
	// 	- Number of current authorized users
	//
	// 	- Billing methods
	//
	// 	- The time when the cloud computer pools were created
	//
	// 	- The time when the cloud computer pools expire
	//
	// example:
	//
	// https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktopGroups_202203********_xBjqdCT***.xlsx?*********
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ExportDesktopGroupInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopGroupInfoResponseBody) GoString() string {
	return s.String()
}

func (s *ExportDesktopGroupInfoResponseBody) SetRequestId(v string) *ExportDesktopGroupInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportDesktopGroupInfoResponseBody) SetUrl(v string) *ExportDesktopGroupInfoResponseBody {
	s.Url = &v
	return s
}

type ExportDesktopGroupInfoResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportDesktopGroupInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportDesktopGroupInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopGroupInfoResponse) GoString() string {
	return s.String()
}

func (s *ExportDesktopGroupInfoResponse) SetHeaders(v map[string]*string) *ExportDesktopGroupInfoResponse {
	s.Headers = v
	return s
}

func (s *ExportDesktopGroupInfoResponse) SetStatusCode(v int32) *ExportDesktopGroupInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportDesktopGroupInfoResponse) SetBody(v *ExportDesktopGroupInfoResponseBody) *ExportDesktopGroupInfoResponse {
	s.Body = v
	return s
}

type ExportDesktopListInfoRequest struct {
	// The billing method of the cloud computer.
	//
	// Default value: Postpaid. Valid values:
	//
	// 	- Postpaid: pay-as-you-go
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PrePaid: subscription
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PostPaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The IDs of the cloud computers. You can specify 1 to 100 IDs.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The name of the cloud computer.
	//
	// example:
	//
	// testName
	DesktopName *string `json:"DesktopName,omitempty" xml:"DesktopName,omitempty"`
	// The status of the cloud computers.
	//
	// Valid values:
	//
	// 	- Stopped
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Starting
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Rebuilding
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Running
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Stopping
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Expired
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Deleted
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Pending
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Running
	DesktopStatus *string `json:"DesktopStatus,omitempty" xml:"DesktopStatus,omitempty"`
	// The IDs of the end users of the cloud computer. You can specify 1 to 100 IDs.
	//
	// >  During a specific period of time, only one user can connect to and use the cloud computer.
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The time when a subscription cloud computer expires.
	//
	// example:
	//
	// 2022-12-31T15:59Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The ID of the cloud computer pool to which the cloud computers belong.
	//
	// example:
	//
	// dg-boyczi8enfyc5***
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The language in which the cloud computer is displayed in the console UI. You can export the list of cloud computers in the specified language.
	//
	// Default value: zh-CN. Valid values:
	//
	// 	- zh-CN: Simplified Chinese
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- en-GB: British English
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// `zh-CN`
	LangType *string `json:"LangType,omitempty" xml:"LangType,omitempty"`
	// The number of entries per page.
	//
	// Maximum value: 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that is used for the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The office network ID.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The ID of the policy that is attached to the cloud computer.
	//
	// example:
	//
	// system-all-enabled-policy
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The tags that are added to the cloud computer. A tag is a key-value pair that consists of a tag key and a tag value. Tags are used to identify resources. You can use tags to manage cloud computers by group. This facilitates search and batch operations. For more information, see [Use tags to manage cloud computers](https://help.aliyun.com/document_detail/203781.html).
	Tag []*ExportDesktopListInfoRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	// The username of the end user who is using the cloud computer.
	//
	// example:
	//
	// alice
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ExportDesktopListInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopListInfoRequest) GoString() string {
	return s.String()
}

func (s *ExportDesktopListInfoRequest) SetChargeType(v string) *ExportDesktopListInfoRequest {
	s.ChargeType = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetDesktopId(v []*string) *ExportDesktopListInfoRequest {
	s.DesktopId = v
	return s
}

func (s *ExportDesktopListInfoRequest) SetDesktopName(v string) *ExportDesktopListInfoRequest {
	s.DesktopName = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetDesktopStatus(v string) *ExportDesktopListInfoRequest {
	s.DesktopStatus = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetEndUserId(v []*string) *ExportDesktopListInfoRequest {
	s.EndUserId = v
	return s
}

func (s *ExportDesktopListInfoRequest) SetExpiredTime(v string) *ExportDesktopListInfoRequest {
	s.ExpiredTime = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetGroupId(v string) *ExportDesktopListInfoRequest {
	s.GroupId = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetLangType(v string) *ExportDesktopListInfoRequest {
	s.LangType = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetMaxResults(v int32) *ExportDesktopListInfoRequest {
	s.MaxResults = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetNextToken(v string) *ExportDesktopListInfoRequest {
	s.NextToken = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetOfficeSiteId(v string) *ExportDesktopListInfoRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetPolicyGroupId(v string) *ExportDesktopListInfoRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetRegionId(v string) *ExportDesktopListInfoRequest {
	s.RegionId = &v
	return s
}

func (s *ExportDesktopListInfoRequest) SetTag(v []*ExportDesktopListInfoRequestTag) *ExportDesktopListInfoRequest {
	s.Tag = v
	return s
}

func (s *ExportDesktopListInfoRequest) SetUserName(v string) *ExportDesktopListInfoRequest {
	s.UserName = &v
	return s
}

type ExportDesktopListInfoRequestTag struct {
	// The tag key. If you specify the `Tag` parameter, you must also specify the `Key` parameter. The tag key can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag key cannot start with `acs:` or `aliyun` and cannot contain only spaces.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag value. The tag value can be up to 128 characters in length and cannot contain `http://` or `https://`. The tag value cannot start with `acs:` or `aliyun`.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ExportDesktopListInfoRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopListInfoRequestTag) GoString() string {
	return s.String()
}

func (s *ExportDesktopListInfoRequestTag) SetKey(v string) *ExportDesktopListInfoRequestTag {
	s.Key = &v
	return s
}

func (s *ExportDesktopListInfoRequestTag) SetValue(v string) *ExportDesktopListInfoRequestTag {
	s.Value = &v
	return s
}

type ExportDesktopListInfoResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The URL of the exported file of the cloud computer list.
	//
	// example:
	//
	// https://cn-hangzhou-servicemanager.oss-cn-hangzhou.aliyuncs.com/A0_DESKTOP/EDS_CloudDesktops%20List_2022**********_w3fq******.csv?**********
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ExportDesktopListInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopListInfoResponseBody) GoString() string {
	return s.String()
}

func (s *ExportDesktopListInfoResponseBody) SetRequestId(v string) *ExportDesktopListInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExportDesktopListInfoResponseBody) SetUrl(v string) *ExportDesktopListInfoResponseBody {
	s.Url = &v
	return s
}

type ExportDesktopListInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExportDesktopListInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExportDesktopListInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ExportDesktopListInfoResponse) GoString() string {
	return s.String()
}

func (s *ExportDesktopListInfoResponse) SetHeaders(v map[string]*string) *ExportDesktopListInfoResponse {
	s.Headers = v
	return s
}

func (s *ExportDesktopListInfoResponse) SetStatusCode(v int32) *ExportDesktopListInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *ExportDesktopListInfoResponse) SetBody(v *ExportDesktopListInfoResponseBody) *ExportDesktopListInfoResponse {
	s.Body = v
	return s
}

type GetAsyncTaskRequest struct {
	// The asynchronous task ID. This parameter is not returned if you copy files. This parameter is returned if you copy folders in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and information about an asynchronous task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 81a8a07a-aec4-4dd5-80da-ae69e482****
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai+cds-135515****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
}

func (s GetAsyncTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncTaskRequest) GoString() string {
	return s.String()
}

func (s *GetAsyncTaskRequest) SetAsyncTaskId(v string) *GetAsyncTaskRequest {
	s.AsyncTaskId = &v
	return s
}

func (s *GetAsyncTaskRequest) SetCdsId(v string) *GetAsyncTaskRequest {
	s.CdsId = &v
	return s
}

type GetAsyncTaskResponseBody struct {
	// The operation result. If the request was successful, a success message is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data information.
	Data *GetAsyncTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsyncTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsyncTaskResponseBody) SetCode(v string) *GetAsyncTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsyncTaskResponseBody) SetData(v *GetAsyncTaskResponseBodyData) *GetAsyncTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetAsyncTaskResponseBody) SetRequestId(v string) *GetAsyncTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsyncTaskResponseBody) SetSuccess(v string) *GetAsyncTaskResponseBody {
	s.Success = &v
	return s
}

type GetAsyncTaskResponseBodyData struct {
	// The asynchronous task ID.
	//
	// example:
	//
	// 000e89fb-cf8f-11e9-8ab4-b6e98080****
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// The total number of asynchronous tasks that are processed. Example: the number of files that are packaged and downloaded on the server.
	//
	// example:
	//
	// 100
	ConsumedProcess *string `json:"ConsumedProcess,omitempty" xml:"ConsumedProcess,omitempty"`
	// The error code of the asynchronous task.
	//
	// example:
	//
	// InternalError
	ErrCode *int64 `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
	// The error message of the asynchronous task.
	//
	// example:
	//
	// The request has been failed due to some unknown error. Please try again later.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The task status.
	//
	// Valid values:
	//
	// 	- Failed: The task failed.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Running: The task was running.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PartialSucceed: The task did not completely succeed.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Succeed: The task succeeded.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Failed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The total number of asynchronous tasks to be processed, such as the amount of files to be downloaded and packaged on the server.
	//
	// example:
	//
	// 1000
	TotalProcess *int64 `json:"TotalProcess,omitempty" xml:"TotalProcess,omitempty"`
	// The URL to download data generated by the asynchronous task. Example: the URL to package and download tasks on the server.
	//
	// example:
	//
	// https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899eff525?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetAsyncTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAsyncTaskResponseBodyData) SetAsyncTaskId(v string) *GetAsyncTaskResponseBodyData {
	s.AsyncTaskId = &v
	return s
}

func (s *GetAsyncTaskResponseBodyData) SetConsumedProcess(v string) *GetAsyncTaskResponseBodyData {
	s.ConsumedProcess = &v
	return s
}

func (s *GetAsyncTaskResponseBodyData) SetErrCode(v int64) *GetAsyncTaskResponseBodyData {
	s.ErrCode = &v
	return s
}

func (s *GetAsyncTaskResponseBodyData) SetMessage(v string) *GetAsyncTaskResponseBodyData {
	s.Message = &v
	return s
}

func (s *GetAsyncTaskResponseBodyData) SetStatus(v string) *GetAsyncTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetAsyncTaskResponseBodyData) SetTotalProcess(v int64) *GetAsyncTaskResponseBodyData {
	s.TotalProcess = &v
	return s
}

func (s *GetAsyncTaskResponseBodyData) SetUrl(v string) *GetAsyncTaskResponseBodyData {
	s.Url = &v
	return s
}

type GetAsyncTaskResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAsyncTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAsyncTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncTaskResponse) GoString() string {
	return s.String()
}

func (s *GetAsyncTaskResponse) SetHeaders(v map[string]*string) *GetAsyncTaskResponse {
	s.Headers = v
	return s
}

func (s *GetAsyncTaskResponse) SetStatusCode(v int32) *GetAsyncTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsyncTaskResponse) SetBody(v *GetAsyncTaskResponseBody) *GetAsyncTaskResponse {
	s.Body = v
	return s
}

type GetConnectionTicketRequest struct {
	// The command that you want to run to configure a custom application in user mode. After you obtain the credential, the application is automatically started. Parameter description in the command:
	//
	// 	- appPath: the path of the application startup file. Example: `"C:\\\\Program Files (x86)\\\\000\\\\000.exe"`. Use double slashes (\\\\\\) as the delimiter. Type of the parameter value: string.
	//
	// 	- appParameter: the startup arguments of the application. Example: `"meetingid 000 meetingname aaa"`. Separate multiple arguments with spaces. Type of the parameter value: string.
	//
	// example:
	//
	// {
	//
	//       "startApplication": {
	//
	//             "startApplicationList": [
	//
	//                   {
	//
	//                         "sessionName": "",
	//
	//                         "appList": [
	//
	//                               {
	//
	//                                     "appPath": "C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe",
	//
	//                                     "appParameter": "www.example.com www.example1.com"
	//
	//                               }
	//
	//                         ]
	//
	//                   }
	//
	//             ]
	//
	//       }
	//
	// }
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// The ID of the cloud computer for which you want to generate a connection credential. This parameter is required.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The ID of the end user of the cloud computer. The end user must be the current end user of the cloud computer.
	//
	// example:
	//
	// Alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	OwnerId   *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The password of the current end user of the cloud computer.
	//
	// example:
	//
	// Ab123456
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId             *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// The ID of the cloud computer connection task.
	//
	// example:
	//
	// 2afbad19-778a-4fc5-9674-1f19c63862da
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About*	- on the client logon page to view the identifier of the client.
	//
	// example:
	//
	// 28c80e90-f71e-4c23-93d6-1225329cf949
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GetConnectionTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConnectionTicketRequest) GoString() string {
	return s.String()
}

func (s *GetConnectionTicketRequest) SetCommandContent(v string) *GetConnectionTicketRequest {
	s.CommandContent = &v
	return s
}

func (s *GetConnectionTicketRequest) SetDesktopId(v string) *GetConnectionTicketRequest {
	s.DesktopId = &v
	return s
}

func (s *GetConnectionTicketRequest) SetEndUserId(v string) *GetConnectionTicketRequest {
	s.EndUserId = &v
	return s
}

func (s *GetConnectionTicketRequest) SetOwnerId(v int64) *GetConnectionTicketRequest {
	s.OwnerId = &v
	return s
}

func (s *GetConnectionTicketRequest) SetPassword(v string) *GetConnectionTicketRequest {
	s.Password = &v
	return s
}

func (s *GetConnectionTicketRequest) SetRegionId(v string) *GetConnectionTicketRequest {
	s.RegionId = &v
	return s
}

func (s *GetConnectionTicketRequest) SetResourceOwnerAccount(v string) *GetConnectionTicketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetConnectionTicketRequest) SetResourceOwnerId(v int64) *GetConnectionTicketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetConnectionTicketRequest) SetTaskId(v string) *GetConnectionTicketRequest {
	s.TaskId = &v
	return s
}

func (s *GetConnectionTicketRequest) SetUuid(v string) *GetConnectionTicketRequest {
	s.Uuid = &v
	return s
}

type GetConnectionTicketResponseBody struct {
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskCode  *string `json:"TaskCode,omitempty" xml:"TaskCode,omitempty"`
	// The ID of the cloud computer connection task.
	//
	// example:
	//
	// 2afbad19-778a-4fc5-9674-1f19c638****
	TaskId      *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskMessage *string `json:"TaskMessage,omitempty" xml:"TaskMessage,omitempty"`
	// The task status.
	//
	// Valid values:
	//
	// 	- FAILED: The credential fails to be obtained.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RUNNING: The credential is being obtained.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- FINISHED: The credential is obtained.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// FINISHED
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// The credential that is returned to connect to the cloud computer. Before you use the credential, you must Base64 decode the content of the credential, save the credential as an xxx.ica file, and then open the file. Python sample code:
	//
	//     import base64
	//
	//     response = {
	//
	//         "Ticket": "W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********",
	//
	//         "RequestId": "1CBAFFAB-B697-4049-A9B1-67E1FC5F****",
	//
	//     }
	//
	//     f = open (\\"xxx.ica\\", \\"w\\")
	//
	//     out = base64.b64decode(response[\\"Ticket\\"])
	//
	//     f.write(out)
	//
	//     f.close()
	//
	// example:
	//
	// W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********
	Ticket *string `json:"Ticket,omitempty" xml:"Ticket,omitempty"`
}

func (s GetConnectionTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetConnectionTicketResponseBody) GoString() string {
	return s.String()
}

func (s *GetConnectionTicketResponseBody) SetDesktopId(v string) *GetConnectionTicketResponseBody {
	s.DesktopId = &v
	return s
}

func (s *GetConnectionTicketResponseBody) SetRequestId(v string) *GetConnectionTicketResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetConnectionTicketResponseBody) SetTaskCode(v string) *GetConnectionTicketResponseBody {
	s.TaskCode = &v
	return s
}

func (s *GetConnectionTicketResponseBody) SetTaskId(v string) *GetConnectionTicketResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetConnectionTicketResponseBody) SetTaskMessage(v string) *GetConnectionTicketResponseBody {
	s.TaskMessage = &v
	return s
}

func (s *GetConnectionTicketResponseBody) SetTaskStatus(v string) *GetConnectionTicketResponseBody {
	s.TaskStatus = &v
	return s
}

func (s *GetConnectionTicketResponseBody) SetTicket(v string) *GetConnectionTicketResponseBody {
	s.Ticket = &v
	return s
}

type GetConnectionTicketResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetConnectionTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetConnectionTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConnectionTicketResponse) GoString() string {
	return s.String()
}

func (s *GetConnectionTicketResponse) SetHeaders(v map[string]*string) *GetConnectionTicketResponse {
	s.Headers = v
	return s
}

func (s *GetConnectionTicketResponse) SetStatusCode(v int32) *GetConnectionTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *GetConnectionTicketResponse) SetBody(v *GetConnectionTicketResponseBody) *GetConnectionTicketResponse {
	s.Body = v
	return s
}

type GetCoordinateTicketRequest struct {
	// The ID of the stream collaboration. You can obtain the value of this parameter based on the value of `Coid` that is returned by the `ApplyCoordinationForMonitoring` operation.
	//
	// This parameter is required.
	//
	// example:
	//
	// co-0sot77uale3****
	CoId *string `json:"CoId,omitempty" xml:"CoId,omitempty"`
	// The name of the convenience user account. If you initiate the request as an administrator, you do not need to specify this parameter.
	//
	// example:
	//
	// Alice
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the cloud computer connection task. The first time you initiate the request, you do not need to specify the ID of the cloud computer connection task. If no ticket is returned after you initiate the first request, you must specify the value of taskId that is returned for the first request in the subsequent request.
	//
	// example:
	//
	// 39cc15e5-6998-4b9f-9b2c-7a4cc3e2****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the user.
	//
	// Set the value to TENANT_ADMIN.
	//
	// 	- The value of
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     TENANT_ADMIN
	//
	//     <!-- -->
	//
	//     specifies an administrator.
	//
	// This parameter is required.
	//
	// example:
	//
	// TENANT_ADMIN
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
}

func (s GetCoordinateTicketRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCoordinateTicketRequest) GoString() string {
	return s.String()
}

func (s *GetCoordinateTicketRequest) SetCoId(v string) *GetCoordinateTicketRequest {
	s.CoId = &v
	return s
}

func (s *GetCoordinateTicketRequest) SetEndUserId(v string) *GetCoordinateTicketRequest {
	s.EndUserId = &v
	return s
}

func (s *GetCoordinateTicketRequest) SetRegionId(v string) *GetCoordinateTicketRequest {
	s.RegionId = &v
	return s
}

func (s *GetCoordinateTicketRequest) SetTaskId(v string) *GetCoordinateTicketRequest {
	s.TaskId = &v
	return s
}

func (s *GetCoordinateTicketRequest) SetUserType(v string) *GetCoordinateTicketRequest {
	s.UserType = &v
	return s
}

type GetCoordinateTicketResponseBody struct {
	// The ID of the stream collaboration.
	//
	// example:
	//
	// co-0sot77uale3****
	CoId *string `json:"CoId,omitempty" xml:"CoId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The ID of the cloud computer connection task.
	//
	// example:
	//
	// 39cc15e5-6998-4b9f-9b2c-7a4cc3e2****
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The task status.
	//
	// Possible values:
	//
	// 	- Finished
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Failed
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Running
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Finished
	TaskStatus *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	// The credentials of the stream collaboration.
	//
	// example:
	//
	// W0VuY29kaW5nXQ0KSW5wdXRFbmNvZGluZz1V********
	Ticket *string `json:"Ticket,omitempty" xml:"Ticket,omitempty"`
}

func (s GetCoordinateTicketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCoordinateTicketResponseBody) GoString() string {
	return s.String()
}

func (s *GetCoordinateTicketResponseBody) SetCoId(v string) *GetCoordinateTicketResponseBody {
	s.CoId = &v
	return s
}

func (s *GetCoordinateTicketResponseBody) SetRequestId(v string) *GetCoordinateTicketResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCoordinateTicketResponseBody) SetTaskId(v string) *GetCoordinateTicketResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetCoordinateTicketResponseBody) SetTaskStatus(v string) *GetCoordinateTicketResponseBody {
	s.TaskStatus = &v
	return s
}

func (s *GetCoordinateTicketResponseBody) SetTicket(v string) *GetCoordinateTicketResponseBody {
	s.Ticket = &v
	return s
}

type GetCoordinateTicketResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCoordinateTicketResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCoordinateTicketResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCoordinateTicketResponse) GoString() string {
	return s.String()
}

func (s *GetCoordinateTicketResponse) SetHeaders(v map[string]*string) *GetCoordinateTicketResponse {
	s.Headers = v
	return s
}

func (s *GetCoordinateTicketResponse) SetStatusCode(v int32) *GetCoordinateTicketResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCoordinateTicketResponse) SetBody(v *GetCoordinateTicketResponseBody) *GetCoordinateTicketResponse {
	s.Body = v
	return s
}

type GetDesktopGroupDetailRequest struct {
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetDesktopGroupDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDesktopGroupDetailRequest) GoString() string {
	return s.String()
}

func (s *GetDesktopGroupDetailRequest) SetDesktopGroupId(v string) *GetDesktopGroupDetailRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *GetDesktopGroupDetailRequest) SetRegionId(v string) *GetDesktopGroupDetailRequest {
	s.RegionId = &v
	return s
}

type GetDesktopGroupDetailResponseBody struct {
	// The information about the cloud computer pool.
	Desktops *GetDesktopGroupDetailResponseBodyDesktops `json:"Desktops,omitempty" xml:"Desktops,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 1B5268CE-5EB3-545F-9F38-A8BCF710****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDesktopGroupDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDesktopGroupDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetDesktopGroupDetailResponseBody) SetDesktops(v *GetDesktopGroupDetailResponseBodyDesktops) *GetDesktopGroupDetailResponseBody {
	s.Desktops = v
	return s
}

func (s *GetDesktopGroupDetailResponseBody) SetRequestId(v string) *GetDesktopGroupDetailResponseBody {
	s.RequestId = &v
	return s
}

type GetDesktopGroupDetailResponseBodyDesktops struct {
	// Indicates whether cloud computers can be automatically created in the subscription cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: false
	//
	// 	- 1: true
	//
	// example:
	//
	// 1
	AllowAutoSetup *int32 `json:"AllowAutoSetup,omitempty" xml:"AllowAutoSetup,omitempty"`
	// The number of cloud computers that is allowed to be reserved in the pay-as-you-go cloud computer pool. Valid values:
	//
	// 	- 0: does not allow the system to reserve cloud computers.
	//
	// 	- N: allows the system to reserve N cloud computers. (1≤ N ≤ 100)
	//
	// example:
	//
	// 1
	AllowBufferCount *int32 `json:"AllowBufferCount,omitempty" xml:"AllowBufferCount,omitempty"`
	// The number of concurrent sessions that is allowed for each cloud computer in a multi-session cloud computer pool.
	//
	// example:
	//
	// 1
	BindAmount *int32 `json:"BindAmount,omitempty" xml:"BindAmount,omitempty"`
	// 	- This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter indicates the number of cloud computers that you purchase in the pool. Valid values: 0 to 200.
	//
	// 	- For a pay-as-you-go pool, this parameter indicates the minimum number of cloud computers that you can create in the pool. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.
	//
	// example:
	//
	// 5
	BuyDesktopsCount *int32 `json:"BuyDesktopsCount,omitempty" xml:"BuyDesktopsCount,omitempty"`
	// The remarks.
	//
	// example:
	//
	// for students
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds.
	//
	// example:
	//
	// 60000
	ConnectDuration *int64 `json:"ConnectDuration,omitempty" xml:"ConnectDuration,omitempty"`
	// The number of vCPUs.
	//
	// example:
	//
	// 4
	Cpu *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The time when the desktop group was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
	//
	// example:
	//
	// 2020-11-06T08:28Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// The Alibaba Cloud account that creates the cloud computer pool.
	//
	// example:
	//
	// 155177335370****
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The category of the user disk.
	//
	// example:
	//
	// cloud_essd
	DataDiskCategory *string `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	// The user disk capacity. Unit: GiB.
	//
	// example:
	//
	// 80
	DataDiskSize *string `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The ID of the cloud computer pool.
	//
	// example:
	//
	// dg-3uiojcc0j4kh7****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The name of the cloud computer pool that is queried.
	//
	// example:
	//
	// DesktopGroupDemo
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// The ID of the directory or office network.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The type of the directory.
	//
	// example:
	//
	// SIMPLE
	DirectoryType *string `json:"DirectoryType,omitempty" xml:"DirectoryType,omitempty"`
	// The time when the subscription cloud computer pool expires.
	//
	// example:
	//
	// 2021-12-31T15:59Z
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// The number of vGPUs.
	//
	// example:
	//
	// 4
	GpuCount *float32 `json:"GpuCount,omitempty" xml:"GpuCount,omitempty"`
	// The GPU specifications.
	//
	// example:
	//
	// NVIDIA T4
	GpuSpec *string `json:"GpuSpec,omitempty" xml:"GpuSpec,omitempty"`
	// After an end user connects to a cloud computer, the session is established. If the system does not detect any inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds.
	//
	// example:
	//
	// 900000
	IdleDisconnectDuration *int64 `json:"IdleDisconnectDuration,omitempty" xml:"IdleDisconnectDuration,omitempty"`
	// The ID of the image.
	//
	// example:
	//
	// m-4zfb6zj728hhr****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The amount of time to retain a session after it is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5760 minutes (4 days). If you specify the value to 0, the session is permanently retained.
	//
	// When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can still access data of the session.
	//
	// example:
	//
	// 180000
	KeepDuration *int64 `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	// The load balancing policy of the multi-session cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: depth-first
	//
	// 	- 1: breadth-first
	//
	// example:
	//
	// 0
	LoadPolicy *int32 `json:"LoadPolicy,omitempty" xml:"LoadPolicy,omitempty"`
	// The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool.
	//
	// example:
	//
	// 10
	MaxDesktopsCount *int32 `json:"MaxDesktopsCount,omitempty" xml:"MaxDesktopsCount,omitempty"`
	// The memory size. Unit: MiB.
	//
	// example:
	//
	// 4096
	Memory *int64 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool.
	//
	// example:
	//
	// 1
	MinDesktopsCount *int32 `json:"MinDesktopsCount,omitempty" xml:"MinDesktopsCount,omitempty"`
	// The ID of the File Storage NAS (NAS) file system for the user data roaming feature.
	//
	// example:
	//
	// 0783b4****
	NasFileSystemID *string `json:"NasFileSystemID,omitempty" xml:"NasFileSystemID,omitempty"`
	// The name of the NAS file system for the user data roaming feature.
	//
	// example:
	//
	// abcd
	NasFileSystemName *string `json:"NasFileSystemName,omitempty" xml:"NasFileSystemName,omitempty"`
	// The ID of the office network.
	//
	// example:
	//
	// cn-hangzhou+dir-990541****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The name of the office network in which the cloud computer pool resides.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The office network type.
	//
	// Valid values:
	//
	// 	- PERSONAL: individual office network
	//
	// 	- SIMPLE: convenience office network
	//
	// 	- AD_CONNECTOR: enterprise Active Directory (AD) office network
	//
	// 	- RAM: Resource Access Management (RAM)-based office network
	//
	// example:
	//
	// SIMPLE
	OfficeSiteType *string `json:"OfficeSiteType,omitempty" xml:"OfficeSiteType,omitempty"`
	// The ID of the cloud computer template.
	//
	// example:
	//
	// b-1se9fb37r5tfq****
	OwnBundleId *string `json:"OwnBundleId,omitempty" xml:"OwnBundleId,omitempty"`
	// The name of the cloud computer template.
	//
	// example:
	//
	// BundleDemo
	OwnBundleName *string `json:"OwnBundleName,omitempty" xml:"OwnBundleName,omitempty"`
	// The type of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: individual (single session)
	//
	// 	- 1: shared (multiple sessions)
	//
	// example:
	//
	// 0
	OwnType *int32 `json:"OwnType,omitempty" xml:"OwnType,omitempty"`
	// The billing method.
	//
	// Valid values:
	//
	// 	- PostPaid: pay-as-you-go.
	//
	// 	- PrePaid: subscription.
	//
	// example:
	//
	// PrePaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The ID of the policy that is associated with the cloud computer pool.
	//
	// example:
	//
	// pg-9cktlowtxfl6****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The IDs of policies that are associated with the cloud computer pool.
	PolicyGroupIds []*string `json:"PolicyGroupIds,omitempty" xml:"PolicyGroupIds,omitempty" type:"Repeated"`
	// The name of the policy that is associated with the cloud computer pool.
	//
	// example:
	//
	// test
	PolicyGroupName *string `json:"PolicyGroupName,omitempty" xml:"PolicyGroupName,omitempty"`
	// The names of policies that are associated with the cloud computer pool.
	PolicyGroupNames []*string `json:"PolicyGroupNames,omitempty" xml:"PolicyGroupNames,omitempty" type:"Repeated"`
	// Indicates whether user data roaming is enabled.
	//
	// example:
	//
	// true
	ProfileFollowSwitch *bool `json:"ProfileFollowSwitch,omitempty" xml:"ProfileFollowSwitch,omitempty"`
	// The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. To calculate the ratio of connected sessions, use the following formula:
	//
	// `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`
	//
	// If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.
	//
	// example:
	//
	// 0.6
	RatioThreshold *float32 `json:"RatioThreshold,omitempty" xml:"RatioThreshold,omitempty"`
	// The type of the resource. Only Elastic Compute Service (ECS) instances are supported.
	//
	// Valid value:
	//
	// 	- 0: ECS
	//
	// example:
	//
	// 0
	ResType *int32 `json:"ResType,omitempty" xml:"ResType,omitempty"`
	// The disk reset type of the cloud computer.
	//
	// Valid values:
	//
	// 	- 0: does not reset disks.
	//
	// 	- 1: resets only the system disk.
	//
	// 	- 2: resets only the user disk.
	//
	// 	- 3: resets the system disk and the user disk.
	//
	// example:
	//
	// 0
	ResetType *int32 `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// Details of the scheduled tasks.
	ScaleTimerInfos []*GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos `json:"ScaleTimerInfos,omitempty" xml:"ScaleTimerInfos,omitempty" type:"Repeated"`
	// The payment status of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: unpaid
	//
	// 	- 1: paid
	//
	// 	- 2: overdue or expired
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The period of time before the idle cloud computer enters the Stopped state. If the specified value is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer automatically starts. Unit: milliseconds.
	//
	// example:
	//
	// 180000
	StopDuration *int64 `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
	// The category of the system disk.
	//
	// example:
	//
	// cloud_essd
	SystemDiskCategory *string `json:"SystemDiskCategory,omitempty" xml:"SystemDiskCategory,omitempty"`
	// The system disk capacity. Unit: GiB.
	//
	// example:
	//
	// 80
	SystemDiskSize *int32 `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	// The list of scheduled points in time for desktop group tasks.
	TimerInfos []*GetDesktopGroupDetailResponseBodyDesktopsTimerInfos `json:"TimerInfos,omitempty" xml:"TimerInfos,omitempty" type:"Repeated"`
	// The information about the scheduling policy.
	//
	// example:
	//
	// abcd
	TimingStrategyInfo *string `json:"TimingStrategyInfo,omitempty" xml:"TimingStrategyInfo,omitempty"`
	// The version number of the cloud computer pool.
	//
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetDesktopGroupDetailResponseBodyDesktops) String() string {
	return tea.Prettify(s)
}

func (s GetDesktopGroupDetailResponseBodyDesktops) GoString() string {
	return s.String()
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetAllowAutoSetup(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.AllowAutoSetup = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetAllowBufferCount(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.AllowBufferCount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetBindAmount(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.BindAmount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetBuyDesktopsCount(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.BuyDesktopsCount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetComments(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.Comments = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetConnectDuration(v int64) *GetDesktopGroupDetailResponseBodyDesktops {
	s.ConnectDuration = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetCpu(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.Cpu = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetCreationTime(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.CreationTime = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetCreator(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.Creator = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetDataDiskCategory(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.DataDiskCategory = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetDataDiskSize(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.DataDiskSize = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetDesktopGroupId(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.DesktopGroupId = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetDesktopGroupName(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.DesktopGroupName = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetDirectoryId(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.DirectoryId = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetDirectoryType(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.DirectoryType = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetExpiredTime(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.ExpiredTime = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetGpuCount(v float32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.GpuCount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetGpuSpec(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.GpuSpec = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetIdleDisconnectDuration(v int64) *GetDesktopGroupDetailResponseBodyDesktops {
	s.IdleDisconnectDuration = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetImageId(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.ImageId = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetKeepDuration(v int64) *GetDesktopGroupDetailResponseBodyDesktops {
	s.KeepDuration = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetLoadPolicy(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.LoadPolicy = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetMaxDesktopsCount(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.MaxDesktopsCount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetMemory(v int64) *GetDesktopGroupDetailResponseBodyDesktops {
	s.Memory = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetMinDesktopsCount(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.MinDesktopsCount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetNasFileSystemID(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.NasFileSystemID = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetNasFileSystemName(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.NasFileSystemName = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetOfficeSiteId(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.OfficeSiteId = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetOfficeSiteName(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.OfficeSiteName = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetOfficeSiteType(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.OfficeSiteType = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetOwnBundleId(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.OwnBundleId = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetOwnBundleName(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.OwnBundleName = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetOwnType(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.OwnType = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetPayType(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.PayType = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetPolicyGroupId(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.PolicyGroupId = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetPolicyGroupIds(v []*string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.PolicyGroupIds = v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetPolicyGroupName(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.PolicyGroupName = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetPolicyGroupNames(v []*string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.PolicyGroupNames = v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetProfileFollowSwitch(v bool) *GetDesktopGroupDetailResponseBodyDesktops {
	s.ProfileFollowSwitch = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetRatioThreshold(v float32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.RatioThreshold = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetResType(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.ResType = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetResetType(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.ResetType = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetScaleTimerInfos(v []*GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) *GetDesktopGroupDetailResponseBodyDesktops {
	s.ScaleTimerInfos = v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetStatus(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.Status = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetStopDuration(v int64) *GetDesktopGroupDetailResponseBodyDesktops {
	s.StopDuration = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetSystemDiskCategory(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.SystemDiskCategory = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetSystemDiskSize(v int32) *GetDesktopGroupDetailResponseBodyDesktops {
	s.SystemDiskSize = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetTimerInfos(v []*GetDesktopGroupDetailResponseBodyDesktopsTimerInfos) *GetDesktopGroupDetailResponseBodyDesktops {
	s.TimerInfos = v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetTimingStrategyInfo(v string) *GetDesktopGroupDetailResponseBodyDesktops {
	s.TimingStrategyInfo = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktops) SetVersion(v int64) *GetDesktopGroupDetailResponseBodyDesktops {
	s.Version = &v
	return s
}

type GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos struct {
	// The number of cloud computers that you purchase in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.
	//
	// example:
	//
	// 5
	BuyResAmount *int32 `json:"BuyResAmount,omitempty" xml:"BuyResAmount,omitempty"`
	// The cron expression for the scheduled task.
	//
	// example:
	//
	// 0 0 0 	- 	- ?
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The duration that is retained after the session is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5760 minutes (4 days). If you specify the value to 0, the session is permanently retained.
	//
	// When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can still access data of the session.
	//
	// example:
	//
	// 600000
	KeepDuration *int64 `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	// The load balancing policy of the multi-session cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: depth-first
	//
	// 	- 1: breadth-first
	//
	// example:
	//
	// 1
	LoadPolicy *int32 `json:"LoadPolicy,omitempty" xml:"LoadPolicy,omitempty"`
	// The maximum number of cloud computers in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.
	//
	// example:
	//
	// 100
	MaxResAmount *int32 `json:"MaxResAmount,omitempty" xml:"MaxResAmount,omitempty"`
	// The minimum number of cloud computers in the cloud computer pool. This parameter is one of the auto scaling parameters. Valid values: 0 to 200.
	//
	// example:
	//
	// 1
	MinResAmount *int32 `json:"MinResAmount,omitempty" xml:"MinResAmount,omitempty"`
	// The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. To calculate the ratio of connected sessions, use the following formula:
	//
	// `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`
	//
	// If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.
	//
	// example:
	//
	// 0.5
	RatioThreshold *float32 `json:"RatioThreshold,omitempty" xml:"RatioThreshold,omitempty"`
	// The type of the scheduled task.
	//
	// Valid values:
	//
	// 	- drop: decline policy
	//
	// 	- normal: normal policy
	//
	// 	- peak: peak hour policy
	//
	// 	- rise: rise policy
	//
	// example:
	//
	// rise
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) String() string {
	return tea.Prettify(s)
}

func (s GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) GoString() string {
	return s.String()
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetBuyResAmount(v int32) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.BuyResAmount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetCron(v string) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.Cron = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetKeepDuration(v int64) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.KeepDuration = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetLoadPolicy(v int32) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.LoadPolicy = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetMaxResAmount(v int32) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.MaxResAmount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetMinResAmount(v int32) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.MinResAmount = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetRatioThreshold(v float32) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.RatioThreshold = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos) SetType(v string) *GetDesktopGroupDetailResponseBodyDesktopsScaleTimerInfos {
	s.Type = &v
	return s
}

type GetDesktopGroupDetailResponseBodyDesktopsTimerInfos struct {
	// The cron expression.
	//
	// example:
	//
	// 0 58 11 ? 	- 2
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// Indicates whether the scheduled task is forcibly executed.
	//
	// example:
	//
	// false
	Forced *bool `json:"Forced,omitempty" xml:"Forced,omitempty"`
	// The status of the cloud computer pool.
	//
	// Valid values:
	//
	// 	- 1: enabled
	//
	// 	- 2: disabled
	//
	// 	- 3: deleted
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the scheduled task.
	//
	// Valid values:
	//
	// 	- 1: scheduled reset
	//
	// 	- 2: scheduled startup
	//
	// 	- 3: scheduled stop
	//
	// 	- 4: scheduled restart
	//
	// example:
	//
	// 1
	TimerType *int32 `json:"TimerType,omitempty" xml:"TimerType,omitempty"`
}

func (s GetDesktopGroupDetailResponseBodyDesktopsTimerInfos) String() string {
	return tea.Prettify(s)
}

func (s GetDesktopGroupDetailResponseBodyDesktopsTimerInfos) GoString() string {
	return s.String()
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos) SetCronExpression(v string) *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos {
	s.CronExpression = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos) SetForced(v bool) *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos {
	s.Forced = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos) SetStatus(v int32) *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos {
	s.Status = &v
	return s
}

func (s *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos) SetTimerType(v int32) *GetDesktopGroupDetailResponseBodyDesktopsTimerInfos {
	s.TimerType = &v
	return s
}

type GetDesktopGroupDetailResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDesktopGroupDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDesktopGroupDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDesktopGroupDetailResponse) GoString() string {
	return s.String()
}

func (s *GetDesktopGroupDetailResponse) SetHeaders(v map[string]*string) *GetDesktopGroupDetailResponse {
	s.Headers = v
	return s
}

func (s *GetDesktopGroupDetailResponse) SetStatusCode(v int32) *GetDesktopGroupDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDesktopGroupDetailResponse) SetBody(v *GetDesktopGroupDetailResponseBody) *GetDesktopGroupDetailResponse {
	s.Body = v
	return s
}

type GetOfficeSiteSsoStatusRequest struct {
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetOfficeSiteSsoStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOfficeSiteSsoStatusRequest) GoString() string {
	return s.String()
}

func (s *GetOfficeSiteSsoStatusRequest) SetOfficeSiteId(v string) *GetOfficeSiteSsoStatusRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *GetOfficeSiteSsoStatusRequest) SetRegionId(v string) *GetOfficeSiteSsoStatusRequest {
	s.RegionId = &v
	return s
}

type GetOfficeSiteSsoStatusResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether SSO is enabled.
	//
	// example:
	//
	// false
	SsoStatus *bool `json:"SsoStatus,omitempty" xml:"SsoStatus,omitempty"`
}

func (s GetOfficeSiteSsoStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOfficeSiteSsoStatusResponseBody) GoString() string {
	return s.String()
}

func (s *GetOfficeSiteSsoStatusResponseBody) SetRequestId(v string) *GetOfficeSiteSsoStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOfficeSiteSsoStatusResponseBody) SetSsoStatus(v bool) *GetOfficeSiteSsoStatusResponseBody {
	s.SsoStatus = &v
	return s
}

type GetOfficeSiteSsoStatusResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOfficeSiteSsoStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOfficeSiteSsoStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOfficeSiteSsoStatusResponse) GoString() string {
	return s.String()
}

func (s *GetOfficeSiteSsoStatusResponse) SetHeaders(v map[string]*string) *GetOfficeSiteSsoStatusResponse {
	s.Headers = v
	return s
}

func (s *GetOfficeSiteSsoStatusResponse) SetStatusCode(v int32) *GetOfficeSiteSsoStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOfficeSiteSsoStatusResponse) SetBody(v *GetOfficeSiteSsoStatusResponseBody) *GetOfficeSiteSsoStatusResponse {
	s.Body = v
	return s
}

type GetSpMetadataRequest struct {
	// The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.
	//
	// example:
	//
	// cn-hangzhou+dir-400695****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// cn-hangzhou+dir-400695****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s GetSpMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSpMetadataRequest) GoString() string {
	return s.String()
}

func (s *GetSpMetadataRequest) SetDirectoryId(v string) *GetSpMetadataRequest {
	s.DirectoryId = &v
	return s
}

func (s *GetSpMetadataRequest) SetOfficeSiteId(v string) *GetSpMetadataRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *GetSpMetadataRequest) SetRegionId(v string) *GetSpMetadataRequest {
	s.RegionId = &v
	return s
}

type GetSpMetadataResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The metadata of the SP.
	SpMetadata *string `json:"SpMetadata,omitempty" xml:"SpMetadata,omitempty"`
}

func (s GetSpMetadataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSpMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *GetSpMetadataResponseBody) SetRequestId(v string) *GetSpMetadataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSpMetadataResponseBody) SetSpMetadata(v string) *GetSpMetadataResponseBody {
	s.SpMetadata = &v
	return s
}

type GetSpMetadataResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSpMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSpMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSpMetadataResponse) GoString() string {
	return s.String()
}

func (s *GetSpMetadataResponse) SetHeaders(v map[string]*string) *GetSpMetadataResponse {
	s.Headers = v
	return s
}

func (s *GetSpMetadataResponse) SetStatusCode(v int32) *GetSpMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSpMetadataResponse) SetBody(v *GetSpMetadataResponseBody) *GetSpMetadataResponse {
	s.Body = v
	return s
}

type HibernateDesktopsRequest struct {
	// The IDs of the cloud desktops. You can specify 1 to 20 cloud desktop IDs.
	//
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s HibernateDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s HibernateDesktopsRequest) GoString() string {
	return s.String()
}

func (s *HibernateDesktopsRequest) SetDesktopId(v []*string) *HibernateDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *HibernateDesktopsRequest) SetRegionId(v string) *HibernateDesktopsRequest {
	s.RegionId = &v
	return s
}

type HibernateDesktopsResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 101AE027-8299-5E6E-A782-6C91C962****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s HibernateDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s HibernateDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *HibernateDesktopsResponseBody) SetRequestId(v string) *HibernateDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type HibernateDesktopsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *HibernateDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s HibernateDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s HibernateDesktopsResponse) GoString() string {
	return s.String()
}

func (s *HibernateDesktopsResponse) SetHeaders(v map[string]*string) *HibernateDesktopsResponse {
	s.Headers = v
	return s
}

func (s *HibernateDesktopsResponse) SetStatusCode(v int32) *HibernateDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *HibernateDesktopsResponse) SetBody(v *HibernateDesktopsResponseBody) *HibernateDesktopsResponse {
	s.Body = v
	return s
}

type ListCdsFilesRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-320357****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The ID of the user to whom the cloud disk is allocated.
	//
	// example:
	//
	// testUser
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The IDs of the files to be queried.
	FileIds []*string `json:"FileIds,omitempty" xml:"FileIds,omitempty" type:"Repeated"`
	GroupId *string   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of entries to return on each page. Default value: 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token used for the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The sorting method of the files.
	//
	// Valid values:
	//
	// 	- CreateTimeDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on the time when they are created.
	//
	//     <!-- -->
	//
	// 	- ModifiedTimeAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on the time when they are modified.
	//
	//     <!-- -->
	//
	// 	- NameDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on their names.
	//
	//     <!-- -->
	//
	// 	- SizeAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on their sizes.
	//
	//     <!-- -->
	//
	// 	- ModifiedTimeDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on the time when they are modified.
	//
	//     <!-- -->
	//
	// 	- CreateTimeAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on the time when they are created.
	//
	//     <!-- -->
	//
	// 	- SizeDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on their sizes.
	//
	//     <!-- -->
	//
	// 	- NameAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on their names.
	//
	//     <!-- -->
	//
	// example:
	//
	// CreateTimeDesc
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// The ID of the parent file.
	//
	// example:
	//
	// 63636837e47e5a24a8a940218bef395c210e****
	ParentFileId *string `json:"ParentFileId,omitempty" xml:"ParentFileId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The file status.
	//
	// Valid values:
	//
	// 	- available
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     returns only normal files.
	//
	//     <!-- -->
	//
	// 	- uploading
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     returns only the files that are being uploaded.
	//
	//     <!-- -->
	//
	// example:
	//
	// available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListCdsFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCdsFilesRequest) GoString() string {
	return s.String()
}

func (s *ListCdsFilesRequest) SetCdsId(v string) *ListCdsFilesRequest {
	s.CdsId = &v
	return s
}

func (s *ListCdsFilesRequest) SetEndUserId(v string) *ListCdsFilesRequest {
	s.EndUserId = &v
	return s
}

func (s *ListCdsFilesRequest) SetFileIds(v []*string) *ListCdsFilesRequest {
	s.FileIds = v
	return s
}

func (s *ListCdsFilesRequest) SetGroupId(v string) *ListCdsFilesRequest {
	s.GroupId = &v
	return s
}

func (s *ListCdsFilesRequest) SetMaxResults(v int32) *ListCdsFilesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListCdsFilesRequest) SetNextToken(v string) *ListCdsFilesRequest {
	s.NextToken = &v
	return s
}

func (s *ListCdsFilesRequest) SetOrderType(v string) *ListCdsFilesRequest {
	s.OrderType = &v
	return s
}

func (s *ListCdsFilesRequest) SetParentFileId(v string) *ListCdsFilesRequest {
	s.ParentFileId = &v
	return s
}

func (s *ListCdsFilesRequest) SetRegionId(v string) *ListCdsFilesRequest {
	s.RegionId = &v
	return s
}

func (s *ListCdsFilesRequest) SetStatus(v string) *ListCdsFilesRequest {
	s.Status = &v
	return s
}

type ListCdsFilesShrinkRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-320357****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The ID of the user to whom the cloud disk is allocated.
	//
	// example:
	//
	// testUser
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The IDs of the files to be queried.
	FileIdsShrink *string `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
	GroupId       *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The number of entries to return on each page. Default value: 100.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token used for the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// WyI2Mzg4MjAwMzFhNGQwZWVmN2I3MjRkZjZhZjAyMWU4YzY1MmRjZmUyIiwibiIsIm4iLDEsLTEsMTY2OTg2NTQ3NTMxMiwiNjM4ODIwMDNlNTU0YmZiZjFkYTk0MmEyYTZhMjEyZDkxODdjMjAy****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The sorting method of the files.
	//
	// Valid values:
	//
	// 	- CreateTimeDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on the time when they are created.
	//
	//     <!-- -->
	//
	// 	- ModifiedTimeAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on the time when they are modified.
	//
	//     <!-- -->
	//
	// 	- NameDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on their names.
	//
	//     <!-- -->
	//
	// 	- SizeAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on their sizes.
	//
	//     <!-- -->
	//
	// 	- ModifiedTimeDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on the time when they are modified.
	//
	//     <!-- -->
	//
	// 	- CreateTimeAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on the time when they are created.
	//
	//     <!-- -->
	//
	// 	- SizeDesc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in descending order based on their sizes.
	//
	//     <!-- -->
	//
	// 	- NameAsc
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     sorts files in ascending order based on their names.
	//
	//     <!-- -->
	//
	// example:
	//
	// CreateTimeDesc
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// The ID of the parent file.
	//
	// example:
	//
	// 63636837e47e5a24a8a940218bef395c210e****
	ParentFileId *string `json:"ParentFileId,omitempty" xml:"ParentFileId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The file status.
	//
	// Valid values:
	//
	// 	- available
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     returns only normal files.
	//
	//     <!-- -->
	//
	// 	- uploading
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     returns only the files that are being uploaded.
	//
	//     <!-- -->
	//
	// example:
	//
	// available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListCdsFilesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCdsFilesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListCdsFilesShrinkRequest) SetCdsId(v string) *ListCdsFilesShrinkRequest {
	s.CdsId = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetEndUserId(v string) *ListCdsFilesShrinkRequest {
	s.EndUserId = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetFileIdsShrink(v string) *ListCdsFilesShrinkRequest {
	s.FileIdsShrink = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetGroupId(v string) *ListCdsFilesShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetMaxResults(v int32) *ListCdsFilesShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetNextToken(v string) *ListCdsFilesShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetOrderType(v string) *ListCdsFilesShrinkRequest {
	s.OrderType = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetParentFileId(v string) *ListCdsFilesShrinkRequest {
	s.ParentFileId = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetRegionId(v string) *ListCdsFilesShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *ListCdsFilesShrinkRequest) SetStatus(v string) *ListCdsFilesShrinkRequest {
	s.Status = &v
	return s
}

type ListCdsFilesResponseBody struct {
	// The result of the operation. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The total number of entries.
	//
	// example:
	//
	// 0
	Count *string `json:"Count,omitempty" xml:"Count,omitempty"`
	// The files.
	FileModels []*ListCdsFilesResponseBodyFileModels `json:"FileModels,omitempty" xml:"FileModels,omitempty" type:"Repeated"`
	// The error message returned if the request failed. This parameter is empty if the value of Code is success.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The token used for the next query. If this parameter is empty, all results have been returned.
	//
	// example:
	//
	// WyI2MzhmMjA2ZTFmZGZlZGVjZDk3OTRlNzVhZmIwMDFiZmM5NWQ3YTgwIiwibiIsIm4iLDEsLTEsMTY3MDMyNDMzNTAzMSwiNjM4ZjIwNmZjNDFkMzIwOTZmZWU0NGYxODkwY2I5ZjI0Mjg0NzM2****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID. An ID is the unique identifier of the request.
	//
	// example:
	//
	// 40D86754-20FD-53DC-A9B8-25F7FECC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCdsFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCdsFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCdsFilesResponseBody) SetCode(v string) *ListCdsFilesResponseBody {
	s.Code = &v
	return s
}

func (s *ListCdsFilesResponseBody) SetCount(v string) *ListCdsFilesResponseBody {
	s.Count = &v
	return s
}

func (s *ListCdsFilesResponseBody) SetFileModels(v []*ListCdsFilesResponseBodyFileModels) *ListCdsFilesResponseBody {
	s.FileModels = v
	return s
}

func (s *ListCdsFilesResponseBody) SetMessage(v string) *ListCdsFilesResponseBody {
	s.Message = &v
	return s
}

func (s *ListCdsFilesResponseBody) SetNextToken(v string) *ListCdsFilesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListCdsFilesResponseBody) SetRequestId(v string) *ListCdsFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCdsFilesResponseBody) SetSuccess(v bool) *ListCdsFilesResponseBody {
	s.Success = &v
	return s
}

type ListCdsFilesResponseBodyFileModels struct {
	// The file category. PDS categorizes files based on their suffixes and MIME types. The following major categories are included: doc, image, audio, and video.
	//
	// example:
	//
	// image
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The content type of the file.
	//
	// example:
	//
	// application/json
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// The time when the file was created.
	//
	// example:
	//
	// 2022-09-06T07:27:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The file creator.
	//
	// example:
	//
	// user01
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// The file description.
	//
	// example:
	//
	// test1
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The URL that is used to download the file. The download URL is valid for only 15 minutes. If the URL is expired, you can call the GetFile operation to obtain the file.
	//
	// example:
	//
	// https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// The filename extension.
	//
	// example:
	//
	// pdf
	FileExtension *string `json:"FileExtension,omitempty" xml:"FileExtension,omitempty"`
	// The file ID.
	//
	// example:
	//
	// 637725ff2f63db8470984e6c92c692b87d52****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The file path.
	//
	// example:
	//
	// isv/1019236948660053/temp/
	FilePath *string `json:"FilePath,omitempty" xml:"FilePath,omitempty"`
	// The file type.
	//
	// example:
	//
	// file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// The MD5 value of the file.
	//
	// example:
	//
	// 63c83ececb4e6926c51448fc5ecb****
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// The time when the file was last modified.
	//
	// example:
	//
	// 2022-09-06T07:27:08Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// The user who modified the file.
	//
	// example:
	//
	// user02
	Modifier *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	// The file name.
	//
	// example:
	//
	// fvt-appcenterp4qwa
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The time when the file was last opened.
	//
	// example:
	//
	// 2022-09-06T07:27:08Z
	OpenTime *string `json:"OpenTime,omitempty" xml:"OpenTime,omitempty"`
	// The timestamp that indicates the time when the file was last opened.
	//
	// example:
	//
	// 168951245231
	OpenTimeStamp *int64 `json:"OpenTimeStamp,omitempty" xml:"OpenTimeStamp,omitempty"`
	// The ID of the parent folder.
	//
	// example:
	//
	// 3343213ff2f63db8470984e6c92c3213dfdw****
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// The region ID You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// example:
	//
	// cn-beijing
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The SHA 1 file.
	//
	// example:
	//
	// EA4942AA8761213890A5C386F88E6464D2C3****
	Sha1 *string `json:"Sha1,omitempty" xml:"Sha1,omitempty"`
	// The file size. Unit: bits.
	//
	// example:
	//
	// 102400
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// The URL of the thumbnail.
	//
	// example:
	//
	// https://data.aliyunpds.com/hz22%2F5d5b986facbec311ef844c25954f96821497b383%2F5d5b986f955410dd991646bb87c6b4e899ef****?Expires=xxx&OSSAccessKeyId=xxx&Signature=xxx
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
}

func (s ListCdsFilesResponseBodyFileModels) String() string {
	return tea.Prettify(s)
}

func (s ListCdsFilesResponseBodyFileModels) GoString() string {
	return s.String()
}

func (s *ListCdsFilesResponseBodyFileModels) SetCategory(v string) *ListCdsFilesResponseBodyFileModels {
	s.Category = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetContentType(v string) *ListCdsFilesResponseBodyFileModels {
	s.ContentType = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetCreateTime(v string) *ListCdsFilesResponseBodyFileModels {
	s.CreateTime = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetCreator(v string) *ListCdsFilesResponseBodyFileModels {
	s.Creator = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetDescription(v string) *ListCdsFilesResponseBodyFileModels {
	s.Description = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetDownloadUrl(v string) *ListCdsFilesResponseBodyFileModels {
	s.DownloadUrl = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetFileExtension(v string) *ListCdsFilesResponseBodyFileModels {
	s.FileExtension = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetFileId(v string) *ListCdsFilesResponseBodyFileModels {
	s.FileId = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetFilePath(v string) *ListCdsFilesResponseBodyFileModels {
	s.FilePath = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetFileType(v string) *ListCdsFilesResponseBodyFileModels {
	s.FileType = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetMd5(v string) *ListCdsFilesResponseBodyFileModels {
	s.Md5 = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetModifiedTime(v string) *ListCdsFilesResponseBodyFileModels {
	s.ModifiedTime = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetModifier(v string) *ListCdsFilesResponseBodyFileModels {
	s.Modifier = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetName(v string) *ListCdsFilesResponseBodyFileModels {
	s.Name = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetOpenTime(v string) *ListCdsFilesResponseBodyFileModels {
	s.OpenTime = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetOpenTimeStamp(v int64) *ListCdsFilesResponseBodyFileModels {
	s.OpenTimeStamp = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetParentId(v string) *ListCdsFilesResponseBodyFileModels {
	s.ParentId = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetRegionId(v string) *ListCdsFilesResponseBodyFileModels {
	s.RegionId = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetSha1(v string) *ListCdsFilesResponseBodyFileModels {
	s.Sha1 = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetSize(v int64) *ListCdsFilesResponseBodyFileModels {
	s.Size = &v
	return s
}

func (s *ListCdsFilesResponseBodyFileModels) SetThumbnail(v string) *ListCdsFilesResponseBodyFileModels {
	s.Thumbnail = &v
	return s
}

type ListCdsFilesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCdsFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCdsFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCdsFilesResponse) GoString() string {
	return s.String()
}

func (s *ListCdsFilesResponse) SetHeaders(v map[string]*string) *ListCdsFilesResponse {
	s.Headers = v
	return s
}

func (s *ListCdsFilesResponse) SetStatusCode(v int32) *ListCdsFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCdsFilesResponse) SetBody(v *ListCdsFilesResponseBody) *ListCdsFilesResponse {
	s.Body = v
	return s
}

type ListDirectoryUsersRequest struct {
	AssignedInfo *string `json:"AssignedInfo,omitempty" xml:"AssignedInfo,omitempty"`
	// The ID of the AD directory.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-jedbpr4sl9l37****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The query string for fuzzy match. If you specify this parameter, the system returns all results that contain the string.
	//
	// example:
	//
	// alice
	Filter              *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	IncludeAssignedUser *bool   `json:"IncludeAssignedUser,omitempty" xml:"IncludeAssignedUser,omitempty"`
	// The number of entries to return on each page.
	//
	// Valid values: 1 to 100.
	//
	// Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token used to start the next query. If the value of this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The organizational unit (OU) in the specified AD domain.
	//
	// example:
	//
	// example.com/Domain Controllers
	OUPath *string `json:"OUPath,omitempty" xml:"OUPath,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
}

func (s ListDirectoryUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDirectoryUsersRequest) GoString() string {
	return s.String()
}

func (s *ListDirectoryUsersRequest) SetAssignedInfo(v string) *ListDirectoryUsersRequest {
	s.AssignedInfo = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetDirectoryId(v string) *ListDirectoryUsersRequest {
	s.DirectoryId = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetFilter(v string) *ListDirectoryUsersRequest {
	s.Filter = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetIncludeAssignedUser(v bool) *ListDirectoryUsersRequest {
	s.IncludeAssignedUser = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetMaxResults(v int32) *ListDirectoryUsersRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetNextToken(v string) *ListDirectoryUsersRequest {
	s.NextToken = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetOUPath(v string) *ListDirectoryUsersRequest {
	s.OUPath = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetRegionId(v string) *ListDirectoryUsersRequest {
	s.RegionId = &v
	return s
}

func (s *ListDirectoryUsersRequest) SetSortType(v string) *ListDirectoryUsersRequest {
	s.SortType = &v
	return s
}

type ListDirectoryUsersResponseBody struct {
	// The token used to start the next query. If the value of this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The names of users corresponding to the AD directory. If the AD directory contains only Administrator and Guest, an empty Users array is returned.
	Users []*ListDirectoryUsersResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Repeated"`
}

func (s ListDirectoryUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDirectoryUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListDirectoryUsersResponseBody) SetNextToken(v string) *ListDirectoryUsersResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDirectoryUsersResponseBody) SetRequestId(v string) *ListDirectoryUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDirectoryUsersResponseBody) SetUsers(v []*ListDirectoryUsersResponseBodyUsers) *ListDirectoryUsersResponseBody {
	s.Users = v
	return s
}

type ListDirectoryUsersResponseBodyUsers struct {
	AssignedDesktopNumber *int32 `json:"AssignedDesktopNumber,omitempty" xml:"AssignedDesktopNumber,omitempty"`
	// The display name of the user.
	//
	// example:
	//
	// Alice
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The name of the user.
	//
	// example:
	//
	// Alice
	EndUser *string `json:"EndUser,omitempty" xml:"EndUser,omitempty"`
	Phone   *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s ListDirectoryUsersResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s ListDirectoryUsersResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *ListDirectoryUsersResponseBodyUsers) SetAssignedDesktopNumber(v int32) *ListDirectoryUsersResponseBodyUsers {
	s.AssignedDesktopNumber = &v
	return s
}

func (s *ListDirectoryUsersResponseBodyUsers) SetDisplayName(v string) *ListDirectoryUsersResponseBodyUsers {
	s.DisplayName = &v
	return s
}

func (s *ListDirectoryUsersResponseBodyUsers) SetEmail(v string) *ListDirectoryUsersResponseBodyUsers {
	s.Email = &v
	return s
}

func (s *ListDirectoryUsersResponseBodyUsers) SetEndUser(v string) *ListDirectoryUsersResponseBodyUsers {
	s.EndUser = &v
	return s
}

func (s *ListDirectoryUsersResponseBodyUsers) SetPhone(v string) *ListDirectoryUsersResponseBodyUsers {
	s.Phone = &v
	return s
}

type ListDirectoryUsersResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDirectoryUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDirectoryUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDirectoryUsersResponse) GoString() string {
	return s.String()
}

func (s *ListDirectoryUsersResponse) SetHeaders(v map[string]*string) *ListDirectoryUsersResponse {
	s.Headers = v
	return s
}

func (s *ListDirectoryUsersResponse) SetStatusCode(v int32) *ListDirectoryUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDirectoryUsersResponse) SetBody(v *ListDirectoryUsersResponseBody) *ListDirectoryUsersResponse {
	s.Body = v
	return s
}

type ListFilePermissionRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-346063****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The ID of the end user who uses the cloud disk.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the shared file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6333e553a133ce21e6f747cf948bb9ef95d7****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The group ID.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The region ID of the cloud disk. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListFilePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFilePermissionRequest) GoString() string {
	return s.String()
}

func (s *ListFilePermissionRequest) SetCdsId(v string) *ListFilePermissionRequest {
	s.CdsId = &v
	return s
}

func (s *ListFilePermissionRequest) SetEndUserId(v string) *ListFilePermissionRequest {
	s.EndUserId = &v
	return s
}

func (s *ListFilePermissionRequest) SetFileId(v string) *ListFilePermissionRequest {
	s.FileId = &v
	return s
}

func (s *ListFilePermissionRequest) SetGroupId(v string) *ListFilePermissionRequest {
	s.GroupId = &v
	return s
}

func (s *ListFilePermissionRequest) SetRegionId(v string) *ListFilePermissionRequest {
	s.RegionId = &v
	return s
}

type ListFilePermissionResponseBody struct {
	// The permissions on the shared file.
	FilePermissions []*FilePermissionMember `json:"FilePermissions,omitempty" xml:"FilePermissions,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFilePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFilePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *ListFilePermissionResponseBody) SetFilePermissions(v []*FilePermissionMember) *ListFilePermissionResponseBody {
	s.FilePermissions = v
	return s
}

func (s *ListFilePermissionResponseBody) SetRequestId(v string) *ListFilePermissionResponseBody {
	s.RequestId = &v
	return s
}

type ListFilePermissionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFilePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFilePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFilePermissionResponse) GoString() string {
	return s.String()
}

func (s *ListFilePermissionResponse) SetHeaders(v map[string]*string) *ListFilePermissionResponse {
	s.Headers = v
	return s
}

func (s *ListFilePermissionResponse) SetStatusCode(v int32) *ListFilePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFilePermissionResponse) SetBody(v *ListFilePermissionResponseBody) *ListFilePermissionResponse {
	s.Body = v
	return s
}

type ListOfficeSiteOverviewRequest struct {
	// Specifies whether to refresh the cache.
	//
	// example:
	//
	// false
	ForceRefresh *bool `json:"ForceRefresh,omitempty" xml:"ForceRefresh,omitempty"`
	// The number of entries to return on each page.
	//
	// 	- Valid values: 1 to 100
	//
	// 	- Default value: 10
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The token that determines the start point of the next query. If this is your first query or no next query is to be sent, skip this parameter. If a next query is to be sent, set the parameter to the value of NextToken that is returned from the last call.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The office network IDs. You can specify IDs of 1 to 100 office networks.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId []*string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty" type:"Repeated"`
	// The query scope. Cloud computers in a cloud computer pool are pooled cloud computers.
	//
	// Default values:
	//
	// 	- 1 (default): queries non-pooled cloud computers in the office network.
	//
	// 	- 2: queries pooled cloud computers in the office network.
	//
	// 	- 3: queries all cloud computers in the office network.
	//
	// example:
	//
	// 1
	QueryRange *int32 `json:"QueryRange,omitempty" xml:"QueryRange,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListOfficeSiteOverviewRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteOverviewRequest) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteOverviewRequest) SetForceRefresh(v bool) *ListOfficeSiteOverviewRequest {
	s.ForceRefresh = &v
	return s
}

func (s *ListOfficeSiteOverviewRequest) SetMaxResults(v int32) *ListOfficeSiteOverviewRequest {
	s.MaxResults = &v
	return s
}

func (s *ListOfficeSiteOverviewRequest) SetNextToken(v string) *ListOfficeSiteOverviewRequest {
	s.NextToken = &v
	return s
}

func (s *ListOfficeSiteOverviewRequest) SetOfficeSiteId(v []*string) *ListOfficeSiteOverviewRequest {
	s.OfficeSiteId = v
	return s
}

func (s *ListOfficeSiteOverviewRequest) SetQueryRange(v int32) *ListOfficeSiteOverviewRequest {
	s.QueryRange = &v
	return s
}

func (s *ListOfficeSiteOverviewRequest) SetRegionId(v string) *ListOfficeSiteOverviewRequest {
	s.RegionId = &v
	return s
}

type ListOfficeSiteOverviewResponseBody struct {
	// The token that is used to start the next query. If this parameter is empty, all results are returned.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The office network information.
	OfficeSiteOverviewResults []*ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults `json:"OfficeSiteOverviewResults,omitempty" xml:"OfficeSiteOverviewResults,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListOfficeSiteOverviewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteOverviewResponseBody) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteOverviewResponseBody) SetNextToken(v string) *ListOfficeSiteOverviewResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBody) SetOfficeSiteOverviewResults(v []*ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) *ListOfficeSiteOverviewResponseBody {
	s.OfficeSiteOverviewResults = v
	return s
}

func (s *ListOfficeSiteOverviewResponseBody) SetRequestId(v string) *ListOfficeSiteOverviewResponseBody {
	s.RequestId = &v
	return s
}

type ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults struct {
	// The number of expired cloud computers in the office network.
	//
	// example:
	//
	// 0
	HasExpiredEdsCount *int32 `json:"HasExpiredEdsCount,omitempty" xml:"HasExpiredEdsCount,omitempty"`
	// The number of expired cloud computers in the cloud computer pool.
	//
	// example:
	//
	// 0
	HasExpiredEdsCountForGroup *int32 `json:"HasExpiredEdsCountForGroup,omitempty" xml:"HasExpiredEdsCountForGroup,omitempty"`
	// The office network ID.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The office network name.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The office network status.
	//
	// Default values:
	//
	// 	- CONFIGUSERFAILED
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- REGISTERING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- REGISTERED
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NEEDCONFIGTRUST
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CONFIGUSERING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CONFIGTRUSTFAILED
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ERROR
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- CONFIGTRUSTING
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NEEDCONFIGUSER
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// REGISTERED
	OfficeSiteStatus *string `json:"OfficeSiteStatus,omitempty" xml:"OfficeSiteStatus,omitempty"`
	// The ID of the region where the office network resides.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The number of cloud computers that are running in the office network.
	//
	// example:
	//
	// 1
	RunningEdsCount *int32 `json:"RunningEdsCount,omitempty" xml:"RunningEdsCount,omitempty"`
	// The number of running cloud computers in the cloud computer pool.
	//
	// example:
	//
	// 1
	RunningEdsCountForGroup *int32 `json:"RunningEdsCountForGroup,omitempty" xml:"RunningEdsCountForGroup,omitempty"`
	// The total number of cloud computers in the office network.
	//
	// example:
	//
	// 1
	TotalEdsCount *int32 `json:"TotalEdsCount,omitempty" xml:"TotalEdsCount,omitempty"`
	// The total number of cloud computers in the cloud computer pool.
	//
	// example:
	//
	// 1
	TotalEdsCountForGroup *int32 `json:"TotalEdsCountForGroup,omitempty" xml:"TotalEdsCountForGroup,omitempty"`
	// The office network type and its suitable VPC type.
	//
	// Valid values:
	//
	// 	- standard (default): standard, exclusive VPC
	//
	// 	- customized: custom, user VPC
	//
	// 	- basic: basic, shared VPC
	//
	// example:
	//
	// standard
	VpcType *string `json:"VpcType,omitempty" xml:"VpcType,omitempty"`
	// The number of cloud computers that are about to expire in the office network.
	//
	// example:
	//
	// 0
	WillExpiredEdsCount *int32 `json:"WillExpiredEdsCount,omitempty" xml:"WillExpiredEdsCount,omitempty"`
	// The number of cloud computers that are about to expire in the cloud computer pool.
	//
	// example:
	//
	// 0
	WillExpiredEdsCountForGroup *int32 `json:"WillExpiredEdsCountForGroup,omitempty" xml:"WillExpiredEdsCountForGroup,omitempty"`
}

func (s ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetHasExpiredEdsCount(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.HasExpiredEdsCount = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetHasExpiredEdsCountForGroup(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.HasExpiredEdsCountForGroup = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetOfficeSiteId(v string) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.OfficeSiteId = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetOfficeSiteName(v string) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.OfficeSiteName = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetOfficeSiteStatus(v string) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.OfficeSiteStatus = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetRegionId(v string) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.RegionId = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetRunningEdsCount(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.RunningEdsCount = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetRunningEdsCountForGroup(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.RunningEdsCountForGroup = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetTotalEdsCount(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.TotalEdsCount = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetTotalEdsCountForGroup(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.TotalEdsCountForGroup = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetVpcType(v string) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.VpcType = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetWillExpiredEdsCount(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.WillExpiredEdsCount = &v
	return s
}

func (s *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults) SetWillExpiredEdsCountForGroup(v int32) *ListOfficeSiteOverviewResponseBodyOfficeSiteOverviewResults {
	s.WillExpiredEdsCountForGroup = &v
	return s
}

type ListOfficeSiteOverviewResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOfficeSiteOverviewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOfficeSiteOverviewResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteOverviewResponse) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteOverviewResponse) SetHeaders(v map[string]*string) *ListOfficeSiteOverviewResponse {
	s.Headers = v
	return s
}

func (s *ListOfficeSiteOverviewResponse) SetStatusCode(v int32) *ListOfficeSiteOverviewResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOfficeSiteOverviewResponse) SetBody(v *ListOfficeSiteOverviewResponseBody) *ListOfficeSiteOverviewResponse {
	s.Body = v
	return s
}

type ListOfficeSiteUsersRequest struct {
	AssignedInfo *string `json:"AssignedInfo,omitempty" xml:"AssignedInfo,omitempty"`
	// The query string for fuzzy query.
	//
	// example:
	//
	// *jin*
	Filter              *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	IncludeAssignedUser *bool   `json:"IncludeAssignedUser,omitempty" xml:"IncludeAssignedUser,omitempty"`
	// The number of entries per page.
	//
	// 	- Valid values: 1 to 100.
	//
	// 	- Default value: 10.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request or if no next query exists. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The organizational unit (OU) of the specified AD domain.
	//
	// example:
	//
	// example.com/Domain Controllers
	OUPath *string `json:"OUPath,omitempty" xml:"OUPath,omitempty"`
	// The office network ID. The office network must be of the enterprise AD account type.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
}

func (s ListOfficeSiteUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteUsersRequest) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteUsersRequest) SetAssignedInfo(v string) *ListOfficeSiteUsersRequest {
	s.AssignedInfo = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetFilter(v string) *ListOfficeSiteUsersRequest {
	s.Filter = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetIncludeAssignedUser(v bool) *ListOfficeSiteUsersRequest {
	s.IncludeAssignedUser = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetMaxResults(v int32) *ListOfficeSiteUsersRequest {
	s.MaxResults = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetNextToken(v string) *ListOfficeSiteUsersRequest {
	s.NextToken = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetOUPath(v string) *ListOfficeSiteUsersRequest {
	s.OUPath = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetOfficeSiteId(v string) *ListOfficeSiteUsersRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetRegionId(v string) *ListOfficeSiteUsersRequest {
	s.RegionId = &v
	return s
}

func (s *ListOfficeSiteUsersRequest) SetSortType(v string) *ListOfficeSiteUsersRequest {
	s.SortType = &v
	return s
}

type ListOfficeSiteUsersResponseBody struct {
	// A pagination token. It can be used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 269BDB16-2CD8-4865-84BD-11C40BC21DB0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The usernames of AD users.\\
	//
	// If the only Administrator and Guest users exist in the enterprise AD, an empty User array is returned.
	Users []*ListOfficeSiteUsersResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Repeated"`
}

func (s ListOfficeSiteUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteUsersResponseBody) SetNextToken(v string) *ListOfficeSiteUsersResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListOfficeSiteUsersResponseBody) SetRequestId(v string) *ListOfficeSiteUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListOfficeSiteUsersResponseBody) SetUsers(v []*ListOfficeSiteUsersResponseBodyUsers) *ListOfficeSiteUsersResponseBody {
	s.Users = v
	return s
}

type ListOfficeSiteUsersResponseBodyUsers struct {
	AssignedDesktopNumber *int32 `json:"AssignedDesktopNumber,omitempty" xml:"AssignedDesktopNumber,omitempty"`
	// The display name of the user.
	//
	// example:
	//
	// Alice
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Email       *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// The name of the AD user.
	//
	// example:
	//
	// Alice
	EndUser *string `json:"EndUser,omitempty" xml:"EndUser,omitempty"`
	Phone   *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s ListOfficeSiteUsersResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteUsersResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteUsersResponseBodyUsers) SetAssignedDesktopNumber(v int32) *ListOfficeSiteUsersResponseBodyUsers {
	s.AssignedDesktopNumber = &v
	return s
}

func (s *ListOfficeSiteUsersResponseBodyUsers) SetDisplayName(v string) *ListOfficeSiteUsersResponseBodyUsers {
	s.DisplayName = &v
	return s
}

func (s *ListOfficeSiteUsersResponseBodyUsers) SetEmail(v string) *ListOfficeSiteUsersResponseBodyUsers {
	s.Email = &v
	return s
}

func (s *ListOfficeSiteUsersResponseBodyUsers) SetEndUser(v string) *ListOfficeSiteUsersResponseBodyUsers {
	s.EndUser = &v
	return s
}

func (s *ListOfficeSiteUsersResponseBodyUsers) SetPhone(v string) *ListOfficeSiteUsersResponseBodyUsers {
	s.Phone = &v
	return s
}

type ListOfficeSiteUsersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListOfficeSiteUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListOfficeSiteUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListOfficeSiteUsersResponse) GoString() string {
	return s.String()
}

func (s *ListOfficeSiteUsersResponse) SetHeaders(v map[string]*string) *ListOfficeSiteUsersResponse {
	s.Headers = v
	return s
}

func (s *ListOfficeSiteUsersResponse) SetStatusCode(v int32) *ListOfficeSiteUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListOfficeSiteUsersResponse) SetBody(v *ListOfficeSiteUsersResponseBody) *ListOfficeSiteUsersResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	// The number of entries per page.
	//
	// example:
	//
	// 10
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.
	//
	// example:
	//
	// ecd-ia2zw38bi6cm7****
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Valid values:
	//
	// 	- ALIYUN::GWS::INSTANCE: cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ALIYUN::GWS::INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags that you want to query.
	Tag []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetMaxResults(v int32) *ListTagResourcesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	// The tag keys. You can specify 1 to 20 tag keys.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag values. You can specify 1 to 20 tag values.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	// A pagination token. If NextToken is empty, no next page exists.
	//
	// example:
	//
	// caeba0bbb2be03f84eb48b699f0a4883
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 484256DA-D816-44D2-9D86-B6EE4D5BA78C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The resources and their tags.
	TagResources []*ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v []*ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	// The resource ID, which is the cloud computer ID.
	//
	// example:
	//
	// ecd-ia2zw38bi6cm7****
	ResourceId *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	// The type of the resource.
	//
	// Valid values:
	//
	// 	- ALIYUN::GWS::INSTANCE: cloud computer.
	//
	// example:
	//
	// ALIYUN::GWS::INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag keys.
	//
	// example:
	//
	// TestKey
	TagKey *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	// The tag values.
	//
	// example:
	//
	// TestValue
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceId(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceType(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagKey(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagValue(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListUserAdOrganizationUnitsRequest struct {
	// The string that you enter for fuzzy search.
	//
	// example:
	//
	// develop
	Filter *string `json:"Filter,omitempty" xml:"Filter,omitempty"`
	// The maximum number of entries to return on each page. Valid values: 1 to 500. Default value: 500.
	//
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request or if no next request exists. You must specify the token that is obtained from the previous query as the value of NextToken.
	//
	// example:
	//
	// CAAAAA==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The enterprise AD office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-485361****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListUserAdOrganizationUnitsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUserAdOrganizationUnitsRequest) GoString() string {
	return s.String()
}

func (s *ListUserAdOrganizationUnitsRequest) SetFilter(v string) *ListUserAdOrganizationUnitsRequest {
	s.Filter = &v
	return s
}

func (s *ListUserAdOrganizationUnitsRequest) SetMaxResults(v int32) *ListUserAdOrganizationUnitsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListUserAdOrganizationUnitsRequest) SetNextToken(v string) *ListUserAdOrganizationUnitsRequest {
	s.NextToken = &v
	return s
}

func (s *ListUserAdOrganizationUnitsRequest) SetOfficeSiteId(v string) *ListUserAdOrganizationUnitsRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ListUserAdOrganizationUnitsRequest) SetRegionId(v string) *ListUserAdOrganizationUnitsRequest {
	s.RegionId = &v
	return s
}

type ListUserAdOrganizationUnitsResponseBody struct {
	// A pagination token.
	//
	// example:
	//
	// CAAAAA==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// The OUs of the AD domain.
	OUNames []*ListUserAdOrganizationUnitsResponseBodyOUNames `json:"OUNames,omitempty" xml:"OUNames,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListUserAdOrganizationUnitsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUserAdOrganizationUnitsResponseBody) GoString() string {
	return s.String()
}

func (s *ListUserAdOrganizationUnitsResponseBody) SetNextToken(v string) *ListUserAdOrganizationUnitsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListUserAdOrganizationUnitsResponseBody) SetOUNames(v []*ListUserAdOrganizationUnitsResponseBodyOUNames) *ListUserAdOrganizationUnitsResponseBody {
	s.OUNames = v
	return s
}

func (s *ListUserAdOrganizationUnitsResponseBody) SetRequestId(v string) *ListUserAdOrganizationUnitsResponseBody {
	s.RequestId = &v
	return s
}

type ListUserAdOrganizationUnitsResponseBodyOUNames struct {
	// The name of the OU.
	//
	// example:
	//
	// wuying_computers
	DisplayOUName *string `json:"DisplayOUName,omitempty" xml:"DisplayOUName,omitempty"`
	// The canonical name (CNAME) of the OU in the AD domain controller.
	//
	// example:
	//
	// example.com/wuying_computers
	OUName *string `json:"OUName,omitempty" xml:"OUName,omitempty"`
	// The enterprise AD office network ID.
	//
	// example:
	//
	// cn-hangzhou+dir-485361****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
}

func (s ListUserAdOrganizationUnitsResponseBodyOUNames) String() string {
	return tea.Prettify(s)
}

func (s ListUserAdOrganizationUnitsResponseBodyOUNames) GoString() string {
	return s.String()
}

func (s *ListUserAdOrganizationUnitsResponseBodyOUNames) SetDisplayOUName(v string) *ListUserAdOrganizationUnitsResponseBodyOUNames {
	s.DisplayOUName = &v
	return s
}

func (s *ListUserAdOrganizationUnitsResponseBodyOUNames) SetOUName(v string) *ListUserAdOrganizationUnitsResponseBodyOUNames {
	s.OUName = &v
	return s
}

func (s *ListUserAdOrganizationUnitsResponseBodyOUNames) SetOfficeSiteId(v string) *ListUserAdOrganizationUnitsResponseBodyOUNames {
	s.OfficeSiteId = &v
	return s
}

type ListUserAdOrganizationUnitsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListUserAdOrganizationUnitsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListUserAdOrganizationUnitsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUserAdOrganizationUnitsResponse) GoString() string {
	return s.String()
}

func (s *ListUserAdOrganizationUnitsResponse) SetHeaders(v map[string]*string) *ListUserAdOrganizationUnitsResponse {
	s.Headers = v
	return s
}

func (s *ListUserAdOrganizationUnitsResponse) SetStatusCode(v int32) *ListUserAdOrganizationUnitsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListUserAdOrganizationUnitsResponse) SetBody(v *ListUserAdOrganizationUnitsResponseBody) *ListUserAdOrganizationUnitsResponse {
	s.Body = v
	return s
}

type LockVirtualMFADeviceRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The serial number of the virtual MFA device, which is a unique identifier.
	//
	// You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device bound to AD users.
	//
	// This parameter is required.
	//
	// example:
	//
	// a25f297f-f2e1-4a44-bbf1-5f48a6e5****
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
}

func (s LockVirtualMFADeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s LockVirtualMFADeviceRequest) GoString() string {
	return s.String()
}

func (s *LockVirtualMFADeviceRequest) SetRegionId(v string) *LockVirtualMFADeviceRequest {
	s.RegionId = &v
	return s
}

func (s *LockVirtualMFADeviceRequest) SetSerialNumber(v string) *LockVirtualMFADeviceRequest {
	s.SerialNumber = &v
	return s
}

type LockVirtualMFADeviceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s LockVirtualMFADeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LockVirtualMFADeviceResponseBody) GoString() string {
	return s.String()
}

func (s *LockVirtualMFADeviceResponseBody) SetRequestId(v string) *LockVirtualMFADeviceResponseBody {
	s.RequestId = &v
	return s
}

type LockVirtualMFADeviceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *LockVirtualMFADeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s LockVirtualMFADeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s LockVirtualMFADeviceResponse) GoString() string {
	return s.String()
}

func (s *LockVirtualMFADeviceResponse) SetHeaders(v map[string]*string) *LockVirtualMFADeviceResponse {
	s.Headers = v
	return s
}

func (s *LockVirtualMFADeviceResponse) SetStatusCode(v int32) *LockVirtualMFADeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *LockVirtualMFADeviceResponse) SetBody(v *LockVirtualMFADeviceResponseBody) *LockVirtualMFADeviceResponse {
	s.Body = v
	return s
}

type MigrateDesktopsRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 100 IDs.
	//
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the destination office network.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen+dir-388505****
	TargetOfficeSiteId *string `json:"TargetOfficeSiteId,omitempty" xml:"TargetOfficeSiteId,omitempty"`
}

func (s MigrateDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateDesktopsRequest) GoString() string {
	return s.String()
}

func (s *MigrateDesktopsRequest) SetDesktopId(v []*string) *MigrateDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *MigrateDesktopsRequest) SetRegionId(v string) *MigrateDesktopsRequest {
	s.RegionId = &v
	return s
}

func (s *MigrateDesktopsRequest) SetTargetOfficeSiteId(v string) *MigrateDesktopsRequest {
	s.TargetOfficeSiteId = &v
	return s
}

type MigrateDesktopsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// E46DECEC-AC72-570E-958B-B52A4B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MigrateDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MigrateDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *MigrateDesktopsResponseBody) SetRequestId(v string) *MigrateDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type MigrateDesktopsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MigrateDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MigrateDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateDesktopsResponse) GoString() string {
	return s.String()
}

func (s *MigrateDesktopsResponse) SetHeaders(v map[string]*string) *MigrateDesktopsResponse {
	s.Headers = v
	return s
}

func (s *MigrateDesktopsResponse) SetStatusCode(v int32) *MigrateDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *MigrateDesktopsResponse) SetBody(v *MigrateDesktopsResponseBody) *MigrateDesktopsResponse {
	s.Body = v
	return s
}

type MigrateImageProtocolRequest struct {
	// The image IDs.
	//
	// This parameter is required.
	ImageId []*string `json:"ImageId,omitempty" xml:"ImageId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The protocol to which you want to update the image protocols. Set the value to ASP.
	//
	// example:
	//
	// ASP
	TargetProtocolType *string `json:"TargetProtocolType,omitempty" xml:"TargetProtocolType,omitempty"`
}

func (s MigrateImageProtocolRequest) String() string {
	return tea.Prettify(s)
}

func (s MigrateImageProtocolRequest) GoString() string {
	return s.String()
}

func (s *MigrateImageProtocolRequest) SetImageId(v []*string) *MigrateImageProtocolRequest {
	s.ImageId = v
	return s
}

func (s *MigrateImageProtocolRequest) SetRegionId(v string) *MigrateImageProtocolRequest {
	s.RegionId = &v
	return s
}

func (s *MigrateImageProtocolRequest) SetTargetProtocolType(v string) *MigrateImageProtocolRequest {
	s.TargetProtocolType = &v
	return s
}

type MigrateImageProtocolResponseBody struct {
	// The IDs of the images whose protocols failed to be updated.
	FailedIds []*string `json:"FailedIds,omitempty" xml:"FailedIds,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 4D4E5AF5-DF28-5FE7-85C7-9F98315B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s MigrateImageProtocolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MigrateImageProtocolResponseBody) GoString() string {
	return s.String()
}

func (s *MigrateImageProtocolResponseBody) SetFailedIds(v []*string) *MigrateImageProtocolResponseBody {
	s.FailedIds = v
	return s
}

func (s *MigrateImageProtocolResponseBody) SetRequestId(v string) *MigrateImageProtocolResponseBody {
	s.RequestId = &v
	return s
}

type MigrateImageProtocolResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MigrateImageProtocolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MigrateImageProtocolResponse) String() string {
	return tea.Prettify(s)
}

func (s MigrateImageProtocolResponse) GoString() string {
	return s.String()
}

func (s *MigrateImageProtocolResponse) SetHeaders(v map[string]*string) *MigrateImageProtocolResponse {
	s.Headers = v
	return s
}

func (s *MigrateImageProtocolResponse) SetStatusCode(v int32) *MigrateImageProtocolResponse {
	s.StatusCode = &v
	return s
}

func (s *MigrateImageProtocolResponse) SetBody(v *MigrateImageProtocolResponseBody) *MigrateImageProtocolResponse {
	s.Body = v
	return s
}

type ModifyADConnectorDirectoryRequest struct {
	// The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.
	//
	// example:
	//
	// cnshsv21hmcdc01
	AdHostname *string `json:"AdHostname,omitempty" xml:"AdHostname,omitempty"`
	// The ID of the directory.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-gx2x1dhsmu52rd****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The name of the AD directory.
	//
	// example:
	//
	// testDirectoryName
	DirectoryName *string `json:"DirectoryName,omitempty" xml:"DirectoryName,omitempty"`
	// The IP address of the DNS server corresponding to the enterprise AD. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.
	//
	// example:
	//
	// ``127.0.**.**``
	DnsAddress []*string `json:"DnsAddress,omitempty" xml:"DnsAddress,omitempty" type:"Repeated"`
	// The domain name. The name must be 2 to 255 characters in length and must be in the two-part domain name format, such as `example.com`. You can register each domain name only once.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The password of the domain administrator. The username can be up to 64 characters in length.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the domain administrator. The username can be up to 64 characters in length.
	//
	// example:
	//
	// sAMAccountName
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// Specifies whether to enable Multi-Factor Authentication (MFA). After you enable MFA, all AD users in the directory must enter a dynamic verification code generated by the virtual MFA device in addition to a correct password when they log on to a cloud computer.
	//
	// >  When end users log on to a cloud computer for the first time, they must bind an MFA device.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The name of the organizational unit (OU) in the AD domain. You can call the ListUserAdOrganizationUnits operation to obtain the name of the OU.
	//
	// example:
	//
	// example.com/Domain Controllers
	OUName *string `json:"OUName,omitempty" xml:"OUName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The DNS address of the existing AD subdomain.\\
	//
	// If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.
	//
	// example:
	//
	// ``127.0.**.**``
	SubDomainDnsAddress []*string `json:"SubDomainDnsAddress,omitempty" xml:"SubDomainDnsAddress,omitempty" type:"Repeated"`
	// The domain name of the existing AD subdomain.
	//
	// example:
	//
	// childexample.com
	SubDomainName *string `json:"SubDomainName,omitempty" xml:"SubDomainName,omitempty"`
}

func (s ModifyADConnectorDirectoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyADConnectorDirectoryRequest) GoString() string {
	return s.String()
}

func (s *ModifyADConnectorDirectoryRequest) SetAdHostname(v string) *ModifyADConnectorDirectoryRequest {
	s.AdHostname = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetDirectoryId(v string) *ModifyADConnectorDirectoryRequest {
	s.DirectoryId = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetDirectoryName(v string) *ModifyADConnectorDirectoryRequest {
	s.DirectoryName = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetDnsAddress(v []*string) *ModifyADConnectorDirectoryRequest {
	s.DnsAddress = v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetDomainName(v string) *ModifyADConnectorDirectoryRequest {
	s.DomainName = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetDomainPassword(v string) *ModifyADConnectorDirectoryRequest {
	s.DomainPassword = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetDomainUserName(v string) *ModifyADConnectorDirectoryRequest {
	s.DomainUserName = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetMfaEnabled(v bool) *ModifyADConnectorDirectoryRequest {
	s.MfaEnabled = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetOUName(v string) *ModifyADConnectorDirectoryRequest {
	s.OUName = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetRegionId(v string) *ModifyADConnectorDirectoryRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetSubDomainDnsAddress(v []*string) *ModifyADConnectorDirectoryRequest {
	s.SubDomainDnsAddress = v
	return s
}

func (s *ModifyADConnectorDirectoryRequest) SetSubDomainName(v string) *ModifyADConnectorDirectoryRequest {
	s.SubDomainName = &v
	return s
}

type ModifyADConnectorDirectoryResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyADConnectorDirectoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyADConnectorDirectoryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyADConnectorDirectoryResponseBody) SetRequestId(v string) *ModifyADConnectorDirectoryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyADConnectorDirectoryResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyADConnectorDirectoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyADConnectorDirectoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyADConnectorDirectoryResponse) GoString() string {
	return s.String()
}

func (s *ModifyADConnectorDirectoryResponse) SetHeaders(v map[string]*string) *ModifyADConnectorDirectoryResponse {
	s.Headers = v
	return s
}

func (s *ModifyADConnectorDirectoryResponse) SetStatusCode(v int32) *ModifyADConnectorDirectoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyADConnectorDirectoryResponse) SetBody(v *ModifyADConnectorDirectoryResponseBody) *ModifyADConnectorDirectoryResponse {
	s.Body = v
	return s
}

type ModifyADConnectorOfficeSiteRequest struct {
	// The hostname of the domain controller. The hostname must comply with the naming conventions for hostnames in Windows.
	//
	// example:
	//
	// beijing-ad01
	AdHostname       *string `json:"AdHostname,omitempty" xml:"AdHostname,omitempty"`
	BackupDCHostname *string `json:"BackupDCHostname,omitempty" xml:"BackupDCHostname,omitempty"`
	BackupDns        *string `json:"BackupDns,omitempty" xml:"BackupDns,omitempty"`
	// Details of the IP addresses of the Domain Name System (DNS) servers that correspond to the enterprise AD system. You can specify only one IP address.
	//
	// example:
	//
	// 127.0.*.*
	DnsAddress []*string `json:"DnsAddress,omitempty" xml:"DnsAddress,omitempty" type:"Repeated"`
	// The domain name of the enterprise AD system. You can register each domain name only once.
	//
	// example:
	//
	// example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The password of the domain administrator. The username can be up to 64 characters in length.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the domain administrator. The username can be up to 64 characters in length.
	//
	// > Specify the value of the sAMAccountName parameter instead of the value of the userPrincipalName parameter as the username.
	//
	// example:
	//
	// Administrator
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// Specifies whether to enable multi-factor authentication (MFA).
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The name of the organizational unit (OU) in the AD domain. You can call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to obtain OUs.
	//
	// example:
	//
	// oldad.com/Domain Controllers
	OUName *string `json:"OUName,omitempty" xml:"OUName,omitempty"`
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The DNS address of the subdomain in the enterprise AD domain. You can specify only one DNS address. If you configure `SubDomainName` and leave this parameter empty, the value is the same as that of the enterprise AD domain.
	//
	// example:
	//
	// 127.0.*.*
	SubDomainDnsAddress []*string `json:"SubDomainDnsAddress,omitempty" xml:"SubDomainDnsAddress,omitempty" type:"Repeated"`
	// The name of the subdomain in the enterprise AD domain.
	//
	// example:
	//
	// childexample.com
	SubDomainName *string `json:"SubDomainName,omitempty" xml:"SubDomainName,omitempty"`
}

func (s ModifyADConnectorOfficeSiteRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyADConnectorOfficeSiteRequest) GoString() string {
	return s.String()
}

func (s *ModifyADConnectorOfficeSiteRequest) SetAdHostname(v string) *ModifyADConnectorOfficeSiteRequest {
	s.AdHostname = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetBackupDCHostname(v string) *ModifyADConnectorOfficeSiteRequest {
	s.BackupDCHostname = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetBackupDns(v string) *ModifyADConnectorOfficeSiteRequest {
	s.BackupDns = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetDnsAddress(v []*string) *ModifyADConnectorOfficeSiteRequest {
	s.DnsAddress = v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetDomainName(v string) *ModifyADConnectorOfficeSiteRequest {
	s.DomainName = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetDomainPassword(v string) *ModifyADConnectorOfficeSiteRequest {
	s.DomainPassword = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetDomainUserName(v string) *ModifyADConnectorOfficeSiteRequest {
	s.DomainUserName = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetMfaEnabled(v bool) *ModifyADConnectorOfficeSiteRequest {
	s.MfaEnabled = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetOUName(v string) *ModifyADConnectorOfficeSiteRequest {
	s.OUName = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetOfficeSiteId(v string) *ModifyADConnectorOfficeSiteRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetOfficeSiteName(v string) *ModifyADConnectorOfficeSiteRequest {
	s.OfficeSiteName = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetRegionId(v string) *ModifyADConnectorOfficeSiteRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetSubDomainDnsAddress(v []*string) *ModifyADConnectorOfficeSiteRequest {
	s.SubDomainDnsAddress = v
	return s
}

func (s *ModifyADConnectorOfficeSiteRequest) SetSubDomainName(v string) *ModifyADConnectorOfficeSiteRequest {
	s.SubDomainName = &v
	return s
}

type ModifyADConnectorOfficeSiteResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyADConnectorOfficeSiteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyADConnectorOfficeSiteResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyADConnectorOfficeSiteResponseBody) SetRequestId(v string) *ModifyADConnectorOfficeSiteResponseBody {
	s.RequestId = &v
	return s
}

type ModifyADConnectorOfficeSiteResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyADConnectorOfficeSiteResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyADConnectorOfficeSiteResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyADConnectorOfficeSiteResponse) GoString() string {
	return s.String()
}

func (s *ModifyADConnectorOfficeSiteResponse) SetHeaders(v map[string]*string) *ModifyADConnectorOfficeSiteResponse {
	s.Headers = v
	return s
}

func (s *ModifyADConnectorOfficeSiteResponse) SetStatusCode(v int32) *ModifyADConnectorOfficeSiteResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyADConnectorOfficeSiteResponse) SetBody(v *ModifyADConnectorOfficeSiteResponseBody) *ModifyADConnectorOfficeSiteResponse {
	s.Body = v
	return s
}

type ModifyAclEntriesRequest struct {
	// The Internet access control policy.
	//
	// Valid values:
	//
	// 	- allow: allows access to the Internet.
	//
	// 	- disable: forbids access to the Internet.
	//
	// This parameter is required.
	//
	// example:
	//
	// allow
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The instance IDs (office network IDs or cloud computer IDs) to which the Internet access control policy is applicable.
	//
	// This parameter is required.
	SourceId []*string `json:"SourceId,omitempty" xml:"SourceId,omitempty" type:"Repeated"`
	// The granularity to which the Internet access control policy is applicable.
	//
	// Valid values:
	//
	// 	- desktop: cloud computer granularity.
	//
	// 	- vpc: office network granularity.
	//
	// This parameter is required.
	//
	// example:
	//
	// desktop
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s ModifyAclEntriesRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAclEntriesRequest) GoString() string {
	return s.String()
}

func (s *ModifyAclEntriesRequest) SetPolicy(v string) *ModifyAclEntriesRequest {
	s.Policy = &v
	return s
}

func (s *ModifyAclEntriesRequest) SetRegionId(v string) *ModifyAclEntriesRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyAclEntriesRequest) SetSourceId(v []*string) *ModifyAclEntriesRequest {
	s.SourceId = v
	return s
}

func (s *ModifyAclEntriesRequest) SetSourceType(v string) *ModifyAclEntriesRequest {
	s.SourceType = &v
	return s
}

type ModifyAclEntriesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 062B1439-709A-580E-85DF-CE97A1560565
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAclEntriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAclEntriesResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAclEntriesResponseBody) SetRequestId(v string) *ModifyAclEntriesResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAclEntriesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAclEntriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAclEntriesResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAclEntriesResponse) GoString() string {
	return s.String()
}

func (s *ModifyAclEntriesResponse) SetHeaders(v map[string]*string) *ModifyAclEntriesResponse {
	s.Headers = v
	return s
}

func (s *ModifyAclEntriesResponse) SetStatusCode(v int32) *ModifyAclEntriesResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAclEntriesResponse) SetBody(v *ModifyAclEntriesResponseBody) *ModifyAclEntriesResponse {
	s.Body = v
	return s
}

type ModifyAutoSnapshotPolicyRequest struct {
	// The CRON expression.
	//
	// example:
	//
	// 0 20 16 ? 	- 1,2,3,4,5,6,7
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// The ID of the automatic snapshot policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// sp-itcmrhqt01tdo****
	PolicyId *string `json:"PolicyId,omitempty" xml:"PolicyId,omitempty"`
	// The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-). This parameter is empty by default.
	//
	// example:
	//
	// Automatic system snapshot
	PolicyName *string `json:"PolicyName,omitempty" xml:"PolicyName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The retention period of the automatic snapshots. Unit: days. Valid values: 1 to 180.
	//
	// example:
	//
	// 5
	RetentionDays *int32 `json:"RetentionDays,omitempty" xml:"RetentionDays,omitempty"`
}

func (s ModifyAutoSnapshotPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyRequest) SetCronExpression(v string) *ModifyAutoSnapshotPolicyRequest {
	s.CronExpression = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetPolicyId(v string) *ModifyAutoSnapshotPolicyRequest {
	s.PolicyId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetPolicyName(v string) *ModifyAutoSnapshotPolicyRequest {
	s.PolicyName = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetRegionId(v string) *ModifyAutoSnapshotPolicyRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyRequest) SetRetentionDays(v int32) *ModifyAutoSnapshotPolicyRequest {
	s.RetentionDays = &v
	return s
}

type ModifyAutoSnapshotPolicyResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 51592A88-0F2C-55E6-AD2C-2AD9C10D****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyAutoSnapshotPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyResponseBody) SetRequestId(v string) *ModifyAutoSnapshotPolicyResponseBody {
	s.RequestId = &v
	return s
}

type ModifyAutoSnapshotPolicyResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyAutoSnapshotPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyAutoSnapshotPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoSnapshotPolicyResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoSnapshotPolicyResponse) SetHeaders(v map[string]*string) *ModifyAutoSnapshotPolicyResponse {
	s.Headers = v
	return s
}

func (s *ModifyAutoSnapshotPolicyResponse) SetStatusCode(v int32) *ModifyAutoSnapshotPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAutoSnapshotPolicyResponse) SetBody(v *ModifyAutoSnapshotPolicyResponseBody) *ModifyAutoSnapshotPolicyResponse {
	s.Body = v
	return s
}

type ModifyBundleRequest struct {
	// The ID of the cloud computer template that you want to modify.
	//
	// This parameter is required.
	//
	// example:
	//
	// b-2g65ljy4291vl****
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// The name of the new cloud computer template.
	//
	// example:
	//
	// newName
	BundleName *string `json:"BundleName,omitempty" xml:"BundleName,omitempty"`
	// The description of the new cloud computer template.
	//
	// example:
	//
	// newDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The new image ID. The new image must meet the following conditions:
	//
	// 	- The new image must be in the Available state.
	//
	// 	- The operating system of the new image must be the same as that of the original image.
	//
	// 	- The required disk size for the new image cannot be greater than that for the original image.
	//
	// 	- The GPU type of the new image must be the same as that of the original image.
	//
	// example:
	//
	// m-aea3oaww001np****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The OS language. This parameter is available only for system images.
	//
	// Valid values:
	//
	// 	- en-US: American English
	//
	// 	- zh-HK: Traditional Chinese (Hong Kong)
	//
	// 	- zh-CN: Simplified Chinese.
	//
	// 	- ja-JP: Japanese
	//
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyBundleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyBundleRequest) GoString() string {
	return s.String()
}

func (s *ModifyBundleRequest) SetBundleId(v string) *ModifyBundleRequest {
	s.BundleId = &v
	return s
}

func (s *ModifyBundleRequest) SetBundleName(v string) *ModifyBundleRequest {
	s.BundleName = &v
	return s
}

func (s *ModifyBundleRequest) SetDescription(v string) *ModifyBundleRequest {
	s.Description = &v
	return s
}

func (s *ModifyBundleRequest) SetImageId(v string) *ModifyBundleRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyBundleRequest) SetLanguage(v string) *ModifyBundleRequest {
	s.Language = &v
	return s
}

func (s *ModifyBundleRequest) SetRegionId(v string) *ModifyBundleRequest {
	s.RegionId = &v
	return s
}

type ModifyBundleResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyBundleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyBundleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyBundleResponseBody) SetRequestId(v string) *ModifyBundleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyBundleResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyBundleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyBundleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyBundleResponse) GoString() string {
	return s.String()
}

func (s *ModifyBundleResponse) SetHeaders(v map[string]*string) *ModifyBundleResponse {
	s.Headers = v
	return s
}

func (s *ModifyBundleResponse) SetStatusCode(v int32) *ModifyBundleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyBundleResponse) SetBody(v *ModifyBundleResponseBody) *ModifyBundleResponse {
	s.Body = v
	return s
}

type ModifyCdsFileRequest struct {
	// The cloud disk ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-64326*****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The processing mode of files that have the same name.
	//
	// Valid values:
	//
	// 	- refuse
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     refuses to create a file that has the same name as the file in the cloud.
	//
	//     <!-- -->
	//
	// 	- auto_rename
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     automatically renames a file if the file has the same name as another file. By default, the current point in time is appended. Example: xxx20060102_150405.
	//
	//     <!-- -->
	//
	// 	- ignore
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     allows files with the same name.
	//
	//     <!-- -->
	//
	// example:
	//
	// ignore
	ConflictPolicy *string `json:"ConflictPolicy,omitempty" xml:"ConflictPolicy,omitempty"`
	// The ID of the end user who uses the cloud disk.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The file ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6333e553a133ce21e6f747cf948bb9ef95d7****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The file name.
	//
	// This parameter is required.
	//
	// example:
	//
	// test.txt
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// The group ID.
	//
	// example:
	//
	// cg-i1ruuudp92qpj****
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyCdsFileRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCdsFileRequest) GoString() string {
	return s.String()
}

func (s *ModifyCdsFileRequest) SetCdsId(v string) *ModifyCdsFileRequest {
	s.CdsId = &v
	return s
}

func (s *ModifyCdsFileRequest) SetConflictPolicy(v string) *ModifyCdsFileRequest {
	s.ConflictPolicy = &v
	return s
}

func (s *ModifyCdsFileRequest) SetEndUserId(v string) *ModifyCdsFileRequest {
	s.EndUserId = &v
	return s
}

func (s *ModifyCdsFileRequest) SetFileId(v string) *ModifyCdsFileRequest {
	s.FileId = &v
	return s
}

func (s *ModifyCdsFileRequest) SetFileName(v string) *ModifyCdsFileRequest {
	s.FileName = &v
	return s
}

func (s *ModifyCdsFileRequest) SetGroupId(v string) *ModifyCdsFileRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyCdsFileRequest) SetRegionId(v string) *ModifyCdsFileRequest {
	s.RegionId = &v
	return s
}

type ModifyCdsFileResponseBody struct {
	// The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Specifies whether data is returned.
	//
	// Valid values:
	//
	// 	- false: Data fails to be returned.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     : Data is returned.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message returned if the request failed.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful.
	//
	// Valid values:
	//
	// 	- true: The request is successful.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false: The request fails.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyCdsFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCdsFileResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCdsFileResponseBody) SetCode(v string) *ModifyCdsFileResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyCdsFileResponseBody) SetData(v string) *ModifyCdsFileResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyCdsFileResponseBody) SetMessage(v string) *ModifyCdsFileResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyCdsFileResponseBody) SetRequestId(v string) *ModifyCdsFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCdsFileResponseBody) SetSuccess(v bool) *ModifyCdsFileResponseBody {
	s.Success = &v
	return s
}

type ModifyCdsFileResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCdsFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCdsFileResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCdsFileResponse) GoString() string {
	return s.String()
}

func (s *ModifyCdsFileResponse) SetHeaders(v map[string]*string) *ModifyCdsFileResponse {
	s.Headers = v
	return s
}

func (s *ModifyCdsFileResponse) SetStatusCode(v int32) *ModifyCdsFileResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCdsFileResponse) SetBody(v *ModifyCdsFileResponseBody) *ModifyCdsFileResponse {
	s.Body = v
	return s
}

type ModifyCdsFileShareLinkRequest struct {
	// The ID of the cloud disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai+cds-135515****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The description of the file sharing task. The description must be 0 to 1,024 characters in length.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to prohibit the download of the files that are being shared.
	//
	// Valid values:
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	DisableDownload *bool `json:"DisableDownload,omitempty" xml:"DisableDownload,omitempty"`
	// Specifies whether to prohibit the preview of the files that are being shared.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	DisablePreview *bool `json:"DisablePreview,omitempty" xml:"DisablePreview,omitempty"`
	// Specifies whether to prohibit the dump of the files that are being shared.
	//
	// Valid values:
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	DisableSave *bool `json:"DisableSave,omitempty" xml:"DisableSave,omitempty"`
	// The number of times that the shared files are downloaded. The value of this parameter must be equal to or greater than 0.
	//
	// example:
	//
	// 0
	DownloadCount *int64 `json:"DownloadCount,omitempty" xml:"DownloadCount,omitempty"`
	// The limit on the number of times that the shared files can be downloaded. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
	//
	// example:
	//
	// 0
	DownloadLimit *int64 `json:"DownloadLimit,omitempty" xml:"DownloadLimit,omitempty"`
	// The time when the file sharing link expires. The value of this parameter follows the RFC 3339 standard. Example: "2020-06-28T11:33:00.000+08:00". If this parameter is set to "", the file sharing link never expires.
	//
	// example:
	//
	// 2022-07-20T06:30:22.365Z
	Expiration *string `json:"Expiration,omitempty" xml:"Expiration,omitempty"`
	// The number of times that the shared files are previewed. The value of this parameter must be equal to or greater than 0.
	//
	// example:
	//
	// 0
	PreviewCount *int64 `json:"PreviewCount,omitempty" xml:"PreviewCount,omitempty"`
	// The limit on the number of times that the shared files can be previewed. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
	//
	// example:
	//
	// 100
	PreviewLimit *int64 `json:"PreviewLimit,omitempty" xml:"PreviewLimit,omitempty"`
	// The number of times that the shared files are reported. The value of this parameter must be equal to or greater than 0.
	//
	// example:
	//
	// 0
	ReportCount *int64 `json:"ReportCount,omitempty" xml:"ReportCount,omitempty"`
	// The number of times that the shared files are dumped. The value of this parameter must be equal to or greater than 0.
	//
	// example:
	//
	// 0
	SaveCount *int64 `json:"SaveCount,omitempty" xml:"SaveCount,omitempty"`
	// The limit on the number of times that the shared files can be dumped. The value of this parameter must be equal to or greater than 0. The value 0 specifies that no limit is imposed on the number of times that the shared files can be downloaded.
	//
	// example:
	//
	// 100
	SaveLimit *int64 `json:"SaveLimit,omitempty" xml:"SaveLimit,omitempty"`
	// The ID of the file sharing task.
	//
	// This parameter is required.
	//
	// example:
	//
	// 7JQX1Fs****
	ShareId *string `json:"ShareId,omitempty" xml:"ShareId,omitempty"`
	// The name of the file sharing task. If you do not configure this parameter, the sharing task name is the first ID that is returned in the file_id_list value.
	//
	// >  The sharing task name must be 0 to 128 characters in length.
	ShareName *string `json:"ShareName,omitempty" xml:"ShareName,omitempty"`
	// The length of the access code. Valid values: 6 to 8. Unit: bytes. If you leave this parameter empty or set it to null, no access code is required. If you use a token to share files, you do not need to configure this parameter. The access code can contain only visible ASCII characters.
	//
	// example:
	//
	// 12345678
	SharePwd *string `json:"SharePwd,omitempty" xml:"SharePwd,omitempty"`
	// The sharing status.
	//
	// Valid values:
	//
	// 	- disabled: The sharing task is canceled.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- enabled: The sharing task is valid.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// enabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The number of times that the videos are previewed in the shared files. The value of this parameter must be equal to or greater than 0.
	//
	// example:
	//
	// 0
	VideoPreviewCount *int64 `json:"VideoPreviewCount,omitempty" xml:"VideoPreviewCount,omitempty"`
}

func (s ModifyCdsFileShareLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCdsFileShareLinkRequest) GoString() string {
	return s.String()
}

func (s *ModifyCdsFileShareLinkRequest) SetCdsId(v string) *ModifyCdsFileShareLinkRequest {
	s.CdsId = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetDescription(v string) *ModifyCdsFileShareLinkRequest {
	s.Description = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetDisableDownload(v bool) *ModifyCdsFileShareLinkRequest {
	s.DisableDownload = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetDisablePreview(v bool) *ModifyCdsFileShareLinkRequest {
	s.DisablePreview = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetDisableSave(v bool) *ModifyCdsFileShareLinkRequest {
	s.DisableSave = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetDownloadCount(v int64) *ModifyCdsFileShareLinkRequest {
	s.DownloadCount = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetDownloadLimit(v int64) *ModifyCdsFileShareLinkRequest {
	s.DownloadLimit = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetExpiration(v string) *ModifyCdsFileShareLinkRequest {
	s.Expiration = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetPreviewCount(v int64) *ModifyCdsFileShareLinkRequest {
	s.PreviewCount = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetPreviewLimit(v int64) *ModifyCdsFileShareLinkRequest {
	s.PreviewLimit = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetReportCount(v int64) *ModifyCdsFileShareLinkRequest {
	s.ReportCount = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetSaveCount(v int64) *ModifyCdsFileShareLinkRequest {
	s.SaveCount = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetSaveLimit(v int64) *ModifyCdsFileShareLinkRequest {
	s.SaveLimit = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetShareId(v string) *ModifyCdsFileShareLinkRequest {
	s.ShareId = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetShareName(v string) *ModifyCdsFileShareLinkRequest {
	s.ShareName = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetSharePwd(v string) *ModifyCdsFileShareLinkRequest {
	s.SharePwd = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetStatus(v string) *ModifyCdsFileShareLinkRequest {
	s.Status = &v
	return s
}

func (s *ModifyCdsFileShareLinkRequest) SetVideoPreviewCount(v int64) *ModifyCdsFileShareLinkRequest {
	s.VideoPreviewCount = &v
	return s
}

type ModifyCdsFileShareLinkResponseBody struct {
	// The modification result. The value success indicates that the modification is successful. If the modification failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data information.
	Data *CdsFileShareLinkModel `json:"Data,omitempty" xml:"Data,omitempty"`
	// The error message that is returned. This parameter is not returned if the value of Code is success.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// F7E4322D-D679-5ACB-A909-490D2F0E****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The request status.
	//
	// Valid values:
	//
	// 	- true: The request is successful.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false: The request fails.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyCdsFileShareLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCdsFileShareLinkResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCdsFileShareLinkResponseBody) SetCode(v string) *ModifyCdsFileShareLinkResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyCdsFileShareLinkResponseBody) SetData(v *CdsFileShareLinkModel) *ModifyCdsFileShareLinkResponseBody {
	s.Data = v
	return s
}

func (s *ModifyCdsFileShareLinkResponseBody) SetMessage(v string) *ModifyCdsFileShareLinkResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyCdsFileShareLinkResponseBody) SetRequestId(v string) *ModifyCdsFileShareLinkResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCdsFileShareLinkResponseBody) SetSuccess(v bool) *ModifyCdsFileShareLinkResponseBody {
	s.Success = &v
	return s
}

type ModifyCdsFileShareLinkResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCdsFileShareLinkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCdsFileShareLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCdsFileShareLinkResponse) GoString() string {
	return s.String()
}

func (s *ModifyCdsFileShareLinkResponse) SetHeaders(v map[string]*string) *ModifyCdsFileShareLinkResponse {
	s.Headers = v
	return s
}

func (s *ModifyCdsFileShareLinkResponse) SetStatusCode(v int32) *ModifyCdsFileShareLinkResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCdsFileShareLinkResponse) SetBody(v *ModifyCdsFileShareLinkResponseBody) *ModifyCdsFileShareLinkResponse {
	s.Body = v
	return s
}

type ModifyCloudDriveGroupsRequest struct {
	// The ID of the cloud disk in Cloud Drive Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-shanghai+cds-135515****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The IDs of the teams.
	GroupId []*string `json:"GroupId,omitempty" xml:"GroupId,omitempty" type:"Repeated"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the team space. Valid values:
	//
	// 	- enabled
	//
	// 	- disabled
	//
	// Default value: enabled.
	//
	// example:
	//
	// disabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The total capacity of the team space.
	//
	// example:
	//
	// 32212254720
	TotalSize *int64 `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ModifyCloudDriveGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDriveGroupsRequest) GoString() string {
	return s.String()
}

func (s *ModifyCloudDriveGroupsRequest) SetCdsId(v string) *ModifyCloudDriveGroupsRequest {
	s.CdsId = &v
	return s
}

func (s *ModifyCloudDriveGroupsRequest) SetGroupId(v []*string) *ModifyCloudDriveGroupsRequest {
	s.GroupId = v
	return s
}

func (s *ModifyCloudDriveGroupsRequest) SetRegionId(v string) *ModifyCloudDriveGroupsRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCloudDriveGroupsRequest) SetStatus(v string) *ModifyCloudDriveGroupsRequest {
	s.Status = &v
	return s
}

func (s *ModifyCloudDriveGroupsRequest) SetTotalSize(v int64) *ModifyCloudDriveGroupsRequest {
	s.TotalSize = &v
	return s
}

type ModifyCloudDriveGroupsResponseBody struct {
	// The returned results. A value of success indicates that the operation is successful. If the operation failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data information.
	//
	// example:
	//
	// []
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The message returned.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values: true and false.
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyCloudDriveGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDriveGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCloudDriveGroupsResponseBody) SetCode(v string) *ModifyCloudDriveGroupsResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyCloudDriveGroupsResponseBody) SetData(v string) *ModifyCloudDriveGroupsResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyCloudDriveGroupsResponseBody) SetMessage(v string) *ModifyCloudDriveGroupsResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyCloudDriveGroupsResponseBody) SetRequestId(v string) *ModifyCloudDriveGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyCloudDriveGroupsResponseBody) SetSuccess(v bool) *ModifyCloudDriveGroupsResponseBody {
	s.Success = &v
	return s
}

type ModifyCloudDriveGroupsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCloudDriveGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCloudDriveGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDriveGroupsResponse) GoString() string {
	return s.String()
}

func (s *ModifyCloudDriveGroupsResponse) SetHeaders(v map[string]*string) *ModifyCloudDriveGroupsResponse {
	s.Headers = v
	return s
}

func (s *ModifyCloudDriveGroupsResponse) SetStatusCode(v int32) *ModifyCloudDriveGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCloudDriveGroupsResponse) SetBody(v *ModifyCloudDriveGroupsResponseBody) *ModifyCloudDriveGroupsResponse {
	s.Body = v
	return s
}

type ModifyCloudDrivePermissionRequest struct {
	// The ID of the cloud disk in Cloud Drive Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-60911*****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The IDs of the users who have the download permissions.
	DownloadEndUserIds []*string `json:"DownloadEndUserIds,omitempty" xml:"DownloadEndUserIds,omitempty" type:"Repeated"`
	// The IDs of the users who have the upload and download permissions.
	DownloadUploadEndUserIds     []*string `json:"DownloadUploadEndUserIds,omitempty" xml:"DownloadUploadEndUserIds,omitempty" type:"Repeated"`
	NoDownloadNoUploadEndUserIds []*string `json:"NoDownloadNoUploadEndUserIds,omitempty" xml:"NoDownloadNoUploadEndUserIds,omitempty" type:"Repeated"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyCloudDrivePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDrivePermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyCloudDrivePermissionRequest) SetCdsId(v string) *ModifyCloudDrivePermissionRequest {
	s.CdsId = &v
	return s
}

func (s *ModifyCloudDrivePermissionRequest) SetDownloadEndUserIds(v []*string) *ModifyCloudDrivePermissionRequest {
	s.DownloadEndUserIds = v
	return s
}

func (s *ModifyCloudDrivePermissionRequest) SetDownloadUploadEndUserIds(v []*string) *ModifyCloudDrivePermissionRequest {
	s.DownloadUploadEndUserIds = v
	return s
}

func (s *ModifyCloudDrivePermissionRequest) SetNoDownloadNoUploadEndUserIds(v []*string) *ModifyCloudDrivePermissionRequest {
	s.NoDownloadNoUploadEndUserIds = v
	return s
}

func (s *ModifyCloudDrivePermissionRequest) SetRegionId(v string) *ModifyCloudDrivePermissionRequest {
	s.RegionId = &v
	return s
}

type ModifyCloudDrivePermissionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 9197824D-AD4B-571F-94BB-C2E6D5855AB6
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCloudDrivePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDrivePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCloudDrivePermissionResponseBody) SetRequestId(v string) *ModifyCloudDrivePermissionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCloudDrivePermissionResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCloudDrivePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCloudDrivePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDrivePermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyCloudDrivePermissionResponse) SetHeaders(v map[string]*string) *ModifyCloudDrivePermissionResponse {
	s.Headers = v
	return s
}

func (s *ModifyCloudDrivePermissionResponse) SetStatusCode(v int32) *ModifyCloudDrivePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCloudDrivePermissionResponse) SetBody(v *ModifyCloudDrivePermissionResponseBody) *ModifyCloudDrivePermissionResponse {
	s.Body = v
	return s
}

type ModifyCloudDriveUsersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-596198****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// This parameter is required.
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of Cloud Drive Service users.
	//
	// Valid values:
	//
	// 	- disabled
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     unavailable
	//
	//     <!-- -->
	//
	// 	- enabled
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     available
	//
	//     <!-- -->
	//
	// example:
	//
	// enabled
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The maximum storage space of a user. Unit: bytes.
	//
	// example:
	//
	// 1024
	UserMaxSize *int64 `json:"UserMaxSize,omitempty" xml:"UserMaxSize,omitempty"`
}

func (s ModifyCloudDriveUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDriveUsersRequest) GoString() string {
	return s.String()
}

func (s *ModifyCloudDriveUsersRequest) SetCdsId(v string) *ModifyCloudDriveUsersRequest {
	s.CdsId = &v
	return s
}

func (s *ModifyCloudDriveUsersRequest) SetEndUserId(v []*string) *ModifyCloudDriveUsersRequest {
	s.EndUserId = v
	return s
}

func (s *ModifyCloudDriveUsersRequest) SetRegionId(v string) *ModifyCloudDriveUsersRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyCloudDriveUsersRequest) SetStatus(v string) *ModifyCloudDriveUsersRequest {
	s.Status = &v
	return s
}

func (s *ModifyCloudDriveUsersRequest) SetUserMaxSize(v int64) *ModifyCloudDriveUsersRequest {
	s.UserMaxSize = &v
	return s
}

type ModifyCloudDriveUsersResponseBody struct {
	// example:
	//
	// D2E005C4-8CA3-5F1D-9917-E75BE3BF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCloudDriveUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDriveUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCloudDriveUsersResponseBody) SetRequestId(v string) *ModifyCloudDriveUsersResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCloudDriveUsersResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCloudDriveUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCloudDriveUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCloudDriveUsersResponse) GoString() string {
	return s.String()
}

func (s *ModifyCloudDriveUsersResponse) SetHeaders(v map[string]*string) *ModifyCloudDriveUsersResponse {
	s.Headers = v
	return s
}

func (s *ModifyCloudDriveUsersResponse) SetStatusCode(v int32) *ModifyCloudDriveUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCloudDriveUsersResponse) SetBody(v *ModifyCloudDriveUsersResponseBody) *ModifyCloudDriveUsersResponse {
	s.Body = v
	return s
}

type ModifyCustomizedListHeadersRequest struct {
	// The headers.
	Headers []*ModifyCustomizedListHeadersRequestHeaders `json:"Headers,omitempty" xml:"Headers,omitempty" type:"Repeated"`
	// The type of the list.
	//
	// Valid values:
	//
	// 	- desktop: cloud computer
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// desktop
	ListType *string `json:"ListType,omitempty" xml:"ListType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyCustomizedListHeadersRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomizedListHeadersRequest) GoString() string {
	return s.String()
}

func (s *ModifyCustomizedListHeadersRequest) SetHeaders(v []*ModifyCustomizedListHeadersRequestHeaders) *ModifyCustomizedListHeadersRequest {
	s.Headers = v
	return s
}

func (s *ModifyCustomizedListHeadersRequest) SetListType(v string) *ModifyCustomizedListHeadersRequest {
	s.ListType = &v
	return s
}

func (s *ModifyCustomizedListHeadersRequest) SetRegionId(v string) *ModifyCustomizedListHeadersRequest {
	s.RegionId = &v
	return s
}

type ModifyCustomizedListHeadersRequestHeaders struct {
	// The display type of the header.
	//
	// > For the desktop_id_name and office_site_id_name head keys, set the value of this parameter to required. For other header keys, set the value of this parameter to display or hide based on your requirements.
	//
	// example:
	//
	// display
	DisplayType *string `json:"DisplayType,omitempty" xml:"DisplayType,omitempty"`
	// The key of the header.
	//
	// > All header keys of the list must be specified.
	//
	// Valid values:
	//
	// 	- desktop_id_name: the IDs and names of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- system_data_disk: the system disks and data disks of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- office_site_type: the office network types of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- create_time: the time when the cloud computers are created.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- ip: the IP addresses of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- spec_system_protocol: the instance types, OSs, and protocol types of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- monitor: the monitoring information of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- assigned_users: the number of end users that are assigned to the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- encryption: indicates whether the cloud computers are encrypted.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- office_site_id_name: the IDs and names of the office networks.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- pay_type: the billing methods of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- tag: the tags that are attached to the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- hostname: the hostnames of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- status: the statuses of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- current_user: the current end users of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// pay_type
	HeaderKey *string `json:"HeaderKey,omitempty" xml:"HeaderKey,omitempty"`
}

func (s ModifyCustomizedListHeadersRequestHeaders) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomizedListHeadersRequestHeaders) GoString() string {
	return s.String()
}

func (s *ModifyCustomizedListHeadersRequestHeaders) SetDisplayType(v string) *ModifyCustomizedListHeadersRequestHeaders {
	s.DisplayType = &v
	return s
}

func (s *ModifyCustomizedListHeadersRequestHeaders) SetHeaderKey(v string) *ModifyCustomizedListHeadersRequestHeaders {
	s.HeaderKey = &v
	return s
}

type ModifyCustomizedListHeadersResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyCustomizedListHeadersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomizedListHeadersResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyCustomizedListHeadersResponseBody) SetRequestId(v string) *ModifyCustomizedListHeadersResponseBody {
	s.RequestId = &v
	return s
}

type ModifyCustomizedListHeadersResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyCustomizedListHeadersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyCustomizedListHeadersResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyCustomizedListHeadersResponse) GoString() string {
	return s.String()
}

func (s *ModifyCustomizedListHeadersResponse) SetHeaders(v map[string]*string) *ModifyCustomizedListHeadersResponse {
	s.Headers = v
	return s
}

func (s *ModifyCustomizedListHeadersResponse) SetStatusCode(v int32) *ModifyCustomizedListHeadersResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyCustomizedListHeadersResponse) SetBody(v *ModifyCustomizedListHeadersResponseBody) *ModifyCustomizedListHeadersResponse {
	s.Body = v
	return s
}

type ModifyDesktopChargeTypeRequest struct {
	// Specifies whether to enable automatic payment if you specify subscription as the new billing method for the cloud desktop.
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// The new billing method that you want to apply.
	//
	// Valid values:
	//
	// 	- PostPaid: changes the billing method from subscription to pay-as-you-go.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PrePaid: changes the billing method from pay-as-you-go to subscription.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PrePaid
	ChargeType *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	// The IDs of the cloud computers. You can specify 1 to 20 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The subscription duration of the cloud computers if you set the ChargeType parameter to PrePaid. The unit is specified by the `PeriodUnit` parameter. This parameter is valid only when the `ChargeType` parameter is set to `PrePaid`. In this case, you must specify this parameter.
	//
	// 	- If the `PeriodUnit` parameter is set to `Week`, set the Period parameter to 1.
	//
	// 	- If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
	//
	// 	- If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the subscription duration if you specify subscription as the new billing method for the cloud desktop.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The ID of the promotional activity.
	//
	// example:
	//
	// 500038360030606
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// >  This parameter is in invitational preview and not publicly available.
	//
	// example:
	//
	// internal only
	UseDuration *int32 `json:"UseDuration,omitempty" xml:"UseDuration,omitempty"`
}

func (s ModifyDesktopChargeTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopChargeTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopChargeTypeRequest) SetAutoPay(v bool) *ModifyDesktopChargeTypeRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDesktopChargeTypeRequest) SetChargeType(v string) *ModifyDesktopChargeTypeRequest {
	s.ChargeType = &v
	return s
}

func (s *ModifyDesktopChargeTypeRequest) SetDesktopId(v []*string) *ModifyDesktopChargeTypeRequest {
	s.DesktopId = v
	return s
}

func (s *ModifyDesktopChargeTypeRequest) SetPeriod(v int32) *ModifyDesktopChargeTypeRequest {
	s.Period = &v
	return s
}

func (s *ModifyDesktopChargeTypeRequest) SetPeriodUnit(v string) *ModifyDesktopChargeTypeRequest {
	s.PeriodUnit = &v
	return s
}

func (s *ModifyDesktopChargeTypeRequest) SetPromotionId(v string) *ModifyDesktopChargeTypeRequest {
	s.PromotionId = &v
	return s
}

func (s *ModifyDesktopChargeTypeRequest) SetRegionId(v string) *ModifyDesktopChargeTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDesktopChargeTypeRequest) SetUseDuration(v int32) *ModifyDesktopChargeTypeRequest {
	s.UseDuration = &v
	return s
}

type ModifyDesktopChargeTypeResponseBody struct {
	// The IDs of the cloud computers.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the order.
	//
	// example:
	//
	// 123456789
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopChargeTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopChargeTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopChargeTypeResponseBody) SetDesktopId(v []*string) *ModifyDesktopChargeTypeResponseBody {
	s.DesktopId = v
	return s
}

func (s *ModifyDesktopChargeTypeResponseBody) SetOrderId(v string) *ModifyDesktopChargeTypeResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyDesktopChargeTypeResponseBody) SetRequestId(v string) *ModifyDesktopChargeTypeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopChargeTypeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopChargeTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopChargeTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopChargeTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopChargeTypeResponse) SetHeaders(v map[string]*string) *ModifyDesktopChargeTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopChargeTypeResponse) SetStatusCode(v int32) *ModifyDesktopChargeTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopChargeTypeResponse) SetBody(v *ModifyDesktopChargeTypeResponseBody) *ModifyDesktopChargeTypeResponse {
	s.Body = v
	return s
}

type ModifyDesktopGroupRequest struct {
	// Specifies whether cloud computers can be automatically created in the subscription cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PrePaid`.
	//
	// Valid values:
	//
	// 	- 0: false
	//
	// 	- 1: true
	//
	// example:
	//
	// 1
	AllowAutoSetup *int32 `json:"AllowAutoSetup,omitempty" xml:"AllowAutoSetup,omitempty"`
	// The number of cloud computers that can be reserved in the pay-as-you-go cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PostPaid`. Valid values:
	//
	// 	- 0: does not allow the system to reserve cloud computers.
	//
	// 	- N: allows the system to reserve N cloud computers (1≤ N ≤ 100).
	//
	// >  If you set this parameter to 0, the system must create and start cloud computers and then assign the cloud computers to end users when the end users request cloud computers. This process is time-consuming. To improve user experience, we recommend that you reserve a specific number of cloud computers.
	//
	// example:
	//
	// 1
	AllowBufferCount *int32 `json:"AllowBufferCount,omitempty" xml:"AllowBufferCount,omitempty"`
	// The number of concurrent sessions that is allowed for each cloud computer in a multi-session cloud computer pool.
	//
	// >  This parameter is unavailable.
	//
	// example:
	//
	// 1
	BindAmount *int64 `json:"BindAmount,omitempty" xml:"BindAmount,omitempty"`
	// 	- This parameter has different meanings based on the billing method of the cloud computer pool. For a subscription pool, this parameter specifies the number of cloud computers to purchase in the pool. Valid values: 0 to 200.
	//
	// 	- For a pay-as-you-go pool, this parameter specifies the minimum number of cloud computers to create in the pool. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.
	//
	// example:
	//
	// 5
	BuyDesktopsCount *int32 `json:"BuyDesktopsCount,omitempty" xml:"BuyDesktopsCount,omitempty"`
	// The role that uses the cloud computer pool.
	//
	// >  This parameter is unavailable.
	//
	// Valid values:
	//
	// 	- teacher
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- student
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// teacher
	Classify *string `json:"Classify,omitempty" xml:"Classify,omitempty"`
	// The remarks.
	//
	// example:
	//
	// test
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The maximum period of time during which the session is connected. When the specified maximum period of time is reached, the session is automatically disconnected. Unit: milliseconds. Valid values: 900000 to 345600000. That is, the session can be connected for 15 to 5,760 minutes (4 days).
	//
	// example:
	//
	// 600000
	ConnectDuration *int64 `json:"ConnectDuration,omitempty" xml:"ConnectDuration,omitempty"`
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The name of the cloud computer pool.
	//
	// example:
	//
	// desktopGroupName1
	DesktopGroupName *string `json:"DesktopGroupName,omitempty" xml:"DesktopGroupName,omitempty"`
	// Specifies whether to disable session management.
	//
	// example:
	//
	// true
	DisableSessionConfig *bool `json:"DisableSessionConfig,omitempty" xml:"DisableSessionConfig,omitempty"`
	// The ID of the File Storage NAS (NAS) file system for the user data roaming feature.
	//
	// >  This parameter is unavailable.
	//
	// example:
	//
	// 04f314****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// After an end user connects to a cloud computer, the session is established. If the system does not detect inputs from the keyboard or mouse within the specified period of time, the session is closed. Unit: milliseconds. Valid values: 360000 to 3600000 (6 minutes to 60 minutes)
	//
	// End users can receive a prompt to save data before sessions are disconnected. The system sends the prompt 30 seconds before the specified period of time is reached. To prevent data loss, end users must save the data of the sessions.
	//
	// >  This parameter is suitable only for cloud computers whose image version is v1.0.2 or later.
	//
	// example:
	//
	// 120000
	IdleDisconnectDuration *int64 `json:"IdleDisconnectDuration,omitempty" xml:"IdleDisconnectDuration,omitempty"`
	// The IDs of the images.
	//
	// example:
	//
	// desktopimage-windows-server-2016-64-ch
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The retention period of a session after it is disconnected. Unit: milliseconds. Valid values: 180000 to 345600000. That is, the session can be retained for 3 to 5,760 minutes (4 days) after it is disconnected. If you set this parameter to 0, the session is permanently retained after it is disconnected.
	//
	// When a session is disconnected, take note of the following situations: If an end user does not resume the session within the specified duration, the session is closed and all unsaved data is cleared. If the end user resumes the session within the specified duration, the end user can continue to access data of the session.
	//
	// example:
	//
	// 1000
	KeepDuration *int64 `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	// The load balancing policy of the multi-session cloud computer pool.
	//
	// >  This parameter is unavailable.
	//
	// Valid values:
	//
	// 	- 0: depth-first
	//
	// 	- 1: breadth-first
	//
	// example:
	//
	// 0
	LoadPolicy *int64 `json:"LoadPolicy,omitempty" xml:"LoadPolicy,omitempty"`
	// The maximum number of cloud computers that can be housed in the pay-as-you-go cloud computer pool. Valid values: 0 to 500.
	//
	// example:
	//
	// 10
	MaxDesktopsCount *int32 `json:"MaxDesktopsCount,omitempty" xml:"MaxDesktopsCount,omitempty"`
	// The maximum number of cloud computers that can be automatically created in the subscription cloud computer pool. This parameter takes effect and is required only if you set `ChargeType` to `PrePaid`. Default value: 1. Valid values: 0 to `MaxDesktopsCount`.
	//
	// example:
	//
	// 1
	MinDesktopsCount *int32 `json:"MinDesktopsCount,omitempty" xml:"MinDesktopsCount,omitempty"`
	// The ID of the cloud computer template.
	//
	// example:
	//
	// b-7t275tpgjueeu****
	OwnBundleId *string `json:"OwnBundleId,omitempty" xml:"OwnBundleId,omitempty"`
	// The ID of the security policy.
	//
	// example:
	//
	// pg-53iyi2aar0nd6****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// The IDs of policy groups.
	PolicyGroupIds []*string `json:"PolicyGroupIds,omitempty" xml:"PolicyGroupIds,omitempty" type:"Repeated"`
	// Specifies whether to enable user data roaming.
	//
	// >  This parameter is unavailable.
	//
	// example:
	//
	// false
	ProfileFollowSwitch *bool `json:"ProfileFollowSwitch,omitempty" xml:"ProfileFollowSwitch,omitempty"`
	// The threshold for the ratio of connected sessions. This parameter indicates the condition that triggers auto scaling in a multi-session cloud computer pool. The ratio of connected sessions IS calculated by using the following formula:
	//
	// `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`
	//
	// If the ratio of connected sessions is greater than the specified value, new cloud computers are created. If the ratio of connected sessions is smaller than the specified value, idle cloud computers are deleted.
	//
	// >  This parameter is unavailable.
	//
	// example:
	//
	// 0.5
	RatioThreshold *float32 `json:"RatioThreshold,omitempty" xml:"RatioThreshold,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The disk reset type of cloud computers.
	//
	// Valid values:
	//
	// 	- 0: does not reset disks.
	//
	// 	- 1: resets only the system disks.
	//
	// 	- 2: resets only the user disks.
	//
	// 	- 3: resets the system disks and user disks.
	//
	// example:
	//
	// 0
	ResetType *int64 `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// The ID of the scaling policy group.
	//
	// >  This parameter is unavailable.
	//
	// example:
	//
	// s-kakowkdl****
	ScaleStrategyId *string `json:"ScaleStrategyId,omitempty" xml:"ScaleStrategyId,omitempty"`
	// The period of time before the idle cloud computer enters the Stopped state. When the specified period of time is reached, the cloud computer is automatically stopped. If an end user connects to the stopped cloud computer, the cloud computer automatically starts. Unit: milliseconds.
	//
	// example:
	//
	// 180000
	StopDuration *int64 `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
}

func (s ModifyDesktopGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopGroupRequest) SetAllowAutoSetup(v int32) *ModifyDesktopGroupRequest {
	s.AllowAutoSetup = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetAllowBufferCount(v int32) *ModifyDesktopGroupRequest {
	s.AllowBufferCount = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetBindAmount(v int64) *ModifyDesktopGroupRequest {
	s.BindAmount = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetBuyDesktopsCount(v int32) *ModifyDesktopGroupRequest {
	s.BuyDesktopsCount = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetClassify(v string) *ModifyDesktopGroupRequest {
	s.Classify = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetComments(v string) *ModifyDesktopGroupRequest {
	s.Comments = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetConnectDuration(v int64) *ModifyDesktopGroupRequest {
	s.ConnectDuration = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetDesktopGroupId(v string) *ModifyDesktopGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetDesktopGroupName(v string) *ModifyDesktopGroupRequest {
	s.DesktopGroupName = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetDisableSessionConfig(v bool) *ModifyDesktopGroupRequest {
	s.DisableSessionConfig = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetFileSystemId(v string) *ModifyDesktopGroupRequest {
	s.FileSystemId = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetIdleDisconnectDuration(v int64) *ModifyDesktopGroupRequest {
	s.IdleDisconnectDuration = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetImageId(v string) *ModifyDesktopGroupRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetKeepDuration(v int64) *ModifyDesktopGroupRequest {
	s.KeepDuration = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetLoadPolicy(v int64) *ModifyDesktopGroupRequest {
	s.LoadPolicy = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetMaxDesktopsCount(v int32) *ModifyDesktopGroupRequest {
	s.MaxDesktopsCount = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetMinDesktopsCount(v int32) *ModifyDesktopGroupRequest {
	s.MinDesktopsCount = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetOwnBundleId(v string) *ModifyDesktopGroupRequest {
	s.OwnBundleId = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetPolicyGroupId(v string) *ModifyDesktopGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetPolicyGroupIds(v []*string) *ModifyDesktopGroupRequest {
	s.PolicyGroupIds = v
	return s
}

func (s *ModifyDesktopGroupRequest) SetProfileFollowSwitch(v bool) *ModifyDesktopGroupRequest {
	s.ProfileFollowSwitch = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetRatioThreshold(v float32) *ModifyDesktopGroupRequest {
	s.RatioThreshold = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetRegionId(v string) *ModifyDesktopGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetResetType(v int64) *ModifyDesktopGroupRequest {
	s.ResetType = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetScaleStrategyId(v string) *ModifyDesktopGroupRequest {
	s.ScaleStrategyId = &v
	return s
}

func (s *ModifyDesktopGroupRequest) SetStopDuration(v int64) *ModifyDesktopGroupRequest {
	s.StopDuration = &v
	return s
}

type ModifyDesktopGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopGroupResponseBody) SetRequestId(v string) *ModifyDesktopGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopGroupResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopGroupResponse) SetHeaders(v map[string]*string) *ModifyDesktopGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopGroupResponse) SetStatusCode(v int32) *ModifyDesktopGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopGroupResponse) SetBody(v *ModifyDesktopGroupResponseBody) *ModifyDesktopGroupResponse {
	s.Body = v
	return s
}

type ModifyDesktopHostNameRequest struct {
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The new hostname of the cloud computer. The hostname must meet the following requirements:
	//
	// 	- The hostname must be 2 to 15 characters in length.
	//
	// 	- The hostname can contain only letters, digits, and hyphens (-). The hostname cannot start or end with a hyphen (-), contain consecutive hyphens (-), or contain only digits.
	//
	// This parameter is required.
	//
	// example:
	//
	// NewName
	NewHostName *string `json:"NewHostName,omitempty" xml:"NewHostName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDesktopHostNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopHostNameRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopHostNameRequest) SetDesktopId(v string) *ModifyDesktopHostNameRequest {
	s.DesktopId = &v
	return s
}

func (s *ModifyDesktopHostNameRequest) SetNewHostName(v string) *ModifyDesktopHostNameRequest {
	s.NewHostName = &v
	return s
}

func (s *ModifyDesktopHostNameRequest) SetRegionId(v string) *ModifyDesktopHostNameRequest {
	s.RegionId = &v
	return s
}

type ModifyDesktopHostNameResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopHostNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopHostNameResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopHostNameResponseBody) SetRequestId(v string) *ModifyDesktopHostNameResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopHostNameResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopHostNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopHostNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopHostNameResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopHostNameResponse) SetHeaders(v map[string]*string) *ModifyDesktopHostNameResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopHostNameResponse) SetStatusCode(v int32) *ModifyDesktopHostNameResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopHostNameResponse) SetBody(v *ModifyDesktopHostNameResponseBody) *ModifyDesktopHostNameResponse {
	s.Body = v
	return s
}

type ModifyDesktopNameRequest struct {
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The new name of the cloud computer. The name of the cloud computer must meet the following requirements:
	//
	// 	- The name must be 1 to 64 characters in length.
	//
	// 	- The name must start with a letter but cannot start with `http://` or `https://`.
	//
	// 	- The name can only contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// test
	NewDesktopName *string `json:"NewDesktopName,omitempty" xml:"NewDesktopName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDesktopNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopNameRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopNameRequest) SetDesktopId(v string) *ModifyDesktopNameRequest {
	s.DesktopId = &v
	return s
}

func (s *ModifyDesktopNameRequest) SetNewDesktopName(v string) *ModifyDesktopNameRequest {
	s.NewDesktopName = &v
	return s
}

func (s *ModifyDesktopNameRequest) SetRegionId(v string) *ModifyDesktopNameRequest {
	s.RegionId = &v
	return s
}

type ModifyDesktopNameResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopNameResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopNameResponseBody) SetRequestId(v string) *ModifyDesktopNameResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopNameResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopNameResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopNameResponse) SetHeaders(v map[string]*string) *ModifyDesktopNameResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopNameResponse) SetStatusCode(v int32) *ModifyDesktopNameResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopNameResponse) SetBody(v *ModifyDesktopNameResponseBody) *ModifyDesktopNameResponse {
	s.Body = v
	return s
}

type ModifyDesktopOversoldGroupRequest struct {
	ConcurrenceCount       *int32  `json:"ConcurrenceCount,omitempty" xml:"ConcurrenceCount,omitempty"`
	Description            *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IdleDisconnectDuration *int64  `json:"IdleDisconnectDuration,omitempty" xml:"IdleDisconnectDuration,omitempty"`
	ImageId                *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	KeepDuration           *int32  `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OversoldGroupId        *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	OversoldUserCount      *int32  `json:"OversoldUserCount,omitempty" xml:"OversoldUserCount,omitempty"`
	OversoldWarn           *int32  `json:"OversoldWarn,omitempty" xml:"OversoldWarn,omitempty"`
	PolicyGroupId          *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	StopDuration           *int32  `json:"StopDuration,omitempty" xml:"StopDuration,omitempty"`
}

func (s ModifyDesktopOversoldGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupRequest) SetConcurrenceCount(v int32) *ModifyDesktopOversoldGroupRequest {
	s.ConcurrenceCount = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetDescription(v string) *ModifyDesktopOversoldGroupRequest {
	s.Description = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetIdleDisconnectDuration(v int64) *ModifyDesktopOversoldGroupRequest {
	s.IdleDisconnectDuration = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetImageId(v string) *ModifyDesktopOversoldGroupRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetKeepDuration(v int32) *ModifyDesktopOversoldGroupRequest {
	s.KeepDuration = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetName(v string) *ModifyDesktopOversoldGroupRequest {
	s.Name = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetOversoldGroupId(v string) *ModifyDesktopOversoldGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetOversoldUserCount(v int32) *ModifyDesktopOversoldGroupRequest {
	s.OversoldUserCount = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetOversoldWarn(v int32) *ModifyDesktopOversoldGroupRequest {
	s.OversoldWarn = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetPolicyGroupId(v string) *ModifyDesktopOversoldGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ModifyDesktopOversoldGroupRequest) SetStopDuration(v int32) *ModifyDesktopOversoldGroupRequest {
	s.StopDuration = &v
	return s
}

type ModifyDesktopOversoldGroupResponseBody struct {
	Data      *ModifyDesktopOversoldGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopOversoldGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupResponseBody) SetData(v *ModifyDesktopOversoldGroupResponseBodyData) *ModifyDesktopOversoldGroupResponseBody {
	s.Data = v
	return s
}

func (s *ModifyDesktopOversoldGroupResponseBody) SetRequestId(v string) *ModifyDesktopOversoldGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopOversoldGroupResponseBodyData struct {
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
}

func (s ModifyDesktopOversoldGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupResponseBodyData) SetOversoldGroupId(v string) *ModifyDesktopOversoldGroupResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

type ModifyDesktopOversoldGroupResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopOversoldGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopOversoldGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupResponse) SetHeaders(v map[string]*string) *ModifyDesktopOversoldGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopOversoldGroupResponse) SetStatusCode(v int32) *ModifyDesktopOversoldGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopOversoldGroupResponse) SetBody(v *ModifyDesktopOversoldGroupResponseBody) *ModifyDesktopOversoldGroupResponse {
	s.Body = v
	return s
}

type ModifyDesktopOversoldGroupSaleRequest struct {
	ConcurrenceCount  *int32  `json:"ConcurrenceCount,omitempty" xml:"ConcurrenceCount,omitempty"`
	OversoldGroupId   *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	OversoldUserCount *int32  `json:"OversoldUserCount,omitempty" xml:"OversoldUserCount,omitempty"`
}

func (s ModifyDesktopOversoldGroupSaleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupSaleRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupSaleRequest) SetConcurrenceCount(v int32) *ModifyDesktopOversoldGroupSaleRequest {
	s.ConcurrenceCount = &v
	return s
}

func (s *ModifyDesktopOversoldGroupSaleRequest) SetOversoldGroupId(v string) *ModifyDesktopOversoldGroupSaleRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *ModifyDesktopOversoldGroupSaleRequest) SetOversoldUserCount(v int32) *ModifyDesktopOversoldGroupSaleRequest {
	s.OversoldUserCount = &v
	return s
}

type ModifyDesktopOversoldGroupSaleResponseBody struct {
	Data      *ModifyDesktopOversoldGroupSaleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopOversoldGroupSaleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupSaleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupSaleResponseBody) SetData(v *ModifyDesktopOversoldGroupSaleResponseBodyData) *ModifyDesktopOversoldGroupSaleResponseBody {
	s.Data = v
	return s
}

func (s *ModifyDesktopOversoldGroupSaleResponseBody) SetRequestId(v string) *ModifyDesktopOversoldGroupSaleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopOversoldGroupSaleResponseBodyData struct {
	OrderId         *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
}

func (s ModifyDesktopOversoldGroupSaleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupSaleResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupSaleResponseBodyData) SetOrderId(v int64) *ModifyDesktopOversoldGroupSaleResponseBodyData {
	s.OrderId = &v
	return s
}

func (s *ModifyDesktopOversoldGroupSaleResponseBodyData) SetOversoldGroupId(v string) *ModifyDesktopOversoldGroupSaleResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

type ModifyDesktopOversoldGroupSaleResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopOversoldGroupSaleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopOversoldGroupSaleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldGroupSaleResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldGroupSaleResponse) SetHeaders(v map[string]*string) *ModifyDesktopOversoldGroupSaleResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopOversoldGroupSaleResponse) SetStatusCode(v int32) *ModifyDesktopOversoldGroupSaleResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopOversoldGroupSaleResponse) SetBody(v *ModifyDesktopOversoldGroupSaleResponseBody) *ModifyDesktopOversoldGroupSaleResponse {
	s.Body = v
	return s
}

type ModifyDesktopOversoldUserGroupRequest struct {
	ImageId         *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	PolicyGroupId   *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	UserGroupId     *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ModifyDesktopOversoldUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldUserGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldUserGroupRequest) SetImageId(v string) *ModifyDesktopOversoldUserGroupRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyDesktopOversoldUserGroupRequest) SetName(v string) *ModifyDesktopOversoldUserGroupRequest {
	s.Name = &v
	return s
}

func (s *ModifyDesktopOversoldUserGroupRequest) SetOversoldGroupId(v string) *ModifyDesktopOversoldUserGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *ModifyDesktopOversoldUserGroupRequest) SetPolicyGroupId(v string) *ModifyDesktopOversoldUserGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ModifyDesktopOversoldUserGroupRequest) SetUserGroupId(v string) *ModifyDesktopOversoldUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type ModifyDesktopOversoldUserGroupResponseBody struct {
	Data      *ModifyDesktopOversoldUserGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopOversoldUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldUserGroupResponseBody) SetData(v *ModifyDesktopOversoldUserGroupResponseBodyData) *ModifyDesktopOversoldUserGroupResponseBody {
	s.Data = v
	return s
}

func (s *ModifyDesktopOversoldUserGroupResponseBody) SetRequestId(v string) *ModifyDesktopOversoldUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopOversoldUserGroupResponseBodyData struct {
	UserGroupId *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s ModifyDesktopOversoldUserGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldUserGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldUserGroupResponseBodyData) SetUserGroupId(v string) *ModifyDesktopOversoldUserGroupResponseBodyData {
	s.UserGroupId = &v
	return s
}

type ModifyDesktopOversoldUserGroupResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopOversoldUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopOversoldUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopOversoldUserGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopOversoldUserGroupResponse) SetHeaders(v map[string]*string) *ModifyDesktopOversoldUserGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopOversoldUserGroupResponse) SetStatusCode(v int32) *ModifyDesktopOversoldUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopOversoldUserGroupResponse) SetBody(v *ModifyDesktopOversoldUserGroupResponseBody) *ModifyDesktopOversoldUserGroupResponse {
	s.Body = v
	return s
}

type ModifyDesktopSpecRequest struct {
	// Specifies whether to enable the auto-payment feature.
	//
	// Default value: true. Valid values:
	//
	// 	- true: enables the auto-payment feature.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     Make sure that you have sufficient balance in your Alibaba Cloud account. Otherwise, an exception occurs on your order.
	//
	//     <!-- -->
	//
	// 	- false: disables the auto-payment feature. In this case, an order is generated, and no payment is automatically made.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     You can log on to the Elastic Desktop Service console and complete the payment based on the order ID on the Orders page.
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// The ID of a cloud computer.
	//
	// example:
	//
	// ecd-4543qyik164a4****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The destination instance type. You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.
	//
	// This parameter is required.
	//
	// example:
	//
	// eds.general.2c8g
	DesktopType *string `json:"DesktopType,omitempty" xml:"DesktopType,omitempty"`
	// The ID of the promotional activity.
	//
	// example:
	//
	// 500033080110596
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId      *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceSpecs []*ModifyDesktopSpecRequestResourceSpecs `json:"ResourceSpecs,omitempty" xml:"ResourceSpecs,omitempty" type:"Repeated"`
	ResourceType  *string                                  `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The size of the new system disk. Unit: GiB. Valid values: 80 to 500 GiB. The value must be a multiple of 10.
	//
	// example:
	//
	// 80
	RootDiskSizeGib *int32 `json:"RootDiskSizeGib,omitempty" xml:"RootDiskSizeGib,omitempty"`
	// The performance level (PL) of the data disk. Default value: PL0.
	//
	// Valid values:
	//
	// 	- PL1
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL0
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL3
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- PL2
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// PL0
	UserDiskPerformanceLevel *string `json:"UserDiskPerformanceLevel,omitempty" xml:"UserDiskPerformanceLevel,omitempty"`
	// The destination data disk size. Unit: GiB.
	//
	// 	- The data disk size of a non-graphical cloud computer ranges from 20 to 1020 GiB and must be a multiple of 10.
	//
	// 	- The data disk size of a graphical cloud computer ranges from 40 to 1020 GiB and must be a multiple of 10.
	//
	// example:
	//
	// 100
	UserDiskSizeGib *int32 `json:"UserDiskSizeGib,omitempty" xml:"UserDiskSizeGib,omitempty"`
}

func (s ModifyDesktopSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopSpecRequest) SetAutoPay(v bool) *ModifyDesktopSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetDesktopId(v string) *ModifyDesktopSpecRequest {
	s.DesktopId = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetDesktopType(v string) *ModifyDesktopSpecRequest {
	s.DesktopType = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetPromotionId(v string) *ModifyDesktopSpecRequest {
	s.PromotionId = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetRegionId(v string) *ModifyDesktopSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetResourceSpecs(v []*ModifyDesktopSpecRequestResourceSpecs) *ModifyDesktopSpecRequest {
	s.ResourceSpecs = v
	return s
}

func (s *ModifyDesktopSpecRequest) SetResourceType(v string) *ModifyDesktopSpecRequest {
	s.ResourceType = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetRootDiskSizeGib(v int32) *ModifyDesktopSpecRequest {
	s.RootDiskSizeGib = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetUserDiskPerformanceLevel(v string) *ModifyDesktopSpecRequest {
	s.UserDiskPerformanceLevel = &v
	return s
}

func (s *ModifyDesktopSpecRequest) SetUserDiskSizeGib(v int32) *ModifyDesktopSpecRequest {
	s.UserDiskSizeGib = &v
	return s
}

type ModifyDesktopSpecRequestResourceSpecs struct {
	DesktopId       *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	RootDiskSizeGib *int32  `json:"RootDiskSizeGib,omitempty" xml:"RootDiskSizeGib,omitempty"`
	UserDiskSizeGib *int32  `json:"UserDiskSizeGib,omitempty" xml:"UserDiskSizeGib,omitempty"`
}

func (s ModifyDesktopSpecRequestResourceSpecs) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopSpecRequestResourceSpecs) GoString() string {
	return s.String()
}

func (s *ModifyDesktopSpecRequestResourceSpecs) SetDesktopId(v string) *ModifyDesktopSpecRequestResourceSpecs {
	s.DesktopId = &v
	return s
}

func (s *ModifyDesktopSpecRequestResourceSpecs) SetRootDiskSizeGib(v int32) *ModifyDesktopSpecRequestResourceSpecs {
	s.RootDiskSizeGib = &v
	return s
}

func (s *ModifyDesktopSpecRequestResourceSpecs) SetUserDiskSizeGib(v int32) *ModifyDesktopSpecRequestResourceSpecs {
	s.UserDiskSizeGib = &v
	return s
}

type ModifyDesktopSpecResponseBody struct {
	// The ID of the order.
	//
	// example:
	//
	// 123456789
	OrderId  *string  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OrderIds []*int64 `json:"OrderIds,omitempty" xml:"OrderIds,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopSpecResponseBody) SetOrderId(v string) *ModifyDesktopSpecResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyDesktopSpecResponseBody) SetOrderIds(v []*int64) *ModifyDesktopSpecResponseBody {
	s.OrderIds = v
	return s
}

func (s *ModifyDesktopSpecResponseBody) SetRequestId(v string) *ModifyDesktopSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopSpecResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopSpecResponse) SetHeaders(v map[string]*string) *ModifyDesktopSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopSpecResponse) SetStatusCode(v int32) *ModifyDesktopSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopSpecResponse) SetBody(v *ModifyDesktopSpecResponseBody) *ModifyDesktopSpecResponse {
	s.Body = v
	return s
}

type ModifyDesktopTimerRequest struct {
	// The IDs of the cloud computers.
	//
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The details of the scheduled task on cloud computers.
	DesktopTimers []*ModifyDesktopTimerRequestDesktopTimers `json:"DesktopTimers,omitempty" xml:"DesktopTimers,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// Specifies whether to use the `DesktopTimers`*	- parameter. Set the value to `true`**.
	//
	// example:
	//
	// true
	UseDesktopTimers *bool `json:"UseDesktopTimers,omitempty" xml:"UseDesktopTimers,omitempty"`
}

func (s ModifyDesktopTimerRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopTimerRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopTimerRequest) SetDesktopId(v []*string) *ModifyDesktopTimerRequest {
	s.DesktopId = v
	return s
}

func (s *ModifyDesktopTimerRequest) SetDesktopTimers(v []*ModifyDesktopTimerRequestDesktopTimers) *ModifyDesktopTimerRequest {
	s.DesktopTimers = v
	return s
}

func (s *ModifyDesktopTimerRequest) SetRegionId(v string) *ModifyDesktopTimerRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDesktopTimerRequest) SetUseDesktopTimers(v bool) *ModifyDesktopTimerRequest {
	s.UseDesktopTimers = &v
	return s
}

type ModifyDesktopTimerRequestDesktopTimers struct {
	// Specifies whether to allow end users to configure the scheduled task.
	//
	// example:
	//
	// true
	AllowClientSetting *bool `json:"AllowClientSetting,omitempty" xml:"AllowClientSetting,omitempty"`
	// The cron expression of the schedule.
	//
	// > The time must be in UTC. For example, for 24:00 (UTC+8), you must set the value to 0 0 16 ? \\	- 1,2,3,4,5,6,7
	//
	// example:
	//
	// 0 0 16 ? 	- 1,2,3,4,5,6,7
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// Specifies whether to forcibly execute the scheduled task.
	//
	// Valid values:
	//
	// 	- true: forcibly executes the scheduled task regardless of the status and connection of the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false: does not forcibly execute the scheduled task.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Enforce *bool `json:"Enforce,omitempty" xml:"Enforce,omitempty"`
	// The interval at which the scheduled task is executed. Unit: minutes.
	//
	// example:
	//
	// 10
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// The operations that scheduled tasks support. This parameter is valid only when TimerType is set to NoConnect.
	//
	// Valid values:
	//
	// 	- Hibernate: hibernates the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Shutdown: stops the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Shutdown
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// The reset type of the cloud computers.
	//
	// Valid values:
	//
	// 	- RESET_TYPE_SYSTE: resets the system disk.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- RESET_TYPE_BOTH: resets data and user disks.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// RESET_TYPE_SYSTEM
	ResetType *string `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// The type of the scheduled task.
	//
	// Valid values:
	//
	// 	- NoOperationDisconnect: Disconnects the cloud computers without performing operations on the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- LogoutShutdown: Stops the cloud computers when end users log out Alibaba Cloud Workspace clients.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NoConnect: Disconnects the cloud computers when end users perform one of the actions that is specified by the OperationType parameter.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- TimerBoot: Starts the cloud computers on schedule.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- TimerReset: Resets the cloud computers on schedule.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- LoginAutoConnect: automatically connects to the cloud computers when end users log on to Alibaba Cloud Workspace clients.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NoOperationShutdown: Stops the cloud computers without performing operations on the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- TimerShutdown: Stops the cloud computers on schedule.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- NoOperationReboot: Restarts the cloud computers without performing operations on the cloud computers.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- TimerReboot: Restarts the cloud computers on schedule.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// TimerBoot
	TimerType *string `json:"TimerType,omitempty" xml:"TimerType,omitempty"`
}

func (s ModifyDesktopTimerRequestDesktopTimers) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopTimerRequestDesktopTimers) GoString() string {
	return s.String()
}

func (s *ModifyDesktopTimerRequestDesktopTimers) SetAllowClientSetting(v bool) *ModifyDesktopTimerRequestDesktopTimers {
	s.AllowClientSetting = &v
	return s
}

func (s *ModifyDesktopTimerRequestDesktopTimers) SetCronExpression(v string) *ModifyDesktopTimerRequestDesktopTimers {
	s.CronExpression = &v
	return s
}

func (s *ModifyDesktopTimerRequestDesktopTimers) SetEnforce(v bool) *ModifyDesktopTimerRequestDesktopTimers {
	s.Enforce = &v
	return s
}

func (s *ModifyDesktopTimerRequestDesktopTimers) SetInterval(v int32) *ModifyDesktopTimerRequestDesktopTimers {
	s.Interval = &v
	return s
}

func (s *ModifyDesktopTimerRequestDesktopTimers) SetOperationType(v string) *ModifyDesktopTimerRequestDesktopTimers {
	s.OperationType = &v
	return s
}

func (s *ModifyDesktopTimerRequestDesktopTimers) SetResetType(v string) *ModifyDesktopTimerRequestDesktopTimers {
	s.ResetType = &v
	return s
}

func (s *ModifyDesktopTimerRequestDesktopTimers) SetTimerType(v string) *ModifyDesktopTimerRequestDesktopTimers {
	s.TimerType = &v
	return s
}

type ModifyDesktopTimerResponseBody struct {
	// The IDs of the cloud computers for which you successfully configure the scheduled task.
	DesktopIds []*string `json:"DesktopIds,omitempty" xml:"DesktopIds,omitempty" type:"Repeated"`
	// The request ID.
	//
	// example:
	//
	// 4638719F-3CAB-5704-BD54-55617BFF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopTimerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopTimerResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopTimerResponseBody) SetDesktopIds(v []*string) *ModifyDesktopTimerResponseBody {
	s.DesktopIds = v
	return s
}

func (s *ModifyDesktopTimerResponseBody) SetRequestId(v string) *ModifyDesktopTimerResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopTimerResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopTimerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopTimerResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopTimerResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopTimerResponse) SetHeaders(v map[string]*string) *ModifyDesktopTimerResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopTimerResponse) SetStatusCode(v int32) *ModifyDesktopTimerResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopTimerResponse) SetBody(v *ModifyDesktopTimerResponseBody) *ModifyDesktopTimerResponse {
	s.Body = v
	return s
}

type ModifyDesktopsPolicyGroupRequest struct {
	// The ID of the cloud desktop. You can specify one or more desktop IDs. The value is a JSON array.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-ia2zw38bi6cm7****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the policy.
	//
	// example:
	//
	// pg-gx2x1dhsmthe9****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// 策略ID列表。
	PolicyGroupIds []*string `json:"PolicyGroupIds,omitempty" xml:"PolicyGroupIds,omitempty" type:"Repeated"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyDesktopsPolicyGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopsPolicyGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyDesktopsPolicyGroupRequest) SetDesktopId(v []*string) *ModifyDesktopsPolicyGroupRequest {
	s.DesktopId = v
	return s
}

func (s *ModifyDesktopsPolicyGroupRequest) SetPolicyGroupId(v string) *ModifyDesktopsPolicyGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ModifyDesktopsPolicyGroupRequest) SetPolicyGroupIds(v []*string) *ModifyDesktopsPolicyGroupRequest {
	s.PolicyGroupIds = v
	return s
}

func (s *ModifyDesktopsPolicyGroupRequest) SetRegionId(v string) *ModifyDesktopsPolicyGroupRequest {
	s.RegionId = &v
	return s
}

type ModifyDesktopsPolicyGroupResponseBody struct {
	// The modification results.
	ModifyResults []*ModifyDesktopsPolicyGroupResponseBodyModifyResults `json:"ModifyResults,omitempty" xml:"ModifyResults,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDesktopsPolicyGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopsPolicyGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDesktopsPolicyGroupResponseBody) SetModifyResults(v []*ModifyDesktopsPolicyGroupResponseBodyModifyResults) *ModifyDesktopsPolicyGroupResponseBody {
	s.ModifyResults = v
	return s
}

func (s *ModifyDesktopsPolicyGroupResponseBody) SetRequestId(v string) *ModifyDesktopsPolicyGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDesktopsPolicyGroupResponseBodyModifyResults struct {
	// The result of the modification. A value of success indicates that the policy is modified. If the policy failed to be modified, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the cloud desktop.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The error message returned if the request failed. This parameter is not returned if the value of Code is success.``
	//
	// example:
	//
	// The specified param DesktopId ecd-ia2zw38bi6cm7***	- is not found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s ModifyDesktopsPolicyGroupResponseBodyModifyResults) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopsPolicyGroupResponseBodyModifyResults) GoString() string {
	return s.String()
}

func (s *ModifyDesktopsPolicyGroupResponseBodyModifyResults) SetCode(v string) *ModifyDesktopsPolicyGroupResponseBodyModifyResults {
	s.Code = &v
	return s
}

func (s *ModifyDesktopsPolicyGroupResponseBodyModifyResults) SetDesktopId(v string) *ModifyDesktopsPolicyGroupResponseBodyModifyResults {
	s.DesktopId = &v
	return s
}

func (s *ModifyDesktopsPolicyGroupResponseBodyModifyResults) SetMessage(v string) *ModifyDesktopsPolicyGroupResponseBodyModifyResults {
	s.Message = &v
	return s
}

type ModifyDesktopsPolicyGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDesktopsPolicyGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDesktopsPolicyGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDesktopsPolicyGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyDesktopsPolicyGroupResponse) SetHeaders(v map[string]*string) *ModifyDesktopsPolicyGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyDesktopsPolicyGroupResponse) SetStatusCode(v int32) *ModifyDesktopsPolicyGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDesktopsPolicyGroupResponse) SetBody(v *ModifyDesktopsPolicyGroupResponseBody) *ModifyDesktopsPolicyGroupResponse {
	s.Body = v
	return s
}

type ModifyDiskSpecRequest struct {
	// Specifies whether to automatically complete the payment. Valid values:
	//
	// 	- `true`: automatically completes the payment. Make sure that your Alibaba Cloud account has sufficient balance. If your Alibaba Cloud account does not have sufficient balance, abnormal orders are generated.
	//
	// 	- `false`: does not complete the payment. In this case, an order is generated, but no payment is made. You can log on to the Elastic Desktop Service (EDS) console and complete the payment based on the order ID on the **Orders*	- page.
	//
	// Default value: `true`.
	//
	// example:
	//
	// false
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// The ID of the cloud desktop.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-2yjhqxo1monxxxxxx
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The ID of the sales promotion activity. You can call the DescribePrice operation to obtain the IDs of matching sales promotion activities.
	//
	// example:
	//
	// youhuiquan_promotion_option_id_for_blank
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The performance level (PL) of the system disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the system disk. Valid values:
	//
	// 	- PL0
	//
	// 	- PL1
	//
	// 	- PL2
	//
	// 	- PL3
	//
	// example:
	//
	// PL1
	RootDiskPerformanceLevel *string `json:"RootDiskPerformanceLevel,omitempty" xml:"RootDiskPerformanceLevel,omitempty"`
	// The PL of the data disk. If the cloud desktop type is Graphics or High Frequency, you can set the PL of the data disk. Valid values:
	//
	// 	- PL0
	//
	// 	- PL1
	//
	// 	- PL2
	//
	// 	- PL3
	//
	// example:
	//
	// PL1
	UserDiskPerformanceLevel *string `json:"UserDiskPerformanceLevel,omitempty" xml:"UserDiskPerformanceLevel,omitempty"`
}

func (s ModifyDiskSpecRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecRequest) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecRequest) SetAutoPay(v bool) *ModifyDiskSpecRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetDesktopId(v string) *ModifyDiskSpecRequest {
	s.DesktopId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetPromotionId(v string) *ModifyDiskSpecRequest {
	s.PromotionId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetRegionId(v string) *ModifyDiskSpecRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetRootDiskPerformanceLevel(v string) *ModifyDiskSpecRequest {
	s.RootDiskPerformanceLevel = &v
	return s
}

func (s *ModifyDiskSpecRequest) SetUserDiskPerformanceLevel(v string) *ModifyDiskSpecRequest {
	s.UserDiskPerformanceLevel = &v
	return s
}

type ModifyDiskSpecResponseBody struct {
	// The ID of the order. You can obtain the order ID on the [Orders](https://usercenter2-intl.aliyun.com/order/list?pageIndex=1\\&pageSize=20\\&spm=5176.12818093.top-nav.ditem-ord.36f016d0OQFmJa) page in Alibaba Cloud User Center.
	//
	// example:
	//
	// 219861020660568
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// F89BBB13-8B3B-5C8A-A700-EEFDC17B8227
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyDiskSpecResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecResponseBody) SetOrderId(v string) *ModifyDiskSpecResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyDiskSpecResponseBody) SetRequestId(v string) *ModifyDiskSpecResponseBody {
	s.RequestId = &v
	return s
}

type ModifyDiskSpecResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyDiskSpecResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyDiskSpecResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyDiskSpecResponse) GoString() string {
	return s.String()
}

func (s *ModifyDiskSpecResponse) SetHeaders(v map[string]*string) *ModifyDiskSpecResponse {
	s.Headers = v
	return s
}

func (s *ModifyDiskSpecResponse) SetStatusCode(v int32) *ModifyDiskSpecResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyDiskSpecResponse) SetBody(v *ModifyDiskSpecResponseBody) *ModifyDiskSpecResponse {
	s.Body = v
	return s
}

type ModifyEntitlementRequest struct {
	// The ID of the cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The username IDs. End users specified by this parameter become the end users of the cloud computer, and the original end users of the cloud computer are removed. You can specify 1 to 100 IDs.
	//
	// example:
	//
	// alice
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyEntitlementRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyEntitlementRequest) GoString() string {
	return s.String()
}

func (s *ModifyEntitlementRequest) SetDesktopId(v string) *ModifyEntitlementRequest {
	s.DesktopId = &v
	return s
}

func (s *ModifyEntitlementRequest) SetEndUserId(v []*string) *ModifyEntitlementRequest {
	s.EndUserId = v
	return s
}

func (s *ModifyEntitlementRequest) SetRegionId(v string) *ModifyEntitlementRequest {
	s.RegionId = &v
	return s
}

type ModifyEntitlementResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyEntitlementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyEntitlementResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyEntitlementResponseBody) SetRequestId(v string) *ModifyEntitlementResponseBody {
	s.RequestId = &v
	return s
}

type ModifyEntitlementResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyEntitlementResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyEntitlementResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyEntitlementResponse) GoString() string {
	return s.String()
}

func (s *ModifyEntitlementResponse) SetHeaders(v map[string]*string) *ModifyEntitlementResponse {
	s.Headers = v
	return s
}

func (s *ModifyEntitlementResponse) SetStatusCode(v int32) *ModifyEntitlementResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyEntitlementResponse) SetBody(v *ModifyEntitlementResponseBody) *ModifyEntitlementResponse {
	s.Body = v
	return s
}

type ModifyImageAttributeRequest struct {
	// The description of the image. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// testDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The image ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-2g65ljy3ynrdq****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// example:
	//
	// testName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyImageAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeRequest) SetDescription(v string) *ModifyImageAttributeRequest {
	s.Description = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetImageId(v string) *ModifyImageAttributeRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetName(v string) *ModifyImageAttributeRequest {
	s.Name = &v
	return s
}

func (s *ModifyImageAttributeRequest) SetRegionId(v string) *ModifyImageAttributeRequest {
	s.RegionId = &v
	return s
}

type ModifyImageAttributeResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImageAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponseBody) SetRequestId(v string) *ModifyImageAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImageAttributeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyImageAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyImageAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImageAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyImageAttributeResponse) SetHeaders(v map[string]*string) *ModifyImageAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyImageAttributeResponse) SetStatusCode(v int32) *ModifyImageAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImageAttributeResponse) SetBody(v *ModifyImageAttributeResponseBody) *ModifyImageAttributeResponse {
	s.Body = v
	return s
}

type ModifyImagePermissionRequest struct {
	// The IDs of Alibaba Cloud accounts to which to share the image that will be created based on the image template. You can specify up to 20 account IDs.
	AddAccount []*int64 `json:"AddAccount,omitempty" xml:"AddAccount,omitempty" type:"Repeated"`
	// The IDs of the images.
	//
	// This parameter is required.
	//
	// example:
	//
	// m-gx2x1dhsmusr2****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of Alibaba Cloud account N from which you want to unshare the custom image. Valid values of N: 1 to 10. If the value of N is greater than 10, this parameter is ignored.
	RemoveAccount []*int64 `json:"RemoveAccount,omitempty" xml:"RemoveAccount,omitempty" type:"Repeated"`
}

func (s ModifyImagePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyImagePermissionRequest) GoString() string {
	return s.String()
}

func (s *ModifyImagePermissionRequest) SetAddAccount(v []*int64) *ModifyImagePermissionRequest {
	s.AddAccount = v
	return s
}

func (s *ModifyImagePermissionRequest) SetImageId(v string) *ModifyImagePermissionRequest {
	s.ImageId = &v
	return s
}

func (s *ModifyImagePermissionRequest) SetRegionId(v string) *ModifyImagePermissionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyImagePermissionRequest) SetRemoveAccount(v []*int64) *ModifyImagePermissionRequest {
	s.RemoveAccount = v
	return s
}

type ModifyImagePermissionResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyImagePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyImagePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyImagePermissionResponseBody) SetRequestId(v string) *ModifyImagePermissionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyImagePermissionResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyImagePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyImagePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyImagePermissionResponse) GoString() string {
	return s.String()
}

func (s *ModifyImagePermissionResponse) SetHeaders(v map[string]*string) *ModifyImagePermissionResponse {
	s.Headers = v
	return s
}

func (s *ModifyImagePermissionResponse) SetStatusCode(v int32) *ModifyImagePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyImagePermissionResponse) SetBody(v *ModifyImagePermissionResponseBody) *ModifyImagePermissionResponse {
	s.Body = v
	return s
}

type ModifyNASDefaultMountTargetRequest struct {
	// The ID of the NAS file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// 04f314****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The domain name of the mount target.
	//
	// This parameter is required.
	//
	// example:
	//
	// 0bf744****-xo***.cn-hangzhou.nas.aliyuncs.com
	MountTargetDomain *string `json:"MountTargetDomain,omitempty" xml:"MountTargetDomain,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyNASDefaultMountTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNASDefaultMountTargetRequest) GoString() string {
	return s.String()
}

func (s *ModifyNASDefaultMountTargetRequest) SetFileSystemId(v string) *ModifyNASDefaultMountTargetRequest {
	s.FileSystemId = &v
	return s
}

func (s *ModifyNASDefaultMountTargetRequest) SetMountTargetDomain(v string) *ModifyNASDefaultMountTargetRequest {
	s.MountTargetDomain = &v
	return s
}

func (s *ModifyNASDefaultMountTargetRequest) SetRegionId(v string) *ModifyNASDefaultMountTargetRequest {
	s.RegionId = &v
	return s
}

type ModifyNASDefaultMountTargetResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNASDefaultMountTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNASDefaultMountTargetResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNASDefaultMountTargetResponseBody) SetRequestId(v string) *ModifyNASDefaultMountTargetResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNASDefaultMountTargetResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyNASDefaultMountTargetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyNASDefaultMountTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNASDefaultMountTargetResponse) GoString() string {
	return s.String()
}

func (s *ModifyNASDefaultMountTargetResponse) SetHeaders(v map[string]*string) *ModifyNASDefaultMountTargetResponse {
	s.Headers = v
	return s
}

func (s *ModifyNASDefaultMountTargetResponse) SetStatusCode(v int32) *ModifyNASDefaultMountTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNASDefaultMountTargetResponse) SetBody(v *ModifyNASDefaultMountTargetResponseBody) *ModifyNASDefaultMountTargetResponse {
	s.Body = v
	return s
}

type ModifyNetworkPackageBandwidthRequest struct {
	// Specifies whether to enable the automatic payment feature.
	//
	// Valid values:
	//
	// 	- true (default): enables the auto-payment feature.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     Make sure that your account has sufficient balance. Otherwise, no order is generated.
	//
	//     <!-- -->
	//
	// 	- false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// The bandwidth provided by the premium bandwidth plan. Unit: Mbit/s.
	//
	// 	- Valid values if the premium bandwidth plan is a subscription plan: 2 to 1000.
	//
	// 	- Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by data transfer (PayByTraffic): 2 to 200.
	//
	// 	- Valid values if the premium bandwidth plan is a pay-as-you-go plan that charges by fixed bandwidth (PayByBandwidth): 2 to 1000.
	//
	// This parameter is required.
	//
	// example:
	//
	// 10
	Bandwidth *int32 `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty"`
	// The ID of the premium bandwidth plan.
	//
	// This parameter is required.
	//
	// example:
	//
	// np-cxj99qb8d34vo****
	NetworkPackageId *string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty"`
	// The promotion ID.
	//
	// example:
	//
	// 500033080110596
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyNetworkPackageBandwidthRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkPackageBandwidthRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkPackageBandwidthRequest) SetAutoPay(v bool) *ModifyNetworkPackageBandwidthRequest {
	s.AutoPay = &v
	return s
}

func (s *ModifyNetworkPackageBandwidthRequest) SetBandwidth(v int32) *ModifyNetworkPackageBandwidthRequest {
	s.Bandwidth = &v
	return s
}

func (s *ModifyNetworkPackageBandwidthRequest) SetNetworkPackageId(v string) *ModifyNetworkPackageBandwidthRequest {
	s.NetworkPackageId = &v
	return s
}

func (s *ModifyNetworkPackageBandwidthRequest) SetPromotionId(v string) *ModifyNetworkPackageBandwidthRequest {
	s.PromotionId = &v
	return s
}

func (s *ModifyNetworkPackageBandwidthRequest) SetRegionId(v string) *ModifyNetworkPackageBandwidthRequest {
	s.RegionId = &v
	return s
}

type ModifyNetworkPackageBandwidthResponseBody struct {
	// The ID of the order.
	//
	// example:
	//
	// 214552063030752
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNetworkPackageBandwidthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkPackageBandwidthResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNetworkPackageBandwidthResponseBody) SetOrderId(v string) *ModifyNetworkPackageBandwidthResponseBody {
	s.OrderId = &v
	return s
}

func (s *ModifyNetworkPackageBandwidthResponseBody) SetRequestId(v string) *ModifyNetworkPackageBandwidthResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNetworkPackageBandwidthResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyNetworkPackageBandwidthResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyNetworkPackageBandwidthResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkPackageBandwidthResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkPackageBandwidthResponse) SetHeaders(v map[string]*string) *ModifyNetworkPackageBandwidthResponse {
	s.Headers = v
	return s
}

func (s *ModifyNetworkPackageBandwidthResponse) SetStatusCode(v int32) *ModifyNetworkPackageBandwidthResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNetworkPackageBandwidthResponse) SetBody(v *ModifyNetworkPackageBandwidthResponseBody) *ModifyNetworkPackageBandwidthResponse {
	s.Body = v
	return s
}

type ModifyNetworkPackageEnabledRequest struct {
	// Specifies whether to restore the premium bandwidth plan of the cloud computer.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Enabled *bool `json:"Enabled,omitempty" xml:"Enabled,omitempty"`
	// The ID of the premium bandwidth plan.
	//
	// This parameter is required.
	//
	// example:
	//
	// np-cfedn7r2pe48g****
	NetworkPackageId *string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyNetworkPackageEnabledRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkPackageEnabledRequest) GoString() string {
	return s.String()
}

func (s *ModifyNetworkPackageEnabledRequest) SetEnabled(v bool) *ModifyNetworkPackageEnabledRequest {
	s.Enabled = &v
	return s
}

func (s *ModifyNetworkPackageEnabledRequest) SetNetworkPackageId(v string) *ModifyNetworkPackageEnabledRequest {
	s.NetworkPackageId = &v
	return s
}

func (s *ModifyNetworkPackageEnabledRequest) SetRegionId(v string) *ModifyNetworkPackageEnabledRequest {
	s.RegionId = &v
	return s
}

type ModifyNetworkPackageEnabledResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyNetworkPackageEnabledResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkPackageEnabledResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyNetworkPackageEnabledResponseBody) SetRequestId(v string) *ModifyNetworkPackageEnabledResponseBody {
	s.RequestId = &v
	return s
}

type ModifyNetworkPackageEnabledResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyNetworkPackageEnabledResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyNetworkPackageEnabledResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyNetworkPackageEnabledResponse) GoString() string {
	return s.String()
}

func (s *ModifyNetworkPackageEnabledResponse) SetHeaders(v map[string]*string) *ModifyNetworkPackageEnabledResponse {
	s.Headers = v
	return s
}

func (s *ModifyNetworkPackageEnabledResponse) SetStatusCode(v int32) *ModifyNetworkPackageEnabledResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyNetworkPackageEnabledResponse) SetBody(v *ModifyNetworkPackageEnabledResponseBody) *ModifyNetworkPackageEnabledResponse {
	s.Body = v
	return s
}

type ModifyOfficeSiteAttributeRequest struct {
	// The method to connect to cloud computers from Alibaba Cloud Workspace clients.
	//
	// >  VPC connection relies on the Alibaba Cloud PrivateLink service. You can use PrivateLink for free. When you set this parameter to `VPC` or `Any`, the system automatically activates PrivateLink.
	//
	// Valid values:
	//
	// 	- INTERNET (default): allows end users to connect to cloud computers over the Internet.
	//
	// 	- VPC: allows end users to connect to cloud computers over VPCs.
	//
	// 	- ANY: allows end users to connect to cloud computers over the Internet and VPCs. When end users connect to cloud computers from Elastic Desktop Service, you can choose a connection method based on your business requirements.
	//
	// example:
	//
	// INTERNET
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
	//
	// Valid values:
	//
	// 	- true (default)
	//
	// 	- false
	//
	// example:
	//
	// false
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Specifies whether to enable two-factor verification when an end user logs on to an Alibaba Cloud Workspace client. This parameter is required only for convenience office networks. If two-factor verification is enabled, the system checks whether security risks exist within the logon account when the end user uses a convenience user to log on to the client. If risks are detected, the system sends a verification code to the email address that is associated with the account of the convenience user. Then, the end user can log on to the client only when the verification code is correct.
	//
	// example:
	//
	// false
	NeedVerifyLoginRisk *bool `json:"NeedVerifyLoginRisk,omitempty" xml:"NeedVerifyLoginRisk,omitempty"`
	// Specifies whether to enable device verification. This parameter is required only for convenience office networks. This parameter is left empty for enterprise Active Directory (AD) office networks.
	//
	// example:
	//
	// false
	NeedVerifyZeroDevice *bool `json:"NeedVerifyZeroDevice,omitempty" xml:"NeedVerifyZeroDevice,omitempty"`
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-882398****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The office network name. The name must be 2 to 255 characters in length. It can contain letters, digits, colons (:), underscores (_), periods (.), and hyphens (-). It must start with a letter and cannot start with `http://` or `https://`.\\
	//
	// This parameter is empty by default.
	//
	// example:
	//
	// test
	OfficeSiteName *string `json:"OfficeSiteName,omitempty" xml:"OfficeSiteName,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyOfficeSiteAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteAttributeRequest) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteAttributeRequest) SetDesktopAccessType(v string) *ModifyOfficeSiteAttributeRequest {
	s.DesktopAccessType = &v
	return s
}

func (s *ModifyOfficeSiteAttributeRequest) SetEnableAdminAccess(v bool) *ModifyOfficeSiteAttributeRequest {
	s.EnableAdminAccess = &v
	return s
}

func (s *ModifyOfficeSiteAttributeRequest) SetNeedVerifyLoginRisk(v bool) *ModifyOfficeSiteAttributeRequest {
	s.NeedVerifyLoginRisk = &v
	return s
}

func (s *ModifyOfficeSiteAttributeRequest) SetNeedVerifyZeroDevice(v bool) *ModifyOfficeSiteAttributeRequest {
	s.NeedVerifyZeroDevice = &v
	return s
}

func (s *ModifyOfficeSiteAttributeRequest) SetOfficeSiteId(v string) *ModifyOfficeSiteAttributeRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ModifyOfficeSiteAttributeRequest) SetOfficeSiteName(v string) *ModifyOfficeSiteAttributeRequest {
	s.OfficeSiteName = &v
	return s
}

func (s *ModifyOfficeSiteAttributeRequest) SetRegionId(v string) *ModifyOfficeSiteAttributeRequest {
	s.RegionId = &v
	return s
}

type ModifyOfficeSiteAttributeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyOfficeSiteAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteAttributeResponseBody) SetRequestId(v string) *ModifyOfficeSiteAttributeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyOfficeSiteAttributeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyOfficeSiteAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyOfficeSiteAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteAttributeResponse) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteAttributeResponse) SetHeaders(v map[string]*string) *ModifyOfficeSiteAttributeResponse {
	s.Headers = v
	return s
}

func (s *ModifyOfficeSiteAttributeResponse) SetStatusCode(v int32) *ModifyOfficeSiteAttributeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyOfficeSiteAttributeResponse) SetBody(v *ModifyOfficeSiteAttributeResponseBody) *ModifyOfficeSiteAttributeResponse {
	s.Body = v
	return s
}

type ModifyOfficeSiteCrossDesktopAccessRequest struct {
	// Specifies whether to enable the communication between cloud computers in an office network. If you enable the communication between cloud computers in an office network, the cloud computers can access each other.
	//
	// This parameter is required.
	//
	// example:
	//
	// false
	EnableCrossDesktopAccess *bool `json:"EnableCrossDesktopAccess,omitempty" xml:"EnableCrossDesktopAccess,omitempty"`
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-068266****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyOfficeSiteCrossDesktopAccessRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteCrossDesktopAccessRequest) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteCrossDesktopAccessRequest) SetEnableCrossDesktopAccess(v bool) *ModifyOfficeSiteCrossDesktopAccessRequest {
	s.EnableCrossDesktopAccess = &v
	return s
}

func (s *ModifyOfficeSiteCrossDesktopAccessRequest) SetOfficeSiteId(v string) *ModifyOfficeSiteCrossDesktopAccessRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ModifyOfficeSiteCrossDesktopAccessRequest) SetRegionId(v string) *ModifyOfficeSiteCrossDesktopAccessRequest {
	s.RegionId = &v
	return s
}

type ModifyOfficeSiteCrossDesktopAccessResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyOfficeSiteCrossDesktopAccessResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteCrossDesktopAccessResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteCrossDesktopAccessResponseBody) SetRequestId(v string) *ModifyOfficeSiteCrossDesktopAccessResponseBody {
	s.RequestId = &v
	return s
}

type ModifyOfficeSiteCrossDesktopAccessResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyOfficeSiteCrossDesktopAccessResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyOfficeSiteCrossDesktopAccessResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteCrossDesktopAccessResponse) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteCrossDesktopAccessResponse) SetHeaders(v map[string]*string) *ModifyOfficeSiteCrossDesktopAccessResponse {
	s.Headers = v
	return s
}

func (s *ModifyOfficeSiteCrossDesktopAccessResponse) SetStatusCode(v int32) *ModifyOfficeSiteCrossDesktopAccessResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyOfficeSiteCrossDesktopAccessResponse) SetBody(v *ModifyOfficeSiteCrossDesktopAccessResponseBody) *ModifyOfficeSiteCrossDesktopAccessResponse {
	s.Body = v
	return s
}

type ModifyOfficeSiteMfaEnabledRequest struct {
	// Specifies whether to enable MFA.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The office network ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyOfficeSiteMfaEnabledRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteMfaEnabledRequest) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteMfaEnabledRequest) SetMfaEnabled(v bool) *ModifyOfficeSiteMfaEnabledRequest {
	s.MfaEnabled = &v
	return s
}

func (s *ModifyOfficeSiteMfaEnabledRequest) SetOfficeSiteId(v string) *ModifyOfficeSiteMfaEnabledRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *ModifyOfficeSiteMfaEnabledRequest) SetRegionId(v string) *ModifyOfficeSiteMfaEnabledRequest {
	s.RegionId = &v
	return s
}

type ModifyOfficeSiteMfaEnabledResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyOfficeSiteMfaEnabledResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteMfaEnabledResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteMfaEnabledResponseBody) SetRequestId(v string) *ModifyOfficeSiteMfaEnabledResponseBody {
	s.RequestId = &v
	return s
}

type ModifyOfficeSiteMfaEnabledResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyOfficeSiteMfaEnabledResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyOfficeSiteMfaEnabledResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyOfficeSiteMfaEnabledResponse) GoString() string {
	return s.String()
}

func (s *ModifyOfficeSiteMfaEnabledResponse) SetHeaders(v map[string]*string) *ModifyOfficeSiteMfaEnabledResponse {
	s.Headers = v
	return s
}

func (s *ModifyOfficeSiteMfaEnabledResponse) SetStatusCode(v int32) *ModifyOfficeSiteMfaEnabledResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyOfficeSiteMfaEnabledResponse) SetBody(v *ModifyOfficeSiteMfaEnabledResponseBody) *ModifyOfficeSiteMfaEnabledResponse {
	s.Body = v
	return s
}

type ModifyPolicyGroupRequest struct {
	// Specifies whether the end user has administrator permissions after the end user connects to the cloud desktop.
	//
	// >  This parameter is in invitational preview and not available to the public.
	//
	// example:
	//
	// deny
	AdminAccess *string `json:"AdminAccess,omitempty" xml:"AdminAccess,omitempty"`
	// Specifies whether to enable the anti-screenshot feature. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// Default value: off.
	//
	// example:
	//
	// on
	AppContentProtection *string `json:"AppContentProtection,omitempty" xml:"AppContentProtection,omitempty"`
	// The client CIDR blocks in the whitelist.
	AuthorizeAccessPolicyRule []*ModifyPolicyGroupRequestAuthorizeAccessPolicyRule `json:"AuthorizeAccessPolicyRule,omitempty" xml:"AuthorizeAccessPolicyRule,omitempty" type:"Repeated"`
	// The security group rules.
	AuthorizeSecurityPolicyRule []*ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule `json:"AuthorizeSecurityPolicyRule,omitempty" xml:"AuthorizeSecurityPolicyRule,omitempty" type:"Repeated"`
	// Specifies whether to enable the webcam redirection feature. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// Default value: on.
	//
	// example:
	//
	// on
	CameraRedirect *string `json:"CameraRedirect,omitempty" xml:"CameraRedirect,omitempty"`
	// The logon methods.
	ClientType []*ModifyPolicyGroupRequestClientType `json:"ClientType,omitempty" xml:"ClientType,omitempty" type:"Repeated"`
	// The permissions on clipboards. Valid values:
	//
	// 	- read: specifies one-way transfer. You can copy data from your computer to cloud desktops, but cannot copy data from cloud desktops to your computer.
	//
	// 	- readwrite: specifies two-way transfer. You can copy data between your computer and cloud desktops.
	//
	// 	- off: specifies that the two-way transfer is disabled. You cannot copy data between your computer and cloud desktops.
	//
	// example:
	//
	// off
	Clipboard       *string                                    `json:"Clipboard,omitempty" xml:"Clipboard,omitempty"`
	DeviceRedirects []*ModifyPolicyGroupRequestDeviceRedirects `json:"DeviceRedirects,omitempty" xml:"DeviceRedirects,omitempty" type:"Repeated"`
	// if can be null:
	// false
	DeviceRules []*ModifyPolicyGroupRequestDeviceRules `json:"DeviceRules,omitempty" xml:"DeviceRules,omitempty" type:"Repeated"`
	// The domain blacklist or whitelist. Wildcard domains are supported. Separate domain names with commas (,). Valid values:
	//
	// 	- [black:],example1.com,example2.com: the domain name blacklist.
	//
	// 	- [white:],example1.com,example2.com: the domain name whitelist.
	//
	// example:
	//
	// [black:],example1.com,example2.com
	DomainList *string `json:"DomainList,omitempty" xml:"DomainList,omitempty"`
	// The details of the DNS rule.
	DomainResolveRule []*ModifyPolicyGroupRequestDomainResolveRule `json:"DomainResolveRule,omitempty" xml:"DomainResolveRule,omitempty" type:"Repeated"`
	// The DNS rule type.
	//
	// example:
	//
	// OFF
	DomainResolveRuleType *string `json:"DomainResolveRuleType,omitempty" xml:"DomainResolveRuleType,omitempty"`
	// The user applies for the administrator assistance switch. Value range:
	//
	// 	- on
	//
	// 	- off
	//
	// example:
	//
	// on
	EndUserApplyAdminCoordinate *string `json:"EndUserApplyAdminCoordinate,omitempty" xml:"EndUserApplyAdminCoordinate,omitempty"`
	// The flow collaboration switch between users. Value range:
	//
	// 	- on
	//
	// 	- off
	//
	// example:
	//
	// on
	EndUserGroupCoordinate *string `json:"EndUserGroupCoordinate,omitempty" xml:"EndUserGroupCoordinate,omitempty"`
	// Specifies whether to enable the image display quality feature for the Graphics cloud desktop. If your business requires high desktop performance and optimal user experience, we recommend that you enable this feature. For example, you can enable this policy in professional design scenarios. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// example:
	//
	// off
	GpuAcceleration *string `json:"GpuAcceleration,omitempty" xml:"GpuAcceleration,omitempty"`
	// Specifies whether to allow the access from HTM5 clients to a cloud desktop. Valid values:
	//
	// 	- on: allows the access.
	//
	// 	- off: denies the access.
	//
	// Default value: off.
	//
	// >  We recommend that you use the ClientType-related parameters to control the EDS client type for cloud desktop logon.
	//
	// example:
	//
	// off
	Html5Access *string `json:"Html5Access,omitempty" xml:"Html5Access,omitempty"`
	// The file transfer policy for HTML5 clients. Valid values:
	//
	// 	- off: Files cannot be uploaded from or downloaded to HTML5 clients.
	//
	// 	- upload: Files can be uploaded from HTML5 clients.
	//
	// 	- download: Files can be downloaded to HTML5 clients.
	//
	// 	- all: Files can be uploaded from and downloaded to HTML5 clients.
	//
	// Default value: off.
	//
	// example:
	//
	// off
	Html5FileTransfer *string `json:"Html5FileTransfer,omitempty" xml:"Html5FileTransfer,omitempty"`
	// The protocol that you want to use for network communication. Valid values:
	//
	// 	- TCP: Only the TCP protocol is used.
	//
	// 	- BOTH: allows automatic switchover between the TCP protocol and the UDP protocol.
	//
	// Default value: TCP.
	//
	// example:
	//
	// BOTH
	InternetCommunicationProtocol *string `json:"InternetCommunicationProtocol,omitempty" xml:"InternetCommunicationProtocol,omitempty"`
	// The permissions on local disk mapping. Valid values:
	//
	// 	- read: read-only permissions. Local disks are mapped to cloud desktops. You can only read (copy) local files but cannot modify them.
	//
	// 	- readwrite: read and write permissions. Local disks are mapped to cloud desktops. You can read (copy) and modify local files.
	//
	// 	- off: no permissions. Local disks are not mapped to cloud desktops.
	//
	// example:
	//
	// off
	LocalDrive       *string `json:"LocalDrive,omitempty" xml:"LocalDrive,omitempty"`
	MaxReconnectTime *int32  `json:"MaxReconnectTime,omitempty" xml:"MaxReconnectTime,omitempty"`
	// The name of the policy.
	//
	// example:
	//
	// testPolicyGroupName
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The network redirection feature. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// Default value: off.
	//
	// example:
	//
	// on
	NetRedirect *string `json:"NetRedirect,omitempty" xml:"NetRedirect,omitempty"`
	// The ID of the policy.
	//
	// This parameter is required.
	//
	// example:
	//
	// pg-gx2x1dhsmthe9****
	PolicyGroupId *string `json:"PolicyGroupId,omitempty" xml:"PolicyGroupId,omitempty"`
	// Specifies whether to allow user preemption. Default value: off. You cannot change the value.
	//
	// example:
	//
	// off
	PreemptLogin *string `json:"PreemptLogin,omitempty" xml:"PreemptLogin,omitempty"`
	// The names of the users that are allowed to connect to the same cloud desktop at the same time. You can specify up to five usernames.
	//
	// > To improve user experience and ensure data security, multiple end users cannot connect to the same cloud desktop at the same time.
	PreemptLoginUser []*string `json:"PreemptLoginUser,omitempty" xml:"PreemptLoginUser,omitempty" type:"Repeated"`
	// Specifies whether to enable printer redirection. Valid values:
	//
	// 	- off: disables printer redirection.
	//
	// 	- on: enables printer redirection.
	//
	// example:
	//
	// off
	PrinterRedirection *string `json:"PrinterRedirection,omitempty" xml:"PrinterRedirection,omitempty"`
	// Specifies whether to enable the custom screen recording feature. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// Default value: off.
	//
	// example:
	//
	// OFF
	RecordContent *string `json:"RecordContent,omitempty" xml:"RecordContent,omitempty"`
	// The duration in which the custom screen recording is valid. Default value: 30. Unit: days.
	//
	// example:
	//
	// 30
	RecordContentExpires *int64 `json:"RecordContentExpires,omitempty" xml:"RecordContentExpires,omitempty"`
	// Specifies whether to enable screen recording. Valid values:
	//
	// 	- OFF: disabled.
	//
	// 	- ALLTIME: All operations that are performed by an end user on the cloud desktop are recorded. The recording immediately starts when the end user connects to the cloud desktop and ends after the end user disconnects from the cloud desktop.
	//
	// 	- PERIOD: The operations that are performed by an end user on the cloud desktop during a specific period of time are recorded. You must specify the start time and the end time of the recording.
	//
	// example:
	//
	// OFF
	Recording *string `json:"Recording,omitempty" xml:"Recording,omitempty"`
	// Specifies whether to record the sound that is generated on the cloud desktop during screen recording. Valid values:
	//
	// 	- on
	//
	// 	- off
	//
	// example:
	//
	// on
	RecordingAudio *string `json:"RecordingAudio,omitempty" xml:"RecordingAudio,omitempty"`
	// This parameter takes effect based on the Recording-related parameters. You can specify a time range for screen recording, and recording files are generated after the specified end time is reached.
	//
	// example:
	//
	// 15
	RecordingDuration *int32 `json:"RecordingDuration,omitempty" xml:"RecordingDuration,omitempty"`
	// The time when the screen recording ends. Specify the value in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.
	//
	// example:
	//
	// 08:59:00
	RecordingEndTime *string `json:"RecordingEndTime,omitempty" xml:"RecordingEndTime,omitempty"`
	// The period in which the screen recording audit is valid. Valid values: 15 to 180. Unit: days.
	//
	// example:
	//
	// 30
	RecordingExpires *int64 `json:"RecordingExpires,omitempty" xml:"RecordingExpires,omitempty"`
	// The frame rate of screen recording. Unit: fps. Valid values:
	//
	// 	- 2
	//
	// 	- 5
	//
	// 	- 10
	//
	// 	- 15
	//
	// example:
	//
	// 5
	RecordingFps *int64 `json:"RecordingFps,omitempty" xml:"RecordingFps,omitempty"`
	// The time when the screen recording starts. Specify the value in the HH:MM:SS format. The value is valid only when you set the Recording parameter to PERIOD.
	//
	// example:
	//
	// 08:00:00
	RecordingStartTime *string `json:"RecordingStartTime,omitempty" xml:"RecordingStartTime,omitempty"`
	// Specifies whether to enable the screen recording notification feature. Valid values: on and off. on and off (default).
	//
	// example:
	//
	// off
	RecordingUserNotify *string `json:"RecordingUserNotify,omitempty" xml:"RecordingUserNotify,omitempty"`
	// The content of the screen recording notification sent to the client. By default, you do not need to specify this parameter.
	//
	// example:
	//
	// Your desktop is being recorded.
	RecordingUserNotifyMessage *string `json:"RecordingUserNotifyMessage,omitempty" xml:"RecordingUserNotifyMessage,omitempty"`
	// The ID of the region where the cloud desktop resides.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The permissions on the keyboard and mouse to control the cloud desktop during remote assistance. Valid values:
	//
	// 	- fullControl: The keyboard and mouse can be fully controlled.
	//
	// 	- optionalControl: By default, this feature is disabled. You can apply for permissions to enable the feature.
	//
	// 	- disableControl: The keyboard and mouse cannot be controlled.
	//
	// example:
	//
	// fullControl
	RemoteCoordinate *string `json:"RemoteCoordinate,omitempty" xml:"RemoteCoordinate,omitempty"`
	// The security group rules that you want to delete.
	RevokeAccessPolicyRule []*ModifyPolicyGroupRequestRevokeAccessPolicyRule `json:"RevokeAccessPolicyRule,omitempty" xml:"RevokeAccessPolicyRule,omitempty" type:"Repeated"`
	// The security group rules that you want to delete.
	RevokeSecurityPolicyRule []*ModifyPolicyGroupRequestRevokeSecurityPolicyRule `json:"RevokeSecurityPolicyRule,omitempty" xml:"RevokeSecurityPolicyRule,omitempty" type:"Repeated"`
	// The effective scope of the policy. Valid values:
	//
	// 	- GLOBAL: takes effect globally.
	//
	// 	- IP: takes effect based on the IP address.
	//
	// example:
	//
	// GLOBAL
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// This parameter is required when the Scope parameter is set to IP.
	ScopeValue []*string `json:"ScopeValue,omitempty" xml:"ScopeValue,omitempty" type:"Repeated"`
	// Specifies whether to enable USB redirection. Valid values:
	//
	// 	- on: enables USB redirection.
	//
	// 	- off: disables USB redirection.
	//
	// example:
	//
	// off
	UsbRedirect *string `json:"UsbRedirect,omitempty" xml:"UsbRedirect,omitempty"`
	// The USB redirection rules.
	UsbSupplyRedirectRule []*ModifyPolicyGroupRequestUsbSupplyRedirectRule `json:"UsbSupplyRedirectRule,omitempty" xml:"UsbSupplyRedirectRule,omitempty" type:"Repeated"`
	// The multimedia redirection feature.
	//
	// example:
	//
	// on
	VideoRedirect *string `json:"VideoRedirect,omitempty" xml:"VideoRedirect,omitempty"`
	// Specify whether to enable the policy of image display quality. Valid values:
	//
	// 	- on: enables the policy of image display quality.
	//
	// 	- off: disables the policy of image display quality.
	//
	// Default value: off.
	//
	// example:
	//
	// low
	VisualQuality *string `json:"VisualQuality,omitempty" xml:"VisualQuality,omitempty"`
	// Specifies whether to enable watermarking. Valid values:
	//
	// 	- on: enables watermarking.
	//
	// 	- off: disables watermarking.
	//
	// example:
	//
	// off
	Watermark *string `json:"Watermark,omitempty" xml:"Watermark,omitempty"`
	// Specifies whether to enable the anti-screen photo feature for invisible watermarks. on and off (default).
	//
	// example:
	//
	// off
	WatermarkAntiCam *string `json:"WatermarkAntiCam,omitempty" xml:"WatermarkAntiCam,omitempty"`
	// The font color of the watermark. Valid values: 0 to 16777215.
	//
	// example:
	//
	// 0
	WatermarkColor *int32 `json:"WatermarkColor,omitempty" xml:"WatermarkColor,omitempty"`
	// The inclination angle of the watermark. Value values: -10 to -30.
	//
	// example:
	//
	// -10
	WatermarkDegree *float64 `json:"WatermarkDegree,omitempty" xml:"WatermarkDegree,omitempty"`
	// The font size of the watermark. Valid values: 10 to 50
	//
	// example:
	//
	// 10
	WatermarkFontSize *int32 `json:"WatermarkFontSize,omitempty" xml:"WatermarkFontSize,omitempty"`
	// The font style of the watermark. Valid values:
	//
	// 	- plain
	//
	// 	- bold
	//
	// example:
	//
	// plain
	WatermarkFontStyle *string `json:"WatermarkFontStyle,omitempty" xml:"WatermarkFontStyle,omitempty"`
	// The watermark enhancement feature. Valid values: low, medium, and high.
	//
	// example:
	//
	// medium
	WatermarkPower *string `json:"WatermarkPower,omitempty" xml:"WatermarkPower,omitempty"`
	// The number of watermark rows. This parameter is not in use.
	//
	// example:
	//
	// 3
	WatermarkRowAmount *int32 `json:"WatermarkRowAmount,omitempty" xml:"WatermarkRowAmount,omitempty"`
	// The security priority rule for invisible watermarks. Valid values: on and off.
	//
	// example:
	//
	// off
	WatermarkSecurity *string `json:"WatermarkSecurity,omitempty" xml:"WatermarkSecurity,omitempty"`
	// The transparency of the watermark. The valid values include:
	//
	// 	- LIGHT
	//
	// 	- MIDDLE
	//
	// 	- DARK
	//
	// example:
	//
	// LIGHT
	WatermarkTransparency *string `json:"WatermarkTransparency,omitempty" xml:"WatermarkTransparency,omitempty"`
	// The transparency of the watermark. A larger value indicates a less transparent watermark. Valid values: 10 to 100.
	//
	// example:
	//
	// 10
	WatermarkTransparencyValue *int32 `json:"WatermarkTransparencyValue,omitempty" xml:"WatermarkTransparencyValue,omitempty"`
	// The type of the watermark. You can specify multiple watermark types at a time. Separate watermark types with commas (,). Valid values:
	//
	// 	- EndUserId: the username
	//
	// 	- HostName: the last 15 characters of the cloud desktop ID
	//
	// example:
	//
	// EndUserId
	WatermarkType *string `json:"WatermarkType,omitempty" xml:"WatermarkType,omitempty"`
	WyAssistant   *string `json:"WyAssistant,omitempty" xml:"WyAssistant,omitempty"`
}

func (s ModifyPolicyGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequest) SetAdminAccess(v string) *ModifyPolicyGroupRequest {
	s.AdminAccess = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetAppContentProtection(v string) *ModifyPolicyGroupRequest {
	s.AppContentProtection = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetAuthorizeAccessPolicyRule(v []*ModifyPolicyGroupRequestAuthorizeAccessPolicyRule) *ModifyPolicyGroupRequest {
	s.AuthorizeAccessPolicyRule = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetAuthorizeSecurityPolicyRule(v []*ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) *ModifyPolicyGroupRequest {
	s.AuthorizeSecurityPolicyRule = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetCameraRedirect(v string) *ModifyPolicyGroupRequest {
	s.CameraRedirect = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetClientType(v []*ModifyPolicyGroupRequestClientType) *ModifyPolicyGroupRequest {
	s.ClientType = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetClipboard(v string) *ModifyPolicyGroupRequest {
	s.Clipboard = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetDeviceRedirects(v []*ModifyPolicyGroupRequestDeviceRedirects) *ModifyPolicyGroupRequest {
	s.DeviceRedirects = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetDeviceRules(v []*ModifyPolicyGroupRequestDeviceRules) *ModifyPolicyGroupRequest {
	s.DeviceRules = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetDomainList(v string) *ModifyPolicyGroupRequest {
	s.DomainList = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetDomainResolveRule(v []*ModifyPolicyGroupRequestDomainResolveRule) *ModifyPolicyGroupRequest {
	s.DomainResolveRule = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetDomainResolveRuleType(v string) *ModifyPolicyGroupRequest {
	s.DomainResolveRuleType = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetEndUserApplyAdminCoordinate(v string) *ModifyPolicyGroupRequest {
	s.EndUserApplyAdminCoordinate = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetEndUserGroupCoordinate(v string) *ModifyPolicyGroupRequest {
	s.EndUserGroupCoordinate = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetGpuAcceleration(v string) *ModifyPolicyGroupRequest {
	s.GpuAcceleration = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetHtml5Access(v string) *ModifyPolicyGroupRequest {
	s.Html5Access = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetHtml5FileTransfer(v string) *ModifyPolicyGroupRequest {
	s.Html5FileTransfer = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetInternetCommunicationProtocol(v string) *ModifyPolicyGroupRequest {
	s.InternetCommunicationProtocol = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetLocalDrive(v string) *ModifyPolicyGroupRequest {
	s.LocalDrive = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetMaxReconnectTime(v int32) *ModifyPolicyGroupRequest {
	s.MaxReconnectTime = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetName(v string) *ModifyPolicyGroupRequest {
	s.Name = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetNetRedirect(v string) *ModifyPolicyGroupRequest {
	s.NetRedirect = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetPolicyGroupId(v string) *ModifyPolicyGroupRequest {
	s.PolicyGroupId = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetPreemptLogin(v string) *ModifyPolicyGroupRequest {
	s.PreemptLogin = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetPreemptLoginUser(v []*string) *ModifyPolicyGroupRequest {
	s.PreemptLoginUser = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetPrinterRedirection(v string) *ModifyPolicyGroupRequest {
	s.PrinterRedirection = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordContent(v string) *ModifyPolicyGroupRequest {
	s.RecordContent = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordContentExpires(v int64) *ModifyPolicyGroupRequest {
	s.RecordContentExpires = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecording(v string) *ModifyPolicyGroupRequest {
	s.Recording = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingAudio(v string) *ModifyPolicyGroupRequest {
	s.RecordingAudio = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingDuration(v int32) *ModifyPolicyGroupRequest {
	s.RecordingDuration = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingEndTime(v string) *ModifyPolicyGroupRequest {
	s.RecordingEndTime = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingExpires(v int64) *ModifyPolicyGroupRequest {
	s.RecordingExpires = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingFps(v int64) *ModifyPolicyGroupRequest {
	s.RecordingFps = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingStartTime(v string) *ModifyPolicyGroupRequest {
	s.RecordingStartTime = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingUserNotify(v string) *ModifyPolicyGroupRequest {
	s.RecordingUserNotify = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRecordingUserNotifyMessage(v string) *ModifyPolicyGroupRequest {
	s.RecordingUserNotifyMessage = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRegionId(v string) *ModifyPolicyGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRemoteCoordinate(v string) *ModifyPolicyGroupRequest {
	s.RemoteCoordinate = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRevokeAccessPolicyRule(v []*ModifyPolicyGroupRequestRevokeAccessPolicyRule) *ModifyPolicyGroupRequest {
	s.RevokeAccessPolicyRule = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetRevokeSecurityPolicyRule(v []*ModifyPolicyGroupRequestRevokeSecurityPolicyRule) *ModifyPolicyGroupRequest {
	s.RevokeSecurityPolicyRule = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetScope(v string) *ModifyPolicyGroupRequest {
	s.Scope = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetScopeValue(v []*string) *ModifyPolicyGroupRequest {
	s.ScopeValue = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetUsbRedirect(v string) *ModifyPolicyGroupRequest {
	s.UsbRedirect = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetUsbSupplyRedirectRule(v []*ModifyPolicyGroupRequestUsbSupplyRedirectRule) *ModifyPolicyGroupRequest {
	s.UsbSupplyRedirectRule = v
	return s
}

func (s *ModifyPolicyGroupRequest) SetVideoRedirect(v string) *ModifyPolicyGroupRequest {
	s.VideoRedirect = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetVisualQuality(v string) *ModifyPolicyGroupRequest {
	s.VisualQuality = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermark(v string) *ModifyPolicyGroupRequest {
	s.Watermark = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkAntiCam(v string) *ModifyPolicyGroupRequest {
	s.WatermarkAntiCam = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkColor(v int32) *ModifyPolicyGroupRequest {
	s.WatermarkColor = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkDegree(v float64) *ModifyPolicyGroupRequest {
	s.WatermarkDegree = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkFontSize(v int32) *ModifyPolicyGroupRequest {
	s.WatermarkFontSize = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkFontStyle(v string) *ModifyPolicyGroupRequest {
	s.WatermarkFontStyle = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkPower(v string) *ModifyPolicyGroupRequest {
	s.WatermarkPower = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkRowAmount(v int32) *ModifyPolicyGroupRequest {
	s.WatermarkRowAmount = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkSecurity(v string) *ModifyPolicyGroupRequest {
	s.WatermarkSecurity = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkTransparency(v string) *ModifyPolicyGroupRequest {
	s.WatermarkTransparency = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkTransparencyValue(v int32) *ModifyPolicyGroupRequest {
	s.WatermarkTransparencyValue = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWatermarkType(v string) *ModifyPolicyGroupRequest {
	s.WatermarkType = &v
	return s
}

func (s *ModifyPolicyGroupRequest) SetWyAssistant(v string) *ModifyPolicyGroupRequest {
	s.WyAssistant = &v
	return s
}

type ModifyPolicyGroupRequestAuthorizeAccessPolicyRule struct {
	// The CIDR block that the client can access.
	//
	// This parameter is required.
	//
	// example:
	//
	// 47.100.XX.XX/16
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The description of the client IP address whitelist.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyPolicyGroupRequestAuthorizeAccessPolicyRule) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestAuthorizeAccessPolicyRule) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestAuthorizeAccessPolicyRule) SetCidrIp(v string) *ModifyPolicyGroupRequestAuthorizeAccessPolicyRule {
	s.CidrIp = &v
	return s
}

func (s *ModifyPolicyGroupRequestAuthorizeAccessPolicyRule) SetDescription(v string) *ModifyPolicyGroupRequestAuthorizeAccessPolicyRule {
	s.Description = &v
	return s
}

type ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule struct {
	// The object to which the security group rule applies. The value is an IPv4 CIDR block.
	//
	// example:
	//
	// 10.0.XX.XX/8
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The description of security group rule N.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The protocol type of security group rule N. Valid values:
	//
	// 	- tcp: TCP
	//
	// 	- udp: UDP
	//
	// 	- icmp: ICMP (IPv4)
	//
	// 	- gre: GRE
	//
	// 	- all: all protocols
	//
	// example:
	//
	// tcp
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The authorization policy of security group rule N. Valid values:
	//
	// 	- accept: specifies the Allow policy that allows all access requests.
	//
	// 	- drop: specifies the Deny policy that denies all access requests. If no messages of access denied are returned, the requests time out or failed.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The port range of security group rule N. The value of the port range is determined by the protocol type specified by the AuthorizeSecurityPolicyRule.N.IpProtocol parameter.
	//
	// 	- When the AuthorizeSecurityPolicyRule.N.IpProtocol parameter is set to tcp or udp, the port range is 1 to 65535. Separate the start port number and the end port number with a forward slash (/). Example: 1/200.
	//
	// 	- When AuthorizeSecurityPolicyRule.N.IpProtocol is set to icmp, set the value to -1/-1.
	//
	// 	- When AuthorizeSecurityPolicyRule.N.IpProtocol is set to gre, set the value to -1/-1.
	//
	// 	- When AuthorizeSecurityPolicyRule.N.IpProtocol is set to all, set the value to -1/-1.
	//
	// For more information about the common ports of typical applications, see [Common ports](https://help.aliyun.com/document_detail/40724.html).
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of security group rule N. A smaller value indicates a higher priority.
	//
	// Valid values: 1 to 60.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The direction of security group rule N. Valid values:
	//
	// 	- inflow: inbound
	//
	// 	- outflow: outbound
	//
	// example:
	//
	// inflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) SetCidrIp(v string) *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.CidrIp = &v
	return s
}

func (s *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) SetDescription(v string) *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Description = &v
	return s
}

func (s *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) SetIpProtocol(v string) *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.IpProtocol = &v
	return s
}

func (s *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) SetPolicy(v string) *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Policy = &v
	return s
}

func (s *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) SetPortRange(v string) *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.PortRange = &v
	return s
}

func (s *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) SetPriority(v string) *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Priority = &v
	return s
}

func (s *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule) SetType(v string) *ModifyPolicyGroupRequestAuthorizeSecurityPolicyRule {
	s.Type = &v
	return s
}

type ModifyPolicyGroupRequestClientType struct {
	// The type of client that you want to use to connect to the cloud desktop. Valid values:
	//
	// 	- windows: the Windows client
	//
	// 	- linux: C-Key Series Cloud Computer TC and A Series Cloud Computer TC
	//
	// 	- macos: the macOS client
	//
	// 	- ios: the iOS client
	//
	// 	- android: the Android client
	//
	// 	- html5: the web client
	//
	// > By default, if you do not configure the ClientType-related parameters, all types of clients are allowed to connect to the cloud desktop.
	//
	// example:
	//
	// windows
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The logon method. This parameter specifies whether a specific type of the client is allowed to connect to the cloud desktop. Valid values:
	//
	// 	- on: allowed.
	//
	// 	- off: disallowed.
	//
	// > By default, if you do not configure the ClientType-related parameters, all types of clients are allowed to log on to cloud desktops.
	//
	// example:
	//
	// ON
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyPolicyGroupRequestClientType) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestClientType) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestClientType) SetClientType(v string) *ModifyPolicyGroupRequestClientType {
	s.ClientType = &v
	return s
}

func (s *ModifyPolicyGroupRequestClientType) SetStatus(v string) *ModifyPolicyGroupRequestClientType {
	s.Status = &v
	return s
}

type ModifyPolicyGroupRequestDeviceRedirects struct {
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	RedirectType *string `json:"RedirectType,omitempty" xml:"RedirectType,omitempty"`
}

func (s ModifyPolicyGroupRequestDeviceRedirects) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestDeviceRedirects) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestDeviceRedirects) SetDeviceType(v string) *ModifyPolicyGroupRequestDeviceRedirects {
	s.DeviceType = &v
	return s
}

func (s *ModifyPolicyGroupRequestDeviceRedirects) SetRedirectType(v string) *ModifyPolicyGroupRequestDeviceRedirects {
	s.RedirectType = &v
	return s
}

type ModifyPolicyGroupRequestDeviceRules struct {
	DeviceName   *string `json:"DeviceName,omitempty" xml:"DeviceName,omitempty"`
	DevicePid    *string `json:"DevicePid,omitempty" xml:"DevicePid,omitempty"`
	DeviceType   *string `json:"DeviceType,omitempty" xml:"DeviceType,omitempty"`
	DeviceVid    *string `json:"DeviceVid,omitempty" xml:"DeviceVid,omitempty"`
	OptCommand   *string `json:"OptCommand,omitempty" xml:"OptCommand,omitempty"`
	RedirectType *string `json:"RedirectType,omitempty" xml:"RedirectType,omitempty"`
}

func (s ModifyPolicyGroupRequestDeviceRules) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestDeviceRules) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestDeviceRules) SetDeviceName(v string) *ModifyPolicyGroupRequestDeviceRules {
	s.DeviceName = &v
	return s
}

func (s *ModifyPolicyGroupRequestDeviceRules) SetDevicePid(v string) *ModifyPolicyGroupRequestDeviceRules {
	s.DevicePid = &v
	return s
}

func (s *ModifyPolicyGroupRequestDeviceRules) SetDeviceType(v string) *ModifyPolicyGroupRequestDeviceRules {
	s.DeviceType = &v
	return s
}

func (s *ModifyPolicyGroupRequestDeviceRules) SetDeviceVid(v string) *ModifyPolicyGroupRequestDeviceRules {
	s.DeviceVid = &v
	return s
}

func (s *ModifyPolicyGroupRequestDeviceRules) SetOptCommand(v string) *ModifyPolicyGroupRequestDeviceRules {
	s.OptCommand = &v
	return s
}

func (s *ModifyPolicyGroupRequestDeviceRules) SetRedirectType(v string) *ModifyPolicyGroupRequestDeviceRules {
	s.RedirectType = &v
	return s
}

type ModifyPolicyGroupRequestDomainResolveRule struct {
	// The description of the DNS rule.
	//
	// example:
	//
	// description policy
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The domain name.
	//
	// example:
	//
	// *.igetget.com
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// Specifies whether to allow the DNS rule.
	//
	// Valid values:
	//
	// 	- allow
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- block
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// block
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
}

func (s ModifyPolicyGroupRequestDomainResolveRule) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestDomainResolveRule) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestDomainResolveRule) SetDescription(v string) *ModifyPolicyGroupRequestDomainResolveRule {
	s.Description = &v
	return s
}

func (s *ModifyPolicyGroupRequestDomainResolveRule) SetDomain(v string) *ModifyPolicyGroupRequestDomainResolveRule {
	s.Domain = &v
	return s
}

func (s *ModifyPolicyGroupRequestDomainResolveRule) SetPolicy(v string) *ModifyPolicyGroupRequestDomainResolveRule {
	s.Policy = &v
	return s
}

type ModifyPolicyGroupRequestRevokeAccessPolicyRule struct {
	// The IPv4 CIDR block that can be accessed from the client.
	//
	// example:
	//
	// 47.100.XX.XX/16
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The description of the client IP address whitelist that you want to delete.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyPolicyGroupRequestRevokeAccessPolicyRule) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestRevokeAccessPolicyRule) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestRevokeAccessPolicyRule) SetCidrIp(v string) *ModifyPolicyGroupRequestRevokeAccessPolicyRule {
	s.CidrIp = &v
	return s
}

func (s *ModifyPolicyGroupRequestRevokeAccessPolicyRule) SetDescription(v string) *ModifyPolicyGroupRequestRevokeAccessPolicyRule {
	s.Description = &v
	return s
}

type ModifyPolicyGroupRequestRevokeSecurityPolicyRule struct {
	// The IPv4 CIDR block of the security group rule.
	//
	// example:
	//
	// 47.100.XX.XX/16
	CidrIp *string `json:"CidrIp,omitempty" xml:"CidrIp,omitempty"`
	// The description of the security group rule.
	//
	// example:
	//
	// test
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The protocol type of the security group rule. Valid values:
	//
	// 	- TCP
	//
	// 	- UDP
	//
	// 	- ICMP: ICMP (IPv4)
	//
	// 	- GRE
	//
	// 	- ALL
	//
	// example:
	//
	// tcp
	IpProtocol *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	// The authorization policy of the security group rule that you want to delete. Valid values:
	//
	// 	- accept: allows all access requests.
	//
	// 	- drop: disallows all access requests. If no denied messages are returned, the requests timed out or failed.
	//
	// Default value: accept.
	//
	// example:
	//
	// accept
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// The port range of the security group rule that you want to delete. The value of the port range is determined by the protocol type specified by the IpProtocol parameter.
	//
	// 	- If the IpProtocol parameter is set to TCP or UDP, the port range is 1 to 65535. The start port number and the end port number are separated by a forward slash (/). Example: 1/200.
	//
	// 	- If the IpProtocol parameter is set to ICMP, the port range is -1/-1.
	//
	// 	- If the IpProtocol parameter is set to GRE, the port range is -1/-1.
	//
	// 	- If the IpProtocol parameter is set to ALL, the port range is -1/-1.
	//
	// For more information about the common ports of typical applications, see [Common ports](https://www.alibabacloud.com/help/en/ecs/user-guide/common-ports?spm=a2c63.p38356.0.0.56b87f2c2SJTAw).
	//
	// example:
	//
	// 22/22
	PortRange *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	// The priority of the security group rule. A smaller value indicates a higher priority.
	//
	// Valid values: 1 to 60.
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// The direction of the security group rule that you want to delete. Valid values:
	//
	// 	- inflow: inbound
	//
	// 	- outflow: outbound
	//
	// example:
	//
	// outflow
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyPolicyGroupRequestRevokeSecurityPolicyRule) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestRevokeSecurityPolicyRule) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestRevokeSecurityPolicyRule) SetCidrIp(v string) *ModifyPolicyGroupRequestRevokeSecurityPolicyRule {
	s.CidrIp = &v
	return s
}

func (s *ModifyPolicyGroupRequestRevokeSecurityPolicyRule) SetDescription(v string) *ModifyPolicyGroupRequestRevokeSecurityPolicyRule {
	s.Description = &v
	return s
}

func (s *ModifyPolicyGroupRequestRevokeSecurityPolicyRule) SetIpProtocol(v string) *ModifyPolicyGroupRequestRevokeSecurityPolicyRule {
	s.IpProtocol = &v
	return s
}

func (s *ModifyPolicyGroupRequestRevokeSecurityPolicyRule) SetPolicy(v string) *ModifyPolicyGroupRequestRevokeSecurityPolicyRule {
	s.Policy = &v
	return s
}

func (s *ModifyPolicyGroupRequestRevokeSecurityPolicyRule) SetPortRange(v string) *ModifyPolicyGroupRequestRevokeSecurityPolicyRule {
	s.PortRange = &v
	return s
}

func (s *ModifyPolicyGroupRequestRevokeSecurityPolicyRule) SetPriority(v string) *ModifyPolicyGroupRequestRevokeSecurityPolicyRule {
	s.Priority = &v
	return s
}

func (s *ModifyPolicyGroupRequestRevokeSecurityPolicyRule) SetType(v string) *ModifyPolicyGroupRequestRevokeSecurityPolicyRule {
	s.Type = &v
	return s
}

type ModifyPolicyGroupRequestUsbSupplyRedirectRule struct {
	// The description of the rule.
	//
	// example:
	//
	// Test rule
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The class of the device. This parameter is required when you set the usbRuleType parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes?spm=a2c63.p38356.0.0.56b84b03GUn4kJ).
	//
	// example:
	//
	// 0Eh
	DeviceClass *string `json:"DeviceClass,omitempty" xml:"DeviceClass,omitempty"`
	// The subclass of the device. This parameter is required when you set the usbRuleType parameter to 1. For more information, see [Defined Class Codes](https://www.usb.org/defined-class-codes?spm=a2c63.p38356.0.0.56b84b03GUn4kJ).
	//
	// example:
	//
	// xxh
	DeviceSubclass *string `json:"DeviceSubclass,omitempty" xml:"DeviceSubclass,omitempty"`
	// The ID of the service.
	//
	// example:
	//
	// 08**
	ProductId *string `json:"ProductId,omitempty" xml:"ProductId,omitempty"`
	// Specifies whether to allow USB redirection. Valid values:
	//
	// 	- 1: allowed.
	//
	// 	- 2: disallowed.
	//
	// example:
	//
	// 1
	UsbRedirectType *int64 `json:"UsbRedirectType,omitempty" xml:"UsbRedirectType,omitempty"`
	// The type of the USB redirection rule. Valid values:
	//
	// 	- 1: device class.
	//
	// 	- 2: device vendor.
	//
	// example:
	//
	// 1
	UsbRuleType *int64 `json:"UsbRuleType,omitempty" xml:"UsbRuleType,omitempty"`
	// The ID of the vendor. For more information, see[ Valid USB Vendor IDs (VIDs)](https://www.usb.org/sites/default/files/vendor_ids032322.pdf_1.pdf?spm=a2c63.p38356.0.0.56b84b03GUn4kJ&file=vendor_ids032322.pdf_1.pdf).
	//
	// example:
	//
	// 04**
	VendorId *string `json:"VendorId,omitempty" xml:"VendorId,omitempty"`
}

func (s ModifyPolicyGroupRequestUsbSupplyRedirectRule) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupRequestUsbSupplyRedirectRule) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupRequestUsbSupplyRedirectRule) SetDescription(v string) *ModifyPolicyGroupRequestUsbSupplyRedirectRule {
	s.Description = &v
	return s
}

func (s *ModifyPolicyGroupRequestUsbSupplyRedirectRule) SetDeviceClass(v string) *ModifyPolicyGroupRequestUsbSupplyRedirectRule {
	s.DeviceClass = &v
	return s
}

func (s *ModifyPolicyGroupRequestUsbSupplyRedirectRule) SetDeviceSubclass(v string) *ModifyPolicyGroupRequestUsbSupplyRedirectRule {
	s.DeviceSubclass = &v
	return s
}

func (s *ModifyPolicyGroupRequestUsbSupplyRedirectRule) SetProductId(v string) *ModifyPolicyGroupRequestUsbSupplyRedirectRule {
	s.ProductId = &v
	return s
}

func (s *ModifyPolicyGroupRequestUsbSupplyRedirectRule) SetUsbRedirectType(v int64) *ModifyPolicyGroupRequestUsbSupplyRedirectRule {
	s.UsbRedirectType = &v
	return s
}

func (s *ModifyPolicyGroupRequestUsbSupplyRedirectRule) SetUsbRuleType(v int64) *ModifyPolicyGroupRequestUsbSupplyRedirectRule {
	s.UsbRuleType = &v
	return s
}

func (s *ModifyPolicyGroupRequestUsbSupplyRedirectRule) SetVendorId(v string) *ModifyPolicyGroupRequestUsbSupplyRedirectRule {
	s.VendorId = &v
	return s
}

type ModifyPolicyGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyPolicyGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupResponseBody) SetRequestId(v string) *ModifyPolicyGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyPolicyGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyPolicyGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyPolicyGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyPolicyGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyPolicyGroupResponse) SetHeaders(v map[string]*string) *ModifyPolicyGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyPolicyGroupResponse) SetStatusCode(v int32) *ModifyPolicyGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyPolicyGroupResponse) SetBody(v *ModifyPolicyGroupResponseBody) *ModifyPolicyGroupResponse {
	s.Body = v
	return s
}

type ModifyUserEntitlementRequest struct {
	// The IDs of the cloud computers to which you want to add end users.
	AuthorizeDesktopId []*string `json:"AuthorizeDesktopId,omitempty" xml:"AuthorizeDesktopId,omitempty" type:"Repeated"`
	// The ID of the users.
	EndUserId []*string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The IDs of the cloud computers whose end users you want to remove.
	RevokeDesktopId []*string `json:"RevokeDesktopId,omitempty" xml:"RevokeDesktopId,omitempty" type:"Repeated"`
}

func (s ModifyUserEntitlementRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserEntitlementRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserEntitlementRequest) SetAuthorizeDesktopId(v []*string) *ModifyUserEntitlementRequest {
	s.AuthorizeDesktopId = v
	return s
}

func (s *ModifyUserEntitlementRequest) SetEndUserId(v []*string) *ModifyUserEntitlementRequest {
	s.EndUserId = v
	return s
}

func (s *ModifyUserEntitlementRequest) SetRegionId(v string) *ModifyUserEntitlementRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyUserEntitlementRequest) SetRevokeDesktopId(v []*string) *ModifyUserEntitlementRequest {
	s.RevokeDesktopId = v
	return s
}

type ModifyUserEntitlementResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserEntitlementResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserEntitlementResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserEntitlementResponseBody) SetRequestId(v string) *ModifyUserEntitlementResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserEntitlementResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyUserEntitlementResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyUserEntitlementResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserEntitlementResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserEntitlementResponse) SetHeaders(v map[string]*string) *ModifyUserEntitlementResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserEntitlementResponse) SetStatusCode(v int32) *ModifyUserEntitlementResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserEntitlementResponse) SetBody(v *ModifyUserEntitlementResponseBody) *ModifyUserEntitlementResponse {
	s.Body = v
	return s
}

type ModifyUserToDesktopGroupRequest struct {
	// The ID of the cloud computer pool whose end users you want to change.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The IDs of the end users that you want to add. You can configure 1 to 500 IDs.
	//
	// This parameter is required.
	NewEndUserIds []*string `json:"NewEndUserIds,omitempty" xml:"NewEndUserIds,omitempty" type:"Repeated"`
	// The IDs of the end users that you want to remove. You can configure 1 to 500 IDs.
	//
	// This parameter is required.
	OldEndUserIds []*string `json:"OldEndUserIds,omitempty" xml:"OldEndUserIds,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyUserToDesktopGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserToDesktopGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyUserToDesktopGroupRequest) SetDesktopGroupId(v string) *ModifyUserToDesktopGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *ModifyUserToDesktopGroupRequest) SetNewEndUserIds(v []*string) *ModifyUserToDesktopGroupRequest {
	s.NewEndUserIds = v
	return s
}

func (s *ModifyUserToDesktopGroupRequest) SetOldEndUserIds(v []*string) *ModifyUserToDesktopGroupRequest {
	s.OldEndUserIds = v
	return s
}

func (s *ModifyUserToDesktopGroupRequest) SetRegionId(v string) *ModifyUserToDesktopGroupRequest {
	s.RegionId = &v
	return s
}

type ModifyUserToDesktopGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyUserToDesktopGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserToDesktopGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyUserToDesktopGroupResponseBody) SetRequestId(v string) *ModifyUserToDesktopGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyUserToDesktopGroupResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyUserToDesktopGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyUserToDesktopGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyUserToDesktopGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyUserToDesktopGroupResponse) SetHeaders(v map[string]*string) *ModifyUserToDesktopGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyUserToDesktopGroupResponse) SetStatusCode(v int32) *ModifyUserToDesktopGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyUserToDesktopGroupResponse) SetBody(v *ModifyUserToDesktopGroupResponseBody) *ModifyUserToDesktopGroupResponse {
	s.Body = v
	return s
}

type MoveCdsFileRequest struct {
	// The ID of the cloud disk.
	//
	// example:
	//
	// cn-hangzhou+cds-346063****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The processing mode of files that have the same name.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     refuse
	//
	//     <!-- -->
	//
	//     : If you want to create a file that uses the same name as an existing file in the cloud, the system denies your request and returns the details of the existing file.
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     auto_rename
	//
	//     <!-- -->
	//
	//     : If you want to create a file that uses the same name as an existing file in the cloud, the system renames the file that you want to create by appending the current time point.
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     ignore
	//
	//     <!-- -->
	//
	//     : The system allows you to create a file that uses the same name as an existing file in the cloud.
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     over_write
	//
	//     <!-- -->
	//
	//     : After you create a file that uses the same name as an existing file in the cloud, the new file overwrites the existing file.
	//
	//     <!-- -->
	//
	// example:
	//
	// ignore
	ConflictPolicy *string `json:"ConflictPolicy,omitempty" xml:"ConflictPolicy,omitempty"`
	// The user ID that you want to use to access the cloud disk.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the file.
	//
	// example:
	//
	// 63f3257b68b018170b194d87b875512d108f****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The group ID.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The ID of the parent folder that you want to move. If you want to remove the root folder, set the value to root.
	//
	// example:
	//
	// 6409848a6da91d6240604e7ba7337d85ba8a1****
	ParentFolderId *string `json:"ParentFolderId,omitempty" xml:"ParentFolderId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s MoveCdsFileRequest) String() string {
	return tea.Prettify(s)
}

func (s MoveCdsFileRequest) GoString() string {
	return s.String()
}

func (s *MoveCdsFileRequest) SetCdsId(v string) *MoveCdsFileRequest {
	s.CdsId = &v
	return s
}

func (s *MoveCdsFileRequest) SetConflictPolicy(v string) *MoveCdsFileRequest {
	s.ConflictPolicy = &v
	return s
}

func (s *MoveCdsFileRequest) SetEndUserId(v string) *MoveCdsFileRequest {
	s.EndUserId = &v
	return s
}

func (s *MoveCdsFileRequest) SetFileId(v string) *MoveCdsFileRequest {
	s.FileId = &v
	return s
}

func (s *MoveCdsFileRequest) SetGroupId(v string) *MoveCdsFileRequest {
	s.GroupId = &v
	return s
}

func (s *MoveCdsFileRequest) SetParentFolderId(v string) *MoveCdsFileRequest {
	s.ParentFolderId = &v
	return s
}

func (s *MoveCdsFileRequest) SetRegionId(v string) *MoveCdsFileRequest {
	s.RegionId = &v
	return s
}

type MoveCdsFileResponseBody struct {
	// The result of the modification. A value of success indicates that the modification is successful. If the modification failed, an error message is returned.
	//
	// example:
	//
	// success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message that is returned. This parameter is not returned if the value of Code is success.
	//
	// example:
	//
	// success
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The response object when you move a file.
	MoveCdsFileModel *MoveCdsFileResponseBodyMoveCdsFileModel `json:"MoveCdsFileModel,omitempty" xml:"MoveCdsFileModel,omitempty" type:"Struct"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request is successful.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s MoveCdsFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s MoveCdsFileResponseBody) GoString() string {
	return s.String()
}

func (s *MoveCdsFileResponseBody) SetCode(v string) *MoveCdsFileResponseBody {
	s.Code = &v
	return s
}

func (s *MoveCdsFileResponseBody) SetMessage(v string) *MoveCdsFileResponseBody {
	s.Message = &v
	return s
}

func (s *MoveCdsFileResponseBody) SetMoveCdsFileModel(v *MoveCdsFileResponseBodyMoveCdsFileModel) *MoveCdsFileResponseBody {
	s.MoveCdsFileModel = v
	return s
}

func (s *MoveCdsFileResponseBody) SetRequestId(v string) *MoveCdsFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *MoveCdsFileResponseBody) SetSuccess(v bool) *MoveCdsFileResponseBody {
	s.Success = &v
	return s
}

type MoveCdsFileResponseBodyMoveCdsFileModel struct {
	// The ID of the asynchronous task. This parameter is not returned if you copy files. This parameter is returned if you copy folders in the backend in an asynchronous manner. You can call the GetAsyncTask operation to obtain the ID and details of an asynchronous task.
	//
	// example:
	//
	// fe307518-825a-4c8b-a69c-958f0e8a****
	AsyncTaskId *string `json:"AsyncTaskId,omitempty" xml:"AsyncTaskId,omitempty"`
	// Indicates whether the file exists.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	Exist *bool `json:"Exist,omitempty" xml:"Exist,omitempty"`
	// The ID of the file.
	//
	// example:
	//
	// 63636837e47e5a24a8a940218bef395c210e****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s MoveCdsFileResponseBodyMoveCdsFileModel) String() string {
	return tea.Prettify(s)
}

func (s MoveCdsFileResponseBodyMoveCdsFileModel) GoString() string {
	return s.String()
}

func (s *MoveCdsFileResponseBodyMoveCdsFileModel) SetAsyncTaskId(v string) *MoveCdsFileResponseBodyMoveCdsFileModel {
	s.AsyncTaskId = &v
	return s
}

func (s *MoveCdsFileResponseBodyMoveCdsFileModel) SetExist(v bool) *MoveCdsFileResponseBodyMoveCdsFileModel {
	s.Exist = &v
	return s
}

func (s *MoveCdsFileResponseBodyMoveCdsFileModel) SetFileId(v string) *MoveCdsFileResponseBodyMoveCdsFileModel {
	s.FileId = &v
	return s
}

type MoveCdsFileResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *MoveCdsFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s MoveCdsFileResponse) String() string {
	return tea.Prettify(s)
}

func (s MoveCdsFileResponse) GoString() string {
	return s.String()
}

func (s *MoveCdsFileResponse) SetHeaders(v map[string]*string) *MoveCdsFileResponse {
	s.Headers = v
	return s
}

func (s *MoveCdsFileResponse) SetStatusCode(v int32) *MoveCdsFileResponse {
	s.StatusCode = &v
	return s
}

func (s *MoveCdsFileResponse) SetBody(v *MoveCdsFileResponseBody) *MoveCdsFileResponse {
	s.Body = v
	return s
}

type RebootDesktopsRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 100 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RebootDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s RebootDesktopsRequest) GoString() string {
	return s.String()
}

func (s *RebootDesktopsRequest) SetDesktopId(v []*string) *RebootDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *RebootDesktopsRequest) SetRegionId(v string) *RebootDesktopsRequest {
	s.RegionId = &v
	return s
}

type RebootDesktopsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebootDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebootDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *RebootDesktopsResponseBody) SetRequestId(v string) *RebootDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type RebootDesktopsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebootDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebootDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s RebootDesktopsResponse) GoString() string {
	return s.String()
}

func (s *RebootDesktopsResponse) SetHeaders(v map[string]*string) *RebootDesktopsResponse {
	s.Headers = v
	return s
}

func (s *RebootDesktopsResponse) SetStatusCode(v int32) *RebootDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *RebootDesktopsResponse) SetBody(v *RebootDesktopsResponseBody) *RebootDesktopsResponse {
	s.Body = v
	return s
}

type RebuildDesktopsRequest struct {
	// The cloud computer IDs. You can specify the IDs of 1 to 20 cloud computers.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the new image.
	//
	// example:
	//
	// m-84mztzatmlnys****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The OS language. Only system images are supported, and Linux cloud computers support only English.
	//
	// Valid values:
	//
	// 	- en-US: English
	//
	// 	- zh-HK: Traditional Chinese (Hong Kong, China)
	//
	// 	- zh-CN: Simplified Chinese
	//
	// 	- ja-JP: Japanese
	//
	// example:
	//
	// en-US
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// The operation type on the data disk.
	//
	// >  This parameter is empty by default regardless of whether data disks are attached to the cloud computer.
	//
	// 	- No data disks are attached to the cloud computer:\\
	//
	//     No operation is performed on the data disks of the cloud computer regardless of the value of this parameter.
	//
	// 	- Data disks are attached to the cloud computer:
	//
	//     1.  The OS of the cloud computer is the same as the OS of the destination image:
	//
	//         	- If you set the OperateType parameter to `replace`, the data in the data disks of the cloud computer is replaced.
	//
	//         	- If you leave the OperateType parameter empty, the data in the data disks of the cloud computer is retained.
	//
	//     2.  The OS of the cloud computer is different from the OS of the destination image:
	//
	//         	- If you set the OperateType parameter to `replace`, the data in the data disks of the cloud computer is replaced.
	//
	//         	- If you leave the OperateType parameter empty, the data in the data disks of the cloud computer is cleared.
	//
	// example:
	//
	// replace
	OperateType *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	// The region ID. You can call the [DescribeRegions](~~DescribeRegions~~) operation to query the regions supported by Elastic Desktop Service (EDS).
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RebuildDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s RebuildDesktopsRequest) GoString() string {
	return s.String()
}

func (s *RebuildDesktopsRequest) SetDesktopId(v []*string) *RebuildDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *RebuildDesktopsRequest) SetImageId(v string) *RebuildDesktopsRequest {
	s.ImageId = &v
	return s
}

func (s *RebuildDesktopsRequest) SetLanguage(v string) *RebuildDesktopsRequest {
	s.Language = &v
	return s
}

func (s *RebuildDesktopsRequest) SetOperateType(v string) *RebuildDesktopsRequest {
	s.OperateType = &v
	return s
}

func (s *RebuildDesktopsRequest) SetRegionId(v string) *RebuildDesktopsRequest {
	s.RegionId = &v
	return s
}

type RebuildDesktopsResponseBody struct {
	// The recreation results.
	RebuildResults []*RebuildDesktopsResponseBodyRebuildResults `json:"RebuildResults,omitempty" xml:"RebuildResults,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RebuildDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RebuildDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *RebuildDesktopsResponseBody) SetRebuildResults(v []*RebuildDesktopsResponseBodyRebuildResults) *RebuildDesktopsResponseBody {
	s.RebuildResults = v
	return s
}

func (s *RebuildDesktopsResponseBody) SetRequestId(v string) *RebuildDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type RebuildDesktopsResponseBodyRebuildResults struct {
	// The recreation result code. If the request was successful, `success` is returned. If the request failed, an error message is returned.
	//
	// example:
	//
	// IncorrectDesktopStatus
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The IDs of the cloud computers.
	//
	// example:
	//
	// ecd-gx2x1dhsmucyy****
	DesktopId *string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty"`
	// The error message. This parameter is invalid if the value of `Code` is `success`.
	//
	// example:
	//
	// The current status of the desktop does not support this operation.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s RebuildDesktopsResponseBodyRebuildResults) String() string {
	return tea.Prettify(s)
}

func (s RebuildDesktopsResponseBodyRebuildResults) GoString() string {
	return s.String()
}

func (s *RebuildDesktopsResponseBodyRebuildResults) SetCode(v string) *RebuildDesktopsResponseBodyRebuildResults {
	s.Code = &v
	return s
}

func (s *RebuildDesktopsResponseBodyRebuildResults) SetDesktopId(v string) *RebuildDesktopsResponseBodyRebuildResults {
	s.DesktopId = &v
	return s
}

func (s *RebuildDesktopsResponseBodyRebuildResults) SetMessage(v string) *RebuildDesktopsResponseBodyRebuildResults {
	s.Message = &v
	return s
}

type RebuildDesktopsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RebuildDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RebuildDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s RebuildDesktopsResponse) GoString() string {
	return s.String()
}

func (s *RebuildDesktopsResponse) SetHeaders(v map[string]*string) *RebuildDesktopsResponse {
	s.Headers = v
	return s
}

func (s *RebuildDesktopsResponse) SetStatusCode(v int32) *RebuildDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *RebuildDesktopsResponse) SetBody(v *RebuildDesktopsResponseBody) *RebuildDesktopsResponse {
	s.Body = v
	return s
}

type RemoveFilePermissionRequest struct {
	// The ID of the cloud disk in Cloud Drive Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-066224****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The user ID.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The file ID. The ID is a unique identifier for the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6333e553a133ce21e6f747cf948bb9ef95d7****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The group ID.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The users that you want to authorize.
	//
	// This parameter is required.
	MemberList []*RemoveFilePermissionRequestMemberList `json:"MemberList,omitempty" xml:"MemberList,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RemoveFilePermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveFilePermissionRequest) GoString() string {
	return s.String()
}

func (s *RemoveFilePermissionRequest) SetCdsId(v string) *RemoveFilePermissionRequest {
	s.CdsId = &v
	return s
}

func (s *RemoveFilePermissionRequest) SetEndUserId(v string) *RemoveFilePermissionRequest {
	s.EndUserId = &v
	return s
}

func (s *RemoveFilePermissionRequest) SetFileId(v string) *RemoveFilePermissionRequest {
	s.FileId = &v
	return s
}

func (s *RemoveFilePermissionRequest) SetGroupId(v string) *RemoveFilePermissionRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveFilePermissionRequest) SetMemberList(v []*RemoveFilePermissionRequestMemberList) *RemoveFilePermissionRequest {
	s.MemberList = v
	return s
}

func (s *RemoveFilePermissionRequest) SetRegionId(v string) *RemoveFilePermissionRequest {
	s.RegionId = &v
	return s
}

type RemoveFilePermissionRequestMemberList struct {
	// The permission information.
	//
	// This parameter is required.
	CdsIdentity *RemoveFilePermissionRequestMemberListCdsIdentity `json:"CdsIdentity,omitempty" xml:"CdsIdentity,omitempty" type:"Struct"`
	// The role ID. You can configure permissions on roles or actions. This parameter is used to specify the permissions on roles, which conflicts with the ActionList parameter. When you configure both the parameters, this parameter shall prevail.
	//
	// Valid values:
	//
	// 	- SystemFileEditorWithoutShareLink
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to edit files but cannot share files
	//
	//     <!-- -->
	//
	// 	- SystemFileUploaderAndDownloaderWithShareLink
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to upload, download, and share files
	//
	//     <!-- -->
	//
	// 	- SystemFileDownloader
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to download files
	//
	//     <!-- -->
	//
	// 	- SystemFileEditorWithoutDelete
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to edit files but cannot delete files
	//
	//     <!-- -->
	//
	// 	- SystemFileOwner
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to collaborate with others
	//
	//     <!-- -->
	//
	// 	- SystemFileDownloaderWithShareLink
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to download and share files
	//
	//     <!-- -->
	//
	// 	- SystemFileUploaderAndViewer
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to preview or upload files
	//
	//     <!-- -->
	//
	// 	- SystemFileViewer
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to preview files
	//
	//     <!-- -->
	//
	// 	- SystemFileEditor
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to edit files
	//
	//     <!-- -->
	//
	// 	- SystemFileUploaderWithShareLink
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to upload or share files
	//
	//     <!-- -->
	//
	// 	- SystemFileUploader
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permission to upload files
	//
	//     <!-- -->
	//
	// 	- SystemFileUploaderAndDownloader
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to upload or download files
	//
	//     <!-- -->
	//
	// 	- SystemFileMetaViewer
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     the role that has the permissions to view files
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// SystemFileUploaderAndDownloader
	RoleId *string `json:"RoleId,omitempty" xml:"RoleId,omitempty"`
}

func (s RemoveFilePermissionRequestMemberList) String() string {
	return tea.Prettify(s)
}

func (s RemoveFilePermissionRequestMemberList) GoString() string {
	return s.String()
}

func (s *RemoveFilePermissionRequestMemberList) SetCdsIdentity(v *RemoveFilePermissionRequestMemberListCdsIdentity) *RemoveFilePermissionRequestMemberList {
	s.CdsIdentity = v
	return s
}

func (s *RemoveFilePermissionRequestMemberList) SetRoleId(v string) *RemoveFilePermissionRequestMemberList {
	s.RoleId = &v
	return s
}

type RemoveFilePermissionRequestMemberListCdsIdentity struct {
	// The user ID or group ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// 249dsfseee643h33g3dv****
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// The object type.
	//
	// Valid values:
	//
	// 	- IT_Group
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     group
	//
	//     <!-- -->
	//
	// 	- IT_User
	//
	//     <!-- -->
	//
	//     :
	//
	//     <!-- -->
	//
	//     user
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// IT_User
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RemoveFilePermissionRequestMemberListCdsIdentity) String() string {
	return tea.Prettify(s)
}

func (s RemoveFilePermissionRequestMemberListCdsIdentity) GoString() string {
	return s.String()
}

func (s *RemoveFilePermissionRequestMemberListCdsIdentity) SetId(v string) *RemoveFilePermissionRequestMemberListCdsIdentity {
	s.Id = &v
	return s
}

func (s *RemoveFilePermissionRequestMemberListCdsIdentity) SetType(v string) *RemoveFilePermissionRequestMemberListCdsIdentity {
	s.Type = &v
	return s
}

type RemoveFilePermissionShrinkRequest struct {
	// The ID of the cloud disk in Cloud Drive Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+cds-066224****
	CdsId *string `json:"CdsId,omitempty" xml:"CdsId,omitempty"`
	// The user ID.
	//
	// example:
	//
	// user01
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The file ID. The ID is a unique identifier for the file.
	//
	// This parameter is required.
	//
	// example:
	//
	// 6333e553a133ce21e6f747cf948bb9ef95d7****
	FileId *string `json:"FileId,omitempty" xml:"FileId,omitempty"`
	// The group ID.
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// The users that you want to authorize.
	//
	// This parameter is required.
	MemberListShrink *string `json:"MemberList,omitempty" xml:"MemberList,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RemoveFilePermissionShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveFilePermissionShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveFilePermissionShrinkRequest) SetCdsId(v string) *RemoveFilePermissionShrinkRequest {
	s.CdsId = &v
	return s
}

func (s *RemoveFilePermissionShrinkRequest) SetEndUserId(v string) *RemoveFilePermissionShrinkRequest {
	s.EndUserId = &v
	return s
}

func (s *RemoveFilePermissionShrinkRequest) SetFileId(v string) *RemoveFilePermissionShrinkRequest {
	s.FileId = &v
	return s
}

func (s *RemoveFilePermissionShrinkRequest) SetGroupId(v string) *RemoveFilePermissionShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *RemoveFilePermissionShrinkRequest) SetMemberListShrink(v string) *RemoveFilePermissionShrinkRequest {
	s.MemberListShrink = &v
	return s
}

func (s *RemoveFilePermissionShrinkRequest) SetRegionId(v string) *RemoveFilePermissionShrinkRequest {
	s.RegionId = &v
	return s
}

type RemoveFilePermissionResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 4636DBE0-BBB4-4076-8B8E-94D21A9A3CFB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveFilePermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveFilePermissionResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveFilePermissionResponseBody) SetRequestId(v string) *RemoveFilePermissionResponseBody {
	s.RequestId = &v
	return s
}

type RemoveFilePermissionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveFilePermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveFilePermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveFilePermissionResponse) GoString() string {
	return s.String()
}

func (s *RemoveFilePermissionResponse) SetHeaders(v map[string]*string) *RemoveFilePermissionResponse {
	s.Headers = v
	return s
}

func (s *RemoveFilePermissionResponse) SetStatusCode(v int32) *RemoveFilePermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveFilePermissionResponse) SetBody(v *RemoveFilePermissionResponseBody) *RemoveFilePermissionResponse {
	s.Body = v
	return s
}

type RemoveUserFromDesktopGroupRequest struct {
	// The ID of the cloud computer pool for which you want to remove the authorized users.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The IDs of cloud computer pools.
	DesktopGroupIds []*string `json:"DesktopGroupIds,omitempty" xml:"DesktopGroupIds,omitempty" type:"Repeated"`
	// The IDs of the authorized users that you want to remove.
	//
	// This parameter is required.
	EndUserIds []*string `json:"EndUserIds,omitempty" xml:"EndUserIds,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RemoveUserFromDesktopGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveUserFromDesktopGroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveUserFromDesktopGroupRequest) SetDesktopGroupId(v string) *RemoveUserFromDesktopGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *RemoveUserFromDesktopGroupRequest) SetDesktopGroupIds(v []*string) *RemoveUserFromDesktopGroupRequest {
	s.DesktopGroupIds = v
	return s
}

func (s *RemoveUserFromDesktopGroupRequest) SetEndUserIds(v []*string) *RemoveUserFromDesktopGroupRequest {
	s.EndUserIds = v
	return s
}

func (s *RemoveUserFromDesktopGroupRequest) SetRegionId(v string) *RemoveUserFromDesktopGroupRequest {
	s.RegionId = &v
	return s
}

type RemoveUserFromDesktopGroupResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveUserFromDesktopGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveUserFromDesktopGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveUserFromDesktopGroupResponseBody) SetRequestId(v string) *RemoveUserFromDesktopGroupResponseBody {
	s.RequestId = &v
	return s
}

type RemoveUserFromDesktopGroupResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveUserFromDesktopGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveUserFromDesktopGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveUserFromDesktopGroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveUserFromDesktopGroupResponse) SetHeaders(v map[string]*string) *RemoveUserFromDesktopGroupResponse {
	s.Headers = v
	return s
}

func (s *RemoveUserFromDesktopGroupResponse) SetStatusCode(v int32) *RemoveUserFromDesktopGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveUserFromDesktopGroupResponse) SetBody(v *RemoveUserFromDesktopGroupResponseBody) *RemoveUserFromDesktopGroupResponse {
	s.Body = v
	return s
}

type RemoveUserFromDesktopOversoldUserGroupRequest struct {
	EndUserId       *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	UserDesktopId   *string `json:"UserDesktopId,omitempty" xml:"UserDesktopId,omitempty"`
	UserGroupId     *string `json:"UserGroupId,omitempty" xml:"UserGroupId,omitempty"`
}

func (s RemoveUserFromDesktopOversoldUserGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveUserFromDesktopOversoldUserGroupRequest) GoString() string {
	return s.String()
}

func (s *RemoveUserFromDesktopOversoldUserGroupRequest) SetEndUserId(v string) *RemoveUserFromDesktopOversoldUserGroupRequest {
	s.EndUserId = &v
	return s
}

func (s *RemoveUserFromDesktopOversoldUserGroupRequest) SetOversoldGroupId(v string) *RemoveUserFromDesktopOversoldUserGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *RemoveUserFromDesktopOversoldUserGroupRequest) SetUserDesktopId(v string) *RemoveUserFromDesktopOversoldUserGroupRequest {
	s.UserDesktopId = &v
	return s
}

func (s *RemoveUserFromDesktopOversoldUserGroupRequest) SetUserGroupId(v string) *RemoveUserFromDesktopOversoldUserGroupRequest {
	s.UserGroupId = &v
	return s
}

type RemoveUserFromDesktopOversoldUserGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveUserFromDesktopOversoldUserGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveUserFromDesktopOversoldUserGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveUserFromDesktopOversoldUserGroupResponseBody) SetRequestId(v string) *RemoveUserFromDesktopOversoldUserGroupResponseBody {
	s.RequestId = &v
	return s
}

type RemoveUserFromDesktopOversoldUserGroupResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveUserFromDesktopOversoldUserGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveUserFromDesktopOversoldUserGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveUserFromDesktopOversoldUserGroupResponse) GoString() string {
	return s.String()
}

func (s *RemoveUserFromDesktopOversoldUserGroupResponse) SetHeaders(v map[string]*string) *RemoveUserFromDesktopOversoldUserGroupResponse {
	s.Headers = v
	return s
}

func (s *RemoveUserFromDesktopOversoldUserGroupResponse) SetStatusCode(v int32) *RemoveUserFromDesktopOversoldUserGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveUserFromDesktopOversoldUserGroupResponse) SetBody(v *RemoveUserFromDesktopOversoldUserGroupResponseBody) *RemoveUserFromDesktopOversoldUserGroupResponse {
	s.Body = v
	return s
}

type RenewDesktopGroupRequest struct {
	// example:
	//
	// true
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// example:
	//
	// false
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// dg-7724r1jitbjzc****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RenewDesktopGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopGroupRequest) GoString() string {
	return s.String()
}

func (s *RenewDesktopGroupRequest) SetAutoPay(v bool) *RenewDesktopGroupRequest {
	s.AutoPay = &v
	return s
}

func (s *RenewDesktopGroupRequest) SetAutoRenew(v bool) *RenewDesktopGroupRequest {
	s.AutoRenew = &v
	return s
}

func (s *RenewDesktopGroupRequest) SetDesktopGroupId(v string) *RenewDesktopGroupRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *RenewDesktopGroupRequest) SetPeriod(v int32) *RenewDesktopGroupRequest {
	s.Period = &v
	return s
}

func (s *RenewDesktopGroupRequest) SetPeriodUnit(v string) *RenewDesktopGroupRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RenewDesktopGroupRequest) SetRegionId(v string) *RenewDesktopGroupRequest {
	s.RegionId = &v
	return s
}

type RenewDesktopGroupResponseBody struct {
	OrderId []*string `json:"OrderId,omitempty" xml:"OrderId,omitempty" type:"Repeated"`
	// example:
	//
	// E55E6732-2028-52FA-AB06-EA29C36B****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewDesktopGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RenewDesktopGroupResponseBody) SetOrderId(v []*string) *RenewDesktopGroupResponseBody {
	s.OrderId = v
	return s
}

func (s *RenewDesktopGroupResponseBody) SetRequestId(v string) *RenewDesktopGroupResponseBody {
	s.RequestId = &v
	return s
}

type RenewDesktopGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewDesktopGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewDesktopGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopGroupResponse) GoString() string {
	return s.String()
}

func (s *RenewDesktopGroupResponse) SetHeaders(v map[string]*string) *RenewDesktopGroupResponse {
	s.Headers = v
	return s
}

func (s *RenewDesktopGroupResponse) SetStatusCode(v int32) *RenewDesktopGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewDesktopGroupResponse) SetBody(v *RenewDesktopGroupResponseBody) *RenewDesktopGroupResponse {
	s.Body = v
	return s
}

type RenewDesktopOversoldGroupRequest struct {
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
	Period          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PeriodUnit      *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
}

func (s RenewDesktopOversoldGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopOversoldGroupRequest) GoString() string {
	return s.String()
}

func (s *RenewDesktopOversoldGroupRequest) SetOversoldGroupId(v string) *RenewDesktopOversoldGroupRequest {
	s.OversoldGroupId = &v
	return s
}

func (s *RenewDesktopOversoldGroupRequest) SetPeriod(v int32) *RenewDesktopOversoldGroupRequest {
	s.Period = &v
	return s
}

func (s *RenewDesktopOversoldGroupRequest) SetPeriodUnit(v string) *RenewDesktopOversoldGroupRequest {
	s.PeriodUnit = &v
	return s
}

type RenewDesktopOversoldGroupResponseBody struct {
	Data      *RenewDesktopOversoldGroupResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewDesktopOversoldGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopOversoldGroupResponseBody) GoString() string {
	return s.String()
}

func (s *RenewDesktopOversoldGroupResponseBody) SetData(v *RenewDesktopOversoldGroupResponseBodyData) *RenewDesktopOversoldGroupResponseBody {
	s.Data = v
	return s
}

func (s *RenewDesktopOversoldGroupResponseBody) SetRequestId(v string) *RenewDesktopOversoldGroupResponseBody {
	s.RequestId = &v
	return s
}

type RenewDesktopOversoldGroupResponseBodyData struct {
	OrderId         *int64  `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	OversoldGroupId *string `json:"OversoldGroupId,omitempty" xml:"OversoldGroupId,omitempty"`
}

func (s RenewDesktopOversoldGroupResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopOversoldGroupResponseBodyData) GoString() string {
	return s.String()
}

func (s *RenewDesktopOversoldGroupResponseBodyData) SetOrderId(v int64) *RenewDesktopOversoldGroupResponseBodyData {
	s.OrderId = &v
	return s
}

func (s *RenewDesktopOversoldGroupResponseBodyData) SetOversoldGroupId(v string) *RenewDesktopOversoldGroupResponseBodyData {
	s.OversoldGroupId = &v
	return s
}

type RenewDesktopOversoldGroupResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewDesktopOversoldGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewDesktopOversoldGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopOversoldGroupResponse) GoString() string {
	return s.String()
}

func (s *RenewDesktopOversoldGroupResponse) SetHeaders(v map[string]*string) *RenewDesktopOversoldGroupResponse {
	s.Headers = v
	return s
}

func (s *RenewDesktopOversoldGroupResponse) SetStatusCode(v int32) *RenewDesktopOversoldGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewDesktopOversoldGroupResponse) SetBody(v *RenewDesktopOversoldGroupResponseBody) *RenewDesktopOversoldGroupResponse {
	s.Body = v
	return s
}

type RenewDesktopsRequest struct {
	// Specifies whether to enable the auto-payment feature.
	//
	// Default value: true. Valid values:
	//
	// 	- true: enables the auto-payment feature.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     Make sure that you have sufficient balance in your Alibaba Cloud account. Otherwise, your order becomes invalid.
	//
	//     <!-- -->
	//
	// 	- false: disables the auto-payment feature. In this case, an order is generated, and no payment is automatically made.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     You can log on to the Elastic Desktop Service console and complete the payment based on the order ID on the Orders page.
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	AutoPay   *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	AutoRenew *bool `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	// The IDs of the cloud computers. Only IDs of subscription cloud computers are supported.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-ia2zw38bi6cm7****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The renewal duration. Valid values of this parameter are determined by the value of the `PeriodUnit` parameter.
	//
	// 	- Valid values if you set the `PeriodUnit` parameter to `Month`: 1, 2, 3, and 6
	//
	// 	- Valid values if you set the `PeriodUnit` parameter to `Year`: 1, 2, 3, 4, 5, and 6
	//
	// Default value: 1.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the renewal duration specified by the `Period` parameter.
	//
	// Default value: Month. Valid values:
	//
	// 	- Month
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Year
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The ID of the promotional activity.
	//
	// example:
	//
	// 500030980150146
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s RenewDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopsRequest) GoString() string {
	return s.String()
}

func (s *RenewDesktopsRequest) SetAutoPay(v bool) *RenewDesktopsRequest {
	s.AutoPay = &v
	return s
}

func (s *RenewDesktopsRequest) SetAutoRenew(v bool) *RenewDesktopsRequest {
	s.AutoRenew = &v
	return s
}

func (s *RenewDesktopsRequest) SetDesktopId(v []*string) *RenewDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *RenewDesktopsRequest) SetPeriod(v int32) *RenewDesktopsRequest {
	s.Period = &v
	return s
}

func (s *RenewDesktopsRequest) SetPeriodUnit(v string) *RenewDesktopsRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RenewDesktopsRequest) SetPromotionId(v string) *RenewDesktopsRequest {
	s.PromotionId = &v
	return s
}

func (s *RenewDesktopsRequest) SetRegionId(v string) *RenewDesktopsRequest {
	s.RegionId = &v
	return s
}

func (s *RenewDesktopsRequest) SetResourceType(v string) *RenewDesktopsRequest {
	s.ResourceType = &v
	return s
}

type RenewDesktopsResponseBody struct {
	// The order ID.
	//
	// example:
	//
	// 20844399755****
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *RenewDesktopsResponseBody) SetOrderId(v string) *RenewDesktopsResponseBody {
	s.OrderId = &v
	return s
}

func (s *RenewDesktopsResponseBody) SetRequestId(v string) *RenewDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type RenewDesktopsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewDesktopsResponse) GoString() string {
	return s.String()
}

func (s *RenewDesktopsResponse) SetHeaders(v map[string]*string) *RenewDesktopsResponse {
	s.Headers = v
	return s
}

func (s *RenewDesktopsResponse) SetStatusCode(v int32) *RenewDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewDesktopsResponse) SetBody(v *RenewDesktopsResponseBody) *RenewDesktopsResponse {
	s.Body = v
	return s
}

type RenewNetworkPackagesRequest struct {
	// Specifies whether to enable the automatic payment feature.
	//
	// Valid values:
	//
	// 	- true (default): enables the auto-payment feature.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     Make sure that your account has sufficient balance. Otherwise, no order is generated.
	//
	//     <!-- -->
	//
	// 	- false: disables the auto-payment feature. In this case, an order is generated but you need to make the payment manually.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     To make the payment, log on to the Elastic Desktop Service console, go to the Orders page, and find the order based on the order ID.
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	AutoPay *bool `json:"AutoPay,omitempty" xml:"AutoPay,omitempty"`
	// The IDs of premium bandwidth plans. You can specify up to 100 IDs.
	//
	// This parameter is required.
	NetworkPackageId []*string `json:"NetworkPackageId,omitempty" xml:"NetworkPackageId,omitempty" type:"Repeated"`
	// The subscription duration if you specify subscription as the new billing method for the cloud desktop. The unit of the value is specified by the `PeriodUnit` parameter. This parameter takes effect only when the `ChargeType` parameter is set to `PrePaid`.
	//
	// 	- If the `PeriodUnit` parameter is set to `Week`, the valid value of the Period parameter is 1.
	//
	// 	- If the `PeriodUnit` parameter is set to `Month`, the valid values of the Period parameter are 1, 2, 3, and 6.
	//
	// 	- If the `PeriodUnit` parameter is set to `Year`, the valid values of the Period parameter are 1, 2, 3, 4, and 5.
	//
	// example:
	//
	// 1
	Period *int32 `json:"Period,omitempty" xml:"Period,omitempty"`
	// The unit of the renewal duration specified by the Period parameter. Valid values:
	//
	// 	- Month
	//
	// 	- Year
	//
	// Default value: Month.
	//
	// example:
	//
	// Month
	PeriodUnit *string `json:"PeriodUnit,omitempty" xml:"PeriodUnit,omitempty"`
	// The promotion ID.
	//
	// example:
	//
	// 500038360030606
	PromotionId *string `json:"PromotionId,omitempty" xml:"PromotionId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RenewNetworkPackagesRequest) String() string {
	return tea.Prettify(s)
}

func (s RenewNetworkPackagesRequest) GoString() string {
	return s.String()
}

func (s *RenewNetworkPackagesRequest) SetAutoPay(v bool) *RenewNetworkPackagesRequest {
	s.AutoPay = &v
	return s
}

func (s *RenewNetworkPackagesRequest) SetNetworkPackageId(v []*string) *RenewNetworkPackagesRequest {
	s.NetworkPackageId = v
	return s
}

func (s *RenewNetworkPackagesRequest) SetPeriod(v int32) *RenewNetworkPackagesRequest {
	s.Period = &v
	return s
}

func (s *RenewNetworkPackagesRequest) SetPeriodUnit(v string) *RenewNetworkPackagesRequest {
	s.PeriodUnit = &v
	return s
}

func (s *RenewNetworkPackagesRequest) SetPromotionId(v string) *RenewNetworkPackagesRequest {
	s.PromotionId = &v
	return s
}

func (s *RenewNetworkPackagesRequest) SetRegionId(v string) *RenewNetworkPackagesRequest {
	s.RegionId = &v
	return s
}

type RenewNetworkPackagesResponseBody struct {
	// The ID of the order.
	//
	// example:
	//
	// 214726268900640
	OrderId *string `json:"OrderId,omitempty" xml:"OrderId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RenewNetworkPackagesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenewNetworkPackagesResponseBody) GoString() string {
	return s.String()
}

func (s *RenewNetworkPackagesResponseBody) SetOrderId(v string) *RenewNetworkPackagesResponseBody {
	s.OrderId = &v
	return s
}

func (s *RenewNetworkPackagesResponseBody) SetRequestId(v string) *RenewNetworkPackagesResponseBody {
	s.RequestId = &v
	return s
}

type RenewNetworkPackagesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenewNetworkPackagesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenewNetworkPackagesResponse) String() string {
	return tea.Prettify(s)
}

func (s RenewNetworkPackagesResponse) GoString() string {
	return s.String()
}

func (s *RenewNetworkPackagesResponse) SetHeaders(v map[string]*string) *RenewNetworkPackagesResponse {
	s.Headers = v
	return s
}

func (s *RenewNetworkPackagesResponse) SetStatusCode(v int32) *RenewNetworkPackagesResponse {
	s.StatusCode = &v
	return s
}

func (s *RenewNetworkPackagesResponse) SetBody(v *RenewNetworkPackagesResponseBody) *RenewNetworkPackagesResponse {
	s.Body = v
	return s
}

type ResetDesktopsRequest struct {
	// The ID of the cloud computer pool. If you specify the `DesktopId` parameter, ignore the `DesktopGroupId` parameter. If you do not specify the `DesktopId` parameter, specify the `DesktopGroupId` parameter in the call to request all IDs of the cloud computers in the specified pool.
	//
	// example:
	//
	// dg-07if7qsxoxkb6****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The IDs of the cloud computer pools.
	DesktopGroupIds []*string `json:"DesktopGroupIds,omitempty" xml:"DesktopGroupIds,omitempty" type:"Repeated"`
	// The IDs of the cloud computers. You can specify the IDs of 1 to 100 cloud computers.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the image.
	//
	// example:
	//
	// m-4zfb6zj728hhr****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The billing method.
	//
	// > This parameter is available only when you reset cloud computer pools. If you leave this parameter empty, all cloud computers in the specified cloud computer pool are reset, regardless of how the cloud computers are billed.
	//
	// example:
	//
	// PrePaid
	PayType *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/436773.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The reset scope. You can configure this parameter to reset the image or cloud computer.
	//
	// Valid values:
	//
	// 	- ALL (default): resets the image and cloud computer.
	//
	// 	- IMAGE: resets only the image.
	//
	// example:
	//
	// ALL
	ResetScope *string `json:"ResetScope,omitempty" xml:"ResetScope,omitempty"`
	// The disk reset type.
	//
	// Valid values:
	//
	// 	- 0: does not reset disks.
	//
	// 	- 1: resets only the system disk.
	//
	// 	- 2: resets only the user disk.
	//
	// 	- 3: resets the system disk and the user disk.
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	ResetType *string `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
}

func (s ResetDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetDesktopsRequest) GoString() string {
	return s.String()
}

func (s *ResetDesktopsRequest) SetDesktopGroupId(v string) *ResetDesktopsRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *ResetDesktopsRequest) SetDesktopGroupIds(v []*string) *ResetDesktopsRequest {
	s.DesktopGroupIds = v
	return s
}

func (s *ResetDesktopsRequest) SetDesktopId(v []*string) *ResetDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *ResetDesktopsRequest) SetImageId(v string) *ResetDesktopsRequest {
	s.ImageId = &v
	return s
}

func (s *ResetDesktopsRequest) SetPayType(v string) *ResetDesktopsRequest {
	s.PayType = &v
	return s
}

func (s *ResetDesktopsRequest) SetRegionId(v string) *ResetDesktopsRequest {
	s.RegionId = &v
	return s
}

func (s *ResetDesktopsRequest) SetResetScope(v string) *ResetDesktopsRequest {
	s.ResetScope = &v
	return s
}

func (s *ResetDesktopsRequest) SetResetType(v string) *ResetDesktopsRequest {
	s.ResetType = &v
	return s
}

type ResetDesktopsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *ResetDesktopsResponseBody) SetRequestId(v string) *ResetDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type ResetDesktopsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetDesktopsResponse) GoString() string {
	return s.String()
}

func (s *ResetDesktopsResponse) SetHeaders(v map[string]*string) *ResetDesktopsResponse {
	s.Headers = v
	return s
}

func (s *ResetDesktopsResponse) SetStatusCode(v int32) *ResetDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetDesktopsResponse) SetBody(v *ResetDesktopsResponseBody) *ResetDesktopsResponse {
	s.Body = v
	return s
}

type ResetNASDefaultMountTargetRequest struct {
	// The ID of the NAS file system.
	//
	// This parameter is required.
	//
	// example:
	//
	// 3a6ef4****
	FileSystemId *string `json:"FileSystemId,omitempty" xml:"FileSystemId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ResetNASDefaultMountTargetRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetNASDefaultMountTargetRequest) GoString() string {
	return s.String()
}

func (s *ResetNASDefaultMountTargetRequest) SetFileSystemId(v string) *ResetNASDefaultMountTargetRequest {
	s.FileSystemId = &v
	return s
}

func (s *ResetNASDefaultMountTargetRequest) SetRegionId(v string) *ResetNASDefaultMountTargetRequest {
	s.RegionId = &v
	return s
}

type ResetNASDefaultMountTargetResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetNASDefaultMountTargetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetNASDefaultMountTargetResponseBody) GoString() string {
	return s.String()
}

func (s *ResetNASDefaultMountTargetResponseBody) SetRequestId(v string) *ResetNASDefaultMountTargetResponseBody {
	s.RequestId = &v
	return s
}

type ResetNASDefaultMountTargetResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetNASDefaultMountTargetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetNASDefaultMountTargetResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetNASDefaultMountTargetResponse) GoString() string {
	return s.String()
}

func (s *ResetNASDefaultMountTargetResponse) SetHeaders(v map[string]*string) *ResetNASDefaultMountTargetResponse {
	s.Headers = v
	return s
}

func (s *ResetNASDefaultMountTargetResponse) SetStatusCode(v int32) *ResetNASDefaultMountTargetResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetNASDefaultMountTargetResponse) SetBody(v *ResetNASDefaultMountTargetResponseBody) *ResetNASDefaultMountTargetResponse {
	s.Body = v
	return s
}

type ResetSnapshotRequest struct {
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hzngahou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the snapshot.
	//
	// This parameter is required.
	//
	// example:
	//
	// s-2zeipxmnhej803x7****
	SnapshotId *string `json:"SnapshotId,omitempty" xml:"SnapshotId,omitempty"`
}

func (s ResetSnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetSnapshotRequest) GoString() string {
	return s.String()
}

func (s *ResetSnapshotRequest) SetRegionId(v string) *ResetSnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *ResetSnapshotRequest) SetSnapshotId(v string) *ResetSnapshotRequest {
	s.SnapshotId = &v
	return s
}

type ResetSnapshotResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResetSnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetSnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *ResetSnapshotResponseBody) SetRequestId(v string) *ResetSnapshotResponseBody {
	s.RequestId = &v
	return s
}

type ResetSnapshotResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetSnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetSnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetSnapshotResponse) GoString() string {
	return s.String()
}

func (s *ResetSnapshotResponse) SetHeaders(v map[string]*string) *ResetSnapshotResponse {
	s.Headers = v
	return s
}

func (s *ResetSnapshotResponse) SetStatusCode(v int32) *ResetSnapshotResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetSnapshotResponse) SetBody(v *ResetSnapshotResponseBody) *ResetSnapshotResponse {
	s.Body = v
	return s
}

type RevokeCoordinatePrivilegeRequest struct {
	// The ID of the stream coordination task.
	//
	// This parameter is required.
	//
	// example:
	//
	// co-fqsm6e8ee75w61fp9
	CoId *string `json:"CoId,omitempty" xml:"CoId,omitempty"`
	// The ID of the end user.
	//
	// example:
	//
	// zhangsan
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the region. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of user who requires the coordinate permissions.
	//
	// Set the value to TENANT_ADMIN. Only tenant administrators can be granted with the coordinate permissions.
	//
	// This parameter is required.
	//
	// example:
	//
	// TENANT_ADMIN
	UserType *string `json:"UserType,omitempty" xml:"UserType,omitempty"`
	// The unique identifier of the client. If you use an Alibaba Cloud Workspace client, click **About*	- on the client logon page to view the identifier of the client.
	//
	// example:
	//
	// C78CA9E99315687575DD2844C1F3****
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s RevokeCoordinatePrivilegeRequest) String() string {
	return tea.Prettify(s)
}

func (s RevokeCoordinatePrivilegeRequest) GoString() string {
	return s.String()
}

func (s *RevokeCoordinatePrivilegeRequest) SetCoId(v string) *RevokeCoordinatePrivilegeRequest {
	s.CoId = &v
	return s
}

func (s *RevokeCoordinatePrivilegeRequest) SetEndUserId(v string) *RevokeCoordinatePrivilegeRequest {
	s.EndUserId = &v
	return s
}

func (s *RevokeCoordinatePrivilegeRequest) SetRegionId(v string) *RevokeCoordinatePrivilegeRequest {
	s.RegionId = &v
	return s
}

func (s *RevokeCoordinatePrivilegeRequest) SetUserType(v string) *RevokeCoordinatePrivilegeRequest {
	s.UserType = &v
	return s
}

func (s *RevokeCoordinatePrivilegeRequest) SetUuid(v string) *RevokeCoordinatePrivilegeRequest {
	s.Uuid = &v
	return s
}

type RevokeCoordinatePrivilegeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RevokeCoordinatePrivilegeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RevokeCoordinatePrivilegeResponseBody) GoString() string {
	return s.String()
}

func (s *RevokeCoordinatePrivilegeResponseBody) SetRequestId(v string) *RevokeCoordinatePrivilegeResponseBody {
	s.RequestId = &v
	return s
}

type RevokeCoordinatePrivilegeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RevokeCoordinatePrivilegeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RevokeCoordinatePrivilegeResponse) String() string {
	return tea.Prettify(s)
}

func (s RevokeCoordinatePrivilegeResponse) GoString() string {
	return s.String()
}

func (s *RevokeCoordinatePrivilegeResponse) SetHeaders(v map[string]*string) *RevokeCoordinatePrivilegeResponse {
	s.Headers = v
	return s
}

func (s *RevokeCoordinatePrivilegeResponse) SetStatusCode(v int32) *RevokeCoordinatePrivilegeResponse {
	s.StatusCode = &v
	return s
}

func (s *RevokeCoordinatePrivilegeResponse) SetBody(v *RevokeCoordinatePrivilegeResponseBody) *RevokeCoordinatePrivilegeResponse {
	s.Body = v
	return s
}

type RunCommandRequest struct {
	// The content of the command. The command content can be plaintext or Base64-encoded.\\
	//
	// The Base64-encoded command content cannot exceed 16 KB in size.
	//
	// > If the command content is Base64-encoded, you must set the ContentEncoding parameter to Base64.
	//
	// This parameter is required.
	//
	// example:
	//
	// ipconfig
	CommandContent *string `json:"CommandContent,omitempty" xml:"CommandContent,omitempty"`
	// The encoding mode of the command content. Valid values:
	//
	// 	- PlainText: The command content is not encoded.
	//
	// 	- Base64: The command content is Base64-encoded.
	//
	// Default value: PlainText. If the specified value of this parameter is invalid, PlainText is used by default.
	//
	// example:
	//
	// Base64
	ContentEncoding *string `json:"ContentEncoding,omitempty" xml:"ContentEncoding,omitempty"`
	// The ID of cloud desktop N. Valid values of N: 1 to 50.\\
	//
	// If multiple cloud desktops are specified and the command execution succeeds on at least one of the cloud desktops, the operation is considered successful. If multiple cloud desktops are specified and the command execution fails on all the cloud desktops, verify the value of the parameter and try again.
	//
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the end user. If you specify a value, you run the command as the end user that is granted specific permissions. Note: The end user has sessions on a cloud computer. That is, when the cloud computer is started, the end user logs on to an Alibaba Cloud Workspace client and connects to the cloud computer, and the cloud computer is not preempted by another end user during the connection. This parameter is not available for Linux cloud computers.
	//
	// example:
	//
	// User1
	EndUserId *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	// The ID of the region.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The timeout period for the command to run. Unit: seconds. Default value: 60.\\
	//
	// A timeout error occurs if the command cannot be run because the process slows down or because a specific module or the Cloud Assistant client does not exist. When a timeout error occurs, the command process is forcibly terminated.
	//
	// example:
	//
	// 3600
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
	// The language of the O\\&M command. Valid values:
	//
	// 	- RunBatScript
	//
	// 	- RunPowerShellScript
	//
	// This parameter is required.
	//
	// example:
	//
	// RunPowerShellScript
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s RunCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCommandRequest) GoString() string {
	return s.String()
}

func (s *RunCommandRequest) SetCommandContent(v string) *RunCommandRequest {
	s.CommandContent = &v
	return s
}

func (s *RunCommandRequest) SetContentEncoding(v string) *RunCommandRequest {
	s.ContentEncoding = &v
	return s
}

func (s *RunCommandRequest) SetDesktopId(v []*string) *RunCommandRequest {
	s.DesktopId = v
	return s
}

func (s *RunCommandRequest) SetEndUserId(v string) *RunCommandRequest {
	s.EndUserId = &v
	return s
}

func (s *RunCommandRequest) SetRegionId(v string) *RunCommandRequest {
	s.RegionId = &v
	return s
}

func (s *RunCommandRequest) SetTimeout(v int64) *RunCommandRequest {
	s.Timeout = &v
	return s
}

func (s *RunCommandRequest) SetType(v string) *RunCommandRequest {
	s.Type = &v
	return s
}

type RunCommandResponseBody struct {
	// The ID of the command execution.
	//
	// example:
	//
	// t-hz01qgsqj2n****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCommandResponseBody) GoString() string {
	return s.String()
}

func (s *RunCommandResponseBody) SetInvokeId(v string) *RunCommandResponseBody {
	s.InvokeId = &v
	return s
}

func (s *RunCommandResponseBody) SetRequestId(v string) *RunCommandResponseBody {
	s.RequestId = &v
	return s
}

type RunCommandResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCommandResponse) GoString() string {
	return s.String()
}

func (s *RunCommandResponse) SetHeaders(v map[string]*string) *RunCommandResponse {
	s.Headers = v
	return s
}

func (s *RunCommandResponse) SetStatusCode(v int32) *RunCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCommandResponse) SetBody(v *RunCommandResponseBody) *RunCommandResponse {
	s.Body = v
	return s
}

type SendVerifyCodeRequest struct {
	// The information that is required to send the verification code, in JSON format. When you verify the CEN instance of another Alibaba Cloud account, you must provide the ID of the CEN instance and the ID of the Alibaba Cloud account to which the instance belongs.
	//
	// 	- CenId: the ID of the CEN instance.
	//
	// 	- CenOwnerId: the ID of the Alibaba Cloud account to which the CEN instance belongs.
	//
	// >  If you own the CEN instance, skip this parameter. If you do not own the CEN instance, specify the ID of the Alibaba Cloud account that owns the CEN instance.
	//
	// example:
	//
	// {"cenOwnerId": 1234567890******,"cenId": "cen-3weq30r6t0s7t4****"}
	ExtraInfo *string `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The action that you want to perform by using the verification code.
	//
	// Valid value:
	//
	// 	- eds_cenID_securityverification: Use the verification code to verify the CEN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// eds_cenID_securityverification
	VerifyCodeAction *string `json:"VerifyCodeAction,omitempty" xml:"VerifyCodeAction,omitempty"`
}

func (s SendVerifyCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s SendVerifyCodeRequest) GoString() string {
	return s.String()
}

func (s *SendVerifyCodeRequest) SetExtraInfo(v string) *SendVerifyCodeRequest {
	s.ExtraInfo = &v
	return s
}

func (s *SendVerifyCodeRequest) SetRegionId(v string) *SendVerifyCodeRequest {
	s.RegionId = &v
	return s
}

func (s *SendVerifyCodeRequest) SetVerifyCodeAction(v string) *SendVerifyCodeRequest {
	s.VerifyCodeAction = &v
	return s
}

type SendVerifyCodeResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendVerifyCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendVerifyCodeResponseBody) GoString() string {
	return s.String()
}

func (s *SendVerifyCodeResponseBody) SetRequestId(v string) *SendVerifyCodeResponseBody {
	s.RequestId = &v
	return s
}

type SendVerifyCodeResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendVerifyCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendVerifyCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s SendVerifyCodeResponse) GoString() string {
	return s.String()
}

func (s *SendVerifyCodeResponse) SetHeaders(v map[string]*string) *SendVerifyCodeResponse {
	s.Headers = v
	return s
}

func (s *SendVerifyCodeResponse) SetStatusCode(v int32) *SendVerifyCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *SendVerifyCodeResponse) SetBody(v *SendVerifyCodeResponseBody) *SendVerifyCodeResponse {
	s.Body = v
	return s
}

type SetDesktopGroupScaleTimerRequest struct {
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The information about the scheduled auto scaling task.
	ScaleTimerInfos []*SetDesktopGroupScaleTimerRequestScaleTimerInfos `json:"ScaleTimerInfos,omitempty" xml:"ScaleTimerInfos,omitempty" type:"Repeated"`
}

func (s SetDesktopGroupScaleTimerRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupScaleTimerRequest) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupScaleTimerRequest) SetDesktopGroupId(v string) *SetDesktopGroupScaleTimerRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequest) SetRegionId(v string) *SetDesktopGroupScaleTimerRequest {
	s.RegionId = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequest) SetScaleTimerInfos(v []*SetDesktopGroupScaleTimerRequestScaleTimerInfos) *SetDesktopGroupScaleTimerRequest {
	s.ScaleTimerInfos = v
	return s
}

type SetDesktopGroupScaleTimerRequestScaleTimerInfos struct {
	// One option for the auto scaling policy. This option specifies the number of cloud computers that you want to create in the cloud computer pool. Valid values: 0 to 200.
	//
	// example:
	//
	// 5
	BuyResAmount *int32 `json:"BuyResAmount,omitempty" xml:"BuyResAmount,omitempty"`
	// The cron expression of the trigger time.
	//
	// example:
	//
	// 0 0 12 ? 	- 1
	Cron *string `json:"Cron,omitempty" xml:"Cron,omitempty"`
	// The keep-alive duration of a session after the session is disconnected. Unit: milliseconds. Valid values: 180000 (3 minutes) to 345600000 (4 days). A value of 0 indicates that the session always keeps alive.
	//
	// If a session is disconnected by the end user or accidentally due to a factor and the end user does not re-establish a connection with the session within the keep-alive duration, the session expires and unsaved data is deleted. If the end user successfully re-establishes a connection with the session within the keep-alive duration, the end user returns to the session and can still access the original data.
	//
	// example:
	//
	// 1000
	KeepDuration *int64 `json:"KeepDuration,omitempty" xml:"KeepDuration,omitempty"`
	// The load balancing policy for the multi-session cloud computer pool.
	//
	// Valid values:
	//
	// 	- 0: depth-first
	//
	// 	- 1: breadth first.
	//
	// example:
	//
	// 0
	LoadPolicy *int32 `json:"LoadPolicy,omitempty" xml:"LoadPolicy,omitempty"`
	// One option for the auto scaling policy. This option specifies the maximum number of cloud computers that you can create in the cloud computer pool. Valid values: 0 to 200.
	//
	// example:
	//
	// 100
	MaxResAmount *int32 `json:"MaxResAmount,omitempty" xml:"MaxResAmount,omitempty"`
	// One option for the auto scaling policy. This option specifies the minimum number of cloud computers that you must create in the cloud computer pool. Valid values: 0 to 200.
	//
	// example:
	//
	// 5
	MinResAmount *int32 `json:"MinResAmount,omitempty" xml:"MinResAmount,omitempty"`
	// The threshold for the ratio of connected sessions. This parameter is the condition that triggers auto scaling in a multi-session cloud computer pool. Formula:
	//
	// `Ratio of connected sessions = Number of connected sessions/(Total number of cloud computers × Maximum number of sessions allowed for each cloud computer) × 100%`.
	//
	// When the specified threshold is reached, new cloud computers are automatically created. When the specified threshold is not reached, idle cloud computers are released.
	//
	// example:
	//
	// 0.9
	RatioThreshold *float32 `json:"RatioThreshold,omitempty" xml:"RatioThreshold,omitempty"`
	// The type of the auto scaling policy.
	//
	// Valid values:
	//
	// 	- drop
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- normal
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- peak
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- rise
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// rise
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SetDesktopGroupScaleTimerRequestScaleTimerInfos) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupScaleTimerRequestScaleTimerInfos) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetBuyResAmount(v int32) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.BuyResAmount = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetCron(v string) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.Cron = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetKeepDuration(v int64) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.KeepDuration = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetLoadPolicy(v int32) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.LoadPolicy = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetMaxResAmount(v int32) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.MaxResAmount = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetMinResAmount(v int32) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.MinResAmount = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetRatioThreshold(v float32) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.RatioThreshold = &v
	return s
}

func (s *SetDesktopGroupScaleTimerRequestScaleTimerInfos) SetType(v string) *SetDesktopGroupScaleTimerRequestScaleTimerInfos {
	s.Type = &v
	return s
}

type SetDesktopGroupScaleTimerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDesktopGroupScaleTimerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupScaleTimerResponseBody) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupScaleTimerResponseBody) SetRequestId(v string) *SetDesktopGroupScaleTimerResponseBody {
	s.RequestId = &v
	return s
}

type SetDesktopGroupScaleTimerResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDesktopGroupScaleTimerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDesktopGroupScaleTimerResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupScaleTimerResponse) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupScaleTimerResponse) SetHeaders(v map[string]*string) *SetDesktopGroupScaleTimerResponse {
	s.Headers = v
	return s
}

func (s *SetDesktopGroupScaleTimerResponse) SetStatusCode(v int32) *SetDesktopGroupScaleTimerResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDesktopGroupScaleTimerResponse) SetBody(v *SetDesktopGroupScaleTimerResponseBody) *SetDesktopGroupScaleTimerResponse {
	s.Body = v
	return s
}

type SetDesktopGroupTimerRequest struct {
	// The cron expression for the scheduled task. This parameter is required when `TimerType` is set to 2, 3, or 4.
	//
	// example:
	//
	// 0 0 2 ? 	- 1-7
	CronExpression *string `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-dbdkfmh883****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// Specifies whether to forcefully execute the scheduled task.
	//
	// example:
	//
	// true
	Force *bool `json:"Force,omitempty" xml:"Force,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the disk that you want to reset.
	//
	// Valid values:
	//
	// - does not reset disks.
	//
	// - resets only the system disk.
	//
	// - resets only the user disk.
	//
	// - resets the system disk and the user disk.
	//
	// example:
	//
	// 1
	ResetType *int32 `json:"ResetType,omitempty" xml:"ResetType,omitempty"`
	// The type of the scheduled task.
	//
	// Valid values:
	//
	// 	- 1: scheduled reset
	//
	// 	- 2: scheduled startup
	//
	// 	- 3: scheduled stop
	//
	// 	- 4: scheduled restart
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	TimerType *int32 `json:"TimerType,omitempty" xml:"TimerType,omitempty"`
}

func (s SetDesktopGroupTimerRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupTimerRequest) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupTimerRequest) SetCronExpression(v string) *SetDesktopGroupTimerRequest {
	s.CronExpression = &v
	return s
}

func (s *SetDesktopGroupTimerRequest) SetDesktopGroupId(v string) *SetDesktopGroupTimerRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *SetDesktopGroupTimerRequest) SetForce(v bool) *SetDesktopGroupTimerRequest {
	s.Force = &v
	return s
}

func (s *SetDesktopGroupTimerRequest) SetRegionId(v string) *SetDesktopGroupTimerRequest {
	s.RegionId = &v
	return s
}

func (s *SetDesktopGroupTimerRequest) SetResetType(v int32) *SetDesktopGroupTimerRequest {
	s.ResetType = &v
	return s
}

func (s *SetDesktopGroupTimerRequest) SetTimerType(v int32) *SetDesktopGroupTimerRequest {
	s.TimerType = &v
	return s
}

type SetDesktopGroupTimerResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 388CF76E-FFB3-5174-9F91-CDD****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDesktopGroupTimerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupTimerResponseBody) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupTimerResponseBody) SetRequestId(v string) *SetDesktopGroupTimerResponseBody {
	s.RequestId = &v
	return s
}

type SetDesktopGroupTimerResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDesktopGroupTimerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDesktopGroupTimerResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupTimerResponse) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupTimerResponse) SetHeaders(v map[string]*string) *SetDesktopGroupTimerResponse {
	s.Headers = v
	return s
}

func (s *SetDesktopGroupTimerResponse) SetStatusCode(v int32) *SetDesktopGroupTimerResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDesktopGroupTimerResponse) SetBody(v *SetDesktopGroupTimerResponseBody) *SetDesktopGroupTimerResponse {
	s.Body = v
	return s
}

type SetDesktopGroupTimerStatusRequest struct {
	// The ID of the cloud computer pool.
	//
	// This parameter is required.
	//
	// example:
	//
	// dg-fgxsniu6at****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The status of the scheduled task.
	//
	// Valid values:
	//
	// 	- 1: enabled
	//
	// 	- 2: disabled
	//
	// 	- 3: deleted
	//
	// 	- 100: unknown
	//
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the scheduled task.
	//
	// Valid values:
	//
	// 	- 1: scheduled reset
	//
	// 	- 2: scheduled startup
	//
	// 	- 3: scheduled stop
	//
	// 	- 4: scheduled restart
	//
	// This parameter is required.
	//
	// example:
	//
	// 1
	TimerType *int32 `json:"TimerType,omitempty" xml:"TimerType,omitempty"`
}

func (s SetDesktopGroupTimerStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupTimerStatusRequest) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupTimerStatusRequest) SetDesktopGroupId(v string) *SetDesktopGroupTimerStatusRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *SetDesktopGroupTimerStatusRequest) SetRegionId(v string) *SetDesktopGroupTimerStatusRequest {
	s.RegionId = &v
	return s
}

func (s *SetDesktopGroupTimerStatusRequest) SetStatus(v int32) *SetDesktopGroupTimerStatusRequest {
	s.Status = &v
	return s
}

func (s *SetDesktopGroupTimerStatusRequest) SetTimerType(v int32) *SetDesktopGroupTimerStatusRequest {
	s.TimerType = &v
	return s
}

type SetDesktopGroupTimerStatusResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// AC7912E7-8BDF-547F-BCAC****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDesktopGroupTimerStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupTimerStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupTimerStatusResponseBody) SetRequestId(v string) *SetDesktopGroupTimerStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetDesktopGroupTimerStatusResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDesktopGroupTimerStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDesktopGroupTimerStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopGroupTimerStatusResponse) GoString() string {
	return s.String()
}

func (s *SetDesktopGroupTimerStatusResponse) SetHeaders(v map[string]*string) *SetDesktopGroupTimerStatusResponse {
	s.Headers = v
	return s
}

func (s *SetDesktopGroupTimerStatusResponse) SetStatusCode(v int32) *SetDesktopGroupTimerStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDesktopGroupTimerStatusResponse) SetBody(v *SetDesktopGroupTimerStatusResponseBody) *SetDesktopGroupTimerStatusResponse {
	s.Body = v
	return s
}

type SetDesktopMaintenanceRequest struct {
	// This parameter is required.
	DesktopIds []*string `json:"DesktopIds,omitempty" xml:"DesktopIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// enter
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetDesktopMaintenanceRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopMaintenanceRequest) GoString() string {
	return s.String()
}

func (s *SetDesktopMaintenanceRequest) SetDesktopIds(v []*string) *SetDesktopMaintenanceRequest {
	s.DesktopIds = v
	return s
}

func (s *SetDesktopMaintenanceRequest) SetMode(v string) *SetDesktopMaintenanceRequest {
	s.Mode = &v
	return s
}

func (s *SetDesktopMaintenanceRequest) SetRegionId(v string) *SetDesktopMaintenanceRequest {
	s.RegionId = &v
	return s
}

type SetDesktopMaintenanceResponseBody struct {
	// example:
	//
	// BA6A1853-3EA9-5EEB-86C8-3D14A3E01905
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDesktopMaintenanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopMaintenanceResponseBody) GoString() string {
	return s.String()
}

func (s *SetDesktopMaintenanceResponseBody) SetRequestId(v string) *SetDesktopMaintenanceResponseBody {
	s.RequestId = &v
	return s
}

type SetDesktopMaintenanceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDesktopMaintenanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDesktopMaintenanceResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDesktopMaintenanceResponse) GoString() string {
	return s.String()
}

func (s *SetDesktopMaintenanceResponse) SetHeaders(v map[string]*string) *SetDesktopMaintenanceResponse {
	s.Headers = v
	return s
}

func (s *SetDesktopMaintenanceResponse) SetStatusCode(v int32) *SetDesktopMaintenanceResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDesktopMaintenanceResponse) SetBody(v *SetDesktopMaintenanceResponseBody) *SetDesktopMaintenanceResponse {
	s.Body = v
	return s
}

type SetDirectorySsoStatusRequest struct {
	// The AD directory ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-h95efs1mbukd9****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// Specifies whether to enable SSO. Valid values:
	//
	// 	- true: enables SSO.
	//
	// 	- false: disables SSO.
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	EnableSso *bool `json:"EnableSso,omitempty" xml:"EnableSso,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetDirectorySsoStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDirectorySsoStatusRequest) GoString() string {
	return s.String()
}

func (s *SetDirectorySsoStatusRequest) SetDirectoryId(v string) *SetDirectorySsoStatusRequest {
	s.DirectoryId = &v
	return s
}

func (s *SetDirectorySsoStatusRequest) SetEnableSso(v bool) *SetDirectorySsoStatusRequest {
	s.EnableSso = &v
	return s
}

func (s *SetDirectorySsoStatusRequest) SetRegionId(v string) *SetDirectorySsoStatusRequest {
	s.RegionId = &v
	return s
}

type SetDirectorySsoStatusResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetDirectorySsoStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDirectorySsoStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetDirectorySsoStatusResponseBody) SetRequestId(v string) *SetDirectorySsoStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetDirectorySsoStatusResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDirectorySsoStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDirectorySsoStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDirectorySsoStatusResponse) GoString() string {
	return s.String()
}

func (s *SetDirectorySsoStatusResponse) SetHeaders(v map[string]*string) *SetDirectorySsoStatusResponse {
	s.Headers = v
	return s
}

func (s *SetDirectorySsoStatusResponse) SetStatusCode(v int32) *SetDirectorySsoStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDirectorySsoStatusResponse) SetBody(v *SetDirectorySsoStatusResponseBody) *SetDirectorySsoStatusResponse {
	s.Body = v
	return s
}

type SetIdpMetadataRequest struct {
	// The workspace ID. This parameter is the same as `OfficeSiteId`. We recommend that you use `OfficeSiteId` to replace `DirectoryId`. You can specify only `DirectoryId` or `OfficeSiteId`.
	//
	// example:
	//
	// cn-hangzhou+dir-400695****
	DirectoryId *string `json:"DirectoryId,omitempty" xml:"DirectoryId,omitempty"`
	// The metadata of the IdP.
	//
	// This parameter is required.
	//
	// example:
	//
	// &lt;EntityDescriptor ID********Descriptor&gt;
	IdpMetadata *string `json:"IdpMetadata,omitempty" xml:"IdpMetadata,omitempty"`
	// The workspace ID.
	//
	// example:
	//
	// cn-hangzhou+dir-400695****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetIdpMetadataRequest) String() string {
	return tea.Prettify(s)
}

func (s SetIdpMetadataRequest) GoString() string {
	return s.String()
}

func (s *SetIdpMetadataRequest) SetDirectoryId(v string) *SetIdpMetadataRequest {
	s.DirectoryId = &v
	return s
}

func (s *SetIdpMetadataRequest) SetIdpMetadata(v string) *SetIdpMetadataRequest {
	s.IdpMetadata = &v
	return s
}

func (s *SetIdpMetadataRequest) SetOfficeSiteId(v string) *SetIdpMetadataRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *SetIdpMetadataRequest) SetRegionId(v string) *SetIdpMetadataRequest {
	s.RegionId = &v
	return s
}

type SetIdpMetadataResponseBody struct {
	// The entity ID obtained after the IdP metadata file is parsed.
	//
	// example:
	//
	// http://test****.cn/adfs/services/trust
	IdpEntityId *string `json:"IdpEntityId,omitempty" xml:"IdpEntityId,omitempty"`
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetIdpMetadataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetIdpMetadataResponseBody) GoString() string {
	return s.String()
}

func (s *SetIdpMetadataResponseBody) SetIdpEntityId(v string) *SetIdpMetadataResponseBody {
	s.IdpEntityId = &v
	return s
}

func (s *SetIdpMetadataResponseBody) SetRequestId(v string) *SetIdpMetadataResponseBody {
	s.RequestId = &v
	return s
}

type SetIdpMetadataResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetIdpMetadataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetIdpMetadataResponse) String() string {
	return tea.Prettify(s)
}

func (s SetIdpMetadataResponse) GoString() string {
	return s.String()
}

func (s *SetIdpMetadataResponse) SetHeaders(v map[string]*string) *SetIdpMetadataResponse {
	s.Headers = v
	return s
}

func (s *SetIdpMetadataResponse) SetStatusCode(v int32) *SetIdpMetadataResponse {
	s.StatusCode = &v
	return s
}

func (s *SetIdpMetadataResponse) SetBody(v *SetIdpMetadataResponseBody) *SetIdpMetadataResponse {
	s.Body = v
	return s
}

type SetOfficeSiteSsoStatusRequest struct {
	// Specifies whether to enable SSO.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// This parameter is required.
	//
	// example:
	//
	// true
	EnableSso *bool `json:"EnableSso,omitempty" xml:"EnableSso,omitempty"`
	// The workspace ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou+dir-363353****
	OfficeSiteId *string `json:"OfficeSiteId,omitempty" xml:"OfficeSiteId,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SetOfficeSiteSsoStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SetOfficeSiteSsoStatusRequest) GoString() string {
	return s.String()
}

func (s *SetOfficeSiteSsoStatusRequest) SetEnableSso(v bool) *SetOfficeSiteSsoStatusRequest {
	s.EnableSso = &v
	return s
}

func (s *SetOfficeSiteSsoStatusRequest) SetOfficeSiteId(v string) *SetOfficeSiteSsoStatusRequest {
	s.OfficeSiteId = &v
	return s
}

func (s *SetOfficeSiteSsoStatusRequest) SetRegionId(v string) *SetOfficeSiteSsoStatusRequest {
	s.RegionId = &v
	return s
}

type SetOfficeSiteSsoStatusResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetOfficeSiteSsoStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetOfficeSiteSsoStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SetOfficeSiteSsoStatusResponseBody) SetRequestId(v string) *SetOfficeSiteSsoStatusResponseBody {
	s.RequestId = &v
	return s
}

type SetOfficeSiteSsoStatusResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetOfficeSiteSsoStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetOfficeSiteSsoStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SetOfficeSiteSsoStatusResponse) GoString() string {
	return s.String()
}

func (s *SetOfficeSiteSsoStatusResponse) SetHeaders(v map[string]*string) *SetOfficeSiteSsoStatusResponse {
	s.Headers = v
	return s
}

func (s *SetOfficeSiteSsoStatusResponse) SetStatusCode(v int32) *SetOfficeSiteSsoStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SetOfficeSiteSsoStatusResponse) SetBody(v *SetOfficeSiteSsoStatusResponseBody) *SetOfficeSiteSsoStatusResponse {
	s.Body = v
	return s
}

type SetUserProfilePathRulesRequest struct {
	// The desktop group ID.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The directories that you want to configure in the blacklist and whitelist.
	UserProfilePathRule []*SetUserProfilePathRulesRequestUserProfilePathRule `json:"UserProfilePathRule,omitempty" xml:"UserProfilePathRule,omitempty" type:"Repeated"`
	// The directory type that you want to configure.
	//
	// Valid values:
	//
	// 	- Both_Default_DesktopGroup
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DesktopGroup
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Default
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// DesktopGroup
	UserProfileRuleType *string `json:"UserProfileRuleType,omitempty" xml:"UserProfileRuleType,omitempty"`
}

func (s SetUserProfilePathRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s SetUserProfilePathRulesRequest) GoString() string {
	return s.String()
}

func (s *SetUserProfilePathRulesRequest) SetDesktopGroupId(v string) *SetUserProfilePathRulesRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *SetUserProfilePathRulesRequest) SetRegionId(v string) *SetUserProfilePathRulesRequest {
	s.RegionId = &v
	return s
}

func (s *SetUserProfilePathRulesRequest) SetUserProfilePathRule(v []*SetUserProfilePathRulesRequestUserProfilePathRule) *SetUserProfilePathRulesRequest {
	s.UserProfilePathRule = v
	return s
}

func (s *SetUserProfilePathRulesRequest) SetUserProfileRuleType(v string) *SetUserProfilePathRulesRequest {
	s.UserProfileRuleType = &v
	return s
}

type SetUserProfilePathRulesRequestUserProfilePathRule struct {
	// The directory in the blacklist.
	BlackPath *SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath `json:"BlackPath,omitempty" xml:"BlackPath,omitempty" type:"Struct"`
	// The directories that you want to configure in the whitelist.
	WhitePaths []*SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths `json:"WhitePaths,omitempty" xml:"WhitePaths,omitempty" type:"Repeated"`
}

func (s SetUserProfilePathRulesRequestUserProfilePathRule) String() string {
	return tea.Prettify(s)
}

func (s SetUserProfilePathRulesRequestUserProfilePathRule) GoString() string {
	return s.String()
}

func (s *SetUserProfilePathRulesRequestUserProfilePathRule) SetBlackPath(v *SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath) *SetUserProfilePathRulesRequestUserProfilePathRule {
	s.BlackPath = v
	return s
}

func (s *SetUserProfilePathRulesRequestUserProfilePathRule) SetWhitePaths(v []*SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths) *SetUserProfilePathRulesRequestUserProfilePathRule {
	s.WhitePaths = v
	return s
}

type SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath struct {
	// The blacklist path.
	//
	// example:
	//
	// AppLocal/Data
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The path type.
	//
	// Valid values:
	//
	// 	- file
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- folder
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// folder
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath) String() string {
	return tea.Prettify(s)
}

func (s SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath) GoString() string {
	return s.String()
}

func (s *SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath) SetPath(v string) *SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath {
	s.Path = &v
	return s
}

func (s *SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath) SetType(v string) *SetUserProfilePathRulesRequestUserProfilePathRuleBlackPath {
	s.Type = &v
	return s
}

type SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths struct {
	// The whitelist path.
	//
	// example:
	//
	// whitePath
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// The path type.
	//
	// Valid values:
	//
	// 	- file
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- folder
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// file
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths) String() string {
	return tea.Prettify(s)
}

func (s SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths) GoString() string {
	return s.String()
}

func (s *SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths) SetPath(v string) *SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths {
	s.Path = &v
	return s
}

func (s *SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths) SetType(v string) *SetUserProfilePathRulesRequestUserProfilePathRuleWhitePaths {
	s.Type = &v
	return s
}

type SetUserProfilePathRulesShrinkRequest struct {
	// The desktop group ID.
	//
	// example:
	//
	// dg-2i8qxpv6t1a03****
	DesktopGroupId *string `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The directories that you want to configure in the blacklist and whitelist.
	UserProfilePathRuleShrink *string `json:"UserProfilePathRule,omitempty" xml:"UserProfilePathRule,omitempty"`
	// The directory type that you want to configure.
	//
	// Valid values:
	//
	// 	- Both_Default_DesktopGroup
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- DesktopGroup
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Default
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// DesktopGroup
	UserProfileRuleType *string `json:"UserProfileRuleType,omitempty" xml:"UserProfileRuleType,omitempty"`
}

func (s SetUserProfilePathRulesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetUserProfilePathRulesShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetUserProfilePathRulesShrinkRequest) SetDesktopGroupId(v string) *SetUserProfilePathRulesShrinkRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *SetUserProfilePathRulesShrinkRequest) SetRegionId(v string) *SetUserProfilePathRulesShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *SetUserProfilePathRulesShrinkRequest) SetUserProfilePathRuleShrink(v string) *SetUserProfilePathRulesShrinkRequest {
	s.UserProfilePathRuleShrink = &v
	return s
}

func (s *SetUserProfilePathRulesShrinkRequest) SetUserProfileRuleType(v string) *SetUserProfilePathRulesShrinkRequest {
	s.UserProfileRuleType = &v
	return s
}

type SetUserProfilePathRulesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetUserProfilePathRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetUserProfilePathRulesResponseBody) GoString() string {
	return s.String()
}

func (s *SetUserProfilePathRulesResponseBody) SetRequestId(v string) *SetUserProfilePathRulesResponseBody {
	s.RequestId = &v
	return s
}

type SetUserProfilePathRulesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetUserProfilePathRulesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetUserProfilePathRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s SetUserProfilePathRulesResponse) GoString() string {
	return s.String()
}

func (s *SetUserProfilePathRulesResponse) SetHeaders(v map[string]*string) *SetUserProfilePathRulesResponse {
	s.Headers = v
	return s
}

func (s *SetUserProfilePathRulesResponse) SetStatusCode(v int32) *SetUserProfilePathRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *SetUserProfilePathRulesResponse) SetBody(v *SetUserProfilePathRulesResponseBody) *SetUserProfilePathRulesResponse {
	s.Body = v
	return s
}

type StartDesktopsRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 20 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s StartDesktopsRequest) GoString() string {
	return s.String()
}

func (s *StartDesktopsRequest) SetDesktopId(v []*string) *StartDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *StartDesktopsRequest) SetRegionId(v string) *StartDesktopsRequest {
	s.RegionId = &v
	return s
}

type StartDesktopsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *StartDesktopsResponseBody) SetRequestId(v string) *StartDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type StartDesktopsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s StartDesktopsResponse) GoString() string {
	return s.String()
}

func (s *StartDesktopsResponse) SetHeaders(v map[string]*string) *StartDesktopsResponse {
	s.Headers = v
	return s
}

func (s *StartDesktopsResponse) SetStatusCode(v int32) *StartDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *StartDesktopsResponse) SetBody(v *StartDesktopsResponseBody) *StartDesktopsResponse {
	s.Body = v
	return s
}

type StopDesktopsRequest struct {
	// The IDs of the cloud computers. You can specify 1 to 20 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The billing mode after you stop the cloud computer.
	//
	// Default value: StopCharging. Valid values:
	//
	// 	- StopCharging: After the cloud computer is stopped, the system automatically reclaims computing resources. You are no longer charged for computing resources. However, you are still charged for storage resources.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- KeepCharging: After the cloud computer is stopped, the system does not reclaim resources to prevent insufficient resources and startup failures. You are still charged for the resources.
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// StopCharging
	StoppedMode *string `json:"StoppedMode,omitempty" xml:"StoppedMode,omitempty"`
}

func (s StopDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s StopDesktopsRequest) GoString() string {
	return s.String()
}

func (s *StopDesktopsRequest) SetDesktopId(v []*string) *StopDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *StopDesktopsRequest) SetRegionId(v string) *StopDesktopsRequest {
	s.RegionId = &v
	return s
}

func (s *StopDesktopsRequest) SetStoppedMode(v string) *StopDesktopsRequest {
	s.StoppedMode = &v
	return s
}

type StopDesktopsResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *StopDesktopsResponseBody) SetRequestId(v string) *StopDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type StopDesktopsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s StopDesktopsResponse) GoString() string {
	return s.String()
}

func (s *StopDesktopsResponse) SetHeaders(v map[string]*string) *StopDesktopsResponse {
	s.Headers = v
	return s
}

func (s *StopDesktopsResponse) SetStatusCode(v int32) *StopDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *StopDesktopsResponse) SetBody(v *StopDesktopsResponseBody) *StopDesktopsResponse {
	s.Body = v
	return s
}

type StopInvocationRequest struct {
	// The ID of cloud desktop N. Valid values of N: 1 to 50.
	//
	// example:
	//
	// ecd-7w78ozhjcwa3u****
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// The ID of the execution.
	//
	// This parameter is required.
	//
	// example:
	//
	// t-7d2a745b412b4601b2d47f6a768d****
	InvokeId *string `json:"InvokeId,omitempty" xml:"InvokeId,omitempty"`
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StopInvocationRequest) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationRequest) GoString() string {
	return s.String()
}

func (s *StopInvocationRequest) SetDesktopId(v []*string) *StopInvocationRequest {
	s.DesktopId = v
	return s
}

func (s *StopInvocationRequest) SetInvokeId(v string) *StopInvocationRequest {
	s.InvokeId = &v
	return s
}

func (s *StopInvocationRequest) SetRegionId(v string) *StopInvocationRequest {
	s.RegionId = &v
	return s
}

type StopInvocationResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StopInvocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationResponseBody) GoString() string {
	return s.String()
}

func (s *StopInvocationResponseBody) SetRequestId(v string) *StopInvocationResponseBody {
	s.RequestId = &v
	return s
}

type StopInvocationResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopInvocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopInvocationResponse) String() string {
	return tea.Prettify(s)
}

func (s StopInvocationResponse) GoString() string {
	return s.String()
}

func (s *StopInvocationResponse) SetHeaders(v map[string]*string) *StopInvocationResponse {
	s.Headers = v
	return s
}

func (s *StopInvocationResponse) SetStatusCode(v int32) *StopInvocationResponse {
	s.StatusCode = &v
	return s
}

func (s *StopInvocationResponse) SetBody(v *StopInvocationResponseBody) *StopInvocationResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-ia2zw38bi6cm7****
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Valid values:
	//
	// 	- ALIYUN::GWS::INSTANCE: cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ALIYUN::GWS::INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tags that you want to add to the cloud computers. You can specify 1 to 20 tags.
	//
	// This parameter is required.
	Tag []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	// The tag keys. The tag key cannot be an empty string. The tag key can be up to 128 characters in length. It cannot start with `acs:` or `aliyun` and cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestKey
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The tag values. The tag value can be an empty string. The tag value can be up to 128 characters in length. It cannot start with `acs:` and cannot contain `http://` or `https://`.
	//
	// example:
	//
	// TestValue
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UnbindUserDesktopRequest struct {
	DesktopAgentIds []*string `json:"DesktopAgentIds,omitempty" xml:"DesktopAgentIds,omitempty" type:"Repeated"`
	DesktopGroupId  *string   `json:"DesktopGroupId,omitempty" xml:"DesktopGroupId,omitempty"`
	DesktopIds      []*string `json:"DesktopIds,omitempty" xml:"DesktopIds,omitempty" type:"Repeated"`
	Force           *bool     `json:"Force,omitempty" xml:"Force,omitempty"`
	Reason          *string   `json:"Reason,omitempty" xml:"Reason,omitempty"`
	UserDesktopIds  []*string `json:"UserDesktopIds,omitempty" xml:"UserDesktopIds,omitempty" type:"Repeated"`
}

func (s UnbindUserDesktopRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindUserDesktopRequest) GoString() string {
	return s.String()
}

func (s *UnbindUserDesktopRequest) SetDesktopAgentIds(v []*string) *UnbindUserDesktopRequest {
	s.DesktopAgentIds = v
	return s
}

func (s *UnbindUserDesktopRequest) SetDesktopGroupId(v string) *UnbindUserDesktopRequest {
	s.DesktopGroupId = &v
	return s
}

func (s *UnbindUserDesktopRequest) SetDesktopIds(v []*string) *UnbindUserDesktopRequest {
	s.DesktopIds = v
	return s
}

func (s *UnbindUserDesktopRequest) SetForce(v bool) *UnbindUserDesktopRequest {
	s.Force = &v
	return s
}

func (s *UnbindUserDesktopRequest) SetReason(v string) *UnbindUserDesktopRequest {
	s.Reason = &v
	return s
}

func (s *UnbindUserDesktopRequest) SetUserDesktopIds(v []*string) *UnbindUserDesktopRequest {
	s.UserDesktopIds = v
	return s
}

type UnbindUserDesktopResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindUserDesktopResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindUserDesktopResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindUserDesktopResponseBody) SetRequestId(v string) *UnbindUserDesktopResponseBody {
	s.RequestId = &v
	return s
}

type UnbindUserDesktopResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnbindUserDesktopResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnbindUserDesktopResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindUserDesktopResponse) GoString() string {
	return s.String()
}

func (s *UnbindUserDesktopResponse) SetHeaders(v map[string]*string) *UnbindUserDesktopResponse {
	s.Headers = v
	return s
}

func (s *UnbindUserDesktopResponse) SetStatusCode(v int32) *UnbindUserDesktopResponse {
	s.StatusCode = &v
	return s
}

func (s *UnbindUserDesktopResponse) SetBody(v *UnbindUserDesktopResponseBody) *UnbindUserDesktopResponse {
	s.Body = v
	return s
}

type UnlockVirtualMFADeviceRequest struct {
	// The region ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The serial number of the virtual MFA device, which is a unique identifier.
	//
	// You can call the [DescribeVirtualMFADevices](https://help.aliyun.com/document_detail/206210.html) operation to query the serial number of the virtual MFA device bound to Active Directory (AD) users.
	//
	// This parameter is required.
	//
	// example:
	//
	// a25f297f-f2e1-4a44-bbf1-5f48a6e5****
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
}

func (s UnlockVirtualMFADeviceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnlockVirtualMFADeviceRequest) GoString() string {
	return s.String()
}

func (s *UnlockVirtualMFADeviceRequest) SetRegionId(v string) *UnlockVirtualMFADeviceRequest {
	s.RegionId = &v
	return s
}

func (s *UnlockVirtualMFADeviceRequest) SetSerialNumber(v string) *UnlockVirtualMFADeviceRequest {
	s.SerialNumber = &v
	return s
}

type UnlockVirtualMFADeviceResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnlockVirtualMFADeviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnlockVirtualMFADeviceResponseBody) GoString() string {
	return s.String()
}

func (s *UnlockVirtualMFADeviceResponseBody) SetRequestId(v string) *UnlockVirtualMFADeviceResponseBody {
	s.RequestId = &v
	return s
}

type UnlockVirtualMFADeviceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnlockVirtualMFADeviceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnlockVirtualMFADeviceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnlockVirtualMFADeviceResponse) GoString() string {
	return s.String()
}

func (s *UnlockVirtualMFADeviceResponse) SetHeaders(v map[string]*string) *UnlockVirtualMFADeviceResponse {
	s.Headers = v
	return s
}

func (s *UnlockVirtualMFADeviceResponse) SetStatusCode(v int32) *UnlockVirtualMFADeviceResponse {
	s.StatusCode = &v
	return s
}

func (s *UnlockVirtualMFADeviceResponse) SetBody(v *UnlockVirtualMFADeviceResponseBody) *UnlockVirtualMFADeviceResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	// Specifies whether to unbind all tags from the resource. This parameter takes effect only when TagKey.N is not specified. Default value: false.
	//
	// example:
	//
	// false
	All *bool `json:"All,omitempty" xml:"All,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The resource IDs, which are cloud computer IDs. You can specify 1 to 50 IDs.
	//
	// This parameter is required.
	//
	// example:
	//
	// ecd-ia2zw38bi6cm7****
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// The type of the resource.
	//
	// Valid values:
	//
	// 	- ALIYUN::GWS::INSTANCE: cloud computer.
	//
	// This parameter is required.
	//
	// example:
	//
	// ALIYUN::GWS::INSTANCE
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	// The tag keys. You can specify 1 to 20 tag keys.
	//
	// example:
	//
	// TestKey
	TagKey []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	// The request ID.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateFotaTaskRequest struct {
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the regions supported by Elastic Desktop Service.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The ID of the image update task. You can call the [DescribeFotaTasks](https://help.aliyun.com/document_detail/437001.html) operation to obtain the value of this parameter.
	//
	// This parameter is required.
	//
	// example:
	//
	// aot-c4khwrp9ocml4****
	TaskUid *string `json:"TaskUid,omitempty" xml:"TaskUid,omitempty"`
	// Specifies whether to automatically push the image update task.
	//
	// Valid values:
	//
	// 	- Running: automatically pushes the image update task.
	//
	// 	- Pending: does not automatically push the image update task.
	//
	// example:
	//
	// Pending
	UserStatus *string `json:"UserStatus,omitempty" xml:"UserStatus,omitempty"`
}

func (s UpdateFotaTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFotaTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateFotaTaskRequest) SetRegionId(v string) *UpdateFotaTaskRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateFotaTaskRequest) SetTaskUid(v string) *UpdateFotaTaskRequest {
	s.TaskUid = &v
	return s
}

func (s *UpdateFotaTaskRequest) SetUserStatus(v string) *UpdateFotaTaskRequest {
	s.UserStatus = &v
	return s
}

type UpdateFotaTaskResponseBody struct {
	// The ID of the request.
	//
	// example:
	//
	// 1CBAFFAB-B697-4049-A9B1-67E1FC5F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateFotaTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFotaTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFotaTaskResponseBody) SetRequestId(v string) *UpdateFotaTaskResponseBody {
	s.RequestId = &v
	return s
}

type UpdateFotaTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFotaTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFotaTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFotaTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateFotaTaskResponse) SetHeaders(v map[string]*string) *UpdateFotaTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateFotaTaskResponse) SetStatusCode(v int32) *UpdateFotaTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFotaTaskResponse) SetBody(v *UpdateFotaTaskResponseBody) *UpdateFotaTaskResponse {
	s.Body = v
	return s
}

type UploadImageRequest struct {
	// The size of the data disk. Valid values: 80 to 500. Unit: GiB.
	//
	// example:
	//
	// 80
	DataDiskSize *int32 `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	// The description of the image. The description must be 2 to 256 characters in length and cannot start with `http://` or `https://`.
	//
	// example:
	//
	// test description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// Specifies whether to enable security check.
	//
	// example:
	//
	// true
	EnableSecurityCheck *bool `json:"EnableSecurityCheck,omitempty" xml:"EnableSecurityCheck,omitempty"`
	// Specifies whether the image is a GPU-accelerated image.
	//
	// example:
	//
	// true
	GpuCategory *bool `json:"GpuCategory,omitempty" xml:"GpuCategory,omitempty"`
	// The type of the pre-installed GPU driver.
	//
	// Valid values:
	//
	// 	- gpu_grid9: This GPU driver is used on cloud computers of the following two specifications: graphics – 4 vCPUs, 23 GiB memory, 4 GiB GPU memory, and graphics – 10 vCPUs, 46 GiB memory, 8 GiB GPU memory.
	//
	// 	- gpu_custom: You can install the driver later.
	//
	// 	- gpu_grid12: This GPU driver is used on graphical cloud computers of specifications other than the following two specifications: graphics – 4 vCPUs, 23 GiB memory, & 4 GiB GPU memory, and graphics – 10 vCPUs, 46 GiB memory, & 8 GiB GPU memory.
	//
	// example:
	//
	// gpu_grid9
	GpuDriverType *string `json:"GpuDriverType,omitempty" xml:"GpuDriverType,omitempty"`
	// The name of the image. The name must be 2 to 128 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// Win10_Test
	ImageName *string `json:"ImageName,omitempty" xml:"ImageName,omitempty"`
	// The type of the license that is used to activate the operating system after the image is imported. Valid values:
	//
	// 	- Auto: Elastic Desktop Service detects the operating system of the image and allocates a license to the operating system. In this mode, the system first checks whether a license allocated by an official Alibaba Cloud channel is specified in the `Platform`. If a license allocated by an official Alibaba Cloud channel is specified, the system allocates the license to the imported image. If no such license is specified, the BYOL (Bring Your Own License) mode is used.
	//
	// 	- Aliyun: The license that is allocated by an official Alibaba Cloud channel and is specified by `Platform` is used for the operating system distribution.
	//
	// 	- BYOL: The license that comes with the source operating system is used. When you use the BYOL mode, make sure that your license key is supported by Alibaba Cloud.
	//
	// Default value: Auto.
	//
	// >  Windows 10 cannot be activated by Alibaba Cloud. Set the `LicenseType` to BYOL for Windows 10.
	//
	// example:
	//
	// Auto
	LicenseType *string `json:"LicenseType,omitempty" xml:"LicenseType,omitempty"`
	// The type of the operating system.
	//
	// Valid values:
	//
	// 	- Linux
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Windows
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Windows
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The object path of the image file in Object Storage Service (OSS).
	//
	// This parameter is required.
	//
	// example:
	//
	// https://ossbucket:endpoint/object
	OssObjectPath *string `json:"OssObjectPath,omitempty" xml:"OssObjectPath,omitempty"`
	// The protocol type.
	//
	// Valid values:
	//
	// 	- ASP: in-house Adaptive Streaming Protocol (ASP)
	//
	// example:
	//
	// ASP
	ProtocolType *string `json:"ProtocolType,omitempty" xml:"ProtocolType,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SystemDiskSize *string `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
}

func (s UploadImageRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadImageRequest) GoString() string {
	return s.String()
}

func (s *UploadImageRequest) SetDataDiskSize(v int32) *UploadImageRequest {
	s.DataDiskSize = &v
	return s
}

func (s *UploadImageRequest) SetDescription(v string) *UploadImageRequest {
	s.Description = &v
	return s
}

func (s *UploadImageRequest) SetEnableSecurityCheck(v bool) *UploadImageRequest {
	s.EnableSecurityCheck = &v
	return s
}

func (s *UploadImageRequest) SetGpuCategory(v bool) *UploadImageRequest {
	s.GpuCategory = &v
	return s
}

func (s *UploadImageRequest) SetGpuDriverType(v string) *UploadImageRequest {
	s.GpuDriverType = &v
	return s
}

func (s *UploadImageRequest) SetImageName(v string) *UploadImageRequest {
	s.ImageName = &v
	return s
}

func (s *UploadImageRequest) SetLicenseType(v string) *UploadImageRequest {
	s.LicenseType = &v
	return s
}

func (s *UploadImageRequest) SetOsType(v string) *UploadImageRequest {
	s.OsType = &v
	return s
}

func (s *UploadImageRequest) SetOssObjectPath(v string) *UploadImageRequest {
	s.OssObjectPath = &v
	return s
}

func (s *UploadImageRequest) SetProtocolType(v string) *UploadImageRequest {
	s.ProtocolType = &v
	return s
}

func (s *UploadImageRequest) SetRegionId(v string) *UploadImageRequest {
	s.RegionId = &v
	return s
}

func (s *UploadImageRequest) SetSystemDiskSize(v string) *UploadImageRequest {
	s.SystemDiskSize = &v
	return s
}

type UploadImageResponseBody struct {
	// The ID of the custom image.
	//
	// example:
	//
	// m-d4dwr5tgrgvd****
	ImageId *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	// The ID of the request.
	//
	// example:
	//
	// 2CC66B0A-BA3B-5D87-BFBE-11AAAD7A****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UploadImageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadImageResponseBody) GoString() string {
	return s.String()
}

func (s *UploadImageResponseBody) SetImageId(v string) *UploadImageResponseBody {
	s.ImageId = &v
	return s
}

func (s *UploadImageResponseBody) SetRequestId(v string) *UploadImageResponseBody {
	s.RequestId = &v
	return s
}

type UploadImageResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadImageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadImageResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadImageResponse) GoString() string {
	return s.String()
}

func (s *UploadImageResponse) SetHeaders(v map[string]*string) *UploadImageResponse {
	s.Headers = v
	return s
}

func (s *UploadImageResponse) SetStatusCode(v int32) *UploadImageResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadImageResponse) SetBody(v *UploadImageResponseBody) *UploadImageResponse {
	s.Body = v
	return s
}

type VerifyCenRequest struct {
	// The ID of the CEN instance.
	//
	// This parameter is required.
	//
	// example:
	//
	// cen-3gwy16dojz1m65****
	CenId *string `json:"CenId,omitempty" xml:"CenId,omitempty"`
	// The Alibaba Cloud account to which the CEN instance belongs.
	//
	// 	- If you own the CEN instance, you can skip this parameter.
	//
	// 	- If you do not own the CEN instance, you must specify the ID of the account that owns the CEN instance.
	//
	// example:
	//
	// 102681951715****
	CenOwnerId *int64 `json:"CenOwnerId,omitempty" xml:"CenOwnerId,omitempty"`
	// The IPv4 CIDR block of the associated office network.
	//
	// This parameter is required.
	//
	// example:
	//
	// 47.100.XX.XX
	CidrBlock *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The verification code. If you do not own the CEN instance, you must call the [SendVerifyCode](https://help.aliyun.com/document_detail/436847.html) operation to obtain a verification code.
	//
	// example:
	//
	// 12****
	VerifyCode *string `json:"VerifyCode,omitempty" xml:"VerifyCode,omitempty"`
}

func (s VerifyCenRequest) String() string {
	return tea.Prettify(s)
}

func (s VerifyCenRequest) GoString() string {
	return s.String()
}

func (s *VerifyCenRequest) SetCenId(v string) *VerifyCenRequest {
	s.CenId = &v
	return s
}

func (s *VerifyCenRequest) SetCenOwnerId(v int64) *VerifyCenRequest {
	s.CenOwnerId = &v
	return s
}

func (s *VerifyCenRequest) SetCidrBlock(v string) *VerifyCenRequest {
	s.CidrBlock = &v
	return s
}

func (s *VerifyCenRequest) SetRegionId(v string) *VerifyCenRequest {
	s.RegionId = &v
	return s
}

func (s *VerifyCenRequest) SetVerifyCode(v string) *VerifyCenRequest {
	s.VerifyCode = &v
	return s
}

type VerifyCenResponseBody struct {
	// The recommended IPv4 CIDR blocks. Three CIDR blocks are randomly recommended. This parameter is returned when the `Status` value is `Conflict`.
	CidrBlocks []*string `json:"CidrBlocks,omitempty" xml:"CidrBlocks,omitempty" type:"Repeated"`
	// The ID of the request.
	//
	// example:
	//
	// 0AF9D857-AE96-53D6-B317-5DD665EC4EC0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// The routes provided by the CEN instance.
	RouteEntries []*VerifyCenResponseBodyRouteEntries `json:"RouteEntries,omitempty" xml:"RouteEntries,omitempty" type:"Repeated"`
	// The check result of CIDR block conflict.
	//
	// Valid values:
	//
	// 	- InvalidCen.CenUidInvalid: The Alibaba Cloud account is invalid or the Alibaba Cloud account does not have the permission to access Elastic Desktop Service.
	//
	// 	- VerifyCode.InvalidTokenCode: The verification code is invalid.
	//
	// 	- VerifyCode.ReachTokenRetryTime: The maximum number of times for entering a verification code reaches the limit.
	//
	// 	- Conflict: A CIDR block conflict exists. If the verification result of at least one route is Conflict, Conflict is returned for this parameter.
	//
	// 	- Access: The verification is passed. If the verification result for all routes is Access, Access is returned for this parameter.
	//
	// 	- InvalidCen.ParameterCenInstanceId: The Alibaba Cloud account does not own the CEN instance.
	//
	// example:
	//
	// Access
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s VerifyCenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s VerifyCenResponseBody) GoString() string {
	return s.String()
}

func (s *VerifyCenResponseBody) SetCidrBlocks(v []*string) *VerifyCenResponseBody {
	s.CidrBlocks = v
	return s
}

func (s *VerifyCenResponseBody) SetRequestId(v string) *VerifyCenResponseBody {
	s.RequestId = &v
	return s
}

func (s *VerifyCenResponseBody) SetRouteEntries(v []*VerifyCenResponseBodyRouteEntries) *VerifyCenResponseBody {
	s.RouteEntries = v
	return s
}

func (s *VerifyCenResponseBody) SetStatus(v string) *VerifyCenResponseBody {
	s.Status = &v
	return s
}

type VerifyCenResponseBodyRouteEntries struct {
	// The CIDR block of the route.
	//
	// example:
	//
	// 172.16.111.3****
	DestinationCidrBlock *string `json:"DestinationCidrBlock,omitempty" xml:"DestinationCidrBlock,omitempty"`
	// The ID of the instance corresponding to the route.
	//
	// example:
	//
	// vpc-uf62bu0xs5j8md54p****
	NextHopInstanceId *string `json:"NextHopInstanceId,omitempty" xml:"NextHopInstanceId,omitempty"`
	// The region ID of the route.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The verification result of the route.
	//
	// Valid values:
	//
	// 	- Conflict: A CIDR block conflict exists.
	//
	// 	- Access: The verification is passed.
	//
	// example:
	//
	// Access
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s VerifyCenResponseBodyRouteEntries) String() string {
	return tea.Prettify(s)
}

func (s VerifyCenResponseBodyRouteEntries) GoString() string {
	return s.String()
}

func (s *VerifyCenResponseBodyRouteEntries) SetDestinationCidrBlock(v string) *VerifyCenResponseBodyRouteEntries {
	s.DestinationCidrBlock = &v
	return s
}

func (s *VerifyCenResponseBodyRouteEntries) SetNextHopInstanceId(v string) *VerifyCenResponseBodyRouteEntries {
	s.NextHopInstanceId = &v
	return s
}

func (s *VerifyCenResponseBodyRouteEntries) SetRegionId(v string) *VerifyCenResponseBodyRouteEntries {
	s.RegionId = &v
	return s
}

func (s *VerifyCenResponseBodyRouteEntries) SetStatus(v string) *VerifyCenResponseBodyRouteEntries {
	s.Status = &v
	return s
}

type VerifyCenResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *VerifyCenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s VerifyCenResponse) String() string {
	return tea.Prettify(s)
}

func (s VerifyCenResponse) GoString() string {
	return s.String()
}

func (s *VerifyCenResponse) SetHeaders(v map[string]*string) *VerifyCenResponse {
	s.Headers = v
	return s
}

func (s *VerifyCenResponse) SetStatusCode(v int32) *VerifyCenResponse {
	s.StatusCode = &v
	return s
}

func (s *VerifyCenResponse) SetBody(v *VerifyCenResponseBody) *VerifyCenResponse {
	s.Body = v
	return s
}

type WakeupDesktopsRequest struct {
	// This parameter is required.
	DesktopId []*string `json:"DesktopId,omitempty" xml:"DesktopId,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s WakeupDesktopsRequest) String() string {
	return tea.Prettify(s)
}

func (s WakeupDesktopsRequest) GoString() string {
	return s.String()
}

func (s *WakeupDesktopsRequest) SetDesktopId(v []*string) *WakeupDesktopsRequest {
	s.DesktopId = v
	return s
}

func (s *WakeupDesktopsRequest) SetRegionId(v string) *WakeupDesktopsRequest {
	s.RegionId = &v
	return s
}

type WakeupDesktopsResponseBody struct {
	// example:
	//
	// 6557DBA9-CF3E-5C1B-B1F1-68FDA599****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s WakeupDesktopsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WakeupDesktopsResponseBody) GoString() string {
	return s.String()
}

func (s *WakeupDesktopsResponseBody) SetRequestId(v string) *WakeupDesktopsResponseBody {
	s.RequestId = &v
	return s
}

type WakeupDesktopsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WakeupDesktopsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s WakeupDesktopsResponse) String() string {
	return tea.Prettify(s)
}

func (s WakeupDesktopsResponse) GoString() string {
	return s.String()
}

func (s *WakeupDesktopsResponse) SetHeaders(v map[string]*string) *WakeupDesktopsResponse {
	s.Headers = v
	return s
}

func (s *WakeupDesktopsResponse) SetStatusCode(v int32) *WakeupDesktopsResponse {
	s.StatusCode = &v
	return s
}

func (s *WakeupDesktopsResponse) SetBody(v *WakeupDesktopsResponseBody) *WakeupDesktopsResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("regional")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ecd"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unlocks a convenience office network that is automatically locked due to a long idle period of time.
//
// Description:
//
// If you do not create any cloud computer in a convenience office network within 15 days, the office network is automatically locked and virtual private cloud (VPC) resources are released. If you want to resume the office network, you can call this operation to unlock the office network.
//
// @param request - ActivateOfficeSiteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ActivateOfficeSiteResponse
func (client *Client) ActivateOfficeSiteWithOptions(request *ActivateOfficeSiteRequest, runtime *util.RuntimeOptions) (_result *ActivateOfficeSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ActivateOfficeSite"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ActivateOfficeSiteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unlocks a convenience office network that is automatically locked due to a long idle period of time.
//
// Description:
//
// If you do not create any cloud computer in a convenience office network within 15 days, the office network is automatically locked and virtual private cloud (VPC) resources are released. If you want to resume the office network, you can call this operation to unlock the office network.
//
// @param request - ActivateOfficeSiteRequest
//
// @return ActivateOfficeSiteResponse
func (client *Client) ActivateOfficeSite(request *ActivateOfficeSiteRequest) (_result *ActivateOfficeSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActivateOfficeSiteResponse{}
	_body, _err := client.ActivateOfficeSiteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加桌面超卖用户组
//
// @param request - AddDesktopOversoldUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddDesktopOversoldUserGroupResponse
func (client *Client) AddDesktopOversoldUserGroupWithOptions(request *AddDesktopOversoldUserGroupRequest, runtime *util.RuntimeOptions) (_result *AddDesktopOversoldUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDesktopOversoldUserGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDesktopOversoldUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加桌面超卖用户组
//
// @param request - AddDesktopOversoldUserGroupRequest
//
// @return AddDesktopOversoldUserGroupResponse
func (client *Client) AddDesktopOversoldUserGroup(request *AddDesktopOversoldUserGroupRequest) (_result *AddDesktopOversoldUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDesktopOversoldUserGroupResponse{}
	_body, _err := client.AddDesktopOversoldUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds trusted devices.
//
// Description:
//
// Each device can be registered in only one Alibaba Cloud account. If you register a device that has been registered in another Alibaba Cloud account, an error is reported.
//
// @param request - AddDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddDevicesResponse
func (client *Client) AddDevicesWithOptions(request *AddDevicesRequest, runtime *util.RuntimeOptions) (_result *AddDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIds)) {
		query["DeviceIds"] = request.DeviceIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDevices"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds trusted devices.
//
// Description:
//
// Each device can be registered in only one Alibaba Cloud account. If you register a device that has been registered in another Alibaba Cloud account, an error is reported.
//
// @param request - AddDevicesRequest
//
// @return AddDevicesResponse
func (client *Client) AddDevices(request *AddDevicesRequest) (_result *AddDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddDevicesResponse{}
	_body, _err := client.AddDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Shares a folder of a cloud disk with other users.
//
// Description:
//
// You can call this operation to share a specific folder with other users. You can also configure the folder permissions.
//
// @param tmpReq - AddFilePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddFilePermissionResponse
func (client *Client) AddFilePermissionWithOptions(tmpReq *AddFilePermissionRequest, runtime *util.RuntimeOptions) (_result *AddFilePermissionResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddFilePermissionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.MemberList)) {
		request.MemberListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MemberList, tea.String("MemberList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.MemberListShrink)) {
		query["MemberList"] = request.MemberListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddFilePermission"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddFilePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Shares a folder of a cloud disk with other users.
//
// Description:
//
// You can call this operation to share a specific folder with other users. You can also configure the folder permissions.
//
// @param request - AddFilePermissionRequest
//
// @return AddFilePermissionResponse
func (client *Client) AddFilePermission(request *AddFilePermissionRequest) (_result *AddFilePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddFilePermissionResponse{}
	_body, _err := client.AddFilePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds authorized end users of a desktop group.
//
// @param request - AddUserToDesktopGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddUserToDesktopGroupResponse
func (client *Client) AddUserToDesktopGroupWithOptions(request *AddUserToDesktopGroupRequest, runtime *util.RuntimeOptions) (_result *AddUserToDesktopGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupIds)) {
		query["DesktopGroupIds"] = request.DesktopGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserIds)) {
		query["EndUserIds"] = request.EndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddUserToDesktopGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddUserToDesktopGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds authorized end users of a desktop group.
//
// @param request - AddUserToDesktopGroupRequest
//
// @return AddUserToDesktopGroupResponse
func (client *Client) AddUserToDesktopGroup(request *AddUserToDesktopGroupRequest) (_result *AddUserToDesktopGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddUserToDesktopGroupResponse{}
	_body, _err := client.AddUserToDesktopGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加用户到超卖用户组
//
// @param request - AddUserToDesktopOversoldUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddUserToDesktopOversoldUserGroupResponse
func (client *Client) AddUserToDesktopOversoldUserGroupWithOptions(request *AddUserToDesktopOversoldUserGroupRequest, runtime *util.RuntimeOptions) (_result *AddUserToDesktopOversoldUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddUserAmount)) {
		query["AddUserAmount"] = request.AddUserAmount
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddUserToDesktopOversoldUserGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddUserToDesktopOversoldUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加用户到超卖用户组
//
// @param request - AddUserToDesktopOversoldUserGroupRequest
//
// @return AddUserToDesktopOversoldUserGroupResponse
func (client *Client) AddUserToDesktopOversoldUserGroup(request *AddUserToDesktopOversoldUserGroupRequest) (_result *AddUserToDesktopOversoldUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddUserToDesktopOversoldUserGroupResponse{}
	_body, _err := client.AddUserToDesktopOversoldUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Apply an automatic snapshot policy to cloud computers. After the automatic snapshot policy is applied to the cloud computers, Elastic Desktop Service automatically creates snapshots for the cloud computers based on the time specified in the automatic snapshot policy.
//
// Description:
//
// You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as prompted in the Change Automatic Snapshot Policy panel.
//
// After you associate an automatic snapshot policy with the cloud desktop, the system creates snapshots for the cloud desktop based on the policy.
//
// @param request - ApplyAutoSnapshotPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyAutoSnapshotPolicyResponse
func (client *Client) ApplyAutoSnapshotPolicyWithOptions(request *ApplyAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *ApplyAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyAutoSnapshotPolicy"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyAutoSnapshotPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Apply an automatic snapshot policy to cloud computers. After the automatic snapshot policy is applied to the cloud computers, Elastic Desktop Service automatically creates snapshots for the cloud computers based on the time specified in the automatic snapshot policy.
//
// Description:
//
// You can also associate an automatic snapshot policy with a cloud desktop in the Elastic Desktop Service (EDS) console. To do so, perform the following steps: 1. Log on to the EDS console. 2. Choose Desktops and Groups > Desktops in the left-side navigation pane. 3. Find the cloud desktop that you want to manage on the Cloud Desktops page and choose More > Change Automatic Snapshot Policy in the Actions column. 4. Configure a policy for the cloud desktop as prompted in the Change Automatic Snapshot Policy panel.
//
// After you associate an automatic snapshot policy with the cloud desktop, the system creates snapshots for the cloud desktop based on the policy.
//
// @param request - ApplyAutoSnapshotPolicyRequest
//
// @return ApplyAutoSnapshotPolicyResponse
func (client *Client) ApplyAutoSnapshotPolicy(request *ApplyAutoSnapshotPolicyRequest) (_result *ApplyAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAutoSnapshotPolicyResponse{}
	_body, _err := client.ApplyAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Applies for the coordinate permissions.
//
// @param request - ApplyCoordinatePrivilegeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyCoordinatePrivilegeResponse
func (client *Client) ApplyCoordinatePrivilegeWithOptions(request *ApplyCoordinatePrivilegeRequest, runtime *util.RuntimeOptions) (_result *ApplyCoordinatePrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoId)) {
		query["CoId"] = request.CoId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		query["UserType"] = request.UserType
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyCoordinatePrivilege"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyCoordinatePrivilegeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Applies for the coordinate permissions.
//
// @param request - ApplyCoordinatePrivilegeRequest
//
// @return ApplyCoordinatePrivilegeResponse
func (client *Client) ApplyCoordinatePrivilege(request *ApplyCoordinatePrivilegeRequest) (_result *ApplyCoordinatePrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyCoordinatePrivilegeResponse{}
	_body, _err := client.ApplyCoordinatePrivilegeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Applies for coordination monitoring. This operation is mainly used in administrator assistance scenarios and education scenarios.
//
// @param request - ApplyCoordinationForMonitoringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyCoordinationForMonitoringResponse
func (client *Client) ApplyCoordinationForMonitoringWithOptions(request *ApplyCoordinationForMonitoringRequest, runtime *util.RuntimeOptions) (_result *ApplyCoordinationForMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoordinatePolicyType)) {
		query["CoordinatePolicyType"] = request.CoordinatePolicyType
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.InitiatorType)) {
		query["InitiatorType"] = request.InitiatorType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceCandidates)) {
		query["ResourceCandidates"] = request.ResourceCandidates
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyCoordinationForMonitoring"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyCoordinationForMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Applies for coordination monitoring. This operation is mainly used in administrator assistance scenarios and education scenarios.
//
// @param request - ApplyCoordinationForMonitoringRequest
//
// @return ApplyCoordinationForMonitoringResponse
func (client *Client) ApplyCoordinationForMonitoring(request *ApplyCoordinationForMonitoringRequest) (_result *ApplyCoordinationForMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyCoordinationForMonitoringResponse{}
	_body, _err := client.ApplyCoordinationForMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Allows you to upgrade images.
//
// Description:
//
// The cloud computers for which you want to allow image updates must be in the Running state.
//
// @param request - ApproveFotaUpdateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApproveFotaUpdateResponse
func (client *Client) ApproveFotaUpdateWithOptions(request *ApproveFotaUpdateRequest, runtime *util.RuntimeOptions) (_result *ApproveFotaUpdateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppVersion)) {
		query["AppVersion"] = request.AppVersion
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ApproveFotaUpdate"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApproveFotaUpdateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Allows you to upgrade images.
//
// Description:
//
// The cloud computers for which you want to allow image updates must be in the Running state.
//
// @param request - ApproveFotaUpdateRequest
//
// @return ApproveFotaUpdateResponse
func (client *Client) ApproveFotaUpdate(request *ApproveFotaUpdateRequest) (_result *ApproveFotaUpdateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApproveFotaUpdateResponse{}
	_body, _err := client.ApproveFotaUpdateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a premium bandwidth plan to an office network. A premium bandwidth plan is used together with only one office network.
//
// @param request - AssociateNetworkPackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AssociateNetworkPackageResponse
func (client *Client) AssociateNetworkPackageWithOptions(request *AssociateNetworkPackageRequest, runtime *util.RuntimeOptions) (_result *AssociateNetworkPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkPackageId)) {
		query["NetworkPackageId"] = request.NetworkPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AssociateNetworkPackage"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AssociateNetworkPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds a premium bandwidth plan to an office network. A premium bandwidth plan is used together with only one office network.
//
// @param request - AssociateNetworkPackageRequest
//
// @return AssociateNetworkPackageResponse
func (client *Client) AssociateNetworkPackage(request *AssociateNetworkPackageRequest) (_result *AssociateNetworkPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AssociateNetworkPackageResponse{}
	_body, _err := client.AssociateNetworkPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds an advanced office network to a Cloud Enterprise Network (CEN) instance.
//
// Description:
//
// Prerequisites
//
// 	- A CEN instance is created.
//
// 	- The office network is an advanced office network, and the account system type is convenient account.
//
// >  The office network is added to the CEN instance when you create the instance. An office network can be added to only one CEN instance.
//
// @param request - AttachCenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachCenResponse
func (client *Client) AttachCenWithOptions(request *AttachCenRequest, runtime *util.RuntimeOptions) (_result *AttachCenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CenId)) {
		query["CenId"] = request.CenId
	}

	if !tea.BoolValue(util.IsUnset(request.CenOwnerId)) {
		query["CenOwnerId"] = request.CenOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyCode)) {
		query["VerifyCode"] = request.VerifyCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachCen"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachCenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds an advanced office network to a Cloud Enterprise Network (CEN) instance.
//
// Description:
//
// Prerequisites
//
// 	- A CEN instance is created.
//
// 	- The office network is an advanced office network, and the account system type is convenient account.
//
// >  The office network is added to the CEN instance when you create the instance. An office network can be added to only one CEN instance.
//
// @param request - AttachCenRequest
//
// @return AttachCenResponse
func (client *Client) AttachCen(request *AttachCenRequest) (_result *AttachCenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachCenResponse{}
	_body, _err := client.AttachCenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Binds a hardware client to a user.
//
// @param request - AttachEndUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AttachEndUserResponse
func (client *Client) AttachEndUserWithOptions(request *AttachEndUserRequest, runtime *util.RuntimeOptions) (_result *AttachEndUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdDomain)) {
		query["AdDomain"] = request.AdDomain
	}

	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		query["UserType"] = request.UserType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AttachEndUser"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AttachEndUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Binds a hardware client to a user.
//
// @param request - AttachEndUserRequest
//
// @return AttachEndUserResponse
func (client *Client) AttachEndUser(request *AttachEndUserRequest) (_result *AttachEndUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AttachEndUserResponse{}
	_body, _err := client.AttachEndUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels an automatic snapshot policy for cloud computers.
//
// @param request - CancelAutoSnapshotPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelAutoSnapshotPolicyResponse
func (client *Client) CancelAutoSnapshotPolicyWithOptions(request *CancelAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *CancelAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelAutoSnapshotPolicy"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelAutoSnapshotPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancels an automatic snapshot policy for cloud computers.
//
// @param request - CancelAutoSnapshotPolicyRequest
//
// @return CancelAutoSnapshotPolicyResponse
func (client *Client) CancelAutoSnapshotPolicy(request *CancelAutoSnapshotPolicyRequest) (_result *CancelAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelAutoSnapshotPolicyResponse{}
	_body, _err := client.CancelAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels a file sharing task.
//
// @param request - CancelCdsFileShareLinkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelCdsFileShareLinkResponse
func (client *Client) CancelCdsFileShareLinkWithOptions(request *CancelCdsFileShareLinkRequest, runtime *util.RuntimeOptions) (_result *CancelCdsFileShareLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.ShareId)) {
		query["ShareId"] = request.ShareId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelCdsFileShareLink"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelCdsFileShareLinkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancels a file sharing task.
//
// @param request - CancelCdsFileShareLinkRequest
//
// @return CancelCdsFileShareLinkResponse
func (client *Client) CancelCdsFileShareLink(request *CancelCdsFileShareLinkRequest) (_result *CancelCdsFileShareLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelCdsFileShareLinkResponse{}
	_body, _err := client.CancelCdsFileShareLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels monitoring on stream collaboration.
//
// @param request - CancelCoordinationForMonitoringRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelCoordinationForMonitoringResponse
func (client *Client) CancelCoordinationForMonitoringWithOptions(request *CancelCoordinationForMonitoringRequest, runtime *util.RuntimeOptions) (_result *CancelCoordinationForMonitoringResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoIds)) {
		query["CoIds"] = request.CoIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		query["UserType"] = request.UserType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelCoordinationForMonitoring"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelCoordinationForMonitoringResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancels monitoring on stream collaboration.
//
// @param request - CancelCoordinationForMonitoringRequest
//
// @return CancelCoordinationForMonitoringResponse
func (client *Client) CancelCoordinationForMonitoring(request *CancelCoordinationForMonitoringRequest) (_result *CancelCoordinationForMonitoringResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelCoordinationForMonitoringResponse{}
	_body, _err := client.CancelCoordinationForMonitoringWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Cancels the operation of copying an image to another region.
//
// @param request - CancelCopyImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelCopyImageResponse
func (client *Client) CancelCopyImageWithOptions(request *CancelCopyImageRequest, runtime *util.RuntimeOptions) (_result *CancelCopyImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelCopyImage"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelCopyImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Cancels the operation of copying an image to another region.
//
// @param request - CancelCopyImageRequest
//
// @return CancelCopyImageResponse
func (client *Client) CancelCopyImage(request *CancelCopyImageRequest) (_result *CancelCopyImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelCopyImageResponse{}
	_body, _err := client.CancelCopyImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Clones an existing policy.
//
// @param request - ClonePolicyGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ClonePolicyGroupResponse
func (client *Client) ClonePolicyGroupWithOptions(request *ClonePolicyGroupRequest, runtime *util.RuntimeOptions) (_result *ClonePolicyGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ClonePolicyGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClonePolicyGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Clones an existing policy.
//
// @param request - ClonePolicyGroupRequest
//
// @return ClonePolicyGroupResponse
func (client *Client) ClonePolicyGroup(request *ClonePolicyGroupRequest) (_result *ClonePolicyGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ClonePolicyGroupResponse{}
	_body, _err := client.ClonePolicyGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Completes a file uploading task.
//
// @param request - CompleteCdsFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CompleteCdsFileResponse
func (client *Client) CompleteCdsFileWithOptions(request *CompleteCdsFileRequest, runtime *util.RuntimeOptions) (_result *CompleteCdsFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UploadId)) {
		query["UploadId"] = request.UploadId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CompleteCdsFile"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CompleteCdsFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Completes a file uploading task.
//
// @param request - CompleteCdsFileRequest
//
// @return CompleteCdsFileResponse
func (client *Client) CompleteCdsFile(request *CompleteCdsFileRequest) (_result *CompleteCdsFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CompleteCdsFileResponse{}
	_body, _err := client.CompleteCdsFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a conditional forwarder and trust relationship for a high-definition experience (HDX)-based office network (formerly workspace). You can call the operation to configure a trust relationship for an enterprise Active Directory (AD) office network.
//
// @param request - ConfigADConnectorTrustRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfigADConnectorTrustResponse
func (client *Client) ConfigADConnectorTrustWithOptions(request *ConfigADConnectorTrustRequest, runtime *util.RuntimeOptions) (_result *ConfigADConnectorTrustResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RdsLicenseDomain)) {
		query["RdsLicenseDomain"] = request.RdsLicenseDomain
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TrustKey)) {
		query["TrustKey"] = request.TrustKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigADConnectorTrust"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigADConnectorTrustResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a conditional forwarder and trust relationship for a high-definition experience (HDX)-based office network (formerly workspace). You can call the operation to configure a trust relationship for an enterprise Active Directory (AD) office network.
//
// @param request - ConfigADConnectorTrustRequest
//
// @return ConfigADConnectorTrustResponse
func (client *Client) ConfigADConnectorTrust(request *ConfigADConnectorTrustRequest) (_result *ConfigADConnectorTrustResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigADConnectorTrustResponse{}
	_body, _err := client.ConfigADConnectorTrustWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ConfigADConnectorUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfigADConnectorUserResponse
func (client *Client) ConfigADConnectorUserWithOptions(request *ConfigADConnectorUserRequest, runtime *util.RuntimeOptions) (_result *ConfigADConnectorUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainPassword)) {
		query["DomainPassword"] = request.DomainPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DomainUserName)) {
		query["DomainUserName"] = request.DomainUserName
	}

	if !tea.BoolValue(util.IsUnset(request.OUName)) {
		query["OUName"] = request.OUName
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfigADConnectorUser"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfigADConnectorUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ConfigADConnectorUserRequest
//
// @return ConfigADConnectorUserResponse
func (client *Client) ConfigADConnectorUser(request *ConfigADConnectorUserRequest) (_result *ConfigADConnectorUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfigADConnectorUserResponse{}
	_body, _err := client.ConfigADConnectorUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Copies a file or a directory.
//
// @param request - CopyCdsFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopyCdsFileResponse
func (client *Client) CopyCdsFileWithOptions(request *CopyCdsFileRequest, runtime *util.RuntimeOptions) (_result *CopyCdsFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRename)) {
		query["AutoRename"] = request.AutoRename
	}

	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileReceiverId)) {
		query["FileReceiverId"] = request.FileReceiverId
	}

	if !tea.BoolValue(util.IsUnset(request.FileReceiverType)) {
		query["FileReceiverType"] = request.FileReceiverType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFolderId)) {
		query["ParentFolderId"] = request.ParentFolderId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CopyCdsFile"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CopyCdsFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Copies a file or a directory.
//
// @param request - CopyCdsFileRequest
//
// @return CopyCdsFileResponse
func (client *Client) CopyCdsFile(request *CopyCdsFileRequest) (_result *CopyCdsFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyCdsFileResponse{}
	_body, _err := client.CopyCdsFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Copy an image to another region. If you want to share an image across regions, you can call this operation to copy the image to the destination region and then share the image.
//
// @param request - CopyImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopyImageResponse
func (client *Client) CopyImageWithOptions(request *CopyImageRequest, runtime *util.RuntimeOptions) (_result *CopyImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DestinationDescription)) {
		query["DestinationDescription"] = request.DestinationDescription
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationImageName)) {
		query["DestinationImageName"] = request.DestinationImageName
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationRegionId)) {
		query["DestinationRegionId"] = request.DestinationRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CopyImage"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CopyImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Copy an image to another region. If you want to share an image across regions, you can call this operation to copy the image to the destination region and then share the image.
//
// @param request - CopyImageRequest
//
// @return CopyImageResponse
func (client *Client) CopyImage(request *CopyImageRequest) (_result *CopyImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyImageResponse{}
	_body, _err := client.CopyImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a directory of the Active Directory (AD) type.
//
// Description:
//
// An AD directory is used to connect to an enterprise\\"s existing Active Directory and is suitable for large-scale cloud computer deployment. You are charged directory fees when you connect your AD to cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
//
// @param request - CreateADConnectorDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateADConnectorDirectoryResponse
func (client *Client) CreateADConnectorDirectoryWithOptions(request *CreateADConnectorDirectoryRequest, runtime *util.RuntimeOptions) (_result *CreateADConnectorDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopAccessType)) {
		query["DesktopAccessType"] = request.DesktopAccessType
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryName)) {
		query["DirectoryName"] = request.DirectoryName
	}

	if !tea.BoolValue(util.IsUnset(request.DnsAddress)) {
		query["DnsAddress"] = request.DnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainPassword)) {
		query["DomainPassword"] = request.DomainPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DomainUserName)) {
		query["DomainUserName"] = request.DomainUserName
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAdminAccess)) {
		query["EnableAdminAccess"] = request.EnableAdminAccess
	}

	if !tea.BoolValue(util.IsUnset(request.MfaEnabled)) {
		query["MfaEnabled"] = request.MfaEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainDnsAddress)) {
		query["SubDomainDnsAddress"] = request.SubDomainDnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainName)) {
		query["SubDomainName"] = request.SubDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateADConnectorDirectory"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateADConnectorDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a directory of the Active Directory (AD) type.
//
// Description:
//
// An AD directory is used to connect to an enterprise\\"s existing Active Directory and is suitable for large-scale cloud computer deployment. You are charged directory fees when you connect your AD to cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
//
// @param request - CreateADConnectorDirectoryRequest
//
// @return CreateADConnectorDirectoryResponse
func (client *Client) CreateADConnectorDirectory(request *CreateADConnectorDirectoryRequest) (_result *CreateADConnectorDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateADConnectorDirectoryResponse{}
	_body, _err := client.CreateADConnectorDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an enterprise Active Directory (AD) office network (formerly workspace). Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
//
// Description:
//
// When you create an enterprise AD office network, the system automatically creates an AD connector to connect to an enterprise AD. You are charged for the AD connector. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
//
// After you call this operation to create an AD office network, you must perform the following steps to complete AD domain setting:
//
// 1.  Configure a conditional forwarder in a Domain Name System (DNS) server.
//
// 2.  Configure a trust relationship in an AD domain controller and call the [ConfigADConnectorTrust](https://help.aliyun.com/document_detail/311258.html) operation to configure the trust relationship with the AD office network.
//
// 3.  Call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to query a list of organizational units (OUs) of the AD domain, and call the [ConfigADConnectorUser](https://help.aliyun.com/document_detail/311262.html) operation to specify an OU and administrator for the AD office network.
//
//     >  When you create the AD office network, take note of the DomainUserName and DomainPassword parameters. If you specify the parameters, you need to only configure a conditional forwarder. If you do not specify the parameters, you must configure a conditional forwarder, trust relationship, and OU as prompted.
//
// For more information, see [Create and manage enterprise AD office networks](https://help.aliyun.com/document_detail/214469.html).
//
// @param request - CreateADConnectorOfficeSiteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateADConnectorOfficeSiteResponse
func (client *Client) CreateADConnectorOfficeSiteWithOptions(request *CreateADConnectorOfficeSiteRequest, runtime *util.RuntimeOptions) (_result *CreateADConnectorOfficeSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdHostname)) {
		query["AdHostname"] = request.AdHostname
	}

	if !tea.BoolValue(util.IsUnset(request.BackupDCHostname)) {
		query["BackupDCHostname"] = request.BackupDCHostname
	}

	if !tea.BoolValue(util.IsUnset(request.BackupDns)) {
		query["BackupDns"] = request.BackupDns
	}

	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.CenId)) {
		query["CenId"] = request.CenId
	}

	if !tea.BoolValue(util.IsUnset(request.CenOwnerId)) {
		query["CenOwnerId"] = request.CenOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopAccessType)) {
		query["DesktopAccessType"] = request.DesktopAccessType
	}

	if !tea.BoolValue(util.IsUnset(request.DnsAddress)) {
		query["DnsAddress"] = request.DnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainPassword)) {
		query["DomainPassword"] = request.DomainPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DomainUserName)) {
		query["DomainUserName"] = request.DomainUserName
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAdminAccess)) {
		query["EnableAdminAccess"] = request.EnableAdminAccess
	}

	if !tea.BoolValue(util.IsUnset(request.EnableInternetAccess)) {
		query["EnableInternetAccess"] = request.EnableInternetAccess
	}

	if !tea.BoolValue(util.IsUnset(request.MfaEnabled)) {
		query["MfaEnabled"] = request.MfaEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteName)) {
		query["OfficeSiteName"] = request.OfficeSiteName
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Specification)) {
		query["Specification"] = request.Specification
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainDnsAddress)) {
		query["SubDomainDnsAddress"] = request.SubDomainDnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainName)) {
		query["SubDomainName"] = request.SubDomainName
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyCode)) {
		query["VerifyCode"] = request.VerifyCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateADConnectorOfficeSite"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateADConnectorOfficeSiteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an enterprise Active Directory (AD) office network (formerly workspace). Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
//
// Description:
//
// When you create an enterprise AD office network, the system automatically creates an AD connector to connect to an enterprise AD. You are charged for the AD connector. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
//
// After you call this operation to create an AD office network, you must perform the following steps to complete AD domain setting:
//
// 1.  Configure a conditional forwarder in a Domain Name System (DNS) server.
//
// 2.  Configure a trust relationship in an AD domain controller and call the [ConfigADConnectorTrust](https://help.aliyun.com/document_detail/311258.html) operation to configure the trust relationship with the AD office network.
//
// 3.  Call the [ListUserAdOrganizationUnits](https://help.aliyun.com/document_detail/311259.html) operation to query a list of organizational units (OUs) of the AD domain, and call the [ConfigADConnectorUser](https://help.aliyun.com/document_detail/311262.html) operation to specify an OU and administrator for the AD office network.
//
//     >  When you create the AD office network, take note of the DomainUserName and DomainPassword parameters. If you specify the parameters, you need to only configure a conditional forwarder. If you do not specify the parameters, you must configure a conditional forwarder, trust relationship, and OU as prompted.
//
// For more information, see [Create and manage enterprise AD office networks](https://help.aliyun.com/document_detail/214469.html).
//
// @param request - CreateADConnectorOfficeSiteRequest
//
// @return CreateADConnectorOfficeSiteResponse
func (client *Client) CreateADConnectorOfficeSite(request *CreateADConnectorOfficeSiteRequest) (_result *CreateADConnectorOfficeSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateADConnectorOfficeSiteResponse{}
	_body, _err := client.CreateADConnectorOfficeSiteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a File Storage NAS (NAS) file system and mount the file system to the workspace in which a desktop group resides.
//
// @param request - CreateAndBindNasFileSystemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAndBindNasFileSystemResponse
func (client *Client) CreateAndBindNasFileSystemWithOptions(request *CreateAndBindNasFileSystemRequest, runtime *util.RuntimeOptions) (_result *CreateAndBindNasFileSystemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptType)) {
		query["EncryptType"] = request.EncryptType
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserIds)) {
		query["EndUserIds"] = request.EndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemName)) {
		query["FileSystemName"] = request.FileSystemName
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAndBindNasFileSystem"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAndBindNasFileSystemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a File Storage NAS (NAS) file system and mount the file system to the workspace in which a desktop group resides.
//
// @param request - CreateAndBindNasFileSystemRequest
//
// @return CreateAndBindNasFileSystemResponse
func (client *Client) CreateAndBindNasFileSystem(request *CreateAndBindNasFileSystemRequest) (_result *CreateAndBindNasFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAndBindNasFileSystemResponse{}
	_body, _err := client.CreateAndBindNasFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an automatic snapshot policy. WUYING WorkSpace automatically creates snapshots based on the time specified by the cron expression in the automatic snapshot policy.
//
// Description:
//
// You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
//
// @param request - CreateAutoSnapshotPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAutoSnapshotPolicyResponse
func (client *Client) CreateAutoSnapshotPolicyWithOptions(request *CreateAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *CreateAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CronExpression)) {
		query["CronExpression"] = request.CronExpression
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RetentionDays)) {
		query["RetentionDays"] = request.RetentionDays
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAutoSnapshotPolicy"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAutoSnapshotPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an automatic snapshot policy. WUYING WorkSpace automatically creates snapshots based on the time specified by the cron expression in the automatic snapshot policy.
//
// Description:
//
// You can call the operation to create an automatic snapshot policy based on a CRON expression. Then, the system automatically creates snapshots of a cloud desktop based on the policy.
//
// @param request - CreateAutoSnapshotPolicyRequest
//
// @return CreateAutoSnapshotPolicyResponse
func (client *Client) CreateAutoSnapshotPolicy(request *CreateAutoSnapshotPolicyRequest) (_result *CreateAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAutoSnapshotPolicyResponse{}
	_body, _err := client.CreateAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom cloud computer template.
//
// Description:
//
// Cloud computer templates include system templates and custom templates. A system template is the default template provided by Alibaba Cloud. You can call this operation to create a custom template.
//
// @param request - CreateBundleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBundleResponse
func (client *Client) CreateBundleWithOptions(request *CreateBundleRequest, runtime *util.RuntimeOptions) (_result *CreateBundleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BundleName)) {
		query["BundleName"] = request.BundleName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopType)) {
		query["DesktopType"] = request.DesktopType
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RootDiskPerformanceLevel)) {
		query["RootDiskPerformanceLevel"] = request.RootDiskPerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.RootDiskSizeGib)) {
		query["RootDiskSizeGib"] = request.RootDiskSizeGib
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskPerformanceLevel)) {
		query["UserDiskPerformanceLevel"] = request.UserDiskPerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskSizeGib)) {
		query["UserDiskSizeGib"] = request.UserDiskSizeGib
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBundle"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBundleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom cloud computer template.
//
// Description:
//
// Cloud computer templates include system templates and custom templates. A system template is the default template provided by Alibaba Cloud. You can call this operation to create a custom template.
//
// @param request - CreateBundleRequest
//
// @return CreateBundleResponse
func (client *Client) CreateBundle(request *CreateBundleRequest) (_result *CreateBundleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBundleResponse{}
	_body, _err := client.CreateBundleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads a file to a cloud disk.
//
// Description:
//
// After the RAM permissions are authenticated, you can call the CreateCdsFile operation to obtain the upload URL of a file and upload the file to a cloud disk.
//
// @param request - CreateCdsFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCdsFileResponse
func (client *Client) CreateCdsFileWithOptions(request *CreateCdsFileRequest, runtime *util.RuntimeOptions) (_result *CreateCdsFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.ConflictPolicy)) {
		query["ConflictPolicy"] = request.ConflictPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileHash)) {
		query["FileHash"] = request.FileHash
	}

	if !tea.BoolValue(util.IsUnset(request.FileLength)) {
		query["FileLength"] = request.FileLength
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.FileType)) {
		query["FileType"] = request.FileType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFileId)) {
		query["ParentFileId"] = request.ParentFileId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCdsFile"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCdsFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads a file to a cloud disk.
//
// Description:
//
// After the RAM permissions are authenticated, you can call the CreateCdsFile operation to obtain the upload URL of a file and upload the file to a cloud disk.
//
// @param request - CreateCdsFileRequest
//
// @return CreateCdsFileResponse
func (client *Client) CreateCdsFile(request *CreateCdsFileRequest) (_result *CreateCdsFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCdsFileResponse{}
	_body, _err := client.CreateCdsFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a file sharing task.
//
// @param request - CreateCdsFileShareLinkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCdsFileShareLinkResponse
func (client *Client) CreateCdsFileShareLinkWithOptions(request *CreateCdsFileShareLinkRequest, runtime *util.RuntimeOptions) (_result *CreateCdsFileShareLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableDownload)) {
		query["DisableDownload"] = request.DisableDownload
	}

	if !tea.BoolValue(util.IsUnset(request.DisablePreview)) {
		query["DisablePreview"] = request.DisablePreview
	}

	if !tea.BoolValue(util.IsUnset(request.DisableSave)) {
		query["DisableSave"] = request.DisableSave
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadLimit)) {
		query["DownloadLimit"] = request.DownloadLimit
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.Expiration)) {
		query["Expiration"] = request.Expiration
	}

	if !tea.BoolValue(util.IsUnset(request.FileIds)) {
		query["FileIds"] = request.FileIds
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewLimit)) {
		query["PreviewLimit"] = request.PreviewLimit
	}

	if !tea.BoolValue(util.IsUnset(request.SaveLimit)) {
		query["SaveLimit"] = request.SaveLimit
	}

	if !tea.BoolValue(util.IsUnset(request.ShareName)) {
		query["ShareName"] = request.ShareName
	}

	if !tea.BoolValue(util.IsUnset(request.SharePwd)) {
		query["SharePwd"] = request.SharePwd
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCdsFileShareLink"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCdsFileShareLinkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a file sharing task.
//
// @param request - CreateCdsFileShareLinkRequest
//
// @return CreateCdsFileShareLinkResponse
func (client *Client) CreateCdsFileShareLink(request *CreateCdsFileShareLinkRequest) (_result *CreateCdsFileShareLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCdsFileShareLinkResponse{}
	_body, _err := client.CreateCdsFileShareLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a cloud disk.
//
// @param request - CreateCloudDriveServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCloudDriveServiceResponse
func (client *Client) CreateCloudDriveServiceWithOptions(request *CreateCloudDriveServiceRequest, runtime *util.RuntimeOptions) (_result *CreateCloudDriveServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		query["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.CdsChargeType)) {
		query["CdsChargeType"] = request.CdsChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.CenId)) {
		query["CenId"] = request.CenId
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxSize)) {
		query["MaxSize"] = request.MaxSize
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteType)) {
		query["OfficeSiteType"] = request.OfficeSiteType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SolutionId)) {
		query["SolutionId"] = request.SolutionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserCount)) {
		query["UserCount"] = request.UserCount
	}

	if !tea.BoolValue(util.IsUnset(request.UserMaxSize)) {
		query["UserMaxSize"] = request.UserMaxSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudDriveService"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCloudDriveServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a cloud disk.
//
// @param request - CreateCloudDriveServiceRequest
//
// @return CreateCloudDriveServiceResponse
func (client *Client) CreateCloudDriveService(request *CreateCloudDriveServiceRequest) (_result *CreateCloudDriveServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudDriveServiceResponse{}
	_body, _err := client.CreateCloudDriveServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates the users of a cloud disk.
//
// @param request - CreateCloudDriveUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCloudDriveUsersResponse
func (client *Client) CreateCloudDriveUsersWithOptions(request *CreateCloudDriveUsersRequest, runtime *util.RuntimeOptions) (_result *CreateCloudDriveUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserMaxSize)) {
		query["UserMaxSize"] = request.UserMaxSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudDriveUsers"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCloudDriveUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates the users of a cloud disk.
//
// @param request - CreateCloudDriveUsersRequest
//
// @return CreateCloudDriveUsersResponse
func (client *Client) CreateCloudDriveUsers(request *CreateCloudDriveUsersRequest) (_result *CreateCloudDriveUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudDriveUsersResponse{}
	_body, _err := client.CreateCloudDriveUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a cloud computer pool (formerly desktop group).
//
// Description:
//
// Before you call this operation to create a desktop group, make sure that the following operations are complete:
//
// 	- You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](https://help.aliyun.com/document_detail/290959.html) of desktop groups.
//
// 	- Resources, such as workspaces, users, desktop templates, and policies, are created.
//
// @param request - CreateDesktopGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDesktopGroupResponse
func (client *Client) CreateDesktopGroupWithOptions(request *CreateDesktopGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDesktopGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllClassifyUsers)) {
		query["AllClassifyUsers"] = request.AllClassifyUsers
	}

	if !tea.BoolValue(util.IsUnset(request.AllowAutoSetup)) {
		query["AllowAutoSetup"] = request.AllowAutoSetup
	}

	if !tea.BoolValue(util.IsUnset(request.AllowBufferCount)) {
		query["AllowBufferCount"] = request.AllowBufferCount
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.BindAmount)) {
		query["BindAmount"] = request.BindAmount
	}

	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.BuyDesktopsCount)) {
		query["BuyDesktopsCount"] = request.BuyDesktopsCount
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.Classify)) {
		query["Classify"] = request.Classify
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.Comments)) {
		query["Comments"] = request.Comments
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectDuration)) {
		query["ConnectDuration"] = request.ConnectDuration
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultInitDesktopCount)) {
		query["DefaultInitDesktopCount"] = request.DefaultInitDesktopCount
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupName)) {
		query["DesktopGroupName"] = request.DesktopGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserIds)) {
		query["EndUserIds"] = request.EndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupVersion)) {
		query["GroupVersion"] = request.GroupVersion
	}

	if !tea.BoolValue(util.IsUnset(request.IdleDisconnectDuration)) {
		query["IdleDisconnectDuration"] = request.IdleDisconnectDuration
	}

	if !tea.BoolValue(util.IsUnset(request.KeepDuration)) {
		query["KeepDuration"] = request.KeepDuration
	}

	if !tea.BoolValue(util.IsUnset(request.LoadPolicy)) {
		query["LoadPolicy"] = request.LoadPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDesktopsCount)) {
		query["MaxDesktopsCount"] = request.MaxDesktopsCount
	}

	if !tea.BoolValue(util.IsUnset(request.MinDesktopsCount)) {
		query["MinDesktopsCount"] = request.MinDesktopsCount
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnType)) {
		query["OwnType"] = request.OwnType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileFollowSwitch)) {
		query["ProfileFollowSwitch"] = request.ProfileFollowSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RatioThreshold)) {
		query["RatioThreshold"] = request.RatioThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResetType)) {
		query["ResetType"] = request.ResetType
	}

	if !tea.BoolValue(util.IsUnset(request.ScaleStrategyId)) {
		query["ScaleStrategyId"] = request.ScaleStrategyId
	}

	if !tea.BoolValue(util.IsUnset(request.StopDuration)) {
		query["StopDuration"] = request.StopDuration
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeEncryptionEnabled)) {
		query["VolumeEncryptionEnabled"] = request.VolumeEncryptionEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeEncryptionKey)) {
		query["VolumeEncryptionKey"] = request.VolumeEncryptionKey
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDesktopGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDesktopGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a cloud computer pool (formerly desktop group).
//
// Description:
//
// Before you call this operation to create a desktop group, make sure that the following operations are complete:
//
// 	- You are familiar with the features, usage limits, and scaling policies of desktop groups. For more information, see [Overview](https://help.aliyun.com/document_detail/290959.html) of desktop groups.
//
// 	- Resources, such as workspaces, users, desktop templates, and policies, are created.
//
// @param request - CreateDesktopGroupRequest
//
// @return CreateDesktopGroupResponse
func (client *Client) CreateDesktopGroup(request *CreateDesktopGroupRequest) (_result *CreateDesktopGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDesktopGroupResponse{}
	_body, _err := client.CreateDesktopGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建桌面超卖组
//
// @param request - CreateDesktopOversoldGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDesktopOversoldGroupResponse
func (client *Client) CreateDesktopOversoldGroupWithOptions(request *CreateDesktopOversoldGroupRequest, runtime *util.RuntimeOptions) (_result *CreateDesktopOversoldGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcurrenceCount)) {
		query["ConcurrenceCount"] = request.ConcurrenceCount
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskSize)) {
		query["DataDiskSize"] = request.DataDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopType)) {
		query["DesktopType"] = request.DesktopType
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.IdleDisconnectDuration)) {
		query["IdleDisconnectDuration"] = request.IdleDisconnectDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.KeepDuration)) {
		query["KeepDuration"] = request.KeepDuration
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldUserCount)) {
		query["OversoldUserCount"] = request.OversoldUserCount
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldWarn)) {
		query["OversoldWarn"] = request.OversoldWarn
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StopDuration)) {
		query["StopDuration"] = request.StopDuration
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskSize)) {
		query["SystemDiskSize"] = request.SystemDiskSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDesktopOversoldGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDesktopOversoldGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建桌面超卖组
//
// @param request - CreateDesktopOversoldGroupRequest
//
// @return CreateDesktopOversoldGroupResponse
func (client *Client) CreateDesktopOversoldGroup(request *CreateDesktopOversoldGroupRequest) (_result *CreateDesktopOversoldGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDesktopOversoldGroupResponse{}
	_body, _err := client.CreateDesktopOversoldGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates cloud computers. If you specify end users when you create cloud computers, the cloud computers are assigned to the end users after the cloud computers are created.
//
// Description:
//
// Before you create cloud computers, complete the following preparations:
//
// 	- An office network (formerly called workspace) and users are created. For more information, see:
//
//     	- Convenience office network: [CreateSimpleOfficeSite](https://help.aliyun.com/document_detail/215416.html) and [CreateUsers](https://help.aliyun.com/document_detail/437832.html).
//
//     	- Active Directory (AD) office network: [CreateADConnectorOfficeSite](https://help.aliyun.com/document_detail/215417.html) and [Create an AD user](https://help.aliyun.com/document_detail/188619.html).
//
// 	- Make sure a cloud computer template exists. If no cloud computer template exists, call the [CreateBundle](https://help.aliyun.com/document_detail/188883.html) operation to create a template.
//
// 	- Make sure a policy exists. If no policy exists, call the [CreatePolicyGroup](https://help.aliyun.com/document_detail/188889.html) operation to create a policy.
//
// If you want the cloud computers to automatically execute a custom command script, you can use the `UserCommands` field to configure a custom command.
//
// @param tmpReq - CreateDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDesktopsResponse
func (client *Client) CreateDesktopsWithOptions(tmpReq *CreateDesktopsRequest, runtime *util.RuntimeOptions) (_result *CreateDesktopsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDesktopsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.DesktopAttachment)) {
		request.DesktopAttachmentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DesktopAttachment, tea.String("DesktopAttachment"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.BundleModels)) {
		query["BundleModels"] = request.BundleModels
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopAttachmentShrink)) {
		query["DesktopAttachment"] = request.DesktopAttachmentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopMemberIp)) {
		query["DesktopMemberIp"] = request.DesktopMemberIp
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopNameSuffix)) {
		query["DesktopNameSuffix"] = request.DesktopNameSuffix
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopTimers)) {
		query["DesktopTimers"] = request.DesktopTimers
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Hostname)) {
		query["Hostname"] = request.Hostname
	}

	if !tea.BoolValue(util.IsUnset(request.MonthDesktopSetting)) {
		query["MonthDesktopSetting"] = request.MonthDesktopSetting
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotPolicyId)) {
		query["SnapshotPolicyId"] = request.SnapshotPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TimerGroupId)) {
		query["TimerGroupId"] = request.TimerGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserAssignMode)) {
		query["UserAssignMode"] = request.UserAssignMode
	}

	if !tea.BoolValue(util.IsUnset(request.UserCommands)) {
		query["UserCommands"] = request.UserCommands
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeEncryptionEnabled)) {
		query["VolumeEncryptionEnabled"] = request.VolumeEncryptionEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeEncryptionKey)) {
		query["VolumeEncryptionKey"] = request.VolumeEncryptionKey
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates cloud computers. If you specify end users when you create cloud computers, the cloud computers are assigned to the end users after the cloud computers are created.
//
// Description:
//
// Before you create cloud computers, complete the following preparations:
//
// 	- An office network (formerly called workspace) and users are created. For more information, see:
//
//     	- Convenience office network: [CreateSimpleOfficeSite](https://help.aliyun.com/document_detail/215416.html) and [CreateUsers](https://help.aliyun.com/document_detail/437832.html).
//
//     	- Active Directory (AD) office network: [CreateADConnectorOfficeSite](https://help.aliyun.com/document_detail/215417.html) and [Create an AD user](https://help.aliyun.com/document_detail/188619.html).
//
// 	- Make sure a cloud computer template exists. If no cloud computer template exists, call the [CreateBundle](https://help.aliyun.com/document_detail/188883.html) operation to create a template.
//
// 	- Make sure a policy exists. If no policy exists, call the [CreatePolicyGroup](https://help.aliyun.com/document_detail/188889.html) operation to create a policy.
//
// If you want the cloud computers to automatically execute a custom command script, you can use the `UserCommands` field to configure a custom command.
//
// @param request - CreateDesktopsRequest
//
// @return CreateDesktopsResponse
func (client *Client) CreateDesktops(request *CreateDesktopsRequest) (_result *CreateDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDesktopsResponse{}
	_body, _err := client.CreateDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables the disk encryption feature and adds the service-linked role that is encrypted by Cloud Drive Service to a Resource Access Management (RAM) user.
//
// @param request - CreateDiskEncryptionServiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDiskEncryptionServiceResponse
func (client *Client) CreateDiskEncryptionServiceWithOptions(request *CreateDiskEncryptionServiceRequest, runtime *util.RuntimeOptions) (_result *CreateDiskEncryptionServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDiskEncryptionService"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDiskEncryptionServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables the disk encryption feature and adds the service-linked role that is encrypted by Cloud Drive Service to a Resource Access Management (RAM) user.
//
// @param request - CreateDiskEncryptionServiceRequest
//
// @return CreateDiskEncryptionServiceResponse
func (client *Client) CreateDiskEncryptionService(request *CreateDiskEncryptionServiceRequest) (_result *CreateDiskEncryptionServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiskEncryptionServiceResponse{}
	_body, _err := client.CreateDiskEncryptionServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a custom image based on a deployed cloud computer. Then, you can use the custom image to create cloud computers that have the same configurations. This prevents the repeated settings when you create cloud computers.
//
// @param request - CreateImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateImageResponse
func (client *Client) CreateImageWithOptions(request *CreateImageRequest, runtime *util.RuntimeOptions) (_result *CreateImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoCleanUserdata)) {
		query["AutoCleanUserdata"] = request.AutoCleanUserdata
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DiskType)) {
		query["DiskType"] = request.DiskType
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageResourceType)) {
		query["ImageResourceType"] = request.ImageResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotIds)) {
		query["SnapshotIds"] = request.SnapshotIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateImage"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a custom image based on a deployed cloud computer. Then, you can use the custom image to create cloud computers that have the same configurations. This prevents the repeated settings when you create cloud computers.
//
// @param request - CreateImageRequest
//
// @return CreateImageResponse
func (client *Client) CreateImage(request *CreateImageRequest) (_result *CreateImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateImageResponse{}
	_body, _err := client.CreateImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create a NAS file system.
//
// Description:
//
// <props="china">
//
// - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
//
// - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
//
// - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase resource packages to offset the storage usage.
//
// For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
//
// <props="intl">
//
// - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
//
// - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
//
// - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase storage packages to offset the storage usage.
//
// For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
//
// @param request - CreateNASFileSystemRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNASFileSystemResponse
func (client *Client) CreateNASFileSystemWithOptions(request *CreateNASFileSystemRequest, runtime *util.RuntimeOptions) (_result *CreateNASFileSystemResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EncryptType)) {
		query["EncryptType"] = request.EncryptType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNASFileSystem"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNASFileSystemResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create a NAS file system.
//
// Description:
//
// <props="china">
//
// - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
//
// - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
//
// - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase resource packages to offset the storage usage.
//
// For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
//
// <props="intl">
//
// - Each standard workspace can create one NAS file system to meet the need for sharing files between cloud desktops in the workspace.
//
// - The system will automatically create a general-purpose NAS file system (with storage specifications of Capacity and Performance, with capacities of 10 PiB and 1 PiB respectively) and generate a default mount point.
//
// - The NAS file system uses pay-as-you-go by default. You need to pay for the actual storage usage. You can also purchase storage packages to offset the storage usage.
//
// For more information, see [Creating Shared Storage NAS](https://help.aliyun.com/document_detail/214481.html).
//
// @param request - CreateNASFileSystemRequest
//
// @return CreateNASFileSystemResponse
func (client *Client) CreateNASFileSystem(request *CreateNASFileSystemRequest) (_result *CreateNASFileSystemResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNASFileSystemResponse{}
	_body, _err := client.CreateNASFileSystemWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a premium bandwidth plan for an office network.
//
// @param request - CreateNetworkPackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateNetworkPackageResponse
func (client *Client) CreateNetworkPackageWithOptions(request *CreateNetworkPackageRequest, runtime *util.RuntimeOptions) (_result *CreateNetworkPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateNetworkPackage"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateNetworkPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a premium bandwidth plan for an office network.
//
// @param request - CreateNetworkPackageRequest
//
// @return CreateNetworkPackageResponse
func (client *Client) CreateNetworkPackage(request *CreateNetworkPackageRequest) (_result *CreateNetworkPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNetworkPackageResponse{}
	_body, _err := client.CreateNetworkPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a policy.
//
// Description:
//
// A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](https://help.aliyun.com/document_detail/189345.html).
//
// @param request - CreatePolicyGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePolicyGroupResponse
func (client *Client) CreatePolicyGroupWithOptions(request *CreatePolicyGroupRequest, runtime *util.RuntimeOptions) (_result *CreatePolicyGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdminAccess)) {
		query["AdminAccess"] = request.AdminAccess
	}

	if !tea.BoolValue(util.IsUnset(request.AppContentProtection)) {
		query["AppContentProtection"] = request.AppContentProtection
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizeAccessPolicyRule)) {
		query["AuthorizeAccessPolicyRule"] = request.AuthorizeAccessPolicyRule
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizeSecurityPolicyRule)) {
		query["AuthorizeSecurityPolicyRule"] = request.AuthorizeSecurityPolicyRule
	}

	if !tea.BoolValue(util.IsUnset(request.CameraRedirect)) {
		query["CameraRedirect"] = request.CameraRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.Clipboard)) {
		query["Clipboard"] = request.Clipboard
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceRedirects)) {
		query["DeviceRedirects"] = request.DeviceRedirects
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceRules)) {
		query["DeviceRules"] = request.DeviceRules
	}

	if !tea.BoolValue(util.IsUnset(request.DomainList)) {
		query["DomainList"] = request.DomainList
	}

	if !tea.BoolValue(util.IsUnset(request.DomainResolveRule)) {
		query["DomainResolveRule"] = request.DomainResolveRule
	}

	if !tea.BoolValue(util.IsUnset(request.DomainResolveRuleType)) {
		query["DomainResolveRuleType"] = request.DomainResolveRuleType
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserApplyAdminCoordinate)) {
		query["EndUserApplyAdminCoordinate"] = request.EndUserApplyAdminCoordinate
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserGroupCoordinate)) {
		query["EndUserGroupCoordinate"] = request.EndUserGroupCoordinate
	}

	if !tea.BoolValue(util.IsUnset(request.GpuAcceleration)) {
		query["GpuAcceleration"] = request.GpuAcceleration
	}

	if !tea.BoolValue(util.IsUnset(request.Html5Access)) {
		query["Html5Access"] = request.Html5Access
	}

	if !tea.BoolValue(util.IsUnset(request.Html5FileTransfer)) {
		query["Html5FileTransfer"] = request.Html5FileTransfer
	}

	if !tea.BoolValue(util.IsUnset(request.InternetCommunicationProtocol)) {
		query["InternetCommunicationProtocol"] = request.InternetCommunicationProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LocalDrive)) {
		query["LocalDrive"] = request.LocalDrive
	}

	if !tea.BoolValue(util.IsUnset(request.MaxReconnectTime)) {
		query["MaxReconnectTime"] = request.MaxReconnectTime
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetRedirect)) {
		query["NetRedirect"] = request.NetRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.PreemptLogin)) {
		query["PreemptLogin"] = request.PreemptLogin
	}

	if !tea.BoolValue(util.IsUnset(request.PreemptLoginUser)) {
		query["PreemptLoginUser"] = request.PreemptLoginUser
	}

	if !tea.BoolValue(util.IsUnset(request.PrinterRedirection)) {
		query["PrinterRedirection"] = request.PrinterRedirection
	}

	if !tea.BoolValue(util.IsUnset(request.RecordContent)) {
		query["RecordContent"] = request.RecordContent
	}

	if !tea.BoolValue(util.IsUnset(request.RecordContentExpires)) {
		query["RecordContentExpires"] = request.RecordContentExpires
	}

	if !tea.BoolValue(util.IsUnset(request.Recording)) {
		query["Recording"] = request.Recording
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingAudio)) {
		query["RecordingAudio"] = request.RecordingAudio
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingDuration)) {
		query["RecordingDuration"] = request.RecordingDuration
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingEndTime)) {
		query["RecordingEndTime"] = request.RecordingEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingExpires)) {
		query["RecordingExpires"] = request.RecordingExpires
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingFps)) {
		query["RecordingFps"] = request.RecordingFps
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingStartTime)) {
		query["RecordingStartTime"] = request.RecordingStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingUserNotify)) {
		query["RecordingUserNotify"] = request.RecordingUserNotify
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingUserNotifyMessage)) {
		query["RecordingUserNotifyMessage"] = request.RecordingUserNotifyMessage
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteCoordinate)) {
		query["RemoteCoordinate"] = request.RemoteCoordinate
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeValue)) {
		query["ScopeValue"] = request.ScopeValue
	}

	if !tea.BoolValue(util.IsUnset(request.UsbRedirect)) {
		query["UsbRedirect"] = request.UsbRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.UsbSupplyRedirectRule)) {
		query["UsbSupplyRedirectRule"] = request.UsbSupplyRedirectRule
	}

	if !tea.BoolValue(util.IsUnset(request.VideoRedirect)) {
		query["VideoRedirect"] = request.VideoRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.VisualQuality)) {
		query["VisualQuality"] = request.VisualQuality
	}

	if !tea.BoolValue(util.IsUnset(request.Watermark)) {
		query["Watermark"] = request.Watermark
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkAntiCam)) {
		query["WatermarkAntiCam"] = request.WatermarkAntiCam
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkColor)) {
		query["WatermarkColor"] = request.WatermarkColor
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkDegree)) {
		query["WatermarkDegree"] = request.WatermarkDegree
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkFontSize)) {
		query["WatermarkFontSize"] = request.WatermarkFontSize
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkFontStyle)) {
		query["WatermarkFontStyle"] = request.WatermarkFontStyle
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkPower)) {
		query["WatermarkPower"] = request.WatermarkPower
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkRowAmount)) {
		query["WatermarkRowAmount"] = request.WatermarkRowAmount
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkSecurity)) {
		query["WatermarkSecurity"] = request.WatermarkSecurity
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkTransparency)) {
		query["WatermarkTransparency"] = request.WatermarkTransparency
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkTransparencyValue)) {
		query["WatermarkTransparencyValue"] = request.WatermarkTransparencyValue
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkType)) {
		query["WatermarkType"] = request.WatermarkType
	}

	if !tea.BoolValue(util.IsUnset(request.WyAssistant)) {
		query["WyAssistant"] = request.WyAssistant
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePolicyGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePolicyGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a policy.
//
// Description:
//
// A policy is a set of security rules that are used to control security configurations when end users use cloud desktops. A policy contains basic features, such as USB redirection and watermarking, and other features, such as security group control. For more information, see [Policy overview](https://help.aliyun.com/document_detail/189345.html).
//
// @param request - CreatePolicyGroupRequest
//
// @return CreatePolicyGroupResponse
func (client *Client) CreatePolicyGroup(request *CreatePolicyGroupRequest) (_result *CreatePolicyGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePolicyGroupResponse{}
	_body, _err := client.CreatePolicyGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates a Resource Access Management (RAM) directory.
//
// Description:
//
// Before you create a RAM directory, complete the following preparations:
//
// 	- Call the `CreateVpc` operation to create a virtual private cloud (VPC) in a region supported by Elastic Desktop Service.
//
// 	- Call the `CreateVSwitch` operation to create a vSwitch in the VPC. The vSwitch is in a zone that is supported by Elastic Desktop Service. You can call the [DescribeZones](https://help.aliyun.com/document_detail/196648.html) operation to obtain the most recent zone list for a region supported by Elastic Desktop Service
//
// @param request - CreateRAMDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateRAMDirectoryResponse
func (client *Client) CreateRAMDirectoryWithOptions(request *CreateRAMDirectoryRequest, runtime *util.RuntimeOptions) (_result *CreateRAMDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopAccessType)) {
		query["DesktopAccessType"] = request.DesktopAccessType
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryName)) {
		query["DirectoryName"] = request.DirectoryName
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAdminAccess)) {
		query["EnableAdminAccess"] = request.EnableAdminAccess
	}

	if !tea.BoolValue(util.IsUnset(request.EnableInternetAccess)) {
		query["EnableInternetAccess"] = request.EnableInternetAccess
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRAMDirectory"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRAMDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates a Resource Access Management (RAM) directory.
//
// Description:
//
// Before you create a RAM directory, complete the following preparations:
//
// 	- Call the `CreateVpc` operation to create a virtual private cloud (VPC) in a region supported by Elastic Desktop Service.
//
// 	- Call the `CreateVSwitch` operation to create a vSwitch in the VPC. The vSwitch is in a zone that is supported by Elastic Desktop Service. You can call the [DescribeZones](https://help.aliyun.com/document_detail/196648.html) operation to obtain the most recent zone list for a region supported by Elastic Desktop Service
//
// @param request - CreateRAMDirectoryRequest
//
// @return CreateRAMDirectoryResponse
func (client *Client) CreateRAMDirectory(request *CreateRAMDirectoryRequest) (_result *CreateRAMDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRAMDirectoryResponse{}
	_body, _err := client.CreateRAMDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates an office network of the convenience account type. Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
//
// @param request - CreateSimpleOfficeSiteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSimpleOfficeSiteResponse
func (client *Client) CreateSimpleOfficeSiteWithOptions(request *CreateSimpleOfficeSiteRequest, runtime *util.RuntimeOptions) (_result *CreateSimpleOfficeSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.CenId)) {
		query["CenId"] = request.CenId
	}

	if !tea.BoolValue(util.IsUnset(request.CenOwnerId)) {
		query["CenOwnerId"] = request.CenOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.CloudBoxOfficeSite)) {
		query["CloudBoxOfficeSite"] = request.CloudBoxOfficeSite
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopAccessType)) {
		query["DesktopAccessType"] = request.DesktopAccessType
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAdminAccess)) {
		query["EnableAdminAccess"] = request.EnableAdminAccess
	}

	if !tea.BoolValue(util.IsUnset(request.EnableInternetAccess)) {
		query["EnableInternetAccess"] = request.EnableInternetAccess
	}

	if !tea.BoolValue(util.IsUnset(request.NeedVerifyZeroDevice)) {
		query["NeedVerifyZeroDevice"] = request.NeedVerifyZeroDevice
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteName)) {
		query["OfficeSiteName"] = request.OfficeSiteName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyCode)) {
		query["VerifyCode"] = request.VerifyCode
	}

	if !tea.BoolValue(util.IsUnset(request.VpcType)) {
		query["VpcType"] = request.VpcType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSimpleOfficeSite"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSimpleOfficeSiteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates an office network of the convenience account type. Elastic Desktop Service supports the following types of accounts: convenience accounts and enterprise AD accounts.
//
// @param request - CreateSimpleOfficeSiteRequest
//
// @return CreateSimpleOfficeSiteResponse
func (client *Client) CreateSimpleOfficeSite(request *CreateSimpleOfficeSiteRequest) (_result *CreateSimpleOfficeSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSimpleOfficeSiteResponse{}
	_body, _err := client.CreateSimpleOfficeSiteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Create a snapshot for a disk of a cloud computer to back up or restore the data on the disk.
//
// Description:
//
// The cloud computer must be in the **Running*	- or **Stopped*	- state.
//
// @param request - CreateSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSnapshotResponse
func (client *Client) CreateSnapshotWithOptions(request *CreateSnapshotRequest, runtime *util.RuntimeOptions) (_result *CreateSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotName)) {
		query["SnapshotName"] = request.SnapshotName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceDiskType)) {
		query["SourceDiskType"] = request.SourceDiskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSnapshot"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSnapshotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Create a snapshot for a disk of a cloud computer to back up or restore the data on the disk.
//
// Description:
//
// The cloud computer must be in the **Running*	- or **Stopped*	- state.
//
// @param request - CreateSnapshotRequest
//
// @return CreateSnapshotResponse
func (client *Client) CreateSnapshot(request *CreateSnapshotRequest) (_result *CreateSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSnapshotResponse{}
	_body, _err := client.CreateSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes an automatic snapshot policy.
//
// @param request - DeleteAutoSnapshotPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAutoSnapshotPolicyResponse
func (client *Client) DeleteAutoSnapshotPolicyWithOptions(request *DeleteAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *DeleteAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAutoSnapshotPolicy"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAutoSnapshotPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes an automatic snapshot policy.
//
// @param request - DeleteAutoSnapshotPolicyRequest
//
// @return DeleteAutoSnapshotPolicyResponse
func (client *Client) DeleteAutoSnapshotPolicy(request *DeleteAutoSnapshotPolicyRequest) (_result *DeleteAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAutoSnapshotPolicyResponse{}
	_body, _err := client.DeleteAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes custom cloud computer templates.
//
// @param request - DeleteBundlesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteBundlesResponse
func (client *Client) DeleteBundlesWithOptions(request *DeleteBundlesRequest, runtime *util.RuntimeOptions) (_result *DeleteBundlesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteBundles"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteBundlesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes custom cloud computer templates.
//
// @param request - DeleteBundlesRequest
//
// @return DeleteBundlesResponse
func (client *Client) DeleteBundles(request *DeleteBundlesRequest) (_result *DeleteBundlesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteBundlesResponse{}
	_body, _err := client.DeleteBundlesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes a file from a cloud disk in Cloud Drive Service.
//
// @param request - DeleteCdsFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCdsFileResponse
func (client *Client) DeleteCdsFileWithOptions(request *DeleteCdsFileRequest, runtime *util.RuntimeOptions) (_result *DeleteCdsFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCdsFile"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCdsFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes a file from a cloud disk in Cloud Drive Service.
//
// @param request - DeleteCdsFileRequest
//
// @return DeleteCdsFileResponse
func (client *Client) DeleteCdsFile(request *DeleteCdsFileRequest) (_result *DeleteCdsFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCdsFileResponse{}
	_body, _err := client.DeleteCdsFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes team spaces.
//
// @param request - DeleteCloudDriveGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCloudDriveGroupsResponse
func (client *Client) DeleteCloudDriveGroupsWithOptions(request *DeleteCloudDriveGroupsRequest, runtime *util.RuntimeOptions) (_result *DeleteCloudDriveGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCloudDriveGroups"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCloudDriveGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes team spaces.
//
// @param request - DeleteCloudDriveGroupsRequest
//
// @return DeleteCloudDriveGroupsResponse
func (client *Client) DeleteCloudDriveGroups(request *DeleteCloudDriveGroupsRequest) (_result *DeleteCloudDriveGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCloudDriveGroupsResponse{}
	_body, _err := client.DeleteCloudDriveGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除无影网盘中的终端用户
//
// @param request - DeleteCloudDriveUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCloudDriveUsersResponse
func (client *Client) DeleteCloudDriveUsersWithOptions(request *DeleteCloudDriveUsersRequest, runtime *util.RuntimeOptions) (_result *DeleteCloudDriveUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCloudDriveUsers"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCloudDriveUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除无影网盘中的终端用户
//
// @param request - DeleteCloudDriveUsersRequest
//
// @return DeleteCloudDriveUsersResponse
func (client *Client) DeleteCloudDriveUsers(request *DeleteCloudDriveUsersRequest) (_result *DeleteCloudDriveUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCloudDriveUsersResponse{}
	_body, _err := client.DeleteCloudDriveUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases a desktop group.
//
// Description:
//
//   Before you delete a desktop group, make sure that cloud desktops in the desktop group are not connected and no users are authorized to use the cloud desktops.
//
// 	- You cannot delete a subscription desktop group when cloud desktops in the group are in valid period.
//
// 	- If you delete a pay-as-you-go desktop group, cloud desktops in the group are deleted.
//
// @param request - DeleteDesktopGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDesktopGroupResponse
func (client *Client) DeleteDesktopGroupWithOptions(request *DeleteDesktopGroupRequest, runtime *util.RuntimeOptions) (_result *DeleteDesktopGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDesktopGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDesktopGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Releases a desktop group.
//
// Description:
//
//   Before you delete a desktop group, make sure that cloud desktops in the desktop group are not connected and no users are authorized to use the cloud desktops.
//
// 	- You cannot delete a subscription desktop group when cloud desktops in the group are in valid period.
//
// 	- If you delete a pay-as-you-go desktop group, cloud desktops in the group are deleted.
//
// @param request - DeleteDesktopGroupRequest
//
// @return DeleteDesktopGroupResponse
func (client *Client) DeleteDesktopGroup(request *DeleteDesktopGroupRequest) (_result *DeleteDesktopGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDesktopGroupResponse{}
	_body, _err := client.DeleteDesktopGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Releases pay-as-you-go cloud computers or expired subscription cloud computers.
//
// @param request - DeleteDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDesktopsResponse
func (client *Client) DeleteDesktopsWithOptions(request *DeleteDesktopsRequest, runtime *util.RuntimeOptions) (_result *DeleteDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Releases pay-as-you-go cloud computers or expired subscription cloud computers.
//
// @param request - DeleteDesktopsRequest
//
// @return DeleteDesktopsResponse
func (client *Client) DeleteDesktops(request *DeleteDesktopsRequest) (_result *DeleteDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDesktopsResponse{}
	_body, _err := client.DeleteDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes trusted devices.
//
// Description:
//
// You can call the operation to manage client devices.
//
// @param request - DeleteDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDevicesResponse
func (client *Client) DeleteDevicesWithOptions(request *DeleteDevicesRequest, runtime *util.RuntimeOptions) (_result *DeleteDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceIds)) {
		query["DeviceIds"] = request.DeviceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDevices"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes trusted devices.
//
// Description:
//
// You can call the operation to manage client devices.
//
// @param request - DeleteDevicesRequest
//
// @return DeleteDevicesResponse
func (client *Client) DeleteDevices(request *DeleteDevicesRequest) (_result *DeleteDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDevicesResponse{}
	_body, _err := client.DeleteDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more directories.
//
// Description:
//
// You cannot delete a directory that has a cloud computer or is used by a cloud computer.
//
// @param request - DeleteDirectoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDirectoriesResponse
func (client *Client) DeleteDirectoriesWithOptions(request *DeleteDirectoriesRequest, runtime *util.RuntimeOptions) (_result *DeleteDirectoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDirectories"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDirectoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more directories.
//
// Description:
//
// You cannot delete a directory that has a cloud computer or is used by a cloud computer.
//
// @param request - DeleteDirectoriesRequest
//
// @return DeleteDirectoriesResponse
func (client *Client) DeleteDirectories(request *DeleteDirectoriesRequest) (_result *DeleteDirectoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDirectoriesResponse{}
	_body, _err := client.DeleteDirectoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteEduRoomRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEduRoomResponse
func (client *Client) DeleteEduRoomWithOptions(request *DeleteEduRoomRequest, runtime *util.RuntimeOptions) (_result *DeleteEduRoomResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EduRoomId)) {
		query["EduRoomId"] = request.EduRoomId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEduRoom"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEduRoomResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteEduRoomRequest
//
// @return DeleteEduRoomResponse
func (client *Client) DeleteEduRoom(request *DeleteEduRoomRequest) (_result *DeleteEduRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEduRoomResponse{}
	_body, _err := client.DeleteEduRoomWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more custom images.
//
// Description:
//
//   Images include system images and custom images. System images cannot be deleted.
//
// 	- If an image that you want to delete is referenced by a cloud computer template, call the [DeleteBundles](https://help.aliyun.com/document_detail/436972.html) operation to delete the cloud computer template before you delete the image.
//
// @param request - DeleteImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteImagesResponse
func (client *Client) DeleteImagesWithOptions(request *DeleteImagesRequest, runtime *util.RuntimeOptions) (_result *DeleteImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeleteCascadedBundle)) {
		query["DeleteCascadedBundle"] = request.DeleteCascadedBundle
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteImages"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteImagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more custom images.
//
// Description:
//
//   Images include system images and custom images. System images cannot be deleted.
//
// 	- If an image that you want to delete is referenced by a cloud computer template, call the [DeleteBundles](https://help.aliyun.com/document_detail/436972.html) operation to delete the cloud computer template before you delete the image.
//
// @param request - DeleteImagesRequest
//
// @return DeleteImagesResponse
func (client *Client) DeleteImages(request *DeleteImagesRequest) (_result *DeleteImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteImagesResponse{}
	_body, _err := client.DeleteImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes NAS file systems.
//
// Description:
//
// Before you delete a File Storage NAS (NAS) file system, make sure that the data you want to retain is backed up.
//
// 	Warning: If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
//
// @param request - DeleteNASFileSystemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNASFileSystemsResponse
func (client *Client) DeleteNASFileSystemsWithOptions(request *DeleteNASFileSystemsRequest, runtime *util.RuntimeOptions) (_result *DeleteNASFileSystemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNASFileSystems"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNASFileSystemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes NAS file systems.
//
// Description:
//
// Before you delete a File Storage NAS (NAS) file system, make sure that the data you want to retain is backed up.
//
// 	Warning: If a NAS file system is deleted, data stored in the NAS file system cannot be restored. Proceed with caution when you delete NAS file systems.
//
// @param request - DeleteNASFileSystemsRequest
//
// @return DeleteNASFileSystemsResponse
func (client *Client) DeleteNASFileSystems(request *DeleteNASFileSystemsRequest) (_result *DeleteNASFileSystemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNASFileSystemsResponse{}
	_body, _err := client.DeleteNASFileSystemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more premium bandwidth plans.
//
// @param request - DeleteNetworkPackagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteNetworkPackagesResponse
func (client *Client) DeleteNetworkPackagesWithOptions(request *DeleteNetworkPackagesRequest, runtime *util.RuntimeOptions) (_result *DeleteNetworkPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkPackageId)) {
		query["NetworkPackageId"] = request.NetworkPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteNetworkPackages"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteNetworkPackagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more premium bandwidth plans.
//
// @param request - DeleteNetworkPackagesRequest
//
// @return DeleteNetworkPackagesResponse
func (client *Client) DeleteNetworkPackages(request *DeleteNetworkPackagesRequest) (_result *DeleteNetworkPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNetworkPackagesResponse{}
	_body, _err := client.DeleteNetworkPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes office networks (formerly workspaces).
//
// Description:
//
// Before you delete an office network, make sure that the following operations are complete:
//
// 	- All cloud computers in the office network are released.
//
// 	- The data that you want to retain is backed up.
//
// >  Resources and data on cloud computers in an office network cannot be restored after you delete it. Proceed with caution.
//
// @param request - DeleteOfficeSitesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteOfficeSitesResponse
func (client *Client) DeleteOfficeSitesWithOptions(request *DeleteOfficeSitesRequest, runtime *util.RuntimeOptions) (_result *DeleteOfficeSitesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteOfficeSites"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteOfficeSitesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes office networks (formerly workspaces).
//
// Description:
//
// Before you delete an office network, make sure that the following operations are complete:
//
// 	- All cloud computers in the office network are released.
//
// 	- The data that you want to retain is backed up.
//
// >  Resources and data on cloud computers in an office network cannot be restored after you delete it. Proceed with caution.
//
// @param request - DeleteOfficeSitesRequest
//
// @return DeleteOfficeSitesResponse
func (client *Client) DeleteOfficeSites(request *DeleteOfficeSitesRequest) (_result *DeleteOfficeSitesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteOfficeSitesResponse{}
	_body, _err := client.DeleteOfficeSitesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more custom policies.
//
// @param request - DeletePolicyGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePolicyGroupsResponse
func (client *Client) DeletePolicyGroupsWithOptions(request *DeletePolicyGroupsRequest, runtime *util.RuntimeOptions) (_result *DeletePolicyGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePolicyGroups"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePolicyGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more custom policies.
//
// @param request - DeletePolicyGroupsRequest
//
// @return DeletePolicyGroupsResponse
func (client *Client) DeletePolicyGroups(request *DeletePolicyGroupsRequest) (_result *DeletePolicyGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePolicyGroupsResponse{}
	_body, _err := client.DeletePolicyGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Deletes one or more snapshots.
//
// Description:
//
// If the IDs of the snapshots that you specify do not exist, requests are ignored.
//
// @param request - DeleteSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSnapshotResponse
func (client *Client) DeleteSnapshotWithOptions(request *DeleteSnapshotRequest, runtime *util.RuntimeOptions) (_result *DeleteSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSnapshot"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSnapshotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Deletes one or more snapshots.
//
// Description:
//
// If the IDs of the snapshots that you specify do not exist, requests are ignored.
//
// @param request - DeleteSnapshotRequest
//
// @return DeleteSnapshotResponse
func (client *Client) DeleteSnapshot(request *DeleteSnapshotRequest) (_result *DeleteSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSnapshotResponse{}
	_body, _err := client.DeleteSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Delete virtual multi-factor authentication (MFA) devices.
//
// Description:
//
// If an MFA device is deleted, the device is unbound, reset, and disabled. When an Active Directory (AD) user wants to connect to the cloud desktop that is bound to the MFA device, the AD user must bind a new MFA device.
//
// @param request - DeleteVirtualMFADeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteVirtualMFADeviceResponse
func (client *Client) DeleteVirtualMFADeviceWithOptions(request *DeleteVirtualMFADeviceRequest, runtime *util.RuntimeOptions) (_result *DeleteVirtualMFADeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteVirtualMFADevice"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteVirtualMFADeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Delete virtual multi-factor authentication (MFA) devices.
//
// Description:
//
// If an MFA device is deleted, the device is unbound, reset, and disabled. When an Active Directory (AD) user wants to connect to the cloud desktop that is bound to the MFA device, the AD user must bind a new MFA device.
//
// @param request - DeleteVirtualMFADeviceRequest
//
// @return DeleteVirtualMFADeviceResponse
func (client *Client) DeleteVirtualMFADevice(request *DeleteVirtualMFADeviceRequest) (_result *DeleteVirtualMFADeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteVirtualMFADeviceResponse{}
	_body, _err := client.DeleteVirtualMFADeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of an access control list (ACL) of an office network or a cloud computer.
//
// @param request - DescribeAclEntriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAclEntriesResponse
func (client *Client) DescribeAclEntriesWithOptions(request *DescribeAclEntriesRequest, runtime *util.RuntimeOptions) (_result *DescribeAclEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceId)) {
		query["SourceId"] = request.SourceId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAclEntries"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAclEntriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of an access control list (ACL) of an office network or a cloud computer.
//
// @param request - DescribeAclEntriesRequest
//
// @return DescribeAclEntriesResponse
func (client *Client) DescribeAclEntries(request *DescribeAclEntriesRequest) (_result *DescribeAclEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAclEntriesResponse{}
	_body, _err := client.DescribeAclEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the automatic snapshot policy.
//
// Description:
//
// You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
//
// @param request - DescribeAutoSnapshotPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAutoSnapshotPolicyResponse
func (client *Client) DescribeAutoSnapshotPolicyWithOptions(request *DescribeAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoSnapshotPolicy"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAutoSnapshotPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the automatic snapshot policy.
//
// Description:
//
// You can view an automatic snapshot policy that is associated with a cloud desktop in the Elastic Desktop Service (EDS) console. To view the automatic snapshot policy, you can go to the EDS console, choose Deployment > Snapshots in the left-side navigation pane, and then view an automatic snapshot policy on the Snapshots page.
//
// @param request - DescribeAutoSnapshotPolicyRequest
//
// @return DescribeAutoSnapshotPolicyResponse
func (client *Client) DescribeAutoSnapshotPolicy(request *DescribeAutoSnapshotPolicyRequest) (_result *DescribeAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoSnapshotPolicyResponse{}
	_body, _err := client.DescribeAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of cloud computer templates.
//
// @param request - DescribeBundlesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBundlesResponse
func (client *Client) DescribeBundlesWithOptions(request *DescribeBundlesRequest, runtime *util.RuntimeOptions) (_result *DescribeBundlesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.BundleType)) {
		query["BundleType"] = request.BundleType
	}

	if !tea.BoolValue(util.IsUnset(request.CheckStock)) {
		query["CheckStock"] = request.CheckStock
	}

	if !tea.BoolValue(util.IsUnset(request.CpuCount)) {
		query["CpuCount"] = request.CpuCount
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopTypeFamily)) {
		query["DesktopTypeFamily"] = request.DesktopTypeFamily
	}

	if !tea.BoolValue(util.IsUnset(request.FotaChannel)) {
		query["FotaChannel"] = request.FotaChannel
	}

	if !tea.BoolValue(util.IsUnset(request.FromDesktopGroup)) {
		query["FromDesktopGroup"] = request.FromDesktopGroup
	}

	if !tea.BoolValue(util.IsUnset(request.GpuCount)) {
		query["GpuCount"] = request.GpuCount
	}

	if !tea.BoolValue(util.IsUnset(request.GpuDriverType)) {
		query["GpuDriverType"] = request.GpuDriverType
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.MemorySize)) {
		query["MemorySize"] = request.MemorySize
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		query["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.SelectedBundle)) {
		query["SelectedBundle"] = request.SelectedBundle
	}

	if !tea.BoolValue(util.IsUnset(request.SessionType)) {
		query["SessionType"] = request.SessionType
	}

	if !tea.BoolValue(util.IsUnset(request.SupportMultiSession)) {
		query["SupportMultiSession"] = request.SupportMultiSession
	}

	if !tea.BoolValue(util.IsUnset(request.VolumeEncryptionEnabled)) {
		query["VolumeEncryptionEnabled"] = request.VolumeEncryptionEnabled
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBundles"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBundlesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of cloud computer templates.
//
// @param request - DescribeBundlesRequest
//
// @return DescribeBundlesResponse
func (client *Client) DescribeBundles(request *DescribeBundlesRequest) (_result *DescribeBundlesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBundlesResponse{}
	_body, _err := client.DescribeBundlesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries file sharing links of a cloud disk in Cloud Drive Service.
//
// @param request - DescribeCdsFileShareLinksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCdsFileShareLinksResponse
func (client *Client) DescribeCdsFileShareLinksWithOptions(request *DescribeCdsFileShareLinksRequest, runtime *util.RuntimeOptions) (_result *DescribeCdsFileShareLinksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.Creators)) {
		query["Creators"] = request.Creators
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ShareId)) {
		query["ShareId"] = request.ShareId
	}

	if !tea.BoolValue(util.IsUnset(request.ShareName)) {
		query["ShareName"] = request.ShareName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCdsFileShareLinks"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCdsFileShareLinksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries file sharing links of a cloud disk in Cloud Drive Service.
//
// @param request - DescribeCdsFileShareLinksRequest
//
// @return DescribeCdsFileShareLinksResponse
func (client *Client) DescribeCdsFileShareLinks(request *DescribeCdsFileShareLinksRequest) (_result *DescribeCdsFileShareLinksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCdsFileShareLinksResponse{}
	_body, _err := client.DescribeCdsFileShareLinksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of all Cloud Enterprise Network (CEN) instances within an Alibaba Cloud account.
//
// @param request - DescribeCensRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCensResponse
func (client *Client) DescribeCensWithOptions(request *DescribeCensRequest, runtime *util.RuntimeOptions) (_result *DescribeCensResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCens"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCensResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of all Cloud Enterprise Network (CEN) instances within an Alibaba Cloud account.
//
// @param request - DescribeCensRequest
//
// @return DescribeCensResponse
func (client *Client) DescribeCens(request *DescribeCensRequest) (_result *DescribeCensResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCensResponse{}
	_body, _err := client.DescribeCensWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the operation logs of end users. For example, the logs record the events that end users start and stop cloud desktops, and disconnect desktop sessions.
//
// Description:
//
// You can audit the operation logs of regular users to improve security. The operation logs record events such as desktop startup, shutdown, and session disconnection.
//
// @param request - DescribeClientEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeClientEventsResponse
func (client *Client) DescribeClientEventsWithOptions(request *DescribeClientEventsRequest, runtime *util.RuntimeOptions) (_result *DescribeClientEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopIp)) {
		query["DesktopIp"] = request.DesktopIp
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.EventTypes)) {
		query["EventTypes"] = request.EventTypes
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteName)) {
		query["OfficeSiteName"] = request.OfficeSiteName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClientEvents"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClientEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the operation logs of end users. For example, the logs record the events that end users start and stop cloud desktops, and disconnect desktop sessions.
//
// Description:
//
// You can audit the operation logs of regular users to improve security. The operation logs record events such as desktop startup, shutdown, and session disconnection.
//
// @param request - DescribeClientEventsRequest
//
// @return DescribeClientEventsResponse
func (client *Client) DescribeClientEvents(request *DescribeClientEventsRequest) (_result *DescribeClientEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClientEventsResponse{}
	_body, _err := client.DescribeClientEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of authorized team spaces.
//
// @param request - DescribeCloudDriveGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudDriveGroupsResponse
func (client *Client) DescribeCloudDriveGroupsWithOptions(request *DescribeCloudDriveGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudDriveGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryName)) {
		query["DirectoryName"] = request.DirectoryName
	}

	if !tea.BoolValue(util.IsUnset(request.DriveStatus)) {
		query["DriveStatus"] = request.DriveStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DriveType)) {
		query["DriveType"] = request.DriveType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		query["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupType)) {
		query["GroupType"] = request.GroupType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ParentGroupId)) {
		query["ParentGroupId"] = request.ParentGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudDriveGroups"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudDriveGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of authorized team spaces.
//
// @param request - DescribeCloudDriveGroupsRequest
//
// @return DescribeCloudDriveGroupsResponse
func (client *Client) DescribeCloudDriveGroups(request *DescribeCloudDriveGroupsRequest) (_result *DescribeCloudDriveGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudDriveGroupsResponse{}
	_body, _err := client.DescribeCloudDriveGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询pds用户权限
//
// @param request - DescribeCloudDrivePermissionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudDrivePermissionsResponse
func (client *Client) DescribeCloudDrivePermissionsWithOptions(request *DescribeCloudDrivePermissionsRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudDrivePermissionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudDrivePermissions"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudDrivePermissionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询pds用户权限
//
// @param request - DescribeCloudDrivePermissionsRequest
//
// @return DescribeCloudDrivePermissionsResponse
func (client *Client) DescribeCloudDrivePermissions(request *DescribeCloudDrivePermissionsRequest) (_result *DescribeCloudDrivePermissionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudDrivePermissionsResponse{}
	_body, _err := client.DescribeCloudDrivePermissionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询所有无影网盘终端用户的信息
//
// @param request - DescribeCloudDriveUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudDriveUsersResponse
func (client *Client) DescribeCloudDriveUsersWithOptions(request *DescribeCloudDriveUsersRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudDriveUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudDriveUsers"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudDriveUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询所有无影网盘终端用户的信息
//
// @param request - DescribeCloudDriveUsersRequest
//
// @return DescribeCloudDriveUsersResponse
func (client *Client) DescribeCloudDriveUsers(request *DescribeCloudDriveUsersRequest) (_result *DescribeCloudDriveUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudDriveUsersResponse{}
	_body, _err := client.DescribeCloudDriveUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeCustomizedListHeadersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCustomizedListHeadersResponse
func (client *Client) DescribeCustomizedListHeadersWithOptions(request *DescribeCustomizedListHeadersRequest, runtime *util.RuntimeOptions) (_result *DescribeCustomizedListHeadersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LangType)) {
		query["LangType"] = request.LangType
	}

	if !tea.BoolValue(util.IsUnset(request.ListType)) {
		query["ListType"] = request.ListType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCustomizedListHeaders"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCustomizedListHeadersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeCustomizedListHeadersRequest
//
// @return DescribeCustomizedListHeadersResponse
func (client *Client) DescribeCustomizedListHeaders(request *DescribeCustomizedListHeadersRequest) (_result *DescribeCustomizedListHeadersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCustomizedListHeadersResponse{}
	_body, _err := client.DescribeCustomizedListHeadersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries sessions in a desktop group.
//
// @param request - DescribeDesktopGroupSessionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopGroupSessionsResponse
func (client *Client) DescribeDesktopGroupSessionsWithOptions(request *DescribeDesktopGroupSessionsRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopGroupSessionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnType)) {
		query["OwnType"] = request.OwnType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionStatus)) {
		query["SessionStatus"] = request.SessionStatus
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopGroupSessions"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopGroupSessionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries sessions in a desktop group.
//
// @param request - DescribeDesktopGroupSessionsRequest
//
// @return DescribeDesktopGroupSessionsResponse
func (client *Client) DescribeDesktopGroupSessions(request *DescribeDesktopGroupSessionsRequest) (_result *DescribeDesktopGroupSessionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopGroupSessionsResponse{}
	_body, _err := client.DescribeDesktopGroupSessionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of desktop groups.
//
// @param request - DescribeDesktopGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopGroupsResponse
func (client *Client) DescribeDesktopGroupsWithOptions(request *DescribeDesktopGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupName)) {
		query["DesktopGroupName"] = request.DesktopGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserIds)) {
		query["EndUserIds"] = request.EndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludedEndUserIds)) {
		query["ExcludedEndUserIds"] = request.ExcludedEndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnType)) {
		query["OwnType"] = request.OwnType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopGroups"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of desktop groups.
//
// @param request - DescribeDesktopGroupsRequest
//
// @return DescribeDesktopGroupsResponse
func (client *Client) DescribeDesktopGroups(request *DescribeDesktopGroupsRequest) (_result *DescribeDesktopGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopGroupsResponse{}
	_body, _err := client.DescribeDesktopGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the basic information about cloud computers.
//
// @param request - DescribeDesktopInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopInfoResponse
func (client *Client) DescribeDesktopInfoWithOptions(request *DescribeDesktopInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopInfo"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the basic information about cloud computers.
//
// @param request - DescribeDesktopInfoRequest
//
// @return DescribeDesktopInfoResponse
func (client *Client) DescribeDesktopInfo(request *DescribeDesktopInfoRequest) (_result *DescribeDesktopInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopInfoResponse{}
	_body, _err := client.DescribeDesktopInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询超卖组
//
// @param request - DescribeDesktopOversoldGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopOversoldGroupResponse
func (client *Client) DescribeDesktopOversoldGroupWithOptions(request *DescribeDesktopOversoldGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopOversoldGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupIds)) {
		query["OversoldGroupIds"] = request.OversoldGroupIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopOversoldGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopOversoldGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询超卖组
//
// @param request - DescribeDesktopOversoldGroupRequest
//
// @return DescribeDesktopOversoldGroupResponse
func (client *Client) DescribeDesktopOversoldGroup(request *DescribeDesktopOversoldGroupRequest) (_result *DescribeDesktopOversoldGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopOversoldGroupResponse{}
	_body, _err := client.DescribeDesktopOversoldGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询超卖组用户
//
// @param request - DescribeDesktopOversoldUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopOversoldUserResponse
func (client *Client) DescribeDesktopOversoldUserWithOptions(request *DescribeDesktopOversoldUserRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopOversoldUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserDesktopIds)) {
		query["UserDesktopIds"] = request.UserDesktopIds
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopOversoldUser"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopOversoldUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询超卖组用户
//
// @param request - DescribeDesktopOversoldUserRequest
//
// @return DescribeDesktopOversoldUserResponse
func (client *Client) DescribeDesktopOversoldUser(request *DescribeDesktopOversoldUserRequest) (_result *DescribeDesktopOversoldUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopOversoldUserResponse{}
	_body, _err := client.DescribeDesktopOversoldUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询超卖用户组
//
// @param request - DescribeDesktopOversoldUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopOversoldUserGroupResponse
func (client *Client) DescribeDesktopOversoldUserGroupWithOptions(request *DescribeDesktopOversoldUserGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopOversoldUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupIds)) {
		query["UserGroupIds"] = request.UserGroupIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopOversoldUserGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopOversoldUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询超卖用户组
//
// @param request - DescribeDesktopOversoldUserGroupRequest
//
// @return DescribeDesktopOversoldUserGroupResponse
func (client *Client) DescribeDesktopOversoldUserGroup(request *DescribeDesktopOversoldUserGroupRequest) (_result *DescribeDesktopOversoldUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopOversoldUserGroupResponse{}
	_body, _err := client.DescribeDesktopOversoldUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the detailed session information of a cloud computer.
//
// Description:
//
// You can only query data within the last 30 days.
//
// @param request - DescribeDesktopSessionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopSessionsResponse
func (client *Client) DescribeDesktopSessionsWithOptions(request *DescribeDesktopSessionsRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopSessionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CheckOsSession)) {
		query["CheckOsSession"] = request.CheckOsSession
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserIdFilter)) {
		query["EndUserIdFilter"] = request.EndUserIdFilter
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionStatus)) {
		query["SessionStatus"] = request.SessionStatus
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SubPayType)) {
		query["SubPayType"] = request.SubPayType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopSessions"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopSessionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the detailed session information of a cloud computer.
//
// Description:
//
// You can only query data within the last 30 days.
//
// @param request - DescribeDesktopSessionsRequest
//
// @return DescribeDesktopSessionsResponse
func (client *Client) DescribeDesktopSessions(request *DescribeDesktopSessionsRequest) (_result *DescribeDesktopSessionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopSessionsResponse{}
	_body, _err := client.DescribeDesktopSessionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the instance types of cloud computers.
//
// Description:
//
// When no values are specified for the `InstanceTypeFamily` and `DesktopTypeId` parameters for a cloud desktop, all types of cloud desktops are queried.
//
// @param request - DescribeDesktopTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopTypesResponse
func (client *Client) DescribeDesktopTypesWithOptions(request *DescribeDesktopTypesRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopTypesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppliedScope)) {
		query["AppliedScope"] = request.AppliedScope
	}

	if !tea.BoolValue(util.IsUnset(request.CpuCount)) {
		query["CpuCount"] = request.CpuCount
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupIdForModify)) {
		query["DesktopGroupIdForModify"] = request.DesktopGroupIdForModify
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopIdForModify)) {
		query["DesktopIdForModify"] = request.DesktopIdForModify
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopTypeId)) {
		query["DesktopTypeId"] = request.DesktopTypeId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopTypeIdList)) {
		query["DesktopTypeIdList"] = request.DesktopTypeIdList
	}

	if !tea.BoolValue(util.IsUnset(request.GpuCount)) {
		query["GpuCount"] = request.GpuCount
	}

	if !tea.BoolValue(util.IsUnset(request.GpuDriverType)) {
		query["GpuDriverType"] = request.GpuDriverType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceTypeFamily)) {
		query["InstanceTypeFamily"] = request.InstanceTypeFamily
	}

	if !tea.BoolValue(util.IsUnset(request.MemorySize)) {
		query["MemorySize"] = request.MemorySize
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopTypes"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the instance types of cloud computers.
//
// Description:
//
// When no values are specified for the `InstanceTypeFamily` and `DesktopTypeId` parameters for a cloud desktop, all types of cloud desktops are queried.
//
// @param request - DescribeDesktopTypesRequest
//
// @return DescribeDesktopTypesResponse
func (client *Client) DescribeDesktopTypes(request *DescribeDesktopTypesRequest) (_result *DescribeDesktopTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopTypesResponse{}
	_body, _err := client.DescribeDesktopTypesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Query the details of the cloud desktop.
//
// @param request - DescribeDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopsResponse
func (client *Client) DescribeDesktopsWithOptions(request *DescribeDesktopsRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopStatus)) {
		query["DesktopStatus"] = request.DesktopStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopStatusList)) {
		query["DesktopStatusList"] = request.DesktopStatusList
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopType)) {
		query["DesktopType"] = request.DesktopType
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ExcludedEndUserId)) {
		query["ExcludedEndUserId"] = request.ExcludedEndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.FillResourceGroup)) {
		query["FillResourceGroup"] = request.FillResourceGroup
	}

	if !tea.BoolValue(util.IsUnset(request.FilterDesktopGroup)) {
		query["FilterDesktopGroup"] = request.FilterDesktopGroup
	}

	if !tea.BoolValue(util.IsUnset(request.GpuInstanceGroupId)) {
		query["GpuInstanceGroupId"] = request.GpuInstanceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ManagementFlag)) {
		query["ManagementFlag"] = request.ManagementFlag
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteName)) {
		query["OfficeSiteName"] = request.OfficeSiteName
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyDesktopGroup)) {
		query["OnlyDesktopGroup"] = request.OnlyDesktopGroup
	}

	if !tea.BoolValue(util.IsUnset(request.OsTypes)) {
		query["OsTypes"] = request.OsTypes
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.QosRuleId)) {
		query["QosRuleId"] = request.QosRuleId
	}

	if !tea.BoolValue(util.IsUnset(request.QueryFotaUpdate)) {
		query["QueryFotaUpdate"] = request.QueryFotaUpdate
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotPolicyId)) {
		query["SnapshotPolicyId"] = request.SnapshotPolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.SubPayType)) {
		query["SubPayType"] = request.SubPayType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Query the details of the cloud desktop.
//
// @param request - DescribeDesktopsRequest
//
// @return DescribeDesktopsResponse
func (client *Client) DescribeDesktops(request *DescribeDesktopsRequest) (_result *DescribeDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopsResponse{}
	_body, _err := client.DescribeDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the cloud computers in a cloud computer pool by billing method.
//
// @param request - DescribeDesktopsInGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDesktopsInGroupResponse
func (client *Client) DescribeDesktopsInGroupWithOptions(request *DescribeDesktopsInGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeDesktopsInGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreDeleted)) {
		query["IgnoreDeleted"] = request.IgnoreDeleted
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDesktopsInGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDesktopsInGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the cloud computers in a cloud computer pool by billing method.
//
// @param request - DescribeDesktopsInGroupRequest
//
// @return DescribeDesktopsInGroupResponse
func (client *Client) DescribeDesktopsInGroup(request *DescribeDesktopsInGroupRequest) (_result *DescribeDesktopsInGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDesktopsInGroupResponse{}
	_body, _err := client.DescribeDesktopsInGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the list of trusted devices.
//
// @param request - DescribeDevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDevicesResponse
func (client *Client) DescribeDevicesWithOptions(request *DescribeDevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeDevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdDomain)) {
		query["AdDomain"] = request.AdDomain
	}

	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		query["UserType"] = request.UserType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDevices"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the list of trusted devices.
//
// @param request - DescribeDevicesRequest
//
// @return DescribeDevicesResponse
func (client *Client) DescribeDevices(request *DescribeDevicesRequest) (_result *DescribeDevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDevicesResponse{}
	_body, _err := client.DescribeDevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of directories.
//
// @param request - DescribeDirectoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDirectoriesResponse
func (client *Client) DescribeDirectoriesWithOptions(request *DescribeDirectoriesRequest, runtime *util.RuntimeOptions) (_result *DescribeDirectoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryStatus)) {
		query["DirectoryStatus"] = request.DirectoryStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryType)) {
		query["DirectoryType"] = request.DirectoryType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDirectories"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDirectoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of directories.
//
// @param request - DescribeDirectoriesRequest
//
// @return DescribeDirectoriesResponse
func (client *Client) DescribeDirectories(request *DescribeDirectoriesRequest) (_result *DescribeDirectoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDirectoriesResponse{}
	_body, _err := client.DescribeDirectoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFlowMetricRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFlowMetricResponse
func (client *Client) DescribeFlowMetricWithOptions(request *DescribeFlowMetricRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowMetric"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFlowMetricRequest
//
// @return DescribeFlowMetricResponse
func (client *Client) DescribeFlowMetric(request *DescribeFlowMetricRequest) (_result *DescribeFlowMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowMetricResponse{}
	_body, _err := client.DescribeFlowMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries cloud computer-level traffic statistics of a single office network.
//
// Description:
//
// > You can query only the traffic data in the last 90 days.
//
// @param request - DescribeFlowStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFlowStatisticResponse
func (client *Client) DescribeFlowStatisticWithOptions(request *DescribeFlowStatisticRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowStatistic"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowStatisticResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries cloud computer-level traffic statistics of a single office network.
//
// Description:
//
// > You can query only the traffic data in the last 90 days.
//
// @param request - DescribeFlowStatisticRequest
//
// @return DescribeFlowStatisticResponse
func (client *Client) DescribeFlowStatistic(request *DescribeFlowStatisticRequest) (_result *DescribeFlowStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowStatisticResponse{}
	_body, _err := client.DescribeFlowStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about the cloud computers whose images can be and are pending to be updated to the specified version.
//
// @param request - DescribeFotaPendingDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFotaPendingDesktopsResponse
func (client *Client) DescribeFotaPendingDesktopsWithOptions(request *DescribeFotaPendingDesktopsRequest, runtime *util.RuntimeOptions) (_result *DescribeFotaPendingDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskUid)) {
		query["TaskUid"] = request.TaskUid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFotaPendingDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFotaPendingDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about the cloud computers whose images can be and are pending to be updated to the specified version.
//
// @param request - DescribeFotaPendingDesktopsRequest
//
// @return DescribeFotaPendingDesktopsResponse
func (client *Client) DescribeFotaPendingDesktops(request *DescribeFotaPendingDesktopsRequest) (_result *DescribeFotaPendingDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFotaPendingDesktopsResponse{}
	_body, _err := client.DescribeFotaPendingDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries a list of update tasks.
//
// @param request - DescribeFotaTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFotaTasksResponse
func (client *Client) DescribeFotaTasksWithOptions(request *DescribeFotaTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeFotaTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FotaStatus)) {
		query["FotaStatus"] = request.FotaStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskUid)) {
		query["TaskUid"] = request.TaskUid
	}

	if !tea.BoolValue(util.IsUnset(request.UserStatus)) {
		query["UserStatus"] = request.UserStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFotaTasks"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFotaTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries a list of update tasks.
//
// @param request - DescribeFotaTasksRequest
//
// @return DescribeFotaTasksResponse
func (client *Client) DescribeFotaTasks(request *DescribeFotaTasksRequest) (_result *DescribeFotaTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFotaTasksResponse{}
	_body, _err := client.DescribeFotaTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the applications and their processes of an end user.
//
// @param request - DescribeGuestApplicationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGuestApplicationsResponse
func (client *Client) DescribeGuestApplicationsWithOptions(request *DescribeGuestApplicationsRequest, runtime *util.RuntimeOptions) (_result *DescribeGuestApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGuestApplications"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGuestApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the applications and their processes of an end user.
//
// @param request - DescribeGuestApplicationsRequest
//
// @return DescribeGuestApplicationsResponse
func (client *Client) DescribeGuestApplications(request *DescribeGuestApplicationsRequest) (_result *DescribeGuestApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGuestApplicationsResponse{}
	_body, _err := client.DescribeGuestApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the image modification records of cloud computers.
//
// @param request - DescribeImageModifiedRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImageModifiedRecordsResponse
func (client *Client) DescribeImageModifiedRecordsWithOptions(request *DescribeImageModifiedRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeImageModifiedRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImageModifiedRecords"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImageModifiedRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the image modification records of cloud computers.
//
// @param request - DescribeImageModifiedRecordsRequest
//
// @return DescribeImageModifiedRecordsResponse
func (client *Client) DescribeImageModifiedRecords(request *DescribeImageModifiedRecordsRequest) (_result *DescribeImageModifiedRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImageModifiedRecordsResponse{}
	_body, _err := client.DescribeImageModifiedRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the recipient Alibaba Cloud accounts with which an image is shared.
//
// Description:
//
// You can call the [ModifyImagePermission](https://help.aliyun.com/document_detail/436982.html) operation to share an image with another cloud computer user or unshare an image. You can call the DescribeImagePermission operation to obtain the Alibaba Cloud accounts with which the current image is shared.
//
// @param request - DescribeImagePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImagePermissionResponse
func (client *Client) DescribeImagePermissionWithOptions(request *DescribeImagePermissionRequest, runtime *util.RuntimeOptions) (_result *DescribeImagePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImagePermission"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImagePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the recipient Alibaba Cloud accounts with which an image is shared.
//
// Description:
//
// You can call the [ModifyImagePermission](https://help.aliyun.com/document_detail/436982.html) operation to share an image with another cloud computer user or unshare an image. You can call the DescribeImagePermission operation to obtain the Alibaba Cloud accounts with which the current image is shared.
//
// @param request - DescribeImagePermissionRequest
//
// @return DescribeImagePermissionResponse
func (client *Client) DescribeImagePermission(request *DescribeImagePermissionRequest) (_result *DescribeImagePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImagePermissionResponse{}
	_body, _err := client.DescribeImagePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about images.
//
// @param request - DescribeImagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeImagesResponse
func (client *Client) DescribeImagesWithOptions(request *DescribeImagesRequest, runtime *util.RuntimeOptions) (_result *DescribeImagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopInstanceType)) {
		query["DesktopInstanceType"] = request.DesktopInstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.FotaVersion)) {
		query["FotaVersion"] = request.FotaVersion
	}

	if !tea.BoolValue(util.IsUnset(request.GpuCategory)) {
		query["GpuCategory"] = request.GpuCategory
	}

	if !tea.BoolValue(util.IsUnset(request.GpuDriverVersion)) {
		query["GpuDriverVersion"] = request.GpuDriverVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.ImageStatus)) {
		query["ImageStatus"] = request.ImageStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ImageType)) {
		query["ImageType"] = request.ImageType
	}

	if !tea.BoolValue(util.IsUnset(request.LanguageType)) {
		query["LanguageType"] = request.LanguageType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		query["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionType)) {
		query["SessionType"] = request.SessionType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeImages"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeImagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about images.
//
// @param request - DescribeImagesRequest
//
// @return DescribeImagesResponse
func (client *Client) DescribeImages(request *DescribeImagesRequest) (_result *DescribeImagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeImagesResponse{}
	_body, _err := client.DescribeImagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
//   After you run a command, it may not succeed. You can call this operation to query the execution result.
//
// 	- You can query the information about execution in the last two weeks. A maximum of 100,000 lines of execution information can be retained.
//
// @param request - DescribeInvocationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInvocationsResponse
func (client *Client) DescribeInvocationsWithOptions(request *DescribeInvocationsRequest, runtime *util.RuntimeOptions) (_result *DescribeInvocationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandType)) {
		query["CommandType"] = request.CommandType
	}

	if !tea.BoolValue(util.IsUnset(request.ContentEncoding)) {
		query["ContentEncoding"] = request.ContentEncoding
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopIds)) {
		query["DesktopIds"] = request.DesktopIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeInvokeDesktops)) {
		query["IncludeInvokeDesktops"] = request.IncludeInvokeDesktops
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeOutput)) {
		query["IncludeOutput"] = request.IncludeOutput
	}

	if !tea.BoolValue(util.IsUnset(request.InvokeId)) {
		query["InvokeId"] = request.InvokeId
	}

	if !tea.BoolValue(util.IsUnset(request.InvokeStatus)) {
		query["InvokeStatus"] = request.InvokeStatus
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInvocations"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInvocationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
//   After you run a command, it may not succeed. You can call this operation to query the execution result.
//
// 	- You can query the information about execution in the last two weeks. A maximum of 100,000 lines of execution information can be retained.
//
// @param request - DescribeInvocationsRequest
//
// @return DescribeInvocationsResponse
func (client *Client) DescribeInvocations(request *DescribeInvocationsRequest) (_result *DescribeInvocationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvocationsResponse{}
	_body, _err := client.DescribeInvocationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries Key Management Service (KMS) keys of users. The first time you call this operation, you can try to create a service key for Elastic Desktop Service (EDS) and call the operation to return results.
//
// @param request - DescribeKmsKeysRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeKmsKeysResponse
func (client *Client) DescribeKmsKeysWithOptions(request *DescribeKmsKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeKmsKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeKmsKeys"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeKmsKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries Key Management Service (KMS) keys of users. The first time you call this operation, you can try to create a service key for Elastic Desktop Service (EDS) and call the operation to return results.
//
// @param request - DescribeKmsKeysRequest
//
// @return DescribeKmsKeysResponse
func (client *Client) DescribeKmsKeys(request *DescribeKmsKeysRequest) (_result *DescribeKmsKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeKmsKeysResponse{}
	_body, _err := client.DescribeKmsKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeModificationPriceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeModificationPriceResponse
func (client *Client) DescribeModificationPriceWithOptions(request *DescribeModificationPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeModificationPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.RootDiskSizeGib)) {
		query["RootDiskSizeGib"] = request.RootDiskSizeGib
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskSizeGib)) {
		query["UserDiskSizeGib"] = request.UserDiskSizeGib
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeModificationPrice"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeModificationPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeModificationPriceRequest
//
// @return DescribeModificationPriceResponse
func (client *Client) DescribeModificationPrice(request *DescribeModificationPriceRequest) (_result *DescribeModificationPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeModificationPriceResponse{}
	_body, _err := client.DescribeModificationPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about File Storage NAS (NAS) file systems.
//
// @param request - DescribeNASFileSystemsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNASFileSystemsResponse
func (client *Client) DescribeNASFileSystemsWithOptions(request *DescribeNASFileSystemsRequest, runtime *util.RuntimeOptions) (_result *DescribeNASFileSystemsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MatchCompatibleProfile)) {
		query["MatchCompatibleProfile"] = request.MatchCompatibleProfile
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNASFileSystems"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNASFileSystemsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about File Storage NAS (NAS) file systems.
//
// @param request - DescribeNASFileSystemsRequest
//
// @return DescribeNASFileSystemsResponse
func (client *Client) DescribeNASFileSystems(request *DescribeNASFileSystemsRequest) (_result *DescribeNASFileSystemsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNASFileSystemsResponse{}
	_body, _err := client.DescribeNASFileSystemsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the details of one or more premium bandwidth plans.
//
// @param request - DescribeNetworkPackagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNetworkPackagesResponse
func (client *Client) DescribeNetworkPackagesWithOptions(request *DescribeNetworkPackagesRequest, runtime *util.RuntimeOptions) (_result *DescribeNetworkPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkPackageId)) {
		query["NetworkPackageId"] = request.NetworkPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetworkPackages"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetworkPackagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the details of one or more premium bandwidth plans.
//
// @param request - DescribeNetworkPackagesRequest
//
// @return DescribeNetworkPackagesResponse
func (client *Client) DescribeNetworkPackages(request *DescribeNetworkPackagesRequest) (_result *DescribeNetworkPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetworkPackagesResponse{}
	_body, _err := client.DescribeNetworkPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries office network properties, including office network ID, name, status, and creation time.
//
// @param request - DescribeOfficeSitesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOfficeSitesResponse
func (client *Client) DescribeOfficeSitesWithOptions(request *DescribeOfficeSitesRequest, runtime *util.RuntimeOptions) (_result *DescribeOfficeSitesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteType)) {
		query["OfficeSiteType"] = request.OfficeSiteType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityProtection)) {
		query["SecurityProtection"] = request.SecurityProtection
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOfficeSites"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOfficeSitesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries office network properties, including office network ID, name, status, and creation time.
//
// @param request - DescribeOfficeSitesRequest
//
// @return DescribeOfficeSitesResponse
func (client *Client) DescribeOfficeSites(request *DescribeOfficeSitesRequest) (_result *DescribeOfficeSitesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOfficeSitesResponse{}
	_body, _err := client.DescribeOfficeSitesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about one or more policies.
//
// @param request - DescribePolicyGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePolicyGroupsResponse
func (client *Client) DescribePolicyGroupsWithOptions(request *DescribePolicyGroupsRequest, runtime *util.RuntimeOptions) (_result *DescribePolicyGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePolicyGroups"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePolicyGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about one or more policies.
//
// @param request - DescribePolicyGroupsRequest
//
// @return DescribePolicyGroupsResponse
func (client *Client) DescribePolicyGroups(request *DescribePolicyGroupsRequest) (_result *DescribePolicyGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePolicyGroupsResponse{}
	_body, _err := client.DescribePolicyGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the price information of desktop resources in Elastic Desktop Service (EDS).
//
// Description:
//
// ## Usage notes
//
// The request parameters vary based on the type of desktop resources whose price you want to query. Take note of the following items:
//
// 	- If you set ResourceType to OfficeSite, you must specify InstanceType.
//
// 	- If you set ResourceType to Bandwidth, the pay-by-data-transfer metering method is used for network billing.
//
// 	- If you set ResourceType to Desktop, you must specify InstanceType, RootDiskSizeGib, and UserDiskSizeGib. You can specify OsType, PeriodUnit, Period, and Amount based on your business requirements.
//
// > Before you call this operation to query the prices of cloud desktops by setting ResourceType to Desktop, you must know the desktop types and disk sizes that EDS provides. The disk sizes vary based on the desktop types. For more information, see [Cloud desktop types](https://help.aliyun.com/document_detail/188609.html).
//
// @param request - DescribePriceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePriceResponse
func (client *Client) DescribePriceWithOptions(request *DescribePriceRequest, runtime *util.RuntimeOptions) (_result *DescribePriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.GroupDesktopCount)) {
		query["GroupDesktopCount"] = request.GroupDesktopCount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.InternetChargeType)) {
		query["InternetChargeType"] = request.InternetChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		query["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.RootDiskCategory)) {
		query["RootDiskCategory"] = request.RootDiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.RootDiskSizeGib)) {
		query["RootDiskSizeGib"] = request.RootDiskSizeGib
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskCategory)) {
		query["UserDiskCategory"] = request.UserDiskCategory
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskSizeGib)) {
		query["UserDiskSizeGib"] = request.UserDiskSizeGib
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePrice"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the price information of desktop resources in Elastic Desktop Service (EDS).
//
// Description:
//
// ## Usage notes
//
// The request parameters vary based on the type of desktop resources whose price you want to query. Take note of the following items:
//
// 	- If you set ResourceType to OfficeSite, you must specify InstanceType.
//
// 	- If you set ResourceType to Bandwidth, the pay-by-data-transfer metering method is used for network billing.
//
// 	- If you set ResourceType to Desktop, you must specify InstanceType, RootDiskSizeGib, and UserDiskSizeGib. You can specify OsType, PeriodUnit, Period, and Amount based on your business requirements.
//
// > Before you call this operation to query the prices of cloud desktops by setting ResourceType to Desktop, you must know the desktop types and disk sizes that EDS provides. The disk sizes vary based on the desktop types. For more information, see [Cloud desktop types](https://help.aliyun.com/document_detail/188609.html).
//
// @param request - DescribePriceRequest
//
// @return DescribePriceResponse
func (client *Client) DescribePrice(request *DescribePriceRequest) (_result *DescribePriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceResponse{}
	_body, _err := client.DescribePriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询价格用于创建超卖组
//
// @param request - DescribePriceForCreateDesktopOversoldGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePriceForCreateDesktopOversoldGroupResponse
func (client *Client) DescribePriceForCreateDesktopOversoldGroupWithOptions(request *DescribePriceForCreateDesktopOversoldGroupRequest, runtime *util.RuntimeOptions) (_result *DescribePriceForCreateDesktopOversoldGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcurrenceCount)) {
		query["ConcurrenceCount"] = request.ConcurrenceCount
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskSize)) {
		query["DataDiskSize"] = request.DataDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopType)) {
		query["DesktopType"] = request.DesktopType
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldUserCount)) {
		query["OversoldUserCount"] = request.OversoldUserCount
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskSize)) {
		query["SystemDiskSize"] = request.SystemDiskSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePriceForCreateDesktopOversoldGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePriceForCreateDesktopOversoldGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询价格用于创建超卖组
//
// @param request - DescribePriceForCreateDesktopOversoldGroupRequest
//
// @return DescribePriceForCreateDesktopOversoldGroupResponse
func (client *Client) DescribePriceForCreateDesktopOversoldGroup(request *DescribePriceForCreateDesktopOversoldGroupRequest) (_result *DescribePriceForCreateDesktopOversoldGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceForCreateDesktopOversoldGroupResponse{}
	_body, _err := client.DescribePriceForCreateDesktopOversoldGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询价格用于变配超卖组
//
// @param request - DescribePriceForModifyDesktopOversoldGroupSaleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePriceForModifyDesktopOversoldGroupSaleResponse
func (client *Client) DescribePriceForModifyDesktopOversoldGroupSaleWithOptions(request *DescribePriceForModifyDesktopOversoldGroupSaleRequest, runtime *util.RuntimeOptions) (_result *DescribePriceForModifyDesktopOversoldGroupSaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcurrenceCount)) {
		query["ConcurrenceCount"] = request.ConcurrenceCount
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldUserCount)) {
		query["OversoldUserCount"] = request.OversoldUserCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePriceForModifyDesktopOversoldGroupSale"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePriceForModifyDesktopOversoldGroupSaleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询价格用于变配超卖组
//
// @param request - DescribePriceForModifyDesktopOversoldGroupSaleRequest
//
// @return DescribePriceForModifyDesktopOversoldGroupSaleResponse
func (client *Client) DescribePriceForModifyDesktopOversoldGroupSale(request *DescribePriceForModifyDesktopOversoldGroupSaleRequest) (_result *DescribePriceForModifyDesktopOversoldGroupSaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceForModifyDesktopOversoldGroupSaleResponse{}
	_body, _err := client.DescribePriceForModifyDesktopOversoldGroupSaleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询价格用于续费超卖组
//
// @param request - DescribePriceForRenewDesktopOversoldGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePriceForRenewDesktopOversoldGroupResponse
func (client *Client) DescribePriceForRenewDesktopOversoldGroupWithOptions(request *DescribePriceForRenewDesktopOversoldGroupRequest, runtime *util.RuntimeOptions) (_result *DescribePriceForRenewDesktopOversoldGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePriceForRenewDesktopOversoldGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePriceForRenewDesktopOversoldGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询价格用于续费超卖组
//
// @param request - DescribePriceForRenewDesktopOversoldGroupRequest
//
// @return DescribePriceForRenewDesktopOversoldGroupResponse
func (client *Client) DescribePriceForRenewDesktopOversoldGroup(request *DescribePriceForRenewDesktopOversoldGroupRequest) (_result *DescribePriceForRenewDesktopOversoldGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePriceForRenewDesktopOversoldGroupResponse{}
	_body, _err := client.DescribePriceForRenewDesktopOversoldGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeRecordingsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRecordingsResponse
func (client *Client) DescribeRecordingsWithOptions(request *DescribeRecordingsRequest, runtime *util.RuntimeOptions) (_result *DescribeRecordingsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NeedSignedUrl)) {
		query["NeedSignedUrl"] = request.NeedSignedUrl
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SignedUrlExpireMinutes)) {
		query["SignedUrlExpireMinutes"] = request.SignedUrlExpireMinutes
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRecordings"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRecordingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeRecordingsRequest
//
// @return DescribeRecordingsResponse
func (client *Client) DescribeRecordings(request *DescribeRecordingsRequest) (_result *DescribeRecordingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRecordingsResponse{}
	_body, _err := client.DescribeRecordingsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeRefundPriceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRefundPriceResponse
func (client *Client) DescribeRefundPriceWithOptions(request *DescribeRefundPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeRefundPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RefundType)) {
		query["RefundType"] = request.RefundType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRefundPrice"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRefundPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeRefundPriceRequest
//
// @return DescribeRefundPriceResponse
func (client *Client) DescribeRefundPrice(request *DescribeRefundPriceRequest) (_result *DescribeRefundPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRefundPriceResponse{}
	_body, _err := client.DescribeRefundPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the Alibaba Cloud regions that are available for Elastic Desktop Service (EDS).
//
// @param request - DescribeRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(request *DescribeRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AcceptLanguage)) {
		query["AcceptLanguage"] = request.AcceptLanguage
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the Alibaba Cloud regions that are available for Elastic Desktop Service (EDS).
//
// @param request - DescribeRegionsRequest
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegions(request *DescribeRegionsRequest) (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeRenewalPriceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRenewalPriceResponse
func (client *Client) DescribeRenewalPriceWithOptions(request *DescribeRenewalPriceRequest, runtime *util.RuntimeOptions) (_result *DescribeRenewalPriceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeRenewalPrice"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeRenewalPriceRequest
//
// @return DescribeRenewalPriceResponse
func (client *Client) DescribeRenewalPrice(request *DescribeRenewalPriceRequest) (_result *DescribeRenewalPriceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRenewalPriceResponse{}
	_body, _err := client.DescribeRenewalPriceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the session statistics of a region.
//
// Description:
//
//   This is a central operation and can be called only by using services in the China (Shanghai) region.
//
// 	- You can query session statistics for the past hour.
//
// @param request - DescribeSessionStatisticRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSessionStatisticResponse
func (client *Client) DescribeSessionStatisticWithOptions(request *DescribeSessionStatisticRequest, runtime *util.RuntimeOptions) (_result *DescribeSessionStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchRegionId)) {
		query["SearchRegionId"] = request.SearchRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSessionStatistic"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSessionStatisticResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the session statistics of a region.
//
// Description:
//
//   This is a central operation and can be called only by using services in the China (Shanghai) region.
//
// 	- You can query session statistics for the past hour.
//
// @param request - DescribeSessionStatisticRequest
//
// @return DescribeSessionStatisticResponse
func (client *Client) DescribeSessionStatistic(request *DescribeSessionStatisticRequest) (_result *DescribeSessionStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSessionStatisticResponse{}
	_body, _err := client.DescribeSessionStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the snapshots that are created based on a cloud computer and the details of the snapshots.
//
// @param request - DescribeSnapshotsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSnapshotsResponse
func (client *Client) DescribeSnapshotsWithOptions(request *DescribeSnapshotsRequest, runtime *util.RuntimeOptions) (_result *DescribeSnapshotsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Creator)) {
		query["Creator"] = request.Creator
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotName)) {
		query["SnapshotName"] = request.SnapshotName
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotType)) {
		query["SnapshotType"] = request.SnapshotType
	}

	if !tea.BoolValue(util.IsUnset(request.SourceDiskType)) {
		query["SourceDiskType"] = request.SourceDiskType
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSnapshots"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the snapshots that are created based on a cloud computer and the details of the snapshots.
//
// @param request - DescribeSnapshotsRequest
//
// @return DescribeSnapshotsResponse
func (client *Client) DescribeSnapshots(request *DescribeSnapshotsRequest) (_result *DescribeSnapshotsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSnapshotsResponse{}
	_body, _err := client.DescribeSnapshotsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询超卖组中用户连接数据
//
// @param request - DescribeUserConnectTimeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserConnectTimeResponse
func (client *Client) DescribeUserConnectTimeWithOptions(request *DescribeUserConnectTimeRequest, runtime *util.RuntimeOptions) (_result *DescribeUserConnectTimeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.UserDesktopId)) {
		query["UserDesktopId"] = request.UserDesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserConnectTime"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserConnectTimeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询超卖组中用户连接数据
//
// @param request - DescribeUserConnectTimeRequest
//
// @return DescribeUserConnectTimeResponse
func (client *Client) DescribeUserConnectTime(request *DescribeUserConnectTimeRequest) (_result *DescribeUserConnectTimeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserConnectTimeResponse{}
	_body, _err := client.DescribeUserConnectTimeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the connection records of an authorized user to cloud computers in a cloud computer pool.
//
// @param request - DescribeUserConnectionRecordsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserConnectionRecordsResponse
func (client *Client) DescribeUserConnectionRecordsWithOptions(request *DescribeUserConnectionRecordsRequest, runtime *util.RuntimeOptions) (_result *DescribeUserConnectionRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectDurationFrom)) {
		query["ConnectDurationFrom"] = request.ConnectDurationFrom
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectDurationTo)) {
		query["ConnectDurationTo"] = request.ConnectDurationTo
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectEndTimeFrom)) {
		query["ConnectEndTimeFrom"] = request.ConnectEndTimeFrom
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectEndTimeTo)) {
		query["ConnectEndTimeTo"] = request.ConnectEndTimeTo
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectStartTimeFrom)) {
		query["ConnectStartTimeFrom"] = request.ConnectStartTimeFrom
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectStartTimeTo)) {
		query["ConnectStartTimeTo"] = request.ConnectStartTimeTo
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserType)) {
		query["EndUserType"] = request.EndUserType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserConnectionRecords"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserConnectionRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the connection records of an authorized user to cloud computers in a cloud computer pool.
//
// @param request - DescribeUserConnectionRecordsRequest
//
// @return DescribeUserConnectionRecordsResponse
func (client *Client) DescribeUserConnectionRecords(request *DescribeUserConnectionRecordsRequest) (_result *DescribeUserConnectionRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserConnectionRecordsResponse{}
	_body, _err := client.DescribeUserConnectionRecordsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the configurations of the user profile management (UPM) directory blacklist and whitelist.
//
// @param request - DescribeUserProfilePathRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUserProfilePathRulesResponse
func (client *Client) DescribeUserProfilePathRulesWithOptions(request *DescribeUserProfilePathRulesRequest, runtime *util.RuntimeOptions) (_result *DescribeUserProfilePathRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RuleType)) {
		query["RuleType"] = request.RuleType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUserProfilePathRules"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUserProfilePathRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the configurations of the user profile management (UPM) directory blacklist and whitelist.
//
// @param request - DescribeUserProfilePathRulesRequest
//
// @return DescribeUserProfilePathRulesResponse
func (client *Client) DescribeUserProfilePathRules(request *DescribeUserProfilePathRulesRequest) (_result *DescribeUserProfilePathRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUserProfilePathRulesResponse{}
	_body, _err := client.DescribeUserProfilePathRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about authorized users in a cloud computer pool, including the usernames, email addresses, mobile numbers, and cloud computer IDs.
//
// @param request - DescribeUsersInGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUsersInGroupResponse
func (client *Client) DescribeUsersInGroupWithOptions(request *DescribeUsersInGroupRequest, runtime *util.RuntimeOptions) (_result *DescribeUsersInGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConnectState)) {
		query["ConnectState"] = request.ConnectState
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserIds)) {
		query["EndUserIds"] = request.EndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		query["OrgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.QueryUserDetail)) {
		query["QueryUserDetail"] = request.QueryUserDetail
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUsersInGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUsersInGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about authorized users in a cloud computer pool, including the usernames, email addresses, mobile numbers, and cloud computer IDs.
//
// @param request - DescribeUsersInGroupRequest
//
// @return DescribeUsersInGroupResponse
func (client *Client) DescribeUsersInGroup(request *DescribeUsersInGroupRequest) (_result *DescribeUsersInGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUsersInGroupResponse{}
	_body, _err := client.DescribeUsersInGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the passwords of authorized users of a cloud computer.
//
// @param request - DescribeUsersPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeUsersPasswordResponse
func (client *Client) DescribeUsersPasswordWithOptions(request *DescribeUsersPasswordRequest, runtime *util.RuntimeOptions) (_result *DescribeUsersPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeUsersPassword"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeUsersPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the passwords of authorized users of a cloud computer.
//
// @param request - DescribeUsersPasswordRequest
//
// @return DescribeUsersPasswordResponse
func (client *Client) DescribeUsersPassword(request *DescribeUsersPasswordRequest) (_result *DescribeUsersPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeUsersPasswordResponse{}
	_body, _err := client.DescribeUsersPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries multi-factor authentication (MFA) devices that are bound to an Active Directory (AD) account.
//
// @param request - DescribeVirtualMFADevicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeVirtualMFADevicesResponse
func (client *Client) DescribeVirtualMFADevicesWithOptions(request *DescribeVirtualMFADevicesRequest, runtime *util.RuntimeOptions) (_result *DescribeVirtualMFADevicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeVirtualMFADevices"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeVirtualMFADevicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries multi-factor authentication (MFA) devices that are bound to an Active Directory (AD) account.
//
// @param request - DescribeVirtualMFADevicesRequest
//
// @return DescribeVirtualMFADevicesResponse
func (client *Client) DescribeVirtualMFADevices(request *DescribeVirtualMFADevicesRequest) (_result *DescribeVirtualMFADevicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeVirtualMFADevicesResponse{}
	_body, _err := client.DescribeVirtualMFADevicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the zones in a region in which Elastic Desktop Service is supported.
//
// @param request - DescribeZonesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeZonesResponse
func (client *Client) DescribeZonesWithOptions(request *DescribeZonesRequest, runtime *util.RuntimeOptions) (_result *DescribeZonesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneType)) {
		query["ZoneType"] = request.ZoneType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeZones"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeZonesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the zones in a region in which Elastic Desktop Service is supported.
//
// @param request - DescribeZonesRequest
//
// @return DescribeZonesResponse
func (client *Client) DescribeZones(request *DescribeZonesRequest) (_result *DescribeZonesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeZonesResponse{}
	_body, _err := client.DescribeZonesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds an advanced office network from a CEN instance.
//
// @param request - DetachCenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachCenResponse
func (client *Client) DetachCenWithOptions(request *DetachCenRequest, runtime *util.RuntimeOptions) (_result *DetachCenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachCen"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetachCenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds an advanced office network from a CEN instance.
//
// @param request - DetachCenRequest
//
// @return DetachCenResponse
func (client *Client) DetachCen(request *DetachCenRequest) (_result *DetachCenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachCenResponse{}
	_body, _err := client.DetachCenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds a hardware client from a user.
//
// @param request - DetachEndUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetachEndUserResponse
func (client *Client) DetachEndUserWithOptions(request *DetachEndUserRequest, runtime *util.RuntimeOptions) (_result *DetachEndUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdDomain)) {
		query["AdDomain"] = request.AdDomain
	}

	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceId)) {
		query["DeviceId"] = request.DeviceId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetachEndUser"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetachEndUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds a hardware client from a user.
//
// @param request - DetachEndUserRequest
//
// @return DetachEndUserResponse
func (client *Client) DetachEndUser(request *DetachEndUserRequest) (_result *DetachEndUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachEndUserResponse{}
	_body, _err := client.DetachEndUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disables cloud desktops in a desktop group.
//
// @param request - DisableDesktopsInGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisableDesktopsInGroupResponse
func (client *Client) DisableDesktopsInGroupWithOptions(request *DisableDesktopsInGroupRequest, runtime *util.RuntimeOptions) (_result *DisableDesktopsInGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopIds)) {
		query["DesktopIds"] = request.DesktopIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableDesktopsInGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableDesktopsInGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disables cloud desktops in a desktop group.
//
// @param request - DisableDesktopsInGroupRequest
//
// @return DisableDesktopsInGroupResponse
func (client *Client) DisableDesktopsInGroup(request *DisableDesktopsInGroupRequest) (_result *DisableDesktopsInGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableDesktopsInGroupResponse{}
	_body, _err := client.DisableDesktopsInGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Disconnects from desktop sessions.
//
// @param request - DisconnectDesktopSessionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DisconnectDesktopSessionsResponse
func (client *Client) DisconnectDesktopSessionsWithOptions(request *DisconnectDesktopSessionsRequest, runtime *util.RuntimeOptions) (_result *DisconnectDesktopSessionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PreCheck)) {
		query["PreCheck"] = request.PreCheck
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Sessions)) {
		query["Sessions"] = request.Sessions
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisconnectDesktopSessions"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisconnectDesktopSessionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Disconnects from desktop sessions.
//
// @param request - DisconnectDesktopSessionsRequest
//
// @return DisconnectDesktopSessionsResponse
func (client *Client) DisconnectDesktopSessions(request *DisconnectDesktopSessionsRequest) (_result *DisconnectDesktopSessionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisconnectDesktopSessionsResponse{}
	_body, _err := client.DisconnectDesktopSessionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unbinds a premium bandwidth plan from an office network.
//
// @param request - DissociateNetworkPackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DissociateNetworkPackageResponse
func (client *Client) DissociateNetworkPackageWithOptions(request *DissociateNetworkPackageRequest, runtime *util.RuntimeOptions) (_result *DissociateNetworkPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NetworkPackageId)) {
		query["NetworkPackageId"] = request.NetworkPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DissociateNetworkPackage"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DissociateNetworkPackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unbinds a premium bandwidth plan from an office network.
//
// @param request - DissociateNetworkPackageRequest
//
// @return DissociateNetworkPackageResponse
func (client *Client) DissociateNetworkPackage(request *DissociateNetworkPackageRequest) (_result *DissociateNetworkPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DissociateNetworkPackageResponse{}
	_body, _err := client.DissociateNetworkPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// CDS文件下载
//
// @param request - DownloadCdsFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadCdsFileResponse
func (client *Client) DownloadCdsFileWithOptions(request *DownloadCdsFileRequest, runtime *util.RuntimeOptions) (_result *DownloadCdsFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadCdsFile"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadCdsFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// CDS文件下载
//
// @param request - DownloadCdsFileRequest
//
// @return DownloadCdsFileResponse
func (client *Client) DownloadCdsFile(request *DownloadCdsFileRequest) (_result *DownloadCdsFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadCdsFileResponse{}
	_body, _err := client.DownloadCdsFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Exports events that occur on a cloud desktop from an Alibaba Cloud Workspace client.
//
// @param request - ExportClientEventsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportClientEventsResponse
func (client *Client) ExportClientEventsWithOptions(request *ExportClientEventsRequest, runtime *util.RuntimeOptions) (_result *ExportClientEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.EventType)) {
		query["EventType"] = request.EventType
	}

	if !tea.BoolValue(util.IsUnset(request.EventTypes)) {
		query["EventTypes"] = request.EventTypes
	}

	if !tea.BoolValue(util.IsUnset(request.LangType)) {
		query["LangType"] = request.LangType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteName)) {
		query["OfficeSiteName"] = request.OfficeSiteName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportClientEvents"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportClientEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports events that occur on a cloud desktop from an Alibaba Cloud Workspace client.
//
// @param request - ExportClientEventsRequest
//
// @return ExportClientEventsResponse
func (client *Client) ExportClientEvents(request *ExportClientEventsRequest) (_result *ExportClientEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportClientEventsResponse{}
	_body, _err := client.ExportClientEventsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Exports cloud computer pools. The list of cloud computer pools is saved as an XLSX file. Each entry of cloud computer pool data includes the ID and name of the cloud computer pool, the ID and name of the office network, the cloud computer pool template, and the name of the security policy.
//
// @param request - ExportDesktopGroupInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportDesktopGroupInfoResponse
func (client *Client) ExportDesktopGroupInfoWithOptions(request *ExportDesktopGroupInfoRequest, runtime *util.RuntimeOptions) (_result *ExportDesktopGroupInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupName)) {
		query["DesktopGroupName"] = request.DesktopGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.LangType)) {
		query["LangType"] = request.LangType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportDesktopGroupInfo"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportDesktopGroupInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports cloud computer pools. The list of cloud computer pools is saved as an XLSX file. Each entry of cloud computer pool data includes the ID and name of the cloud computer pool, the ID and name of the office network, the cloud computer pool template, and the name of the security policy.
//
// @param request - ExportDesktopGroupInfoRequest
//
// @return ExportDesktopGroupInfoResponse
func (client *Client) ExportDesktopGroupInfo(request *ExportDesktopGroupInfoRequest) (_result *ExportDesktopGroupInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportDesktopGroupInfoResponse{}
	_body, _err := client.ExportDesktopGroupInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Exports a cloud computer list as a CSV file.
//
// Description:
//
// The cloud computer list exported by calling this operation is saved as a CSV file. Each entry of data of a cloud computer includes the following fields:
//
// 	- Cloud computer ID and name
//
// 	- Office network ID and name
//
// 	- The instance type, OS and protocol of the cloud computer
//
// 	- System disk and data disk of the cloud computer
//
// 	- The status
//
// 	- Purchase method
//
// 	- The time when the cloud computer expires
//
// 	- Remaining duration and total duration
//
// 	- Number of assigned users and number of current users
//
// 	- Office network type
//
// 	- The time when the cloud computer was created
//
// 	- Tags
//
// 	- Encryption status
//
// 	- IP
//
// 	- The hostname
//
// @param request - ExportDesktopListInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExportDesktopListInfoResponse
func (client *Client) ExportDesktopListInfoWithOptions(request *ExportDesktopListInfoRequest, runtime *util.RuntimeOptions) (_result *ExportDesktopListInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopName)) {
		query["DesktopName"] = request.DesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopStatus)) {
		query["DesktopStatus"] = request.DesktopStatus
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTime)) {
		query["ExpiredTime"] = request.ExpiredTime
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.LangType)) {
		query["LangType"] = request.LangType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ExportDesktopListInfo"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExportDesktopListInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Exports a cloud computer list as a CSV file.
//
// Description:
//
// The cloud computer list exported by calling this operation is saved as a CSV file. Each entry of data of a cloud computer includes the following fields:
//
// 	- Cloud computer ID and name
//
// 	- Office network ID and name
//
// 	- The instance type, OS and protocol of the cloud computer
//
// 	- System disk and data disk of the cloud computer
//
// 	- The status
//
// 	- Purchase method
//
// 	- The time when the cloud computer expires
//
// 	- Remaining duration and total duration
//
// 	- Number of assigned users and number of current users
//
// 	- Office network type
//
// 	- The time when the cloud computer was created
//
// 	- Tags
//
// 	- Encryption status
//
// 	- IP
//
// 	- The hostname
//
// @param request - ExportDesktopListInfoRequest
//
// @return ExportDesktopListInfoResponse
func (client *Client) ExportDesktopListInfo(request *ExportDesktopListInfoRequest) (_result *ExportDesktopListInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ExportDesktopListInfoResponse{}
	_body, _err := client.ExportDesktopListInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the information about an asynchronous task based on the value of the AsyncTaskId parameter that you obtain by calling the CopyCdsFile operation.
//
// @param request - GetAsyncTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAsyncTaskResponse
func (client *Client) GetAsyncTaskWithOptions(request *GetAsyncTaskRequest, runtime *util.RuntimeOptions) (_result *GetAsyncTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AsyncTaskId)) {
		query["AsyncTaskId"] = request.AsyncTaskId
	}

	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsyncTask"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAsyncTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the information about an asynchronous task based on the value of the AsyncTaskId parameter that you obtain by calling the CopyCdsFile operation.
//
// @param request - GetAsyncTaskRequest
//
// @return GetAsyncTaskResponse
func (client *Client) GetAsyncTask(request *GetAsyncTaskRequest) (_result *GetAsyncTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsyncTaskResponse{}
	_body, _err := client.GetAsyncTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the credential that is used to connect to a cloud desktop.
//
// Description:
//
// The cloud computer must be in the Running state.
//
// @param request - GetConnectionTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetConnectionTicketResponse
func (client *Client) GetConnectionTicketWithOptions(request *GetConnectionTicketRequest, runtime *util.RuntimeOptions) (_result *GetConnectionTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandContent)) {
		query["CommandContent"] = request.CommandContent
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetConnectionTicket"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetConnectionTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the credential that is used to connect to a cloud desktop.
//
// Description:
//
// The cloud computer must be in the Running state.
//
// @param request - GetConnectionTicketRequest
//
// @return GetConnectionTicketResponse
func (client *Client) GetConnectionTicket(request *GetConnectionTicketRequest) (_result *GetConnectionTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetConnectionTicketResponse{}
	_body, _err := client.GetConnectionTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the credentials of the stream collaboration
//
// @param request - GetCoordinateTicketRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCoordinateTicketResponse
func (client *Client) GetCoordinateTicketWithOptions(request *GetCoordinateTicketRequest, runtime *util.RuntimeOptions) (_result *GetCoordinateTicketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoId)) {
		query["CoId"] = request.CoId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		query["UserType"] = request.UserType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCoordinateTicket"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCoordinateTicketResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the credentials of the stream collaboration
//
// @param request - GetCoordinateTicketRequest
//
// @return GetCoordinateTicketResponse
func (client *Client) GetCoordinateTicket(request *GetCoordinateTicketRequest) (_result *GetCoordinateTicketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCoordinateTicketResponse{}
	_body, _err := client.GetCoordinateTicketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about a cloud computer pool.
//
// @param request - GetDesktopGroupDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDesktopGroupDetailResponse
func (client *Client) GetDesktopGroupDetailWithOptions(request *GetDesktopGroupDetailRequest, runtime *util.RuntimeOptions) (_result *GetDesktopGroupDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDesktopGroupDetail"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDesktopGroupDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about a cloud computer pool.
//
// @param request - GetDesktopGroupDetailRequest
//
// @return GetDesktopGroupDetailResponse
func (client *Client) GetDesktopGroupDetail(request *GetDesktopGroupDetailRequest) (_result *GetDesktopGroupDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDesktopGroupDetailResponse{}
	_body, _err := client.GetDesktopGroupDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries whether single sign-on (SSO) is enabled for a workspace.
//
// @param request - GetOfficeSiteSsoStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOfficeSiteSsoStatusResponse
func (client *Client) GetOfficeSiteSsoStatusWithOptions(request *GetOfficeSiteSsoStatusRequest, runtime *util.RuntimeOptions) (_result *GetOfficeSiteSsoStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOfficeSiteSsoStatus"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOfficeSiteSsoStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries whether single sign-on (SSO) is enabled for a workspace.
//
// @param request - GetOfficeSiteSsoStatusRequest
//
// @return GetOfficeSiteSsoStatusResponse
func (client *Client) GetOfficeSiteSsoStatus(request *GetOfficeSiteSsoStatusRequest) (_result *GetOfficeSiteSsoStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOfficeSiteSsoStatusResponse{}
	_body, _err := client.GetOfficeSiteSsoStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the metadata of a Security Assertion Markup Language (SAML) 2.0-based service provider (SP).
//
// Description:
//
// You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
//
// @param request - GetSpMetadataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSpMetadataResponse
func (client *Client) GetSpMetadataWithOptions(request *GetSpMetadataRequest, runtime *util.RuntimeOptions) (_result *GetSpMetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSpMetadata"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSpMetadataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the metadata of a Security Assertion Markup Language (SAML) 2.0-based service provider (SP).
//
// Description:
//
// You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
//
// @param request - GetSpMetadataRequest
//
// @return GetSpMetadataResponse
func (client *Client) GetSpMetadata(request *GetSpMetadataRequest) (_result *GetSpMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSpMetadataResponse{}
	_body, _err := client.GetSpMetadataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Hibernates cloud desktops.
//
// Description:
//
// Hibernating a cloud desktop is in private preview. If you want to try this feature, submit a ticket.
//
// @param request - HibernateDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return HibernateDesktopsResponse
func (client *Client) HibernateDesktopsWithOptions(request *HibernateDesktopsRequest, runtime *util.RuntimeOptions) (_result *HibernateDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("HibernateDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &HibernateDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Hibernates cloud desktops.
//
// Description:
//
// Hibernating a cloud desktop is in private preview. If you want to try this feature, submit a ticket.
//
// @param request - HibernateDesktopsRequest
//
// @return HibernateDesktopsResponse
func (client *Client) HibernateDesktops(request *HibernateDesktopsRequest) (_result *HibernateDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &HibernateDesktopsResponse{}
	_body, _err := client.HibernateDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the files in a cloud disk.
//
// @param tmpReq - ListCdsFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCdsFilesResponse
func (client *Client) ListCdsFilesWithOptions(tmpReq *ListCdsFilesRequest, runtime *util.RuntimeOptions) (_result *ListCdsFilesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListCdsFilesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.FileIds)) {
		request.FileIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FileIds, tea.String("FileIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileIdsShrink)) {
		query["FileIds"] = request.FileIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFileId)) {
		query["ParentFileId"] = request.ParentFileId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCdsFiles"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCdsFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the files in a cloud disk.
//
// @param request - ListCdsFilesRequest
//
// @return ListCdsFilesResponse
func (client *Client) ListCdsFiles(request *ListCdsFilesRequest) (_result *ListCdsFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCdsFilesResponse{}
	_body, _err := client.ListCdsFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the user information in the AD system if you use an AD directory to connect to an AD system.
//
// Description:
//
// If you use an AD directory to connect to an AD system, you can call this operation to obtain the user information in the AD system.
//
// @param request - ListDirectoryUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDirectoryUsersResponse
func (client *Client) ListDirectoryUsersWithOptions(request *ListDirectoryUsersRequest, runtime *util.RuntimeOptions) (_result *ListDirectoryUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssignedInfo)) {
		query["AssignedInfo"] = request.AssignedInfo
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeAssignedUser)) {
		query["IncludeAssignedUser"] = request.IncludeAssignedUser
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OUPath)) {
		query["OUPath"] = request.OUPath
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDirectoryUsers"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDirectoryUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the user information in the AD system if you use an AD directory to connect to an AD system.
//
// Description:
//
// If you use an AD directory to connect to an AD system, you can call this operation to obtain the user information in the AD system.
//
// @param request - ListDirectoryUsersRequest
//
// @return ListDirectoryUsersResponse
func (client *Client) ListDirectoryUsers(request *ListDirectoryUsersRequest) (_result *ListDirectoryUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDirectoryUsersResponse{}
	_body, _err := client.ListDirectoryUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the information about shared files of cloud disks.
//
// @param request - ListFilePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFilePermissionResponse
func (client *Client) ListFilePermissionWithOptions(request *ListFilePermissionRequest, runtime *util.RuntimeOptions) (_result *ListFilePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFilePermission"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFilePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the information about shared files of cloud disks.
//
// @param request - ListFilePermissionRequest
//
// @return ListFilePermissionResponse
func (client *Client) ListFilePermission(request *ListFilePermissionRequest) (_result *ListFilePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFilePermissionResponse{}
	_body, _err := client.ListFilePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about an office network, including its status, cloud computer quantity, virtual private cloud (VPC) type, and more.
//
// @param request - ListOfficeSiteOverviewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOfficeSiteOverviewResponse
func (client *Client) ListOfficeSiteOverviewWithOptions(request *ListOfficeSiteOverviewRequest, runtime *util.RuntimeOptions) (_result *ListOfficeSiteOverviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForceRefresh)) {
		query["ForceRefresh"] = request.ForceRefresh
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.QueryRange)) {
		query["QueryRange"] = request.QueryRange
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOfficeSiteOverview"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOfficeSiteOverviewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about an office network, including its status, cloud computer quantity, virtual private cloud (VPC) type, and more.
//
// @param request - ListOfficeSiteOverviewRequest
//
// @return ListOfficeSiteOverviewResponse
func (client *Client) ListOfficeSiteOverview(request *ListOfficeSiteOverviewRequest) (_result *ListOfficeSiteOverviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOfficeSiteOverviewResponse{}
	_body, _err := client.ListOfficeSiteOverviewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries information about Active Directory (AD) users after an enterprise AD office network (formerly workspace) interconnects to an AD domain.
//
// @param request - ListOfficeSiteUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListOfficeSiteUsersResponse
func (client *Client) ListOfficeSiteUsersWithOptions(request *ListOfficeSiteUsersRequest, runtime *util.RuntimeOptions) (_result *ListOfficeSiteUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AssignedInfo)) {
		query["AssignedInfo"] = request.AssignedInfo
	}

	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeAssignedUser)) {
		query["IncludeAssignedUser"] = request.IncludeAssignedUser
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OUPath)) {
		query["OUPath"] = request.OUPath
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListOfficeSiteUsers"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListOfficeSiteUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries information about Active Directory (AD) users after an enterprise AD office network (formerly workspace) interconnects to an AD domain.
//
// @param request - ListOfficeSiteUsersRequest
//
// @return ListOfficeSiteUsersResponse
func (client *Client) ListOfficeSiteUsers(request *ListOfficeSiteUsersRequest) (_result *ListOfficeSiteUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListOfficeSiteUsersResponse{}
	_body, _err := client.ListOfficeSiteUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Queries the tags of cloud computers.
//
// Description:
//
// You must use at least one of the following parameters in the request to determine the object that you want to query: `ResourceId.N`, `Tag.N.Key`, and `Tag.N.Value`.
//
// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Queries the tags of cloud computers.
//
// Description:
//
// You must use at least one of the following parameters in the request to determine the object that you want to query: `ResourceId.N`, `Tag.N.Key`, and `Tag.N.Value`.
//
// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the organizational units (OUs) of an Active Directory (AD) domain that is connected to an enterprise AD office network (formerly workspace).
//
// @param request - ListUserAdOrganizationUnitsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListUserAdOrganizationUnitsResponse
func (client *Client) ListUserAdOrganizationUnitsWithOptions(request *ListUserAdOrganizationUnitsRequest, runtime *util.RuntimeOptions) (_result *ListUserAdOrganizationUnitsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Filter)) {
		query["Filter"] = request.Filter
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListUserAdOrganizationUnits"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListUserAdOrganizationUnitsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the organizational units (OUs) of an Active Directory (AD) domain that is connected to an enterprise AD office network (formerly workspace).
//
// @param request - ListUserAdOrganizationUnitsRequest
//
// @return ListUserAdOrganizationUnitsResponse
func (client *Client) ListUserAdOrganizationUnits(request *ListUserAdOrganizationUnitsRequest) (_result *ListUserAdOrganizationUnitsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUserAdOrganizationUnitsResponse{}
	_body, _err := client.ListUserAdOrganizationUnitsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Locks a multi-factor authentication (MFA) device that is in the NORMAL state.
//
// Description:
//
// After a virtual MFA device is locked, its status changes to LOCKED. The Active Directory (AD) user who uses the virtual MFA device is unable to pass MFA and is therefore unable to log on to the client. You can call the [UnlockVirtualMFADevice](https://help.aliyun.com/document_detail/206212.html) operation to unlock the device.
//
// @param request - LockVirtualMFADeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return LockVirtualMFADeviceResponse
func (client *Client) LockVirtualMFADeviceWithOptions(request *LockVirtualMFADeviceRequest, runtime *util.RuntimeOptions) (_result *LockVirtualMFADeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("LockVirtualMFADevice"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &LockVirtualMFADeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Locks a multi-factor authentication (MFA) device that is in the NORMAL state.
//
// Description:
//
// After a virtual MFA device is locked, its status changes to LOCKED. The Active Directory (AD) user who uses the virtual MFA device is unable to pass MFA and is therefore unable to log on to the client. You can call the [UnlockVirtualMFADevice](https://help.aliyun.com/document_detail/206212.html) operation to unlock the device.
//
// @param request - LockVirtualMFADeviceRequest
//
// @return LockVirtualMFADeviceResponse
func (client *Client) LockVirtualMFADevice(request *LockVirtualMFADeviceRequest) (_result *LockVirtualMFADeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LockVirtualMFADeviceResponse{}
	_body, _err := client.LockVirtualMFADeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Migrates cloud computers from the current office network (formerly called workspace) to the new office network.
//
// @param request - MigrateDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MigrateDesktopsResponse
func (client *Client) MigrateDesktopsWithOptions(request *MigrateDesktopsRequest, runtime *util.RuntimeOptions) (_result *MigrateDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetOfficeSiteId)) {
		query["TargetOfficeSiteId"] = request.TargetOfficeSiteId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MigrateDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MigrateDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Migrates cloud computers from the current office network (formerly called workspace) to the new office network.
//
// @param request - MigrateDesktopsRequest
//
// @return MigrateDesktopsResponse
func (client *Client) MigrateDesktops(request *MigrateDesktopsRequest) (_result *MigrateDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateDesktopsResponse{}
	_body, _err := client.MigrateDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Update the protocols of images to Adaptive Streaming Protocol (ASP).
//
// @param request - MigrateImageProtocolRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MigrateImageProtocolResponse
func (client *Client) MigrateImageProtocolWithOptions(request *MigrateImageProtocolRequest, runtime *util.RuntimeOptions) (_result *MigrateImageProtocolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TargetProtocolType)) {
		query["TargetProtocolType"] = request.TargetProtocolType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MigrateImageProtocol"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MigrateImageProtocolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Update the protocols of images to Adaptive Streaming Protocol (ASP).
//
// @param request - MigrateImageProtocolRequest
//
// @return MigrateImageProtocolResponse
func (client *Client) MigrateImageProtocol(request *MigrateImageProtocolRequest) (_result *MigrateImageProtocolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MigrateImageProtocolResponse{}
	_body, _err := client.MigrateImageProtocolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies an Active Directory (AD) directory.
//
// Description:
//
// You can modify the following domain name- and Domain Name System (DNS)-related parameters only for Active Directory (AD) directories that are in the ERROR or REGISTERING state: `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress`.
//
// @param request - ModifyADConnectorDirectoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyADConnectorDirectoryResponse
func (client *Client) ModifyADConnectorDirectoryWithOptions(request *ModifyADConnectorDirectoryRequest, runtime *util.RuntimeOptions) (_result *ModifyADConnectorDirectoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdHostname)) {
		query["AdHostname"] = request.AdHostname
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectoryName)) {
		query["DirectoryName"] = request.DirectoryName
	}

	if !tea.BoolValue(util.IsUnset(request.DnsAddress)) {
		query["DnsAddress"] = request.DnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainPassword)) {
		query["DomainPassword"] = request.DomainPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DomainUserName)) {
		query["DomainUserName"] = request.DomainUserName
	}

	if !tea.BoolValue(util.IsUnset(request.MfaEnabled)) {
		query["MfaEnabled"] = request.MfaEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.OUName)) {
		query["OUName"] = request.OUName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainDnsAddress)) {
		query["SubDomainDnsAddress"] = request.SubDomainDnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainName)) {
		query["SubDomainName"] = request.SubDomainName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyADConnectorDirectory"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyADConnectorDirectoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies an Active Directory (AD) directory.
//
// Description:
//
// You can modify the following domain name- and Domain Name System (DNS)-related parameters only for Active Directory (AD) directories that are in the ERROR or REGISTERING state: `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress`.
//
// @param request - ModifyADConnectorDirectoryRequest
//
// @return ModifyADConnectorDirectoryResponse
func (client *Client) ModifyADConnectorDirectory(request *ModifyADConnectorDirectoryRequest) (_result *ModifyADConnectorDirectoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyADConnectorDirectoryResponse{}
	_body, _err := client.ModifyADConnectorDirectoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the basic properties of an enterprise Active Directory (AD) office network, such as the office network name and domain names of the enterprise AD subdomains.
//
// Description:
//
// You can modify parameters of domain names and Domain Name System (DNS) for enterprise AD office networks that are in the `ERROR` or `REGISTERED` state. The parameters include `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress.N`.
//
// @param request - ModifyADConnectorOfficeSiteRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyADConnectorOfficeSiteResponse
func (client *Client) ModifyADConnectorOfficeSiteWithOptions(request *ModifyADConnectorOfficeSiteRequest, runtime *util.RuntimeOptions) (_result *ModifyADConnectorOfficeSiteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdHostname)) {
		query["AdHostname"] = request.AdHostname
	}

	if !tea.BoolValue(util.IsUnset(request.BackupDCHostname)) {
		query["BackupDCHostname"] = request.BackupDCHostname
	}

	if !tea.BoolValue(util.IsUnset(request.BackupDns)) {
		query["BackupDns"] = request.BackupDns
	}

	if !tea.BoolValue(util.IsUnset(request.DnsAddress)) {
		query["DnsAddress"] = request.DnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainPassword)) {
		query["DomainPassword"] = request.DomainPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DomainUserName)) {
		query["DomainUserName"] = request.DomainUserName
	}

	if !tea.BoolValue(util.IsUnset(request.MfaEnabled)) {
		query["MfaEnabled"] = request.MfaEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.OUName)) {
		query["OUName"] = request.OUName
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteName)) {
		query["OfficeSiteName"] = request.OfficeSiteName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainDnsAddress)) {
		query["SubDomainDnsAddress"] = request.SubDomainDnsAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SubDomainName)) {
		query["SubDomainName"] = request.SubDomainName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyADConnectorOfficeSite"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyADConnectorOfficeSiteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the basic properties of an enterprise Active Directory (AD) office network, such as the office network name and domain names of the enterprise AD subdomains.
//
// Description:
//
// You can modify parameters of domain names and Domain Name System (DNS) for enterprise AD office networks that are in the `ERROR` or `REGISTERED` state. The parameters include `DomainName`, `SubDomainName`, `DnsAddress.N`, and `SubDomainDnsAddress.N`.
//
// @param request - ModifyADConnectorOfficeSiteRequest
//
// @return ModifyADConnectorOfficeSiteResponse
func (client *Client) ModifyADConnectorOfficeSite(request *ModifyADConnectorOfficeSiteRequest) (_result *ModifyADConnectorOfficeSiteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyADConnectorOfficeSiteResponse{}
	_body, _err := client.ModifyADConnectorOfficeSiteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modify the Internet access control policy on the office network or cloud computer granularity.
//
// Description:
//
// You can set different Internet access control policies at different granularities to achieve the effect of composite policies. For example, you can disable the Internet access on the office network granularity and enable the Internet access on specific cloud computer granularity. The effect is that all cloud computers in the office network except the specified cloud computers are not allowed to access the Internet.
//
// @param request - ModifyAclEntriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAclEntriesResponse
func (client *Client) ModifyAclEntriesWithOptions(request *ModifyAclEntriesRequest, runtime *util.RuntimeOptions) (_result *ModifyAclEntriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Policy)) {
		query["Policy"] = request.Policy
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceId)) {
		query["SourceId"] = request.SourceId
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		query["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAclEntries"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAclEntriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modify the Internet access control policy on the office network or cloud computer granularity.
//
// Description:
//
// You can set different Internet access control policies at different granularities to achieve the effect of composite policies. For example, you can disable the Internet access on the office network granularity and enable the Internet access on specific cloud computer granularity. The effect is that all cloud computers in the office network except the specified cloud computers are not allowed to access the Internet.
//
// @param request - ModifyAclEntriesRequest
//
// @return ModifyAclEntriesResponse
func (client *Client) ModifyAclEntries(request *ModifyAclEntriesRequest) (_result *ModifyAclEntriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAclEntriesResponse{}
	_body, _err := client.ModifyAclEntriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the parameters of an automatic snapshot policy, such as the policy name and snapshot retention period.
//
// @param request - ModifyAutoSnapshotPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyAutoSnapshotPolicyResponse
func (client *Client) ModifyAutoSnapshotPolicyWithOptions(request *ModifyAutoSnapshotPolicyRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoSnapshotPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CronExpression)) {
		query["CronExpression"] = request.CronExpression
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyId)) {
		query["PolicyId"] = request.PolicyId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyName)) {
		query["PolicyName"] = request.PolicyName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RetentionDays)) {
		query["RetentionDays"] = request.RetentionDays
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAutoSnapshotPolicy"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAutoSnapshotPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the parameters of an automatic snapshot policy, such as the policy name and snapshot retention period.
//
// @param request - ModifyAutoSnapshotPolicyRequest
//
// @return ModifyAutoSnapshotPolicyResponse
func (client *Client) ModifyAutoSnapshotPolicy(request *ModifyAutoSnapshotPolicyRequest) (_result *ModifyAutoSnapshotPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoSnapshotPolicyResponse{}
	_body, _err := client.ModifyAutoSnapshotPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a custom cloud computer template.
//
// Description:
//
// Only custom desktop templates can be modified.
//
// @param request - ModifyBundleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyBundleResponse
func (client *Client) ModifyBundleWithOptions(request *ModifyBundleRequest, runtime *util.RuntimeOptions) (_result *ModifyBundleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.BundleName)) {
		query["BundleName"] = request.BundleName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyBundle"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyBundleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a custom cloud computer template.
//
// Description:
//
// Only custom desktop templates can be modified.
//
// @param request - ModifyBundleRequest
//
// @return ModifyBundleResponse
func (client *Client) ModifyBundle(request *ModifyBundleRequest) (_result *ModifyBundleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyBundleResponse{}
	_body, _err := client.ModifyBundleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the files in a cloud disk.
//
// @param request - ModifyCdsFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCdsFileResponse
func (client *Client) ModifyCdsFileWithOptions(request *ModifyCdsFileRequest, runtime *util.RuntimeOptions) (_result *ModifyCdsFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.ConflictPolicy)) {
		query["ConflictPolicy"] = request.ConflictPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCdsFile"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCdsFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the files in a cloud disk.
//
// @param request - ModifyCdsFileRequest
//
// @return ModifyCdsFileResponse
func (client *Client) ModifyCdsFile(request *ModifyCdsFileRequest) (_result *ModifyCdsFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCdsFileResponse{}
	_body, _err := client.ModifyCdsFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the link for file sharing.
//
// @param request - ModifyCdsFileShareLinkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCdsFileShareLinkResponse
func (client *Client) ModifyCdsFileShareLinkWithOptions(request *ModifyCdsFileShareLinkRequest, runtime *util.RuntimeOptions) (_result *ModifyCdsFileShareLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DisableDownload)) {
		query["DisableDownload"] = request.DisableDownload
	}

	if !tea.BoolValue(util.IsUnset(request.DisablePreview)) {
		query["DisablePreview"] = request.DisablePreview
	}

	if !tea.BoolValue(util.IsUnset(request.DisableSave)) {
		query["DisableSave"] = request.DisableSave
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadCount)) {
		query["DownloadCount"] = request.DownloadCount
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadLimit)) {
		query["DownloadLimit"] = request.DownloadLimit
	}

	if !tea.BoolValue(util.IsUnset(request.Expiration)) {
		query["Expiration"] = request.Expiration
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewCount)) {
		query["PreviewCount"] = request.PreviewCount
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewLimit)) {
		query["PreviewLimit"] = request.PreviewLimit
	}

	if !tea.BoolValue(util.IsUnset(request.ReportCount)) {
		query["ReportCount"] = request.ReportCount
	}

	if !tea.BoolValue(util.IsUnset(request.SaveCount)) {
		query["SaveCount"] = request.SaveCount
	}

	if !tea.BoolValue(util.IsUnset(request.SaveLimit)) {
		query["SaveLimit"] = request.SaveLimit
	}

	if !tea.BoolValue(util.IsUnset(request.ShareId)) {
		query["ShareId"] = request.ShareId
	}

	if !tea.BoolValue(util.IsUnset(request.ShareName)) {
		query["ShareName"] = request.ShareName
	}

	if !tea.BoolValue(util.IsUnset(request.SharePwd)) {
		query["SharePwd"] = request.SharePwd
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.VideoPreviewCount)) {
		query["VideoPreviewCount"] = request.VideoPreviewCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCdsFileShareLink"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCdsFileShareLinkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the link for file sharing.
//
// @param request - ModifyCdsFileShareLinkRequest
//
// @return ModifyCdsFileShareLinkResponse
func (client *Client) ModifyCdsFileShareLink(request *ModifyCdsFileShareLinkRequest) (_result *ModifyCdsFileShareLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCdsFileShareLinkResponse{}
	_body, _err := client.ModifyCdsFileShareLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies team spaces.
//
// @param request - ModifyCloudDriveGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCloudDriveGroupsResponse
func (client *Client) ModifyCloudDriveGroupsWithOptions(request *ModifyCloudDriveGroupsRequest, runtime *util.RuntimeOptions) (_result *ModifyCloudDriveGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TotalSize)) {
		query["TotalSize"] = request.TotalSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCloudDriveGroups"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCloudDriveGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies team spaces.
//
// @param request - ModifyCloudDriveGroupsRequest
//
// @return ModifyCloudDriveGroupsResponse
func (client *Client) ModifyCloudDriveGroups(request *ModifyCloudDriveGroupsRequest) (_result *ModifyCloudDriveGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCloudDriveGroupsResponse{}
	_body, _err := client.ModifyCloudDriveGroupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the user permissions on Cloud Drive Service, and configures users who have the download permissions and upload and download permissions. By default, the users that are not configured the preceding permissions only have the upload permissions.
//
// @param request - ModifyCloudDrivePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCloudDrivePermissionResponse
func (client *Client) ModifyCloudDrivePermissionWithOptions(request *ModifyCloudDrivePermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyCloudDrivePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadEndUserIds)) {
		query["DownloadEndUserIds"] = request.DownloadEndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.DownloadUploadEndUserIds)) {
		query["DownloadUploadEndUserIds"] = request.DownloadUploadEndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.NoDownloadNoUploadEndUserIds)) {
		query["NoDownloadNoUploadEndUserIds"] = request.NoDownloadNoUploadEndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCloudDrivePermission"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCloudDrivePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the user permissions on Cloud Drive Service, and configures users who have the download permissions and upload and download permissions. By default, the users that are not configured the preceding permissions only have the upload permissions.
//
// @param request - ModifyCloudDrivePermissionRequest
//
// @return ModifyCloudDrivePermissionResponse
func (client *Client) ModifyCloudDrivePermission(request *ModifyCloudDrivePermissionRequest) (_result *ModifyCloudDrivePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCloudDrivePermissionResponse{}
	_body, _err := client.ModifyCloudDrivePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改无影网盘终端用户的属性
//
// @param request - ModifyCloudDriveUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCloudDriveUsersResponse
func (client *Client) ModifyCloudDriveUsersWithOptions(request *ModifyCloudDriveUsersRequest, runtime *util.RuntimeOptions) (_result *ModifyCloudDriveUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.UserMaxSize)) {
		query["UserMaxSize"] = request.UserMaxSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCloudDriveUsers"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCloudDriveUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改无影网盘终端用户的属性
//
// @param request - ModifyCloudDriveUsersRequest
//
// @return ModifyCloudDriveUsersResponse
func (client *Client) ModifyCloudDriveUsers(request *ModifyCloudDriveUsersRequest) (_result *ModifyCloudDriveUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCloudDriveUsersResponse{}
	_body, _err := client.ModifyCloudDriveUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the layouts of cloud computer list headers, such as the required fields and the display and hide settings.
//
// @param request - ModifyCustomizedListHeadersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyCustomizedListHeadersResponse
func (client *Client) ModifyCustomizedListHeadersWithOptions(request *ModifyCustomizedListHeadersRequest, runtime *util.RuntimeOptions) (_result *ModifyCustomizedListHeadersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Headers)) {
		query["Headers"] = request.Headers
	}

	if !tea.BoolValue(util.IsUnset(request.ListType)) {
		query["ListType"] = request.ListType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyCustomizedListHeaders"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyCustomizedListHeadersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the layouts of cloud computer list headers, such as the required fields and the display and hide settings.
//
// @param request - ModifyCustomizedListHeadersRequest
//
// @return ModifyCustomizedListHeadersResponse
func (client *Client) ModifyCustomizedListHeaders(request *ModifyCustomizedListHeadersRequest) (_result *ModifyCustomizedListHeadersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyCustomizedListHeadersResponse{}
	_body, _err := client.ModifyCustomizedListHeadersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the billing method of cloud computers to subscription or pay-as-you-go.
//
// Description:
//
//   Before you call this operation, make sure that you fully understand the billing methods of cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
//
// 	- Before you call this operation, make sure that the cloud computers whose billing method you want to change are in the Running or Stopped state and you have no overdue payments in your Alibaba Cloud account.
//
// 	- After the order payment is completed, the system starts to change the billing method of the cloud computers. During the change, you cannot perform operations, such as starting or stopping the cloud computers, and changing configurations of the cloud computers.
//
// @param request - ModifyDesktopChargeTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopChargeTypeResponse
func (client *Client) ModifyDesktopChargeTypeWithOptions(request *ModifyDesktopChargeTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopChargeTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UseDuration)) {
		query["UseDuration"] = request.UseDuration
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopChargeType"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopChargeTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the billing method of cloud computers to subscription or pay-as-you-go.
//
// Description:
//
//   Before you call this operation, make sure that you fully understand the billing methods of cloud computers. For more information, see [Billing overview](https://help.aliyun.com/document_detail/188395.html).
//
// 	- Before you call this operation, make sure that the cloud computers whose billing method you want to change are in the Running or Stopped state and you have no overdue payments in your Alibaba Cloud account.
//
// 	- After the order payment is completed, the system starts to change the billing method of the cloud computers. During the change, you cannot perform operations, such as starting or stopping the cloud computers, and changing configurations of the cloud computers.
//
// @param request - ModifyDesktopChargeTypeRequest
//
// @return ModifyDesktopChargeTypeResponse
func (client *Client) ModifyDesktopChargeType(request *ModifyDesktopChargeTypeRequest) (_result *ModifyDesktopChargeTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopChargeTypeResponse{}
	_body, _err := client.ModifyDesktopChargeTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a cloud computer pool.
//
// Description:
//
// After a cloud computer pool is created, the system creates a specific number of cloud computers in the pool based on the auto scaling policy and user connections. Cloud computers are created by using the same cloud computer template and security policy. You can modify the configurations of the pool, including the pool name, cloud computer template, and policy, in different business scenarios.
//
// @param request - ModifyDesktopGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopGroupResponse
func (client *Client) ModifyDesktopGroupWithOptions(request *ModifyDesktopGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowAutoSetup)) {
		query["AllowAutoSetup"] = request.AllowAutoSetup
	}

	if !tea.BoolValue(util.IsUnset(request.AllowBufferCount)) {
		query["AllowBufferCount"] = request.AllowBufferCount
	}

	if !tea.BoolValue(util.IsUnset(request.BindAmount)) {
		query["BindAmount"] = request.BindAmount
	}

	if !tea.BoolValue(util.IsUnset(request.BuyDesktopsCount)) {
		query["BuyDesktopsCount"] = request.BuyDesktopsCount
	}

	if !tea.BoolValue(util.IsUnset(request.Classify)) {
		query["Classify"] = request.Classify
	}

	if !tea.BoolValue(util.IsUnset(request.Comments)) {
		query["Comments"] = request.Comments
	}

	if !tea.BoolValue(util.IsUnset(request.ConnectDuration)) {
		query["ConnectDuration"] = request.ConnectDuration
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupName)) {
		query["DesktopGroupName"] = request.DesktopGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.DisableSessionConfig)) {
		query["DisableSessionConfig"] = request.DisableSessionConfig
	}

	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.IdleDisconnectDuration)) {
		query["IdleDisconnectDuration"] = request.IdleDisconnectDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.KeepDuration)) {
		query["KeepDuration"] = request.KeepDuration
	}

	if !tea.BoolValue(util.IsUnset(request.LoadPolicy)) {
		query["LoadPolicy"] = request.LoadPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.MaxDesktopsCount)) {
		query["MaxDesktopsCount"] = request.MaxDesktopsCount
	}

	if !tea.BoolValue(util.IsUnset(request.MinDesktopsCount)) {
		query["MinDesktopsCount"] = request.MinDesktopsCount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnBundleId)) {
		query["OwnBundleId"] = request.OwnBundleId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupIds)) {
		query["PolicyGroupIds"] = request.PolicyGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.ProfileFollowSwitch)) {
		query["ProfileFollowSwitch"] = request.ProfileFollowSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.RatioThreshold)) {
		query["RatioThreshold"] = request.RatioThreshold
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResetType)) {
		query["ResetType"] = request.ResetType
	}

	if !tea.BoolValue(util.IsUnset(request.ScaleStrategyId)) {
		query["ScaleStrategyId"] = request.ScaleStrategyId
	}

	if !tea.BoolValue(util.IsUnset(request.StopDuration)) {
		query["StopDuration"] = request.StopDuration
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the configurations of a cloud computer pool.
//
// Description:
//
// After a cloud computer pool is created, the system creates a specific number of cloud computers in the pool based on the auto scaling policy and user connections. Cloud computers are created by using the same cloud computer template and security policy. You can modify the configurations of the pool, including the pool name, cloud computer template, and policy, in different business scenarios.
//
// @param request - ModifyDesktopGroupRequest
//
// @return ModifyDesktopGroupResponse
func (client *Client) ModifyDesktopGroup(request *ModifyDesktopGroupRequest) (_result *ModifyDesktopGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopGroupResponse{}
	_body, _err := client.ModifyDesktopGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the hostname of a Windows cloud computer in the Active Directory (AD) office network.
//
// Description:
//
// The Windows cloud computer whose hostname you want to modify must be in an AD office network. After the hostname is modified, the cloud computer is re-created.
//
// @param request - ModifyDesktopHostNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopHostNameResponse
func (client *Client) ModifyDesktopHostNameWithOptions(request *ModifyDesktopHostNameRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopHostNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.NewHostName)) {
		query["NewHostName"] = request.NewHostName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopHostName"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopHostNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the hostname of a Windows cloud computer in the Active Directory (AD) office network.
//
// Description:
//
// The Windows cloud computer whose hostname you want to modify must be in an AD office network. After the hostname is modified, the cloud computer is re-created.
//
// @param request - ModifyDesktopHostNameRequest
//
// @return ModifyDesktopHostNameResponse
func (client *Client) ModifyDesktopHostName(request *ModifyDesktopHostNameRequest) (_result *ModifyDesktopHostNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopHostNameResponse{}
	_body, _err := client.ModifyDesktopHostNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the name of a cloud computer to a new name.
//
// @param request - ModifyDesktopNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopNameResponse
func (client *Client) ModifyDesktopNameWithOptions(request *ModifyDesktopNameRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.NewDesktopName)) {
		query["NewDesktopName"] = request.NewDesktopName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopName"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the name of a cloud computer to a new name.
//
// @param request - ModifyDesktopNameRequest
//
// @return ModifyDesktopNameResponse
func (client *Client) ModifyDesktopName(request *ModifyDesktopNameRequest) (_result *ModifyDesktopNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopNameResponse{}
	_body, _err := client.ModifyDesktopNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改桌面超卖组
//
// @param request - ModifyDesktopOversoldGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopOversoldGroupResponse
func (client *Client) ModifyDesktopOversoldGroupWithOptions(request *ModifyDesktopOversoldGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopOversoldGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcurrenceCount)) {
		query["ConcurrenceCount"] = request.ConcurrenceCount
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.IdleDisconnectDuration)) {
		query["IdleDisconnectDuration"] = request.IdleDisconnectDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.KeepDuration)) {
		query["KeepDuration"] = request.KeepDuration
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldUserCount)) {
		query["OversoldUserCount"] = request.OversoldUserCount
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldWarn)) {
		query["OversoldWarn"] = request.OversoldWarn
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StopDuration)) {
		query["StopDuration"] = request.StopDuration
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopOversoldGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopOversoldGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改桌面超卖组
//
// @param request - ModifyDesktopOversoldGroupRequest
//
// @return ModifyDesktopOversoldGroupResponse
func (client *Client) ModifyDesktopOversoldGroup(request *ModifyDesktopOversoldGroupRequest) (_result *ModifyDesktopOversoldGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopOversoldGroupResponse{}
	_body, _err := client.ModifyDesktopOversoldGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改桌面超卖组售卖数据
//
// @param request - ModifyDesktopOversoldGroupSaleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopOversoldGroupSaleResponse
func (client *Client) ModifyDesktopOversoldGroupSaleWithOptions(request *ModifyDesktopOversoldGroupSaleRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopOversoldGroupSaleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcurrenceCount)) {
		query["ConcurrenceCount"] = request.ConcurrenceCount
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldUserCount)) {
		query["OversoldUserCount"] = request.OversoldUserCount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopOversoldGroupSale"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopOversoldGroupSaleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改桌面超卖组售卖数据
//
// @param request - ModifyDesktopOversoldGroupSaleRequest
//
// @return ModifyDesktopOversoldGroupSaleResponse
func (client *Client) ModifyDesktopOversoldGroupSale(request *ModifyDesktopOversoldGroupSaleRequest) (_result *ModifyDesktopOversoldGroupSaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopOversoldGroupSaleResponse{}
	_body, _err := client.ModifyDesktopOversoldGroupSaleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改桌面超卖用户组
//
// @param request - ModifyDesktopOversoldUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopOversoldUserGroupResponse
func (client *Client) ModifyDesktopOversoldUserGroupWithOptions(request *ModifyDesktopOversoldUserGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopOversoldUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopOversoldUserGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopOversoldUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改桌面超卖用户组
//
// @param request - ModifyDesktopOversoldUserGroupRequest
//
// @return ModifyDesktopOversoldUserGroupResponse
func (client *Client) ModifyDesktopOversoldUserGroup(request *ModifyDesktopOversoldUserGroupRequest) (_result *ModifyDesktopOversoldUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopOversoldUserGroupResponse{}
	_body, _err := client.ModifyDesktopOversoldUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the instance type of a cloud computer and scales up the disks of the cloud computer.
//
// Description:
//
// Changing the configurations of a cloud computer includes changing the instance type of the cloud computer and scaling up the disks of the cloud computer.
//
// 	- Before you change the configurations of a cloud computer, you must understand the instance types and disk sizes supported by cloud computers. For more information, see [Cloud computer types](https://help.aliyun.com/document_detail/188609.html). You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.
//
// 	- You must change at least one of the following configurations: instance type, system disk size, and data disk size of the cloud computer. You must specify at least one of the following parameters: `DesktopType`, `RootDiskSizeGib`, and `UserDiskSizeGib`. Take note of the following items:
//
//     	- The instance type of a cloud computer includes the configurations of vCPUs, memory, and GPUs. You can only change an instance type to another. You cannot change only one of the configurations.
//
//     	- You cannot change a cloud computer between the General Office type and the non-General Office type. You cannot yet change a cloud computer between the Graphics type and the non-Graphics type.
//
//     	- The system disk and data disks of a cloud computer can only be scaled up and cannot be scaled down.
//
//     	- If the billing method of the cloud computer is subscription, the system calculates the price difference based on the configuration difference between the original cloud computer and the new cloud computer. You must make up for the price difference or receive a refund for the price difference.
//
//     	- We recommend that you do not change the configurations of a cloud computer twice within 5 minutes.
//
//     	- When you change the configurations of a cloud computer, the cloud computer must be in the Stopped state.
//
// 	- After you change the configurations of a cloud computer, the personal data on the cloud computer is not affected.
//
// @param request - ModifyDesktopSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopSpecResponse
func (client *Client) ModifyDesktopSpecWithOptions(request *ModifyDesktopSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopType)) {
		query["DesktopType"] = request.DesktopType
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSpecs)) {
		query["ResourceSpecs"] = request.ResourceSpecs
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.RootDiskSizeGib)) {
		query["RootDiskSizeGib"] = request.RootDiskSizeGib
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskPerformanceLevel)) {
		query["UserDiskPerformanceLevel"] = request.UserDiskPerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskSizeGib)) {
		query["UserDiskSizeGib"] = request.UserDiskSizeGib
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopSpec"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the instance type of a cloud computer and scales up the disks of the cloud computer.
//
// Description:
//
// Changing the configurations of a cloud computer includes changing the instance type of the cloud computer and scaling up the disks of the cloud computer.
//
// 	- Before you change the configurations of a cloud computer, you must understand the instance types and disk sizes supported by cloud computers. For more information, see [Cloud computer types](https://help.aliyun.com/document_detail/188609.html). You can call the [DescribeDesktopTypes](https://help.aliyun.com/document_detail/188882.html) operation to query the instance types supported by cloud computers.
//
// 	- You must change at least one of the following configurations: instance type, system disk size, and data disk size of the cloud computer. You must specify at least one of the following parameters: `DesktopType`, `RootDiskSizeGib`, and `UserDiskSizeGib`. Take note of the following items:
//
//     	- The instance type of a cloud computer includes the configurations of vCPUs, memory, and GPUs. You can only change an instance type to another. You cannot change only one of the configurations.
//
//     	- You cannot change a cloud computer between the General Office type and the non-General Office type. You cannot yet change a cloud computer between the Graphics type and the non-Graphics type.
//
//     	- The system disk and data disks of a cloud computer can only be scaled up and cannot be scaled down.
//
//     	- If the billing method of the cloud computer is subscription, the system calculates the price difference based on the configuration difference between the original cloud computer and the new cloud computer. You must make up for the price difference or receive a refund for the price difference.
//
//     	- We recommend that you do not change the configurations of a cloud computer twice within 5 minutes.
//
//     	- When you change the configurations of a cloud computer, the cloud computer must be in the Stopped state.
//
// 	- After you change the configurations of a cloud computer, the personal data on the cloud computer is not affected.
//
// @param request - ModifyDesktopSpecRequest
//
// @return ModifyDesktopSpecResponse
func (client *Client) ModifyDesktopSpec(request *ModifyDesktopSpecRequest) (_result *ModifyDesktopSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopSpecResponse{}
	_body, _err := client.ModifyDesktopSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Creates or modifies scheduled tasks on cloud computers, such as starting, stopping, restarting, and resetting cloud computers on schedule.
//
// @param request - ModifyDesktopTimerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopTimerResponse
func (client *Client) ModifyDesktopTimerWithOptions(request *ModifyDesktopTimerRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopTimerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopTimers)) {
		query["DesktopTimers"] = request.DesktopTimers
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UseDesktopTimers)) {
		query["UseDesktopTimers"] = request.UseDesktopTimers
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopTimer"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopTimerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Creates or modifies scheduled tasks on cloud computers, such as starting, stopping, restarting, and resetting cloud computers on schedule.
//
// @param request - ModifyDesktopTimerRequest
//
// @return ModifyDesktopTimerResponse
func (client *Client) ModifyDesktopTimer(request *ModifyDesktopTimerRequest) (_result *ModifyDesktopTimerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopTimerResponse{}
	_body, _err := client.ModifyDesktopTimerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the policies that are configured for a cloud desktop.
//
// Description:
//
// The cloud desktops that you want to restart by calling this operation must be in the Running state.
//
// @param request - ModifyDesktopsPolicyGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDesktopsPolicyGroupResponse
func (client *Client) ModifyDesktopsPolicyGroupWithOptions(request *ModifyDesktopsPolicyGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyDesktopsPolicyGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupIds)) {
		query["PolicyGroupIds"] = request.PolicyGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDesktopsPolicyGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDesktopsPolicyGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the policies that are configured for a cloud desktop.
//
// Description:
//
// The cloud desktops that you want to restart by calling this operation must be in the Running state.
//
// @param request - ModifyDesktopsPolicyGroupRequest
//
// @return ModifyDesktopsPolicyGroupResponse
func (client *Client) ModifyDesktopsPolicyGroup(request *ModifyDesktopsPolicyGroupRequest) (_result *ModifyDesktopsPolicyGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDesktopsPolicyGroupResponse{}
	_body, _err := client.ModifyDesktopsPolicyGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the configurations of a cloud desktop, including the number of vCPUs, memory size, and disk size.
//
// Description:
//
// You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
//
// 	- Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
//
// 	- When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
//
// 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
//
// 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
//
// 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
//
// 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
//
// 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
//
// 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
//
// 	- The changes do not affect your personal data on the cloud desktop.
//
// @param request - ModifyDiskSpecRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyDiskSpecResponse
func (client *Client) ModifyDiskSpecWithOptions(request *ModifyDiskSpecRequest, runtime *util.RuntimeOptions) (_result *ModifyDiskSpecResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RootDiskPerformanceLevel)) {
		query["RootDiskPerformanceLevel"] = request.RootDiskPerformanceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.UserDiskPerformanceLevel)) {
		query["UserDiskPerformanceLevel"] = request.UserDiskPerformanceLevel
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyDiskSpec"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the configurations of a cloud desktop, including the number of vCPUs, memory size, and disk size.
//
// Description:
//
// You can call this operation to change the configurations, such as the desktop type and disk size, of a cloud desktop.
//
// 	- Before you call this operation, you must know the cloud desktop types and the disk sizes for each type of cloud desktop that Elastic Desktop Service (EDS) provides.
//
// 	- When you change the configurations of a cloud desktop, you must change the desktop type or the size of the system disk or data disk. You must configure at least one of the following parameters: DesktopType, RootDiskSizeGib, and UserDiskSizeGib. Take note of the following items:
//
// 1\\. Desktop types include the specifications of vCPUs, memory, and GPUs. You can change only the desktop type, instead of one of the specifications.
//
// 2\\. You cannot change a cloud desktop from the General Office type to a non-General Office type, or from a non-General Office type to the General Office type. You cannot change a cloud desktop from the Graphics type to a non-Graphics type, or from a non-Graphics type to the Graphics type.
//
// 3\\. You can only increase the sizes of system and data disks. You cannot decrease the sizes of system and data disks.
//
// 4\\. If your cloud desktop uses the subscription billing method, the price difference is calculated based on the price before and after configuration changes. You may receive a refund, or must pay for the price difference.
//
// 5\\. If you need to change the configurations of a cloud desktop multiple times, we recommend that you wait at least 5 minutes between consecutive operations on the cloud desktop.
//
// 6\\. The cloud desktop for which you want to change the desktop type must be in the Stopped state.
//
// 	- The changes do not affect your personal data on the cloud desktop.
//
// @param request - ModifyDiskSpecRequest
//
// @return ModifyDiskSpecResponse
func (client *Client) ModifyDiskSpec(request *ModifyDiskSpecRequest) (_result *ModifyDiskSpecResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyDiskSpecResponse{}
	_body, _err := client.ModifyDiskSpecWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Assigns a cloud computer to end users and removes all original end users of the cloud computer.
//
// Description:
//
//   The cloud computer must be in the Running state.
//
// 	- After you call this operation, the assignment result is immediately returned. You can call the [DescribeDesktops](https://help.aliyun.com/document_detail/436815.html) operation to query the assignment of the cloud computer. The value of the `ManagementFlags` response parameter indicates the assignment of the cloud computer. A value of `ASSIGNING` indicates that the cloud computer is being assigned, and other values indicate that the cloud computer is assigned.
//
// 	- We recommend that you check the assignment every 2 to 5 seconds and perform the checks within 50 seconds. Typically, 1 to 5 seconds are required to complete the assignment.
//
// @param request - ModifyEntitlementRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyEntitlementResponse
func (client *Client) ModifyEntitlementWithOptions(request *ModifyEntitlementRequest, runtime *util.RuntimeOptions) (_result *ModifyEntitlementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyEntitlement"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyEntitlementResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Assigns a cloud computer to end users and removes all original end users of the cloud computer.
//
// Description:
//
//   The cloud computer must be in the Running state.
//
// 	- After you call this operation, the assignment result is immediately returned. You can call the [DescribeDesktops](https://help.aliyun.com/document_detail/436815.html) operation to query the assignment of the cloud computer. The value of the `ManagementFlags` response parameter indicates the assignment of the cloud computer. A value of `ASSIGNING` indicates that the cloud computer is being assigned, and other values indicate that the cloud computer is assigned.
//
// 	- We recommend that you check the assignment every 2 to 5 seconds and perform the checks within 50 seconds. Typically, 1 to 5 seconds are required to complete the assignment.
//
// @param request - ModifyEntitlementRequest
//
// @return ModifyEntitlementResponse
func (client *Client) ModifyEntitlement(request *ModifyEntitlementRequest) (_result *ModifyEntitlementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyEntitlementResponse{}
	_body, _err := client.ModifyEntitlementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the attributes of an image, including the name and description of the image.
//
// Description:
//
// You can call this operation to modify the attributes of only custom images that are in the Available state.
//
// @param request - ModifyImageAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyImageAttributeResponse
func (client *Client) ModifyImageAttributeWithOptions(request *ModifyImageAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyImageAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyImageAttribute"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the attributes of an image, including the name and description of the image.
//
// Description:
//
// You can call this operation to modify the attributes of only custom images that are in the Available state.
//
// @param request - ModifyImageAttributeRequest
//
// @return ModifyImageAttributeResponse
func (client *Client) ModifyImageAttribute(request *ModifyImageAttributeRequest) (_result *ModifyImageAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImageAttributeResponse{}
	_body, _err := client.ModifyImageAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Shares an image with other Alibaba Cloud accounts, or unshares an image from the recipient Alibaba Cloud accounts.
//
// Description:
//
// ### [](#)Security of shared images
//
// Elastic Desktop Service cannot guarantee the integrity and security of shared images. When you use a shared image, you must make sure that the image comes from a trusted sharer or account, and you are legally responsible for using the shared image.
//
// ### [](#)Quota and billing
//
// 	- A shared image does not count against the image quotas of principals to which the image is shared.
//
// 	- After a principal uses a shared image to create a cloud computer, the sharer is not charged for the shared image.
//
// 	- You are not charged for shared images.
//
// ### [](#)Supported sharing behaviors
//
// 	- You can share custom images with other Alibaba Cloud accounts.
//
// 	- You can share custom images between accounts in the China site (aliyun.com) and the international site (alibabacloud.com).
//
// ### [](#)Unsupported sharing behaviors
//
// 	- You cannot share images that are shared by other Alibaba Cloud accounts.
//
// 	- You cannot share encrypted images.
//
// 	- You cannot share images across regions. If you want to share an image across regions, you must copy the image to the destination region and then share the image. For more information, see [CopyImage](https://help.aliyun.com/document_detail/436978.html).
//
// @param request - ModifyImagePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyImagePermissionResponse
func (client *Client) ModifyImagePermissionWithOptions(request *ModifyImagePermissionRequest, runtime *util.RuntimeOptions) (_result *ModifyImagePermissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddAccount)) {
		query["AddAccount"] = request.AddAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveAccount)) {
		query["RemoveAccount"] = request.RemoveAccount
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyImagePermission"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyImagePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Shares an image with other Alibaba Cloud accounts, or unshares an image from the recipient Alibaba Cloud accounts.
//
// Description:
//
// ### [](#)Security of shared images
//
// Elastic Desktop Service cannot guarantee the integrity and security of shared images. When you use a shared image, you must make sure that the image comes from a trusted sharer or account, and you are legally responsible for using the shared image.
//
// ### [](#)Quota and billing
//
// 	- A shared image does not count against the image quotas of principals to which the image is shared.
//
// 	- After a principal uses a shared image to create a cloud computer, the sharer is not charged for the shared image.
//
// 	- You are not charged for shared images.
//
// ### [](#)Supported sharing behaviors
//
// 	- You can share custom images with other Alibaba Cloud accounts.
//
// 	- You can share custom images between accounts in the China site (aliyun.com) and the international site (alibabacloud.com).
//
// ### [](#)Unsupported sharing behaviors
//
// 	- You cannot share images that are shared by other Alibaba Cloud accounts.
//
// 	- You cannot share encrypted images.
//
// 	- You cannot share images across regions. If you want to share an image across regions, you must copy the image to the destination region and then share the image. For more information, see [CopyImage](https://help.aliyun.com/document_detail/436978.html).
//
// @param request - ModifyImagePermissionRequest
//
// @return ModifyImagePermissionResponse
func (client *Client) ModifyImagePermission(request *ModifyImagePermissionRequest) (_result *ModifyImagePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyImagePermissionResponse{}
	_body, _err := client.ModifyImagePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the mount target of a File Storage NAS (NAS) file system.
//
// Description:
//
// When you create a NAS file system, a mount target is automatically generated. By default, the mount target does not need to be changed. If the mount target is deleted by misoperation, you must specify a new mount target for the NAS file system in the workspace. You can call the [CreateMountTarget](https://help.aliyun.com/document_detail/62621.html) operation to create a mount target.
//
// @param request - ModifyNASDefaultMountTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyNASDefaultMountTargetResponse
func (client *Client) ModifyNASDefaultMountTargetWithOptions(request *ModifyNASDefaultMountTargetRequest, runtime *util.RuntimeOptions) (_result *ModifyNASDefaultMountTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.MountTargetDomain)) {
		query["MountTargetDomain"] = request.MountTargetDomain
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNASDefaultMountTarget"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyNASDefaultMountTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the mount target of a File Storage NAS (NAS) file system.
//
// Description:
//
// When you create a NAS file system, a mount target is automatically generated. By default, the mount target does not need to be changed. If the mount target is deleted by misoperation, you must specify a new mount target for the NAS file system in the workspace. You can call the [CreateMountTarget](https://help.aliyun.com/document_detail/62621.html) operation to create a mount target.
//
// @param request - ModifyNASDefaultMountTargetRequest
//
// @return ModifyNASDefaultMountTargetResponse
func (client *Client) ModifyNASDefaultMountTarget(request *ModifyNASDefaultMountTargetRequest) (_result *ModifyNASDefaultMountTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNASDefaultMountTargetResponse{}
	_body, _err := client.ModifyNASDefaultMountTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the bandwidth of a premium bandwidth plan.
//
// @param request - ModifyNetworkPackageBandwidthRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyNetworkPackageBandwidthResponse
func (client *Client) ModifyNetworkPackageBandwidthWithOptions(request *ModifyNetworkPackageBandwidthRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkPackageBandwidthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkPackageId)) {
		query["NetworkPackageId"] = request.NetworkPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNetworkPackageBandwidth"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyNetworkPackageBandwidthResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the bandwidth of a premium bandwidth plan.
//
// @param request - ModifyNetworkPackageBandwidthRequest
//
// @return ModifyNetworkPackageBandwidthResponse
func (client *Client) ModifyNetworkPackageBandwidth(request *ModifyNetworkPackageBandwidthRequest) (_result *ModifyNetworkPackageBandwidthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkPackageBandwidthResponse{}
	_body, _err := client.ModifyNetworkPackageBandwidthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restores or disables a premium bandwidth plan.
//
// Description:
//
// If you want to temporarily disable the Internet access of your cloud computer after the Internet access is enabled for your cloud computer, you can disable the premium bandwidth plan and restore it as needed.
//
// @param request - ModifyNetworkPackageEnabledRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyNetworkPackageEnabledResponse
func (client *Client) ModifyNetworkPackageEnabledWithOptions(request *ModifyNetworkPackageEnabledRequest, runtime *util.RuntimeOptions) (_result *ModifyNetworkPackageEnabledResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Enabled)) {
		query["Enabled"] = request.Enabled
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkPackageId)) {
		query["NetworkPackageId"] = request.NetworkPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyNetworkPackageEnabled"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyNetworkPackageEnabledResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restores or disables a premium bandwidth plan.
//
// Description:
//
// If you want to temporarily disable the Internet access of your cloud computer after the Internet access is enabled for your cloud computer, you can disable the premium bandwidth plan and restore it as needed.
//
// @param request - ModifyNetworkPackageEnabledRequest
//
// @return ModifyNetworkPackageEnabledResponse
func (client *Client) ModifyNetworkPackageEnabled(request *ModifyNetworkPackageEnabledRequest) (_result *ModifyNetworkPackageEnabledResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyNetworkPackageEnabledResponse{}
	_body, _err := client.ModifyNetworkPackageEnabledWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies the basic properties of an office network, including the name and local administrator permission settings.
//
// @param request - ModifyOfficeSiteAttributeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyOfficeSiteAttributeResponse
func (client *Client) ModifyOfficeSiteAttributeWithOptions(request *ModifyOfficeSiteAttributeRequest, runtime *util.RuntimeOptions) (_result *ModifyOfficeSiteAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopAccessType)) {
		query["DesktopAccessType"] = request.DesktopAccessType
	}

	if !tea.BoolValue(util.IsUnset(request.EnableAdminAccess)) {
		query["EnableAdminAccess"] = request.EnableAdminAccess
	}

	if !tea.BoolValue(util.IsUnset(request.NeedVerifyLoginRisk)) {
		query["NeedVerifyLoginRisk"] = request.NeedVerifyLoginRisk
	}

	if !tea.BoolValue(util.IsUnset(request.NeedVerifyZeroDevice)) {
		query["NeedVerifyZeroDevice"] = request.NeedVerifyZeroDevice
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteName)) {
		query["OfficeSiteName"] = request.OfficeSiteName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyOfficeSiteAttribute"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyOfficeSiteAttributeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies the basic properties of an office network, including the name and local administrator permission settings.
//
// @param request - ModifyOfficeSiteAttributeRequest
//
// @return ModifyOfficeSiteAttributeResponse
func (client *Client) ModifyOfficeSiteAttribute(request *ModifyOfficeSiteAttributeRequest) (_result *ModifyOfficeSiteAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyOfficeSiteAttributeResponse{}
	_body, _err := client.ModifyOfficeSiteAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables the communication between cloud computers in an office network (formerly workspace). If you enable the communication between cloud computers in an office network, the cloud computers can access each other.
//
// @param request - ModifyOfficeSiteCrossDesktopAccessRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyOfficeSiteCrossDesktopAccessResponse
func (client *Client) ModifyOfficeSiteCrossDesktopAccessWithOptions(request *ModifyOfficeSiteCrossDesktopAccessRequest, runtime *util.RuntimeOptions) (_result *ModifyOfficeSiteCrossDesktopAccessResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableCrossDesktopAccess)) {
		query["EnableCrossDesktopAccess"] = request.EnableCrossDesktopAccess
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyOfficeSiteCrossDesktopAccess"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyOfficeSiteCrossDesktopAccessResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables the communication between cloud computers in an office network (formerly workspace). If you enable the communication between cloud computers in an office network, the cloud computers can access each other.
//
// @param request - ModifyOfficeSiteCrossDesktopAccessRequest
//
// @return ModifyOfficeSiteCrossDesktopAccessResponse
func (client *Client) ModifyOfficeSiteCrossDesktopAccess(request *ModifyOfficeSiteCrossDesktopAccessRequest) (_result *ModifyOfficeSiteCrossDesktopAccessResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyOfficeSiteCrossDesktopAccessResponse{}
	_body, _err := client.ModifyOfficeSiteCrossDesktopAccessWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables multi-factor authentication (MFA) for an enterprise Active Directory (AD) office network (formerly workspace).
//
// @param request - ModifyOfficeSiteMfaEnabledRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyOfficeSiteMfaEnabledResponse
func (client *Client) ModifyOfficeSiteMfaEnabledWithOptions(request *ModifyOfficeSiteMfaEnabledRequest, runtime *util.RuntimeOptions) (_result *ModifyOfficeSiteMfaEnabledResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MfaEnabled)) {
		query["MfaEnabled"] = request.MfaEnabled
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyOfficeSiteMfaEnabled"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyOfficeSiteMfaEnabledResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables multi-factor authentication (MFA) for an enterprise Active Directory (AD) office network (formerly workspace).
//
// @param request - ModifyOfficeSiteMfaEnabledRequest
//
// @return ModifyOfficeSiteMfaEnabledResponse
func (client *Client) ModifyOfficeSiteMfaEnabled(request *ModifyOfficeSiteMfaEnabledRequest) (_result *ModifyOfficeSiteMfaEnabledResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyOfficeSiteMfaEnabledResponse{}
	_body, _err := client.ModifyOfficeSiteMfaEnabledWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Modifies a policy.
//
// @param request - ModifyPolicyGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyPolicyGroupResponse
func (client *Client) ModifyPolicyGroupWithOptions(request *ModifyPolicyGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyPolicyGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdminAccess)) {
		query["AdminAccess"] = request.AdminAccess
	}

	if !tea.BoolValue(util.IsUnset(request.AppContentProtection)) {
		query["AppContentProtection"] = request.AppContentProtection
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizeAccessPolicyRule)) {
		query["AuthorizeAccessPolicyRule"] = request.AuthorizeAccessPolicyRule
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizeSecurityPolicyRule)) {
		query["AuthorizeSecurityPolicyRule"] = request.AuthorizeSecurityPolicyRule
	}

	if !tea.BoolValue(util.IsUnset(request.CameraRedirect)) {
		query["CameraRedirect"] = request.CameraRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.Clipboard)) {
		query["Clipboard"] = request.Clipboard
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceRedirects)) {
		query["DeviceRedirects"] = request.DeviceRedirects
	}

	if !tea.BoolValue(util.IsUnset(request.DeviceRules)) {
		query["DeviceRules"] = request.DeviceRules
	}

	if !tea.BoolValue(util.IsUnset(request.DomainList)) {
		query["DomainList"] = request.DomainList
	}

	if !tea.BoolValue(util.IsUnset(request.DomainResolveRule)) {
		query["DomainResolveRule"] = request.DomainResolveRule
	}

	if !tea.BoolValue(util.IsUnset(request.DomainResolveRuleType)) {
		query["DomainResolveRuleType"] = request.DomainResolveRuleType
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserApplyAdminCoordinate)) {
		query["EndUserApplyAdminCoordinate"] = request.EndUserApplyAdminCoordinate
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserGroupCoordinate)) {
		query["EndUserGroupCoordinate"] = request.EndUserGroupCoordinate
	}

	if !tea.BoolValue(util.IsUnset(request.GpuAcceleration)) {
		query["GpuAcceleration"] = request.GpuAcceleration
	}

	if !tea.BoolValue(util.IsUnset(request.Html5Access)) {
		query["Html5Access"] = request.Html5Access
	}

	if !tea.BoolValue(util.IsUnset(request.Html5FileTransfer)) {
		query["Html5FileTransfer"] = request.Html5FileTransfer
	}

	if !tea.BoolValue(util.IsUnset(request.InternetCommunicationProtocol)) {
		query["InternetCommunicationProtocol"] = request.InternetCommunicationProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.LocalDrive)) {
		query["LocalDrive"] = request.LocalDrive
	}

	if !tea.BoolValue(util.IsUnset(request.MaxReconnectTime)) {
		query["MaxReconnectTime"] = request.MaxReconnectTime
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetRedirect)) {
		query["NetRedirect"] = request.NetRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.PolicyGroupId)) {
		query["PolicyGroupId"] = request.PolicyGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.PreemptLogin)) {
		query["PreemptLogin"] = request.PreemptLogin
	}

	if !tea.BoolValue(util.IsUnset(request.PreemptLoginUser)) {
		query["PreemptLoginUser"] = request.PreemptLoginUser
	}

	if !tea.BoolValue(util.IsUnset(request.PrinterRedirection)) {
		query["PrinterRedirection"] = request.PrinterRedirection
	}

	if !tea.BoolValue(util.IsUnset(request.RecordContent)) {
		query["RecordContent"] = request.RecordContent
	}

	if !tea.BoolValue(util.IsUnset(request.RecordContentExpires)) {
		query["RecordContentExpires"] = request.RecordContentExpires
	}

	if !tea.BoolValue(util.IsUnset(request.Recording)) {
		query["Recording"] = request.Recording
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingAudio)) {
		query["RecordingAudio"] = request.RecordingAudio
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingDuration)) {
		query["RecordingDuration"] = request.RecordingDuration
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingEndTime)) {
		query["RecordingEndTime"] = request.RecordingEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingExpires)) {
		query["RecordingExpires"] = request.RecordingExpires
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingFps)) {
		query["RecordingFps"] = request.RecordingFps
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingStartTime)) {
		query["RecordingStartTime"] = request.RecordingStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingUserNotify)) {
		query["RecordingUserNotify"] = request.RecordingUserNotify
	}

	if !tea.BoolValue(util.IsUnset(request.RecordingUserNotifyMessage)) {
		query["RecordingUserNotifyMessage"] = request.RecordingUserNotifyMessage
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RemoteCoordinate)) {
		query["RemoteCoordinate"] = request.RemoteCoordinate
	}

	if !tea.BoolValue(util.IsUnset(request.RevokeAccessPolicyRule)) {
		query["RevokeAccessPolicyRule"] = request.RevokeAccessPolicyRule
	}

	if !tea.BoolValue(util.IsUnset(request.RevokeSecurityPolicyRule)) {
		query["RevokeSecurityPolicyRule"] = request.RevokeSecurityPolicyRule
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		query["Scope"] = request.Scope
	}

	if !tea.BoolValue(util.IsUnset(request.ScopeValue)) {
		query["ScopeValue"] = request.ScopeValue
	}

	if !tea.BoolValue(util.IsUnset(request.UsbRedirect)) {
		query["UsbRedirect"] = request.UsbRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.UsbSupplyRedirectRule)) {
		query["UsbSupplyRedirectRule"] = request.UsbSupplyRedirectRule
	}

	if !tea.BoolValue(util.IsUnset(request.VideoRedirect)) {
		query["VideoRedirect"] = request.VideoRedirect
	}

	if !tea.BoolValue(util.IsUnset(request.VisualQuality)) {
		query["VisualQuality"] = request.VisualQuality
	}

	if !tea.BoolValue(util.IsUnset(request.Watermark)) {
		query["Watermark"] = request.Watermark
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkAntiCam)) {
		query["WatermarkAntiCam"] = request.WatermarkAntiCam
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkColor)) {
		query["WatermarkColor"] = request.WatermarkColor
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkDegree)) {
		query["WatermarkDegree"] = request.WatermarkDegree
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkFontSize)) {
		query["WatermarkFontSize"] = request.WatermarkFontSize
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkFontStyle)) {
		query["WatermarkFontStyle"] = request.WatermarkFontStyle
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkPower)) {
		query["WatermarkPower"] = request.WatermarkPower
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkRowAmount)) {
		query["WatermarkRowAmount"] = request.WatermarkRowAmount
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkSecurity)) {
		query["WatermarkSecurity"] = request.WatermarkSecurity
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkTransparency)) {
		query["WatermarkTransparency"] = request.WatermarkTransparency
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkTransparencyValue)) {
		query["WatermarkTransparencyValue"] = request.WatermarkTransparencyValue
	}

	if !tea.BoolValue(util.IsUnset(request.WatermarkType)) {
		query["WatermarkType"] = request.WatermarkType
	}

	if !tea.BoolValue(util.IsUnset(request.WyAssistant)) {
		query["WyAssistant"] = request.WyAssistant
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyPolicyGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyPolicyGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Modifies a policy.
//
// @param request - ModifyPolicyGroupRequest
//
// @return ModifyPolicyGroupResponse
func (client *Client) ModifyPolicyGroup(request *ModifyPolicyGroupRequest) (_result *ModifyPolicyGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyPolicyGroupResponse{}
	_body, _err := client.ModifyPolicyGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Grants permissions on cloud desktops to end users, or revokes the permissions from the end users.
//
// Description:
//
// You can modify end users only for cloud computers that are in the Running state.
//
// @param request - ModifyUserEntitlementRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUserEntitlementResponse
func (client *Client) ModifyUserEntitlementWithOptions(request *ModifyUserEntitlementRequest, runtime *util.RuntimeOptions) (_result *ModifyUserEntitlementResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizeDesktopId)) {
		query["AuthorizeDesktopId"] = request.AuthorizeDesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RevokeDesktopId)) {
		query["RevokeDesktopId"] = request.RevokeDesktopId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUserEntitlement"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyUserEntitlementResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Grants permissions on cloud desktops to end users, or revokes the permissions from the end users.
//
// Description:
//
// You can modify end users only for cloud computers that are in the Running state.
//
// @param request - ModifyUserEntitlementRequest
//
// @return ModifyUserEntitlementResponse
func (client *Client) ModifyUserEntitlement(request *ModifyUserEntitlementRequest) (_result *ModifyUserEntitlementResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserEntitlementResponse{}
	_body, _err := client.ModifyUserEntitlementWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Changes the end users of a cloud computer pool into new end users.
//
// @param request - ModifyUserToDesktopGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyUserToDesktopGroupResponse
func (client *Client) ModifyUserToDesktopGroupWithOptions(request *ModifyUserToDesktopGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyUserToDesktopGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.NewEndUserIds)) {
		query["NewEndUserIds"] = request.NewEndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.OldEndUserIds)) {
		query["OldEndUserIds"] = request.OldEndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyUserToDesktopGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyUserToDesktopGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Changes the end users of a cloud computer pool into new end users.
//
// @param request - ModifyUserToDesktopGroupRequest
//
// @return ModifyUserToDesktopGroupResponse
func (client *Client) ModifyUserToDesktopGroup(request *ModifyUserToDesktopGroupRequest) (_result *ModifyUserToDesktopGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyUserToDesktopGroupResponse{}
	_body, _err := client.ModifyUserToDesktopGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Move files or folders.
//
// @param request - MoveCdsFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return MoveCdsFileResponse
func (client *Client) MoveCdsFileWithOptions(request *MoveCdsFileRequest, runtime *util.RuntimeOptions) (_result *MoveCdsFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.ConflictPolicy)) {
		query["ConflictPolicy"] = request.ConflictPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFolderId)) {
		query["ParentFolderId"] = request.ParentFolderId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("MoveCdsFile"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &MoveCdsFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Move files or folders.
//
// @param request - MoveCdsFileRequest
//
// @return MoveCdsFileResponse
func (client *Client) MoveCdsFile(request *MoveCdsFileRequest) (_result *MoveCdsFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &MoveCdsFileResponse{}
	_body, _err := client.MoveCdsFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restart cloud computers.
//
// Description:
//
// The cloud computers that you want to restart must be in the Running state.
//
// @param request - RebootDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebootDesktopsResponse
func (client *Client) RebootDesktopsWithOptions(request *RebootDesktopsRequest, runtime *util.RuntimeOptions) (_result *RebootDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebootDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebootDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restart cloud computers.
//
// Description:
//
// The cloud computers that you want to restart must be in the Running state.
//
// @param request - RebootDesktopsRequest
//
// @return RebootDesktopsResponse
func (client *Client) RebootDesktops(request *RebootDesktopsRequest) (_result *RebootDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebootDesktopsResponse{}
	_body, _err := client.RebootDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Recreates cloud computers.
//
// Description:
//
// Take note of the following limits when you change an image:
//
// 	- You can select an image whose OS is different from the OS of the original image. The image change feature is not supported in the following regions: China (Hong Kong), Singapore, and Japan (Tokyo).
//
// 	- GPU images and non-GPU images cannot be exchanged. Graphic-based cloud computers can only use GPU-accelerated images. The other cloud computers can only use non-GPU-accelerated images.
//
// After the image of a cloud computer is changed, the system uses the new image to initialize the system disk of the cloud computer. This has the following impacts:
//
// 	- Data in the system disk of the original cloud computer is cleared. Snapshots that are created based on the system disk of the original cloud computer become unavailable. The system automatically deletes the snapshots.
//
// 	- If the OS of the image is changed, the data in the data disk of the original cloud computer is cleared, and the snapshots that are created based on the data disk of the original cloud computer can no longer be used. The system automatically deletes the snapshots. If the OS of the image is not changed, the data in the data disk of the original cloud computer is retained, and the snapshots that are created based on the data disk of the original cloud computer can still be used.
//
// @param request - RebuildDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RebuildDesktopsResponse
func (client *Client) RebuildDesktopsWithOptions(request *RebuildDesktopsRequest, runtime *util.RuntimeOptions) (_result *RebuildDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		query["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.OperateType)) {
		query["OperateType"] = request.OperateType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RebuildDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RebuildDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Recreates cloud computers.
//
// Description:
//
// Take note of the following limits when you change an image:
//
// 	- You can select an image whose OS is different from the OS of the original image. The image change feature is not supported in the following regions: China (Hong Kong), Singapore, and Japan (Tokyo).
//
// 	- GPU images and non-GPU images cannot be exchanged. Graphic-based cloud computers can only use GPU-accelerated images. The other cloud computers can only use non-GPU-accelerated images.
//
// After the image of a cloud computer is changed, the system uses the new image to initialize the system disk of the cloud computer. This has the following impacts:
//
// 	- Data in the system disk of the original cloud computer is cleared. Snapshots that are created based on the system disk of the original cloud computer become unavailable. The system automatically deletes the snapshots.
//
// 	- If the OS of the image is changed, the data in the data disk of the original cloud computer is cleared, and the snapshots that are created based on the data disk of the original cloud computer can no longer be used. The system automatically deletes the snapshots. If the OS of the image is not changed, the data in the data disk of the original cloud computer is retained, and the snapshots that are created based on the data disk of the original cloud computer can still be used.
//
// @param request - RebuildDesktopsRequest
//
// @return RebuildDesktopsResponse
func (client *Client) RebuildDesktops(request *RebuildDesktopsRequest) (_result *RebuildDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RebuildDesktopsResponse{}
	_body, _err := client.RebuildDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes the file sharing feature of a folder in a cloud disk.
//
// @param tmpReq - RemoveFilePermissionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveFilePermissionResponse
func (client *Client) RemoveFilePermissionWithOptions(tmpReq *RemoveFilePermissionRequest, runtime *util.RuntimeOptions) (_result *RemoveFilePermissionResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveFilePermissionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.MemberList)) {
		request.MemberListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MemberList, tea.String("MemberList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CdsId)) {
		query["CdsId"] = request.CdsId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.FileId)) {
		query["FileId"] = request.FileId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.MemberListShrink)) {
		query["MemberList"] = request.MemberListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveFilePermission"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveFilePermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes the file sharing feature of a folder in a cloud disk.
//
// @param request - RemoveFilePermissionRequest
//
// @return RemoveFilePermissionResponse
func (client *Client) RemoveFilePermission(request *RemoveFilePermissionRequest) (_result *RemoveFilePermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveFilePermissionResponse{}
	_body, _err := client.RemoveFilePermissionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes authorized users of cloud computer pools. The removed users can no longer connect to cloud computers in the cloud computer pool.
//
// @param request - RemoveUserFromDesktopGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveUserFromDesktopGroupResponse
func (client *Client) RemoveUserFromDesktopGroupWithOptions(request *RemoveUserFromDesktopGroupRequest, runtime *util.RuntimeOptions) (_result *RemoveUserFromDesktopGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupIds)) {
		query["DesktopGroupIds"] = request.DesktopGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserIds)) {
		query["EndUserIds"] = request.EndUserIds
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveUserFromDesktopGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveUserFromDesktopGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes authorized users of cloud computer pools. The removed users can no longer connect to cloud computers in the cloud computer pool.
//
// @param request - RemoveUserFromDesktopGroupRequest
//
// @return RemoveUserFromDesktopGroupResponse
func (client *Client) RemoveUserFromDesktopGroup(request *RemoveUserFromDesktopGroupRequest) (_result *RemoveUserFromDesktopGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveUserFromDesktopGroupResponse{}
	_body, _err := client.RemoveUserFromDesktopGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 移除超卖用户组用户
//
// @param request - RemoveUserFromDesktopOversoldUserGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveUserFromDesktopOversoldUserGroupResponse
func (client *Client) RemoveUserFromDesktopOversoldUserGroupWithOptions(request *RemoveUserFromDesktopOversoldUserGroupRequest, runtime *util.RuntimeOptions) (_result *RemoveUserFromDesktopOversoldUserGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.UserDesktopId)) {
		query["UserDesktopId"] = request.UserDesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.UserGroupId)) {
		query["UserGroupId"] = request.UserGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveUserFromDesktopOversoldUserGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveUserFromDesktopOversoldUserGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 移除超卖用户组用户
//
// @param request - RemoveUserFromDesktopOversoldUserGroupRequest
//
// @return RemoveUserFromDesktopOversoldUserGroupResponse
func (client *Client) RemoveUserFromDesktopOversoldUserGroup(request *RemoveUserFromDesktopOversoldUserGroupRequest) (_result *RemoveUserFromDesktopOversoldUserGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveUserFromDesktopOversoldUserGroupResponse{}
	_body, _err := client.RemoveUserFromDesktopOversoldUserGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RenewDesktopGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewDesktopGroupResponse
func (client *Client) RenewDesktopGroupWithOptions(request *RenewDesktopGroupRequest, runtime *util.RuntimeOptions) (_result *RenewDesktopGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewDesktopGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewDesktopGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RenewDesktopGroupRequest
//
// @return RenewDesktopGroupResponse
func (client *Client) RenewDesktopGroup(request *RenewDesktopGroupRequest) (_result *RenewDesktopGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewDesktopGroupResponse{}
	_body, _err := client.RenewDesktopGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 续费桌面超卖组
//
// @param request - RenewDesktopOversoldGroupRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewDesktopOversoldGroupResponse
func (client *Client) RenewDesktopOversoldGroupWithOptions(request *RenewDesktopOversoldGroupRequest, runtime *util.RuntimeOptions) (_result *RenewDesktopOversoldGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OversoldGroupId)) {
		query["OversoldGroupId"] = request.OversoldGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewDesktopOversoldGroup"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewDesktopOversoldGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 续费桌面超卖组
//
// @param request - RenewDesktopOversoldGroupRequest
//
// @return RenewDesktopOversoldGroupResponse
func (client *Client) RenewDesktopOversoldGroup(request *RenewDesktopOversoldGroupRequest) (_result *RenewDesktopOversoldGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewDesktopOversoldGroupResponse{}
	_body, _err := client.RenewDesktopOversoldGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renew subscription cloud computers.
//
// @param request - RenewDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewDesktopsResponse
func (client *Client) RenewDesktopsWithOptions(request *RenewDesktopsRequest, runtime *util.RuntimeOptions) (_result *RenewDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Renew subscription cloud computers.
//
// @param request - RenewDesktopsRequest
//
// @return RenewDesktopsResponse
func (client *Client) RenewDesktops(request *RenewDesktopsRequest) (_result *RenewDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewDesktopsResponse{}
	_body, _err := client.RenewDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Renews premium bandwidth plans.
//
// @param request - RenewNetworkPackagesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenewNetworkPackagesResponse
func (client *Client) RenewNetworkPackagesWithOptions(request *RenewNetworkPackagesRequest, runtime *util.RuntimeOptions) (_result *RenewNetworkPackagesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPay)) {
		query["AutoPay"] = request.AutoPay
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkPackageId)) {
		query["NetworkPackageId"] = request.NetworkPackageId
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PeriodUnit)) {
		query["PeriodUnit"] = request.PeriodUnit
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionId)) {
		query["PromotionId"] = request.PromotionId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RenewNetworkPackages"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenewNetworkPackagesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Renews premium bandwidth plans.
//
// @param request - RenewNetworkPackagesRequest
//
// @return RenewNetworkPackagesResponse
func (client *Client) RenewNetworkPackages(request *RenewNetworkPackagesRequest) (_result *RenewNetworkPackagesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenewNetworkPackagesResponse{}
	_body, _err := client.RenewNetworkPackagesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets cloud computers.
//
// Description:
//
// > You can call this operation to reset only cloud computers in a cloud computer pool.
//
// @param request - ResetDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetDesktopsResponse
func (client *Client) ResetDesktopsWithOptions(request *ResetDesktopsRequest, runtime *util.RuntimeOptions) (_result *ResetDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupIds)) {
		query["DesktopGroupIds"] = request.DesktopGroupIds
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.ImageId)) {
		query["ImageId"] = request.ImageId
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResetScope)) {
		query["ResetScope"] = request.ResetScope
	}

	if !tea.BoolValue(util.IsUnset(request.ResetType)) {
		query["ResetType"] = request.ResetType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resets cloud computers.
//
// Description:
//
// > You can call this operation to reset only cloud computers in a cloud computer pool.
//
// @param request - ResetDesktopsRequest
//
// @return ResetDesktopsResponse
func (client *Client) ResetDesktops(request *ResetDesktopsRequest) (_result *ResetDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetDesktopsResponse{}
	_body, _err := client.ResetDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Resets the mount target of a File Storage NAS (NAS) file system.
//
// Description:
//
// When you create a NAS file system, a mount target is automatically generated. By default, you do not need to modify the mount target of the NAS file system. If the mount target is disabled, you need to reset the mount target of the NAS file system.
//
// @param request - ResetNASDefaultMountTargetRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetNASDefaultMountTargetResponse
func (client *Client) ResetNASDefaultMountTargetWithOptions(request *ResetNASDefaultMountTargetRequest, runtime *util.RuntimeOptions) (_result *ResetNASDefaultMountTargetResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileSystemId)) {
		query["FileSystemId"] = request.FileSystemId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetNASDefaultMountTarget"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetNASDefaultMountTargetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Resets the mount target of a File Storage NAS (NAS) file system.
//
// Description:
//
// When you create a NAS file system, a mount target is automatically generated. By default, you do not need to modify the mount target of the NAS file system. If the mount target is disabled, you need to reset the mount target of the NAS file system.
//
// @param request - ResetNASDefaultMountTargetRequest
//
// @return ResetNASDefaultMountTargetResponse
func (client *Client) ResetNASDefaultMountTarget(request *ResetNASDefaultMountTargetRequest) (_result *ResetNASDefaultMountTargetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetNASDefaultMountTargetResponse{}
	_body, _err := client.ResetNASDefaultMountTargetWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Restores the data of a disk from a snapshot.
//
// Description:
//
// Before you call this operation, make sure that the following operations are performed:
//
// 	- The data that you want to retain is backed up.
//
//     > The disk restoration operation is irreversible. After you call this operation, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore the disk based on the snapshot, make sure that you back up data.
//
// 	- The cloud computer to which the disk belongs is stopped.
//
// @param request - ResetSnapshotRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetSnapshotResponse
func (client *Client) ResetSnapshotWithOptions(request *ResetSnapshotRequest, runtime *util.RuntimeOptions) (_result *ResetSnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotId)) {
		query["SnapshotId"] = request.SnapshotId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetSnapshot"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetSnapshotResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Restores the data of a disk from a snapshot.
//
// Description:
//
// Before you call this operation, make sure that the following operations are performed:
//
// 	- The data that you want to retain is backed up.
//
//     > The disk restoration operation is irreversible. After you call this operation, the disk is restored to the status at the point in time when the snapshot was created. Data that is generated between the snapshot creation time and the current time is lost. Before you restore the disk based on the snapshot, make sure that you back up data.
//
// 	- The cloud computer to which the disk belongs is stopped.
//
// @param request - ResetSnapshotRequest
//
// @return ResetSnapshotResponse
func (client *Client) ResetSnapshot(request *ResetSnapshotRequest) (_result *ResetSnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetSnapshotResponse{}
	_body, _err := client.ResetSnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Revokes the coordinate permissions.
//
// @param request - RevokeCoordinatePrivilegeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RevokeCoordinatePrivilegeResponse
func (client *Client) RevokeCoordinatePrivilegeWithOptions(request *RevokeCoordinatePrivilegeRequest, runtime *util.RuntimeOptions) (_result *RevokeCoordinatePrivilegeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoId)) {
		query["CoId"] = request.CoId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserType)) {
		query["UserType"] = request.UserType
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		query["Uuid"] = request.Uuid
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RevokeCoordinatePrivilege"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RevokeCoordinatePrivilegeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Revokes the coordinate permissions.
//
// @param request - RevokeCoordinatePrivilegeRequest
//
// @return RevokeCoordinatePrivilegeResponse
func (client *Client) RevokeCoordinatePrivilege(request *RevokeCoordinatePrivilegeRequest) (_result *RevokeCoordinatePrivilegeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RevokeCoordinatePrivilegeResponse{}
	_body, _err := client.RevokeCoordinatePrivilegeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Runs a PowerShell or batch (.bat) script on Windows cloud desktops.
//
// Description:
//
// You can use the RunCommand operation to run scripts only on Windows cloud desktops.
//
// @param request - RunCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RunCommandResponse
func (client *Client) RunCommandWithOptions(request *RunCommandRequest, runtime *util.RuntimeOptions) (_result *RunCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CommandContent)) {
		query["CommandContent"] = request.CommandContent
	}

	if !tea.BoolValue(util.IsUnset(request.ContentEncoding)) {
		query["ContentEncoding"] = request.ContentEncoding
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.EndUserId)) {
		query["EndUserId"] = request.EndUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCommand"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Runs a PowerShell or batch (.bat) script on Windows cloud desktops.
//
// Description:
//
// You can use the RunCommand operation to run scripts only on Windows cloud desktops.
//
// @param request - RunCommandRequest
//
// @return RunCommandResponse
func (client *Client) RunCommand(request *RunCommandRequest) (_result *RunCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCommandResponse{}
	_body, _err := client.RunCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Obtains the verification code that is required when you bind an advanced office network to a Cloud Enterprise Network (CEN) instance that belongs to another Alibaba Cloud account.
//
// Description:
//
// You must call this operation to obtain the verification code that is required when you bind an advanced office network to a CEN instance that belongs to another Alibaba Cloud account. After you call this operation, the system sends a verification code to the email address associated with the Alibaba Cloud account to which the CEN instance belongs.
//
// @param request - SendVerifyCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendVerifyCodeResponse
func (client *Client) SendVerifyCodeWithOptions(request *SendVerifyCodeRequest, runtime *util.RuntimeOptions) (_result *SendVerifyCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExtraInfo)) {
		query["ExtraInfo"] = request.ExtraInfo
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyCodeAction)) {
		query["VerifyCodeAction"] = request.VerifyCodeAction
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendVerifyCode"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendVerifyCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Obtains the verification code that is required when you bind an advanced office network to a Cloud Enterprise Network (CEN) instance that belongs to another Alibaba Cloud account.
//
// Description:
//
// You must call this operation to obtain the verification code that is required when you bind an advanced office network to a CEN instance that belongs to another Alibaba Cloud account. After you call this operation, the system sends a verification code to the email address associated with the Alibaba Cloud account to which the CEN instance belongs.
//
// @param request - SendVerifyCodeRequest
//
// @return SendVerifyCodeResponse
func (client *Client) SendVerifyCode(request *SendVerifyCodeRequest) (_result *SendVerifyCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendVerifyCodeResponse{}
	_body, _err := client.SendVerifyCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures an auto scaling policy for a multi-session cloud computer. Elastic Desktop Service allows multiple end users to share a cloud computer in a multi-session cloud computer pool. This helps save costs.
//
// @param request - SetDesktopGroupScaleTimerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDesktopGroupScaleTimerResponse
func (client *Client) SetDesktopGroupScaleTimerWithOptions(request *SetDesktopGroupScaleTimerRequest, runtime *util.RuntimeOptions) (_result *SetDesktopGroupScaleTimerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ScaleTimerInfos)) {
		query["ScaleTimerInfos"] = request.ScaleTimerInfos
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDesktopGroupScaleTimer"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDesktopGroupScaleTimerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures an auto scaling policy for a multi-session cloud computer. Elastic Desktop Service allows multiple end users to share a cloud computer in a multi-session cloud computer pool. This helps save costs.
//
// @param request - SetDesktopGroupScaleTimerRequest
//
// @return SetDesktopGroupScaleTimerResponse
func (client *Client) SetDesktopGroupScaleTimer(request *SetDesktopGroupScaleTimerRequest) (_result *SetDesktopGroupScaleTimerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDesktopGroupScaleTimerResponse{}
	_body, _err := client.SetDesktopGroupScaleTimerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures a scheduled task for a cloud computer pool, such as starting, stopping, restarting or resting cloud computers in the pool.
//
// @param request - SetDesktopGroupTimerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDesktopGroupTimerResponse
func (client *Client) SetDesktopGroupTimerWithOptions(request *SetDesktopGroupTimerRequest, runtime *util.RuntimeOptions) (_result *SetDesktopGroupTimerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CronExpression)) {
		query["CronExpression"] = request.CronExpression
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResetType)) {
		query["ResetType"] = request.ResetType
	}

	if !tea.BoolValue(util.IsUnset(request.TimerType)) {
		query["TimerType"] = request.TimerType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDesktopGroupTimer"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDesktopGroupTimerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures a scheduled task for a cloud computer pool, such as starting, stopping, restarting or resting cloud computers in the pool.
//
// @param request - SetDesktopGroupTimerRequest
//
// @return SetDesktopGroupTimerResponse
func (client *Client) SetDesktopGroupTimer(request *SetDesktopGroupTimerRequest) (_result *SetDesktopGroupTimerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDesktopGroupTimerResponse{}
	_body, _err := client.SetDesktopGroupTimerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Sets the status of a scheduled task for a cloud computer pool. For example, you enable or disable the scheduled task.
//
// @param request - SetDesktopGroupTimerStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDesktopGroupTimerStatusResponse
func (client *Client) SetDesktopGroupTimerStatusWithOptions(request *SetDesktopGroupTimerStatusRequest, runtime *util.RuntimeOptions) (_result *SetDesktopGroupTimerStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TimerType)) {
		query["TimerType"] = request.TimerType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDesktopGroupTimerStatus"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDesktopGroupTimerStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Sets the status of a scheduled task for a cloud computer pool. For example, you enable or disable the scheduled task.
//
// @param request - SetDesktopGroupTimerStatusRequest
//
// @return SetDesktopGroupTimerStatusResponse
func (client *Client) SetDesktopGroupTimerStatus(request *SetDesktopGroupTimerStatusRequest) (_result *SetDesktopGroupTimerStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDesktopGroupTimerStatusResponse{}
	_body, _err := client.SetDesktopGroupTimerStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置桌面维护模式
//
// @param request - SetDesktopMaintenanceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDesktopMaintenanceResponse
func (client *Client) SetDesktopMaintenanceWithOptions(request *SetDesktopMaintenanceRequest, runtime *util.RuntimeOptions) (_result *SetDesktopMaintenanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopIds)) {
		query["DesktopIds"] = request.DesktopIds
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDesktopMaintenance"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDesktopMaintenanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置桌面维护模式
//
// @param request - SetDesktopMaintenanceRequest
//
// @return SetDesktopMaintenanceResponse
func (client *Client) SetDesktopMaintenance(request *SetDesktopMaintenanceRequest) (_result *SetDesktopMaintenanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDesktopMaintenanceResponse{}
	_body, _err := client.SetDesktopMaintenanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures the single sign-on (SSO) status of an Active Directory (AD) directory.
//
// Description:
//
// This operation is supported only for AD directories, not for RAM directories.
//
// @param request - SetDirectorySsoStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDirectorySsoStatusResponse
func (client *Client) SetDirectorySsoStatusWithOptions(request *SetDirectorySsoStatusRequest, runtime *util.RuntimeOptions) (_result *SetDirectorySsoStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSso)) {
		query["EnableSso"] = request.EnableSso
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDirectorySsoStatus"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDirectorySsoStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures the single sign-on (SSO) status of an Active Directory (AD) directory.
//
// Description:
//
// This operation is supported only for AD directories, not for RAM directories.
//
// @param request - SetDirectorySsoStatusRequest
//
// @return SetDirectorySsoStatusResponse
func (client *Client) SetDirectorySsoStatus(request *SetDirectorySsoStatusRequest) (_result *SetDirectorySsoStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDirectorySsoStatusResponse{}
	_body, _err := client.SetDirectorySsoStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads the metadata of a Security Assertion Markup Language (SAML) 2.0-based identity provider (IdP).
//
// Description:
//
// You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
//
// @param request - SetIdpMetadataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetIdpMetadataResponse
func (client *Client) SetIdpMetadataWithOptions(request *SetIdpMetadataRequest, runtime *util.RuntimeOptions) (_result *SetIdpMetadataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DirectoryId)) {
		query["DirectoryId"] = request.DirectoryId
	}

	if !tea.BoolValue(util.IsUnset(request.IdpMetadata)) {
		query["IdpMetadata"] = request.IdpMetadata
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetIdpMetadata"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetIdpMetadataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads the metadata of a Security Assertion Markup Language (SAML) 2.0-based identity provider (IdP).
//
// Description:
//
// You can call this operation only for workspaces of the Active Directory (AD) and convenience account types.
//
// @param request - SetIdpMetadataRequest
//
// @return SetIdpMetadataResponse
func (client *Client) SetIdpMetadata(request *SetIdpMetadataRequest) (_result *SetIdpMetadataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetIdpMetadataResponse{}
	_body, _err := client.SetIdpMetadataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables single sign-on (SSO) for a workspace.
//
// @param request - SetOfficeSiteSsoStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetOfficeSiteSsoStatusResponse
func (client *Client) SetOfficeSiteSsoStatusWithOptions(request *SetOfficeSiteSsoStatusRequest, runtime *util.RuntimeOptions) (_result *SetOfficeSiteSsoStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableSso)) {
		query["EnableSso"] = request.EnableSso
	}

	if !tea.BoolValue(util.IsUnset(request.OfficeSiteId)) {
		query["OfficeSiteId"] = request.OfficeSiteId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetOfficeSiteSsoStatus"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetOfficeSiteSsoStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables single sign-on (SSO) for a workspace.
//
// @param request - SetOfficeSiteSsoStatusRequest
//
// @return SetOfficeSiteSsoStatusResponse
func (client *Client) SetOfficeSiteSsoStatus(request *SetOfficeSiteSsoStatusRequest) (_result *SetOfficeSiteSsoStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetOfficeSiteSsoStatusResponse{}
	_body, _err := client.SetOfficeSiteSsoStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Configures directories in the blacklist and whitelist based on the user profile management (UPM) feature.
//
// @param tmpReq - SetUserProfilePathRulesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetUserProfilePathRulesResponse
func (client *Client) SetUserProfilePathRulesWithOptions(tmpReq *SetUserProfilePathRulesRequest, runtime *util.RuntimeOptions) (_result *SetUserProfilePathRulesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetUserProfilePathRulesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.UserProfilePathRule)) {
		request.UserProfilePathRuleShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserProfilePathRule, tea.String("UserProfilePathRule"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserProfilePathRuleShrink)) {
		query["UserProfilePathRule"] = request.UserProfilePathRuleShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserProfileRuleType)) {
		query["UserProfileRuleType"] = request.UserProfileRuleType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetUserProfilePathRules"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetUserProfilePathRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Configures directories in the blacklist and whitelist based on the user profile management (UPM) feature.
//
// @param request - SetUserProfilePathRulesRequest
//
// @return SetUserProfilePathRulesResponse
func (client *Client) SetUserProfilePathRules(request *SetUserProfilePathRulesRequest) (_result *SetUserProfilePathRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetUserProfilePathRulesResponse{}
	_body, _err := client.SetUserProfilePathRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Starts stopped cloud computers. After the API operation is successfully called, the cloud computers enter the Running state.
//
// Description:
//
// The cloud computers that you want to start must be in the Stopped state.
//
// @param request - StartDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartDesktopsResponse
func (client *Client) StartDesktopsWithOptions(request *StartDesktopsRequest, runtime *util.RuntimeOptions) (_result *StartDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Starts stopped cloud computers. After the API operation is successfully called, the cloud computers enter the Running state.
//
// Description:
//
// The cloud computers that you want to start must be in the Stopped state.
//
// @param request - StartDesktopsRequest
//
// @return StartDesktopsResponse
func (client *Client) StartDesktops(request *StartDesktopsRequest) (_result *StartDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartDesktopsResponse{}
	_body, _err := client.StartDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stop cloud computers that are in the Running state. After the operation is successfully called, the cloud computers enter the Stopped state.
//
// Description:
//
// The cloud computers that you want to stop must be in the Running state.
//
// @param request - StopDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopDesktopsResponse
func (client *Client) StopDesktopsWithOptions(request *StopDesktopsRequest, runtime *util.RuntimeOptions) (_result *StopDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StoppedMode)) {
		query["StoppedMode"] = request.StoppedMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stop cloud computers that are in the Running state. After the operation is successfully called, the cloud computers enter the Stopped state.
//
// Description:
//
// The cloud computers that you want to stop must be in the Running state.
//
// @param request - StopDesktopsRequest
//
// @return StopDesktopsResponse
func (client *Client) StopDesktops(request *StopDesktopsRequest) (_result *StopDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopDesktopsResponse{}
	_body, _err := client.StopDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Stops a Cloud Assistant command that is running on one or more cloud desktops.
//
// Description:
//
// When you stop a one-time execution of a command, the command continues to run on the cloud desktops where it has started to run, and will not run on the cloud desktops where it has not started to run.
//
// @param request - StopInvocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopInvocationResponse
func (client *Client) StopInvocationWithOptions(request *StopInvocationRequest, runtime *util.RuntimeOptions) (_result *StopInvocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.InvokeId)) {
		query["InvokeId"] = request.InvokeId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopInvocation"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopInvocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Stops a Cloud Assistant command that is running on one or more cloud desktops.
//
// Description:
//
// When you stop a one-time execution of a command, the command continues to run on the cloud desktops where it has started to run, and will not run on the cloud desktops where it has not started to run.
//
// @param request - StopInvocationRequest
//
// @return StopInvocationResponse
func (client *Client) StopInvocation(request *StopInvocationRequest) (_result *StopInvocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopInvocationResponse{}
	_body, _err := client.StopInvocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Adds tags to cloud computers. This allows you to filter and manage cloud computers by tag.
//
// Description:
//
// If TagKey is specified, the new TagValue value overrides the original TagValue value.
//
// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Adds tags to cloud computers. This allows you to filter and manage cloud computers by tag.
//
// Description:
//
// If TagKey is specified, the new TagValue value overrides the original TagValue value.
//
// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 解绑用户桌面
//
// @param request - UnbindUserDesktopRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnbindUserDesktopResponse
func (client *Client) UnbindUserDesktopWithOptions(request *UnbindUserDesktopRequest, runtime *util.RuntimeOptions) (_result *UnbindUserDesktopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopAgentIds)) {
		query["DesktopAgentIds"] = request.DesktopAgentIds
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopGroupId)) {
		query["DesktopGroupId"] = request.DesktopGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.DesktopIds)) {
		query["DesktopIds"] = request.DesktopIds
	}

	if !tea.BoolValue(util.IsUnset(request.Force)) {
		query["Force"] = request.Force
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		query["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.UserDesktopIds)) {
		query["UserDesktopIds"] = request.UserDesktopIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnbindUserDesktop"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnbindUserDesktopResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 解绑用户桌面
//
// @param request - UnbindUserDesktopRequest
//
// @return UnbindUserDesktopResponse
func (client *Client) UnbindUserDesktop(request *UnbindUserDesktopRequest) (_result *UnbindUserDesktopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindUserDesktopResponse{}
	_body, _err := client.UnbindUserDesktopWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Unlocks a virtual multi-factor authentication (MFA) device that is in the LOCKED state.
//
// @param request - UnlockVirtualMFADeviceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnlockVirtualMFADeviceResponse
func (client *Client) UnlockVirtualMFADeviceWithOptions(request *UnlockVirtualMFADeviceRequest, runtime *util.RuntimeOptions) (_result *UnlockVirtualMFADeviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SerialNumber)) {
		query["SerialNumber"] = request.SerialNumber
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UnlockVirtualMFADevice"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnlockVirtualMFADeviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Unlocks a virtual multi-factor authentication (MFA) device that is in the LOCKED state.
//
// @param request - UnlockVirtualMFADeviceRequest
//
// @return UnlockVirtualMFADeviceResponse
func (client *Client) UnlockVirtualMFADevice(request *UnlockVirtualMFADeviceRequest) (_result *UnlockVirtualMFADeviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnlockVirtualMFADeviceResponse{}
	_body, _err := client.UnlockVirtualMFADeviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Removes tags from cloud computers. After you remove a tag, if the tag is not added to a cloud computer, the tag is automatically deleted.
//
// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Removes tags from cloud computers. After you remove a tag, if the tag is not added to a cloud computer, the tag is automatically deleted.
//
// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Enables or disables the auto-push feature for an image update task.
//
// Description:
//
// You can call this operation to manage each image update task. This operation is valid only when the auto-update switch in the image update module for global image updates is turned off. If the auto-update switch is turned on, the switches for each image update task are always turned on. If you want to turn on or off the auto-update switch, go to the Elastic Desktop Service console and choose **Operations > Image Updates*	- in the left-side navigation pane.
//
// @param request - UpdateFotaTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFotaTaskResponse
func (client *Client) UpdateFotaTaskWithOptions(request *UpdateFotaTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateFotaTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskUid)) {
		query["TaskUid"] = request.TaskUid
	}

	if !tea.BoolValue(util.IsUnset(request.UserStatus)) {
		query["UserStatus"] = request.UserStatus
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFotaTask"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFotaTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Enables or disables the auto-push feature for an image update task.
//
// Description:
//
// You can call this operation to manage each image update task. This operation is valid only when the auto-update switch in the image update module for global image updates is turned off. If the auto-update switch is turned on, the switches for each image update task are always turned on. If you want to turn on or off the auto-update switch, go to the Elastic Desktop Service console and choose **Operations > Image Updates*	- in the left-side navigation pane.
//
// @param request - UpdateFotaTaskRequest
//
// @return UpdateFotaTaskResponse
func (client *Client) UpdateFotaTask(request *UpdateFotaTaskRequest) (_result *UpdateFotaTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateFotaTaskResponse{}
	_body, _err := client.UpdateFotaTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Uploads your custom Windows image.
//
// Description:
//
// >  You can upload only Windows images.
//
// @param request - UploadImageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadImageResponse
func (client *Client) UploadImageWithOptions(request *UploadImageRequest, runtime *util.RuntimeOptions) (_result *UploadImageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DataDiskSize)) {
		query["DataDiskSize"] = request.DataDiskSize
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnableSecurityCheck)) {
		query["EnableSecurityCheck"] = request.EnableSecurityCheck
	}

	if !tea.BoolValue(util.IsUnset(request.GpuCategory)) {
		query["GpuCategory"] = request.GpuCategory
	}

	if !tea.BoolValue(util.IsUnset(request.GpuDriverType)) {
		query["GpuDriverType"] = request.GpuDriverType
	}

	if !tea.BoolValue(util.IsUnset(request.ImageName)) {
		query["ImageName"] = request.ImageName
	}

	if !tea.BoolValue(util.IsUnset(request.LicenseType)) {
		query["LicenseType"] = request.LicenseType
	}

	if !tea.BoolValue(util.IsUnset(request.OsType)) {
		query["OsType"] = request.OsType
	}

	if !tea.BoolValue(util.IsUnset(request.OssObjectPath)) {
		query["OssObjectPath"] = request.OssObjectPath
	}

	if !tea.BoolValue(util.IsUnset(request.ProtocolType)) {
		query["ProtocolType"] = request.ProtocolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskSize)) {
		query["SystemDiskSize"] = request.SystemDiskSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadImage"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadImageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Uploads your custom Windows image.
//
// Description:
//
// >  You can upload only Windows images.
//
// @param request - UploadImageRequest
//
// @return UploadImageResponse
func (client *Client) UploadImage(request *UploadImageRequest) (_result *UploadImageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadImageResponse{}
	_body, _err := client.UploadImageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// Verifies the ID of a Cloud Enterprise Network (CEN) instance and the ID of the Alibaba Cloud account to which the instance belongs and checks whether a CIDR block conflict exists between the routes of the instance and the IPv4 CIDR blocks of the associated office network.
//
// @param request - VerifyCenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return VerifyCenResponse
func (client *Client) VerifyCenWithOptions(request *VerifyCenRequest, runtime *util.RuntimeOptions) (_result *VerifyCenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CenId)) {
		query["CenId"] = request.CenId
	}

	if !tea.BoolValue(util.IsUnset(request.CenOwnerId)) {
		query["CenOwnerId"] = request.CenOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.CidrBlock)) {
		query["CidrBlock"] = request.CidrBlock
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.VerifyCode)) {
		query["VerifyCode"] = request.VerifyCode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("VerifyCen"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &VerifyCenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// Verifies the ID of a Cloud Enterprise Network (CEN) instance and the ID of the Alibaba Cloud account to which the instance belongs and checks whether a CIDR block conflict exists between the routes of the instance and the IPv4 CIDR blocks of the associated office network.
//
// @param request - VerifyCenRequest
//
// @return VerifyCenResponse
func (client *Client) VerifyCen(request *VerifyCenRequest) (_result *VerifyCenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &VerifyCenResponse{}
	_body, _err := client.VerifyCenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - WakeupDesktopsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return WakeupDesktopsResponse
func (client *Client) WakeupDesktopsWithOptions(request *WakeupDesktopsRequest, runtime *util.RuntimeOptions) (_result *WakeupDesktopsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DesktopId)) {
		query["DesktopId"] = request.DesktopId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("WakeupDesktops"),
		Version:     tea.String("2020-09-30"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &WakeupDesktopsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - WakeupDesktopsRequest
//
// @return WakeupDesktopsResponse
func (client *Client) WakeupDesktops(request *WakeupDesktopsRequest) (_result *WakeupDesktopsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &WakeupDesktopsResponse{}
	_body, _err := client.WakeupDesktopsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
