// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iCreateADConnectorDirectoryRequest interface {
	dara.Model
	String() string
	GoString() string
	SetDesktopAccessType(v string) *CreateADConnectorDirectoryRequest
	GetDesktopAccessType() *string
	SetDirectoryName(v string) *CreateADConnectorDirectoryRequest
	GetDirectoryName() *string
	SetDnsAddress(v []*string) *CreateADConnectorDirectoryRequest
	GetDnsAddress() []*string
	SetDomainName(v string) *CreateADConnectorDirectoryRequest
	GetDomainName() *string
	SetDomainPassword(v string) *CreateADConnectorDirectoryRequest
	GetDomainPassword() *string
	SetDomainUserName(v string) *CreateADConnectorDirectoryRequest
	GetDomainUserName() *string
	SetEnableAdminAccess(v bool) *CreateADConnectorDirectoryRequest
	GetEnableAdminAccess() *bool
	SetMfaEnabled(v bool) *CreateADConnectorDirectoryRequest
	GetMfaEnabled() *bool
	SetRegionId(v string) *CreateADConnectorDirectoryRequest
	GetRegionId() *string
	SetSpecification(v int64) *CreateADConnectorDirectoryRequest
	GetSpecification() *int64
	SetSubDomainDnsAddress(v []*string) *CreateADConnectorDirectoryRequest
	GetSubDomainDnsAddress() []*string
	SetSubDomainName(v string) *CreateADConnectorDirectoryRequest
	GetSubDomainName() *string
	SetVSwitchId(v []*string) *CreateADConnectorDirectoryRequest
	GetVSwitchId() []*string
}

type CreateADConnectorDirectoryRequest struct {
	// The method in which the cloud computer is connected.
	//
	// Valid values:
	//
	// 	- VPC
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Internet (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- Any
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// Internet
	DesktopAccessType *string `json:"DesktopAccessType,omitempty" xml:"DesktopAccessType,omitempty"`
	// The directory name. The name must be 2 to 255 characters in length. The name must start with a letter but cannot start with `http://` or `https://`. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	//
	// This parameter is required.
	//
	// example:
	//
	// testDirectoryName
	DirectoryName *string `json:"DirectoryName,omitempty" xml:"DirectoryName,omitempty"`
	// The IP address of the DNS server corresponding to the enterprise AD. You can specify only one IP address. Make sure that the specified IP address is accessible in the network of the selected vSwitch.
	//
	// This parameter is required.
	//
	// example:
	//
	// ``127.0.**.**``
	DnsAddress []*string `json:"DnsAddress,omitempty" xml:"DnsAddress,omitempty" type:"Repeated"`
	// The fully qualified domain name (FQDN) of the enterprise AD system. The value must contain the hostname and the domain name. You can register each FQDN only once.
	//
	// This parameter is required.
	//
	// example:
	//
	// corp.example.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// The password of the domain administrator. The password can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// testPassword
	DomainPassword *string `json:"DomainPassword,omitempty" xml:"DomainPassword,omitempty"`
	// The username of the domain administrator. The username can be up to 64 characters in length.
	//
	// This parameter is required.
	//
	// example:
	//
	// sAMAccountName
	DomainUserName *string `json:"DomainUserName,omitempty" xml:"DomainUserName,omitempty"`
	// Specifies whether to grant the local administrator permissions to users that are authorized to use cloud computers in the office network.
	//
	// Valid values:
	//
	// 	- <!-- -->
	//
	//     true
	//
	//     <!-- -->
	//
	//     (default)
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// true
	EnableAdminAccess *bool `json:"EnableAdminAccess,omitempty" xml:"EnableAdminAccess,omitempty"`
	// Specifies whether to enable Multi-Factor Authentication (MFA). After you enable MFA, all AD users in the directory must enter a dynamic verification code generated by the virtual MFA device in addition to a correct password when they log on to a cloud computer.
	//
	// >  When end users log on to a cloud computer for the first time, they must bind an MFA device.
	//
	// Valid values:
	//
	// 	- true
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// 	- <!-- -->
	//
	//     false (default)
	//
	//     <!-- -->
	//
	//     <!-- -->
	//
	// example:
	//
	// false
	MfaEnabled *bool `json:"MfaEnabled,omitempty" xml:"MfaEnabled,omitempty"`
	// The region ID. You can call the [DescribeRegions](https://help.aliyun.com/document_detail/196646.html) operation to query the most recent region list.
	//
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// The type of the AD connector.
	//
	// Valid values:
	//
	// - 1 (General)
	//
	// - 2 (Advanced)
	//
	// example:
	//
	// 1
	Specification *int64 `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// The DNS address of the existing AD subdomain.\\
	//
	// If you specify the `SubDomainName` parameter but you do not specify this parameter, the DNS address of the subdomain is the same as the DNS address of the parent domain.
	//
	// example:
	//
	// ``127.0.**.**``
	SubDomainDnsAddress []*string `json:"SubDomainDnsAddress,omitempty" xml:"SubDomainDnsAddress,omitempty" type:"Repeated"`
	// The FQDN of the enterprise AD subdomain. The value must contain the hostname and the subdomain name.
	//
	// example:
	//
	// child.example.com
	SubDomainName *string `json:"SubDomainName,omitempty" xml:"SubDomainName,omitempty"`
	// Details of the vSwitch IDs. You can specify only one vSwitch ID.
	//
	// This parameter is required.
	//
	// example:
	//
	// vsw-bp19ocz3erfx15uon****
	VSwitchId []*string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty" type:"Repeated"`
}

func (s CreateADConnectorDirectoryRequest) String() string {
	return dara.Prettify(s)
}

func (s CreateADConnectorDirectoryRequest) GoString() string {
	return s.String()
}

func (s *CreateADConnectorDirectoryRequest) GetDesktopAccessType() *string {
	return s.DesktopAccessType
}

func (s *CreateADConnectorDirectoryRequest) GetDirectoryName() *string {
	return s.DirectoryName
}

func (s *CreateADConnectorDirectoryRequest) GetDnsAddress() []*string {
	return s.DnsAddress
}

func (s *CreateADConnectorDirectoryRequest) GetDomainName() *string {
	return s.DomainName
}

func (s *CreateADConnectorDirectoryRequest) GetDomainPassword() *string {
	return s.DomainPassword
}

func (s *CreateADConnectorDirectoryRequest) GetDomainUserName() *string {
	return s.DomainUserName
}

func (s *CreateADConnectorDirectoryRequest) GetEnableAdminAccess() *bool {
	return s.EnableAdminAccess
}

func (s *CreateADConnectorDirectoryRequest) GetMfaEnabled() *bool {
	return s.MfaEnabled
}

func (s *CreateADConnectorDirectoryRequest) GetRegionId() *string {
	return s.RegionId
}

func (s *CreateADConnectorDirectoryRequest) GetSpecification() *int64 {
	return s.Specification
}

func (s *CreateADConnectorDirectoryRequest) GetSubDomainDnsAddress() []*string {
	return s.SubDomainDnsAddress
}

func (s *CreateADConnectorDirectoryRequest) GetSubDomainName() *string {
	return s.SubDomainName
}

func (s *CreateADConnectorDirectoryRequest) GetVSwitchId() []*string {
	return s.VSwitchId
}

func (s *CreateADConnectorDirectoryRequest) SetDesktopAccessType(v string) *CreateADConnectorDirectoryRequest {
	s.DesktopAccessType = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDirectoryName(v string) *CreateADConnectorDirectoryRequest {
	s.DirectoryName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDnsAddress(v []*string) *CreateADConnectorDirectoryRequest {
	s.DnsAddress = v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDomainName(v string) *CreateADConnectorDirectoryRequest {
	s.DomainName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDomainPassword(v string) *CreateADConnectorDirectoryRequest {
	s.DomainPassword = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetDomainUserName(v string) *CreateADConnectorDirectoryRequest {
	s.DomainUserName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetEnableAdminAccess(v bool) *CreateADConnectorDirectoryRequest {
	s.EnableAdminAccess = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetMfaEnabled(v bool) *CreateADConnectorDirectoryRequest {
	s.MfaEnabled = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetRegionId(v string) *CreateADConnectorDirectoryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetSpecification(v int64) *CreateADConnectorDirectoryRequest {
	s.Specification = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetSubDomainDnsAddress(v []*string) *CreateADConnectorDirectoryRequest {
	s.SubDomainDnsAddress = v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetSubDomainName(v string) *CreateADConnectorDirectoryRequest {
	s.SubDomainName = &v
	return s
}

func (s *CreateADConnectorDirectoryRequest) SetVSwitchId(v []*string) *CreateADConnectorDirectoryRequest {
	s.VSwitchId = v
	return s
}

func (s *CreateADConnectorDirectoryRequest) Validate() error {
	return dara.Validate(s)
}
