// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
	"io"
)

type iId3MetaVerifyAdvanceRequest interface {
	dara.Model
	String() string
	GoString() string
	SetCrop(v string) *Id3MetaVerifyAdvanceRequest
	GetCrop() *string
	SetFaceFileObject(v io.Reader) *Id3MetaVerifyAdvanceRequest
	GetFaceFileObject() io.Reader
	SetFaceUrl(v string) *Id3MetaVerifyAdvanceRequest
	GetFaceUrl() *string
	SetIdentifyNum(v string) *Id3MetaVerifyAdvanceRequest
	GetIdentifyNum() *string
	SetParamType(v string) *Id3MetaVerifyAdvanceRequest
	GetParamType() *string
	SetUserName(v string) *Id3MetaVerifyAdvanceRequest
	GetUserName() *string
}

type Id3MetaVerifyAdvanceRequest struct {
	// Whether to allow cropping of the face image, default is not allowed.
	//
	// - T: Allow cropping.
	//
	// - F: Do not allow cropping.
	//
	// **Note**
	//
	// If the image you request is not collected from a standard liveness detection SDK, it is recommended to allow cropping of the face image. After enabling this feature, the system will first crop and correct the requested image, then initiate the service request.
	//
	// example:
	//
	// T
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// Portrait side of the ID card image input stream.
	//
	// Choose one between `CertUrl` and `CertFile`.
	//
	// example:
	//
	// 无
	FaceFileObject io.Reader `json:"FaceFile,omitempty" xml:"FaceFile,omitempty"`
	// Portrait side of the ID card image.
	//
	// Accessible HTTP or HTTPS link on the public network.
	//
	// Choose one between `CertUrl` and `CertFile`.
	//
	// example:
	//
	// https://www.aliyun.com/cert.jpeg
	FaceUrl *string `json:"FaceUrl,omitempty" xml:"FaceUrl,omitempty"`
	// ID number:
	//
	// - When `paramType` is `normal`: enter the plaintext ID number.
	//
	// - When `paramType` is `md5`:
	//
	// The first 6 digits (plaintext) + date of birth (ciphertext) + last 4 digits (plaintext).
	//
	// example:
	//
	// ● 明文：429001********8211
	//
	// ● 密文：
	//
	// 42900132fa7bcd874161bea8ec8fd98f39****8211
	IdentifyNum *string `json:"IdentifyNum,omitempty" xml:"IdentifyNum,omitempty"`
	// Encryption method:
	//
	// - normal: plaintext without encryption
	//
	// - md5: MD5 encryption
	//
	// **Important**
	//
	// - All encrypted parameters should be in the form of a 32-character lowercase MD5 string.
	//
	// - The ciphertext generated by different MD5 tools may vary. If the interface works before encryption but not after, try changing the MD5 tool.
	//
	// example:
	//
	// normal
	ParamType *string `json:"ParamType,omitempty" xml:"ParamType,omitempty"`
	// Name:
	//
	// - When `paramType` is `normal`: enter the plaintext name.
	//
	// - When `paramType` is `md5`: the first character of the name (ciphertext) + the rest of the name (plaintext).
	//
	// example:
	//
	// ● 明文：张三
	//
	// ● 密文：
	//
	// 6499fc7409049355527ef6a2ba5706b8三​
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s Id3MetaVerifyAdvanceRequest) String() string {
	return dara.Prettify(s)
}

func (s Id3MetaVerifyAdvanceRequest) GoString() string {
	return s.String()
}

func (s *Id3MetaVerifyAdvanceRequest) GetCrop() *string {
	return s.Crop
}

func (s *Id3MetaVerifyAdvanceRequest) GetFaceFileObject() io.Reader {
	return s.FaceFileObject
}

func (s *Id3MetaVerifyAdvanceRequest) GetFaceUrl() *string {
	return s.FaceUrl
}

func (s *Id3MetaVerifyAdvanceRequest) GetIdentifyNum() *string {
	return s.IdentifyNum
}

func (s *Id3MetaVerifyAdvanceRequest) GetParamType() *string {
	return s.ParamType
}

func (s *Id3MetaVerifyAdvanceRequest) GetUserName() *string {
	return s.UserName
}

func (s *Id3MetaVerifyAdvanceRequest) SetCrop(v string) *Id3MetaVerifyAdvanceRequest {
	s.Crop = &v
	return s
}

func (s *Id3MetaVerifyAdvanceRequest) SetFaceFileObject(v io.Reader) *Id3MetaVerifyAdvanceRequest {
	s.FaceFileObject = v
	return s
}

func (s *Id3MetaVerifyAdvanceRequest) SetFaceUrl(v string) *Id3MetaVerifyAdvanceRequest {
	s.FaceUrl = &v
	return s
}

func (s *Id3MetaVerifyAdvanceRequest) SetIdentifyNum(v string) *Id3MetaVerifyAdvanceRequest {
	s.IdentifyNum = &v
	return s
}

func (s *Id3MetaVerifyAdvanceRequest) SetParamType(v string) *Id3MetaVerifyAdvanceRequest {
	s.ParamType = &v
	return s
}

func (s *Id3MetaVerifyAdvanceRequest) SetUserName(v string) *Id3MetaVerifyAdvanceRequest {
	s.UserName = &v
	return s
}

func (s *Id3MetaVerifyAdvanceRequest) Validate() error {
	return dara.Validate(s)
}
