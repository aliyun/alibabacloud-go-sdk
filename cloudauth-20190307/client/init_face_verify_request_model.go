// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iInitFaceVerifyRequest interface {
	dara.Model
	String() string
	GoString() string
	SetAppQualityCheck(v string) *InitFaceVerifyRequest
	GetAppQualityCheck() *string
	SetAuthId(v string) *InitFaceVerifyRequest
	GetAuthId() *string
	SetBirthday(v string) *InitFaceVerifyRequest
	GetBirthday() *string
	SetCallbackToken(v string) *InitFaceVerifyRequest
	GetCallbackToken() *string
	SetCallbackUrl(v string) *InitFaceVerifyRequest
	GetCallbackUrl() *string
	SetCameraSelection(v string) *InitFaceVerifyRequest
	GetCameraSelection() *string
	SetCertName(v string) *InitFaceVerifyRequest
	GetCertName() *string
	SetCertNo(v string) *InitFaceVerifyRequest
	GetCertNo() *string
	SetCertType(v string) *InitFaceVerifyRequest
	GetCertType() *string
	SetCertifyId(v string) *InitFaceVerifyRequest
	GetCertifyId() *string
	SetCertifyUrlStyle(v string) *InitFaceVerifyRequest
	GetCertifyUrlStyle() *string
	SetCertifyUrlType(v string) *InitFaceVerifyRequest
	GetCertifyUrlType() *string
	SetCrop(v string) *InitFaceVerifyRequest
	GetCrop() *string
	SetEncryptType(v string) *InitFaceVerifyRequest
	GetEncryptType() *string
	SetFaceContrastPicture(v string) *InitFaceVerifyRequest
	GetFaceContrastPicture() *string
	SetFaceContrastPictureUrl(v string) *InitFaceVerifyRequest
	GetFaceContrastPictureUrl() *string
	SetFaceGuardOutput(v string) *InitFaceVerifyRequest
	GetFaceGuardOutput() *string
	SetIp(v string) *InitFaceVerifyRequest
	GetIp() *string
	SetMetaInfo(v string) *InitFaceVerifyRequest
	GetMetaInfo() *string
	SetMobile(v string) *InitFaceVerifyRequest
	GetMobile() *string
	SetMode(v string) *InitFaceVerifyRequest
	GetMode() *string
	SetModel(v string) *InitFaceVerifyRequest
	GetModel() *string
	SetNeedMultiFaceCheck(v string) *InitFaceVerifyRequest
	GetNeedMultiFaceCheck() *string
	SetOssBucketName(v string) *InitFaceVerifyRequest
	GetOssBucketName() *string
	SetOssObjectName(v string) *InitFaceVerifyRequest
	GetOssObjectName() *string
	SetOuterOrderNo(v string) *InitFaceVerifyRequest
	GetOuterOrderNo() *string
	SetProcedurePriority(v string) *InitFaceVerifyRequest
	GetProcedurePriority() *string
	SetProductCode(v string) *InitFaceVerifyRequest
	GetProductCode() *string
	SetRarelyCharacters(v string) *InitFaceVerifyRequest
	GetRarelyCharacters() *string
	SetReadImg(v string) *InitFaceVerifyRequest
	GetReadImg() *string
	SetReturnUrl(v string) *InitFaceVerifyRequest
	GetReturnUrl() *string
	SetSceneId(v int64) *InitFaceVerifyRequest
	GetSceneId() *int64
	SetSuitableType(v string) *InitFaceVerifyRequest
	GetSuitableType() *string
	SetUiCustomUrl(v string) *InitFaceVerifyRequest
	GetUiCustomUrl() *string
	SetUserId(v string) *InitFaceVerifyRequest
	GetUserId() *string
	SetValidityDate(v string) *InitFaceVerifyRequest
	GetValidityDate() *string
	SetVideoEvidence(v string) *InitFaceVerifyRequest
	GetVideoEvidence() *string
	SetVoluntaryCustomizedContent(v string) *InitFaceVerifyRequest
	GetVoluntaryCustomizedContent() *string
}

type InitFaceVerifyRequest struct {
	// Whether the SDK enables strict face quality detection:
	//
	// - **Y**: Enable
	//
	// - **N*	- (default): Disable
	//
	//
	// >
	//
	// > - If this parameter is enabled, the SDK needs to integrate the [strict face quality detection module](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/description-of-sdk-package-clipping?spm=a2c4g.11186623.0.0.1a9d35c6ySFUPW). Enabling strict quality detection may decrease the success rate of user face recognition.
	//
	// > - Only supported in Android SDK version 2.3.24 and above.
	//
	// example:
	//
	// N
	AppQualityCheck *string `json:"AppQualityCheck,omitempty" xml:"AppQualityCheck,omitempty"`
	// User authorization ID, with a maximum length of 64 characters.
	//
	// example:
	//
	// 92d46b9e9e2d703f2897f350d5bd4149
	AuthId *string `json:"AuthId,omitempty" xml:"AuthId,omitempty"`
	// Date of birth on the document.
	//
	// This field is required when the document type **CertType*	- is **PASSPORT*	- and **Mode*	- is **3**.
	//
	// example:
	//
	// 1993-10-10
	Birthday *string `json:"Birthday,omitempty" xml:"Birthday,omitempty"`
	// Security token, generated by you, used for preventing duplication and tampering.
	//
	// If this value is set, the **CallbackToken*	- field will be displayed in the callback address.
	//
	// example:
	//
	// NMjvQanQgplBSaEI0sL86WnQplB
	CallbackToken *string `json:"CallbackToken,omitempty" xml:"CallbackToken,omitempty"`
	// Callback notification address for the authentication result, with the default callback request method being GET. The callback address must start with `https`. After completing the authentication, the platform will call back this address and automatically add the `certifyId` and `passed` fields, where the value of the `passed` field is the subcode, for example: `https://www.aliyun.com?callbackToken=1000004826&certifyId=shaxxxx&passed=200`.
	//
	// <notice>
	//
	// - Callbacks are triggered only when the authentication is completed (including both successful and unsuccessful authentications). If the authentication is abandoned, interrupted abnormally, or not performed, no notification will be sent. It is recommended that you retrieve detailed authentication information through a query interface if needed after receiving the callback notification.
	//
	// - The accessibility of the provided address will be verified before the API call. If the address cannot be accessed over the public network, a 401 error will be returned.
	//
	// - The callback interface must return an HTTP status code of 200; otherwise, it will trigger a retry, with two callbacks within 3 seconds.
	//
	// </notice>
	//
	// example:
	//
	// https://www.aliyun.com
	CallbackUrl *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	// Whether to enable the camera selection feature:
	//
	// - **Y**: Enable
	//
	// - **N*	- (default): Disable
	//
	// > This feature only takes effect in PC integration mode. When enabled, it allows users to select the camera for authentication.
	//
	// example:
	//
	// N
	CameraSelection *string `json:"CameraSelection,omitempty" xml:"CameraSelection,omitempty"`
	// Real name.
	//
	// example:
	//
	// 张三
	CertName *string `json:"CertName,omitempty" xml:"CertName,omitempty"`
	// Document number.
	//
	// example:
	//
	// 330103xxxxxxxxxxxx
	CertNo *string `json:"CertNo,omitempty" xml:"CertNo,omitempty"`
	// Document type.
	//
	// Currently, only IDENTITY_CARD (ID card) is supported.
	//
	// example:
	//
	// IDENTITY_CARD
	CertType *string `json:"CertType,omitempty" xml:"CertType,omitempty"`
	// 	Warning: To be deprecated
	//
	// Previously passed CertifyId for real-person authentication, where the photo taken during authentication is used as the comparison photo.
	//
	// > Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.
	//
	// example:
	//
	// 0bfa7c493f850e5178b9f8613634c9xx
	CertifyId *string `json:"CertifyId,omitempty" xml:"CertifyId,omitempty"`
	// Types of **CertifyUrl*	- returned, including:
	//
	// - **L**: Original long link
	//
	// - **S*	- (default): Short link
	//
	// example:
	//
	// L
	CertifyUrlStyle *string `json:"CertifyUrlStyle,omitempty" xml:"CertifyUrlStyle,omitempty"`
	// Web SDK device type, with values **WEB*	- or **H5**.
	//
	// > Only Web SDK device types are supported.
	//
	// example:
	//
	// WEB
	CertifyUrlType *string `json:"CertifyUrlType,omitempty" xml:"CertifyUrlType,omitempty"`
	// Whether to allow cropping of the face image, with the default being not allowed.
	//
	// - T: Indicates allowing cropping.
	//
	// - F: Indicates not allowing cropping.
	//
	// > If the image you are requesting is not from a standard liveness detection SDK, it is recommended to allow face image cropping. When this feature is enabled, the requested image will first undergo face cropping and alignment, and then the service request will be initiated.
	//
	// example:
	//
	// T
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// Encryption algorithm to be used, currently supporting only the SM2 national encryption algorithm.
	//
	// After enabling encrypted transmission, you need to pass in the encrypted CertName and CertNo. For how to encrypt, please refer to [Parameter Encryption Instructions](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/description-of-parameter-encryption?spm=a2c4g.11186623.0.0.1a9d566eWdqwy8#task-2229332).
	//
	// example:
	//
	// SM2
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// Base64 encoded photo.
	//
	// > Choose one of the following methods to upload the image: FaceContrastPicture, FaceContrastPictureUrl, CertifyId, or OSS.
	//
	// example:
	//
	// /9j/4AAQSkZJRgABAQAASxxxxxxx
	FaceContrastPicture *string `json:"FaceContrastPicture,omitempty" xml:"FaceContrastPicture,omitempty"`
	// OSS photo address, currently only supports authorized OSS photo addresses.
	//
	// > Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.
	//
	// example:
	//
	// https://cn-shanghai-aliyun-cloudauth-xxxxxx.oss-cn-shanghai.aliyuncs.com/verify/xxxxx/xxxxx.jpeg
	FaceContrastPictureUrl *string `json:"FaceContrastPictureUrl,omitempty" xml:"FaceContrastPictureUrl,omitempty"`
	// Device assistant label type, with the value: **DeviceRisk**.
	//
	// >
	//
	// > - Choosing to output the device assistant will incur additional costs. For details, see [Paid Value-Added Services](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/face-guard?spm=a2c4g.11186623.0.0.443e5522rbHsR4).
	//
	// > - If you do not need to output the device assistant label, you can either not pass the parameter or pass an empty value.
	//
	// example:
	//
	// DeviceRisk
	FaceGuardOutput *string `json:"FaceGuardOutput,omitempty" xml:"FaceGuardOutput,omitempty"`
	// User\\"s IP address.
	//
	// example:
	//
	// 114.xxx.xxx.xxx
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// Metainfo environment parameter, which needs to be obtained through the client SDK.
	//
	// example:
	//
	// {"zimVer":"3.0.0","appVersion": "1","bioMetaInfo": "4.1.0:11501568,0","appName": "com.aliyun.antcloudauth","deviceType": "ios","osVersion": "iOS 10.3.2","apdidToken": "","deviceModel": "iPhone9,1"}
	MetaInfo *string `json:"MetaInfo,omitempty" xml:"MetaInfo,omitempty"`
	// User\\"s phone number.
	//
	// example:
	//
	// 130xxxxxxxx
	Mobile *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	// Method to obtain passport NFC verification elements:
	//
	// - **1**: User input, where the end-user manually inputs the document information using the UI interface provided by the Alibaba Cloud SDK.
	//
	// - **3**: External parameter input, where the document information is passed through external parameters.
	//
	// > When decoding the encrypted information from the passport chip using NFC, three elements of the passport need to be obtained, including name, date of birth, and document expiration date.
	//
	// example:
	//
	// 1
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// Liveness detection type, with values:
	//
	// > Only the following liveness detection types are supported; custom actions or combinations are not supported at this time.
	//
	// Note
	//
	// Only the following liveness detection types are supported; custom actions or combinations are not supported at this time.
	//
	// - **LIVENESS*	- (default): Blinking
	//
	// - **PHOTINUS_LIVENESS**: Blinking + Colorful Light
	//
	// - **MULTI_ACTION**: Blinking + Head Shaking (the order of blinking and head shaking is random)
	//
	// - **MOVE_ACTION*	- (recommended): Moving Closer and Farther + Blinking
	//
	// - **MOVE_PHOTINUS**: Moving Closer and Farther + Colorful Light
	//
	// >
	//
	// >- The **default liveness detection type*	- is supported in the following versions:
	//
	// >   - Android SDK 1.2.6 and above
	//
	// >   - iOS SDK 1.2.4 and above
	//
	// >   - Harmony SDK 1.0.0 and above
	//
	// >- Other types are supported in the latest SDK versions for Android/iOS/Harmony. It is recommended to integrate the latest version.
	//
	// example:
	//
	// MOVE_ACTION
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
	// Whether to intercept when multiple faces are detected, with the following values:
	//
	// - **Y**: Intercept, and the client prompts the user to re-scan their face.
	//
	// - **N*	- (default): Do not intercept, and send the largest face in the scanned image to the server for security checks.
	//
	// example:
	//
	// Y
	NeedMultiFaceCheck *string `json:"NeedMultiFaceCheck,omitempty" xml:"NeedMultiFaceCheck,omitempty"`
	// Authorized OSS bucket name.
	//
	// > Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.
	//
	// example:
	//
	// cn-shanghai-aliyun-cloudauth-xxxxx
	OssBucketName *string `json:"OssBucketName,omitempty" xml:"OssBucketName,omitempty"`
	// Authorized OSS object name.
	//
	// > Among the four image input methods (FaceContrastPicture, FaceContrastPictureUrl, CertifyId, OSS), choose one to input.
	//
	// example:
	//
	// verify/xxxxx/xxxxxx.jpeg
	OssObjectName *string `json:"OssObjectName,omitempty" xml:"OssObjectName,omitempty"`
	// Unique identifier for the merchant\\"s request.
	//
	// The value is a 32-character alphanumeric combination. The first few characters are a custom abbreviation defined by the merchant, followed by a period, and the latter part can be a random or incremental sequence.
	//
	// example:
	//
	// e0c34a77f5ac40a5aa5e6ed20c353888
	OuterOrderNo *string `json:"OuterOrderNo,omitempty" xml:"OuterOrderNo,omitempty"`
	// Degradation configuration for mobile H5 authentication when WebRTC or Webassembly is incompatible.
	//
	// - **keep**: Does not support degradation, returns directly.
	//
	// - **url*	- (default): Supports degradation, returns an authentication URL. Users can use this URL to open or switch browsers for authentication.
	//
	// - **video**: Supports degradation, uses the system camera to record a 3~5 second blinking video for authentication.
	//
	//
	// >
	//
	// > When the degradation mode is Video, the following functions will be disabled, and the product security will decrease. It is recommended to configure it only for secure scenarios.
	//
	// > - Liveness detection type settings will not take effect.
	//
	// > - The VideoEvidence function is not supported.
	//
	// example:
	//
	// url
	ProcedurePriority *string `json:"ProcedurePriority,omitempty" xml:"ProcedurePriority,omitempty"`
	// Fixed value. The parameter value differs based on the product solution:
	//
	// - APP Authentication Scheme: Fixed value is ID_PRO
	//
	// - Live Face Verification Scheme: Fixed value is PV_FV
	//
	// - Liveness Detection Scheme: Fixed value is LR_FR
	//
	// example:
	//
	// ID_PRO
	ProductCode *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	// Whether to enable rare character mode:
	//
	// - **Y**: Enable. A message input box will pop up before the user authenticates, requiring the input of the rare character name and ID number. The user must agree to the terms before starting the authentication process.
	//
	// - **N**: Not enabled (default)
	//
	// example:
	//
	// Y
	RarelyCharacters *string `json:"RarelyCharacters,omitempty" xml:"RarelyCharacters,omitempty"`
	// Whether to read the document photo:
	//
	// - **Y**: Read
	//
	// - **N**: Do not read
	//
	// > If the document face photo is needed in subsequent authentication steps, it is recommended to set this parameter to Y.
	//
	// example:
	//
	// Y
	ReadImg *string `json:"ReadImg,omitempty" xml:"ReadImg,omitempty"`
	// Target URL for the merchant\\"s business page to redirect to.
	//
	// example:
	//
	// www.aliyun.com
	ReturnUrl *string `json:"ReturnUrl,omitempty" xml:"ReturnUrl,omitempty"`
	// Authentication Scene ID.
	//
	// example:
	//
	// 1000000006
	SceneId *int64 `json:"SceneId,omitempty" xml:"SceneId,omitempty"`
	// Aging-friendly configuration parameters that take effect for each authentication request. You can choose different parameters based on your app\\"s business attributes, customer distribution, operational characteristics, etc., for each authentication request. The options include the following, with the default being 0.
	//
	// - **0**: Not enabled, indicating that the current authentication request does not enable aging-friendly mode.
	//
	// - **1**: Enabled, indicating that the current authentication request enables aging-friendly mode.
	//
	// - **2**: User choice.
	//
	//
	// Supports end-users in choosing the authentication mode. The product guide page provides two authentication entry points: \\"Enable Authentication\\" and \\"Elderly Authentication Mode\\". When the user selects \\"Elderly Authentication Mode\\", the system enters aging-friendly mode.
	//
	// >
	//
	// > - Aging-friendly parameters are only effective when the liveness detection type **Model*	- is set to **LIVENESS*	- or **MULTI_ACTION**.
	//
	// example:
	//
	// 0
	SuitableType *string `json:"SuitableType,omitempty" xml:"SuitableType,omitempty"`
	// UI configuration file URL.
	//
	// You can view the complete configuration in the [Web SDK UI Customization Description](https://help.aliyun.com/zh/id-verification/financial-grade-id-verification/web-sdk-ui-custom-configuration-description?spm=a2c4g.11186623.0.0.4c683f5c8K3I9p).
	//
	// example:
	//
	// www.aliyundoc.com
	UiCustomUrl *string `json:"UiCustomUrl,omitempty" xml:"UiCustomUrl,omitempty"`
	// Custom user ID for the customer\\"s business, please ensure it is unique.
	//
	// example:
	//
	// 123456789
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// Document expiration date.
	//
	// This field is required when the document type **CertType*	- is **PASSPORT*	- and **Mode*	- is **3**.
	//
	// example:
	//
	// 2039-06-10
	ValidityDate *string `json:"ValidityDate,omitempty" xml:"ValidityDate,omitempty"`
	// Whether to enable video evidence:
	//
	// - **true**: Enable
	//
	// - **false*	- (default): Disable
	//
	// > Due to the large size of video files, when the network is unstable, the system will discard the video file to prioritize the transmission of necessary images for authentication. It is recommended that your business set a weak dependency on the video.
	//
	// example:
	//
	// false
	VideoEvidence *string `json:"VideoEvidence,omitempty" xml:"VideoEvidence,omitempty"`
	// Customized content. Required when personalized settings are enabled. The format is a JSON String of a String List.
	//
	// - For the follow-reading scenario: It should not exceed 60 Chinese characters (excluding punctuation), and the List contains only one element.
	//
	// - For the Q&A scenario: Up to 3 questions can be set, with each question not exceeding 30 Chinese characters, and each question being an element in the List.
	//
	// example:
	//
	// ["本人王先生同意***协议。"]
	VoluntaryCustomizedContent *string `json:"VoluntaryCustomizedContent,omitempty" xml:"VoluntaryCustomizedContent,omitempty"`
}

func (s InitFaceVerifyRequest) String() string {
	return dara.Prettify(s)
}

func (s InitFaceVerifyRequest) GoString() string {
	return s.String()
}

func (s *InitFaceVerifyRequest) GetAppQualityCheck() *string {
	return s.AppQualityCheck
}

func (s *InitFaceVerifyRequest) GetAuthId() *string {
	return s.AuthId
}

func (s *InitFaceVerifyRequest) GetBirthday() *string {
	return s.Birthday
}

func (s *InitFaceVerifyRequest) GetCallbackToken() *string {
	return s.CallbackToken
}

func (s *InitFaceVerifyRequest) GetCallbackUrl() *string {
	return s.CallbackUrl
}

func (s *InitFaceVerifyRequest) GetCameraSelection() *string {
	return s.CameraSelection
}

func (s *InitFaceVerifyRequest) GetCertName() *string {
	return s.CertName
}

func (s *InitFaceVerifyRequest) GetCertNo() *string {
	return s.CertNo
}

func (s *InitFaceVerifyRequest) GetCertType() *string {
	return s.CertType
}

func (s *InitFaceVerifyRequest) GetCertifyId() *string {
	return s.CertifyId
}

func (s *InitFaceVerifyRequest) GetCertifyUrlStyle() *string {
	return s.CertifyUrlStyle
}

func (s *InitFaceVerifyRequest) GetCertifyUrlType() *string {
	return s.CertifyUrlType
}

func (s *InitFaceVerifyRequest) GetCrop() *string {
	return s.Crop
}

func (s *InitFaceVerifyRequest) GetEncryptType() *string {
	return s.EncryptType
}

func (s *InitFaceVerifyRequest) GetFaceContrastPicture() *string {
	return s.FaceContrastPicture
}

func (s *InitFaceVerifyRequest) GetFaceContrastPictureUrl() *string {
	return s.FaceContrastPictureUrl
}

func (s *InitFaceVerifyRequest) GetFaceGuardOutput() *string {
	return s.FaceGuardOutput
}

func (s *InitFaceVerifyRequest) GetIp() *string {
	return s.Ip
}

func (s *InitFaceVerifyRequest) GetMetaInfo() *string {
	return s.MetaInfo
}

func (s *InitFaceVerifyRequest) GetMobile() *string {
	return s.Mobile
}

func (s *InitFaceVerifyRequest) GetMode() *string {
	return s.Mode
}

func (s *InitFaceVerifyRequest) GetModel() *string {
	return s.Model
}

func (s *InitFaceVerifyRequest) GetNeedMultiFaceCheck() *string {
	return s.NeedMultiFaceCheck
}

func (s *InitFaceVerifyRequest) GetOssBucketName() *string {
	return s.OssBucketName
}

func (s *InitFaceVerifyRequest) GetOssObjectName() *string {
	return s.OssObjectName
}

func (s *InitFaceVerifyRequest) GetOuterOrderNo() *string {
	return s.OuterOrderNo
}

func (s *InitFaceVerifyRequest) GetProcedurePriority() *string {
	return s.ProcedurePriority
}

func (s *InitFaceVerifyRequest) GetProductCode() *string {
	return s.ProductCode
}

func (s *InitFaceVerifyRequest) GetRarelyCharacters() *string {
	return s.RarelyCharacters
}

func (s *InitFaceVerifyRequest) GetReadImg() *string {
	return s.ReadImg
}

func (s *InitFaceVerifyRequest) GetReturnUrl() *string {
	return s.ReturnUrl
}

func (s *InitFaceVerifyRequest) GetSceneId() *int64 {
	return s.SceneId
}

func (s *InitFaceVerifyRequest) GetSuitableType() *string {
	return s.SuitableType
}

func (s *InitFaceVerifyRequest) GetUiCustomUrl() *string {
	return s.UiCustomUrl
}

func (s *InitFaceVerifyRequest) GetUserId() *string {
	return s.UserId
}

func (s *InitFaceVerifyRequest) GetValidityDate() *string {
	return s.ValidityDate
}

func (s *InitFaceVerifyRequest) GetVideoEvidence() *string {
	return s.VideoEvidence
}

func (s *InitFaceVerifyRequest) GetVoluntaryCustomizedContent() *string {
	return s.VoluntaryCustomizedContent
}

func (s *InitFaceVerifyRequest) SetAppQualityCheck(v string) *InitFaceVerifyRequest {
	s.AppQualityCheck = &v
	return s
}

func (s *InitFaceVerifyRequest) SetAuthId(v string) *InitFaceVerifyRequest {
	s.AuthId = &v
	return s
}

func (s *InitFaceVerifyRequest) SetBirthday(v string) *InitFaceVerifyRequest {
	s.Birthday = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCallbackToken(v string) *InitFaceVerifyRequest {
	s.CallbackToken = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCallbackUrl(v string) *InitFaceVerifyRequest {
	s.CallbackUrl = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCameraSelection(v string) *InitFaceVerifyRequest {
	s.CameraSelection = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCertName(v string) *InitFaceVerifyRequest {
	s.CertName = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCertNo(v string) *InitFaceVerifyRequest {
	s.CertNo = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCertType(v string) *InitFaceVerifyRequest {
	s.CertType = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCertifyId(v string) *InitFaceVerifyRequest {
	s.CertifyId = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCertifyUrlStyle(v string) *InitFaceVerifyRequest {
	s.CertifyUrlStyle = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCertifyUrlType(v string) *InitFaceVerifyRequest {
	s.CertifyUrlType = &v
	return s
}

func (s *InitFaceVerifyRequest) SetCrop(v string) *InitFaceVerifyRequest {
	s.Crop = &v
	return s
}

func (s *InitFaceVerifyRequest) SetEncryptType(v string) *InitFaceVerifyRequest {
	s.EncryptType = &v
	return s
}

func (s *InitFaceVerifyRequest) SetFaceContrastPicture(v string) *InitFaceVerifyRequest {
	s.FaceContrastPicture = &v
	return s
}

func (s *InitFaceVerifyRequest) SetFaceContrastPictureUrl(v string) *InitFaceVerifyRequest {
	s.FaceContrastPictureUrl = &v
	return s
}

func (s *InitFaceVerifyRequest) SetFaceGuardOutput(v string) *InitFaceVerifyRequest {
	s.FaceGuardOutput = &v
	return s
}

func (s *InitFaceVerifyRequest) SetIp(v string) *InitFaceVerifyRequest {
	s.Ip = &v
	return s
}

func (s *InitFaceVerifyRequest) SetMetaInfo(v string) *InitFaceVerifyRequest {
	s.MetaInfo = &v
	return s
}

func (s *InitFaceVerifyRequest) SetMobile(v string) *InitFaceVerifyRequest {
	s.Mobile = &v
	return s
}

func (s *InitFaceVerifyRequest) SetMode(v string) *InitFaceVerifyRequest {
	s.Mode = &v
	return s
}

func (s *InitFaceVerifyRequest) SetModel(v string) *InitFaceVerifyRequest {
	s.Model = &v
	return s
}

func (s *InitFaceVerifyRequest) SetNeedMultiFaceCheck(v string) *InitFaceVerifyRequest {
	s.NeedMultiFaceCheck = &v
	return s
}

func (s *InitFaceVerifyRequest) SetOssBucketName(v string) *InitFaceVerifyRequest {
	s.OssBucketName = &v
	return s
}

func (s *InitFaceVerifyRequest) SetOssObjectName(v string) *InitFaceVerifyRequest {
	s.OssObjectName = &v
	return s
}

func (s *InitFaceVerifyRequest) SetOuterOrderNo(v string) *InitFaceVerifyRequest {
	s.OuterOrderNo = &v
	return s
}

func (s *InitFaceVerifyRequest) SetProcedurePriority(v string) *InitFaceVerifyRequest {
	s.ProcedurePriority = &v
	return s
}

func (s *InitFaceVerifyRequest) SetProductCode(v string) *InitFaceVerifyRequest {
	s.ProductCode = &v
	return s
}

func (s *InitFaceVerifyRequest) SetRarelyCharacters(v string) *InitFaceVerifyRequest {
	s.RarelyCharacters = &v
	return s
}

func (s *InitFaceVerifyRequest) SetReadImg(v string) *InitFaceVerifyRequest {
	s.ReadImg = &v
	return s
}

func (s *InitFaceVerifyRequest) SetReturnUrl(v string) *InitFaceVerifyRequest {
	s.ReturnUrl = &v
	return s
}

func (s *InitFaceVerifyRequest) SetSceneId(v int64) *InitFaceVerifyRequest {
	s.SceneId = &v
	return s
}

func (s *InitFaceVerifyRequest) SetSuitableType(v string) *InitFaceVerifyRequest {
	s.SuitableType = &v
	return s
}

func (s *InitFaceVerifyRequest) SetUiCustomUrl(v string) *InitFaceVerifyRequest {
	s.UiCustomUrl = &v
	return s
}

func (s *InitFaceVerifyRequest) SetUserId(v string) *InitFaceVerifyRequest {
	s.UserId = &v
	return s
}

func (s *InitFaceVerifyRequest) SetValidityDate(v string) *InitFaceVerifyRequest {
	s.ValidityDate = &v
	return s
}

func (s *InitFaceVerifyRequest) SetVideoEvidence(v string) *InitFaceVerifyRequest {
	s.VideoEvidence = &v
	return s
}

func (s *InitFaceVerifyRequest) SetVoluntaryCustomizedContent(v string) *InitFaceVerifyRequest {
	s.VoluntaryCustomizedContent = &v
	return s
}

func (s *InitFaceVerifyRequest) Validate() error {
	return dara.Validate(s)
}
