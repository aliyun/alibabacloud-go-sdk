// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type DentryAppPropertiesValue struct {
	// example:
	//
	// dentry_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// dentry_value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DentryAppPropertiesValue) String() string {
	return tea.Prettify(s)
}

func (s DentryAppPropertiesValue) GoString() string {
	return s.String()
}

func (s *DentryAppPropertiesValue) SetName(v string) *DentryAppPropertiesValue {
	s.Name = &v
	return s
}

func (s *DentryAppPropertiesValue) SetValue(v string) *DentryAppPropertiesValue {
	s.Value = &v
	return s
}

func (s *DentryAppPropertiesValue) SetVisibility(v string) *DentryAppPropertiesValue {
	s.Visibility = &v
	return s
}

type DentriesAppPropertiesValue struct {
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// PRIVATE
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s DentriesAppPropertiesValue) String() string {
	return tea.Prettify(s)
}

func (s DentriesAppPropertiesValue) GoString() string {
	return s.String()
}

func (s *DentriesAppPropertiesValue) SetName(v string) *DentriesAppPropertiesValue {
	s.Name = &v
	return s
}

func (s *DentriesAppPropertiesValue) SetValue(v string) *DentriesAppPropertiesValue {
	s.Value = &v
	return s
}

func (s *DentriesAppPropertiesValue) SetVisibility(v string) *DentriesAppPropertiesValue {
	s.Visibility = &v
	return s
}

type AddAttendeeHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *AddAttendeeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddAttendeeHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeHeaders) GoString() string {
	return s.String()
}

func (s *AddAttendeeHeaders) SetCommonHeaders(v map[string]*string) *AddAttendeeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddAttendeeHeaders) SetAccountContext(v *AddAttendeeHeadersAccountContext) *AddAttendeeHeaders {
	s.AccountContext = v
	return s
}

type AddAttendeeHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 123456
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddAttendeeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddAttendeeHeadersAccountContext) SetAccountId(v string) *AddAttendeeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddAttendeeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddAttendeeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddAttendeeShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddAttendeeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddAttendeeShrinkHeaders) SetAccountContextShrink(v string) *AddAttendeeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddAttendeeRequest struct {
	// This parameter is required.
	AttendeesToAdd []*AddAttendeeRequestAttendeesToAdd `json:"AttendeesToAdd,omitempty" xml:"AttendeesToAdd,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cnNTbW1YbU9sL2p6aFJZdEgvdlQrQT08
	EventId          *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	ChatNotification *bool   `json:"chatNotification,omitempty" xml:"chatNotification,omitempty"`
	PushNotification *bool   `json:"pushNotification,omitempty" xml:"pushNotification,omitempty"`
}

func (s AddAttendeeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeRequest) GoString() string {
	return s.String()
}

func (s *AddAttendeeRequest) SetAttendeesToAdd(v []*AddAttendeeRequestAttendeesToAdd) *AddAttendeeRequest {
	s.AttendeesToAdd = v
	return s
}

func (s *AddAttendeeRequest) SetCalendarId(v string) *AddAttendeeRequest {
	s.CalendarId = &v
	return s
}

func (s *AddAttendeeRequest) SetEventId(v string) *AddAttendeeRequest {
	s.EventId = &v
	return s
}

func (s *AddAttendeeRequest) SetChatNotification(v bool) *AddAttendeeRequest {
	s.ChatNotification = &v
	return s
}

func (s *AddAttendeeRequest) SetPushNotification(v bool) *AddAttendeeRequest {
	s.PushNotification = &v
	return s
}

type AddAttendeeRequestAttendeesToAdd struct {
	// example:
	//
	// 123456
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsOptional *bool `json:"isOptional,omitempty" xml:"isOptional,omitempty"`
}

func (s AddAttendeeRequestAttendeesToAdd) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeRequestAttendeesToAdd) GoString() string {
	return s.String()
}

func (s *AddAttendeeRequestAttendeesToAdd) SetId(v string) *AddAttendeeRequestAttendeesToAdd {
	s.Id = &v
	return s
}

func (s *AddAttendeeRequestAttendeesToAdd) SetIsOptional(v bool) *AddAttendeeRequestAttendeesToAdd {
	s.IsOptional = &v
	return s
}

type AddAttendeeShrinkRequest struct {
	// This parameter is required.
	AttendeesToAddShrink *string `json:"AttendeesToAdd,omitempty" xml:"AttendeesToAdd,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cnNTbW1YbU9sL2p6aFJZdEgvdlQrQT08
	EventId          *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	ChatNotification *bool   `json:"chatNotification,omitempty" xml:"chatNotification,omitempty"`
	PushNotification *bool   `json:"pushNotification,omitempty" xml:"pushNotification,omitempty"`
}

func (s AddAttendeeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddAttendeeShrinkRequest) SetAttendeesToAddShrink(v string) *AddAttendeeShrinkRequest {
	s.AttendeesToAddShrink = &v
	return s
}

func (s *AddAttendeeShrinkRequest) SetCalendarId(v string) *AddAttendeeShrinkRequest {
	s.CalendarId = &v
	return s
}

func (s *AddAttendeeShrinkRequest) SetEventId(v string) *AddAttendeeShrinkRequest {
	s.EventId = &v
	return s
}

func (s *AddAttendeeShrinkRequest) SetChatNotification(v bool) *AddAttendeeShrinkRequest {
	s.ChatNotification = &v
	return s
}

func (s *AddAttendeeShrinkRequest) SetPushNotification(v bool) *AddAttendeeShrinkRequest {
	s.PushNotification = &v
	return s
}

type AddAttendeeResponseBody struct {
	Content *AddAttendeeResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// example:
	//
	// 200
	ErrorCode *string                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorCtx  map[string]interface{} `json:"ErrorCtx,omitempty" xml:"ErrorCtx,omitempty"`
	// example:
	//
	// error check permissions
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// RequestId
	//
	// example:
	//
	// 9BCC17ED-0187-54A0-BD31-56FDBE865447
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddAttendeeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeResponseBody) GoString() string {
	return s.String()
}

func (s *AddAttendeeResponseBody) SetContent(v *AddAttendeeResponseBodyContent) *AddAttendeeResponseBody {
	s.Content = v
	return s
}

func (s *AddAttendeeResponseBody) SetErrorCode(v string) *AddAttendeeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddAttendeeResponseBody) SetErrorCtx(v map[string]interface{}) *AddAttendeeResponseBody {
	s.ErrorCtx = v
	return s
}

func (s *AddAttendeeResponseBody) SetErrorMsg(v string) *AddAttendeeResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *AddAttendeeResponseBody) SetHttpStatusCode(v int32) *AddAttendeeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddAttendeeResponseBody) SetRequestId(v string) *AddAttendeeResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAttendeeResponseBody) SetSuccess(v bool) *AddAttendeeResponseBody {
	s.Success = &v
	return s
}

type AddAttendeeResponseBodyContent struct {
	// example:
	//
	// []
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s AddAttendeeResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeResponseBodyContent) GoString() string {
	return s.String()
}

func (s *AddAttendeeResponseBodyContent) SetData(v interface{}) *AddAttendeeResponseBodyContent {
	s.Data = v
	return s
}

type AddAttendeeResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAttendeeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAttendeeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAttendeeResponse) GoString() string {
	return s.String()
}

func (s *AddAttendeeResponse) SetHeaders(v map[string]*string) *AddAttendeeResponse {
	s.Headers = v
	return s
}

func (s *AddAttendeeResponse) SetStatusCode(v int32) *AddAttendeeResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAttendeeResponse) SetBody(v *AddAttendeeResponseBody) *AddAttendeeResponse {
	s.Body = v
	return s
}

type AddDriveSpaceHeaders struct {
	CommonHeaders map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	// This parameter is required.
	AccountContext *AddDriveSpaceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddDriveSpaceHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceHeaders) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceHeaders) SetCommonHeaders(v map[string]*string) *AddDriveSpaceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddDriveSpaceHeaders) SetAccountContext(v *AddDriveSpaceHeadersAccountContext) *AddDriveSpaceHeaders {
	s.AccountContext = v
	return s
}

type AddDriveSpaceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddDriveSpaceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceHeadersAccountContext) SetAccountId(v string) *AddDriveSpaceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddDriveSpaceShrinkHeaders struct {
	CommonHeaders map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	// This parameter is required.
	AccountContextShrink *string `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddDriveSpaceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddDriveSpaceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddDriveSpaceShrinkHeaders) SetAccountContextShrink(v string) *AddDriveSpaceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddDriveSpaceRequest struct {
	// This parameter is required.
	Name          *string                            `json:"Name,omitempty" xml:"Name,omitempty"`
	TenantContext *AddDriveSpaceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s AddDriveSpaceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceRequest) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceRequest) SetName(v string) *AddDriveSpaceRequest {
	s.Name = &v
	return s
}

func (s *AddDriveSpaceRequest) SetTenantContext(v *AddDriveSpaceRequestTenantContext) *AddDriveSpaceRequest {
	s.TenantContext = v
	return s
}

type AddDriveSpaceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s AddDriveSpaceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceRequestTenantContext) SetTenantId(v string) *AddDriveSpaceRequestTenantContext {
	s.TenantId = &v
	return s
}

type AddDriveSpaceShrinkRequest struct {
	// This parameter is required.
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s AddDriveSpaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceShrinkRequest) SetName(v string) *AddDriveSpaceShrinkRequest {
	s.Name = &v
	return s
}

func (s *AddDriveSpaceShrinkRequest) SetTenantContextShrink(v string) *AddDriveSpaceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type AddDriveSpaceResponseBody struct {
	CreateTime     *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	ModifyTime     *string `json:"modifyTime,omitempty" xml:"modifyTime,omitempty"`
	PermissionMode *string `json:"permissionMode,omitempty" xml:"permissionMode,omitempty"`
	Quota          *int64  `json:"quota,omitempty" xml:"quota,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	SpaceId   *string `json:"spaceId,omitempty" xml:"spaceId,omitempty"`
	SpaceName *string `json:"spaceName,omitempty" xml:"spaceName,omitempty"`
	SpaceType *string `json:"spaceType,omitempty" xml:"spaceType,omitempty"`
	UsedQuota *int64  `json:"usedQuota,omitempty" xml:"usedQuota,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s AddDriveSpaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceResponseBody) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceResponseBody) SetCreateTime(v string) *AddDriveSpaceResponseBody {
	s.CreateTime = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetModifyTime(v string) *AddDriveSpaceResponseBody {
	s.ModifyTime = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetPermissionMode(v string) *AddDriveSpaceResponseBody {
	s.PermissionMode = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetQuota(v int64) *AddDriveSpaceResponseBody {
	s.Quota = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetRequestId(v string) *AddDriveSpaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetSpaceId(v string) *AddDriveSpaceResponseBody {
	s.SpaceId = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetSpaceName(v string) *AddDriveSpaceResponseBody {
	s.SpaceName = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetSpaceType(v string) *AddDriveSpaceResponseBody {
	s.SpaceType = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetUsedQuota(v int64) *AddDriveSpaceResponseBody {
	s.UsedQuota = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetVendorRequestId(v string) *AddDriveSpaceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *AddDriveSpaceResponseBody) SetVendorType(v string) *AddDriveSpaceResponseBody {
	s.VendorType = &v
	return s
}

type AddDriveSpaceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddDriveSpaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddDriveSpaceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddDriveSpaceResponse) GoString() string {
	return s.String()
}

func (s *AddDriveSpaceResponse) SetHeaders(v map[string]*string) *AddDriveSpaceResponse {
	s.Headers = v
	return s
}

func (s *AddDriveSpaceResponse) SetStatusCode(v int32) *AddDriveSpaceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddDriveSpaceResponse) SetBody(v *AddDriveSpaceResponseBody) *AddDriveSpaceResponse {
	s.Body = v
	return s
}

type AddMeetingRoomsHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *AddMeetingRoomsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddMeetingRoomsHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsHeaders) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsHeaders) SetCommonHeaders(v map[string]*string) *AddMeetingRoomsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddMeetingRoomsHeaders) SetAccountContext(v *AddMeetingRoomsHeadersAccountContext) *AddMeetingRoomsHeaders {
	s.AccountContext = v
	return s
}

type AddMeetingRoomsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddMeetingRoomsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsHeadersAccountContext) SetAccountId(v string) *AddMeetingRoomsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddMeetingRoomsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddMeetingRoomsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddMeetingRoomsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddMeetingRoomsShrinkHeaders) SetAccountContextShrink(v string) *AddMeetingRoomsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddMeetingRoomsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// U5Kxxxxx
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// This parameter is required.
	MeetingRoomsToAdd []*AddMeetingRoomsRequestMeetingRoomsToAdd `json:"MeetingRoomsToAdd,omitempty" xml:"MeetingRoomsToAdd,omitempty" type:"Repeated"`
}

func (s AddMeetingRoomsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsRequest) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsRequest) SetCalendarId(v string) *AddMeetingRoomsRequest {
	s.CalendarId = &v
	return s
}

func (s *AddMeetingRoomsRequest) SetEventId(v string) *AddMeetingRoomsRequest {
	s.EventId = &v
	return s
}

func (s *AddMeetingRoomsRequest) SetMeetingRoomsToAdd(v []*AddMeetingRoomsRequestMeetingRoomsToAdd) *AddMeetingRoomsRequest {
	s.MeetingRoomsToAdd = v
	return s
}

type AddMeetingRoomsRequestMeetingRoomsToAdd struct {
	// example:
	//
	// 4002fxxxxx
	RoomId *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s AddMeetingRoomsRequestMeetingRoomsToAdd) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsRequestMeetingRoomsToAdd) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsRequestMeetingRoomsToAdd) SetRoomId(v string) *AddMeetingRoomsRequestMeetingRoomsToAdd {
	s.RoomId = &v
	return s
}

type AddMeetingRoomsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// U5Kxxxxx
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// This parameter is required.
	MeetingRoomsToAddShrink *string `json:"MeetingRoomsToAdd,omitempty" xml:"MeetingRoomsToAdd,omitempty"`
}

func (s AddMeetingRoomsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsShrinkRequest) SetCalendarId(v string) *AddMeetingRoomsShrinkRequest {
	s.CalendarId = &v
	return s
}

func (s *AddMeetingRoomsShrinkRequest) SetEventId(v string) *AddMeetingRoomsShrinkRequest {
	s.EventId = &v
	return s
}

func (s *AddMeetingRoomsShrinkRequest) SetMeetingRoomsToAddShrink(v string) *AddMeetingRoomsShrinkRequest {
	s.MeetingRoomsToAddShrink = &v
	return s
}

type AddMeetingRoomsResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s AddMeetingRoomsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsResponseBody) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsResponseBody) SetRequestId(v string) *AddMeetingRoomsResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMeetingRoomsResponseBody) SetResult(v bool) *AddMeetingRoomsResponseBody {
	s.Result = &v
	return s
}

type AddMeetingRoomsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMeetingRoomsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMeetingRoomsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMeetingRoomsResponse) GoString() string {
	return s.String()
}

func (s *AddMeetingRoomsResponse) SetHeaders(v map[string]*string) *AddMeetingRoomsResponse {
	s.Headers = v
	return s
}

func (s *AddMeetingRoomsResponse) SetStatusCode(v int32) *AddMeetingRoomsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMeetingRoomsResponse) SetBody(v *AddMeetingRoomsResponseBody) *AddMeetingRoomsResponse {
	s.Body = v
	return s
}

type AddRecordPermissionHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *AddRecordPermissionHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddRecordPermissionHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionHeaders) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionHeaders) SetCommonHeaders(v map[string]*string) *AddRecordPermissionHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddRecordPermissionHeaders) SetAccountContext(v *AddRecordPermissionHeadersAccountContext) *AddRecordPermissionHeaders {
	s.AccountContext = v
	return s
}

type AddRecordPermissionHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddRecordPermissionHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionHeadersAccountContext) SetAccountId(v string) *AddRecordPermissionHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddRecordPermissionShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddRecordPermissionShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddRecordPermissionShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddRecordPermissionShrinkHeaders) SetAccountContextShrink(v string) *AddRecordPermissionShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddRecordPermissionRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// minutes
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1dddwrqrq
	ConferenceId  *string                                  `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	TenantContext *AddRecordPermissionRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AddRecordPermissionRequest) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionRequest) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionRequest) SetBizType(v string) *AddRecordPermissionRequest {
	s.BizType = &v
	return s
}

func (s *AddRecordPermissionRequest) SetConferenceId(v string) *AddRecordPermissionRequest {
	s.ConferenceId = &v
	return s
}

func (s *AddRecordPermissionRequest) SetTenantContext(v *AddRecordPermissionRequestTenantContext) *AddRecordPermissionRequest {
	s.TenantContext = v
	return s
}

func (s *AddRecordPermissionRequest) SetUserId(v string) *AddRecordPermissionRequest {
	s.UserId = &v
	return s
}

type AddRecordPermissionRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s AddRecordPermissionRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionRequestTenantContext) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionRequestTenantContext) SetTenantId(v string) *AddRecordPermissionRequestTenantContext {
	s.TenantId = &v
	return s
}

type AddRecordPermissionShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// minutes
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1dddwrqrq
	ConferenceId        *string `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s AddRecordPermissionShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionShrinkRequest) SetBizType(v string) *AddRecordPermissionShrinkRequest {
	s.BizType = &v
	return s
}

func (s *AddRecordPermissionShrinkRequest) SetConferenceId(v string) *AddRecordPermissionShrinkRequest {
	s.ConferenceId = &v
	return s
}

func (s *AddRecordPermissionShrinkRequest) SetTenantContextShrink(v string) *AddRecordPermissionShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *AddRecordPermissionShrinkRequest) SetUserId(v string) *AddRecordPermissionShrinkRequest {
	s.UserId = &v
	return s
}

type AddRecordPermissionResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s AddRecordPermissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionResponseBody) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionResponseBody) SetCode(v string) *AddRecordPermissionResponseBody {
	s.Code = &v
	return s
}

func (s *AddRecordPermissionResponseBody) SetRequestId(v string) *AddRecordPermissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddRecordPermissionResponseBody) SetVendorRequestId(v string) *AddRecordPermissionResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *AddRecordPermissionResponseBody) SetVendorType(v string) *AddRecordPermissionResponseBody {
	s.VendorType = &v
	return s
}

type AddRecordPermissionResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddRecordPermissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddRecordPermissionResponse) String() string {
	return tea.Prettify(s)
}

func (s AddRecordPermissionResponse) GoString() string {
	return s.String()
}

func (s *AddRecordPermissionResponse) SetHeaders(v map[string]*string) *AddRecordPermissionResponse {
	s.Headers = v
	return s
}

func (s *AddRecordPermissionResponse) SetStatusCode(v int32) *AddRecordPermissionResponse {
	s.StatusCode = &v
	return s
}

func (s *AddRecordPermissionResponse) SetBody(v *AddRecordPermissionResponseBody) *AddRecordPermissionResponse {
	s.Body = v
	return s
}

type AddScenegroupMemberHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *AddScenegroupMemberHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddScenegroupMemberHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddScenegroupMemberHeaders) GoString() string {
	return s.String()
}

func (s *AddScenegroupMemberHeaders) SetCommonHeaders(v map[string]*string) *AddScenegroupMemberHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddScenegroupMemberHeaders) SetAccountContext(v *AddScenegroupMemberHeadersAccountContext) *AddScenegroupMemberHeaders {
	s.AccountContext = v
	return s
}

type AddScenegroupMemberHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddScenegroupMemberHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddScenegroupMemberHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddScenegroupMemberHeadersAccountContext) SetAccountId(v string) *AddScenegroupMemberHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddScenegroupMemberShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddScenegroupMemberShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddScenegroupMemberShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddScenegroupMemberShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddScenegroupMemberShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddScenegroupMemberShrinkHeaders) SetAccountContextShrink(v string) *AddScenegroupMemberShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddScenegroupMemberRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cidt*****Xa4K10w==
	OpenConversationId *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123xx,224xx
	UserIds *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s AddScenegroupMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s AddScenegroupMemberRequest) GoString() string {
	return s.String()
}

func (s *AddScenegroupMemberRequest) SetOpenConversationId(v string) *AddScenegroupMemberRequest {
	s.OpenConversationId = &v
	return s
}

func (s *AddScenegroupMemberRequest) SetUserIds(v string) *AddScenegroupMemberRequest {
	s.UserIds = &v
	return s
}

type AddScenegroupMemberResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s AddScenegroupMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddScenegroupMemberResponseBody) GoString() string {
	return s.String()
}

func (s *AddScenegroupMemberResponseBody) SetRequestId(v string) *AddScenegroupMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddScenegroupMemberResponseBody) SetSuccess(v bool) *AddScenegroupMemberResponseBody {
	s.Success = &v
	return s
}

type AddScenegroupMemberResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddScenegroupMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddScenegroupMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s AddScenegroupMemberResponse) GoString() string {
	return s.String()
}

func (s *AddScenegroupMemberResponse) SetHeaders(v map[string]*string) *AddScenegroupMemberResponse {
	s.Headers = v
	return s
}

func (s *AddScenegroupMemberResponse) SetStatusCode(v int32) *AddScenegroupMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *AddScenegroupMemberResponse) SetBody(v *AddScenegroupMemberResponseBody) *AddScenegroupMemberResponse {
	s.Body = v
	return s
}

type AddWorkspaceHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *AddWorkspaceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddWorkspaceHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceHeaders) GoString() string {
	return s.String()
}

func (s *AddWorkspaceHeaders) SetCommonHeaders(v map[string]*string) *AddWorkspaceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddWorkspaceHeaders) SetAccountContext(v *AddWorkspaceHeadersAccountContext) *AddWorkspaceHeaders {
	s.AccountContext = v
	return s
}

type AddWorkspaceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddWorkspaceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddWorkspaceHeadersAccountContext) SetAccountId(v string) *AddWorkspaceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddWorkspaceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddWorkspaceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddWorkspaceShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddWorkspaceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddWorkspaceShrinkHeaders) SetAccountContextShrink(v string) *AddWorkspaceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddWorkspaceRequest struct {
	// This parameter is required.
	Name          *string                           `json:"Name,omitempty" xml:"Name,omitempty"`
	Option        *AddWorkspaceRequestOption        `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	TenantContext *AddWorkspaceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s AddWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *AddWorkspaceRequest) SetName(v string) *AddWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *AddWorkspaceRequest) SetOption(v *AddWorkspaceRequestOption) *AddWorkspaceRequest {
	s.Option = v
	return s
}

func (s *AddWorkspaceRequest) SetTenantContext(v *AddWorkspaceRequestTenantContext) *AddWorkspaceRequest {
	s.TenantContext = v
	return s
}

type AddWorkspaceRequestOption struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// lHiicjNFM2iSFYSdz2iPuI8ZwiEiE
	TeamId *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
}

func (s AddWorkspaceRequestOption) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceRequestOption) GoString() string {
	return s.String()
}

func (s *AddWorkspaceRequestOption) SetDescription(v string) *AddWorkspaceRequestOption {
	s.Description = &v
	return s
}

func (s *AddWorkspaceRequestOption) SetTeamId(v string) *AddWorkspaceRequestOption {
	s.TeamId = &v
	return s
}

type AddWorkspaceRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s AddWorkspaceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *AddWorkspaceRequestTenantContext) SetTenantId(v string) *AddWorkspaceRequestTenantContext {
	s.TenantId = &v
	return s
}

type AddWorkspaceShrinkRequest struct {
	// This parameter is required.
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OptionShrink        *string `json:"Option,omitempty" xml:"Option,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s AddWorkspaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddWorkspaceShrinkRequest) SetName(v string) *AddWorkspaceShrinkRequest {
	s.Name = &v
	return s
}

func (s *AddWorkspaceShrinkRequest) SetOptionShrink(v string) *AddWorkspaceShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *AddWorkspaceShrinkRequest) SetTenantContextShrink(v string) *AddWorkspaceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type AddWorkspaceResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Workspace *AddWorkspaceResponseBodyWorkspace `json:"workspace,omitempty" xml:"workspace,omitempty" type:"Struct"`
}

func (s AddWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *AddWorkspaceResponseBody) SetRequestId(v string) *AddWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddWorkspaceResponseBody) SetWorkspace(v *AddWorkspaceResponseBodyWorkspace) *AddWorkspaceResponseBody {
	s.Workspace = v
	return s
}

type AddWorkspaceResponseBodyWorkspace struct {
	// example:
	//
	// ding16b241fd05********288
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// workspace_description
	Description *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Icon        *AddWorkspaceResponseBodyWorkspaceIcon `json:"Icon,omitempty" xml:"Icon,omitempty" type:"Struct"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// workspace_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// root_node_uuid
	RootNodeId *string `json:"RootNodeId,omitempty" xml:"RootNodeId,omitempty"`
	// example:
	//
	// lHiicjNFM2iSFYSdz2iPuI8ZwiEiE
	TeamId *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
	// example:
	//
	// TEAM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// workspace_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// workspace_id
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddWorkspaceResponseBodyWorkspace) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceResponseBodyWorkspace) GoString() string {
	return s.String()
}

func (s *AddWorkspaceResponseBodyWorkspace) SetCorpId(v string) *AddWorkspaceResponseBodyWorkspace {
	s.CorpId = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetCover(v string) *AddWorkspaceResponseBodyWorkspace {
	s.Cover = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetCreateTime(v string) *AddWorkspaceResponseBodyWorkspace {
	s.CreateTime = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetCreatorId(v string) *AddWorkspaceResponseBodyWorkspace {
	s.CreatorId = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetDescription(v string) *AddWorkspaceResponseBodyWorkspace {
	s.Description = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetIcon(v *AddWorkspaceResponseBodyWorkspaceIcon) *AddWorkspaceResponseBodyWorkspace {
	s.Icon = v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetModifiedTime(v string) *AddWorkspaceResponseBodyWorkspace {
	s.ModifiedTime = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetModifierId(v string) *AddWorkspaceResponseBodyWorkspace {
	s.ModifierId = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetName(v string) *AddWorkspaceResponseBodyWorkspace {
	s.Name = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetPermissionRole(v string) *AddWorkspaceResponseBodyWorkspace {
	s.PermissionRole = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetRootNodeId(v string) *AddWorkspaceResponseBodyWorkspace {
	s.RootNodeId = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetTeamId(v string) *AddWorkspaceResponseBodyWorkspace {
	s.TeamId = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetType(v string) *AddWorkspaceResponseBodyWorkspace {
	s.Type = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetUrl(v string) *AddWorkspaceResponseBodyWorkspace {
	s.Url = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspace) SetWorkspaceId(v string) *AddWorkspaceResponseBodyWorkspace {
	s.WorkspaceId = &v
	return s
}

type AddWorkspaceResponseBodyWorkspaceIcon struct {
	// example:
	//
	// TEAM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s AddWorkspaceResponseBodyWorkspaceIcon) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceResponseBodyWorkspaceIcon) GoString() string {
	return s.String()
}

func (s *AddWorkspaceResponseBodyWorkspaceIcon) SetType(v string) *AddWorkspaceResponseBodyWorkspaceIcon {
	s.Type = &v
	return s
}

func (s *AddWorkspaceResponseBodyWorkspaceIcon) SetValue(v string) *AddWorkspaceResponseBodyWorkspaceIcon {
	s.Value = &v
	return s
}

type AddWorkspaceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *AddWorkspaceResponse) SetHeaders(v map[string]*string) *AddWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *AddWorkspaceResponse) SetStatusCode(v int32) *AddWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddWorkspaceResponse) SetBody(v *AddWorkspaceResponseBody) *AddWorkspaceResponse {
	s.Body = v
	return s
}

type AddWorkspaceDocMembersHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *AddWorkspaceDocMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddWorkspaceDocMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersHeaders) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersHeaders) SetCommonHeaders(v map[string]*string) *AddWorkspaceDocMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddWorkspaceDocMembersHeaders) SetAccountContext(v *AddWorkspaceDocMembersHeadersAccountContext) *AddWorkspaceDocMembersHeaders {
	s.AccountContext = v
	return s
}

type AddWorkspaceDocMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddWorkspaceDocMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersHeadersAccountContext) SetAccountId(v string) *AddWorkspaceDocMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddWorkspaceDocMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddWorkspaceDocMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddWorkspaceDocMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddWorkspaceDocMembersShrinkHeaders) SetAccountContextShrink(v string) *AddWorkspaceDocMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddWorkspaceDocMembersRequest struct {
	// This parameter is required.
	Members []*AddWorkspaceDocMembersRequestMembers `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	NodeId        *string                                     `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContext *AddWorkspaceDocMembersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddWorkspaceDocMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersRequest) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersRequest) SetMembers(v []*AddWorkspaceDocMembersRequestMembers) *AddWorkspaceDocMembersRequest {
	s.Members = v
	return s
}

func (s *AddWorkspaceDocMembersRequest) SetNodeId(v string) *AddWorkspaceDocMembersRequest {
	s.NodeId = &v
	return s
}

func (s *AddWorkspaceDocMembersRequest) SetTenantContext(v *AddWorkspaceDocMembersRequestTenantContext) *AddWorkspaceDocMembersRequest {
	s.TenantContext = v
	return s
}

func (s *AddWorkspaceDocMembersRequest) SetWorkspaceId(v string) *AddWorkspaceDocMembersRequest {
	s.WorkspaceId = &v
	return s
}

type AddWorkspaceDocMembersRequestMembers struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	MemberId *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// USER
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// EDITOR
	RoleType *string `json:"RoleType,omitempty" xml:"RoleType,omitempty"`
}

func (s AddWorkspaceDocMembersRequestMembers) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersRequestMembers) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersRequestMembers) SetMemberId(v string) *AddWorkspaceDocMembersRequestMembers {
	s.MemberId = &v
	return s
}

func (s *AddWorkspaceDocMembersRequestMembers) SetMemberType(v string) *AddWorkspaceDocMembersRequestMembers {
	s.MemberType = &v
	return s
}

func (s *AddWorkspaceDocMembersRequestMembers) SetRoleType(v string) *AddWorkspaceDocMembersRequestMembers {
	s.RoleType = &v
	return s
}

type AddWorkspaceDocMembersRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s AddWorkspaceDocMembersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersRequestTenantContext) SetTenantId(v string) *AddWorkspaceDocMembersRequestTenantContext {
	s.TenantId = &v
	return s
}

type AddWorkspaceDocMembersShrinkRequest struct {
	// This parameter is required.
	MembersShrink *string `json:"Members,omitempty" xml:"Members,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	NodeId              *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddWorkspaceDocMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersShrinkRequest) SetMembersShrink(v string) *AddWorkspaceDocMembersShrinkRequest {
	s.MembersShrink = &v
	return s
}

func (s *AddWorkspaceDocMembersShrinkRequest) SetNodeId(v string) *AddWorkspaceDocMembersShrinkRequest {
	s.NodeId = &v
	return s
}

func (s *AddWorkspaceDocMembersShrinkRequest) SetTenantContextShrink(v string) *AddWorkspaceDocMembersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *AddWorkspaceDocMembersShrinkRequest) SetWorkspaceId(v string) *AddWorkspaceDocMembersShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type AddWorkspaceDocMembersResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s AddWorkspaceDocMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersResponseBody) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersResponseBody) SetRequestId(v string) *AddWorkspaceDocMembersResponseBody {
	s.RequestId = &v
	return s
}

type AddWorkspaceDocMembersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddWorkspaceDocMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddWorkspaceDocMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceDocMembersResponse) GoString() string {
	return s.String()
}

func (s *AddWorkspaceDocMembersResponse) SetHeaders(v map[string]*string) *AddWorkspaceDocMembersResponse {
	s.Headers = v
	return s
}

func (s *AddWorkspaceDocMembersResponse) SetStatusCode(v int32) *AddWorkspaceDocMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *AddWorkspaceDocMembersResponse) SetBody(v *AddWorkspaceDocMembersResponseBody) *AddWorkspaceDocMembersResponse {
	s.Body = v
	return s
}

type AddWorkspaceMembersHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *AddWorkspaceMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s AddWorkspaceMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersHeaders) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersHeaders) SetCommonHeaders(v map[string]*string) *AddWorkspaceMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddWorkspaceMembersHeaders) SetAccountContext(v *AddWorkspaceMembersHeadersAccountContext) *AddWorkspaceMembersHeaders {
	s.AccountContext = v
	return s
}

type AddWorkspaceMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s AddWorkspaceMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersHeadersAccountContext) SetAccountId(v string) *AddWorkspaceMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type AddWorkspaceMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s AddWorkspaceMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *AddWorkspaceMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *AddWorkspaceMembersShrinkHeaders) SetAccountContextShrink(v string) *AddWorkspaceMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type AddWorkspaceMembersRequest struct {
	Members       []*AddWorkspaceMembersRequestMembers     `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	TenantContext *AddWorkspaceMembersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddWorkspaceMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersRequest) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersRequest) SetMembers(v []*AddWorkspaceMembersRequestMembers) *AddWorkspaceMembersRequest {
	s.Members = v
	return s
}

func (s *AddWorkspaceMembersRequest) SetTenantContext(v *AddWorkspaceMembersRequestTenantContext) *AddWorkspaceMembersRequest {
	s.TenantContext = v
	return s
}

func (s *AddWorkspaceMembersRequest) SetWorkspaceId(v string) *AddWorkspaceMembersRequest {
	s.WorkspaceId = &v
	return s
}

type AddWorkspaceMembersRequestMembers struct {
	// example:
	//
	// 012345
	MemberId *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// example:
	//
	// USER
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
	// example:
	//
	// EDITOR
	RoleType *string `json:"RoleType,omitempty" xml:"RoleType,omitempty"`
}

func (s AddWorkspaceMembersRequestMembers) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersRequestMembers) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersRequestMembers) SetMemberId(v string) *AddWorkspaceMembersRequestMembers {
	s.MemberId = &v
	return s
}

func (s *AddWorkspaceMembersRequestMembers) SetMemberType(v string) *AddWorkspaceMembersRequestMembers {
	s.MemberType = &v
	return s
}

func (s *AddWorkspaceMembersRequestMembers) SetRoleType(v string) *AddWorkspaceMembersRequestMembers {
	s.RoleType = &v
	return s
}

type AddWorkspaceMembersRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s AddWorkspaceMembersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersRequestTenantContext) SetTenantId(v string) *AddWorkspaceMembersRequestTenantContext {
	s.TenantId = &v
	return s
}

type AddWorkspaceMembersShrinkRequest struct {
	MembersShrink       *string `json:"Members,omitempty" xml:"Members,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s AddWorkspaceMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersShrinkRequest) SetMembersShrink(v string) *AddWorkspaceMembersShrinkRequest {
	s.MembersShrink = &v
	return s
}

func (s *AddWorkspaceMembersShrinkRequest) SetTenantContextShrink(v string) *AddWorkspaceMembersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *AddWorkspaceMembersShrinkRequest) SetWorkspaceId(v string) *AddWorkspaceMembersShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type AddWorkspaceMembersResponseBody struct {
	NotInOrgList []*string `json:"NotInOrgList,omitempty" xml:"NotInOrgList,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s AddWorkspaceMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersResponseBody) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersResponseBody) SetNotInOrgList(v []*string) *AddWorkspaceMembersResponseBody {
	s.NotInOrgList = v
	return s
}

func (s *AddWorkspaceMembersResponseBody) SetRequestId(v string) *AddWorkspaceMembersResponseBody {
	s.RequestId = &v
	return s
}

type AddWorkspaceMembersResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddWorkspaceMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddWorkspaceMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWorkspaceMembersResponse) GoString() string {
	return s.String()
}

func (s *AddWorkspaceMembersResponse) SetHeaders(v map[string]*string) *AddWorkspaceMembersResponse {
	s.Headers = v
	return s
}

func (s *AddWorkspaceMembersResponse) SetStatusCode(v int32) *AddWorkspaceMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *AddWorkspaceMembersResponse) SetBody(v *AddWorkspaceMembersResponseBody) *AddWorkspaceMembersResponse {
	s.Body = v
	return s
}

type BatchGetFormDataByIdListHeaders struct {
	CommonHeaders  map[string]*string                             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *BatchGetFormDataByIdListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s BatchGetFormDataByIdListHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListHeaders) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListHeaders) SetCommonHeaders(v map[string]*string) *BatchGetFormDataByIdListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchGetFormDataByIdListHeaders) SetAccountContext(v *BatchGetFormDataByIdListHeadersAccountContext) *BatchGetFormDataByIdListHeaders {
	s.AccountContext = v
	return s
}

type BatchGetFormDataByIdListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s BatchGetFormDataByIdListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListHeadersAccountContext) SetAccountId(v string) *BatchGetFormDataByIdListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type BatchGetFormDataByIdListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s BatchGetFormDataByIdListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListShrinkHeaders) SetCommonHeaders(v map[string]*string) *BatchGetFormDataByIdListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchGetFormDataByIdListShrinkHeaders) SetAccountContextShrink(v string) *BatchGetFormDataByIdListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type BatchGetFormDataByIdListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormInstanceIdList []*string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// true
	NeedFormInstanceValue *bool `json:"NeedFormInstanceValue,omitempty" xml:"NeedFormInstanceValue,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s BatchGetFormDataByIdListRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListRequest) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListRequest) SetAppType(v string) *BatchGetFormDataByIdListRequest {
	s.AppType = &v
	return s
}

func (s *BatchGetFormDataByIdListRequest) SetFormInstanceIdList(v []*string) *BatchGetFormDataByIdListRequest {
	s.FormInstanceIdList = v
	return s
}

func (s *BatchGetFormDataByIdListRequest) SetFormUuid(v string) *BatchGetFormDataByIdListRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchGetFormDataByIdListRequest) SetNeedFormInstanceValue(v bool) *BatchGetFormDataByIdListRequest {
	s.NeedFormInstanceValue = &v
	return s
}

func (s *BatchGetFormDataByIdListRequest) SetSystemToken(v string) *BatchGetFormDataByIdListRequest {
	s.SystemToken = &v
	return s
}

type BatchGetFormDataByIdListShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormInstanceIdListShrink *string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// true
	NeedFormInstanceValue *bool `json:"NeedFormInstanceValue,omitempty" xml:"NeedFormInstanceValue,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s BatchGetFormDataByIdListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListShrinkRequest) SetAppType(v string) *BatchGetFormDataByIdListShrinkRequest {
	s.AppType = &v
	return s
}

func (s *BatchGetFormDataByIdListShrinkRequest) SetFormInstanceIdListShrink(v string) *BatchGetFormDataByIdListShrinkRequest {
	s.FormInstanceIdListShrink = &v
	return s
}

func (s *BatchGetFormDataByIdListShrinkRequest) SetFormUuid(v string) *BatchGetFormDataByIdListShrinkRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchGetFormDataByIdListShrinkRequest) SetNeedFormInstanceValue(v bool) *BatchGetFormDataByIdListShrinkRequest {
	s.NeedFormInstanceValue = &v
	return s
}

func (s *BatchGetFormDataByIdListShrinkRequest) SetSystemToken(v string) *BatchGetFormDataByIdListShrinkRequest {
	s.SystemToken = &v
	return s
}

type BatchGetFormDataByIdListResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// [ "FINST-SASNOO39NSIFF780" ]
	Result []*BatchGetFormDataByIdListResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s BatchGetFormDataByIdListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListResponseBody) SetRequestId(v string) *BatchGetFormDataByIdListResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBody) SetResult(v []*BatchGetFormDataByIdListResponseBodyResult) *BatchGetFormDataByIdListResponseBody {
	s.Result = v
	return s
}

func (s *BatchGetFormDataByIdListResponseBody) SetVendorRequestId(v string) *BatchGetFormDataByIdListResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBody) SetVendorType(v string) *BatchGetFormDataByIdListResponseBody {
	s.VendorType = &v
	return s
}

type BatchGetFormDataByIdListResponseBodyResult struct {
	// example:
	//
	// 2021-05-01 10:10:10
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// 012345
	CreatorUserId *string                `json:"CreatorUserId,omitempty" xml:"CreatorUserId,omitempty"`
	FormData      map[string]interface{} `json:"FormData,omitempty" xml:"FormData,omitempty"`
	// example:
	//
	// FINST-xxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// FORM-xxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// 21044829126
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// {}
	InstanceValue *string `json:"InstanceValue,omitempty" xml:"InstanceValue,omitempty"`
	// example:
	//
	// 2021-05-01 10:10:10
	ModifiedTimeGMT *string                                               `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
	Modifier        *string                                               `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	ModifyUser      *BatchGetFormDataByIdListResponseBodyResultModifyUser `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty" type:"Struct"`
	Originator      *BatchGetFormDataByIdListResponseBodyResultOriginator `json:"Originator,omitempty" xml:"Originator,omitempty" type:"Struct"`
	// example:
	//
	// 1
	Sequence *string `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// example:
	//
	// SA65776
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Title        *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 2
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s BatchGetFormDataByIdListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetCreateTimeGMT(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.CreateTimeGMT = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetCreatorUserId(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.CreatorUserId = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetFormData(v map[string]interface{}) *BatchGetFormDataByIdListResponseBodyResult {
	s.FormData = v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetFormInstanceId(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.FormInstanceId = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetFormUuid(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.FormUuid = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetId(v int64) *BatchGetFormDataByIdListResponseBodyResult {
	s.Id = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetInstanceValue(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.InstanceValue = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetModifiedTimeGMT(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetModifier(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.Modifier = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetModifyUser(v *BatchGetFormDataByIdListResponseBodyResultModifyUser) *BatchGetFormDataByIdListResponseBodyResult {
	s.ModifyUser = v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetOriginator(v *BatchGetFormDataByIdListResponseBodyResultOriginator) *BatchGetFormDataByIdListResponseBodyResult {
	s.Originator = v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetSequence(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.Sequence = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetSerialNumber(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.SerialNumber = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetTitle(v string) *BatchGetFormDataByIdListResponseBodyResult {
	s.Title = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResult) SetVersion(v int64) *BatchGetFormDataByIdListResponseBodyResult {
	s.Version = &v
	return s
}

type BatchGetFormDataByIdListResponseBodyResultModifyUser struct {
	Name *BatchGetFormDataByIdListResponseBodyResultModifyUserName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s BatchGetFormDataByIdListResponseBodyResultModifyUser) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListResponseBodyResultModifyUser) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListResponseBodyResultModifyUser) SetName(v *BatchGetFormDataByIdListResponseBodyResultModifyUserName) *BatchGetFormDataByIdListResponseBodyResultModifyUser {
	s.Name = v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResultModifyUser) SetUserId(v string) *BatchGetFormDataByIdListResponseBodyResultModifyUser {
	s.UserId = &v
	return s
}

type BatchGetFormDataByIdListResponseBodyResultModifyUserName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// EnglishName
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
}

func (s BatchGetFormDataByIdListResponseBodyResultModifyUserName) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListResponseBodyResultModifyUserName) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListResponseBodyResultModifyUserName) SetNameInChinese(v string) *BatchGetFormDataByIdListResponseBodyResultModifyUserName {
	s.NameInChinese = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResultModifyUserName) SetNameInEnglish(v string) *BatchGetFormDataByIdListResponseBodyResultModifyUserName {
	s.NameInEnglish = &v
	return s
}

type BatchGetFormDataByIdListResponseBodyResultOriginator struct {
	Name *BatchGetFormDataByIdListResponseBodyResultOriginatorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s BatchGetFormDataByIdListResponseBodyResultOriginator) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListResponseBodyResultOriginator) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListResponseBodyResultOriginator) SetName(v *BatchGetFormDataByIdListResponseBodyResultOriginatorName) *BatchGetFormDataByIdListResponseBodyResultOriginator {
	s.Name = v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResultOriginator) SetUserId(v string) *BatchGetFormDataByIdListResponseBodyResultOriginator {
	s.UserId = &v
	return s
}

type BatchGetFormDataByIdListResponseBodyResultOriginatorName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// EnglishName
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
}

func (s BatchGetFormDataByIdListResponseBodyResultOriginatorName) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListResponseBodyResultOriginatorName) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListResponseBodyResultOriginatorName) SetNameInChinese(v string) *BatchGetFormDataByIdListResponseBodyResultOriginatorName {
	s.NameInChinese = &v
	return s
}

func (s *BatchGetFormDataByIdListResponseBodyResultOriginatorName) SetNameInEnglish(v string) *BatchGetFormDataByIdListResponseBodyResultOriginatorName {
	s.NameInEnglish = &v
	return s
}

type BatchGetFormDataByIdListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchGetFormDataByIdListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchGetFormDataByIdListResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetFormDataByIdListResponse) GoString() string {
	return s.String()
}

func (s *BatchGetFormDataByIdListResponse) SetHeaders(v map[string]*string) *BatchGetFormDataByIdListResponse {
	s.Headers = v
	return s
}

func (s *BatchGetFormDataByIdListResponse) SetStatusCode(v int32) *BatchGetFormDataByIdListResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchGetFormDataByIdListResponse) SetBody(v *BatchGetFormDataByIdListResponseBody) *BatchGetFormDataByIdListResponse {
	s.Body = v
	return s
}

type BatchRemovalByFormInstanceIdListHeaders struct {
	CommonHeaders  map[string]*string                                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *BatchRemovalByFormInstanceIdListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s BatchRemovalByFormInstanceIdListHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchRemovalByFormInstanceIdListHeaders) GoString() string {
	return s.String()
}

func (s *BatchRemovalByFormInstanceIdListHeaders) SetCommonHeaders(v map[string]*string) *BatchRemovalByFormInstanceIdListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchRemovalByFormInstanceIdListHeaders) SetAccountContext(v *BatchRemovalByFormInstanceIdListHeadersAccountContext) *BatchRemovalByFormInstanceIdListHeaders {
	s.AccountContext = v
	return s
}

type BatchRemovalByFormInstanceIdListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s BatchRemovalByFormInstanceIdListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s BatchRemovalByFormInstanceIdListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *BatchRemovalByFormInstanceIdListHeadersAccountContext) SetAccountId(v string) *BatchRemovalByFormInstanceIdListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type BatchRemovalByFormInstanceIdListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s BatchRemovalByFormInstanceIdListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchRemovalByFormInstanceIdListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *BatchRemovalByFormInstanceIdListShrinkHeaders) SetCommonHeaders(v map[string]*string) *BatchRemovalByFormInstanceIdListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchRemovalByFormInstanceIdListShrinkHeaders) SetAccountContextShrink(v string) *BatchRemovalByFormInstanceIdListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type BatchRemovalByFormInstanceIdListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_XCE0EVXS6DYG3YDYC5RD
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// false
	AsynchronousExecution *bool `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	// example:
	//
	// false
	ExecuteExpression *bool `json:"ExecuteExpression,omitempty" xml:"ExecuteExpression,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// []
	FormInstanceIdList []*string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s BatchRemovalByFormInstanceIdListRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchRemovalByFormInstanceIdListRequest) GoString() string {
	return s.String()
}

func (s *BatchRemovalByFormInstanceIdListRequest) SetAppType(v string) *BatchRemovalByFormInstanceIdListRequest {
	s.AppType = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListRequest) SetAsynchronousExecution(v bool) *BatchRemovalByFormInstanceIdListRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListRequest) SetExecuteExpression(v bool) *BatchRemovalByFormInstanceIdListRequest {
	s.ExecuteExpression = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListRequest) SetFormInstanceIdList(v []*string) *BatchRemovalByFormInstanceIdListRequest {
	s.FormInstanceIdList = v
	return s
}

func (s *BatchRemovalByFormInstanceIdListRequest) SetFormUuid(v string) *BatchRemovalByFormInstanceIdListRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListRequest) SetSystemToken(v string) *BatchRemovalByFormInstanceIdListRequest {
	s.SystemToken = &v
	return s
}

type BatchRemovalByFormInstanceIdListShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_XCE0EVXS6DYG3YDYC5RD
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// false
	AsynchronousExecution *bool `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	// example:
	//
	// false
	ExecuteExpression *bool `json:"ExecuteExpression,omitempty" xml:"ExecuteExpression,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// []
	FormInstanceIdListShrink *string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s BatchRemovalByFormInstanceIdListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchRemovalByFormInstanceIdListShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchRemovalByFormInstanceIdListShrinkRequest) SetAppType(v string) *BatchRemovalByFormInstanceIdListShrinkRequest {
	s.AppType = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListShrinkRequest) SetAsynchronousExecution(v bool) *BatchRemovalByFormInstanceIdListShrinkRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListShrinkRequest) SetExecuteExpression(v bool) *BatchRemovalByFormInstanceIdListShrinkRequest {
	s.ExecuteExpression = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListShrinkRequest) SetFormInstanceIdListShrink(v string) *BatchRemovalByFormInstanceIdListShrinkRequest {
	s.FormInstanceIdListShrink = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListShrinkRequest) SetFormUuid(v string) *BatchRemovalByFormInstanceIdListShrinkRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListShrinkRequest) SetSystemToken(v string) *BatchRemovalByFormInstanceIdListShrinkRequest {
	s.SystemToken = &v
	return s
}

type BatchRemovalByFormInstanceIdListResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s BatchRemovalByFormInstanceIdListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchRemovalByFormInstanceIdListResponseBody) GoString() string {
	return s.String()
}

func (s *BatchRemovalByFormInstanceIdListResponseBody) SetRequestId(v string) *BatchRemovalByFormInstanceIdListResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListResponseBody) SetVendorRequestId(v string) *BatchRemovalByFormInstanceIdListResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListResponseBody) SetVendorType(v string) *BatchRemovalByFormInstanceIdListResponseBody {
	s.VendorType = &v
	return s
}

type BatchRemovalByFormInstanceIdListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchRemovalByFormInstanceIdListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchRemovalByFormInstanceIdListResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchRemovalByFormInstanceIdListResponse) GoString() string {
	return s.String()
}

func (s *BatchRemovalByFormInstanceIdListResponse) SetHeaders(v map[string]*string) *BatchRemovalByFormInstanceIdListResponse {
	s.Headers = v
	return s
}

func (s *BatchRemovalByFormInstanceIdListResponse) SetStatusCode(v int32) *BatchRemovalByFormInstanceIdListResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchRemovalByFormInstanceIdListResponse) SetBody(v *BatchRemovalByFormInstanceIdListResponseBody) *BatchRemovalByFormInstanceIdListResponse {
	s.Body = v
	return s
}

type BatchSaveFormDataHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *BatchSaveFormDataHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s BatchSaveFormDataHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchSaveFormDataHeaders) GoString() string {
	return s.String()
}

func (s *BatchSaveFormDataHeaders) SetCommonHeaders(v map[string]*string) *BatchSaveFormDataHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchSaveFormDataHeaders) SetAccountContext(v *BatchSaveFormDataHeadersAccountContext) *BatchSaveFormDataHeaders {
	s.AccountContext = v
	return s
}

type BatchSaveFormDataHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s BatchSaveFormDataHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s BatchSaveFormDataHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *BatchSaveFormDataHeadersAccountContext) SetAccountId(v string) *BatchSaveFormDataHeadersAccountContext {
	s.AccountId = &v
	return s
}

type BatchSaveFormDataShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s BatchSaveFormDataShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchSaveFormDataShrinkHeaders) GoString() string {
	return s.String()
}

func (s *BatchSaveFormDataShrinkHeaders) SetCommonHeaders(v map[string]*string) *BatchSaveFormDataShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchSaveFormDataShrinkHeaders) SetAccountContextShrink(v string) *BatchSaveFormDataShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type BatchSaveFormDataRequest struct {
	// example:
	//
	// APP_XCE0EVXS6DYG3YDYC5RD
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// false
	AsynchronousExecution *bool     `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	FormDataJsonList      []*string `json:"FormDataJsonList,omitempty" xml:"FormDataJsonList,omitempty" type:"Repeated"`
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// false
	KeepRunningAfterException *bool `json:"KeepRunningAfterException,omitempty" xml:"KeepRunningAfterException,omitempty"`
	// example:
	//
	// false
	NoExecuteExpression *bool `json:"NoExecuteExpression,omitempty" xml:"NoExecuteExpression,omitempty"`
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s BatchSaveFormDataRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSaveFormDataRequest) GoString() string {
	return s.String()
}

func (s *BatchSaveFormDataRequest) SetAppType(v string) *BatchSaveFormDataRequest {
	s.AppType = &v
	return s
}

func (s *BatchSaveFormDataRequest) SetAsynchronousExecution(v bool) *BatchSaveFormDataRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchSaveFormDataRequest) SetFormDataJsonList(v []*string) *BatchSaveFormDataRequest {
	s.FormDataJsonList = v
	return s
}

func (s *BatchSaveFormDataRequest) SetFormUuid(v string) *BatchSaveFormDataRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchSaveFormDataRequest) SetKeepRunningAfterException(v bool) *BatchSaveFormDataRequest {
	s.KeepRunningAfterException = &v
	return s
}

func (s *BatchSaveFormDataRequest) SetNoExecuteExpression(v bool) *BatchSaveFormDataRequest {
	s.NoExecuteExpression = &v
	return s
}

func (s *BatchSaveFormDataRequest) SetSystemToken(v string) *BatchSaveFormDataRequest {
	s.SystemToken = &v
	return s
}

type BatchSaveFormDataShrinkRequest struct {
	// example:
	//
	// APP_XCE0EVXS6DYG3YDYC5RD
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// false
	AsynchronousExecution  *bool   `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	FormDataJsonListShrink *string `json:"FormDataJsonList,omitempty" xml:"FormDataJsonList,omitempty"`
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// false
	KeepRunningAfterException *bool `json:"KeepRunningAfterException,omitempty" xml:"KeepRunningAfterException,omitempty"`
	// example:
	//
	// false
	NoExecuteExpression *bool `json:"NoExecuteExpression,omitempty" xml:"NoExecuteExpression,omitempty"`
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s BatchSaveFormDataShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchSaveFormDataShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchSaveFormDataShrinkRequest) SetAppType(v string) *BatchSaveFormDataShrinkRequest {
	s.AppType = &v
	return s
}

func (s *BatchSaveFormDataShrinkRequest) SetAsynchronousExecution(v bool) *BatchSaveFormDataShrinkRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchSaveFormDataShrinkRequest) SetFormDataJsonListShrink(v string) *BatchSaveFormDataShrinkRequest {
	s.FormDataJsonListShrink = &v
	return s
}

func (s *BatchSaveFormDataShrinkRequest) SetFormUuid(v string) *BatchSaveFormDataShrinkRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchSaveFormDataShrinkRequest) SetKeepRunningAfterException(v bool) *BatchSaveFormDataShrinkRequest {
	s.KeepRunningAfterException = &v
	return s
}

func (s *BatchSaveFormDataShrinkRequest) SetNoExecuteExpression(v bool) *BatchSaveFormDataShrinkRequest {
	s.NoExecuteExpression = &v
	return s
}

func (s *BatchSaveFormDataShrinkRequest) SetSystemToken(v string) *BatchSaveFormDataShrinkRequest {
	s.SystemToken = &v
	return s
}

type BatchSaveFormDataResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// [ "FINST-SASNOO39NSIFF780" ]
	Result []*string `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s BatchSaveFormDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchSaveFormDataResponseBody) GoString() string {
	return s.String()
}

func (s *BatchSaveFormDataResponseBody) SetRequestId(v string) *BatchSaveFormDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchSaveFormDataResponseBody) SetResult(v []*string) *BatchSaveFormDataResponseBody {
	s.Result = v
	return s
}

func (s *BatchSaveFormDataResponseBody) SetVendorRequestId(v string) *BatchSaveFormDataResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *BatchSaveFormDataResponseBody) SetVendorType(v string) *BatchSaveFormDataResponseBody {
	s.VendorType = &v
	return s
}

type BatchSaveFormDataResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchSaveFormDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchSaveFormDataResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchSaveFormDataResponse) GoString() string {
	return s.String()
}

func (s *BatchSaveFormDataResponse) SetHeaders(v map[string]*string) *BatchSaveFormDataResponse {
	s.Headers = v
	return s
}

func (s *BatchSaveFormDataResponse) SetStatusCode(v int32) *BatchSaveFormDataResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchSaveFormDataResponse) SetBody(v *BatchSaveFormDataResponseBody) *BatchSaveFormDataResponse {
	s.Body = v
	return s
}

type BatchUpdateFormDataByInstanceIdHeaders struct {
	CommonHeaders  map[string]*string                                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *BatchUpdateFormDataByInstanceIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s BatchUpdateFormDataByInstanceIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceIdHeaders) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceIdHeaders) SetCommonHeaders(v map[string]*string) *BatchUpdateFormDataByInstanceIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdHeaders) SetAccountContext(v *BatchUpdateFormDataByInstanceIdHeadersAccountContext) *BatchUpdateFormDataByInstanceIdHeaders {
	s.AccountContext = v
	return s
}

type BatchUpdateFormDataByInstanceIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s BatchUpdateFormDataByInstanceIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceIdHeadersAccountContext) SetAccountId(v string) *BatchUpdateFormDataByInstanceIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type BatchUpdateFormDataByInstanceIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s BatchUpdateFormDataByInstanceIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *BatchUpdateFormDataByInstanceIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkHeaders) SetAccountContextShrink(v string) *BatchUpdateFormDataByInstanceIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type BatchUpdateFormDataByInstanceIdRequest struct {
	// example:
	//
	// String
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// true
	AsynchronousExecution *bool `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [ "FINST-J8766S91O2UYN87ZX3XOF1MY8MBA2912BSV0L24" ]
	FormInstanceIdList []*string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// true
	IgnoreEmpty *bool `json:"IgnoreEmpty,omitempty" xml:"IgnoreEmpty,omitempty"`
	// example:
	//
	// false
	NoExecuteExpression *bool `json:"NoExecuteExpression,omitempty" xml:"NoExecuteExpression,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {\"countrySelectField_l0c1cwiu\":[{\"value\":\"US\"}],\"addressField_l0c1cwiy\":{\"address\":\"111\",\"regionIds\":[460000,469027,469023401],\"regionText\":[{\"en_US\":\"hai+nan+sheng\",\"zh_CN\":\"海南省\"},{\"en_US\":\"cheng+mai+xian\",\"zh_CN\":\"澄迈县\"},{\"en_US\":\"guo+ying+hong+gang+nong+chang\",\"zh_CN\":\"国营红岗农场\"}]}}
	UpdateFormDataJson *string `json:"UpdateFormDataJson,omitempty" xml:"UpdateFormDataJson,omitempty"`
	// example:
	//
	// false
	UseLatestFormSchemaVersion *bool `json:"UseLatestFormSchemaVersion,omitempty" xml:"UseLatestFormSchemaVersion,omitempty"`
}

func (s BatchUpdateFormDataByInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetAppType(v string) *BatchUpdateFormDataByInstanceIdRequest {
	s.AppType = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetAsynchronousExecution(v bool) *BatchUpdateFormDataByInstanceIdRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetFormInstanceIdList(v []*string) *BatchUpdateFormDataByInstanceIdRequest {
	s.FormInstanceIdList = v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetFormUuid(v string) *BatchUpdateFormDataByInstanceIdRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetIgnoreEmpty(v bool) *BatchUpdateFormDataByInstanceIdRequest {
	s.IgnoreEmpty = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetNoExecuteExpression(v bool) *BatchUpdateFormDataByInstanceIdRequest {
	s.NoExecuteExpression = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetSystemToken(v string) *BatchUpdateFormDataByInstanceIdRequest {
	s.SystemToken = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetUpdateFormDataJson(v string) *BatchUpdateFormDataByInstanceIdRequest {
	s.UpdateFormDataJson = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdRequest) SetUseLatestFormSchemaVersion(v bool) *BatchUpdateFormDataByInstanceIdRequest {
	s.UseLatestFormSchemaVersion = &v
	return s
}

type BatchUpdateFormDataByInstanceIdShrinkRequest struct {
	// example:
	//
	// String
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// true
	AsynchronousExecution *bool `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [ "FINST-J8766S91O2UYN87ZX3XOF1MY8MBA2912BSV0L24" ]
	FormInstanceIdListShrink *string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// true
	IgnoreEmpty *bool `json:"IgnoreEmpty,omitempty" xml:"IgnoreEmpty,omitempty"`
	// example:
	//
	// false
	NoExecuteExpression *bool `json:"NoExecuteExpression,omitempty" xml:"NoExecuteExpression,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {\"countrySelectField_l0c1cwiu\":[{\"value\":\"US\"}],\"addressField_l0c1cwiy\":{\"address\":\"111\",\"regionIds\":[460000,469027,469023401],\"regionText\":[{\"en_US\":\"hai+nan+sheng\",\"zh_CN\":\"海南省\"},{\"en_US\":\"cheng+mai+xian\",\"zh_CN\":\"澄迈县\"},{\"en_US\":\"guo+ying+hong+gang+nong+chang\",\"zh_CN\":\"国营红岗农场\"}]}}
	UpdateFormDataJson *string `json:"UpdateFormDataJson,omitempty" xml:"UpdateFormDataJson,omitempty"`
	// example:
	//
	// false
	UseLatestFormSchemaVersion *bool `json:"UseLatestFormSchemaVersion,omitempty" xml:"UseLatestFormSchemaVersion,omitempty"`
}

func (s BatchUpdateFormDataByInstanceIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetAppType(v string) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.AppType = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetAsynchronousExecution(v bool) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetFormInstanceIdListShrink(v string) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.FormInstanceIdListShrink = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetFormUuid(v string) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetIgnoreEmpty(v bool) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.IgnoreEmpty = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetNoExecuteExpression(v bool) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.NoExecuteExpression = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetSystemToken(v string) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.SystemToken = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetUpdateFormDataJson(v string) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.UpdateFormDataJson = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdShrinkRequest) SetUseLatestFormSchemaVersion(v bool) *BatchUpdateFormDataByInstanceIdShrinkRequest {
	s.UseLatestFormSchemaVersion = &v
	return s
}

type BatchUpdateFormDataByInstanceIdResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// [ "FINST-SASNOO39NSIFF780" ]
	Result []*string `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s BatchUpdateFormDataByInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceIdResponseBody) SetRequestId(v string) *BatchUpdateFormDataByInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdResponseBody) SetResult(v []*string) *BatchUpdateFormDataByInstanceIdResponseBody {
	s.Result = v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdResponseBody) SetVendorRequestId(v string) *BatchUpdateFormDataByInstanceIdResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdResponseBody) SetVendorType(v string) *BatchUpdateFormDataByInstanceIdResponseBody {
	s.VendorType = &v
	return s
}

type BatchUpdateFormDataByInstanceIdResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUpdateFormDataByInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUpdateFormDataByInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceIdResponse) SetHeaders(v map[string]*string) *BatchUpdateFormDataByInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdResponse) SetStatusCode(v int32) *BatchUpdateFormDataByInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceIdResponse) SetBody(v *BatchUpdateFormDataByInstanceIdResponseBody) *BatchUpdateFormDataByInstanceIdResponse {
	s.Body = v
	return s
}

type BatchUpdateFormDataByInstanceMapHeaders struct {
	CommonHeaders  map[string]*string                                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *BatchUpdateFormDataByInstanceMapHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s BatchUpdateFormDataByInstanceMapHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceMapHeaders) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceMapHeaders) SetCommonHeaders(v map[string]*string) *BatchUpdateFormDataByInstanceMapHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapHeaders) SetAccountContext(v *BatchUpdateFormDataByInstanceMapHeadersAccountContext) *BatchUpdateFormDataByInstanceMapHeaders {
	s.AccountContext = v
	return s
}

type BatchUpdateFormDataByInstanceMapHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s BatchUpdateFormDataByInstanceMapHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceMapHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceMapHeadersAccountContext) SetAccountId(v string) *BatchUpdateFormDataByInstanceMapHeadersAccountContext {
	s.AccountId = &v
	return s
}

type BatchUpdateFormDataByInstanceMapShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s BatchUpdateFormDataByInstanceMapShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceMapShrinkHeaders) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceMapShrinkHeaders) SetCommonHeaders(v map[string]*string) *BatchUpdateFormDataByInstanceMapShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkHeaders) SetAccountContextShrink(v string) *BatchUpdateFormDataByInstanceMapShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type BatchUpdateFormDataByInstanceMapRequest struct {
	// example:
	//
	// String
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// false
	AsynchronousExecution *bool `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// false
	IgnoreEmpty *bool `json:"IgnoreEmpty,omitempty" xml:"IgnoreEmpty,omitempty"`
	// example:
	//
	// false
	NoExecuteExpression *bool `json:"NoExecuteExpression,omitempty" xml:"NoExecuteExpression,omitempty"`
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken           *string                `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	UpdateFormDataJsonMap map[string]interface{} `json:"UpdateFormDataJsonMap,omitempty" xml:"UpdateFormDataJsonMap,omitempty"`
	// example:
	//
	// false
	UseLatestFormSchemaVersion *bool `json:"UseLatestFormSchemaVersion,omitempty" xml:"UseLatestFormSchemaVersion,omitempty"`
}

func (s BatchUpdateFormDataByInstanceMapRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceMapRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetAppType(v string) *BatchUpdateFormDataByInstanceMapRequest {
	s.AppType = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetAsynchronousExecution(v bool) *BatchUpdateFormDataByInstanceMapRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetFormUuid(v string) *BatchUpdateFormDataByInstanceMapRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetIgnoreEmpty(v bool) *BatchUpdateFormDataByInstanceMapRequest {
	s.IgnoreEmpty = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetNoExecuteExpression(v bool) *BatchUpdateFormDataByInstanceMapRequest {
	s.NoExecuteExpression = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetSystemToken(v string) *BatchUpdateFormDataByInstanceMapRequest {
	s.SystemToken = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetUpdateFormDataJsonMap(v map[string]interface{}) *BatchUpdateFormDataByInstanceMapRequest {
	s.UpdateFormDataJsonMap = v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapRequest) SetUseLatestFormSchemaVersion(v bool) *BatchUpdateFormDataByInstanceMapRequest {
	s.UseLatestFormSchemaVersion = &v
	return s
}

type BatchUpdateFormDataByInstanceMapShrinkRequest struct {
	// example:
	//
	// String
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// false
	AsynchronousExecution *bool `json:"AsynchronousExecution,omitempty" xml:"AsynchronousExecution,omitempty"`
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// false
	IgnoreEmpty *bool `json:"IgnoreEmpty,omitempty" xml:"IgnoreEmpty,omitempty"`
	// example:
	//
	// false
	NoExecuteExpression *bool `json:"NoExecuteExpression,omitempty" xml:"NoExecuteExpression,omitempty"`
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken                 *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	UpdateFormDataJsonMapShrink *string `json:"UpdateFormDataJsonMap,omitempty" xml:"UpdateFormDataJsonMap,omitempty"`
	// example:
	//
	// false
	UseLatestFormSchemaVersion *bool `json:"UseLatestFormSchemaVersion,omitempty" xml:"UseLatestFormSchemaVersion,omitempty"`
}

func (s BatchUpdateFormDataByInstanceMapShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceMapShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetAppType(v string) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.AppType = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetAsynchronousExecution(v bool) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.AsynchronousExecution = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetFormUuid(v string) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.FormUuid = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetIgnoreEmpty(v bool) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.IgnoreEmpty = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetNoExecuteExpression(v bool) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.NoExecuteExpression = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetSystemToken(v string) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.SystemToken = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetUpdateFormDataJsonMapShrink(v string) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.UpdateFormDataJsonMapShrink = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapShrinkRequest) SetUseLatestFormSchemaVersion(v bool) *BatchUpdateFormDataByInstanceMapShrinkRequest {
	s.UseLatestFormSchemaVersion = &v
	return s
}

type BatchUpdateFormDataByInstanceMapResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// [ "FINST-SASNOO39NSIFF780" ]
	Result []*string `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s BatchUpdateFormDataByInstanceMapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceMapResponseBody) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceMapResponseBody) SetRequestId(v string) *BatchUpdateFormDataByInstanceMapResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapResponseBody) SetResult(v []*string) *BatchUpdateFormDataByInstanceMapResponseBody {
	s.Result = v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapResponseBody) SetVendorRequestId(v string) *BatchUpdateFormDataByInstanceMapResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapResponseBody) SetVendorType(v string) *BatchUpdateFormDataByInstanceMapResponseBody {
	s.VendorType = &v
	return s
}

type BatchUpdateFormDataByInstanceMapResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchUpdateFormDataByInstanceMapResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchUpdateFormDataByInstanceMapResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchUpdateFormDataByInstanceMapResponse) GoString() string {
	return s.String()
}

func (s *BatchUpdateFormDataByInstanceMapResponse) SetHeaders(v map[string]*string) *BatchUpdateFormDataByInstanceMapResponse {
	s.Headers = v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapResponse) SetStatusCode(v int32) *BatchUpdateFormDataByInstanceMapResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchUpdateFormDataByInstanceMapResponse) SetBody(v *BatchUpdateFormDataByInstanceMapResponseBody) *BatchUpdateFormDataByInstanceMapResponse {
	s.Body = v
	return s
}

type CancelScheduleConferenceHeaders struct {
	CommonHeaders  map[string]*string                             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CancelScheduleConferenceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CancelScheduleConferenceHeaders) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceHeaders) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceHeaders) SetCommonHeaders(v map[string]*string) *CancelScheduleConferenceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CancelScheduleConferenceHeaders) SetAccountContext(v *CancelScheduleConferenceHeadersAccountContext) *CancelScheduleConferenceHeaders {
	s.AccountContext = v
	return s
}

type CancelScheduleConferenceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CancelScheduleConferenceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceHeadersAccountContext) SetAccountId(v string) *CancelScheduleConferenceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CancelScheduleConferenceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CancelScheduleConferenceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceShrinkHeaders) SetCommonHeaders(v map[string]*string) *CancelScheduleConferenceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CancelScheduleConferenceShrinkHeaders) SetAccountContextShrink(v string) *CancelScheduleConferenceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CancelScheduleConferenceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string                                       `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	TenantContext        *CancelScheduleConferenceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s CancelScheduleConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceRequest) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceRequest) SetScheduleConferenceId(v string) *CancelScheduleConferenceRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *CancelScheduleConferenceRequest) SetTenantContext(v *CancelScheduleConferenceRequestTenantContext) *CancelScheduleConferenceRequest {
	s.TenantContext = v
	return s
}

type CancelScheduleConferenceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CancelScheduleConferenceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceRequestTenantContext) SetTenantId(v string) *CancelScheduleConferenceRequestTenantContext {
	s.TenantId = &v
	return s
}

type CancelScheduleConferenceShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	TenantContextShrink  *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s CancelScheduleConferenceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceShrinkRequest) SetScheduleConferenceId(v string) *CancelScheduleConferenceShrinkRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *CancelScheduleConferenceShrinkRequest) SetTenantContextShrink(v string) *CancelScheduleConferenceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type CancelScheduleConferenceResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CancelScheduleConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceResponseBody) SetRequestId(v string) *CancelScheduleConferenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelScheduleConferenceResponseBody) SetSuccess(v bool) *CancelScheduleConferenceResponseBody {
	s.Success = &v
	return s
}

type CancelScheduleConferenceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelScheduleConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelScheduleConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelScheduleConferenceResponse) GoString() string {
	return s.String()
}

func (s *CancelScheduleConferenceResponse) SetHeaders(v map[string]*string) *CancelScheduleConferenceResponse {
	s.Headers = v
	return s
}

func (s *CancelScheduleConferenceResponse) SetStatusCode(v int32) *CancelScheduleConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelScheduleConferenceResponse) SetBody(v *CancelScheduleConferenceResponseBody) *CancelScheduleConferenceResponse {
	s.Body = v
	return s
}

type CheckAlibabaStaffHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CheckAlibabaStaffHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CheckAlibabaStaffHeaders) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffHeaders) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffHeaders) SetCommonHeaders(v map[string]*string) *CheckAlibabaStaffHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CheckAlibabaStaffHeaders) SetAccountContext(v *CheckAlibabaStaffHeadersAccountContext) *CheckAlibabaStaffHeaders {
	s.AccountContext = v
	return s
}

type CheckAlibabaStaffHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CheckAlibabaStaffHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffHeadersAccountContext) SetAccountId(v string) *CheckAlibabaStaffHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CheckAlibabaStaffShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CheckAlibabaStaffShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffShrinkHeaders) SetCommonHeaders(v map[string]*string) *CheckAlibabaStaffShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CheckAlibabaStaffShrinkHeaders) SetAccountContextShrink(v string) *CheckAlibabaStaffShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CheckAlibabaStaffRequest struct {
	// example:
	//
	// 156****9665
	Mobile        *string                                `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	TenantContext *CheckAlibabaStaffRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s CheckAlibabaStaffRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffRequest) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffRequest) SetMobile(v string) *CheckAlibabaStaffRequest {
	s.Mobile = &v
	return s
}

func (s *CheckAlibabaStaffRequest) SetTenantContext(v *CheckAlibabaStaffRequestTenantContext) *CheckAlibabaStaffRequest {
	s.TenantContext = v
	return s
}

type CheckAlibabaStaffRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CheckAlibabaStaffRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffRequestTenantContext) SetTenantId(v string) *CheckAlibabaStaffRequestTenantContext {
	s.TenantId = &v
	return s
}

type CheckAlibabaStaffShrinkRequest struct {
	// example:
	//
	// 156****9665
	Mobile              *string `json:"Mobile,omitempty" xml:"Mobile,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s CheckAlibabaStaffShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffShrinkRequest) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffShrinkRequest) SetMobile(v string) *CheckAlibabaStaffShrinkRequest {
	s.Mobile = &v
	return s
}

func (s *CheckAlibabaStaffShrinkRequest) SetTenantContextShrink(v string) *CheckAlibabaStaffShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type CheckAlibabaStaffResponseBody struct {
	// example:
	//
	// true
	IsAlibabaStaff *bool `json:"isAlibabaStaff,omitempty" xml:"isAlibabaStaff,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CheckAlibabaStaffResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffResponseBody) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffResponseBody) SetIsAlibabaStaff(v bool) *CheckAlibabaStaffResponseBody {
	s.IsAlibabaStaff = &v
	return s
}

func (s *CheckAlibabaStaffResponseBody) SetRequestId(v string) *CheckAlibabaStaffResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckAlibabaStaffResponseBody) SetVendorRequestId(v string) *CheckAlibabaStaffResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CheckAlibabaStaffResponseBody) SetVendorType(v string) *CheckAlibabaStaffResponseBody {
	s.VendorType = &v
	return s
}

type CheckAlibabaStaffResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckAlibabaStaffResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckAlibabaStaffResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckAlibabaStaffResponse) GoString() string {
	return s.String()
}

func (s *CheckAlibabaStaffResponse) SetHeaders(v map[string]*string) *CheckAlibabaStaffResponse {
	s.Headers = v
	return s
}

func (s *CheckAlibabaStaffResponse) SetStatusCode(v int32) *CheckAlibabaStaffResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckAlibabaStaffResponse) SetBody(v *CheckAlibabaStaffResponseBody) *CheckAlibabaStaffResponse {
	s.Body = v
	return s
}

type CheckUserIsGroupMemberHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CheckUserIsGroupMemberHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CheckUserIsGroupMemberHeaders) String() string {
	return tea.Prettify(s)
}

func (s CheckUserIsGroupMemberHeaders) GoString() string {
	return s.String()
}

func (s *CheckUserIsGroupMemberHeaders) SetCommonHeaders(v map[string]*string) *CheckUserIsGroupMemberHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CheckUserIsGroupMemberHeaders) SetAccountContext(v *CheckUserIsGroupMemberHeadersAccountContext) *CheckUserIsGroupMemberHeaders {
	s.AccountContext = v
	return s
}

type CheckUserIsGroupMemberHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CheckUserIsGroupMemberHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CheckUserIsGroupMemberHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CheckUserIsGroupMemberHeadersAccountContext) SetAccountId(v string) *CheckUserIsGroupMemberHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CheckUserIsGroupMemberShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CheckUserIsGroupMemberShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CheckUserIsGroupMemberShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CheckUserIsGroupMemberShrinkHeaders) SetCommonHeaders(v map[string]*string) *CheckUserIsGroupMemberShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CheckUserIsGroupMemberShrinkHeaders) SetAccountContextShrink(v string) *CheckUserIsGroupMemberShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CheckUserIsGroupMemberRequest struct {
	// example:
	//
	// cidB8Pz*******FIWPv2PMA==
	OpenConversationId *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
}

func (s CheckUserIsGroupMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckUserIsGroupMemberRequest) GoString() string {
	return s.String()
}

func (s *CheckUserIsGroupMemberRequest) SetOpenConversationId(v string) *CheckUserIsGroupMemberRequest {
	s.OpenConversationId = &v
	return s
}

type CheckUserIsGroupMemberResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CheckUserIsGroupMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckUserIsGroupMemberResponseBody) GoString() string {
	return s.String()
}

func (s *CheckUserIsGroupMemberResponseBody) SetRequestId(v string) *CheckUserIsGroupMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckUserIsGroupMemberResponseBody) SetResult(v bool) *CheckUserIsGroupMemberResponseBody {
	s.Result = &v
	return s
}

func (s *CheckUserIsGroupMemberResponseBody) SetVendorRequestId(v string) *CheckUserIsGroupMemberResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CheckUserIsGroupMemberResponseBody) SetVendorType(v string) *CheckUserIsGroupMemberResponseBody {
	s.VendorType = &v
	return s
}

type CheckUserIsGroupMemberResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckUserIsGroupMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckUserIsGroupMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckUserIsGroupMemberResponse) GoString() string {
	return s.String()
}

func (s *CheckUserIsGroupMemberResponse) SetHeaders(v map[string]*string) *CheckUserIsGroupMemberResponse {
	s.Headers = v
	return s
}

func (s *CheckUserIsGroupMemberResponse) SetStatusCode(v int32) *CheckUserIsGroupMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckUserIsGroupMemberResponse) SetBody(v *CheckUserIsGroupMemberResponseBody) *CheckUserIsGroupMemberResponse {
	s.Body = v
	return s
}

type ClearHeaders struct {
	CommonHeaders  map[string]*string          `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ClearHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ClearHeaders) String() string {
	return tea.Prettify(s)
}

func (s ClearHeaders) GoString() string {
	return s.String()
}

func (s *ClearHeaders) SetCommonHeaders(v map[string]*string) *ClearHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ClearHeaders) SetAccountContext(v *ClearHeadersAccountContext) *ClearHeaders {
	s.AccountContext = v
	return s
}

type ClearHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ClearHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ClearHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ClearHeadersAccountContext) SetAccountId(v string) *ClearHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ClearShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ClearShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ClearShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ClearShrinkHeaders) SetCommonHeaders(v map[string]*string) *ClearShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ClearShrinkHeaders) SetAccountContextShrink(v string) *ClearShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ClearRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                    `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *ClearRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s ClearRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearRequest) GoString() string {
	return s.String()
}

func (s *ClearRequest) SetRangeAddress(v string) *ClearRequest {
	s.RangeAddress = &v
	return s
}

func (s *ClearRequest) SetSheetId(v string) *ClearRequest {
	s.SheetId = &v
	return s
}

func (s *ClearRequest) SetTenantContext(v *ClearRequestTenantContext) *ClearRequest {
	s.TenantContext = v
	return s
}

func (s *ClearRequest) SetWorkbookId(v string) *ClearRequest {
	s.WorkbookId = &v
	return s
}

type ClearRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ClearRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ClearRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ClearRequestTenantContext) SetTenantId(v string) *ClearRequestTenantContext {
	s.TenantId = &v
	return s
}

type ClearShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s ClearShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearShrinkRequest) GoString() string {
	return s.String()
}

func (s *ClearShrinkRequest) SetRangeAddress(v string) *ClearShrinkRequest {
	s.RangeAddress = &v
	return s
}

func (s *ClearShrinkRequest) SetSheetId(v string) *ClearShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *ClearShrinkRequest) SetTenantContextShrink(v string) *ClearShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *ClearShrinkRequest) SetWorkbookId(v string) *ClearShrinkRequest {
	s.WorkbookId = &v
	return s
}

type ClearResponseBody struct {
	// example:
	//
	// A1:B2
	A1Notation *string `json:"a1Notation,omitempty" xml:"a1Notation,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ClearResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearResponseBody) GoString() string {
	return s.String()
}

func (s *ClearResponseBody) SetA1Notation(v string) *ClearResponseBody {
	s.A1Notation = &v
	return s
}

func (s *ClearResponseBody) SetRequestId(v string) *ClearResponseBody {
	s.RequestId = &v
	return s
}

type ClearResponse struct {
	Headers    map[string]*string `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ClearResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ClearResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearResponse) GoString() string {
	return s.String()
}

func (s *ClearResponse) SetHeaders(v map[string]*string) *ClearResponse {
	s.Headers = v
	return s
}

func (s *ClearResponse) SetStatusCode(v int32) *ClearResponse {
	s.StatusCode = &v
	return s
}

func (s *ClearResponse) SetBody(v *ClearResponseBody) *ClearResponse {
	s.Body = v
	return s
}

type ClearDataHeaders struct {
	CommonHeaders  map[string]*string              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ClearDataHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ClearDataHeaders) String() string {
	return tea.Prettify(s)
}

func (s ClearDataHeaders) GoString() string {
	return s.String()
}

func (s *ClearDataHeaders) SetCommonHeaders(v map[string]*string) *ClearDataHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ClearDataHeaders) SetAccountContext(v *ClearDataHeadersAccountContext) *ClearDataHeaders {
	s.AccountContext = v
	return s
}

type ClearDataHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ClearDataHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ClearDataHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ClearDataHeadersAccountContext) SetAccountId(v string) *ClearDataHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ClearDataShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ClearDataShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ClearDataShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ClearDataShrinkHeaders) SetCommonHeaders(v map[string]*string) *ClearDataShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ClearDataShrinkHeaders) SetAccountContextShrink(v string) *ClearDataShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ClearDataRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                        `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *ClearDataRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s ClearDataRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearDataRequest) GoString() string {
	return s.String()
}

func (s *ClearDataRequest) SetRangeAddress(v string) *ClearDataRequest {
	s.RangeAddress = &v
	return s
}

func (s *ClearDataRequest) SetSheetId(v string) *ClearDataRequest {
	s.SheetId = &v
	return s
}

func (s *ClearDataRequest) SetTenantContext(v *ClearDataRequestTenantContext) *ClearDataRequest {
	s.TenantContext = v
	return s
}

func (s *ClearDataRequest) SetWorkbookId(v string) *ClearDataRequest {
	s.WorkbookId = &v
	return s
}

type ClearDataRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ClearDataRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ClearDataRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ClearDataRequestTenantContext) SetTenantId(v string) *ClearDataRequestTenantContext {
	s.TenantId = &v
	return s
}

type ClearDataShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s ClearDataShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ClearDataShrinkRequest) GoString() string {
	return s.String()
}

func (s *ClearDataShrinkRequest) SetRangeAddress(v string) *ClearDataShrinkRequest {
	s.RangeAddress = &v
	return s
}

func (s *ClearDataShrinkRequest) SetSheetId(v string) *ClearDataShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *ClearDataShrinkRequest) SetTenantContextShrink(v string) *ClearDataShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *ClearDataShrinkRequest) SetWorkbookId(v string) *ClearDataShrinkRequest {
	s.WorkbookId = &v
	return s
}

type ClearDataResponseBody struct {
	// example:
	//
	// A1:B2
	A1Notation *string `json:"a1Notation,omitempty" xml:"a1Notation,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ClearDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ClearDataResponseBody) GoString() string {
	return s.String()
}

func (s *ClearDataResponseBody) SetA1Notation(v string) *ClearDataResponseBody {
	s.A1Notation = &v
	return s
}

func (s *ClearDataResponseBody) SetRequestId(v string) *ClearDataResponseBody {
	s.RequestId = &v
	return s
}

type ClearDataResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ClearDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ClearDataResponse) String() string {
	return tea.Prettify(s)
}

func (s ClearDataResponse) GoString() string {
	return s.String()
}

func (s *ClearDataResponse) SetHeaders(v map[string]*string) *ClearDataResponse {
	s.Headers = v
	return s
}

func (s *ClearDataResponse) SetStatusCode(v int32) *ClearDataResponse {
	s.StatusCode = &v
	return s
}

func (s *ClearDataResponse) SetBody(v *ClearDataResponseBody) *ClearDataResponse {
	s.Body = v
	return s
}

type CloseVideoConferenceHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CloseVideoConferenceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CloseVideoConferenceHeaders) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceHeaders) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceHeaders) SetCommonHeaders(v map[string]*string) *CloseVideoConferenceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CloseVideoConferenceHeaders) SetAccountContext(v *CloseVideoConferenceHeadersAccountContext) *CloseVideoConferenceHeaders {
	s.AccountContext = v
	return s
}

type CloseVideoConferenceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CloseVideoConferenceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceHeadersAccountContext) SetAccountId(v string) *CloseVideoConferenceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CloseVideoConferenceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CloseVideoConferenceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceShrinkHeaders) SetCommonHeaders(v map[string]*string) *CloseVideoConferenceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CloseVideoConferenceShrinkHeaders) SetAccountContextShrink(v string) *CloseVideoConferenceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CloseVideoConferenceRequest struct {
	TenantContext *CloseVideoConferenceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s CloseVideoConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceRequest) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceRequest) SetTenantContext(v *CloseVideoConferenceRequestTenantContext) *CloseVideoConferenceRequest {
	s.TenantContext = v
	return s
}

func (s *CloseVideoConferenceRequest) SetConferenceId(v string) *CloseVideoConferenceRequest {
	s.ConferenceId = &v
	return s
}

type CloseVideoConferenceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CloseVideoConferenceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceRequestTenantContext) SetTenantId(v string) *CloseVideoConferenceRequestTenantContext {
	s.TenantId = &v
	return s
}

type CloseVideoConferenceShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s CloseVideoConferenceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceShrinkRequest) SetTenantContextShrink(v string) *CloseVideoConferenceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CloseVideoConferenceShrinkRequest) SetConferenceId(v string) *CloseVideoConferenceShrinkRequest {
	s.ConferenceId = &v
	return s
}

type CloseVideoConferenceResponseBody struct {
	// example:
	//
	// success
	Cause *string `json:"cause,omitempty" xml:"cause,omitempty"`
	// example:
	//
	// 200
	Code *int64 `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CloseVideoConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceResponseBody) SetCause(v string) *CloseVideoConferenceResponseBody {
	s.Cause = &v
	return s
}

func (s *CloseVideoConferenceResponseBody) SetCode(v int64) *CloseVideoConferenceResponseBody {
	s.Code = &v
	return s
}

func (s *CloseVideoConferenceResponseBody) SetRequestId(v string) *CloseVideoConferenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloseVideoConferenceResponseBody) SetVendorRequestId(v string) *CloseVideoConferenceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CloseVideoConferenceResponseBody) SetVendorType(v string) *CloseVideoConferenceResponseBody {
	s.VendorType = &v
	return s
}

type CloseVideoConferenceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloseVideoConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloseVideoConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s CloseVideoConferenceResponse) GoString() string {
	return s.String()
}

func (s *CloseVideoConferenceResponse) SetHeaders(v map[string]*string) *CloseVideoConferenceResponse {
	s.Headers = v
	return s
}

func (s *CloseVideoConferenceResponse) SetStatusCode(v int32) *CloseVideoConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *CloseVideoConferenceResponse) SetBody(v *CloseVideoConferenceResponseBody) *CloseVideoConferenceResponse {
	s.Body = v
	return s
}

type CommentListReportHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CommentListReportHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CommentListReportHeaders) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportHeaders) GoString() string {
	return s.String()
}

func (s *CommentListReportHeaders) SetCommonHeaders(v map[string]*string) *CommentListReportHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CommentListReportHeaders) SetAccountContext(v *CommentListReportHeadersAccountContext) *CommentListReportHeaders {
	s.AccountContext = v
	return s
}

type CommentListReportHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CommentListReportHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CommentListReportHeadersAccountContext) SetAccountId(v string) *CommentListReportHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CommentListReportShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CommentListReportShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CommentListReportShrinkHeaders) SetCommonHeaders(v map[string]*string) *CommentListReportShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CommentListReportShrinkHeaders) SetAccountContextShrink(v string) *CommentListReportShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CommentListReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size          *int64                                 `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContext *CommentListReportRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s CommentListReportRequest) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportRequest) GoString() string {
	return s.String()
}

func (s *CommentListReportRequest) SetOffset(v int64) *CommentListReportRequest {
	s.Offset = &v
	return s
}

func (s *CommentListReportRequest) SetReportId(v string) *CommentListReportRequest {
	s.ReportId = &v
	return s
}

func (s *CommentListReportRequest) SetSize(v int64) *CommentListReportRequest {
	s.Size = &v
	return s
}

func (s *CommentListReportRequest) SetTenantContext(v *CommentListReportRequestTenantContext) *CommentListReportRequest {
	s.TenantContext = v
	return s
}

type CommentListReportRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CommentListReportRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CommentListReportRequestTenantContext) SetTenantId(v string) *CommentListReportRequestTenantContext {
	s.TenantId = &v
	return s
}

type CommentListReportShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size                *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s CommentListReportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportShrinkRequest) GoString() string {
	return s.String()
}

func (s *CommentListReportShrinkRequest) SetOffset(v int64) *CommentListReportShrinkRequest {
	s.Offset = &v
	return s
}

func (s *CommentListReportShrinkRequest) SetReportId(v string) *CommentListReportShrinkRequest {
	s.ReportId = &v
	return s
}

func (s *CommentListReportShrinkRequest) SetSize(v int64) *CommentListReportShrinkRequest {
	s.Size = &v
	return s
}

func (s *CommentListReportShrinkRequest) SetTenantContextShrink(v string) *CommentListReportShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type CommentListReportResponseBody struct {
	Comments []*CommentListReportResponseBodyComments `json:"comments,omitempty" xml:"comments,omitempty" type:"Repeated"`
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 1568442466000
	NextCursor *int64 `json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s CommentListReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportResponseBody) GoString() string {
	return s.String()
}

func (s *CommentListReportResponseBody) SetComments(v []*CommentListReportResponseBodyComments) *CommentListReportResponseBody {
	s.Comments = v
	return s
}

func (s *CommentListReportResponseBody) SetHasMore(v bool) *CommentListReportResponseBody {
	s.HasMore = &v
	return s
}

func (s *CommentListReportResponseBody) SetNextCursor(v int64) *CommentListReportResponseBody {
	s.NextCursor = &v
	return s
}

func (s *CommentListReportResponseBody) SetRequestId(v string) *CommentListReportResponseBody {
	s.RequestId = &v
	return s
}

type CommentListReportResponseBodyComments struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1678442466000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 012345
	Userid *string `json:"Userid,omitempty" xml:"Userid,omitempty"`
}

func (s CommentListReportResponseBodyComments) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportResponseBodyComments) GoString() string {
	return s.String()
}

func (s *CommentListReportResponseBodyComments) SetContent(v string) *CommentListReportResponseBodyComments {
	s.Content = &v
	return s
}

func (s *CommentListReportResponseBodyComments) SetCreateTime(v string) *CommentListReportResponseBodyComments {
	s.CreateTime = &v
	return s
}

func (s *CommentListReportResponseBodyComments) SetUserid(v string) *CommentListReportResponseBodyComments {
	s.Userid = &v
	return s
}

type CommentListReportResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CommentListReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CommentListReportResponse) String() string {
	return tea.Prettify(s)
}

func (s CommentListReportResponse) GoString() string {
	return s.String()
}

func (s *CommentListReportResponse) SetHeaders(v map[string]*string) *CommentListReportResponse {
	s.Headers = v
	return s
}

func (s *CommentListReportResponse) SetStatusCode(v int32) *CommentListReportResponse {
	s.StatusCode = &v
	return s
}

func (s *CommentListReportResponse) SetBody(v *CommentListReportResponseBody) *CommentListReportResponse {
	s.Body = v
	return s
}

type CommitFileHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CommitFileHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CommitFileHeaders) String() string {
	return tea.Prettify(s)
}

func (s CommitFileHeaders) GoString() string {
	return s.String()
}

func (s *CommitFileHeaders) SetCommonHeaders(v map[string]*string) *CommitFileHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CommitFileHeaders) SetAccountContext(v *CommitFileHeadersAccountContext) *CommitFileHeaders {
	s.AccountContext = v
	return s
}

type CommitFileHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CommitFileHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CommitFileHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CommitFileHeadersAccountContext) SetAccountId(v string) *CommitFileHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CommitFileShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CommitFileShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CommitFileShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CommitFileShrinkHeaders) SetCommonHeaders(v map[string]*string) *CommitFileShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CommitFileShrinkHeaders) SetAccountContextShrink(v string) *CommitFileShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CommitFileRequest struct {
	// example:
	//
	// None
	Name   *string                  `json:"Name,omitempty" xml:"Name,omitempty"`
	Option *CommitFileRequestOption `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	// example:
	//
	// dentryUuid
	ParentDentryUuid *string                         `json:"ParentDentryUuid,omitempty" xml:"ParentDentryUuid,omitempty"`
	TenantContext    *CommitFileRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// upload_key
	UploadKey *string `json:"UploadKey,omitempty" xml:"UploadKey,omitempty"`
}

func (s CommitFileRequest) String() string {
	return tea.Prettify(s)
}

func (s CommitFileRequest) GoString() string {
	return s.String()
}

func (s *CommitFileRequest) SetName(v string) *CommitFileRequest {
	s.Name = &v
	return s
}

func (s *CommitFileRequest) SetOption(v *CommitFileRequestOption) *CommitFileRequest {
	s.Option = v
	return s
}

func (s *CommitFileRequest) SetParentDentryUuid(v string) *CommitFileRequest {
	s.ParentDentryUuid = &v
	return s
}

func (s *CommitFileRequest) SetTenantContext(v *CommitFileRequestTenantContext) *CommitFileRequest {
	s.TenantContext = v
	return s
}

func (s *CommitFileRequest) SetUploadKey(v string) *CommitFileRequest {
	s.UploadKey = &v
	return s
}

type CommitFileRequestOption struct {
	AppProperties []*CommitFileRequestOptionAppProperties `json:"AppProperties,omitempty" xml:"AppProperties,omitempty" type:"Repeated"`
	// example:
	//
	// AUTO_RENAME
	ConflictStrategy *string `json:"ConflictStrategy,omitempty" xml:"ConflictStrategy,omitempty"`
	// example:
	//
	// false
	ConvertToOnlineDoc *bool `json:"ConvertToOnlineDoc,omitempty" xml:"ConvertToOnlineDoc,omitempty"`
	// example:
	//
	// DOC
	ConvertToOnlineDocTargetDocumentType *string `json:"ConvertToOnlineDocTargetDocumentType,omitempty" xml:"ConvertToOnlineDocTargetDocumentType,omitempty"`
	// example:
	//
	// 512
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CommitFileRequestOption) String() string {
	return tea.Prettify(s)
}

func (s CommitFileRequestOption) GoString() string {
	return s.String()
}

func (s *CommitFileRequestOption) SetAppProperties(v []*CommitFileRequestOptionAppProperties) *CommitFileRequestOption {
	s.AppProperties = v
	return s
}

func (s *CommitFileRequestOption) SetConflictStrategy(v string) *CommitFileRequestOption {
	s.ConflictStrategy = &v
	return s
}

func (s *CommitFileRequestOption) SetConvertToOnlineDoc(v bool) *CommitFileRequestOption {
	s.ConvertToOnlineDoc = &v
	return s
}

func (s *CommitFileRequestOption) SetConvertToOnlineDocTargetDocumentType(v string) *CommitFileRequestOption {
	s.ConvertToOnlineDocTargetDocumentType = &v
	return s
}

func (s *CommitFileRequestOption) SetSize(v int64) *CommitFileRequestOption {
	s.Size = &v
	return s
}

type CommitFileRequestOptionAppProperties struct {
	// example:
	//
	// property_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// property_value
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
	// example:
	//
	// PUBLIC
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
}

func (s CommitFileRequestOptionAppProperties) String() string {
	return tea.Prettify(s)
}

func (s CommitFileRequestOptionAppProperties) GoString() string {
	return s.String()
}

func (s *CommitFileRequestOptionAppProperties) SetName(v string) *CommitFileRequestOptionAppProperties {
	s.Name = &v
	return s
}

func (s *CommitFileRequestOptionAppProperties) SetValue(v string) *CommitFileRequestOptionAppProperties {
	s.Value = &v
	return s
}

func (s *CommitFileRequestOptionAppProperties) SetVisibility(v string) *CommitFileRequestOptionAppProperties {
	s.Visibility = &v
	return s
}

type CommitFileRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CommitFileRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CommitFileRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CommitFileRequestTenantContext) SetTenantId(v string) *CommitFileRequestTenantContext {
	s.TenantId = &v
	return s
}

type CommitFileShrinkRequest struct {
	// example:
	//
	// None
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OptionShrink *string `json:"Option,omitempty" xml:"Option,omitempty"`
	// example:
	//
	// dentryUuid
	ParentDentryUuid    *string `json:"ParentDentryUuid,omitempty" xml:"ParentDentryUuid,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// upload_key
	UploadKey *string `json:"UploadKey,omitempty" xml:"UploadKey,omitempty"`
}

func (s CommitFileShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CommitFileShrinkRequest) GoString() string {
	return s.String()
}

func (s *CommitFileShrinkRequest) SetName(v string) *CommitFileShrinkRequest {
	s.Name = &v
	return s
}

func (s *CommitFileShrinkRequest) SetOptionShrink(v string) *CommitFileShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *CommitFileShrinkRequest) SetParentDentryUuid(v string) *CommitFileShrinkRequest {
	s.ParentDentryUuid = &v
	return s
}

func (s *CommitFileShrinkRequest) SetTenantContextShrink(v string) *CommitFileShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CommitFileShrinkRequest) SetUploadKey(v string) *CommitFileShrinkRequest {
	s.UploadKey = &v
	return s
}

type CommitFileResponseBody struct {
	Dentry *CommitFileResponseBodyDentry `json:"dentry,omitempty" xml:"dentry,omitempty" type:"Struct"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CommitFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CommitFileResponseBody) GoString() string {
	return s.String()
}

func (s *CommitFileResponseBody) SetDentry(v *CommitFileResponseBodyDentry) *CommitFileResponseBody {
	s.Dentry = v
	return s
}

func (s *CommitFileResponseBody) SetRequestId(v string) *CommitFileResponseBody {
	s.RequestId = &v
	return s
}

func (s *CommitFileResponseBody) SetVendorRequestId(v string) *CommitFileResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CommitFileResponseBody) SetVendorType(v string) *CommitFileResponseBody {
	s.VendorType = &v
	return s
}

type CommitFileResponseBodyDentry struct {
	AppProperties map[string][]*DentryAppPropertiesValue `json:"AppProperties,omitempty" xml:"AppProperties,omitempty"`
	// example:
	//
	// DOCUMENT
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 2022-01-01T10:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// creator_id
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// txt
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// dentry_id
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2022-01-01T10:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// modifier_id
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// dentry_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// parent_id
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// PUBLIC_OSS_PARTITION
	PartitionType *string `json:"PartitionType,omitempty" xml:"PartitionType,omitempty"`
	// example:
	//
	// dentry_path
	Path       *string                                 `json:"Path,omitempty" xml:"Path,omitempty"`
	Properties *CommitFileResponseBodyDentryProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	// example:
	//
	// 512
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// space_id
	SpaceId *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	// example:
	//
	// NORMAL
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// DINGTALK
	StorageDriver *string                                `json:"StorageDriver,omitempty" xml:"StorageDriver,omitempty"`
	Thumbnail     *CommitFileResponseBodyDentryThumbnail `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty" type:"Struct"`
	// example:
	//
	// FILE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// uuid
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s CommitFileResponseBodyDentry) String() string {
	return tea.Prettify(s)
}

func (s CommitFileResponseBodyDentry) GoString() string {
	return s.String()
}

func (s *CommitFileResponseBodyDentry) SetAppProperties(v map[string][]*DentryAppPropertiesValue) *CommitFileResponseBodyDentry {
	s.AppProperties = v
	return s
}

func (s *CommitFileResponseBodyDentry) SetCategory(v string) *CommitFileResponseBodyDentry {
	s.Category = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetCreateTime(v string) *CommitFileResponseBodyDentry {
	s.CreateTime = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetCreatorId(v string) *CommitFileResponseBodyDentry {
	s.CreatorId = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetExtension(v string) *CommitFileResponseBodyDentry {
	s.Extension = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetId(v string) *CommitFileResponseBodyDentry {
	s.Id = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetModifiedTime(v string) *CommitFileResponseBodyDentry {
	s.ModifiedTime = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetModifierId(v string) *CommitFileResponseBodyDentry {
	s.ModifierId = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetName(v string) *CommitFileResponseBodyDentry {
	s.Name = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetParentId(v string) *CommitFileResponseBodyDentry {
	s.ParentId = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetPartitionType(v string) *CommitFileResponseBodyDentry {
	s.PartitionType = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetPath(v string) *CommitFileResponseBodyDentry {
	s.Path = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetProperties(v *CommitFileResponseBodyDentryProperties) *CommitFileResponseBodyDentry {
	s.Properties = v
	return s
}

func (s *CommitFileResponseBodyDentry) SetSize(v int64) *CommitFileResponseBodyDentry {
	s.Size = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetSpaceId(v string) *CommitFileResponseBodyDentry {
	s.SpaceId = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetStatus(v string) *CommitFileResponseBodyDentry {
	s.Status = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetStorageDriver(v string) *CommitFileResponseBodyDentry {
	s.StorageDriver = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetThumbnail(v *CommitFileResponseBodyDentryThumbnail) *CommitFileResponseBodyDentry {
	s.Thumbnail = v
	return s
}

func (s *CommitFileResponseBodyDentry) SetType(v string) *CommitFileResponseBodyDentry {
	s.Type = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetUuid(v string) *CommitFileResponseBodyDentry {
	s.Uuid = &v
	return s
}

func (s *CommitFileResponseBodyDentry) SetVersion(v int64) *CommitFileResponseBodyDentry {
	s.Version = &v
	return s
}

type CommitFileResponseBodyDentryProperties struct {
	// example:
	//
	// true
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
}

func (s CommitFileResponseBodyDentryProperties) String() string {
	return tea.Prettify(s)
}

func (s CommitFileResponseBodyDentryProperties) GoString() string {
	return s.String()
}

func (s *CommitFileResponseBodyDentryProperties) SetReadOnly(v bool) *CommitFileResponseBodyDentryProperties {
	s.ReadOnly = &v
	return s
}

type CommitFileResponseBodyDentryThumbnail struct {
	// example:
	//
	// 64
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 64
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s CommitFileResponseBodyDentryThumbnail) String() string {
	return tea.Prettify(s)
}

func (s CommitFileResponseBodyDentryThumbnail) GoString() string {
	return s.String()
}

func (s *CommitFileResponseBodyDentryThumbnail) SetHeight(v int32) *CommitFileResponseBodyDentryThumbnail {
	s.Height = &v
	return s
}

func (s *CommitFileResponseBodyDentryThumbnail) SetUrl(v string) *CommitFileResponseBodyDentryThumbnail {
	s.Url = &v
	return s
}

func (s *CommitFileResponseBodyDentryThumbnail) SetWidth(v int32) *CommitFileResponseBodyDentryThumbnail {
	s.Width = &v
	return s
}

type CommitFileResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CommitFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CommitFileResponse) String() string {
	return tea.Prettify(s)
}

func (s CommitFileResponse) GoString() string {
	return s.String()
}

func (s *CommitFileResponse) SetHeaders(v map[string]*string) *CommitFileResponse {
	s.Headers = v
	return s
}

func (s *CommitFileResponse) SetStatusCode(v int32) *CommitFileResponse {
	s.StatusCode = &v
	return s
}

func (s *CommitFileResponse) SetBody(v *CommitFileResponseBody) *CommitFileResponse {
	s.Body = v
	return s
}

type CreateDeliveryPlanHeaders struct {
	CommonHeaders  map[string]*string                       `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateDeliveryPlanHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateDeliveryPlanHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanHeaders) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanHeaders) SetCommonHeaders(v map[string]*string) *CreateDeliveryPlanHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateDeliveryPlanHeaders) SetAccountContext(v *CreateDeliveryPlanHeadersAccountContext) *CreateDeliveryPlanHeaders {
	s.AccountContext = v
	return s
}

type CreateDeliveryPlanHeadersAccountContext struct {
	// example:
	//
	// ba3a9b612345678d8fedf544ef69d19e
	UserToken *string `json:"userToken,omitempty" xml:"userToken,omitempty"`
}

func (s CreateDeliveryPlanHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanHeadersAccountContext) SetUserToken(v string) *CreateDeliveryPlanHeadersAccountContext {
	s.UserToken = &v
	return s
}

type CreateDeliveryPlanShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateDeliveryPlanShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateDeliveryPlanShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateDeliveryPlanShrinkHeaders) SetAccountContextShrink(v string) *CreateDeliveryPlanShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateDeliveryPlanRequest struct {
	Content map[string]interface{} `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1699265024987
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1028
	ResId *string `json:"ResId,omitempty" xml:"ResId,omitempty"`
	// example:
	//
	// 1699265024987
	StartTime     *int64                                  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *CreateDeliveryPlanRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	UserIdList    []*string                               `json:"UserIdList,omitempty" xml:"UserIdList,omitempty" type:"Repeated"`
}

func (s CreateDeliveryPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanRequest) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanRequest) SetContent(v map[string]interface{}) *CreateDeliveryPlanRequest {
	s.Content = v
	return s
}

func (s *CreateDeliveryPlanRequest) SetEndTime(v int64) *CreateDeliveryPlanRequest {
	s.EndTime = &v
	return s
}

func (s *CreateDeliveryPlanRequest) SetResId(v string) *CreateDeliveryPlanRequest {
	s.ResId = &v
	return s
}

func (s *CreateDeliveryPlanRequest) SetStartTime(v int64) *CreateDeliveryPlanRequest {
	s.StartTime = &v
	return s
}

func (s *CreateDeliveryPlanRequest) SetTenantContext(v *CreateDeliveryPlanRequestTenantContext) *CreateDeliveryPlanRequest {
	s.TenantContext = v
	return s
}

func (s *CreateDeliveryPlanRequest) SetUserIdList(v []*string) *CreateDeliveryPlanRequest {
	s.UserIdList = v
	return s
}

type CreateDeliveryPlanRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateDeliveryPlanRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanRequestTenantContext) SetTenantId(v string) *CreateDeliveryPlanRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateDeliveryPlanShrinkRequest struct {
	ContentShrink *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1699265024987
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1028
	ResId *string `json:"ResId,omitempty" xml:"ResId,omitempty"`
	// example:
	//
	// 1699265024987
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	UserIdListShrink    *string `json:"UserIdList,omitempty" xml:"UserIdList,omitempty"`
}

func (s CreateDeliveryPlanShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanShrinkRequest) SetContentShrink(v string) *CreateDeliveryPlanShrinkRequest {
	s.ContentShrink = &v
	return s
}

func (s *CreateDeliveryPlanShrinkRequest) SetEndTime(v int64) *CreateDeliveryPlanShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *CreateDeliveryPlanShrinkRequest) SetResId(v string) *CreateDeliveryPlanShrinkRequest {
	s.ResId = &v
	return s
}

func (s *CreateDeliveryPlanShrinkRequest) SetStartTime(v int64) *CreateDeliveryPlanShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *CreateDeliveryPlanShrinkRequest) SetTenantContextShrink(v string) *CreateDeliveryPlanShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateDeliveryPlanShrinkRequest) SetUserIdListShrink(v string) *CreateDeliveryPlanShrinkRequest {
	s.UserIdListShrink = &v
	return s
}

type CreateDeliveryPlanResponseBody struct {
	// example:
	//
	// []
	Arguments []interface{} `json:"arguments,omitempty" xml:"arguments,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CreateDeliveryPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanResponseBody) SetArguments(v []interface{}) *CreateDeliveryPlanResponseBody {
	s.Arguments = v
	return s
}

func (s *CreateDeliveryPlanResponseBody) SetRequestId(v string) *CreateDeliveryPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDeliveryPlanResponseBody) SetSuccess(v bool) *CreateDeliveryPlanResponseBody {
	s.Success = &v
	return s
}

func (s *CreateDeliveryPlanResponseBody) SetVendorRequestId(v string) *CreateDeliveryPlanResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CreateDeliveryPlanResponseBody) SetVendorType(v string) *CreateDeliveryPlanResponseBody {
	s.VendorType = &v
	return s
}

type CreateDeliveryPlanResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDeliveryPlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDeliveryPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDeliveryPlanResponse) GoString() string {
	return s.String()
}

func (s *CreateDeliveryPlanResponse) SetHeaders(v map[string]*string) *CreateDeliveryPlanResponse {
	s.Headers = v
	return s
}

func (s *CreateDeliveryPlanResponse) SetStatusCode(v int32) *CreateDeliveryPlanResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDeliveryPlanResponse) SetBody(v *CreateDeliveryPlanResponseBody) *CreateDeliveryPlanResponse {
	s.Body = v
	return s
}

type CreateDingtalkPersonalTodoTaskHeaders struct {
	CommonHeaders  map[string]*string                                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateDingtalkPersonalTodoTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateDingtalkPersonalTodoTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskHeaders) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskHeaders) SetCommonHeaders(v map[string]*string) *CreateDingtalkPersonalTodoTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskHeaders) SetAccountContext(v *CreateDingtalkPersonalTodoTaskHeadersAccountContext) *CreateDingtalkPersonalTodoTaskHeaders {
	s.AccountContext = v
	return s
}

type CreateDingtalkPersonalTodoTaskHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskHeadersAccountContext) SetAccountId(v string) *CreateDingtalkPersonalTodoTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateDingtalkPersonalTodoTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateDingtalkPersonalTodoTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkHeaders) SetAccountContextShrink(v string) *CreateDingtalkPersonalTodoTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateDingtalkPersonalTodoTaskRequest struct {
	// example:
	//
	// 待办备注信息
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 1703750708595
	DueTime *int64 `json:"DueTime,omitempty" xml:"DueTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [ "012345" ]
	ExecutorIds   []*string                                           `json:"ExecutorIds,omitempty" xml:"ExecutorIds,omitempty" type:"Repeated"`
	NotifyConfigs *CreateDingtalkPersonalTodoTaskRequestNotifyConfigs `json:"NotifyConfigs,omitempty" xml:"NotifyConfigs,omitempty" type:"Struct"`
	// example:
	//
	// [ "012345" ]
	ParticipantIds []*string `json:"ParticipantIds,omitempty" xml:"ParticipantIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 待办标题
	Subject       *string                                             `json:"Subject,omitempty" xml:"Subject,omitempty"`
	TenantContext *CreateDingtalkPersonalTodoTaskRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// 用户token
	UserToken *string `json:"UserToken,omitempty" xml:"UserToken,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetDescription(v string) *CreateDingtalkPersonalTodoTaskRequest {
	s.Description = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetDueTime(v int64) *CreateDingtalkPersonalTodoTaskRequest {
	s.DueTime = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetExecutorIds(v []*string) *CreateDingtalkPersonalTodoTaskRequest {
	s.ExecutorIds = v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetNotifyConfigs(v *CreateDingtalkPersonalTodoTaskRequestNotifyConfigs) *CreateDingtalkPersonalTodoTaskRequest {
	s.NotifyConfigs = v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetParticipantIds(v []*string) *CreateDingtalkPersonalTodoTaskRequest {
	s.ParticipantIds = v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetSubject(v string) *CreateDingtalkPersonalTodoTaskRequest {
	s.Subject = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetTenantContext(v *CreateDingtalkPersonalTodoTaskRequestTenantContext) *CreateDingtalkPersonalTodoTaskRequest {
	s.TenantContext = v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskRequest) SetUserToken(v string) *CreateDingtalkPersonalTodoTaskRequest {
	s.UserToken = &v
	return s
}

type CreateDingtalkPersonalTodoTaskRequestNotifyConfigs struct {
	// example:
	//
	// 1
	DingNotify *string `json:"DingNotify,omitempty" xml:"DingNotify,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskRequestNotifyConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskRequestNotifyConfigs) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskRequestNotifyConfigs) SetDingNotify(v string) *CreateDingtalkPersonalTodoTaskRequestNotifyConfigs {
	s.DingNotify = &v
	return s
}

type CreateDingtalkPersonalTodoTaskRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskRequestTenantContext) SetTenantId(v string) *CreateDingtalkPersonalTodoTaskRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateDingtalkPersonalTodoTaskShrinkRequest struct {
	// example:
	//
	// 待办备注信息
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 1703750708595
	DueTime *int64 `json:"DueTime,omitempty" xml:"DueTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [ "012345" ]
	ExecutorIdsShrink   *string `json:"ExecutorIds,omitempty" xml:"ExecutorIds,omitempty"`
	NotifyConfigsShrink *string `json:"NotifyConfigs,omitempty" xml:"NotifyConfigs,omitempty"`
	// example:
	//
	// [ "012345" ]
	ParticipantIdsShrink *string `json:"ParticipantIds,omitempty" xml:"ParticipantIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 待办标题
	Subject             *string `json:"Subject,omitempty" xml:"Subject,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// 用户token
	UserToken *string `json:"UserToken,omitempty" xml:"UserToken,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetDescription(v string) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetDueTime(v int64) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.DueTime = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetExecutorIdsShrink(v string) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.ExecutorIdsShrink = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetNotifyConfigsShrink(v string) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.NotifyConfigsShrink = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetParticipantIdsShrink(v string) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.ParticipantIdsShrink = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetSubject(v string) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.Subject = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetTenantContextShrink(v string) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskShrinkRequest) SetUserToken(v string) *CreateDingtalkPersonalTodoTaskShrinkRequest {
	s.UserToken = &v
	return s
}

type CreateDingtalkPersonalTodoTaskResponseBody struct {
	// example:
	//
	// 1703750708595
	CreatedTime *int64 `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// task123abc
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskResponseBody) SetCreatedTime(v int64) *CreateDingtalkPersonalTodoTaskResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskResponseBody) SetRequestId(v string) *CreateDingtalkPersonalTodoTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskResponseBody) SetTaskId(v string) *CreateDingtalkPersonalTodoTaskResponseBody {
	s.TaskId = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskResponseBody) SetVendorRequestId(v string) *CreateDingtalkPersonalTodoTaskResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskResponseBody) SetVendorType(v string) *CreateDingtalkPersonalTodoTaskResponseBody {
	s.VendorType = &v
	return s
}

type CreateDingtalkPersonalTodoTaskResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDingtalkPersonalTodoTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDingtalkPersonalTodoTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDingtalkPersonalTodoTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateDingtalkPersonalTodoTaskResponse) SetHeaders(v map[string]*string) *CreateDingtalkPersonalTodoTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskResponse) SetStatusCode(v int32) *CreateDingtalkPersonalTodoTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDingtalkPersonalTodoTaskResponse) SetBody(v *CreateDingtalkPersonalTodoTaskResponseBody) *CreateDingtalkPersonalTodoTaskResponse {
	s.Body = v
	return s
}

type CreateEventHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateEventHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateEventHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateEventHeaders) GoString() string {
	return s.String()
}

func (s *CreateEventHeaders) SetCommonHeaders(v map[string]*string) *CreateEventHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateEventHeaders) SetAccountContext(v *CreateEventHeadersAccountContext) *CreateEventHeaders {
	s.AccountContext = v
	return s
}

type CreateEventHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 208579
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateEventHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateEventHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateEventHeadersAccountContext) SetAccountId(v string) *CreateEventHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateEventShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateEventShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateEventShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateEventShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateEventShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateEventShrinkHeaders) SetAccountContextShrink(v string) *CreateEventShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateEventRequest struct {
	Attendees     []*CreateEventRequestAttendees     `json:"Attendees,omitempty" xml:"Attendees,omitempty" type:"Repeated"`
	CardInstances []*CreateEventRequestCardInstances `json:"CardInstances,omitempty" xml:"CardInstances,omitempty" type:"Repeated"`
	Description   *string                            `json:"Description,omitempty" xml:"Description,omitempty"`
	End           *CreateEventRequestEnd             `json:"End,omitempty" xml:"End,omitempty" type:"Struct"`
	Extra         map[string]*string                 `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// example:
	//
	// true
	IsAllDay          *bool                                `json:"IsAllDay,omitempty" xml:"IsAllDay,omitempty"`
	Location          *CreateEventRequestLocation          `json:"Location,omitempty" xml:"Location,omitempty" type:"Struct"`
	OnlineMeetingInfo *CreateEventRequestOnlineMeetingInfo `json:"OnlineMeetingInfo,omitempty" xml:"OnlineMeetingInfo,omitempty" type:"Struct"`
	Recurrence        *CreateEventRequestRecurrence        `json:"Recurrence,omitempty" xml:"Recurrence,omitempty" type:"Struct"`
	// if can be null:
	// false
	Reminders           []*CreateEventRequestReminders         `json:"Reminders,omitempty" xml:"Reminders,omitempty" type:"Repeated"`
	RichTextDescription *CreateEventRequestRichTextDescription `json:"RichTextDescription,omitempty" xml:"RichTextDescription,omitempty" type:"Struct"`
	// This parameter is required.
	Summary   *string                        `json:"Summary,omitempty" xml:"Summary,omitempty"`
	UiConfigs []*CreateEventRequestUiConfigs `json:"UiConfigs,omitempty" xml:"UiConfigs,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"calendarId,omitempty" xml:"calendarId,omitempty"`
	// This parameter is required.
	Start *CreateEventRequestStart `json:"start,omitempty" xml:"start,omitempty" type:"Struct"`
}

func (s CreateEventRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequest) GoString() string {
	return s.String()
}

func (s *CreateEventRequest) SetAttendees(v []*CreateEventRequestAttendees) *CreateEventRequest {
	s.Attendees = v
	return s
}

func (s *CreateEventRequest) SetCardInstances(v []*CreateEventRequestCardInstances) *CreateEventRequest {
	s.CardInstances = v
	return s
}

func (s *CreateEventRequest) SetDescription(v string) *CreateEventRequest {
	s.Description = &v
	return s
}

func (s *CreateEventRequest) SetEnd(v *CreateEventRequestEnd) *CreateEventRequest {
	s.End = v
	return s
}

func (s *CreateEventRequest) SetExtra(v map[string]*string) *CreateEventRequest {
	s.Extra = v
	return s
}

func (s *CreateEventRequest) SetIsAllDay(v bool) *CreateEventRequest {
	s.IsAllDay = &v
	return s
}

func (s *CreateEventRequest) SetLocation(v *CreateEventRequestLocation) *CreateEventRequest {
	s.Location = v
	return s
}

func (s *CreateEventRequest) SetOnlineMeetingInfo(v *CreateEventRequestOnlineMeetingInfo) *CreateEventRequest {
	s.OnlineMeetingInfo = v
	return s
}

func (s *CreateEventRequest) SetRecurrence(v *CreateEventRequestRecurrence) *CreateEventRequest {
	s.Recurrence = v
	return s
}

func (s *CreateEventRequest) SetReminders(v []*CreateEventRequestReminders) *CreateEventRequest {
	s.Reminders = v
	return s
}

func (s *CreateEventRequest) SetRichTextDescription(v *CreateEventRequestRichTextDescription) *CreateEventRequest {
	s.RichTextDescription = v
	return s
}

func (s *CreateEventRequest) SetSummary(v string) *CreateEventRequest {
	s.Summary = &v
	return s
}

func (s *CreateEventRequest) SetUiConfigs(v []*CreateEventRequestUiConfigs) *CreateEventRequest {
	s.UiConfigs = v
	return s
}

func (s *CreateEventRequest) SetCalendarId(v string) *CreateEventRequest {
	s.CalendarId = &v
	return s
}

func (s *CreateEventRequest) SetStart(v *CreateEventRequestStart) *CreateEventRequest {
	s.Start = v
	return s
}

type CreateEventRequestAttendees struct {
	// example:
	//
	// 7845
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsOptional *bool `json:"isOptional,omitempty" xml:"isOptional,omitempty"`
}

func (s CreateEventRequestAttendees) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestAttendees) GoString() string {
	return s.String()
}

func (s *CreateEventRequestAttendees) SetId(v string) *CreateEventRequestAttendees {
	s.Id = &v
	return s
}

func (s *CreateEventRequestAttendees) SetIsOptional(v bool) *CreateEventRequestAttendees {
	s.IsOptional = &v
	return s
}

type CreateEventRequestCardInstances struct {
	OutTrackId *string `json:"OutTrackId,omitempty" xml:"OutTrackId,omitempty"`
	Scenario   *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
}

func (s CreateEventRequestCardInstances) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestCardInstances) GoString() string {
	return s.String()
}

func (s *CreateEventRequestCardInstances) SetOutTrackId(v string) *CreateEventRequestCardInstances {
	s.OutTrackId = &v
	return s
}

func (s *CreateEventRequestCardInstances) SetScenario(v string) *CreateEventRequestCardInstances {
	s.Scenario = &v
	return s
}

type CreateEventRequestEnd struct {
	// example:
	//
	// "2020-09-21"
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
	// example:
	//
	// "2021-09-20T10:15:30+08:00"
	DateTime *string `json:"dateTime,omitempty" xml:"dateTime,omitempty"`
	// example:
	//
	// "Asia/Shanghai"
	TimeZone *string `json:"timeZone,omitempty" xml:"timeZone,omitempty"`
}

func (s CreateEventRequestEnd) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestEnd) GoString() string {
	return s.String()
}

func (s *CreateEventRequestEnd) SetDate(v string) *CreateEventRequestEnd {
	s.Date = &v
	return s
}

func (s *CreateEventRequestEnd) SetDateTime(v string) *CreateEventRequestEnd {
	s.DateTime = &v
	return s
}

func (s *CreateEventRequestEnd) SetTimeZone(v string) *CreateEventRequestEnd {
	s.TimeZone = &v
	return s
}

type CreateEventRequestLocation struct {
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
}

func (s CreateEventRequestLocation) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestLocation) GoString() string {
	return s.String()
}

func (s *CreateEventRequestLocation) SetDisplayName(v string) *CreateEventRequestLocation {
	s.DisplayName = &v
	return s
}

type CreateEventRequestOnlineMeetingInfo struct {
	// example:
	//
	// dingtalk
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateEventRequestOnlineMeetingInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestOnlineMeetingInfo) GoString() string {
	return s.String()
}

func (s *CreateEventRequestOnlineMeetingInfo) SetType(v string) *CreateEventRequestOnlineMeetingInfo {
	s.Type = &v
	return s
}

type CreateEventRequestRecurrence struct {
	Pattern *CreateEventRequestRecurrencePattern `json:"pattern,omitempty" xml:"pattern,omitempty" type:"Struct"`
	Range   *CreateEventRequestRecurrenceRange   `json:"range,omitempty" xml:"range,omitempty" type:"Struct"`
}

func (s CreateEventRequestRecurrence) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestRecurrence) GoString() string {
	return s.String()
}

func (s *CreateEventRequestRecurrence) SetPattern(v *CreateEventRequestRecurrencePattern) *CreateEventRequestRecurrence {
	s.Pattern = v
	return s
}

func (s *CreateEventRequestRecurrence) SetRange(v *CreateEventRequestRecurrenceRange) *CreateEventRequestRecurrence {
	s.Range = v
	return s
}

type CreateEventRequestRecurrencePattern struct {
	// example:
	//
	// 1
	DayOfMonth *int32 `json:"dayOfMonth,omitempty" xml:"dayOfMonth,omitempty"`
	// example:
	//
	// "monday"
	DaysOfWeek *string `json:"daysOfWeek,omitempty" xml:"daysOfWeek,omitempty"`
	// example:
	//
	// "last"
	Index *string `json:"index,omitempty" xml:"index,omitempty"`
	// example:
	//
	// 1
	Interval *int32 `json:"interval,omitempty" xml:"interval,omitempty"`
	// example:
	//
	// "daily"
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateEventRequestRecurrencePattern) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestRecurrencePattern) GoString() string {
	return s.String()
}

func (s *CreateEventRequestRecurrencePattern) SetDayOfMonth(v int32) *CreateEventRequestRecurrencePattern {
	s.DayOfMonth = &v
	return s
}

func (s *CreateEventRequestRecurrencePattern) SetDaysOfWeek(v string) *CreateEventRequestRecurrencePattern {
	s.DaysOfWeek = &v
	return s
}

func (s *CreateEventRequestRecurrencePattern) SetIndex(v string) *CreateEventRequestRecurrencePattern {
	s.Index = &v
	return s
}

func (s *CreateEventRequestRecurrencePattern) SetInterval(v int32) *CreateEventRequestRecurrencePattern {
	s.Interval = &v
	return s
}

func (s *CreateEventRequestRecurrencePattern) SetType(v string) *CreateEventRequestRecurrencePattern {
	s.Type = &v
	return s
}

type CreateEventRequestRecurrenceRange struct {
	// example:
	//
	// "2021-12-31T10:15:30+08:00"
	EndDate *string `json:"endDate,omitempty" xml:"endDate,omitempty"`
	// example:
	//
	// 5
	NumberOfOccurrences *int32 `json:"numberOfOccurrences,omitempty" xml:"numberOfOccurrences,omitempty"`
	// example:
	//
	// "endDate"
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s CreateEventRequestRecurrenceRange) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestRecurrenceRange) GoString() string {
	return s.String()
}

func (s *CreateEventRequestRecurrenceRange) SetEndDate(v string) *CreateEventRequestRecurrenceRange {
	s.EndDate = &v
	return s
}

func (s *CreateEventRequestRecurrenceRange) SetNumberOfOccurrences(v int32) *CreateEventRequestRecurrenceRange {
	s.NumberOfOccurrences = &v
	return s
}

func (s *CreateEventRequestRecurrenceRange) SetType(v string) *CreateEventRequestRecurrenceRange {
	s.Type = &v
	return s
}

type CreateEventRequestReminders struct {
	// example:
	//
	// dingtalk
	Method *string `json:"method,omitempty" xml:"method,omitempty"`
	// example:
	//
	// 15
	Minutes *int32 `json:"minutes,omitempty" xml:"minutes,omitempty"`
}

func (s CreateEventRequestReminders) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestReminders) GoString() string {
	return s.String()
}

func (s *CreateEventRequestReminders) SetMethod(v string) *CreateEventRequestReminders {
	s.Method = &v
	return s
}

func (s *CreateEventRequestReminders) SetMinutes(v int32) *CreateEventRequestReminders {
	s.Minutes = &v
	return s
}

type CreateEventRequestRichTextDescription struct {
	Text *string `json:"text,omitempty" xml:"text,omitempty"`
}

func (s CreateEventRequestRichTextDescription) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestRichTextDescription) GoString() string {
	return s.String()
}

func (s *CreateEventRequestRichTextDescription) SetText(v string) *CreateEventRequestRichTextDescription {
	s.Text = &v
	return s
}

type CreateEventRequestUiConfigs struct {
	// example:
	//
	// "updateEventButton"
	UiName *string `json:"uiName,omitempty" xml:"uiName,omitempty"`
	// example:
	//
	// "hide"
	UiStatus *string `json:"uiStatus,omitempty" xml:"uiStatus,omitempty"`
}

func (s CreateEventRequestUiConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestUiConfigs) GoString() string {
	return s.String()
}

func (s *CreateEventRequestUiConfigs) SetUiName(v string) *CreateEventRequestUiConfigs {
	s.UiName = &v
	return s
}

func (s *CreateEventRequestUiConfigs) SetUiStatus(v string) *CreateEventRequestUiConfigs {
	s.UiStatus = &v
	return s
}

type CreateEventRequestStart struct {
	// example:
	//
	// "2021-09-20"
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
	// example:
	//
	// "2021-09-20T10:15:30+08:00"
	DateTime *string `json:"dateTime,omitempty" xml:"dateTime,omitempty"`
	// example:
	//
	// "Asia/Shanghai"
	TimeZone *string `json:"timeZone,omitempty" xml:"timeZone,omitempty"`
}

func (s CreateEventRequestStart) String() string {
	return tea.Prettify(s)
}

func (s CreateEventRequestStart) GoString() string {
	return s.String()
}

func (s *CreateEventRequestStart) SetDate(v string) *CreateEventRequestStart {
	s.Date = &v
	return s
}

func (s *CreateEventRequestStart) SetDateTime(v string) *CreateEventRequestStart {
	s.DateTime = &v
	return s
}

func (s *CreateEventRequestStart) SetTimeZone(v string) *CreateEventRequestStart {
	s.TimeZone = &v
	return s
}

type CreateEventShrinkRequest struct {
	AttendeesShrink     *string `json:"Attendees,omitempty" xml:"Attendees,omitempty"`
	CardInstancesShrink *string `json:"CardInstances,omitempty" xml:"CardInstances,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndShrink           *string `json:"End,omitempty" xml:"End,omitempty"`
	ExtraShrink         *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// example:
	//
	// true
	IsAllDay                *bool   `json:"IsAllDay,omitempty" xml:"IsAllDay,omitempty"`
	LocationShrink          *string `json:"Location,omitempty" xml:"Location,omitempty"`
	OnlineMeetingInfoShrink *string `json:"OnlineMeetingInfo,omitempty" xml:"OnlineMeetingInfo,omitempty"`
	RecurrenceShrink        *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	// if can be null:
	// false
	RemindersShrink           *string `json:"Reminders,omitempty" xml:"Reminders,omitempty"`
	RichTextDescriptionShrink *string `json:"RichTextDescription,omitempty" xml:"RichTextDescription,omitempty"`
	// This parameter is required.
	Summary         *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	UiConfigsShrink *string `json:"UiConfigs,omitempty" xml:"UiConfigs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"calendarId,omitempty" xml:"calendarId,omitempty"`
	// This parameter is required.
	StartShrink *string `json:"start,omitempty" xml:"start,omitempty"`
}

func (s CreateEventShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEventShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateEventShrinkRequest) SetAttendeesShrink(v string) *CreateEventShrinkRequest {
	s.AttendeesShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetCardInstancesShrink(v string) *CreateEventShrinkRequest {
	s.CardInstancesShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetDescription(v string) *CreateEventShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateEventShrinkRequest) SetEndShrink(v string) *CreateEventShrinkRequest {
	s.EndShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetExtraShrink(v string) *CreateEventShrinkRequest {
	s.ExtraShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetIsAllDay(v bool) *CreateEventShrinkRequest {
	s.IsAllDay = &v
	return s
}

func (s *CreateEventShrinkRequest) SetLocationShrink(v string) *CreateEventShrinkRequest {
	s.LocationShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetOnlineMeetingInfoShrink(v string) *CreateEventShrinkRequest {
	s.OnlineMeetingInfoShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetRecurrenceShrink(v string) *CreateEventShrinkRequest {
	s.RecurrenceShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetRemindersShrink(v string) *CreateEventShrinkRequest {
	s.RemindersShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetRichTextDescriptionShrink(v string) *CreateEventShrinkRequest {
	s.RichTextDescriptionShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetSummary(v string) *CreateEventShrinkRequest {
	s.Summary = &v
	return s
}

func (s *CreateEventShrinkRequest) SetUiConfigsShrink(v string) *CreateEventShrinkRequest {
	s.UiConfigsShrink = &v
	return s
}

func (s *CreateEventShrinkRequest) SetCalendarId(v string) *CreateEventShrinkRequest {
	s.CalendarId = &v
	return s
}

func (s *CreateEventShrinkRequest) SetStartShrink(v string) *CreateEventShrinkRequest {
	s.StartShrink = &v
	return s
}

type CreateEventResponseBody struct {
	Attendees []*CreateEventResponseBodyAttendees `json:"attendees,omitempty" xml:"attendees,omitempty" type:"Repeated"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	CreateTime  *string                     `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Description *string                     `json:"description,omitempty" xml:"description,omitempty"`
	End         *CreateEventResponseBodyEnd `json:"end,omitempty" xml:"end,omitempty" type:"Struct"`
	// example:
	//
	// iiiP35sJadba8aBSgjrwPRKgiEiF
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsAllDay          *bool                                     `json:"isAllDay,omitempty" xml:"isAllDay,omitempty"`
	Location          *CreateEventResponseBodyLocation          `json:"location,omitempty" xml:"location,omitempty" type:"Struct"`
	OnlineMeetingInfo *CreateEventResponseBodyOnlineMeetingInfo `json:"onlineMeetingInfo,omitempty" xml:"onlineMeetingInfo,omitempty" type:"Struct"`
	Organizer         *CreateEventResponseBodyOrganizer         `json:"organizer,omitempty" xml:"organizer,omitempty" type:"Struct"`
	Recurrence        *CreateEventResponseBodyRecurrence        `json:"recurrence,omitempty" xml:"recurrence,omitempty" type:"Struct"`
	Reminders         []*CreateEventResponseBodyReminders       `json:"reminders,omitempty" xml:"reminders,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 4248DCC9-785F-5A14-8BE0-830FD52E1261
	RequestId           *string                                     `json:"requestId,omitempty" xml:"requestId,omitempty"`
	RichTextDescription *CreateEventResponseBodyRichTextDescription `json:"richTextDescription,omitempty" xml:"richTextDescription,omitempty" type:"Struct"`
	Start               *CreateEventResponseBodyStart               `json:"start,omitempty" xml:"start,omitempty" type:"Struct"`
	Summary             *string                                     `json:"summary,omitempty" xml:"summary,omitempty"`
	UiConfigs           []*CreateEventResponseBodyUiConfigs         `json:"uiConfigs,omitempty" xml:"uiConfigs,omitempty" type:"Repeated"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s CreateEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBody) SetAttendees(v []*CreateEventResponseBodyAttendees) *CreateEventResponseBody {
	s.Attendees = v
	return s
}

func (s *CreateEventResponseBody) SetCreateTime(v string) *CreateEventResponseBody {
	s.CreateTime = &v
	return s
}

func (s *CreateEventResponseBody) SetDescription(v string) *CreateEventResponseBody {
	s.Description = &v
	return s
}

func (s *CreateEventResponseBody) SetEnd(v *CreateEventResponseBodyEnd) *CreateEventResponseBody {
	s.End = v
	return s
}

func (s *CreateEventResponseBody) SetId(v string) *CreateEventResponseBody {
	s.Id = &v
	return s
}

func (s *CreateEventResponseBody) SetIsAllDay(v bool) *CreateEventResponseBody {
	s.IsAllDay = &v
	return s
}

func (s *CreateEventResponseBody) SetLocation(v *CreateEventResponseBodyLocation) *CreateEventResponseBody {
	s.Location = v
	return s
}

func (s *CreateEventResponseBody) SetOnlineMeetingInfo(v *CreateEventResponseBodyOnlineMeetingInfo) *CreateEventResponseBody {
	s.OnlineMeetingInfo = v
	return s
}

func (s *CreateEventResponseBody) SetOrganizer(v *CreateEventResponseBodyOrganizer) *CreateEventResponseBody {
	s.Organizer = v
	return s
}

func (s *CreateEventResponseBody) SetRecurrence(v *CreateEventResponseBodyRecurrence) *CreateEventResponseBody {
	s.Recurrence = v
	return s
}

func (s *CreateEventResponseBody) SetReminders(v []*CreateEventResponseBodyReminders) *CreateEventResponseBody {
	s.Reminders = v
	return s
}

func (s *CreateEventResponseBody) SetRequestId(v string) *CreateEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEventResponseBody) SetRichTextDescription(v *CreateEventResponseBodyRichTextDescription) *CreateEventResponseBody {
	s.RichTextDescription = v
	return s
}

func (s *CreateEventResponseBody) SetStart(v *CreateEventResponseBodyStart) *CreateEventResponseBody {
	s.Start = v
	return s
}

func (s *CreateEventResponseBody) SetSummary(v string) *CreateEventResponseBody {
	s.Summary = &v
	return s
}

func (s *CreateEventResponseBody) SetUiConfigs(v []*CreateEventResponseBodyUiConfigs) *CreateEventResponseBody {
	s.UiConfigs = v
	return s
}

func (s *CreateEventResponseBody) SetUpdateTime(v string) *CreateEventResponseBody {
	s.UpdateTime = &v
	return s
}

type CreateEventResponseBodyAttendees struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// true
	IsOptional *bool `json:"IsOptional,omitempty" xml:"IsOptional,omitempty"`
	// example:
	//
	// needsAction
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s CreateEventResponseBodyAttendees) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyAttendees) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyAttendees) SetDisplayName(v string) *CreateEventResponseBodyAttendees {
	s.DisplayName = &v
	return s
}

func (s *CreateEventResponseBodyAttendees) SetIsOptional(v bool) *CreateEventResponseBodyAttendees {
	s.IsOptional = &v
	return s
}

func (s *CreateEventResponseBodyAttendees) SetResponseStatus(v string) *CreateEventResponseBodyAttendees {
	s.ResponseStatus = &v
	return s
}

func (s *CreateEventResponseBodyAttendees) SetSelf(v bool) *CreateEventResponseBodyAttendees {
	s.Self = &v
	return s
}

type CreateEventResponseBodyEnd struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s CreateEventResponseBodyEnd) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyEnd) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyEnd) SetDate(v string) *CreateEventResponseBodyEnd {
	s.Date = &v
	return s
}

func (s *CreateEventResponseBodyEnd) SetDateTime(v string) *CreateEventResponseBodyEnd {
	s.DateTime = &v
	return s
}

func (s *CreateEventResponseBodyEnd) SetTimeZone(v string) *CreateEventResponseBodyEnd {
	s.TimeZone = &v
	return s
}

type CreateEventResponseBodyLocation struct {
	// example:
	//
	// room 1-2-3
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
}

func (s CreateEventResponseBodyLocation) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyLocation) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyLocation) SetDisplayName(v string) *CreateEventResponseBodyLocation {
	s.DisplayName = &v
	return s
}

type CreateEventResponseBodyOnlineMeetingInfo struct {
	// example:
	//
	// 123
	ConferenceId *string                `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	ExtraInfo    map[string]interface{} `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// example:
	//
	// dingtalk
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// http://meeting
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s CreateEventResponseBodyOnlineMeetingInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyOnlineMeetingInfo) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyOnlineMeetingInfo) SetConferenceId(v string) *CreateEventResponseBodyOnlineMeetingInfo {
	s.ConferenceId = &v
	return s
}

func (s *CreateEventResponseBodyOnlineMeetingInfo) SetExtraInfo(v map[string]interface{}) *CreateEventResponseBodyOnlineMeetingInfo {
	s.ExtraInfo = v
	return s
}

func (s *CreateEventResponseBodyOnlineMeetingInfo) SetType(v string) *CreateEventResponseBodyOnlineMeetingInfo {
	s.Type = &v
	return s
}

func (s *CreateEventResponseBodyOnlineMeetingInfo) SetUrl(v string) *CreateEventResponseBodyOnlineMeetingInfo {
	s.Url = &v
	return s
}

type CreateEventResponseBodyOrganizer struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 123456
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s CreateEventResponseBodyOrganizer) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyOrganizer) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyOrganizer) SetDisplayName(v string) *CreateEventResponseBodyOrganizer {
	s.DisplayName = &v
	return s
}

func (s *CreateEventResponseBodyOrganizer) SetId(v string) *CreateEventResponseBodyOrganizer {
	s.Id = &v
	return s
}

func (s *CreateEventResponseBodyOrganizer) SetResponseStatus(v string) *CreateEventResponseBodyOrganizer {
	s.ResponseStatus = &v
	return s
}

func (s *CreateEventResponseBodyOrganizer) SetSelf(v bool) *CreateEventResponseBodyOrganizer {
	s.Self = &v
	return s
}

type CreateEventResponseBodyRecurrence struct {
	Pattern *CreateEventResponseBodyRecurrencePattern `json:"Pattern,omitempty" xml:"Pattern,omitempty" type:"Struct"`
	Range   *CreateEventResponseBodyRecurrenceRange   `json:"Range,omitempty" xml:"Range,omitempty" type:"Struct"`
}

func (s CreateEventResponseBodyRecurrence) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyRecurrence) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyRecurrence) SetPattern(v *CreateEventResponseBodyRecurrencePattern) *CreateEventResponseBodyRecurrence {
	s.Pattern = v
	return s
}

func (s *CreateEventResponseBodyRecurrence) SetRange(v *CreateEventResponseBodyRecurrenceRange) *CreateEventResponseBodyRecurrence {
	s.Range = v
	return s
}

type CreateEventResponseBodyRecurrencePattern struct {
	// example:
	//
	// 14
	DayOfMonth *int32 `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	// example:
	//
	// sunday
	DaysOfWeek *string `json:"DaysOfWeek,omitempty" xml:"DaysOfWeek,omitempty"`
	// example:
	//
	// first
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// 1
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// daily
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateEventResponseBodyRecurrencePattern) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyRecurrencePattern) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyRecurrencePattern) SetDayOfMonth(v int32) *CreateEventResponseBodyRecurrencePattern {
	s.DayOfMonth = &v
	return s
}

func (s *CreateEventResponseBodyRecurrencePattern) SetDaysOfWeek(v string) *CreateEventResponseBodyRecurrencePattern {
	s.DaysOfWeek = &v
	return s
}

func (s *CreateEventResponseBodyRecurrencePattern) SetIndex(v string) *CreateEventResponseBodyRecurrencePattern {
	s.Index = &v
	return s
}

func (s *CreateEventResponseBodyRecurrencePattern) SetInterval(v int32) *CreateEventResponseBodyRecurrencePattern {
	s.Interval = &v
	return s
}

func (s *CreateEventResponseBodyRecurrencePattern) SetType(v string) *CreateEventResponseBodyRecurrencePattern {
	s.Type = &v
	return s
}

type CreateEventResponseBodyRecurrenceRange struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// example:
	//
	// 5
	NumberOfOccurrences *int32 `json:"NumberOfOccurrences,omitempty" xml:"NumberOfOccurrences,omitempty"`
	// example:
	//
	// noEnd
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateEventResponseBodyRecurrenceRange) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyRecurrenceRange) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyRecurrenceRange) SetEndDate(v string) *CreateEventResponseBodyRecurrenceRange {
	s.EndDate = &v
	return s
}

func (s *CreateEventResponseBodyRecurrenceRange) SetNumberOfOccurrences(v int32) *CreateEventResponseBodyRecurrenceRange {
	s.NumberOfOccurrences = &v
	return s
}

func (s *CreateEventResponseBodyRecurrenceRange) SetType(v string) *CreateEventResponseBodyRecurrenceRange {
	s.Type = &v
	return s
}

type CreateEventResponseBodyReminders struct {
	// example:
	//
	// dingtalk
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// 15
	Minutes *string `json:"Minutes,omitempty" xml:"Minutes,omitempty"`
}

func (s CreateEventResponseBodyReminders) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyReminders) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyReminders) SetMethod(v string) *CreateEventResponseBodyReminders {
	s.Method = &v
	return s
}

func (s *CreateEventResponseBodyReminders) SetMinutes(v string) *CreateEventResponseBodyReminders {
	s.Minutes = &v
	return s
}

type CreateEventResponseBodyRichTextDescription struct {
	Text *string `json:"text,omitempty" xml:"text,omitempty"`
}

func (s CreateEventResponseBodyRichTextDescription) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyRichTextDescription) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyRichTextDescription) SetText(v string) *CreateEventResponseBodyRichTextDescription {
	s.Text = &v
	return s
}

type CreateEventResponseBodyStart struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s CreateEventResponseBodyStart) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyStart) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyStart) SetDate(v string) *CreateEventResponseBodyStart {
	s.Date = &v
	return s
}

func (s *CreateEventResponseBodyStart) SetDateTime(v string) *CreateEventResponseBodyStart {
	s.DateTime = &v
	return s
}

func (s *CreateEventResponseBodyStart) SetTimeZone(v string) *CreateEventResponseBodyStart {
	s.TimeZone = &v
	return s
}

type CreateEventResponseBodyUiConfigs struct {
	// example:
	//
	// updateEventButton
	UiName *string `json:"UiName,omitempty" xml:"UiName,omitempty"`
	// example:
	//
	// hide
	UiStatus *string `json:"UiStatus,omitempty" xml:"UiStatus,omitempty"`
}

func (s CreateEventResponseBodyUiConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponseBodyUiConfigs) GoString() string {
	return s.String()
}

func (s *CreateEventResponseBodyUiConfigs) SetUiName(v string) *CreateEventResponseBodyUiConfigs {
	s.UiName = &v
	return s
}

func (s *CreateEventResponseBodyUiConfigs) SetUiStatus(v string) *CreateEventResponseBodyUiConfigs {
	s.UiStatus = &v
	return s
}

type CreateEventResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEventResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEventResponse) GoString() string {
	return s.String()
}

func (s *CreateEventResponse) SetHeaders(v map[string]*string) *CreateEventResponse {
	s.Headers = v
	return s
}

func (s *CreateEventResponse) SetStatusCode(v int32) *CreateEventResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEventResponse) SetBody(v *CreateEventResponseBody) *CreateEventResponse {
	s.Body = v
	return s
}

type CreateLiveHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateLiveHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateLiveHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveHeaders) GoString() string {
	return s.String()
}

func (s *CreateLiveHeaders) SetCommonHeaders(v map[string]*string) *CreateLiveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateLiveHeaders) SetAccountContext(v *CreateLiveHeadersAccountContext) *CreateLiveHeaders {
	s.AccountContext = v
	return s
}

type CreateLiveHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateLiveHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateLiveHeadersAccountContext) SetAccountId(v string) *CreateLiveHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateLiveShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateLiveShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateLiveShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateLiveShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateLiveShrinkHeaders) SetAccountContextShrink(v string) *CreateLiveShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateLiveRequest struct {
	// example:
	//
	// http://sss/sss
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 这是一个直播
	Introduction *string `json:"Introduction,omitempty" xml:"Introduction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1698596800000
	PreEndTime *int64 `json:"PreEndTime,omitempty" xml:"PreEndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1691596800000
	PreStartTime *int64 `json:"PreStartTime,omitempty" xml:"PreStartTime,omitempty"`
	// example:
	//
	// 0
	PublicType    *int64                          `json:"PublicType,omitempty" xml:"PublicType,omitempty"`
	TenantContext *CreateLiveRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateLiveRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRequest) SetCoverUrl(v string) *CreateLiveRequest {
	s.CoverUrl = &v
	return s
}

func (s *CreateLiveRequest) SetIntroduction(v string) *CreateLiveRequest {
	s.Introduction = &v
	return s
}

func (s *CreateLiveRequest) SetPreEndTime(v int64) *CreateLiveRequest {
	s.PreEndTime = &v
	return s
}

func (s *CreateLiveRequest) SetPreStartTime(v int64) *CreateLiveRequest {
	s.PreStartTime = &v
	return s
}

func (s *CreateLiveRequest) SetPublicType(v int64) *CreateLiveRequest {
	s.PublicType = &v
	return s
}

func (s *CreateLiveRequest) SetTenantContext(v *CreateLiveRequestTenantContext) *CreateLiveRequest {
	s.TenantContext = v
	return s
}

func (s *CreateLiveRequest) SetTitle(v string) *CreateLiveRequest {
	s.Title = &v
	return s
}

type CreateLiveRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateLiveRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateLiveRequestTenantContext) SetTenantId(v string) *CreateLiveRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateLiveShrinkRequest struct {
	// example:
	//
	// http://sss/sss
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 这是一个直播
	Introduction *string `json:"Introduction,omitempty" xml:"Introduction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1698596800000
	PreEndTime *int64 `json:"PreEndTime,omitempty" xml:"PreEndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1691596800000
	PreStartTime *int64 `json:"PreStartTime,omitempty" xml:"PreStartTime,omitempty"`
	// example:
	//
	// 0
	PublicType          *int64  `json:"PublicType,omitempty" xml:"PublicType,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateLiveShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveShrinkRequest) SetCoverUrl(v string) *CreateLiveShrinkRequest {
	s.CoverUrl = &v
	return s
}

func (s *CreateLiveShrinkRequest) SetIntroduction(v string) *CreateLiveShrinkRequest {
	s.Introduction = &v
	return s
}

func (s *CreateLiveShrinkRequest) SetPreEndTime(v int64) *CreateLiveShrinkRequest {
	s.PreEndTime = &v
	return s
}

func (s *CreateLiveShrinkRequest) SetPreStartTime(v int64) *CreateLiveShrinkRequest {
	s.PreStartTime = &v
	return s
}

func (s *CreateLiveShrinkRequest) SetPublicType(v int64) *CreateLiveShrinkRequest {
	s.PublicType = &v
	return s
}

func (s *CreateLiveShrinkRequest) SetTenantContextShrink(v string) *CreateLiveShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateLiveShrinkRequest) SetTitle(v string) *CreateLiveShrinkRequest {
	s.Title = &v
	return s
}

type CreateLiveResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	LiveId *string `json:"liveId,omitempty" xml:"liveId,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s CreateLiveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveResponseBody) SetLiveId(v string) *CreateLiveResponseBody {
	s.LiveId = &v
	return s
}

func (s *CreateLiveResponseBody) SetRequestId(v string) *CreateLiveResponseBody {
	s.RequestId = &v
	return s
}

type CreateLiveResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLiveResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLiveResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveResponse) SetHeaders(v map[string]*string) *CreateLiveResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveResponse) SetStatusCode(v int32) *CreateLiveResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveResponse) SetBody(v *CreateLiveResponseBody) *CreateLiveResponse {
	s.Body = v
	return s
}

type CreateMeetingRoomHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateMeetingRoomHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateMeetingRoomHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomHeaders) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomHeaders) SetCommonHeaders(v map[string]*string) *CreateMeetingRoomHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateMeetingRoomHeaders) SetAccountContext(v *CreateMeetingRoomHeadersAccountContext) *CreateMeetingRoomHeaders {
	s.AccountContext = v
	return s
}

type CreateMeetingRoomHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateMeetingRoomHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomHeadersAccountContext) SetAccountId(v string) *CreateMeetingRoomHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateMeetingRoomShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateMeetingRoomShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateMeetingRoomShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateMeetingRoomShrinkHeaders) SetAccountContextShrink(v string) *CreateMeetingRoomShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateMeetingRoomRequest struct {
	EnableCycleReservation *bool `json:"EnableCycleReservation,omitempty" xml:"EnableCycleReservation,omitempty"`
	// example:
	//
	// 4644
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// xxxIsvRoomId
	IsvRoomId            *string                                       `json:"IsvRoomId,omitempty" xml:"IsvRoomId,omitempty"`
	ReservationAuthority *CreateMeetingRoomRequestReservationAuthority `json:"ReservationAuthority,omitempty" xml:"ReservationAuthority,omitempty" type:"Struct"`
	// example:
	//
	// 100
	RoomCapacity *int32                                `json:"RoomCapacity,omitempty" xml:"RoomCapacity,omitempty"`
	RoomLabelIds []*int64                              `json:"RoomLabelIds,omitempty" xml:"RoomLabelIds,omitempty" type:"Repeated"`
	RoomLocation *CreateMeetingRoomRequestRoomLocation `json:"RoomLocation,omitempty" xml:"RoomLocation,omitempty" type:"Struct"`
	RoomName     *string                               `json:"RoomName,omitempty" xml:"RoomName,omitempty"`
	// example:
	//
	// https://static.dingtalk.com/media/lADPxxxxx.jpg
	RoomPicture *string `json:"RoomPicture,omitempty" xml:"RoomPicture,omitempty"`
	// example:
	//
	// 1
	RoomStatus    *int32                                 `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
	TenantContext *CreateMeetingRoomRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s CreateMeetingRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomRequest) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomRequest) SetEnableCycleReservation(v bool) *CreateMeetingRoomRequest {
	s.EnableCycleReservation = &v
	return s
}

func (s *CreateMeetingRoomRequest) SetGroupId(v int64) *CreateMeetingRoomRequest {
	s.GroupId = &v
	return s
}

func (s *CreateMeetingRoomRequest) SetIsvRoomId(v string) *CreateMeetingRoomRequest {
	s.IsvRoomId = &v
	return s
}

func (s *CreateMeetingRoomRequest) SetReservationAuthority(v *CreateMeetingRoomRequestReservationAuthority) *CreateMeetingRoomRequest {
	s.ReservationAuthority = v
	return s
}

func (s *CreateMeetingRoomRequest) SetRoomCapacity(v int32) *CreateMeetingRoomRequest {
	s.RoomCapacity = &v
	return s
}

func (s *CreateMeetingRoomRequest) SetRoomLabelIds(v []*int64) *CreateMeetingRoomRequest {
	s.RoomLabelIds = v
	return s
}

func (s *CreateMeetingRoomRequest) SetRoomLocation(v *CreateMeetingRoomRequestRoomLocation) *CreateMeetingRoomRequest {
	s.RoomLocation = v
	return s
}

func (s *CreateMeetingRoomRequest) SetRoomName(v string) *CreateMeetingRoomRequest {
	s.RoomName = &v
	return s
}

func (s *CreateMeetingRoomRequest) SetRoomPicture(v string) *CreateMeetingRoomRequest {
	s.RoomPicture = &v
	return s
}

func (s *CreateMeetingRoomRequest) SetRoomStatus(v int32) *CreateMeetingRoomRequest {
	s.RoomStatus = &v
	return s
}

func (s *CreateMeetingRoomRequest) SetTenantContext(v *CreateMeetingRoomRequestTenantContext) *CreateMeetingRoomRequest {
	s.TenantContext = v
	return s
}

type CreateMeetingRoomRequestReservationAuthority struct {
	AuthorizedMembers []*CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers `json:"AuthorizedMembers,omitempty" xml:"AuthorizedMembers,omitempty" type:"Repeated"`
}

func (s CreateMeetingRoomRequestReservationAuthority) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomRequestReservationAuthority) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomRequestReservationAuthority) SetAuthorizedMembers(v []*CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers) *CreateMeetingRoomRequestReservationAuthority {
	s.AuthorizedMembers = v
	return s
}

type CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers struct {
	MemberId   *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
}

func (s CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers) SetMemberId(v string) *CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers {
	s.MemberId = &v
	return s
}

func (s *CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers) SetMemberName(v string) *CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers {
	s.MemberName = &v
	return s
}

func (s *CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers) SetMemberType(v string) *CreateMeetingRoomRequestReservationAuthorityAuthorizedMembers {
	s.MemberType = &v
	return s
}

type CreateMeetingRoomRequestRoomLocation struct {
	Desc  *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateMeetingRoomRequestRoomLocation) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomRequestRoomLocation) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomRequestRoomLocation) SetDesc(v string) *CreateMeetingRoomRequestRoomLocation {
	s.Desc = &v
	return s
}

func (s *CreateMeetingRoomRequestRoomLocation) SetTitle(v string) *CreateMeetingRoomRequestRoomLocation {
	s.Title = &v
	return s
}

type CreateMeetingRoomRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateMeetingRoomRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomRequestTenantContext) SetTenantId(v string) *CreateMeetingRoomRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateMeetingRoomShrinkRequest struct {
	EnableCycleReservation *bool `json:"EnableCycleReservation,omitempty" xml:"EnableCycleReservation,omitempty"`
	// example:
	//
	// 4644
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// xxxIsvRoomId
	IsvRoomId                  *string `json:"IsvRoomId,omitempty" xml:"IsvRoomId,omitempty"`
	ReservationAuthorityShrink *string `json:"ReservationAuthority,omitempty" xml:"ReservationAuthority,omitempty"`
	// example:
	//
	// 100
	RoomCapacity       *int32  `json:"RoomCapacity,omitempty" xml:"RoomCapacity,omitempty"`
	RoomLabelIdsShrink *string `json:"RoomLabelIds,omitempty" xml:"RoomLabelIds,omitempty"`
	RoomLocationShrink *string `json:"RoomLocation,omitempty" xml:"RoomLocation,omitempty"`
	RoomName           *string `json:"RoomName,omitempty" xml:"RoomName,omitempty"`
	// example:
	//
	// https://static.dingtalk.com/media/lADPxxxxx.jpg
	RoomPicture *string `json:"RoomPicture,omitempty" xml:"RoomPicture,omitempty"`
	// example:
	//
	// 1
	RoomStatus          *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s CreateMeetingRoomShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomShrinkRequest) SetEnableCycleReservation(v bool) *CreateMeetingRoomShrinkRequest {
	s.EnableCycleReservation = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetGroupId(v int64) *CreateMeetingRoomShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetIsvRoomId(v string) *CreateMeetingRoomShrinkRequest {
	s.IsvRoomId = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetReservationAuthorityShrink(v string) *CreateMeetingRoomShrinkRequest {
	s.ReservationAuthorityShrink = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetRoomCapacity(v int32) *CreateMeetingRoomShrinkRequest {
	s.RoomCapacity = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetRoomLabelIdsShrink(v string) *CreateMeetingRoomShrinkRequest {
	s.RoomLabelIdsShrink = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetRoomLocationShrink(v string) *CreateMeetingRoomShrinkRequest {
	s.RoomLocationShrink = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetRoomName(v string) *CreateMeetingRoomShrinkRequest {
	s.RoomName = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetRoomPicture(v string) *CreateMeetingRoomShrinkRequest {
	s.RoomPicture = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetRoomStatus(v int32) *CreateMeetingRoomShrinkRequest {
	s.RoomStatus = &v
	return s
}

func (s *CreateMeetingRoomShrinkRequest) SetTenantContextShrink(v string) *CreateMeetingRoomShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type CreateMeetingRoomResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0ffb718xxxxx
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CreateMeetingRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomResponseBody) SetRequestId(v string) *CreateMeetingRoomResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMeetingRoomResponseBody) SetResult(v string) *CreateMeetingRoomResponseBody {
	s.Result = &v
	return s
}

func (s *CreateMeetingRoomResponseBody) SetVendorRequestId(v string) *CreateMeetingRoomResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CreateMeetingRoomResponseBody) SetVendorType(v string) *CreateMeetingRoomResponseBody {
	s.VendorType = &v
	return s
}

type CreateMeetingRoomResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMeetingRoomResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMeetingRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomResponse) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomResponse) SetHeaders(v map[string]*string) *CreateMeetingRoomResponse {
	s.Headers = v
	return s
}

func (s *CreateMeetingRoomResponse) SetStatusCode(v int32) *CreateMeetingRoomResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMeetingRoomResponse) SetBody(v *CreateMeetingRoomResponseBody) *CreateMeetingRoomResponse {
	s.Body = v
	return s
}

type CreateMeetingRoomGroupHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateMeetingRoomGroupHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateMeetingRoomGroupHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupHeaders) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupHeaders) SetCommonHeaders(v map[string]*string) *CreateMeetingRoomGroupHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateMeetingRoomGroupHeaders) SetAccountContext(v *CreateMeetingRoomGroupHeadersAccountContext) *CreateMeetingRoomGroupHeaders {
	s.AccountContext = v
	return s
}

type CreateMeetingRoomGroupHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateMeetingRoomGroupHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupHeadersAccountContext) SetAccountId(v string) *CreateMeetingRoomGroupHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateMeetingRoomGroupShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateMeetingRoomGroupShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateMeetingRoomGroupShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateMeetingRoomGroupShrinkHeaders) SetAccountContextShrink(v string) *CreateMeetingRoomGroupShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateMeetingRoomGroupRequest struct {
	// example:
	//
	// 测试分组
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 172L
	ParentGroupId *int64                                      `json:"ParentGroupId,omitempty" xml:"ParentGroupId,omitempty"`
	TenantContext *CreateMeetingRoomGroupRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s CreateMeetingRoomGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupRequest) SetGroupName(v string) *CreateMeetingRoomGroupRequest {
	s.GroupName = &v
	return s
}

func (s *CreateMeetingRoomGroupRequest) SetParentGroupId(v int64) *CreateMeetingRoomGroupRequest {
	s.ParentGroupId = &v
	return s
}

func (s *CreateMeetingRoomGroupRequest) SetTenantContext(v *CreateMeetingRoomGroupRequestTenantContext) *CreateMeetingRoomGroupRequest {
	s.TenantContext = v
	return s
}

type CreateMeetingRoomGroupRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateMeetingRoomGroupRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupRequestTenantContext) SetTenantId(v string) *CreateMeetingRoomGroupRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateMeetingRoomGroupShrinkRequest struct {
	// example:
	//
	// 测试分组
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 172L
	ParentGroupId       *int64  `json:"ParentGroupId,omitempty" xml:"ParentGroupId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s CreateMeetingRoomGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupShrinkRequest) SetGroupName(v string) *CreateMeetingRoomGroupShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *CreateMeetingRoomGroupShrinkRequest) SetParentGroupId(v int64) *CreateMeetingRoomGroupShrinkRequest {
	s.ParentGroupId = &v
	return s
}

func (s *CreateMeetingRoomGroupShrinkRequest) SetTenantContextShrink(v string) *CreateMeetingRoomGroupShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type CreateMeetingRoomGroupResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 172
	Result *int64 `json:"result,omitempty" xml:"result,omitempty"`
}

func (s CreateMeetingRoomGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupResponseBody) SetRequestId(v string) *CreateMeetingRoomGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMeetingRoomGroupResponseBody) SetResult(v int64) *CreateMeetingRoomGroupResponseBody {
	s.Result = &v
	return s
}

type CreateMeetingRoomGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateMeetingRoomGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateMeetingRoomGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMeetingRoomGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateMeetingRoomGroupResponse) SetHeaders(v map[string]*string) *CreateMeetingRoomGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateMeetingRoomGroupResponse) SetStatusCode(v int32) *CreateMeetingRoomGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateMeetingRoomGroupResponse) SetBody(v *CreateMeetingRoomGroupResponseBody) *CreateMeetingRoomGroupResponse {
	s.Body = v
	return s
}

type CreateOrUpdateFormDataHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateOrUpdateFormDataHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateOrUpdateFormDataHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateFormDataHeaders) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateFormDataHeaders) SetCommonHeaders(v map[string]*string) *CreateOrUpdateFormDataHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateOrUpdateFormDataHeaders) SetAccountContext(v *CreateOrUpdateFormDataHeadersAccountContext) *CreateOrUpdateFormDataHeaders {
	s.AccountContext = v
	return s
}

type CreateOrUpdateFormDataHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateOrUpdateFormDataHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateFormDataHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateFormDataHeadersAccountContext) SetAccountId(v string) *CreateOrUpdateFormDataHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateOrUpdateFormDataShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateOrUpdateFormDataShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateFormDataShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateFormDataShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateOrUpdateFormDataShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateOrUpdateFormDataShrinkHeaders) SetAccountContextShrink(v string) *CreateOrUpdateFormDataShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateOrUpdateFormDataRequest struct {
	// example:
	//
	// APP_XCE0EVXS6DYG3YDYC5RD
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// {\\"countrySelectField_l0c1cwiu\\":[{\\"value\\":\\"US\\"}]}
	FormDataJson *string `json:"FormDataJson,omitempty" xml:"FormDataJson,omitempty"`
	// example:
	//
	// FORM-GX866MC1NC1VOFF6WVQW33FD16E23L3CPMKVKA
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// false
	NoExecuteExpression *bool   `json:"NoExecuteExpression,omitempty" xml:"NoExecuteExpression,omitempty"`
	SearchCondition     *string `json:"SearchCondition,omitempty" xml:"SearchCondition,omitempty"`
	// example:
	//
	// 09866181UTZVVD4R3DC955FNKIM52HVPU5WWK7
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s CreateOrUpdateFormDataRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateFormDataRequest) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateFormDataRequest) SetAppType(v string) *CreateOrUpdateFormDataRequest {
	s.AppType = &v
	return s
}

func (s *CreateOrUpdateFormDataRequest) SetFormDataJson(v string) *CreateOrUpdateFormDataRequest {
	s.FormDataJson = &v
	return s
}

func (s *CreateOrUpdateFormDataRequest) SetFormUuid(v string) *CreateOrUpdateFormDataRequest {
	s.FormUuid = &v
	return s
}

func (s *CreateOrUpdateFormDataRequest) SetNoExecuteExpression(v bool) *CreateOrUpdateFormDataRequest {
	s.NoExecuteExpression = &v
	return s
}

func (s *CreateOrUpdateFormDataRequest) SetSearchCondition(v string) *CreateOrUpdateFormDataRequest {
	s.SearchCondition = &v
	return s
}

func (s *CreateOrUpdateFormDataRequest) SetSystemToken(v string) *CreateOrUpdateFormDataRequest {
	s.SystemToken = &v
	return s
}

func (s *CreateOrUpdateFormDataRequest) SetUserId(v string) *CreateOrUpdateFormDataRequest {
	s.UserId = &v
	return s
}

type CreateOrUpdateFormDataResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// [ "FINST-SASNOO39NSIFF780" ]
	Result []*string `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CreateOrUpdateFormDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateFormDataResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateFormDataResponseBody) SetRequestId(v string) *CreateOrUpdateFormDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOrUpdateFormDataResponseBody) SetResult(v []*string) *CreateOrUpdateFormDataResponseBody {
	s.Result = v
	return s
}

func (s *CreateOrUpdateFormDataResponseBody) SetVendorRequestId(v string) *CreateOrUpdateFormDataResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CreateOrUpdateFormDataResponseBody) SetVendorType(v string) *CreateOrUpdateFormDataResponseBody {
	s.VendorType = &v
	return s
}

type CreateOrUpdateFormDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrUpdateFormDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrUpdateFormDataResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrUpdateFormDataResponse) GoString() string {
	return s.String()
}

func (s *CreateOrUpdateFormDataResponse) SetHeaders(v map[string]*string) *CreateOrUpdateFormDataResponse {
	s.Headers = v
	return s
}

func (s *CreateOrUpdateFormDataResponse) SetStatusCode(v int32) *CreateOrUpdateFormDataResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrUpdateFormDataResponse) SetBody(v *CreateOrUpdateFormDataResponseBody) *CreateOrUpdateFormDataResponse {
	s.Body = v
	return s
}

type CreateOrgHonorTemplateHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateOrgHonorTemplateHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateOrgHonorTemplateHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateHeaders) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateHeaders) SetCommonHeaders(v map[string]*string) *CreateOrgHonorTemplateHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateOrgHonorTemplateHeaders) SetAccountContext(v *CreateOrgHonorTemplateHeadersAccountContext) *CreateOrgHonorTemplateHeaders {
	s.AccountContext = v
	return s
}

type CreateOrgHonorTemplateHeadersAccountContext struct {
	// example:
	//
	// 208579
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateOrgHonorTemplateHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateHeadersAccountContext) SetAccountId(v string) *CreateOrgHonorTemplateHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateOrgHonorTemplateShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateOrgHonorTemplateShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateOrgHonorTemplateShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateOrgHonorTemplateShrinkHeaders) SetAccountContextShrink(v string) *CreateOrgHonorTemplateShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateOrgHonorTemplateRequest struct {
	TenantContext *CreateOrgHonorTemplateRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// fsdfasdjf132342d
	AvatarFrameMediaId *string `json:"avatarFrameMediaId,omitempty" xml:"avatarFrameMediaId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// #FFFBB4
	DefaultBgColor *string `json:"defaultBgColor,omitempty" xml:"defaultBgColor,omitempty"`
	// This parameter is required.
	MedalDesc *string `json:"medalDesc,omitempty" xml:"medalDesc,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1273adf23
	MedalMediaId *string `json:"medalMediaId,omitempty" xml:"medalMediaId,omitempty"`
	// This parameter is required.
	MedalName *string `json:"medalName,omitempty" xml:"medalName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s CreateOrgHonorTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateRequest) SetTenantContext(v *CreateOrgHonorTemplateRequestTenantContext) *CreateOrgHonorTemplateRequest {
	s.TenantContext = v
	return s
}

func (s *CreateOrgHonorTemplateRequest) SetAvatarFrameMediaId(v string) *CreateOrgHonorTemplateRequest {
	s.AvatarFrameMediaId = &v
	return s
}

func (s *CreateOrgHonorTemplateRequest) SetDefaultBgColor(v string) *CreateOrgHonorTemplateRequest {
	s.DefaultBgColor = &v
	return s
}

func (s *CreateOrgHonorTemplateRequest) SetMedalDesc(v string) *CreateOrgHonorTemplateRequest {
	s.MedalDesc = &v
	return s
}

func (s *CreateOrgHonorTemplateRequest) SetMedalMediaId(v string) *CreateOrgHonorTemplateRequest {
	s.MedalMediaId = &v
	return s
}

func (s *CreateOrgHonorTemplateRequest) SetMedalName(v string) *CreateOrgHonorTemplateRequest {
	s.MedalName = &v
	return s
}

func (s *CreateOrgHonorTemplateRequest) SetOrgId(v int64) *CreateOrgHonorTemplateRequest {
	s.OrgId = &v
	return s
}

func (s *CreateOrgHonorTemplateRequest) SetUserId(v string) *CreateOrgHonorTemplateRequest {
	s.UserId = &v
	return s
}

type CreateOrgHonorTemplateRequestTenantContext struct {
	// example:
	//
	// 123456
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateOrgHonorTemplateRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateRequestTenantContext) SetTenantId(v string) *CreateOrgHonorTemplateRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateOrgHonorTemplateShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// fsdfasdjf132342d
	AvatarFrameMediaId *string `json:"avatarFrameMediaId,omitempty" xml:"avatarFrameMediaId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// #FFFBB4
	DefaultBgColor *string `json:"defaultBgColor,omitempty" xml:"defaultBgColor,omitempty"`
	// This parameter is required.
	MedalDesc *string `json:"medalDesc,omitempty" xml:"medalDesc,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1273adf23
	MedalMediaId *string `json:"medalMediaId,omitempty" xml:"medalMediaId,omitempty"`
	// This parameter is required.
	MedalName *string `json:"medalName,omitempty" xml:"medalName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s CreateOrgHonorTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetTenantContextShrink(v string) *CreateOrgHonorTemplateShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetAvatarFrameMediaId(v string) *CreateOrgHonorTemplateShrinkRequest {
	s.AvatarFrameMediaId = &v
	return s
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetDefaultBgColor(v string) *CreateOrgHonorTemplateShrinkRequest {
	s.DefaultBgColor = &v
	return s
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetMedalDesc(v string) *CreateOrgHonorTemplateShrinkRequest {
	s.MedalDesc = &v
	return s
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetMedalMediaId(v string) *CreateOrgHonorTemplateShrinkRequest {
	s.MedalMediaId = &v
	return s
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetMedalName(v string) *CreateOrgHonorTemplateShrinkRequest {
	s.MedalName = &v
	return s
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetOrgId(v int64) *CreateOrgHonorTemplateShrinkRequest {
	s.OrgId = &v
	return s
}

func (s *CreateOrgHonorTemplateShrinkRequest) SetUserId(v string) *CreateOrgHonorTemplateShrinkRequest {
	s.UserId = &v
	return s
}

type CreateOrgHonorTemplateResponseBody struct {
	// example:
	//
	// 21660610
	HonorId *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s CreateOrgHonorTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateResponseBody) SetHonorId(v string) *CreateOrgHonorTemplateResponseBody {
	s.HonorId = &v
	return s
}

func (s *CreateOrgHonorTemplateResponseBody) SetRequestId(v string) *CreateOrgHonorTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateOrgHonorTemplateResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrgHonorTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrgHonorTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrgHonorTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateOrgHonorTemplateResponse) SetHeaders(v map[string]*string) *CreateOrgHonorTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateOrgHonorTemplateResponse) SetStatusCode(v int32) *CreateOrgHonorTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrgHonorTemplateResponse) SetBody(v *CreateOrgHonorTemplateResponseBody) *CreateOrgHonorTemplateResponse {
	s.Body = v
	return s
}

type CreatePersonalTodoTaskHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreatePersonalTodoTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreatePersonalTodoTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskHeaders) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskHeaders) SetCommonHeaders(v map[string]*string) *CreatePersonalTodoTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreatePersonalTodoTaskHeaders) SetAccountContext(v *CreatePersonalTodoTaskHeadersAccountContext) *CreatePersonalTodoTaskHeaders {
	s.AccountContext = v
	return s
}

type CreatePersonalTodoTaskHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// ba3a9b612345678d8fedf544ef69d19e
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreatePersonalTodoTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskHeadersAccountContext) SetAccountId(v string) *CreatePersonalTodoTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreatePersonalTodoTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreatePersonalTodoTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreatePersonalTodoTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreatePersonalTodoTaskShrinkHeaders) SetAccountContextShrink(v string) *CreatePersonalTodoTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreatePersonalTodoTaskRequest struct {
	// example:
	//
	// 待办备注信息
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 1703750708595
	DueTime *int64 `json:"DueTime,omitempty" xml:"DueTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [ "012345" ]
	ExecutorIds   []*string                                   `json:"ExecutorIds,omitempty" xml:"ExecutorIds,omitempty" type:"Repeated"`
	NotifyConfigs *CreatePersonalTodoTaskRequestNotifyConfigs `json:"NotifyConfigs,omitempty" xml:"NotifyConfigs,omitempty" type:"Struct"`
	// example:
	//
	// [ "012345" ]
	ParticipantIds []*string `json:"ParticipantIds,omitempty" xml:"ParticipantIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 待办标题
	Subject       *string                                     `json:"Subject,omitempty" xml:"Subject,omitempty"`
	TenantContext *CreatePersonalTodoTaskRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s CreatePersonalTodoTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskRequest) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskRequest) SetDescription(v string) *CreatePersonalTodoTaskRequest {
	s.Description = &v
	return s
}

func (s *CreatePersonalTodoTaskRequest) SetDueTime(v int64) *CreatePersonalTodoTaskRequest {
	s.DueTime = &v
	return s
}

func (s *CreatePersonalTodoTaskRequest) SetExecutorIds(v []*string) *CreatePersonalTodoTaskRequest {
	s.ExecutorIds = v
	return s
}

func (s *CreatePersonalTodoTaskRequest) SetNotifyConfigs(v *CreatePersonalTodoTaskRequestNotifyConfigs) *CreatePersonalTodoTaskRequest {
	s.NotifyConfigs = v
	return s
}

func (s *CreatePersonalTodoTaskRequest) SetParticipantIds(v []*string) *CreatePersonalTodoTaskRequest {
	s.ParticipantIds = v
	return s
}

func (s *CreatePersonalTodoTaskRequest) SetSubject(v string) *CreatePersonalTodoTaskRequest {
	s.Subject = &v
	return s
}

func (s *CreatePersonalTodoTaskRequest) SetTenantContext(v *CreatePersonalTodoTaskRequestTenantContext) *CreatePersonalTodoTaskRequest {
	s.TenantContext = v
	return s
}

type CreatePersonalTodoTaskRequestNotifyConfigs struct {
	// example:
	//
	// 1
	DingNotify *string `json:"DingNotify,omitempty" xml:"DingNotify,omitempty"`
}

func (s CreatePersonalTodoTaskRequestNotifyConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskRequestNotifyConfigs) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskRequestNotifyConfigs) SetDingNotify(v string) *CreatePersonalTodoTaskRequestNotifyConfigs {
	s.DingNotify = &v
	return s
}

type CreatePersonalTodoTaskRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreatePersonalTodoTaskRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskRequestTenantContext) SetTenantId(v string) *CreatePersonalTodoTaskRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreatePersonalTodoTaskShrinkRequest struct {
	// example:
	//
	// 待办备注信息
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 1703750708595
	DueTime *int64 `json:"DueTime,omitempty" xml:"DueTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [ "012345" ]
	ExecutorIdsShrink   *string `json:"ExecutorIds,omitempty" xml:"ExecutorIds,omitempty"`
	NotifyConfigsShrink *string `json:"NotifyConfigs,omitempty" xml:"NotifyConfigs,omitempty"`
	// example:
	//
	// [ "012345" ]
	ParticipantIdsShrink *string `json:"ParticipantIds,omitempty" xml:"ParticipantIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 待办标题
	Subject             *string `json:"Subject,omitempty" xml:"Subject,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s CreatePersonalTodoTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskShrinkRequest) SetDescription(v string) *CreatePersonalTodoTaskShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreatePersonalTodoTaskShrinkRequest) SetDueTime(v int64) *CreatePersonalTodoTaskShrinkRequest {
	s.DueTime = &v
	return s
}

func (s *CreatePersonalTodoTaskShrinkRequest) SetExecutorIdsShrink(v string) *CreatePersonalTodoTaskShrinkRequest {
	s.ExecutorIdsShrink = &v
	return s
}

func (s *CreatePersonalTodoTaskShrinkRequest) SetNotifyConfigsShrink(v string) *CreatePersonalTodoTaskShrinkRequest {
	s.NotifyConfigsShrink = &v
	return s
}

func (s *CreatePersonalTodoTaskShrinkRequest) SetParticipantIdsShrink(v string) *CreatePersonalTodoTaskShrinkRequest {
	s.ParticipantIdsShrink = &v
	return s
}

func (s *CreatePersonalTodoTaskShrinkRequest) SetSubject(v string) *CreatePersonalTodoTaskShrinkRequest {
	s.Subject = &v
	return s
}

func (s *CreatePersonalTodoTaskShrinkRequest) SetTenantContextShrink(v string) *CreatePersonalTodoTaskShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type CreatePersonalTodoTaskResponseBody struct {
	// example:
	//
	// 1703750708595
	CreatedTime *int64 `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// task123abc
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CreatePersonalTodoTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskResponseBody) SetCreatedTime(v int64) *CreatePersonalTodoTaskResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *CreatePersonalTodoTaskResponseBody) SetRequestId(v string) *CreatePersonalTodoTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePersonalTodoTaskResponseBody) SetTaskId(v string) *CreatePersonalTodoTaskResponseBody {
	s.TaskId = &v
	return s
}

func (s *CreatePersonalTodoTaskResponseBody) SetVendorRequestId(v string) *CreatePersonalTodoTaskResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CreatePersonalTodoTaskResponseBody) SetVendorType(v string) *CreatePersonalTodoTaskResponseBody {
	s.VendorType = &v
	return s
}

type CreatePersonalTodoTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePersonalTodoTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePersonalTodoTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePersonalTodoTaskResponse) GoString() string {
	return s.String()
}

func (s *CreatePersonalTodoTaskResponse) SetHeaders(v map[string]*string) *CreatePersonalTodoTaskResponse {
	s.Headers = v
	return s
}

func (s *CreatePersonalTodoTaskResponse) SetStatusCode(v int32) *CreatePersonalTodoTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePersonalTodoTaskResponse) SetBody(v *CreatePersonalTodoTaskResponseBody) *CreatePersonalTodoTaskResponse {
	s.Body = v
	return s
}

type CreateReportHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateReportHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateReportHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateReportHeaders) GoString() string {
	return s.String()
}

func (s *CreateReportHeaders) SetCommonHeaders(v map[string]*string) *CreateReportHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateReportHeaders) SetAccountContext(v *CreateReportHeadersAccountContext) *CreateReportHeaders {
	s.AccountContext = v
	return s
}

type CreateReportHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateReportHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateReportHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateReportHeadersAccountContext) SetAccountId(v string) *CreateReportHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateReportShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateReportShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateReportShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateReportShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateReportShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateReportShrinkHeaders) SetAccountContextShrink(v string) *CreateReportShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// []
	Contents []*CreateReportRequestContents `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// client
	DdFrom *string `json:"DdFrom,omitempty" xml:"DdFrom,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// sdfafdsfsafdfsaf
	TemplateId    *string                           `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TenantContext *CreateReportRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// true
	ToChat *bool `json:"ToChat,omitempty" xml:"ToChat,omitempty"`
	// example:
	//
	// []
	ToCids []*string `json:"ToCids,omitempty" xml:"ToCids,omitempty" type:"Repeated"`
	// example:
	//
	// [123,456]
	ToUserids []*string `json:"ToUserids,omitempty" xml:"ToUserids,omitempty" type:"Repeated"`
}

func (s CreateReportRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateReportRequest) GoString() string {
	return s.String()
}

func (s *CreateReportRequest) SetContents(v []*CreateReportRequestContents) *CreateReportRequest {
	s.Contents = v
	return s
}

func (s *CreateReportRequest) SetDdFrom(v string) *CreateReportRequest {
	s.DdFrom = &v
	return s
}

func (s *CreateReportRequest) SetTemplateId(v string) *CreateReportRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateReportRequest) SetTenantContext(v *CreateReportRequestTenantContext) *CreateReportRequest {
	s.TenantContext = v
	return s
}

func (s *CreateReportRequest) SetToChat(v bool) *CreateReportRequest {
	s.ToChat = &v
	return s
}

func (s *CreateReportRequest) SetToCids(v []*string) *CreateReportRequest {
	s.ToCids = v
	return s
}

func (s *CreateReportRequest) SetToUserids(v []*string) *CreateReportRequest {
	s.ToUserids = v
	return s
}

type CreateReportRequestContents struct {
	// This parameter is required.
	//
	// example:
	//
	// ### 序号1
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// markdown
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 今日完成工作
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	Sort *int64 `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateReportRequestContents) String() string {
	return tea.Prettify(s)
}

func (s CreateReportRequestContents) GoString() string {
	return s.String()
}

func (s *CreateReportRequestContents) SetContent(v string) *CreateReportRequestContents {
	s.Content = &v
	return s
}

func (s *CreateReportRequestContents) SetContentType(v string) *CreateReportRequestContents {
	s.ContentType = &v
	return s
}

func (s *CreateReportRequestContents) SetKey(v string) *CreateReportRequestContents {
	s.Key = &v
	return s
}

func (s *CreateReportRequestContents) SetSort(v int64) *CreateReportRequestContents {
	s.Sort = &v
	return s
}

func (s *CreateReportRequestContents) SetType(v int64) *CreateReportRequestContents {
	s.Type = &v
	return s
}

type CreateReportRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateReportRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateReportRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateReportRequestTenantContext) SetTenantId(v string) *CreateReportRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateReportShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// []
	ContentsShrink *string `json:"Contents,omitempty" xml:"Contents,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// client
	DdFrom *string `json:"DdFrom,omitempty" xml:"DdFrom,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// sdfafdsfsafdfsaf
	TemplateId          *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// true
	ToChat *bool `json:"ToChat,omitempty" xml:"ToChat,omitempty"`
	// example:
	//
	// []
	ToCidsShrink *string `json:"ToCids,omitempty" xml:"ToCids,omitempty"`
	// example:
	//
	// [123,456]
	ToUseridsShrink *string `json:"ToUserids,omitempty" xml:"ToUserids,omitempty"`
}

func (s CreateReportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateReportShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateReportShrinkRequest) SetContentsShrink(v string) *CreateReportShrinkRequest {
	s.ContentsShrink = &v
	return s
}

func (s *CreateReportShrinkRequest) SetDdFrom(v string) *CreateReportShrinkRequest {
	s.DdFrom = &v
	return s
}

func (s *CreateReportShrinkRequest) SetTemplateId(v string) *CreateReportShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateReportShrinkRequest) SetTenantContextShrink(v string) *CreateReportShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateReportShrinkRequest) SetToChat(v bool) *CreateReportShrinkRequest {
	s.ToChat = &v
	return s
}

func (s *CreateReportShrinkRequest) SetToCidsShrink(v string) *CreateReportShrinkRequest {
	s.ToCidsShrink = &v
	return s
}

func (s *CreateReportShrinkRequest) SetToUseridsShrink(v string) *CreateReportShrinkRequest {
	s.ToUseridsShrink = &v
	return s
}

type CreateReportResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s CreateReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateReportResponseBody) GoString() string {
	return s.String()
}

func (s *CreateReportResponseBody) SetRequestId(v string) *CreateReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateReportResponseBody) SetSuccess(v bool) *CreateReportResponseBody {
	s.Success = &v
	return s
}

type CreateReportResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateReportResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateReportResponse) GoString() string {
	return s.String()
}

func (s *CreateReportResponse) SetHeaders(v map[string]*string) *CreateReportResponse {
	s.Headers = v
	return s
}

func (s *CreateReportResponse) SetStatusCode(v int32) *CreateReportResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateReportResponse) SetBody(v *CreateReportResponseBody) *CreateReportResponse {
	s.Body = v
	return s
}

type CreateScenegroupHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateScenegroupHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateScenegroupHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateScenegroupHeaders) GoString() string {
	return s.String()
}

func (s *CreateScenegroupHeaders) SetCommonHeaders(v map[string]*string) *CreateScenegroupHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateScenegroupHeaders) SetAccountContext(v *CreateScenegroupHeadersAccountContext) *CreateScenegroupHeaders {
	s.AccountContext = v
	return s
}

type CreateScenegroupHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateScenegroupHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateScenegroupHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateScenegroupHeadersAccountContext) SetAccountId(v string) *CreateScenegroupHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateScenegroupShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateScenegroupShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateScenegroupShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateScenegroupShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateScenegroupShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateScenegroupShrinkHeaders) SetAccountContextShrink(v string) *CreateScenegroupShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateScenegroupRequest struct {
	// example:
	//
	// 0
	AddFriendForbidden *int64 `json:"AddFriendForbidden,omitempty" xml:"AddFriendForbidden,omitempty"`
	// example:
	//
	// 0
	AllMembersCanCreateCalendar *int64 `json:"AllMembersCanCreateCalendar,omitempty" xml:"AllMembersCanCreateCalendar,omitempty"`
	// example:
	//
	// 0
	AllMembersCanCreateMcsConf *int64 `json:"AllMembersCanCreateMcsConf,omitempty" xml:"AllMembersCanCreateMcsConf,omitempty"`
	// example:
	//
	// 0
	ChatBannedType *int64 `json:"ChatBannedType,omitempty" xml:"ChatBannedType,omitempty"`
	// example:
	//
	// 0
	GroupEmailDisabled *int64 `json:"GroupEmailDisabled,omitempty" xml:"GroupEmailDisabled,omitempty"`
	// example:
	//
	// 1
	GroupLiveSwitch *int64 `json:"GroupLiveSwitch,omitempty" xml:"GroupLiveSwitch,omitempty"`
	// example:
	//
	// @lADOADma*****QKA
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// 0
	ManagementType *int64 `json:"ManagementType,omitempty" xml:"ManagementType,omitempty"`
	// example:
	//
	// 0
	MembersToAdminChat *int64 `json:"MembersToAdminChat,omitempty" xml:"MembersToAdminChat,omitempty"`
	// example:
	//
	// 0
	MentionAllAuthority *int64 `json:"MentionAllAuthority,omitempty" xml:"MentionAllAuthority,omitempty"`
	// example:
	//
	// 0
	OnlyAdminCanDing *int64 `json:"OnlyAdminCanDing,omitempty" xml:"OnlyAdminCanDing,omitempty"`
	// example:
	//
	// 0
	OnlyAdminCanSetMsgTop *int64 `json:"OnlyAdminCanSetMsgTop,omitempty" xml:"OnlyAdminCanSetMsgTop,omitempty"`
	// example:
	//
	// 0
	Searchable *int64 `json:"Searchable,omitempty" xml:"Searchable,omitempty"`
	// example:
	//
	// 0
	ShowHistoryType *int64 `json:"ShowHistoryType,omitempty" xml:"ShowHistoryType,omitempty"`
	// example:
	//
	// 072*****,013*****
	SubadminIds *string `json:"SubadminIds,omitempty" xml:"SubadminIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// c354***-***-***-b4ea-6f1ab***65
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 测试群
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 072*****,013*****
	UserIds *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
	// example:
	//
	// axcf*-*****-*****-23da*
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 0
	ValidationType *int64 `json:"ValidationType,omitempty" xml:"ValidationType,omitempty"`
}

func (s CreateScenegroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateScenegroupRequest) GoString() string {
	return s.String()
}

func (s *CreateScenegroupRequest) SetAddFriendForbidden(v int64) *CreateScenegroupRequest {
	s.AddFriendForbidden = &v
	return s
}

func (s *CreateScenegroupRequest) SetAllMembersCanCreateCalendar(v int64) *CreateScenegroupRequest {
	s.AllMembersCanCreateCalendar = &v
	return s
}

func (s *CreateScenegroupRequest) SetAllMembersCanCreateMcsConf(v int64) *CreateScenegroupRequest {
	s.AllMembersCanCreateMcsConf = &v
	return s
}

func (s *CreateScenegroupRequest) SetChatBannedType(v int64) *CreateScenegroupRequest {
	s.ChatBannedType = &v
	return s
}

func (s *CreateScenegroupRequest) SetGroupEmailDisabled(v int64) *CreateScenegroupRequest {
	s.GroupEmailDisabled = &v
	return s
}

func (s *CreateScenegroupRequest) SetGroupLiveSwitch(v int64) *CreateScenegroupRequest {
	s.GroupLiveSwitch = &v
	return s
}

func (s *CreateScenegroupRequest) SetIcon(v string) *CreateScenegroupRequest {
	s.Icon = &v
	return s
}

func (s *CreateScenegroupRequest) SetManagementType(v int64) *CreateScenegroupRequest {
	s.ManagementType = &v
	return s
}

func (s *CreateScenegroupRequest) SetMembersToAdminChat(v int64) *CreateScenegroupRequest {
	s.MembersToAdminChat = &v
	return s
}

func (s *CreateScenegroupRequest) SetMentionAllAuthority(v int64) *CreateScenegroupRequest {
	s.MentionAllAuthority = &v
	return s
}

func (s *CreateScenegroupRequest) SetOnlyAdminCanDing(v int64) *CreateScenegroupRequest {
	s.OnlyAdminCanDing = &v
	return s
}

func (s *CreateScenegroupRequest) SetOnlyAdminCanSetMsgTop(v int64) *CreateScenegroupRequest {
	s.OnlyAdminCanSetMsgTop = &v
	return s
}

func (s *CreateScenegroupRequest) SetSearchable(v int64) *CreateScenegroupRequest {
	s.Searchable = &v
	return s
}

func (s *CreateScenegroupRequest) SetShowHistoryType(v int64) *CreateScenegroupRequest {
	s.ShowHistoryType = &v
	return s
}

func (s *CreateScenegroupRequest) SetSubadminIds(v string) *CreateScenegroupRequest {
	s.SubadminIds = &v
	return s
}

func (s *CreateScenegroupRequest) SetTemplateId(v string) *CreateScenegroupRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateScenegroupRequest) SetTitle(v string) *CreateScenegroupRequest {
	s.Title = &v
	return s
}

func (s *CreateScenegroupRequest) SetUserIds(v string) *CreateScenegroupRequest {
	s.UserIds = &v
	return s
}

func (s *CreateScenegroupRequest) SetUuid(v string) *CreateScenegroupRequest {
	s.Uuid = &v
	return s
}

func (s *CreateScenegroupRequest) SetValidationType(v int64) *CreateScenegroupRequest {
	s.ValidationType = &v
	return s
}

type CreateScenegroupResponseBody struct {
	// example:
	//
	// cid1324wwwerxxx
	OpenConversationId *string `json:"openConversationId,omitempty" xml:"openConversationId,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s CreateScenegroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScenegroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScenegroupResponseBody) SetOpenConversationId(v string) *CreateScenegroupResponseBody {
	s.OpenConversationId = &v
	return s
}

func (s *CreateScenegroupResponseBody) SetRequestId(v string) *CreateScenegroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateScenegroupResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateScenegroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateScenegroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateScenegroupResponse) GoString() string {
	return s.String()
}

func (s *CreateScenegroupResponse) SetHeaders(v map[string]*string) *CreateScenegroupResponse {
	s.Headers = v
	return s
}

func (s *CreateScenegroupResponse) SetStatusCode(v int32) *CreateScenegroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateScenegroupResponse) SetBody(v *CreateScenegroupResponseBody) *CreateScenegroupResponse {
	s.Body = v
	return s
}

type CreateScheduleConferenceHeaders struct {
	CommonHeaders  map[string]*string                             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateScheduleConferenceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateScheduleConferenceHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceHeaders) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceHeaders) SetCommonHeaders(v map[string]*string) *CreateScheduleConferenceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateScheduleConferenceHeaders) SetAccountContext(v *CreateScheduleConferenceHeadersAccountContext) *CreateScheduleConferenceHeaders {
	s.AccountContext = v
	return s
}

type CreateScheduleConferenceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateScheduleConferenceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceHeadersAccountContext) SetAccountId(v string) *CreateScheduleConferenceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateScheduleConferenceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateScheduleConferenceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateScheduleConferenceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateScheduleConferenceShrinkHeaders) SetAccountContextShrink(v string) *CreateScheduleConferenceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateScheduleConferenceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1687928400000L
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1687924800000L
	StartTime     *int64                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *CreateScheduleConferenceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 预约会议标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateScheduleConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceRequest) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceRequest) SetEndTime(v int64) *CreateScheduleConferenceRequest {
	s.EndTime = &v
	return s
}

func (s *CreateScheduleConferenceRequest) SetStartTime(v int64) *CreateScheduleConferenceRequest {
	s.StartTime = &v
	return s
}

func (s *CreateScheduleConferenceRequest) SetTenantContext(v *CreateScheduleConferenceRequestTenantContext) *CreateScheduleConferenceRequest {
	s.TenantContext = v
	return s
}

func (s *CreateScheduleConferenceRequest) SetTitle(v string) *CreateScheduleConferenceRequest {
	s.Title = &v
	return s
}

type CreateScheduleConferenceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateScheduleConferenceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceRequestTenantContext) SetTenantId(v string) *CreateScheduleConferenceRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateScheduleConferenceShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1687928400000L
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1687924800000L
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 预约会议标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateScheduleConferenceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceShrinkRequest) SetEndTime(v int64) *CreateScheduleConferenceShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *CreateScheduleConferenceShrinkRequest) SetStartTime(v int64) *CreateScheduleConferenceShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *CreateScheduleConferenceShrinkRequest) SetTenantContextShrink(v string) *CreateScheduleConferenceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateScheduleConferenceShrinkRequest) SetTitle(v string) *CreateScheduleConferenceShrinkRequest {
	s.Title = &v
	return s
}

type CreateScheduleConferenceResponseBody struct {
	// example:
	//
	// +861234567
	Phones []*string `json:"phones,omitempty" xml:"phones,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 1234567
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 83150xxxxxx
	RoomCode *string `json:"roomCode,omitempty" xml:"roomCode,omitempty"`
	// example:
	//
	// 5c7c9bb1-b256-4dc5-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string `json:"scheduleConferenceId,omitempty" xml:"scheduleConferenceId,omitempty"`
	// example:
	//
	// https://meeting.dingtalk.com/j/knvMq1ixxxx
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s CreateScheduleConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceResponseBody) SetPhones(v []*string) *CreateScheduleConferenceResponseBody {
	s.Phones = v
	return s
}

func (s *CreateScheduleConferenceResponseBody) SetRequestId(v string) *CreateScheduleConferenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateScheduleConferenceResponseBody) SetRoomCode(v string) *CreateScheduleConferenceResponseBody {
	s.RoomCode = &v
	return s
}

func (s *CreateScheduleConferenceResponseBody) SetScheduleConferenceId(v string) *CreateScheduleConferenceResponseBody {
	s.ScheduleConferenceId = &v
	return s
}

func (s *CreateScheduleConferenceResponseBody) SetUrl(v string) *CreateScheduleConferenceResponseBody {
	s.Url = &v
	return s
}

type CreateScheduleConferenceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateScheduleConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateScheduleConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateScheduleConferenceResponse) GoString() string {
	return s.String()
}

func (s *CreateScheduleConferenceResponse) SetHeaders(v map[string]*string) *CreateScheduleConferenceResponse {
	s.Headers = v
	return s
}

func (s *CreateScheduleConferenceResponse) SetStatusCode(v int32) *CreateScheduleConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateScheduleConferenceResponse) SetBody(v *CreateScheduleConferenceResponseBody) *CreateScheduleConferenceResponse {
	s.Body = v
	return s
}

type CreateSearchDomeHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateSearchDomeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateSearchDomeHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeHeaders) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeHeaders) SetCommonHeaders(v map[string]*string) *CreateSearchDomeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSearchDomeHeaders) SetAccountContext(v *CreateSearchDomeHeadersAccountContext) *CreateSearchDomeHeaders {
	s.AccountContext = v
	return s
}

type CreateSearchDomeHeadersAccountContext struct {
	// example:
	//
	// ba3a9b612345678d8fedf544ef69d19e
	UserToken *string `json:"userToken,omitempty" xml:"userToken,omitempty"`
}

func (s CreateSearchDomeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeHeadersAccountContext) SetUserToken(v string) *CreateSearchDomeHeadersAccountContext {
	s.UserToken = &v
	return s
}

type CreateSearchDomeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateSearchDomeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateSearchDomeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSearchDomeShrinkHeaders) SetAccountContextShrink(v string) *CreateSearchDomeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateSearchDomeRequest struct {
	// example:
	//
	// {}
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1699265024987
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1030
	ResId *string `json:"ResId,omitempty" xml:"ResId,omitempty"`
	// example:
	//
	// 1699265024987
	StartTime     *int64                                `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *CreateSearchDomeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	UserIdList    []*string                             `json:"UserIdList,omitempty" xml:"UserIdList,omitempty" type:"Repeated"`
}

func (s CreateSearchDomeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeRequest) SetContent(v string) *CreateSearchDomeRequest {
	s.Content = &v
	return s
}

func (s *CreateSearchDomeRequest) SetEndTime(v int64) *CreateSearchDomeRequest {
	s.EndTime = &v
	return s
}

func (s *CreateSearchDomeRequest) SetResId(v string) *CreateSearchDomeRequest {
	s.ResId = &v
	return s
}

func (s *CreateSearchDomeRequest) SetStartTime(v int64) *CreateSearchDomeRequest {
	s.StartTime = &v
	return s
}

func (s *CreateSearchDomeRequest) SetTenantContext(v *CreateSearchDomeRequestTenantContext) *CreateSearchDomeRequest {
	s.TenantContext = v
	return s
}

func (s *CreateSearchDomeRequest) SetUserIdList(v []*string) *CreateSearchDomeRequest {
	s.UserIdList = v
	return s
}

type CreateSearchDomeRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateSearchDomeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeRequestTenantContext) SetTenantId(v string) *CreateSearchDomeRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateSearchDomeShrinkRequest struct {
	// example:
	//
	// {}
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1699265024987
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1030
	ResId *string `json:"ResId,omitempty" xml:"ResId,omitempty"`
	// example:
	//
	// 1699265024987
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	UserIdListShrink    *string `json:"UserIdList,omitempty" xml:"UserIdList,omitempty"`
}

func (s CreateSearchDomeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeShrinkRequest) SetContent(v string) *CreateSearchDomeShrinkRequest {
	s.Content = &v
	return s
}

func (s *CreateSearchDomeShrinkRequest) SetEndTime(v int64) *CreateSearchDomeShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *CreateSearchDomeShrinkRequest) SetResId(v string) *CreateSearchDomeShrinkRequest {
	s.ResId = &v
	return s
}

func (s *CreateSearchDomeShrinkRequest) SetStartTime(v int64) *CreateSearchDomeShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *CreateSearchDomeShrinkRequest) SetTenantContextShrink(v string) *CreateSearchDomeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateSearchDomeShrinkRequest) SetUserIdListShrink(v string) *CreateSearchDomeShrinkRequest {
	s.UserIdListShrink = &v
	return s
}

type CreateSearchDomeResponseBody struct {
	// example:
	//
	// []
	Arguments []interface{} `json:"arguments,omitempty" xml:"arguments,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CreateSearchDomeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeResponseBody) SetArguments(v []interface{}) *CreateSearchDomeResponseBody {
	s.Arguments = v
	return s
}

func (s *CreateSearchDomeResponseBody) SetRequestId(v string) *CreateSearchDomeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSearchDomeResponseBody) SetSuccess(v bool) *CreateSearchDomeResponseBody {
	s.Success = &v
	return s
}

func (s *CreateSearchDomeResponseBody) SetVendorRequestId(v string) *CreateSearchDomeResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CreateSearchDomeResponseBody) SetVendorType(v string) *CreateSearchDomeResponseBody {
	s.VendorType = &v
	return s
}

type CreateSearchDomeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSearchDomeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSearchDomeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchDomeResponse) GoString() string {
	return s.String()
}

func (s *CreateSearchDomeResponse) SetHeaders(v map[string]*string) *CreateSearchDomeResponse {
	s.Headers = v
	return s
}

func (s *CreateSearchDomeResponse) SetStatusCode(v int32) *CreateSearchDomeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSearchDomeResponse) SetBody(v *CreateSearchDomeResponseBody) *CreateSearchDomeResponse {
	s.Body = v
	return s
}

type CreateSearchKeywordHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateSearchKeywordHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateSearchKeywordHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordHeaders) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordHeaders) SetCommonHeaders(v map[string]*string) *CreateSearchKeywordHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSearchKeywordHeaders) SetAccountContext(v *CreateSearchKeywordHeadersAccountContext) *CreateSearchKeywordHeaders {
	s.AccountContext = v
	return s
}

type CreateSearchKeywordHeadersAccountContext struct {
	// example:
	//
	// ba3a9b612345678d8fedf544ef69d19e
	UserToken *string `json:"userToken,omitempty" xml:"userToken,omitempty"`
}

func (s CreateSearchKeywordHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordHeadersAccountContext) SetUserToken(v string) *CreateSearchKeywordHeadersAccountContext {
	s.UserToken = &v
	return s
}

type CreateSearchKeywordShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateSearchKeywordShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateSearchKeywordShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSearchKeywordShrinkHeaders) SetAccountContextShrink(v string) *CreateSearchKeywordShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateSearchKeywordRequest struct {
	// example:
	//
	// {}
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1699265024987
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1028
	ResId *string `json:"ResId,omitempty" xml:"ResId,omitempty"`
	// example:
	//
	// 1699265024987
	StartTime     *int64                                   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *CreateSearchKeywordRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	UserIdList    []*string                                `json:"UserIdList,omitempty" xml:"UserIdList,omitempty" type:"Repeated"`
}

func (s CreateSearchKeywordRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordRequest) SetContent(v string) *CreateSearchKeywordRequest {
	s.Content = &v
	return s
}

func (s *CreateSearchKeywordRequest) SetEndTime(v int64) *CreateSearchKeywordRequest {
	s.EndTime = &v
	return s
}

func (s *CreateSearchKeywordRequest) SetResId(v string) *CreateSearchKeywordRequest {
	s.ResId = &v
	return s
}

func (s *CreateSearchKeywordRequest) SetStartTime(v int64) *CreateSearchKeywordRequest {
	s.StartTime = &v
	return s
}

func (s *CreateSearchKeywordRequest) SetTenantContext(v *CreateSearchKeywordRequestTenantContext) *CreateSearchKeywordRequest {
	s.TenantContext = v
	return s
}

func (s *CreateSearchKeywordRequest) SetUserIdList(v []*string) *CreateSearchKeywordRequest {
	s.UserIdList = v
	return s
}

type CreateSearchKeywordRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateSearchKeywordRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordRequestTenantContext) SetTenantId(v string) *CreateSearchKeywordRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateSearchKeywordShrinkRequest struct {
	// example:
	//
	// {}
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1699265024987
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1028
	ResId *string `json:"ResId,omitempty" xml:"ResId,omitempty"`
	// example:
	//
	// 1699265024987
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	UserIdListShrink    *string `json:"UserIdList,omitempty" xml:"UserIdList,omitempty"`
}

func (s CreateSearchKeywordShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordShrinkRequest) SetContent(v string) *CreateSearchKeywordShrinkRequest {
	s.Content = &v
	return s
}

func (s *CreateSearchKeywordShrinkRequest) SetEndTime(v int64) *CreateSearchKeywordShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *CreateSearchKeywordShrinkRequest) SetResId(v string) *CreateSearchKeywordShrinkRequest {
	s.ResId = &v
	return s
}

func (s *CreateSearchKeywordShrinkRequest) SetStartTime(v int64) *CreateSearchKeywordShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *CreateSearchKeywordShrinkRequest) SetTenantContextShrink(v string) *CreateSearchKeywordShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateSearchKeywordShrinkRequest) SetUserIdListShrink(v string) *CreateSearchKeywordShrinkRequest {
	s.UserIdListShrink = &v
	return s
}

type CreateSearchKeywordResponseBody struct {
	// example:
	//
	// []
	Arguments []interface{} `json:"arguments,omitempty" xml:"arguments,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s CreateSearchKeywordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordResponseBody) SetArguments(v []interface{}) *CreateSearchKeywordResponseBody {
	s.Arguments = v
	return s
}

func (s *CreateSearchKeywordResponseBody) SetRequestId(v string) *CreateSearchKeywordResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSearchKeywordResponseBody) SetSuccess(v bool) *CreateSearchKeywordResponseBody {
	s.Success = &v
	return s
}

func (s *CreateSearchKeywordResponseBody) SetVendorRequestId(v string) *CreateSearchKeywordResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *CreateSearchKeywordResponseBody) SetVendorType(v string) *CreateSearchKeywordResponseBody {
	s.VendorType = &v
	return s
}

type CreateSearchKeywordResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSearchKeywordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSearchKeywordResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchKeywordResponse) GoString() string {
	return s.String()
}

func (s *CreateSearchKeywordResponse) SetHeaders(v map[string]*string) *CreateSearchKeywordResponse {
	s.Headers = v
	return s
}

func (s *CreateSearchKeywordResponse) SetStatusCode(v int32) *CreateSearchKeywordResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSearchKeywordResponse) SetBody(v *CreateSearchKeywordResponseBody) *CreateSearchKeywordResponse {
	s.Body = v
	return s
}

type CreateSheetHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateSheetHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateSheetHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetHeaders) GoString() string {
	return s.String()
}

func (s *CreateSheetHeaders) SetCommonHeaders(v map[string]*string) *CreateSheetHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSheetHeaders) SetAccountContext(v *CreateSheetHeadersAccountContext) *CreateSheetHeaders {
	s.AccountContext = v
	return s
}

type CreateSheetHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateSheetHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateSheetHeadersAccountContext) SetAccountId(v string) *CreateSheetHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateSheetShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateSheetShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateSheetShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateSheetShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSheetShrinkHeaders) SetAccountContextShrink(v string) *CreateSheetShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateSheetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	Name          *string                          `json:"Name,omitempty" xml:"Name,omitempty"`
	TenantContext *CreateSheetRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s CreateSheetRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetRequest) GoString() string {
	return s.String()
}

func (s *CreateSheetRequest) SetName(v string) *CreateSheetRequest {
	s.Name = &v
	return s
}

func (s *CreateSheetRequest) SetTenantContext(v *CreateSheetRequestTenantContext) *CreateSheetRequest {
	s.TenantContext = v
	return s
}

func (s *CreateSheetRequest) SetWorkbookId(v string) *CreateSheetRequest {
	s.WorkbookId = &v
	return s
}

type CreateSheetRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateSheetRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateSheetRequestTenantContext) SetTenantId(v string) *CreateSheetRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateSheetShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s CreateSheetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSheetShrinkRequest) SetName(v string) *CreateSheetShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateSheetShrinkRequest) SetTenantContextShrink(v string) *CreateSheetShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateSheetShrinkRequest) SetWorkbookId(v string) *CreateSheetShrinkRequest {
	s.WorkbookId = &v
	return s
}

type CreateSheetResponseBody struct {
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// Sheet1
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// visible
	Visibility *string `json:"visibility,omitempty" xml:"visibility,omitempty"`
}

func (s CreateSheetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSheetResponseBody) SetId(v string) *CreateSheetResponseBody {
	s.Id = &v
	return s
}

func (s *CreateSheetResponseBody) SetName(v string) *CreateSheetResponseBody {
	s.Name = &v
	return s
}

func (s *CreateSheetResponseBody) SetRequestId(v string) *CreateSheetResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSheetResponseBody) SetVisibility(v string) *CreateSheetResponseBody {
	s.Visibility = &v
	return s
}

type CreateSheetResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSheetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSheetResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSheetResponse) GoString() string {
	return s.String()
}

func (s *CreateSheetResponse) SetHeaders(v map[string]*string) *CreateSheetResponse {
	s.Headers = v
	return s
}

func (s *CreateSheetResponse) SetStatusCode(v int32) *CreateSheetResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSheetResponse) SetBody(v *CreateSheetResponseBody) *CreateSheetResponse {
	s.Body = v
	return s
}

type CreateSubscribedCalendarHeaders struct {
	CommonHeaders  map[string]*string                             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateSubscribedCalendarHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateSubscribedCalendarHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarHeaders) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarHeaders) SetCommonHeaders(v map[string]*string) *CreateSubscribedCalendarHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSubscribedCalendarHeaders) SetAccountContext(v *CreateSubscribedCalendarHeadersAccountContext) *CreateSubscribedCalendarHeaders {
	s.AccountContext = v
	return s
}

type CreateSubscribedCalendarHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateSubscribedCalendarHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarHeadersAccountContext) SetAccountId(v string) *CreateSubscribedCalendarHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateSubscribedCalendarShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateSubscribedCalendarShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateSubscribedCalendarShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateSubscribedCalendarShrinkHeaders) SetAccountContextShrink(v string) *CreateSubscribedCalendarShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateSubscribedCalendarRequest struct {
	Description *string   `json:"Description,omitempty" xml:"Description,omitempty"`
	Managers    []*string `json:"Managers,omitempty" xml:"Managers,omitempty" type:"Repeated"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	SubscribeScope *CreateSubscribedCalendarRequestSubscribeScope `json:"SubscribeScope,omitempty" xml:"SubscribeScope,omitempty" type:"Struct"`
}

func (s CreateSubscribedCalendarRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarRequest) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarRequest) SetDescription(v string) *CreateSubscribedCalendarRequest {
	s.Description = &v
	return s
}

func (s *CreateSubscribedCalendarRequest) SetManagers(v []*string) *CreateSubscribedCalendarRequest {
	s.Managers = v
	return s
}

func (s *CreateSubscribedCalendarRequest) SetName(v string) *CreateSubscribedCalendarRequest {
	s.Name = &v
	return s
}

func (s *CreateSubscribedCalendarRequest) SetSubscribeScope(v *CreateSubscribedCalendarRequestSubscribeScope) *CreateSubscribedCalendarRequest {
	s.SubscribeScope = v
	return s
}

type CreateSubscribedCalendarRequestSubscribeScope struct {
	CorpIds             []*string `json:"CorpIds,omitempty" xml:"CorpIds,omitempty" type:"Repeated"`
	OpenConversationIds []*string `json:"OpenConversationIds,omitempty" xml:"OpenConversationIds,omitempty" type:"Repeated"`
	UserIds             []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s CreateSubscribedCalendarRequestSubscribeScope) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarRequestSubscribeScope) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarRequestSubscribeScope) SetCorpIds(v []*string) *CreateSubscribedCalendarRequestSubscribeScope {
	s.CorpIds = v
	return s
}

func (s *CreateSubscribedCalendarRequestSubscribeScope) SetOpenConversationIds(v []*string) *CreateSubscribedCalendarRequestSubscribeScope {
	s.OpenConversationIds = v
	return s
}

func (s *CreateSubscribedCalendarRequestSubscribeScope) SetUserIds(v []*string) *CreateSubscribedCalendarRequestSubscribeScope {
	s.UserIds = v
	return s
}

type CreateSubscribedCalendarShrinkRequest struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ManagersShrink *string `json:"Managers,omitempty" xml:"Managers,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	SubscribeScopeShrink *string `json:"SubscribeScope,omitempty" xml:"SubscribeScope,omitempty"`
}

func (s CreateSubscribedCalendarShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarShrinkRequest) SetDescription(v string) *CreateSubscribedCalendarShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateSubscribedCalendarShrinkRequest) SetManagersShrink(v string) *CreateSubscribedCalendarShrinkRequest {
	s.ManagersShrink = &v
	return s
}

func (s *CreateSubscribedCalendarShrinkRequest) SetName(v string) *CreateSubscribedCalendarShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateSubscribedCalendarShrinkRequest) SetSubscribeScopeShrink(v string) *CreateSubscribedCalendarShrinkRequest {
	s.SubscribeScopeShrink = &v
	return s
}

type CreateSubscribedCalendarResponseBody struct {
	// example:
	//
	// M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmxxxxxxx
	CalendarId *string `json:"calendarId,omitempty" xml:"calendarId,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s CreateSubscribedCalendarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarResponseBody) SetCalendarId(v string) *CreateSubscribedCalendarResponseBody {
	s.CalendarId = &v
	return s
}

func (s *CreateSubscribedCalendarResponseBody) SetRequestId(v string) *CreateSubscribedCalendarResponseBody {
	s.RequestId = &v
	return s
}

type CreateSubscribedCalendarResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSubscribedCalendarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSubscribedCalendarResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSubscribedCalendarResponse) GoString() string {
	return s.String()
}

func (s *CreateSubscribedCalendarResponse) SetHeaders(v map[string]*string) *CreateSubscribedCalendarResponse {
	s.Headers = v
	return s
}

func (s *CreateSubscribedCalendarResponse) SetStatusCode(v int32) *CreateSubscribedCalendarResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSubscribedCalendarResponse) SetBody(v *CreateSubscribedCalendarResponseBody) *CreateSubscribedCalendarResponse {
	s.Body = v
	return s
}

type CreateTodoTaskHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateTodoTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateTodoTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskHeaders) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskHeaders) SetCommonHeaders(v map[string]*string) *CreateTodoTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateTodoTaskHeaders) SetAccountContext(v *CreateTodoTaskHeadersAccountContext) *CreateTodoTaskHeaders {
	s.AccountContext = v
	return s
}

type CreateTodoTaskHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateTodoTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskHeadersAccountContext) SetAccountId(v string) *CreateTodoTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateTodoTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateTodoTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateTodoTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateTodoTaskShrinkHeaders) SetAccountContextShrink(v string) *CreateTodoTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateTodoTaskRequest struct {
	TenantContext    *CreateTodoTaskRequestTenantContext      `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	ContentFieldList []*CreateTodoTaskRequestContentFieldList `json:"contentFieldList,omitempty" xml:"contentFieldList,omitempty" type:"Repeated"`
	// example:
	//
	// PUoiinWIpa2yH2ymhiiGiP6g
	CreatorId *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// 应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。
	Description *string                         `json:"description,omitempty" xml:"description,omitempty"`
	DetailUrl   *CreateTodoTaskRequestDetailUrl `json:"detailUrl,omitempty" xml:"detailUrl,omitempty" type:"Struct"`
	// example:
	//
	// 1617675000000
	DueTime     *int64    `json:"dueTime,omitempty" xml:"dueTime,omitempty"`
	ExecutorIds []*string `json:"executorIds,omitempty" xml:"executorIds,omitempty" type:"Repeated"`
	// example:
	//
	// true
	IsOnlyShowExecutor *bool                               `json:"isOnlyShowExecutor,omitempty" xml:"isOnlyShowExecutor,omitempty"`
	NotifyConfigs      *CreateTodoTaskRequestNotifyConfigs `json:"notifyConfigs,omitempty" xml:"notifyConfigs,omitempty" type:"Struct"`
	// example:
	//
	// 12345
	OperatorId     *string   `json:"operatorId,omitempty" xml:"operatorId,omitempty"`
	ParticipantIds []*string `json:"participantIds,omitempty" xml:"participantIds,omitempty" type:"Repeated"`
	// example:
	//
	// 20
	Priority *int32 `json:"priority,omitempty" xml:"priority,omitempty"`
	// example:
	//
	// isv_dingtalkTodo1
	SourceId *string `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 接入钉钉待办
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
}

func (s CreateTodoTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskRequest) SetTenantContext(v *CreateTodoTaskRequestTenantContext) *CreateTodoTaskRequest {
	s.TenantContext = v
	return s
}

func (s *CreateTodoTaskRequest) SetContentFieldList(v []*CreateTodoTaskRequestContentFieldList) *CreateTodoTaskRequest {
	s.ContentFieldList = v
	return s
}

func (s *CreateTodoTaskRequest) SetCreatorId(v string) *CreateTodoTaskRequest {
	s.CreatorId = &v
	return s
}

func (s *CreateTodoTaskRequest) SetDescription(v string) *CreateTodoTaskRequest {
	s.Description = &v
	return s
}

func (s *CreateTodoTaskRequest) SetDetailUrl(v *CreateTodoTaskRequestDetailUrl) *CreateTodoTaskRequest {
	s.DetailUrl = v
	return s
}

func (s *CreateTodoTaskRequest) SetDueTime(v int64) *CreateTodoTaskRequest {
	s.DueTime = &v
	return s
}

func (s *CreateTodoTaskRequest) SetExecutorIds(v []*string) *CreateTodoTaskRequest {
	s.ExecutorIds = v
	return s
}

func (s *CreateTodoTaskRequest) SetIsOnlyShowExecutor(v bool) *CreateTodoTaskRequest {
	s.IsOnlyShowExecutor = &v
	return s
}

func (s *CreateTodoTaskRequest) SetNotifyConfigs(v *CreateTodoTaskRequestNotifyConfigs) *CreateTodoTaskRequest {
	s.NotifyConfigs = v
	return s
}

func (s *CreateTodoTaskRequest) SetOperatorId(v string) *CreateTodoTaskRequest {
	s.OperatorId = &v
	return s
}

func (s *CreateTodoTaskRequest) SetParticipantIds(v []*string) *CreateTodoTaskRequest {
	s.ParticipantIds = v
	return s
}

func (s *CreateTodoTaskRequest) SetPriority(v int32) *CreateTodoTaskRequest {
	s.Priority = &v
	return s
}

func (s *CreateTodoTaskRequest) SetSourceId(v string) *CreateTodoTaskRequest {
	s.SourceId = &v
	return s
}

func (s *CreateTodoTaskRequest) SetSubject(v string) *CreateTodoTaskRequest {
	s.Subject = &v
	return s
}

type CreateTodoTaskRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateTodoTaskRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskRequestTenantContext) SetTenantId(v string) *CreateTodoTaskRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateTodoTaskRequestContentFieldList struct {
	// fieldKey
	//
	// example:
	//
	// fieldKey
	FieldKey *string `json:"fieldKey,omitempty" xml:"fieldKey,omitempty"`
	// fieldValue
	//
	// example:
	//
	// fieldValue
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
}

func (s CreateTodoTaskRequestContentFieldList) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskRequestContentFieldList) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskRequestContentFieldList) SetFieldKey(v string) *CreateTodoTaskRequestContentFieldList {
	s.FieldKey = &v
	return s
}

func (s *CreateTodoTaskRequestContentFieldList) SetFieldValue(v string) *CreateTodoTaskRequestContentFieldList {
	s.FieldValue = &v
	return s
}

type CreateTodoTaskRequestDetailUrl struct {
	// example:
	//
	// https://www.dingtalk.com
	AppUrl *string `json:"appUrl,omitempty" xml:"appUrl,omitempty"`
	// example:
	//
	// https://www.dingtalk.com
	PcUrl *string `json:"pcUrl,omitempty" xml:"pcUrl,omitempty"`
}

func (s CreateTodoTaskRequestDetailUrl) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskRequestDetailUrl) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskRequestDetailUrl) SetAppUrl(v string) *CreateTodoTaskRequestDetailUrl {
	s.AppUrl = &v
	return s
}

func (s *CreateTodoTaskRequestDetailUrl) SetPcUrl(v string) *CreateTodoTaskRequestDetailUrl {
	s.PcUrl = &v
	return s
}

type CreateTodoTaskRequestNotifyConfigs struct {
	// example:
	//
	// 1
	DingNotify *string `json:"dingNotify,omitempty" xml:"dingNotify,omitempty"`
}

func (s CreateTodoTaskRequestNotifyConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskRequestNotifyConfigs) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskRequestNotifyConfigs) SetDingNotify(v string) *CreateTodoTaskRequestNotifyConfigs {
	s.DingNotify = &v
	return s
}

type CreateTodoTaskShrinkRequest struct {
	TenantContextShrink    *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	ContentFieldListShrink *string `json:"contentFieldList,omitempty" xml:"contentFieldList,omitempty"`
	// example:
	//
	// PUoiinWIpa2yH2ymhiiGiP6g
	CreatorId *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// 应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。
	Description     *string `json:"description,omitempty" xml:"description,omitempty"`
	DetailUrlShrink *string `json:"detailUrl,omitempty" xml:"detailUrl,omitempty"`
	// example:
	//
	// 1617675000000
	DueTime           *int64  `json:"dueTime,omitempty" xml:"dueTime,omitempty"`
	ExecutorIdsShrink *string `json:"executorIds,omitempty" xml:"executorIds,omitempty"`
	// example:
	//
	// true
	IsOnlyShowExecutor  *bool   `json:"isOnlyShowExecutor,omitempty" xml:"isOnlyShowExecutor,omitempty"`
	NotifyConfigsShrink *string `json:"notifyConfigs,omitempty" xml:"notifyConfigs,omitempty"`
	// example:
	//
	// 12345
	OperatorId           *string `json:"operatorId,omitempty" xml:"operatorId,omitempty"`
	ParticipantIdsShrink *string `json:"participantIds,omitempty" xml:"participantIds,omitempty"`
	// example:
	//
	// 20
	Priority *int32 `json:"priority,omitempty" xml:"priority,omitempty"`
	// example:
	//
	// isv_dingtalkTodo1
	SourceId *string `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 接入钉钉待办
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
}

func (s CreateTodoTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskShrinkRequest) SetTenantContextShrink(v string) *CreateTodoTaskShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetContentFieldListShrink(v string) *CreateTodoTaskShrinkRequest {
	s.ContentFieldListShrink = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetCreatorId(v string) *CreateTodoTaskShrinkRequest {
	s.CreatorId = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetDescription(v string) *CreateTodoTaskShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetDetailUrlShrink(v string) *CreateTodoTaskShrinkRequest {
	s.DetailUrlShrink = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetDueTime(v int64) *CreateTodoTaskShrinkRequest {
	s.DueTime = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetExecutorIdsShrink(v string) *CreateTodoTaskShrinkRequest {
	s.ExecutorIdsShrink = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetIsOnlyShowExecutor(v bool) *CreateTodoTaskShrinkRequest {
	s.IsOnlyShowExecutor = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetNotifyConfigsShrink(v string) *CreateTodoTaskShrinkRequest {
	s.NotifyConfigsShrink = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetOperatorId(v string) *CreateTodoTaskShrinkRequest {
	s.OperatorId = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetParticipantIdsShrink(v string) *CreateTodoTaskShrinkRequest {
	s.ParticipantIdsShrink = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetPriority(v int32) *CreateTodoTaskShrinkRequest {
	s.Priority = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetSourceId(v string) *CreateTodoTaskShrinkRequest {
	s.SourceId = &v
	return s
}

func (s *CreateTodoTaskShrinkRequest) SetSubject(v string) *CreateTodoTaskShrinkRequest {
	s.Subject = &v
	return s
}

type CreateTodoTaskResponseBody struct {
	// example:
	//
	// isv_dingtalkTodo
	BizTag           *string                                       `json:"bizTag,omitempty" xml:"bizTag,omitempty"`
	ContentFieldList []*CreateTodoTaskResponseBodyContentFieldList `json:"contentFieldList,omitempty" xml:"contentFieldList,omitempty" type:"Repeated"`
	// example:
	//
	// 1617675200000
	CreatedTime *int64 `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	// example:
	//
	// PUoiinWIpa2yH2ymhiiGiP6g
	CreatorId *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	// example:
	//
	// 应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。
	Description *string                              `json:"description,omitempty" xml:"description,omitempty"`
	DetailUrl   *CreateTodoTaskResponseBodyDetailUrl `json:"detailUrl,omitempty" xml:"detailUrl,omitempty" type:"Struct"`
	// example:
	//
	// false
	Done *bool `json:"done,omitempty" xml:"done,omitempty"`
	// example:
	//
	// 1617675100000
	DueTime     *int64    `json:"dueTime,omitempty" xml:"dueTime,omitempty"`
	ExecutorIds []*string `json:"executorIds,omitempty" xml:"executorIds,omitempty" type:"Repeated"`
	// example:
	//
	// 1617675200000
	FinishTime *int64 `json:"finishTime,omitempty" xml:"finishTime,omitempty"`
	// example:
	//
	// OPJpwtwPVNGIFKURjrzd
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsOnlyShowExecutor *bool `json:"isOnlyShowExecutor,omitempty" xml:"isOnlyShowExecutor,omitempty"`
	// example:
	//
	// 1617675200000
	ModifiedTime *int64 `json:"modifiedTime,omitempty" xml:"modifiedTime,omitempty"`
	// example:
	//
	// PUoiinWIpa2yH2ymhiiGiP6g
	ModifierId     *string                                  `json:"modifierId,omitempty" xml:"modifierId,omitempty"`
	NotifyConfigs  *CreateTodoTaskResponseBodyNotifyConfigs `json:"notifyConfigs,omitempty" xml:"notifyConfigs,omitempty" type:"Struct"`
	ParticipantIds []*string                                `json:"participantIds,omitempty" xml:"participantIds,omitempty" type:"Repeated"`
	// example:
	//
	// 20
	Priority *int32 `json:"priority,omitempty" xml:"priority,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// isv_dingtalkTodo
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// example:
	//
	// isv_dingtalkTodo1
	SourceId *string `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// 1617675000000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// 接入钉钉待办
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
}

func (s CreateTodoTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskResponseBody) SetBizTag(v string) *CreateTodoTaskResponseBody {
	s.BizTag = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetContentFieldList(v []*CreateTodoTaskResponseBodyContentFieldList) *CreateTodoTaskResponseBody {
	s.ContentFieldList = v
	return s
}

func (s *CreateTodoTaskResponseBody) SetCreatedTime(v int64) *CreateTodoTaskResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetCreatorId(v string) *CreateTodoTaskResponseBody {
	s.CreatorId = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetDescription(v string) *CreateTodoTaskResponseBody {
	s.Description = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetDetailUrl(v *CreateTodoTaskResponseBodyDetailUrl) *CreateTodoTaskResponseBody {
	s.DetailUrl = v
	return s
}

func (s *CreateTodoTaskResponseBody) SetDone(v bool) *CreateTodoTaskResponseBody {
	s.Done = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetDueTime(v int64) *CreateTodoTaskResponseBody {
	s.DueTime = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetExecutorIds(v []*string) *CreateTodoTaskResponseBody {
	s.ExecutorIds = v
	return s
}

func (s *CreateTodoTaskResponseBody) SetFinishTime(v int64) *CreateTodoTaskResponseBody {
	s.FinishTime = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetId(v string) *CreateTodoTaskResponseBody {
	s.Id = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetIsOnlyShowExecutor(v bool) *CreateTodoTaskResponseBody {
	s.IsOnlyShowExecutor = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetModifiedTime(v int64) *CreateTodoTaskResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetModifierId(v string) *CreateTodoTaskResponseBody {
	s.ModifierId = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetNotifyConfigs(v *CreateTodoTaskResponseBodyNotifyConfigs) *CreateTodoTaskResponseBody {
	s.NotifyConfigs = v
	return s
}

func (s *CreateTodoTaskResponseBody) SetParticipantIds(v []*string) *CreateTodoTaskResponseBody {
	s.ParticipantIds = v
	return s
}

func (s *CreateTodoTaskResponseBody) SetPriority(v int32) *CreateTodoTaskResponseBody {
	s.Priority = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetRequestId(v string) *CreateTodoTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetSource(v string) *CreateTodoTaskResponseBody {
	s.Source = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetSourceId(v string) *CreateTodoTaskResponseBody {
	s.SourceId = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetStartTime(v int64) *CreateTodoTaskResponseBody {
	s.StartTime = &v
	return s
}

func (s *CreateTodoTaskResponseBody) SetSubject(v string) *CreateTodoTaskResponseBody {
	s.Subject = &v
	return s
}

type CreateTodoTaskResponseBodyContentFieldList struct {
	// fieldKey
	//
	// example:
	//
	// fieldKey
	FieldKey *string `json:"fieldKey,omitempty" xml:"fieldKey,omitempty"`
	// fieldValue
	//
	// example:
	//
	// fieldValue
	FieldValue *string `json:"fieldValue,omitempty" xml:"fieldValue,omitempty"`
}

func (s CreateTodoTaskResponseBodyContentFieldList) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskResponseBodyContentFieldList) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskResponseBodyContentFieldList) SetFieldKey(v string) *CreateTodoTaskResponseBodyContentFieldList {
	s.FieldKey = &v
	return s
}

func (s *CreateTodoTaskResponseBodyContentFieldList) SetFieldValue(v string) *CreateTodoTaskResponseBodyContentFieldList {
	s.FieldValue = &v
	return s
}

type CreateTodoTaskResponseBodyDetailUrl struct {
	// example:
	//
	// https://www.dingtalk.com
	AppUrl *string `json:"appUrl,omitempty" xml:"appUrl,omitempty"`
	// example:
	//
	// https://www.dingtalk.com
	PcUrl *string `json:"pcUrl,omitempty" xml:"pcUrl,omitempty"`
}

func (s CreateTodoTaskResponseBodyDetailUrl) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskResponseBodyDetailUrl) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskResponseBodyDetailUrl) SetAppUrl(v string) *CreateTodoTaskResponseBodyDetailUrl {
	s.AppUrl = &v
	return s
}

func (s *CreateTodoTaskResponseBodyDetailUrl) SetPcUrl(v string) *CreateTodoTaskResponseBodyDetailUrl {
	s.PcUrl = &v
	return s
}

type CreateTodoTaskResponseBodyNotifyConfigs struct {
	// example:
	//
	// 1
	DingNotify *string `json:"dingNotify,omitempty" xml:"dingNotify,omitempty"`
}

func (s CreateTodoTaskResponseBodyNotifyConfigs) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskResponseBodyNotifyConfigs) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskResponseBodyNotifyConfigs) SetDingNotify(v string) *CreateTodoTaskResponseBodyNotifyConfigs {
	s.DingNotify = &v
	return s
}

type CreateTodoTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTodoTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTodoTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTodoTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateTodoTaskResponse) SetHeaders(v map[string]*string) *CreateTodoTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateTodoTaskResponse) SetStatusCode(v int32) *CreateTodoTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTodoTaskResponse) SetBody(v *CreateTodoTaskResponseBody) *CreateTodoTaskResponse {
	s.Body = v
	return s
}

type CreateVideoConferenceHeaders struct {
	CommonHeaders  map[string]*string                          `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateVideoConferenceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateVideoConferenceHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoConferenceHeaders) GoString() string {
	return s.String()
}

func (s *CreateVideoConferenceHeaders) SetCommonHeaders(v map[string]*string) *CreateVideoConferenceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateVideoConferenceHeaders) SetAccountContext(v *CreateVideoConferenceHeadersAccountContext) *CreateVideoConferenceHeaders {
	s.AccountContext = v
	return s
}

type CreateVideoConferenceHeadersAccountContext struct {
	// This parameter is required.
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateVideoConferenceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoConferenceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateVideoConferenceHeadersAccountContext) SetAccountId(v string) *CreateVideoConferenceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateVideoConferenceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateVideoConferenceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoConferenceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateVideoConferenceShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateVideoConferenceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateVideoConferenceShrinkHeaders) SetAccountContextShrink(v string) *CreateVideoConferenceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateVideoConferenceRequest struct {
	// This parameter is required.
	ConfTitle *string `json:"ConfTitle,omitempty" xml:"ConfTitle,omitempty"`
	// example:
	//
	// true
	InviteCaller  *bool     `json:"InviteCaller,omitempty" xml:"InviteCaller,omitempty"`
	InviteUserIds []*string `json:"InviteUserIds,omitempty" xml:"InviteUserIds,omitempty" type:"Repeated"`
}

func (s CreateVideoConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoConferenceRequest) GoString() string {
	return s.String()
}

func (s *CreateVideoConferenceRequest) SetConfTitle(v string) *CreateVideoConferenceRequest {
	s.ConfTitle = &v
	return s
}

func (s *CreateVideoConferenceRequest) SetInviteCaller(v bool) *CreateVideoConferenceRequest {
	s.InviteCaller = &v
	return s
}

func (s *CreateVideoConferenceRequest) SetInviteUserIds(v []*string) *CreateVideoConferenceRequest {
	s.InviteUserIds = v
	return s
}

type CreateVideoConferenceShrinkRequest struct {
	// This parameter is required.
	ConfTitle *string `json:"ConfTitle,omitempty" xml:"ConfTitle,omitempty"`
	// example:
	//
	// true
	InviteCaller        *bool   `json:"InviteCaller,omitempty" xml:"InviteCaller,omitempty"`
	InviteUserIdsShrink *string `json:"InviteUserIds,omitempty" xml:"InviteUserIds,omitempty"`
}

func (s CreateVideoConferenceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoConferenceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateVideoConferenceShrinkRequest) SetConfTitle(v string) *CreateVideoConferenceShrinkRequest {
	s.ConfTitle = &v
	return s
}

func (s *CreateVideoConferenceShrinkRequest) SetInviteCaller(v bool) *CreateVideoConferenceShrinkRequest {
	s.InviteCaller = &v
	return s
}

func (s *CreateVideoConferenceShrinkRequest) SetInviteUserIdsShrink(v string) *CreateVideoConferenceShrinkRequest {
	s.InviteUserIdsShrink = &v
	return s
}

type CreateVideoConferenceResponseBody struct {
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	// example:
	//
	// 1151302294
	ConferencePassword *string `json:"conferencePassword,omitempty" xml:"conferencePassword,omitempty"`
	// example:
	//
	// https://pre-meeting.dingtalk.com/app?roomCode=68550708396&token=1_59209c43-431c-4e57-a0f8-11bebdb3db7f
	ExternalLinkUrl *string `json:"externalLinkUrl,omitempty" xml:"externalLinkUrl,omitempty"`
	// example:
	//
	// 2142817614
	HostPassword *string   `json:"hostPassword,omitempty" xml:"hostPassword,omitempty"`
	PhoneNumbers []*string `json:"phoneNumbers,omitempty" xml:"phoneNumbers,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 3032809F-8C14-57E2-9B76-7AC2134FE3C8
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 123
	RoomCode *string `json:"roomCode,omitempty" xml:"roomCode,omitempty"`
}

func (s CreateVideoConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateVideoConferenceResponseBody) SetConferenceId(v string) *CreateVideoConferenceResponseBody {
	s.ConferenceId = &v
	return s
}

func (s *CreateVideoConferenceResponseBody) SetConferencePassword(v string) *CreateVideoConferenceResponseBody {
	s.ConferencePassword = &v
	return s
}

func (s *CreateVideoConferenceResponseBody) SetExternalLinkUrl(v string) *CreateVideoConferenceResponseBody {
	s.ExternalLinkUrl = &v
	return s
}

func (s *CreateVideoConferenceResponseBody) SetHostPassword(v string) *CreateVideoConferenceResponseBody {
	s.HostPassword = &v
	return s
}

func (s *CreateVideoConferenceResponseBody) SetPhoneNumbers(v []*string) *CreateVideoConferenceResponseBody {
	s.PhoneNumbers = v
	return s
}

func (s *CreateVideoConferenceResponseBody) SetRequestId(v string) *CreateVideoConferenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateVideoConferenceResponseBody) SetRoomCode(v string) *CreateVideoConferenceResponseBody {
	s.RoomCode = &v
	return s
}

type CreateVideoConferenceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateVideoConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateVideoConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateVideoConferenceResponse) GoString() string {
	return s.String()
}

func (s *CreateVideoConferenceResponse) SetHeaders(v map[string]*string) *CreateVideoConferenceResponse {
	s.Headers = v
	return s
}

func (s *CreateVideoConferenceResponse) SetStatusCode(v int32) *CreateVideoConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateVideoConferenceResponse) SetBody(v *CreateVideoConferenceResponseBody) *CreateVideoConferenceResponse {
	s.Body = v
	return s
}

type CreateWorkspaceHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateWorkspaceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateWorkspaceHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceHeaders) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceHeaders) SetCommonHeaders(v map[string]*string) *CreateWorkspaceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateWorkspaceHeaders) SetAccountContext(v *CreateWorkspaceHeadersAccountContext) *CreateWorkspaceHeaders {
	s.AccountContext = v
	return s
}

type CreateWorkspaceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateWorkspaceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceHeadersAccountContext) SetAccountId(v string) *CreateWorkspaceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateWorkspaceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateWorkspaceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateWorkspaceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateWorkspaceShrinkHeaders) SetAccountContextShrink(v string) *CreateWorkspaceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateWorkspaceRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	Name          *string                              `json:"Name,omitempty" xml:"Name,omitempty"`
	TenantContext *CreateWorkspaceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s CreateWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceRequest) SetDescription(v string) *CreateWorkspaceRequest {
	s.Description = &v
	return s
}

func (s *CreateWorkspaceRequest) SetName(v string) *CreateWorkspaceRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceRequest) SetTenantContext(v *CreateWorkspaceRequestTenantContext) *CreateWorkspaceRequest {
	s.TenantContext = v
	return s
}

type CreateWorkspaceRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateWorkspaceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceRequestTenantContext) SetTenantId(v string) *CreateWorkspaceRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateWorkspaceShrinkRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	Name                *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s CreateWorkspaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceShrinkRequest) SetDescription(v string) *CreateWorkspaceShrinkRequest {
	s.Description = &v
	return s
}

func (s *CreateWorkspaceShrinkRequest) SetName(v string) *CreateWorkspaceShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceShrinkRequest) SetTenantContextShrink(v string) *CreateWorkspaceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type CreateWorkspaceResponseBody struct {
	// example:
	//
	// 知识库描述
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// 知识库
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// https://xxx/workspaceId
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// example:
	//
	// YRBGvyxxxx
	WorkspaceId *string `json:"workspaceId,omitempty" xml:"workspaceId,omitempty"`
}

func (s CreateWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceResponseBody) SetDescription(v string) *CreateWorkspaceResponseBody {
	s.Description = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetName(v string) *CreateWorkspaceResponseBody {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetRequestId(v string) *CreateWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetUrl(v string) *CreateWorkspaceResponseBody {
	s.Url = &v
	return s
}

func (s *CreateWorkspaceResponseBody) SetWorkspaceId(v string) *CreateWorkspaceResponseBody {
	s.WorkspaceId = &v
	return s
}

type CreateWorkspaceResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceResponse) SetHeaders(v map[string]*string) *CreateWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkspaceResponse) SetStatusCode(v int32) *CreateWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkspaceResponse) SetBody(v *CreateWorkspaceResponseBody) *CreateWorkspaceResponse {
	s.Body = v
	return s
}

type CreateWorkspaceDocHeaders struct {
	CommonHeaders  map[string]*string                       `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *CreateWorkspaceDocHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s CreateWorkspaceDocHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocHeaders) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocHeaders) SetCommonHeaders(v map[string]*string) *CreateWorkspaceDocHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateWorkspaceDocHeaders) SetAccountContext(v *CreateWorkspaceDocHeadersAccountContext) *CreateWorkspaceDocHeaders {
	s.AccountContext = v
	return s
}

type CreateWorkspaceDocHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s CreateWorkspaceDocHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocHeadersAccountContext) SetAccountId(v string) *CreateWorkspaceDocHeadersAccountContext {
	s.AccountId = &v
	return s
}

type CreateWorkspaceDocShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s CreateWorkspaceDocShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocShrinkHeaders) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocShrinkHeaders) SetCommonHeaders(v map[string]*string) *CreateWorkspaceDocShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *CreateWorkspaceDocShrinkHeaders) SetAccountContextShrink(v string) *CreateWorkspaceDocShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type CreateWorkspaceDocRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// DOC
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 测试文档
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// YRBGv0Ye
	ParentNodeId *string `json:"ParentNodeId,omitempty" xml:"ParentNodeId,omitempty"`
	// example:
	//
	// 123243
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// team_template
	TemplateType  *string                                 `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	TenantContext *CreateWorkspaceDocRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateWorkspaceDocRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocRequest) SetDocType(v string) *CreateWorkspaceDocRequest {
	s.DocType = &v
	return s
}

func (s *CreateWorkspaceDocRequest) SetName(v string) *CreateWorkspaceDocRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceDocRequest) SetParentNodeId(v string) *CreateWorkspaceDocRequest {
	s.ParentNodeId = &v
	return s
}

func (s *CreateWorkspaceDocRequest) SetTemplateId(v string) *CreateWorkspaceDocRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateWorkspaceDocRequest) SetTemplateType(v string) *CreateWorkspaceDocRequest {
	s.TemplateType = &v
	return s
}

func (s *CreateWorkspaceDocRequest) SetTenantContext(v *CreateWorkspaceDocRequestTenantContext) *CreateWorkspaceDocRequest {
	s.TenantContext = v
	return s
}

func (s *CreateWorkspaceDocRequest) SetWorkspaceId(v string) *CreateWorkspaceDocRequest {
	s.WorkspaceId = &v
	return s
}

type CreateWorkspaceDocRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s CreateWorkspaceDocRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocRequestTenantContext) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocRequestTenantContext) SetTenantId(v string) *CreateWorkspaceDocRequestTenantContext {
	s.TenantId = &v
	return s
}

type CreateWorkspaceDocShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// DOC
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 测试文档
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// YRBGv0Ye
	ParentNodeId *string `json:"ParentNodeId,omitempty" xml:"ParentNodeId,omitempty"`
	// example:
	//
	// 123243
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// team_template
	TemplateType        *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s CreateWorkspaceDocShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocShrinkRequest) SetDocType(v string) *CreateWorkspaceDocShrinkRequest {
	s.DocType = &v
	return s
}

func (s *CreateWorkspaceDocShrinkRequest) SetName(v string) *CreateWorkspaceDocShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateWorkspaceDocShrinkRequest) SetParentNodeId(v string) *CreateWorkspaceDocShrinkRequest {
	s.ParentNodeId = &v
	return s
}

func (s *CreateWorkspaceDocShrinkRequest) SetTemplateId(v string) *CreateWorkspaceDocShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateWorkspaceDocShrinkRequest) SetTemplateType(v string) *CreateWorkspaceDocShrinkRequest {
	s.TemplateType = &v
	return s
}

func (s *CreateWorkspaceDocShrinkRequest) SetTenantContextShrink(v string) *CreateWorkspaceDocShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *CreateWorkspaceDocShrinkRequest) SetWorkspaceId(v string) *CreateWorkspaceDocShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type CreateWorkspaceDocResponseBody struct {
	// example:
	//
	// QoJGq7xxx
	DocKey *string `json:"docKey,omitempty" xml:"docKey,omitempty"`
	// example:
	//
	// YRBGv0Ye
	NodeId *string `json:"nodeId,omitempty" xml:"nodeId,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// https://xxx/workspaceId/docs/nodeId
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
	// example:
	//
	// YRBGvy
	WorkspaceId *string `json:"workspaceId,omitempty" xml:"workspaceId,omitempty"`
}

func (s CreateWorkspaceDocResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocResponseBody) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocResponseBody) SetDocKey(v string) *CreateWorkspaceDocResponseBody {
	s.DocKey = &v
	return s
}

func (s *CreateWorkspaceDocResponseBody) SetNodeId(v string) *CreateWorkspaceDocResponseBody {
	s.NodeId = &v
	return s
}

func (s *CreateWorkspaceDocResponseBody) SetRequestId(v string) *CreateWorkspaceDocResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateWorkspaceDocResponseBody) SetUrl(v string) *CreateWorkspaceDocResponseBody {
	s.Url = &v
	return s
}

func (s *CreateWorkspaceDocResponseBody) SetWorkspaceId(v string) *CreateWorkspaceDocResponseBody {
	s.WorkspaceId = &v
	return s
}

type CreateWorkspaceDocResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateWorkspaceDocResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateWorkspaceDocResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateWorkspaceDocResponse) GoString() string {
	return s.String()
}

func (s *CreateWorkspaceDocResponse) SetHeaders(v map[string]*string) *CreateWorkspaceDocResponse {
	s.Headers = v
	return s
}

func (s *CreateWorkspaceDocResponse) SetStatusCode(v int32) *CreateWorkspaceDocResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateWorkspaceDocResponse) SetBody(v *CreateWorkspaceDocResponseBody) *CreateWorkspaceDocResponse {
	s.Body = v
	return s
}

type DeleteColumnsHeaders struct {
	CommonHeaders  map[string]*string                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteColumnsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteColumnsHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsHeaders) GoString() string {
	return s.String()
}

func (s *DeleteColumnsHeaders) SetCommonHeaders(v map[string]*string) *DeleteColumnsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteColumnsHeaders) SetAccountContext(v *DeleteColumnsHeadersAccountContext) *DeleteColumnsHeaders {
	s.AccountContext = v
	return s
}

type DeleteColumnsHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteColumnsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteColumnsHeadersAccountContext) SetAccountId(v string) *DeleteColumnsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteColumnsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteColumnsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteColumnsShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteColumnsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteColumnsShrinkHeaders) SetAccountContextShrink(v string) *DeleteColumnsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteColumnsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Column *int64 `json:"Column,omitempty" xml:"Column,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	ColumnCount *int64 `json:"ColumnCount,omitempty" xml:"ColumnCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                            `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *DeleteColumnsRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s DeleteColumnsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsRequest) GoString() string {
	return s.String()
}

func (s *DeleteColumnsRequest) SetColumn(v int64) *DeleteColumnsRequest {
	s.Column = &v
	return s
}

func (s *DeleteColumnsRequest) SetColumnCount(v int64) *DeleteColumnsRequest {
	s.ColumnCount = &v
	return s
}

func (s *DeleteColumnsRequest) SetSheetId(v string) *DeleteColumnsRequest {
	s.SheetId = &v
	return s
}

func (s *DeleteColumnsRequest) SetTenantContext(v *DeleteColumnsRequestTenantContext) *DeleteColumnsRequest {
	s.TenantContext = v
	return s
}

func (s *DeleteColumnsRequest) SetWorkbookId(v string) *DeleteColumnsRequest {
	s.WorkbookId = &v
	return s
}

type DeleteColumnsRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteColumnsRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteColumnsRequestTenantContext) SetTenantId(v string) *DeleteColumnsRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteColumnsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Column *int64 `json:"Column,omitempty" xml:"Column,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	ColumnCount *int64 `json:"ColumnCount,omitempty" xml:"ColumnCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s DeleteColumnsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteColumnsShrinkRequest) SetColumn(v int64) *DeleteColumnsShrinkRequest {
	s.Column = &v
	return s
}

func (s *DeleteColumnsShrinkRequest) SetColumnCount(v int64) *DeleteColumnsShrinkRequest {
	s.ColumnCount = &v
	return s
}

func (s *DeleteColumnsShrinkRequest) SetSheetId(v string) *DeleteColumnsShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *DeleteColumnsShrinkRequest) SetTenantContextShrink(v string) *DeleteColumnsShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *DeleteColumnsShrinkRequest) SetWorkbookId(v string) *DeleteColumnsShrinkRequest {
	s.WorkbookId = &v
	return s
}

type DeleteColumnsResponseBody struct {
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s DeleteColumnsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteColumnsResponseBody) SetId(v string) *DeleteColumnsResponseBody {
	s.Id = &v
	return s
}

func (s *DeleteColumnsResponseBody) SetRequestId(v string) *DeleteColumnsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteColumnsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteColumnsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteColumnsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteColumnsResponse) GoString() string {
	return s.String()
}

func (s *DeleteColumnsResponse) SetHeaders(v map[string]*string) *DeleteColumnsResponse {
	s.Headers = v
	return s
}

func (s *DeleteColumnsResponse) SetStatusCode(v int32) *DeleteColumnsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteColumnsResponse) SetBody(v *DeleteColumnsResponseBody) *DeleteColumnsResponse {
	s.Body = v
	return s
}

type DeleteDriveSpaceHeaders struct {
	CommonHeaders map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	// This parameter is required.
	AccountContext *DeleteDriveSpaceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteDriveSpaceHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceHeaders) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceHeaders) SetCommonHeaders(v map[string]*string) *DeleteDriveSpaceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteDriveSpaceHeaders) SetAccountContext(v *DeleteDriveSpaceHeadersAccountContext) *DeleteDriveSpaceHeaders {
	s.AccountContext = v
	return s
}

type DeleteDriveSpaceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteDriveSpaceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceHeadersAccountContext) SetAccountId(v string) *DeleteDriveSpaceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteDriveSpaceShrinkHeaders struct {
	CommonHeaders map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	// This parameter is required.
	AccountContextShrink *string `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteDriveSpaceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteDriveSpaceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteDriveSpaceShrinkHeaders) SetAccountContextShrink(v string) *DeleteDriveSpaceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteDriveSpaceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 123
	SpaceId       *string                               `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContext *DeleteDriveSpaceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s DeleteDriveSpaceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceRequest) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceRequest) SetSpaceId(v string) *DeleteDriveSpaceRequest {
	s.SpaceId = &v
	return s
}

func (s *DeleteDriveSpaceRequest) SetTenantContext(v *DeleteDriveSpaceRequestTenantContext) *DeleteDriveSpaceRequest {
	s.TenantContext = v
	return s
}

type DeleteDriveSpaceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteDriveSpaceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceRequestTenantContext) SetTenantId(v string) *DeleteDriveSpaceRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteDriveSpaceShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 123
	SpaceId             *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s DeleteDriveSpaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceShrinkRequest) SetSpaceId(v string) *DeleteDriveSpaceShrinkRequest {
	s.SpaceId = &v
	return s
}

func (s *DeleteDriveSpaceShrinkRequest) SetTenantContextShrink(v string) *DeleteDriveSpaceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type DeleteDriveSpaceResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s DeleteDriveSpaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceResponseBody) SetRequestId(v string) *DeleteDriveSpaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteDriveSpaceResponseBody) SetVendorRequestId(v string) *DeleteDriveSpaceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *DeleteDriveSpaceResponseBody) SetVendorType(v string) *DeleteDriveSpaceResponseBody {
	s.VendorType = &v
	return s
}

type DeleteDriveSpaceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDriveSpaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDriveSpaceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDriveSpaceResponse) GoString() string {
	return s.String()
}

func (s *DeleteDriveSpaceResponse) SetHeaders(v map[string]*string) *DeleteDriveSpaceResponse {
	s.Headers = v
	return s
}

func (s *DeleteDriveSpaceResponse) SetStatusCode(v int32) *DeleteDriveSpaceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDriveSpaceResponse) SetBody(v *DeleteDriveSpaceResponseBody) *DeleteDriveSpaceResponse {
	s.Body = v
	return s
}

type DeleteEventHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteEventHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteEventHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventHeaders) GoString() string {
	return s.String()
}

func (s *DeleteEventHeaders) SetCommonHeaders(v map[string]*string) *DeleteEventHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteEventHeaders) SetAccountContext(v *DeleteEventHeadersAccountContext) *DeleteEventHeaders {
	s.AccountContext = v
	return s
}

type DeleteEventHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 123456
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteEventHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteEventHeadersAccountContext) SetAccountId(v string) *DeleteEventHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteEventShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteEventShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteEventShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteEventShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteEventShrinkHeaders) SetAccountContextShrink(v string) *DeleteEventShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteEventRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// iiiP35sJadba8aBSgjrwPRKgiEiF
	EventId          *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	PushNotification *bool   `json:"pushNotification,omitempty" xml:"pushNotification,omitempty"`
}

func (s DeleteEventRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventRequest) GoString() string {
	return s.String()
}

func (s *DeleteEventRequest) SetCalendarId(v string) *DeleteEventRequest {
	s.CalendarId = &v
	return s
}

func (s *DeleteEventRequest) SetEventId(v string) *DeleteEventRequest {
	s.EventId = &v
	return s
}

func (s *DeleteEventRequest) SetPushNotification(v bool) *DeleteEventRequest {
	s.PushNotification = &v
	return s
}

type DeleteEventResponseBody struct {
	Content *DeleteEventResponseBodyContent `json:"content,omitempty" xml:"content,omitempty" type:"Struct"`
	// example:
	//
	// success
	ErrorCode *string                `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	ErrorCtx  map[string]interface{} `json:"errorCtx,omitempty" xml:"errorCtx,omitempty"`
	// example:
	//
	// ""
	ErrorMsg *string `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	// requestId
	//
	// example:
	//
	// 4248DCC9-785F-5A14-8BE0-830FD52E1261
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEventResponseBody) SetContent(v *DeleteEventResponseBodyContent) *DeleteEventResponseBody {
	s.Content = v
	return s
}

func (s *DeleteEventResponseBody) SetErrorCode(v string) *DeleteEventResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteEventResponseBody) SetErrorCtx(v map[string]interface{}) *DeleteEventResponseBody {
	s.ErrorCtx = v
	return s
}

func (s *DeleteEventResponseBody) SetErrorMsg(v string) *DeleteEventResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *DeleteEventResponseBody) SetHttpStatusCode(v int32) *DeleteEventResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DeleteEventResponseBody) SetRequestId(v string) *DeleteEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteEventResponseBody) SetSuccess(v bool) *DeleteEventResponseBody {
	s.Success = &v
	return s
}

type DeleteEventResponseBodyContent struct {
	// example:
	//
	// []
	Data interface{} `json:"data,omitempty" xml:"data,omitempty"`
}

func (s DeleteEventResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventResponseBodyContent) GoString() string {
	return s.String()
}

func (s *DeleteEventResponseBodyContent) SetData(v interface{}) *DeleteEventResponseBodyContent {
	s.Data = v
	return s
}

type DeleteEventResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEventResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEventResponse) GoString() string {
	return s.String()
}

func (s *DeleteEventResponse) SetHeaders(v map[string]*string) *DeleteEventResponse {
	s.Headers = v
	return s
}

func (s *DeleteEventResponse) SetStatusCode(v int32) *DeleteEventResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEventResponse) SetBody(v *DeleteEventResponseBody) *DeleteEventResponse {
	s.Body = v
	return s
}

type DeleteFormDataHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteFormDataHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteFormDataHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteFormDataHeaders) GoString() string {
	return s.String()
}

func (s *DeleteFormDataHeaders) SetCommonHeaders(v map[string]*string) *DeleteFormDataHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteFormDataHeaders) SetAccountContext(v *DeleteFormDataHeadersAccountContext) *DeleteFormDataHeaders {
	s.AccountContext = v
	return s
}

type DeleteFormDataHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteFormDataHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteFormDataHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteFormDataHeadersAccountContext) SetAccountId(v string) *DeleteFormDataHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteFormDataShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteFormDataShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteFormDataShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteFormDataShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteFormDataShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteFormDataShrinkHeaders) SetAccountContextShrink(v string) *DeleteFormDataShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteFormDataRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKTxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM_INST_12345
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s DeleteFormDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFormDataRequest) GoString() string {
	return s.String()
}

func (s *DeleteFormDataRequest) SetAppType(v string) *DeleteFormDataRequest {
	s.AppType = &v
	return s
}

func (s *DeleteFormDataRequest) SetFormInstanceId(v string) *DeleteFormDataRequest {
	s.FormInstanceId = &v
	return s
}

func (s *DeleteFormDataRequest) SetLanguage(v string) *DeleteFormDataRequest {
	s.Language = &v
	return s
}

func (s *DeleteFormDataRequest) SetSystemToken(v string) *DeleteFormDataRequest {
	s.SystemToken = &v
	return s
}

type DeleteFormDataResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s DeleteFormDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFormDataResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFormDataResponseBody) SetRequestId(v string) *DeleteFormDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFormDataResponseBody) SetVendorRequestId(v string) *DeleteFormDataResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *DeleteFormDataResponseBody) SetVendorType(v string) *DeleteFormDataResponseBody {
	s.VendorType = &v
	return s
}

type DeleteFormDataResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFormDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFormDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFormDataResponse) GoString() string {
	return s.String()
}

func (s *DeleteFormDataResponse) SetHeaders(v map[string]*string) *DeleteFormDataResponse {
	s.Headers = v
	return s
}

func (s *DeleteFormDataResponse) SetStatusCode(v int32) *DeleteFormDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFormDataResponse) SetBody(v *DeleteFormDataResponseBody) *DeleteFormDataResponse {
	s.Body = v
	return s
}

type DeleteInstanceHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteInstanceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteInstanceHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceHeaders) GoString() string {
	return s.String()
}

func (s *DeleteInstanceHeaders) SetCommonHeaders(v map[string]*string) *DeleteInstanceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteInstanceHeaders) SetAccountContext(v *DeleteInstanceHeadersAccountContext) *DeleteInstanceHeaders {
	s.AccountContext = v
	return s
}

type DeleteInstanceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteInstanceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteInstanceHeadersAccountContext) SetAccountId(v string) *DeleteInstanceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteInstanceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteInstanceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteInstanceShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteInstanceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteInstanceShrinkHeaders) SetAccountContextShrink(v string) *DeleteInstanceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteInstanceRequest struct {
	// example:
	//
	// APP_PBKTxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// f30233fb-72xxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s DeleteInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceRequest) GoString() string {
	return s.String()
}

func (s *DeleteInstanceRequest) SetAppType(v string) *DeleteInstanceRequest {
	s.AppType = &v
	return s
}

func (s *DeleteInstanceRequest) SetLanguage(v string) *DeleteInstanceRequest {
	s.Language = &v
	return s
}

func (s *DeleteInstanceRequest) SetProcessInstanceId(v string) *DeleteInstanceRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *DeleteInstanceRequest) SetSystemToken(v string) *DeleteInstanceRequest {
	s.SystemToken = &v
	return s
}

type DeleteInstanceResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s DeleteInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponseBody) SetRequestId(v string) *DeleteInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetVendorRequestId(v string) *DeleteInstanceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *DeleteInstanceResponseBody) SetVendorType(v string) *DeleteInstanceResponseBody {
	s.VendorType = &v
	return s
}

type DeleteInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteInstanceResponse) GoString() string {
	return s.String()
}

func (s *DeleteInstanceResponse) SetHeaders(v map[string]*string) *DeleteInstanceResponse {
	s.Headers = v
	return s
}

func (s *DeleteInstanceResponse) SetStatusCode(v int32) *DeleteInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteInstanceResponse) SetBody(v *DeleteInstanceResponseBody) *DeleteInstanceResponse {
	s.Body = v
	return s
}

type DeleteLiveHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteLiveHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteLiveHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveHeaders) GoString() string {
	return s.String()
}

func (s *DeleteLiveHeaders) SetCommonHeaders(v map[string]*string) *DeleteLiveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteLiveHeaders) SetAccountContext(v *DeleteLiveHeadersAccountContext) *DeleteLiveHeaders {
	s.AccountContext = v
	return s
}

type DeleteLiveHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteLiveHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteLiveHeadersAccountContext) SetAccountId(v string) *DeleteLiveHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteLiveShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteLiveShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteLiveShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteLiveShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteLiveShrinkHeaders) SetAccountContextShrink(v string) *DeleteLiveShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteLiveRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId        *string                         `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContext *DeleteLiveRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s DeleteLiveRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRequest) SetLiveId(v string) *DeleteLiveRequest {
	s.LiveId = &v
	return s
}

func (s *DeleteLiveRequest) SetTenantContext(v *DeleteLiveRequestTenantContext) *DeleteLiveRequest {
	s.TenantContext = v
	return s
}

type DeleteLiveRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteLiveRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteLiveRequestTenantContext) SetTenantId(v string) *DeleteLiveRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteLiveShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId              *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s DeleteLiveShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveShrinkRequest) SetLiveId(v string) *DeleteLiveShrinkRequest {
	s.LiveId = &v
	return s
}

func (s *DeleteLiveShrinkRequest) SetTenantContextShrink(v string) *DeleteLiveShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type DeleteLiveResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteLiveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveResponseBody) SetRequestId(v string) *DeleteLiveResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteLiveResponseBody) SetSuccess(v bool) *DeleteLiveResponseBody {
	s.Success = &v
	return s
}

type DeleteLiveResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveResponse) SetHeaders(v map[string]*string) *DeleteLiveResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveResponse) SetStatusCode(v int32) *DeleteLiveResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveResponse) SetBody(v *DeleteLiveResponseBody) *DeleteLiveResponse {
	s.Body = v
	return s
}

type DeleteMeetingRoomHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteMeetingRoomHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteMeetingRoomHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomHeaders) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomHeaders) SetCommonHeaders(v map[string]*string) *DeleteMeetingRoomHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteMeetingRoomHeaders) SetAccountContext(v *DeleteMeetingRoomHeadersAccountContext) *DeleteMeetingRoomHeaders {
	s.AccountContext = v
	return s
}

type DeleteMeetingRoomHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteMeetingRoomHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomHeadersAccountContext) SetAccountId(v string) *DeleteMeetingRoomHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteMeetingRoomShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteMeetingRoomShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteMeetingRoomShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteMeetingRoomShrinkHeaders) SetAccountContextShrink(v string) *DeleteMeetingRoomShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteMeetingRoomRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0ffb7xxxxx
	RoomId        *string                                `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	TenantContext *DeleteMeetingRoomRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s DeleteMeetingRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomRequest) SetRoomId(v string) *DeleteMeetingRoomRequest {
	s.RoomId = &v
	return s
}

func (s *DeleteMeetingRoomRequest) SetTenantContext(v *DeleteMeetingRoomRequestTenantContext) *DeleteMeetingRoomRequest {
	s.TenantContext = v
	return s
}

type DeleteMeetingRoomRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteMeetingRoomRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomRequestTenantContext) SetTenantId(v string) *DeleteMeetingRoomRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteMeetingRoomShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0ffb7xxxxx
	RoomId              *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s DeleteMeetingRoomShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomShrinkRequest) SetRoomId(v string) *DeleteMeetingRoomShrinkRequest {
	s.RoomId = &v
	return s
}

func (s *DeleteMeetingRoomShrinkRequest) SetTenantContextShrink(v string) *DeleteMeetingRoomShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type DeleteMeetingRoomResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteMeetingRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomResponseBody) SetRequestId(v string) *DeleteMeetingRoomResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMeetingRoomResponseBody) SetResult(v bool) *DeleteMeetingRoomResponseBody {
	s.Result = &v
	return s
}

type DeleteMeetingRoomResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMeetingRoomResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMeetingRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomResponse) SetHeaders(v map[string]*string) *DeleteMeetingRoomResponse {
	s.Headers = v
	return s
}

func (s *DeleteMeetingRoomResponse) SetStatusCode(v int32) *DeleteMeetingRoomResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMeetingRoomResponse) SetBody(v *DeleteMeetingRoomResponseBody) *DeleteMeetingRoomResponse {
	s.Body = v
	return s
}

type DeleteMeetingRoomGroupHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteMeetingRoomGroupHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteMeetingRoomGroupHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupHeaders) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupHeaders) SetCommonHeaders(v map[string]*string) *DeleteMeetingRoomGroupHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteMeetingRoomGroupHeaders) SetAccountContext(v *DeleteMeetingRoomGroupHeadersAccountContext) *DeleteMeetingRoomGroupHeaders {
	s.AccountContext = v
	return s
}

type DeleteMeetingRoomGroupHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteMeetingRoomGroupHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupHeadersAccountContext) SetAccountId(v string) *DeleteMeetingRoomGroupHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteMeetingRoomGroupShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteMeetingRoomGroupShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteMeetingRoomGroupShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteMeetingRoomGroupShrinkHeaders) SetAccountContextShrink(v string) *DeleteMeetingRoomGroupShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteMeetingRoomGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 172
	GroupId       *string                                     `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	TenantContext *DeleteMeetingRoomGroupRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s DeleteMeetingRoomGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupRequest) SetGroupId(v string) *DeleteMeetingRoomGroupRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMeetingRoomGroupRequest) SetTenantContext(v *DeleteMeetingRoomGroupRequestTenantContext) *DeleteMeetingRoomGroupRequest {
	s.TenantContext = v
	return s
}

type DeleteMeetingRoomGroupRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteMeetingRoomGroupRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupRequestTenantContext) SetTenantId(v string) *DeleteMeetingRoomGroupRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteMeetingRoomGroupShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 172
	GroupId             *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s DeleteMeetingRoomGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupShrinkRequest) SetGroupId(v string) *DeleteMeetingRoomGroupShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *DeleteMeetingRoomGroupShrinkRequest) SetTenantContextShrink(v string) *DeleteMeetingRoomGroupShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type DeleteMeetingRoomGroupResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteMeetingRoomGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupResponseBody) SetRequestId(v string) *DeleteMeetingRoomGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMeetingRoomGroupResponseBody) SetResult(v bool) *DeleteMeetingRoomGroupResponseBody {
	s.Result = &v
	return s
}

type DeleteMeetingRoomGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMeetingRoomGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMeetingRoomGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMeetingRoomGroupResponse) GoString() string {
	return s.String()
}

func (s *DeleteMeetingRoomGroupResponse) SetHeaders(v map[string]*string) *DeleteMeetingRoomGroupResponse {
	s.Headers = v
	return s
}

func (s *DeleteMeetingRoomGroupResponse) SetStatusCode(v int32) *DeleteMeetingRoomGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMeetingRoomGroupResponse) SetBody(v *DeleteMeetingRoomGroupResponseBody) *DeleteMeetingRoomGroupResponse {
	s.Body = v
	return s
}

type DeleteRowsHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteRowsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteRowsHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsHeaders) GoString() string {
	return s.String()
}

func (s *DeleteRowsHeaders) SetCommonHeaders(v map[string]*string) *DeleteRowsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteRowsHeaders) SetAccountContext(v *DeleteRowsHeadersAccountContext) *DeleteRowsHeaders {
	s.AccountContext = v
	return s
}

type DeleteRowsHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteRowsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteRowsHeadersAccountContext) SetAccountId(v string) *DeleteRowsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteRowsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteRowsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteRowsShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteRowsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteRowsShrinkHeaders) SetAccountContextShrink(v string) *DeleteRowsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteRowsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Row *int64 `json:"Row,omitempty" xml:"Row,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                         `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *DeleteRowsRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s DeleteRowsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsRequest) GoString() string {
	return s.String()
}

func (s *DeleteRowsRequest) SetRow(v int64) *DeleteRowsRequest {
	s.Row = &v
	return s
}

func (s *DeleteRowsRequest) SetRowCount(v int64) *DeleteRowsRequest {
	s.RowCount = &v
	return s
}

func (s *DeleteRowsRequest) SetSheetId(v string) *DeleteRowsRequest {
	s.SheetId = &v
	return s
}

func (s *DeleteRowsRequest) SetTenantContext(v *DeleteRowsRequestTenantContext) *DeleteRowsRequest {
	s.TenantContext = v
	return s
}

func (s *DeleteRowsRequest) SetWorkbookId(v string) *DeleteRowsRequest {
	s.WorkbookId = &v
	return s
}

type DeleteRowsRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteRowsRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteRowsRequestTenantContext) SetTenantId(v string) *DeleteRowsRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteRowsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Row *int64 `json:"Row,omitempty" xml:"Row,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s DeleteRowsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteRowsShrinkRequest) SetRow(v int64) *DeleteRowsShrinkRequest {
	s.Row = &v
	return s
}

func (s *DeleteRowsShrinkRequest) SetRowCount(v int64) *DeleteRowsShrinkRequest {
	s.RowCount = &v
	return s
}

func (s *DeleteRowsShrinkRequest) SetSheetId(v string) *DeleteRowsShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *DeleteRowsShrinkRequest) SetTenantContextShrink(v string) *DeleteRowsShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *DeleteRowsShrinkRequest) SetWorkbookId(v string) *DeleteRowsShrinkRequest {
	s.WorkbookId = &v
	return s
}

type DeleteRowsResponseBody struct {
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s DeleteRowsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteRowsResponseBody) SetId(v string) *DeleteRowsResponseBody {
	s.Id = &v
	return s
}

func (s *DeleteRowsResponseBody) SetRequestId(v string) *DeleteRowsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteRowsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteRowsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteRowsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteRowsResponse) GoString() string {
	return s.String()
}

func (s *DeleteRowsResponse) SetHeaders(v map[string]*string) *DeleteRowsResponse {
	s.Headers = v
	return s
}

func (s *DeleteRowsResponse) SetStatusCode(v int32) *DeleteRowsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteRowsResponse) SetBody(v *DeleteRowsResponseBody) *DeleteRowsResponse {
	s.Body = v
	return s
}

type DeleteScenegroupMemberHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteScenegroupMemberHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteScenegroupMemberHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenegroupMemberHeaders) GoString() string {
	return s.String()
}

func (s *DeleteScenegroupMemberHeaders) SetCommonHeaders(v map[string]*string) *DeleteScenegroupMemberHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteScenegroupMemberHeaders) SetAccountContext(v *DeleteScenegroupMemberHeadersAccountContext) *DeleteScenegroupMemberHeaders {
	s.AccountContext = v
	return s
}

type DeleteScenegroupMemberHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteScenegroupMemberHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenegroupMemberHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteScenegroupMemberHeadersAccountContext) SetAccountId(v string) *DeleteScenegroupMemberHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteScenegroupMemberShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteScenegroupMemberShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenegroupMemberShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteScenegroupMemberShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteScenegroupMemberShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteScenegroupMemberShrinkHeaders) SetAccountContextShrink(v string) *DeleteScenegroupMemberShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteScenegroupMemberRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cidvkLfbOyIiSYqjgvAiWwFow==
	OpenConversationId *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123xxx,223xxx
	UserIds *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s DeleteScenegroupMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenegroupMemberRequest) GoString() string {
	return s.String()
}

func (s *DeleteScenegroupMemberRequest) SetOpenConversationId(v string) *DeleteScenegroupMemberRequest {
	s.OpenConversationId = &v
	return s
}

func (s *DeleteScenegroupMemberRequest) SetUserIds(v string) *DeleteScenegroupMemberRequest {
	s.UserIds = &v
	return s
}

type DeleteScenegroupMemberResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteScenegroupMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenegroupMemberResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteScenegroupMemberResponseBody) SetRequestId(v string) *DeleteScenegroupMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteScenegroupMemberResponseBody) SetSuccess(v bool) *DeleteScenegroupMemberResponseBody {
	s.Success = &v
	return s
}

type DeleteScenegroupMemberResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteScenegroupMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteScenegroupMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteScenegroupMemberResponse) GoString() string {
	return s.String()
}

func (s *DeleteScenegroupMemberResponse) SetHeaders(v map[string]*string) *DeleteScenegroupMemberResponse {
	s.Headers = v
	return s
}

func (s *DeleteScenegroupMemberResponse) SetStatusCode(v int32) *DeleteScenegroupMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteScenegroupMemberResponse) SetBody(v *DeleteScenegroupMemberResponseBody) *DeleteScenegroupMemberResponse {
	s.Body = v
	return s
}

type DeleteSheetHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteSheetHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteSheetHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetHeaders) GoString() string {
	return s.String()
}

func (s *DeleteSheetHeaders) SetCommonHeaders(v map[string]*string) *DeleteSheetHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteSheetHeaders) SetAccountContext(v *DeleteSheetHeadersAccountContext) *DeleteSheetHeaders {
	s.AccountContext = v
	return s
}

type DeleteSheetHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteSheetHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteSheetHeadersAccountContext) SetAccountId(v string) *DeleteSheetHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteSheetShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteSheetShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteSheetShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteSheetShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteSheetShrinkHeaders) SetAccountContextShrink(v string) *DeleteSheetShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteSheetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                          `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *DeleteSheetRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s DeleteSheetRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetRequest) GoString() string {
	return s.String()
}

func (s *DeleteSheetRequest) SetSheetId(v string) *DeleteSheetRequest {
	s.SheetId = &v
	return s
}

func (s *DeleteSheetRequest) SetTenantContext(v *DeleteSheetRequestTenantContext) *DeleteSheetRequest {
	s.TenantContext = v
	return s
}

func (s *DeleteSheetRequest) SetWorkbookId(v string) *DeleteSheetRequest {
	s.WorkbookId = &v
	return s
}

type DeleteSheetRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteSheetRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteSheetRequestTenantContext) SetTenantId(v string) *DeleteSheetRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteSheetShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s DeleteSheetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteSheetShrinkRequest) SetSheetId(v string) *DeleteSheetShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *DeleteSheetShrinkRequest) SetTenantContextShrink(v string) *DeleteSheetShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *DeleteSheetShrinkRequest) SetWorkbookId(v string) *DeleteSheetShrinkRequest {
	s.WorkbookId = &v
	return s
}

type DeleteSheetResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s DeleteSheetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSheetResponseBody) SetRequestId(v string) *DeleteSheetResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteSheetResponseBody) SetSuccess(v bool) *DeleteSheetResponseBody {
	s.Success = &v
	return s
}

type DeleteSheetResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSheetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSheetResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSheetResponse) GoString() string {
	return s.String()
}

func (s *DeleteSheetResponse) SetHeaders(v map[string]*string) *DeleteSheetResponse {
	s.Headers = v
	return s
}

func (s *DeleteSheetResponse) SetStatusCode(v int32) *DeleteSheetResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSheetResponse) SetBody(v *DeleteSheetResponseBody) *DeleteSheetResponse {
	s.Body = v
	return s
}

type DeleteSubscribedCalendarHeaders struct {
	CommonHeaders  map[string]*string                             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteSubscribedCalendarHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteSubscribedCalendarHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribedCalendarHeaders) GoString() string {
	return s.String()
}

func (s *DeleteSubscribedCalendarHeaders) SetCommonHeaders(v map[string]*string) *DeleteSubscribedCalendarHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteSubscribedCalendarHeaders) SetAccountContext(v *DeleteSubscribedCalendarHeadersAccountContext) *DeleteSubscribedCalendarHeaders {
	s.AccountContext = v
	return s
}

type DeleteSubscribedCalendarHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteSubscribedCalendarHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribedCalendarHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteSubscribedCalendarHeadersAccountContext) SetAccountId(v string) *DeleteSubscribedCalendarHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteSubscribedCalendarShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteSubscribedCalendarShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribedCalendarShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteSubscribedCalendarShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteSubscribedCalendarShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteSubscribedCalendarShrinkHeaders) SetAccountContextShrink(v string) *DeleteSubscribedCalendarShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteSubscribedCalendarRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// MzM5Mxxx
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
}

func (s DeleteSubscribedCalendarRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribedCalendarRequest) GoString() string {
	return s.String()
}

func (s *DeleteSubscribedCalendarRequest) SetCalendarId(v string) *DeleteSubscribedCalendarRequest {
	s.CalendarId = &v
	return s
}

type DeleteSubscribedCalendarResponseBody struct {
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s DeleteSubscribedCalendarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribedCalendarResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSubscribedCalendarResponseBody) SetResult(v bool) *DeleteSubscribedCalendarResponseBody {
	s.Result = &v
	return s
}

func (s *DeleteSubscribedCalendarResponseBody) SetRequestId(v string) *DeleteSubscribedCalendarResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSubscribedCalendarResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSubscribedCalendarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSubscribedCalendarResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSubscribedCalendarResponse) GoString() string {
	return s.String()
}

func (s *DeleteSubscribedCalendarResponse) SetHeaders(v map[string]*string) *DeleteSubscribedCalendarResponse {
	s.Headers = v
	return s
}

func (s *DeleteSubscribedCalendarResponse) SetStatusCode(v int32) *DeleteSubscribedCalendarResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSubscribedCalendarResponse) SetBody(v *DeleteSubscribedCalendarResponseBody) *DeleteSubscribedCalendarResponse {
	s.Body = v
	return s
}

type DeleteTodoTaskHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteTodoTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteTodoTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskHeaders) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskHeaders) SetCommonHeaders(v map[string]*string) *DeleteTodoTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteTodoTaskHeaders) SetAccountContext(v *DeleteTodoTaskHeadersAccountContext) *DeleteTodoTaskHeaders {
	s.AccountContext = v
	return s
}

type DeleteTodoTaskHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteTodoTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskHeadersAccountContext) SetAccountId(v string) *DeleteTodoTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteTodoTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteTodoTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteTodoTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteTodoTaskShrinkHeaders) SetAccountContextShrink(v string) *DeleteTodoTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteTodoTaskRequest struct {
	TenantContext *DeleteTodoTaskRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// 12345
	OperatorId *string `json:"operatorId,omitempty" xml:"operatorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 63edc8da7e917d6ecdaab11b
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s DeleteTodoTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskRequest) SetTenantContext(v *DeleteTodoTaskRequestTenantContext) *DeleteTodoTaskRequest {
	s.TenantContext = v
	return s
}

func (s *DeleteTodoTaskRequest) SetOperatorId(v string) *DeleteTodoTaskRequest {
	s.OperatorId = &v
	return s
}

func (s *DeleteTodoTaskRequest) SetTaskId(v string) *DeleteTodoTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteTodoTaskRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteTodoTaskRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskRequestTenantContext) SetTenantId(v string) *DeleteTodoTaskRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteTodoTaskShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// 12345
	OperatorId *string `json:"operatorId,omitempty" xml:"operatorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 63edc8da7e917d6ecdaab11b
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s DeleteTodoTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskShrinkRequest) SetTenantContextShrink(v string) *DeleteTodoTaskShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *DeleteTodoTaskShrinkRequest) SetOperatorId(v string) *DeleteTodoTaskShrinkRequest {
	s.OperatorId = &v
	return s
}

func (s *DeleteTodoTaskShrinkRequest) SetTaskId(v string) *DeleteTodoTaskShrinkRequest {
	s.TaskId = &v
	return s
}

type DeleteTodoTaskResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s DeleteTodoTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskResponseBody) SetRequestId(v string) *DeleteTodoTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTodoTaskResponseBody) SetResult(v bool) *DeleteTodoTaskResponseBody {
	s.Result = &v
	return s
}

type DeleteTodoTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTodoTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTodoTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTodoTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteTodoTaskResponse) SetHeaders(v map[string]*string) *DeleteTodoTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteTodoTaskResponse) SetStatusCode(v int32) *DeleteTodoTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTodoTaskResponse) SetBody(v *DeleteTodoTaskResponseBody) *DeleteTodoTaskResponse {
	s.Body = v
	return s
}

type DeleteWorkspaceDocMembersHeaders struct {
	CommonHeaders  map[string]*string                              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteWorkspaceDocMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteWorkspaceDocMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersHeaders) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersHeaders) SetCommonHeaders(v map[string]*string) *DeleteWorkspaceDocMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteWorkspaceDocMembersHeaders) SetAccountContext(v *DeleteWorkspaceDocMembersHeadersAccountContext) *DeleteWorkspaceDocMembersHeaders {
	s.AccountContext = v
	return s
}

type DeleteWorkspaceDocMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteWorkspaceDocMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersHeadersAccountContext) SetAccountId(v string) *DeleteWorkspaceDocMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteWorkspaceDocMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteWorkspaceDocMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteWorkspaceDocMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteWorkspaceDocMembersShrinkHeaders) SetAccountContextShrink(v string) *DeleteWorkspaceDocMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteWorkspaceDocMembersRequest struct {
	// This parameter is required.
	Members []*DeleteWorkspaceDocMembersRequestMembers `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// YRBGv0xxx
	NodeId        *string                                        `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContext *DeleteWorkspaceDocMembersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// YRBGvyxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteWorkspaceDocMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersRequest) SetMembers(v []*DeleteWorkspaceDocMembersRequestMembers) *DeleteWorkspaceDocMembersRequest {
	s.Members = v
	return s
}

func (s *DeleteWorkspaceDocMembersRequest) SetNodeId(v string) *DeleteWorkspaceDocMembersRequest {
	s.NodeId = &v
	return s
}

func (s *DeleteWorkspaceDocMembersRequest) SetTenantContext(v *DeleteWorkspaceDocMembersRequestTenantContext) *DeleteWorkspaceDocMembersRequest {
	s.TenantContext = v
	return s
}

func (s *DeleteWorkspaceDocMembersRequest) SetWorkspaceId(v string) *DeleteWorkspaceDocMembersRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteWorkspaceDocMembersRequestMembers struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	MemberId *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// USER
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
}

func (s DeleteWorkspaceDocMembersRequestMembers) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersRequestMembers) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersRequestMembers) SetMemberId(v string) *DeleteWorkspaceDocMembersRequestMembers {
	s.MemberId = &v
	return s
}

func (s *DeleteWorkspaceDocMembersRequestMembers) SetMemberType(v string) *DeleteWorkspaceDocMembersRequestMembers {
	s.MemberType = &v
	return s
}

type DeleteWorkspaceDocMembersRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteWorkspaceDocMembersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersRequestTenantContext) SetTenantId(v string) *DeleteWorkspaceDocMembersRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteWorkspaceDocMembersShrinkRequest struct {
	// This parameter is required.
	MembersShrink *string `json:"Members,omitempty" xml:"Members,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// YRBGv0xxx
	NodeId              *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// YRBGvyxxx
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteWorkspaceDocMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersShrinkRequest) SetMembersShrink(v string) *DeleteWorkspaceDocMembersShrinkRequest {
	s.MembersShrink = &v
	return s
}

func (s *DeleteWorkspaceDocMembersShrinkRequest) SetNodeId(v string) *DeleteWorkspaceDocMembersShrinkRequest {
	s.NodeId = &v
	return s
}

func (s *DeleteWorkspaceDocMembersShrinkRequest) SetTenantContextShrink(v string) *DeleteWorkspaceDocMembersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *DeleteWorkspaceDocMembersShrinkRequest) SetWorkspaceId(v string) *DeleteWorkspaceDocMembersShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteWorkspaceDocMembersResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s DeleteWorkspaceDocMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersResponseBody) SetRequestId(v string) *DeleteWorkspaceDocMembersResponseBody {
	s.RequestId = &v
	return s
}

type DeleteWorkspaceDocMembersResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWorkspaceDocMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWorkspaceDocMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceDocMembersResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceDocMembersResponse) SetHeaders(v map[string]*string) *DeleteWorkspaceDocMembersResponse {
	s.Headers = v
	return s
}

func (s *DeleteWorkspaceDocMembersResponse) SetStatusCode(v int32) *DeleteWorkspaceDocMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWorkspaceDocMembersResponse) SetBody(v *DeleteWorkspaceDocMembersResponseBody) *DeleteWorkspaceDocMembersResponse {
	s.Body = v
	return s
}

type DeleteWorkspaceMembersHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *DeleteWorkspaceMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s DeleteWorkspaceMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersHeaders) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersHeaders) SetCommonHeaders(v map[string]*string) *DeleteWorkspaceMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteWorkspaceMembersHeaders) SetAccountContext(v *DeleteWorkspaceMembersHeadersAccountContext) *DeleteWorkspaceMembersHeaders {
	s.AccountContext = v
	return s
}

type DeleteWorkspaceMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s DeleteWorkspaceMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersHeadersAccountContext) SetAccountId(v string) *DeleteWorkspaceMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type DeleteWorkspaceMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s DeleteWorkspaceMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *DeleteWorkspaceMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *DeleteWorkspaceMembersShrinkHeaders) SetAccountContextShrink(v string) *DeleteWorkspaceMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type DeleteWorkspaceMembersRequest struct {
	// This parameter is required.
	Members       []*DeleteWorkspaceMembersRequestMembers     `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	TenantContext *DeleteWorkspaceMembersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteWorkspaceMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersRequest) SetMembers(v []*DeleteWorkspaceMembersRequestMembers) *DeleteWorkspaceMembersRequest {
	s.Members = v
	return s
}

func (s *DeleteWorkspaceMembersRequest) SetTenantContext(v *DeleteWorkspaceMembersRequestTenantContext) *DeleteWorkspaceMembersRequest {
	s.TenantContext = v
	return s
}

func (s *DeleteWorkspaceMembersRequest) SetWorkspaceId(v string) *DeleteWorkspaceMembersRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteWorkspaceMembersRequestMembers struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	MemberId *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// USER
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
}

func (s DeleteWorkspaceMembersRequestMembers) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersRequestMembers) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersRequestMembers) SetMemberId(v string) *DeleteWorkspaceMembersRequestMembers {
	s.MemberId = &v
	return s
}

func (s *DeleteWorkspaceMembersRequestMembers) SetMemberType(v string) *DeleteWorkspaceMembersRequestMembers {
	s.MemberType = &v
	return s
}

type DeleteWorkspaceMembersRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s DeleteWorkspaceMembersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersRequestTenantContext) SetTenantId(v string) *DeleteWorkspaceMembersRequestTenantContext {
	s.TenantId = &v
	return s
}

type DeleteWorkspaceMembersShrinkRequest struct {
	// This parameter is required.
	MembersShrink       *string `json:"Members,omitempty" xml:"Members,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s DeleteWorkspaceMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersShrinkRequest) SetMembersShrink(v string) *DeleteWorkspaceMembersShrinkRequest {
	s.MembersShrink = &v
	return s
}

func (s *DeleteWorkspaceMembersShrinkRequest) SetTenantContextShrink(v string) *DeleteWorkspaceMembersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *DeleteWorkspaceMembersShrinkRequest) SetWorkspaceId(v string) *DeleteWorkspaceMembersShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type DeleteWorkspaceMembersResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s DeleteWorkspaceMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersResponseBody) SetRequestId(v string) *DeleteWorkspaceMembersResponseBody {
	s.RequestId = &v
	return s
}

type DeleteWorkspaceMembersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteWorkspaceMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteWorkspaceMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWorkspaceMembersResponse) GoString() string {
	return s.String()
}

func (s *DeleteWorkspaceMembersResponse) SetHeaders(v map[string]*string) *DeleteWorkspaceMembersResponse {
	s.Headers = v
	return s
}

func (s *DeleteWorkspaceMembersResponse) SetStatusCode(v int32) *DeleteWorkspaceMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteWorkspaceMembersResponse) SetBody(v *DeleteWorkspaceMembersResponseBody) *DeleteWorkspaceMembersResponse {
	s.Body = v
	return s
}

type ExecuteBatchTaskHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ExecuteBatchTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ExecuteBatchTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExecuteBatchTaskHeaders) GoString() string {
	return s.String()
}

func (s *ExecuteBatchTaskHeaders) SetCommonHeaders(v map[string]*string) *ExecuteBatchTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExecuteBatchTaskHeaders) SetAccountContext(v *ExecuteBatchTaskHeadersAccountContext) *ExecuteBatchTaskHeaders {
	s.AccountContext = v
	return s
}

type ExecuteBatchTaskHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ExecuteBatchTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ExecuteBatchTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ExecuteBatchTaskHeadersAccountContext) SetAccountId(v string) *ExecuteBatchTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ExecuteBatchTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ExecuteBatchTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExecuteBatchTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ExecuteBatchTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *ExecuteBatchTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExecuteBatchTaskShrinkHeaders) SetAccountContextShrink(v string) *ExecuteBatchTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ExecuteBatchTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKTxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// disagree
	OutResult *string `json:"OutResult,omitempty" xml:"OutResult,omitempty"`
	// example:
	//
	// remark
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// [{"taskId":"2291xxx","formInstId":"d84a79xxx"}, {"taskId":"2291xxx","formInstId":"f8035e2axxx"}]
	TaskInformationList *string `json:"TaskInformationList,omitempty" xml:"TaskInformationList,omitempty"`
}

func (s ExecuteBatchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteBatchTaskRequest) GoString() string {
	return s.String()
}

func (s *ExecuteBatchTaskRequest) SetAppType(v string) *ExecuteBatchTaskRequest {
	s.AppType = &v
	return s
}

func (s *ExecuteBatchTaskRequest) SetOutResult(v string) *ExecuteBatchTaskRequest {
	s.OutResult = &v
	return s
}

func (s *ExecuteBatchTaskRequest) SetRemark(v string) *ExecuteBatchTaskRequest {
	s.Remark = &v
	return s
}

func (s *ExecuteBatchTaskRequest) SetSystemToken(v string) *ExecuteBatchTaskRequest {
	s.SystemToken = &v
	return s
}

func (s *ExecuteBatchTaskRequest) SetTaskInformationList(v string) *ExecuteBatchTaskRequest {
	s.TaskInformationList = &v
	return s
}

type ExecuteBatchTaskResponseBody struct {
	// example:
	//
	// 1
	FailNumber *int32 `json:"failNumber,omitempty" xml:"failNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 2
	SuccessNumber *int32 `json:"successNumber,omitempty" xml:"successNumber,omitempty"`
	// example:
	//
	// 3
	Total *int32 `json:"total,omitempty" xml:"total,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ExecuteBatchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecuteBatchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ExecuteBatchTaskResponseBody) SetFailNumber(v int32) *ExecuteBatchTaskResponseBody {
	s.FailNumber = &v
	return s
}

func (s *ExecuteBatchTaskResponseBody) SetRequestId(v string) *ExecuteBatchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecuteBatchTaskResponseBody) SetSuccessNumber(v int32) *ExecuteBatchTaskResponseBody {
	s.SuccessNumber = &v
	return s
}

func (s *ExecuteBatchTaskResponseBody) SetTotal(v int32) *ExecuteBatchTaskResponseBody {
	s.Total = &v
	return s
}

func (s *ExecuteBatchTaskResponseBody) SetVendorRequestId(v string) *ExecuteBatchTaskResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ExecuteBatchTaskResponseBody) SetVendorType(v string) *ExecuteBatchTaskResponseBody {
	s.VendorType = &v
	return s
}

type ExecuteBatchTaskResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecuteBatchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecuteBatchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecuteBatchTaskResponse) GoString() string {
	return s.String()
}

func (s *ExecuteBatchTaskResponse) SetHeaders(v map[string]*string) *ExecuteBatchTaskResponse {
	s.Headers = v
	return s
}

func (s *ExecuteBatchTaskResponse) SetStatusCode(v int32) *ExecuteBatchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecuteBatchTaskResponse) SetBody(v *ExecuteBatchTaskResponseBody) *ExecuteBatchTaskResponse {
	s.Body = v
	return s
}

type ExecutePlatformTaskHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ExecutePlatformTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ExecutePlatformTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExecutePlatformTaskHeaders) GoString() string {
	return s.String()
}

func (s *ExecutePlatformTaskHeaders) SetCommonHeaders(v map[string]*string) *ExecutePlatformTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExecutePlatformTaskHeaders) SetAccountContext(v *ExecutePlatformTaskHeadersAccountContext) *ExecutePlatformTaskHeaders {
	s.AccountContext = v
	return s
}

type ExecutePlatformTaskHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ExecutePlatformTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ExecutePlatformTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ExecutePlatformTaskHeadersAccountContext) SetAccountId(v string) *ExecutePlatformTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ExecutePlatformTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ExecutePlatformTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExecutePlatformTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ExecutePlatformTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *ExecutePlatformTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExecutePlatformTaskShrinkHeaders) SetAccountContextShrink(v string) *ExecutePlatformTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ExecutePlatformTaskRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// []
	FormDataJson *string `json:"FormDataJson,omitempty" xml:"FormDataJson,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// y
	NoExecuteExpressions *string `json:"NoExecuteExpressions,omitempty" xml:"NoExecuteExpressions,omitempty"`
	// example:
	//
	// Agree
	OutResult *string `json:"OutResult,omitempty" xml:"OutResult,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	Remark            *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s ExecutePlatformTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecutePlatformTaskRequest) GoString() string {
	return s.String()
}

func (s *ExecutePlatformTaskRequest) SetAppType(v string) *ExecutePlatformTaskRequest {
	s.AppType = &v
	return s
}

func (s *ExecutePlatformTaskRequest) SetFormDataJson(v string) *ExecutePlatformTaskRequest {
	s.FormDataJson = &v
	return s
}

func (s *ExecutePlatformTaskRequest) SetLanguage(v string) *ExecutePlatformTaskRequest {
	s.Language = &v
	return s
}

func (s *ExecutePlatformTaskRequest) SetNoExecuteExpressions(v string) *ExecutePlatformTaskRequest {
	s.NoExecuteExpressions = &v
	return s
}

func (s *ExecutePlatformTaskRequest) SetOutResult(v string) *ExecutePlatformTaskRequest {
	s.OutResult = &v
	return s
}

func (s *ExecutePlatformTaskRequest) SetProcessInstanceId(v string) *ExecutePlatformTaskRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *ExecutePlatformTaskRequest) SetRemark(v string) *ExecutePlatformTaskRequest {
	s.Remark = &v
	return s
}

func (s *ExecutePlatformTaskRequest) SetSystemToken(v string) *ExecutePlatformTaskRequest {
	s.SystemToken = &v
	return s
}

type ExecutePlatformTaskResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ExecutePlatformTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecutePlatformTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ExecutePlatformTaskResponseBody) SetRequestId(v string) *ExecutePlatformTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecutePlatformTaskResponseBody) SetVendorRequestId(v string) *ExecutePlatformTaskResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ExecutePlatformTaskResponseBody) SetVendorType(v string) *ExecutePlatformTaskResponseBody {
	s.VendorType = &v
	return s
}

type ExecutePlatformTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecutePlatformTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecutePlatformTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecutePlatformTaskResponse) GoString() string {
	return s.String()
}

func (s *ExecutePlatformTaskResponse) SetHeaders(v map[string]*string) *ExecutePlatformTaskResponse {
	s.Headers = v
	return s
}

func (s *ExecutePlatformTaskResponse) SetStatusCode(v int32) *ExecutePlatformTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecutePlatformTaskResponse) SetBody(v *ExecutePlatformTaskResponseBody) *ExecutePlatformTaskResponse {
	s.Body = v
	return s
}

type ExecuteTaskHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ExecuteTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ExecuteTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExecuteTaskHeaders) GoString() string {
	return s.String()
}

func (s *ExecuteTaskHeaders) SetCommonHeaders(v map[string]*string) *ExecuteTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExecuteTaskHeaders) SetAccountContext(v *ExecuteTaskHeadersAccountContext) *ExecuteTaskHeaders {
	s.AccountContext = v
	return s
}

type ExecuteTaskHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ExecuteTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ExecuteTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ExecuteTaskHeadersAccountContext) SetAccountId(v string) *ExecuteTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ExecuteTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ExecuteTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExecuteTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ExecuteTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *ExecuteTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExecuteTaskShrinkHeaders) SetAccountContextShrink(v string) *ExecuteTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ExecuteTaskRequest struct {
	// example:
	//
	// APP_PBKT0MFBEBTDO8T7SLVP
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// http://
	DigitalSignUrl *string `json:"DigitalSignUrl,omitempty" xml:"DigitalSignUrl,omitempty"`
	// example:
	//
	// {}
	FormDataJson *string `json:"FormDataJson,omitempty" xml:"FormDataJson,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// y
	NoExecuteExpressions *string `json:"NoExecuteExpressions,omitempty" xml:"NoExecuteExpressions,omitempty"`
	// example:
	//
	// AGREE
	OutResult *string `json:"OutResult,omitempty" xml:"OutResult,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	Remark            *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// 12002575L
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ExecuteTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ExecuteTaskRequest) GoString() string {
	return s.String()
}

func (s *ExecuteTaskRequest) SetAppType(v string) *ExecuteTaskRequest {
	s.AppType = &v
	return s
}

func (s *ExecuteTaskRequest) SetDigitalSignUrl(v string) *ExecuteTaskRequest {
	s.DigitalSignUrl = &v
	return s
}

func (s *ExecuteTaskRequest) SetFormDataJson(v string) *ExecuteTaskRequest {
	s.FormDataJson = &v
	return s
}

func (s *ExecuteTaskRequest) SetLanguage(v string) *ExecuteTaskRequest {
	s.Language = &v
	return s
}

func (s *ExecuteTaskRequest) SetNoExecuteExpressions(v string) *ExecuteTaskRequest {
	s.NoExecuteExpressions = &v
	return s
}

func (s *ExecuteTaskRequest) SetOutResult(v string) *ExecuteTaskRequest {
	s.OutResult = &v
	return s
}

func (s *ExecuteTaskRequest) SetProcessInstanceId(v string) *ExecuteTaskRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *ExecuteTaskRequest) SetRemark(v string) *ExecuteTaskRequest {
	s.Remark = &v
	return s
}

func (s *ExecuteTaskRequest) SetSystemToken(v string) *ExecuteTaskRequest {
	s.SystemToken = &v
	return s
}

func (s *ExecuteTaskRequest) SetTaskId(v int64) *ExecuteTaskRequest {
	s.TaskId = &v
	return s
}

type ExecuteTaskResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ExecuteTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExecuteTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ExecuteTaskResponseBody) SetRequestId(v string) *ExecuteTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExecuteTaskResponseBody) SetVendorRequestId(v string) *ExecuteTaskResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ExecuteTaskResponseBody) SetVendorType(v string) *ExecuteTaskResponseBody {
	s.VendorType = &v
	return s
}

type ExecuteTaskResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExecuteTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExecuteTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ExecuteTaskResponse) GoString() string {
	return s.String()
}

func (s *ExecuteTaskResponse) SetHeaders(v map[string]*string) *ExecuteTaskResponse {
	s.Headers = v
	return s
}

func (s *ExecuteTaskResponse) SetStatusCode(v int32) *ExecuteTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ExecuteTaskResponse) SetBody(v *ExecuteTaskResponseBody) *ExecuteTaskResponse {
	s.Body = v
	return s
}

type ExpandGroupCapacityHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ExpandGroupCapacityHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ExpandGroupCapacityHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityHeaders) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityHeaders) SetCommonHeaders(v map[string]*string) *ExpandGroupCapacityHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExpandGroupCapacityHeaders) SetAccountContext(v *ExpandGroupCapacityHeadersAccountContext) *ExpandGroupCapacityHeaders {
	s.AccountContext = v
	return s
}

type ExpandGroupCapacityHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ExpandGroupCapacityHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityHeadersAccountContext) SetAccountId(v string) *ExpandGroupCapacityHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ExpandGroupCapacityShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ExpandGroupCapacityShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityShrinkHeaders) SetCommonHeaders(v map[string]*string) *ExpandGroupCapacityShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ExpandGroupCapacityShrinkHeaders) SetAccountContextShrink(v string) *ExpandGroupCapacityShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ExpandGroupCapacityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cidt*****Xa4K10w==
	OpenConversationId *string                                  `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	TenantContext      *ExpandGroupCapacityRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s ExpandGroupCapacityRequest) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityRequest) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityRequest) SetOpenConversationId(v string) *ExpandGroupCapacityRequest {
	s.OpenConversationId = &v
	return s
}

func (s *ExpandGroupCapacityRequest) SetTenantContext(v *ExpandGroupCapacityRequestTenantContext) *ExpandGroupCapacityRequest {
	s.TenantContext = v
	return s
}

type ExpandGroupCapacityRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ExpandGroupCapacityRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityRequestTenantContext) SetTenantId(v string) *ExpandGroupCapacityRequestTenantContext {
	s.TenantId = &v
	return s
}

type ExpandGroupCapacityShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cidt*****Xa4K10w==
	OpenConversationId  *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s ExpandGroupCapacityShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityShrinkRequest) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityShrinkRequest) SetOpenConversationId(v string) *ExpandGroupCapacityShrinkRequest {
	s.OpenConversationId = &v
	return s
}

func (s *ExpandGroupCapacityShrinkRequest) SetTenantContextShrink(v string) *ExpandGroupCapacityShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type ExpandGroupCapacityResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ExpandGroupCapacityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityResponseBody) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityResponseBody) SetRequestId(v string) *ExpandGroupCapacityResponseBody {
	s.RequestId = &v
	return s
}

func (s *ExpandGroupCapacityResponseBody) SetSuccess(v bool) *ExpandGroupCapacityResponseBody {
	s.Success = &v
	return s
}

func (s *ExpandGroupCapacityResponseBody) SetVendorRequestId(v string) *ExpandGroupCapacityResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ExpandGroupCapacityResponseBody) SetVendorType(v string) *ExpandGroupCapacityResponseBody {
	s.VendorType = &v
	return s
}

type ExpandGroupCapacityResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ExpandGroupCapacityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ExpandGroupCapacityResponse) String() string {
	return tea.Prettify(s)
}

func (s ExpandGroupCapacityResponse) GoString() string {
	return s.String()
}

func (s *ExpandGroupCapacityResponse) SetHeaders(v map[string]*string) *ExpandGroupCapacityResponse {
	s.Headers = v
	return s
}

func (s *ExpandGroupCapacityResponse) SetStatusCode(v int32) *ExpandGroupCapacityResponse {
	s.StatusCode = &v
	return s
}

func (s *ExpandGroupCapacityResponse) SetBody(v *ExpandGroupCapacityResponseBody) *ExpandGroupCapacityResponse {
	s.Body = v
	return s
}

type GetActivityListHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetActivityListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetActivityListHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetActivityListHeaders) GoString() string {
	return s.String()
}

func (s *GetActivityListHeaders) SetCommonHeaders(v map[string]*string) *GetActivityListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetActivityListHeaders) SetAccountContext(v *GetActivityListHeadersAccountContext) *GetActivityListHeaders {
	s.AccountContext = v
	return s
}

type GetActivityListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetActivityListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetActivityListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetActivityListHeadersAccountContext) SetAccountId(v string) *GetActivityListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetActivityListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetActivityListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetActivityListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetActivityListShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetActivityListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetActivityListShrinkHeaders) SetAccountContextShrink(v string) *GetActivityListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetActivityListRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// TPROC--X1Gxx
	ProcessCode *string `json:"ProcessCode,omitempty" xml:"ProcessCode,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetActivityListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetActivityListRequest) GoString() string {
	return s.String()
}

func (s *GetActivityListRequest) SetAppType(v string) *GetActivityListRequest {
	s.AppType = &v
	return s
}

func (s *GetActivityListRequest) SetLanguage(v string) *GetActivityListRequest {
	s.Language = &v
	return s
}

func (s *GetActivityListRequest) SetProcessCode(v string) *GetActivityListRequest {
	s.ProcessCode = &v
	return s
}

func (s *GetActivityListRequest) SetSystemToken(v string) *GetActivityListRequest {
	s.SystemToken = &v
	return s
}

type GetActivityListResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*GetActivityListResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetActivityListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetActivityListResponseBody) GoString() string {
	return s.String()
}

func (s *GetActivityListResponseBody) SetRequestId(v string) *GetActivityListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetActivityListResponseBody) SetResult(v []*GetActivityListResponseBodyResult) *GetActivityListResponseBody {
	s.Result = v
	return s
}

func (s *GetActivityListResponseBody) SetVendorRequestId(v string) *GetActivityListResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetActivityListResponseBody) SetVendorType(v string) *GetActivityListResponseBody {
	s.VendorType = &v
	return s
}

type GetActivityListResponseBodyResult struct {
	// example:
	//
	// 0q8gsudxxx
	ActivityId *string `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	// example:
	//
	// activity123
	ActivityName *string `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	// example:
	//
	// activity123
	ActivityNameInEnglish *string `json:"ActivityNameInEnglish,omitempty" xml:"ActivityNameInEnglish,omitempty"`
}

func (s GetActivityListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetActivityListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetActivityListResponseBodyResult) SetActivityId(v string) *GetActivityListResponseBodyResult {
	s.ActivityId = &v
	return s
}

func (s *GetActivityListResponseBodyResult) SetActivityName(v string) *GetActivityListResponseBodyResult {
	s.ActivityName = &v
	return s
}

func (s *GetActivityListResponseBodyResult) SetActivityNameInEnglish(v string) *GetActivityListResponseBodyResult {
	s.ActivityNameInEnglish = &v
	return s
}

type GetActivityListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetActivityListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetActivityListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetActivityListResponse) GoString() string {
	return s.String()
}

func (s *GetActivityListResponse) SetHeaders(v map[string]*string) *GetActivityListResponse {
	s.Headers = v
	return s
}

func (s *GetActivityListResponse) SetStatusCode(v int32) *GetActivityListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetActivityListResponse) SetBody(v *GetActivityListResponseBody) *GetActivityListResponse {
	s.Body = v
	return s
}

type GetAllSheetsHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetAllSheetsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetAllSheetsHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsHeaders) GoString() string {
	return s.String()
}

func (s *GetAllSheetsHeaders) SetCommonHeaders(v map[string]*string) *GetAllSheetsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetAllSheetsHeaders) SetAccountContext(v *GetAllSheetsHeadersAccountContext) *GetAllSheetsHeaders {
	s.AccountContext = v
	return s
}

type GetAllSheetsHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetAllSheetsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetAllSheetsHeadersAccountContext) SetAccountId(v string) *GetAllSheetsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetAllSheetsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetAllSheetsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetAllSheetsShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetAllSheetsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetAllSheetsShrinkHeaders) SetAccountContextShrink(v string) *GetAllSheetsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetAllSheetsRequest struct {
	TenantContext *GetAllSheetsRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s GetAllSheetsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsRequest) GoString() string {
	return s.String()
}

func (s *GetAllSheetsRequest) SetTenantContext(v *GetAllSheetsRequestTenantContext) *GetAllSheetsRequest {
	s.TenantContext = v
	return s
}

func (s *GetAllSheetsRequest) SetWorkbookId(v string) *GetAllSheetsRequest {
	s.WorkbookId = &v
	return s
}

type GetAllSheetsRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetAllSheetsRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetAllSheetsRequestTenantContext) SetTenantId(v string) *GetAllSheetsRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetAllSheetsShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s GetAllSheetsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetAllSheetsShrinkRequest) SetTenantContextShrink(v string) *GetAllSheetsShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetAllSheetsShrinkRequest) SetWorkbookId(v string) *GetAllSheetsShrinkRequest {
	s.WorkbookId = &v
	return s
}

type GetAllSheetsResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// []
	Value []*GetAllSheetsResponseBodyValue `json:"value,omitempty" xml:"value,omitempty" type:"Repeated"`
}

func (s GetAllSheetsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsResponseBody) GoString() string {
	return s.String()
}

func (s *GetAllSheetsResponseBody) SetRequestId(v string) *GetAllSheetsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAllSheetsResponseBody) SetValue(v []*GetAllSheetsResponseBodyValue) *GetAllSheetsResponseBody {
	s.Value = v
	return s
}

type GetAllSheetsResponseBodyValue struct {
	// example:
	//
	// stxxxx
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// Sheet1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s GetAllSheetsResponseBodyValue) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsResponseBodyValue) GoString() string {
	return s.String()
}

func (s *GetAllSheetsResponseBodyValue) SetId(v string) *GetAllSheetsResponseBodyValue {
	s.Id = &v
	return s
}

func (s *GetAllSheetsResponseBodyValue) SetName(v string) *GetAllSheetsResponseBodyValue {
	s.Name = &v
	return s
}

type GetAllSheetsResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAllSheetsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAllSheetsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAllSheetsResponse) GoString() string {
	return s.String()
}

func (s *GetAllSheetsResponse) SetHeaders(v map[string]*string) *GetAllSheetsResponse {
	s.Headers = v
	return s
}

func (s *GetAllSheetsResponse) SetStatusCode(v int32) *GetAllSheetsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAllSheetsResponse) SetBody(v *GetAllSheetsResponseBody) *GetAllSheetsResponse {
	s.Body = v
	return s
}

type GetConversaionSpaceHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetConversaionSpaceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetConversaionSpaceHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceHeaders) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceHeaders) SetCommonHeaders(v map[string]*string) *GetConversaionSpaceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetConversaionSpaceHeaders) SetAccountContext(v *GetConversaionSpaceHeadersAccountContext) *GetConversaionSpaceHeaders {
	s.AccountContext = v
	return s
}

type GetConversaionSpaceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetConversaionSpaceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceHeadersAccountContext) SetAccountId(v string) *GetConversaionSpaceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetConversaionSpaceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetConversaionSpaceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetConversaionSpaceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetConversaionSpaceShrinkHeaders) SetAccountContextShrink(v string) *GetConversaionSpaceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetConversaionSpaceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cidB8Pzg****FIWPv2PMA==
	OpenConversationId *string                                  `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	TenantContext      *GetConversaionSpaceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetConversaionSpaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceRequest) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceRequest) SetOpenConversationId(v string) *GetConversaionSpaceRequest {
	s.OpenConversationId = &v
	return s
}

func (s *GetConversaionSpaceRequest) SetTenantContext(v *GetConversaionSpaceRequestTenantContext) *GetConversaionSpaceRequest {
	s.TenantContext = v
	return s
}

type GetConversaionSpaceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetConversaionSpaceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceRequestTenantContext) SetTenantId(v string) *GetConversaionSpaceRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetConversaionSpaceShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cidB8Pzg****FIWPv2PMA==
	OpenConversationId  *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetConversaionSpaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceShrinkRequest) SetOpenConversationId(v string) *GetConversaionSpaceShrinkRequest {
	s.OpenConversationId = &v
	return s
}

func (s *GetConversaionSpaceShrinkRequest) SetTenantContextShrink(v string) *GetConversaionSpaceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetConversaionSpaceResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Space     *GetConversaionSpaceResponseBodySpace `json:"space,omitempty" xml:"space,omitempty" type:"Struct"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetConversaionSpaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceResponseBody) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceResponseBody) SetRequestId(v string) *GetConversaionSpaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetConversaionSpaceResponseBody) SetSpace(v *GetConversaionSpaceResponseBodySpace) *GetConversaionSpaceResponseBody {
	s.Space = v
	return s
}

func (s *GetConversaionSpaceResponseBody) SetVendorRequestId(v string) *GetConversaionSpaceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetConversaionSpaceResponseBody) SetVendorType(v string) *GetConversaionSpaceResponseBody {
	s.VendorType = &v
	return s
}

type GetConversaionSpaceResponseBodySpace struct {
	// example:
	//
	// ding1234xxxxx
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// 2022-01-01T10:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-01-01T10:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 798xxxxx
	SpaceId *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
}

func (s GetConversaionSpaceResponseBodySpace) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceResponseBodySpace) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceResponseBodySpace) SetCorpId(v string) *GetConversaionSpaceResponseBodySpace {
	s.CorpId = &v
	return s
}

func (s *GetConversaionSpaceResponseBodySpace) SetCreateTime(v string) *GetConversaionSpaceResponseBodySpace {
	s.CreateTime = &v
	return s
}

func (s *GetConversaionSpaceResponseBodySpace) SetModifiedTime(v string) *GetConversaionSpaceResponseBodySpace {
	s.ModifiedTime = &v
	return s
}

func (s *GetConversaionSpaceResponseBodySpace) SetSpaceId(v string) *GetConversaionSpaceResponseBodySpace {
	s.SpaceId = &v
	return s
}

type GetConversaionSpaceResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetConversaionSpaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetConversaionSpaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetConversaionSpaceResponse) GoString() string {
	return s.String()
}

func (s *GetConversaionSpaceResponse) SetHeaders(v map[string]*string) *GetConversaionSpaceResponse {
	s.Headers = v
	return s
}

func (s *GetConversaionSpaceResponse) SetStatusCode(v int32) *GetConversaionSpaceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetConversaionSpaceResponse) SetBody(v *GetConversaionSpaceResponseBody) *GetConversaionSpaceResponse {
	s.Body = v
	return s
}

type GetCorpAccomplishmentTasksHeaders struct {
	CommonHeaders  map[string]*string                               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetCorpAccomplishmentTasksHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetCorpAccomplishmentTasksHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetCorpAccomplishmentTasksHeaders) GoString() string {
	return s.String()
}

func (s *GetCorpAccomplishmentTasksHeaders) SetCommonHeaders(v map[string]*string) *GetCorpAccomplishmentTasksHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetCorpAccomplishmentTasksHeaders) SetAccountContext(v *GetCorpAccomplishmentTasksHeadersAccountContext) *GetCorpAccomplishmentTasksHeaders {
	s.AccountContext = v
	return s
}

type GetCorpAccomplishmentTasksHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetCorpAccomplishmentTasksHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetCorpAccomplishmentTasksHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetCorpAccomplishmentTasksHeadersAccountContext) SetAccountId(v string) *GetCorpAccomplishmentTasksHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetCorpAccomplishmentTasksShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetCorpAccomplishmentTasksShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetCorpAccomplishmentTasksShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetCorpAccomplishmentTasksShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetCorpAccomplishmentTasksShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetCorpAccomplishmentTasksShrinkHeaders) SetAccountContextShrink(v string) *GetCorpAccomplishmentTasksShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetCorpAccomplishmentTasksRequest struct {
	// example:
	//
	// APP_PBKTxxx
	AppTypes *string `json:"AppTypes,omitempty" xml:"AppTypes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// corpIdxxx
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *int64 `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *int64 `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// **
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["xx","xxx"]
	ProcessCodes *string `json:"ProcessCodes,omitempty" xml:"ProcessCodes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s GetCorpAccomplishmentTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCorpAccomplishmentTasksRequest) GoString() string {
	return s.String()
}

func (s *GetCorpAccomplishmentTasksRequest) SetAppTypes(v string) *GetCorpAccomplishmentTasksRequest {
	s.AppTypes = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetCorpId(v string) *GetCorpAccomplishmentTasksRequest {
	s.CorpId = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetCreateFromTimeGMT(v int64) *GetCorpAccomplishmentTasksRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetCreateToTimeGMT(v int64) *GetCorpAccomplishmentTasksRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetKeyword(v string) *GetCorpAccomplishmentTasksRequest {
	s.Keyword = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetLanguage(v string) *GetCorpAccomplishmentTasksRequest {
	s.Language = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetPageNumber(v int32) *GetCorpAccomplishmentTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetPageSize(v int32) *GetCorpAccomplishmentTasksRequest {
	s.PageSize = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetProcessCodes(v string) *GetCorpAccomplishmentTasksRequest {
	s.ProcessCodes = &v
	return s
}

func (s *GetCorpAccomplishmentTasksRequest) SetToken(v string) *GetCorpAccomplishmentTasksRequest {
	s.Token = &v
	return s
}

type GetCorpAccomplishmentTasksResponseBody struct {
	// example:
	//
	// [{}]
	Data []*GetCorpAccomplishmentTasksResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetCorpAccomplishmentTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCorpAccomplishmentTasksResponseBody) GoString() string {
	return s.String()
}

func (s *GetCorpAccomplishmentTasksResponseBody) SetData(v []*GetCorpAccomplishmentTasksResponseBodyData) *GetCorpAccomplishmentTasksResponseBody {
	s.Data = v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBody) SetPageNumber(v int64) *GetCorpAccomplishmentTasksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBody) SetRequestId(v string) *GetCorpAccomplishmentTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBody) SetTotalCount(v int64) *GetCorpAccomplishmentTasksResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBody) SetVendorRequestId(v string) *GetCorpAccomplishmentTasksResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBody) SetVendorType(v string) *GetCorpAccomplishmentTasksResponseBody {
	s.VendorType = &v
	return s
}

type GetCorpAccomplishmentTasksResponseBodyData struct {
	// example:
	//
	// 2020-01-01
	ActiveTimeGMT *string `json:"ActiveTimeGMT,omitempty" xml:"ActiveTimeGMT,omitempty"`
	// example:
	//
	// 123456
	ActualActionerId *string `json:"ActualActionerId,omitempty" xml:"ActualActionerId,omitempty"`
	// example:
	//
	// APP_XCxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 2020-01-01
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// 2020-01-01
	FinishTimeGMT *string `json:"FinishTimeGMT,omitempty" xml:"FinishTimeGMT,omitempty"`
	// example:
	//
	// 123456@li.com
	OriginatorEmail *string `json:"OriginatorEmail,omitempty" xml:"OriginatorEmail,omitempty"`
	// example:
	//
	// 123456
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 名称
	OriginatorName *string `json:"OriginatorName,omitempty" xml:"OriginatorName,omitempty"`
	// example:
	//
	// name
	OriginatorNameInEnglish *string `json:"OriginatorNameInEnglish,omitempty" xml:"OriginatorNameInEnglish,omitempty"`
	// example:
	//
	// 昵称
	OriginatorNickName *string `json:"OriginatorNickName,omitempty" xml:"OriginatorNickName,omitempty"`
	// example:
	//
	// english nick
	OriginatorNickNameInEnglish *string `json:"OriginatorNickNameInEnglish,omitempty" xml:"OriginatorNickNameInEnglish,omitempty"`
	// example:
	//
	// originatorPhotoexample
	OriginatorPhoto *string `json:"OriginatorPhoto,omitempty" xml:"OriginatorPhoto,omitempty"`
	// example:
	//
	// agree
	OutResult *string `json:"OutResult,omitempty" xml:"OutResult,omitempty"`
	// example:
	//
	// 结果名称
	OutResultName *string `json:"OutResultName,omitempty" xml:"OutResultName,omitempty"`
	// example:
	//
	// instancexxxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetCorpAccomplishmentTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCorpAccomplishmentTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetActiveTimeGMT(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.ActiveTimeGMT = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetActualActionerId(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.ActualActionerId = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetAppType(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.AppType = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetCreateTimeGMT(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetFinishTimeGMT(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.FinishTimeGMT = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOriginatorEmail(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OriginatorEmail = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOriginatorId(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OriginatorId = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOriginatorName(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OriginatorName = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOriginatorNameInEnglish(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OriginatorNameInEnglish = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOriginatorNickName(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OriginatorNickName = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOriginatorNickNameInEnglish(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OriginatorNickNameInEnglish = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOriginatorPhoto(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OriginatorPhoto = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOutResult(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OutResult = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetOutResultName(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.OutResultName = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetProcessInstanceId(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponseBodyData) SetTitle(v string) *GetCorpAccomplishmentTasksResponseBodyData {
	s.Title = &v
	return s
}

type GetCorpAccomplishmentTasksResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCorpAccomplishmentTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCorpAccomplishmentTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCorpAccomplishmentTasksResponse) GoString() string {
	return s.String()
}

func (s *GetCorpAccomplishmentTasksResponse) SetHeaders(v map[string]*string) *GetCorpAccomplishmentTasksResponse {
	s.Headers = v
	return s
}

func (s *GetCorpAccomplishmentTasksResponse) SetStatusCode(v int32) *GetCorpAccomplishmentTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCorpAccomplishmentTasksResponse) SetBody(v *GetCorpAccomplishmentTasksResponseBody) *GetCorpAccomplishmentTasksResponse {
	s.Body = v
	return s
}

type GetCorpTasksHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetCorpTasksHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetCorpTasksHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetCorpTasksHeaders) GoString() string {
	return s.String()
}

func (s *GetCorpTasksHeaders) SetCommonHeaders(v map[string]*string) *GetCorpTasksHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetCorpTasksHeaders) SetAccountContext(v *GetCorpTasksHeadersAccountContext) *GetCorpTasksHeaders {
	s.AccountContext = v
	return s
}

type GetCorpTasksHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetCorpTasksHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetCorpTasksHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetCorpTasksHeadersAccountContext) SetAccountId(v string) *GetCorpTasksHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetCorpTasksShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetCorpTasksShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetCorpTasksShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetCorpTasksShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetCorpTasksShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetCorpTasksShrinkHeaders) SetAccountContextShrink(v string) *GetCorpTasksShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetCorpTasksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKxxx
	AppTypes *string `json:"AppTypes,omitempty" xml:"AppTypes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// corpId
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *int64 `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *int64 `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// keyword
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["xx","xxx"]
	ProcessCodes *string `json:"ProcessCodes,omitempty" xml:"ProcessCodes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s GetCorpTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCorpTasksRequest) GoString() string {
	return s.String()
}

func (s *GetCorpTasksRequest) SetAppTypes(v string) *GetCorpTasksRequest {
	s.AppTypes = &v
	return s
}

func (s *GetCorpTasksRequest) SetCorpId(v string) *GetCorpTasksRequest {
	s.CorpId = &v
	return s
}

func (s *GetCorpTasksRequest) SetCreateFromTimeGMT(v int64) *GetCorpTasksRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *GetCorpTasksRequest) SetCreateToTimeGMT(v int64) *GetCorpTasksRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *GetCorpTasksRequest) SetKeyword(v string) *GetCorpTasksRequest {
	s.Keyword = &v
	return s
}

func (s *GetCorpTasksRequest) SetLanguage(v string) *GetCorpTasksRequest {
	s.Language = &v
	return s
}

func (s *GetCorpTasksRequest) SetPageNumber(v int32) *GetCorpTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *GetCorpTasksRequest) SetPageSize(v int32) *GetCorpTasksRequest {
	s.PageSize = &v
	return s
}

func (s *GetCorpTasksRequest) SetProcessCodes(v string) *GetCorpTasksRequest {
	s.ProcessCodes = &v
	return s
}

func (s *GetCorpTasksRequest) SetToken(v string) *GetCorpTasksRequest {
	s.Token = &v
	return s
}

type GetCorpTasksResponseBody struct {
	// example:
	//
	// [{}]
	Data []*GetCorpTasksResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetCorpTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCorpTasksResponseBody) GoString() string {
	return s.String()
}

func (s *GetCorpTasksResponseBody) SetData(v []*GetCorpTasksResponseBodyData) *GetCorpTasksResponseBody {
	s.Data = v
	return s
}

func (s *GetCorpTasksResponseBody) SetPageNumber(v int64) *GetCorpTasksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetCorpTasksResponseBody) SetRequestId(v string) *GetCorpTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCorpTasksResponseBody) SetTotalCount(v int64) *GetCorpTasksResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetCorpTasksResponseBody) SetVendorRequestId(v string) *GetCorpTasksResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetCorpTasksResponseBody) SetVendorType(v string) *GetCorpTasksResponseBody {
	s.VendorType = &v
	return s
}

type GetCorpTasksResponseBodyData struct {
	// example:
	//
	// 2020-01-01
	ActiveTimeGMT *string `json:"ActiveTimeGMT,omitempty" xml:"ActiveTimeGMT,omitempty"`
	// example:
	//
	// 123456
	ActualActionerId *string `json:"ActualActionerId,omitempty" xml:"ActualActionerId,omitempty"`
	// example:
	//
	// APP_XCxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 2020-01-01
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// 2020-01-01
	FinishTimeGMT *string `json:"FinishTimeGMT,omitempty" xml:"FinishTimeGMT,omitempty"`
	// example:
	//
	// 123456@li.com
	OriginatorEmail *string `json:"OriginatorEmail,omitempty" xml:"OriginatorEmail,omitempty"`
	// example:
	//
	// 123456
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 名称
	OriginatorName *string `json:"OriginatorName,omitempty" xml:"OriginatorName,omitempty"`
	// example:
	//
	// name
	OriginatorNameInEnglish *string `json:"OriginatorNameInEnglish,omitempty" xml:"OriginatorNameInEnglish,omitempty"`
	// example:
	//
	// 昵称
	OriginatorNickName *string `json:"OriginatorNickName,omitempty" xml:"OriginatorNickName,omitempty"`
	// example:
	//
	// nick en
	OriginatorNickNameEn *string `json:"OriginatorNickNameEn,omitempty" xml:"OriginatorNickNameEn,omitempty"`
	// example:
	//
	// english nick
	OriginatorNickNameInEnglish *string `json:"OriginatorNickNameInEnglish,omitempty" xml:"OriginatorNickNameInEnglish,omitempty"`
	// example:
	//
	// originatorPhotoexample
	OriginatorPhoto *string `json:"OriginatorPhoto,omitempty" xml:"OriginatorPhoto,omitempty"`
	// example:
	//
	// agree
	OutResult *string `json:"OutResult,omitempty" xml:"OutResult,omitempty"`
	// example:
	//
	// 结果名称
	OutResultName *string `json:"OutResultName,omitempty" xml:"OutResultName,omitempty"`
	// example:
	//
	// instancexxxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// taskId
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// running
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// title
	TitleInEnglish *string `json:"TitleInEnglish,omitempty" xml:"TitleInEnglish,omitempty"`
}

func (s GetCorpTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCorpTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCorpTasksResponseBodyData) SetActiveTimeGMT(v string) *GetCorpTasksResponseBodyData {
	s.ActiveTimeGMT = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetActualActionerId(v string) *GetCorpTasksResponseBodyData {
	s.ActualActionerId = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetAppType(v string) *GetCorpTasksResponseBodyData {
	s.AppType = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetCreateTimeGMT(v string) *GetCorpTasksResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetFinishTimeGMT(v string) *GetCorpTasksResponseBodyData {
	s.FinishTimeGMT = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorEmail(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorEmail = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorId(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorId = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorName(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorName = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorNameInEnglish(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorNameInEnglish = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorNickName(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorNickName = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorNickNameEn(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorNickNameEn = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorNickNameInEnglish(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorNickNameInEnglish = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOriginatorPhoto(v string) *GetCorpTasksResponseBodyData {
	s.OriginatorPhoto = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOutResult(v string) *GetCorpTasksResponseBodyData {
	s.OutResult = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetOutResultName(v string) *GetCorpTasksResponseBodyData {
	s.OutResultName = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetProcessInstanceId(v string) *GetCorpTasksResponseBodyData {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetStatus(v string) *GetCorpTasksResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetTaskId(v string) *GetCorpTasksResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetTaskType(v string) *GetCorpTasksResponseBodyData {
	s.TaskType = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetTitle(v string) *GetCorpTasksResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetCorpTasksResponseBodyData) SetTitleInEnglish(v string) *GetCorpTasksResponseBodyData {
	s.TitleInEnglish = &v
	return s
}

type GetCorpTasksResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCorpTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCorpTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCorpTasksResponse) GoString() string {
	return s.String()
}

func (s *GetCorpTasksResponse) SetHeaders(v map[string]*string) *GetCorpTasksResponse {
	s.Headers = v
	return s
}

func (s *GetCorpTasksResponse) SetStatusCode(v int32) *GetCorpTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCorpTasksResponse) SetBody(v *GetCorpTasksResponseBody) *GetCorpTasksResponse {
	s.Body = v
	return s
}

type GetDocContentHeaders struct {
	CommonHeaders  map[string]*string                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetDocContentHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetDocContentHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentHeaders) GoString() string {
	return s.String()
}

func (s *GetDocContentHeaders) SetCommonHeaders(v map[string]*string) *GetDocContentHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetDocContentHeaders) SetAccountContext(v *GetDocContentHeadersAccountContext) *GetDocContentHeaders {
	s.AccountContext = v
	return s
}

type GetDocContentHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// ba3a9b612345678d8fedf544ef69d19e
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetDocContentHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetDocContentHeadersAccountContext) SetAccountId(v string) *GetDocContentHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetDocContentShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetDocContentShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetDocContentShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetDocContentShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetDocContentShrinkHeaders) SetAccountContextShrink(v string) *GetDocContentShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetDocContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// dentry_uuid
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	// example:
	//
	// markdown
	TargetFormat  *string                            `json:"TargetFormat,omitempty" xml:"TargetFormat,omitempty"`
	TenantContext *GetDocContentRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	UserToken *string `json:"userToken,omitempty" xml:"userToken,omitempty"`
}

func (s GetDocContentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentRequest) GoString() string {
	return s.String()
}

func (s *GetDocContentRequest) SetDentryUuid(v string) *GetDocContentRequest {
	s.DentryUuid = &v
	return s
}

func (s *GetDocContentRequest) SetTargetFormat(v string) *GetDocContentRequest {
	s.TargetFormat = &v
	return s
}

func (s *GetDocContentRequest) SetTenantContext(v *GetDocContentRequestTenantContext) *GetDocContentRequest {
	s.TenantContext = v
	return s
}

func (s *GetDocContentRequest) SetUserToken(v string) *GetDocContentRequest {
	s.UserToken = &v
	return s
}

type GetDocContentRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetDocContentRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetDocContentRequestTenantContext) SetTenantId(v string) *GetDocContentRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetDocContentShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// dentry_uuid
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	// example:
	//
	// markdown
	TargetFormat        *string `json:"TargetFormat,omitempty" xml:"TargetFormat,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	UserToken *string `json:"userToken,omitempty" xml:"userToken,omitempty"`
}

func (s GetDocContentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetDocContentShrinkRequest) SetDentryUuid(v string) *GetDocContentShrinkRequest {
	s.DentryUuid = &v
	return s
}

func (s *GetDocContentShrinkRequest) SetTargetFormat(v string) *GetDocContentShrinkRequest {
	s.TargetFormat = &v
	return s
}

func (s *GetDocContentShrinkRequest) SetTenantContextShrink(v string) *GetDocContentShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetDocContentShrinkRequest) SetUserToken(v string) *GetDocContentShrinkRequest {
	s.UserToken = &v
	return s
}

type GetDocContentResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// task123abc
	TaskId *int64 `json:"taskId,omitempty" xml:"taskId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetDocContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentResponseBody) GoString() string {
	return s.String()
}

func (s *GetDocContentResponseBody) SetRequestId(v string) *GetDocContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDocContentResponseBody) SetTaskId(v int64) *GetDocContentResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetDocContentResponseBody) SetVendorRequestId(v string) *GetDocContentResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetDocContentResponseBody) SetVendorType(v string) *GetDocContentResponseBody {
	s.VendorType = &v
	return s
}

type GetDocContentResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDocContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDocContentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentResponse) GoString() string {
	return s.String()
}

func (s *GetDocContentResponse) SetHeaders(v map[string]*string) *GetDocContentResponse {
	s.Headers = v
	return s
}

func (s *GetDocContentResponse) SetStatusCode(v int32) *GetDocContentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDocContentResponse) SetBody(v *GetDocContentResponseBody) *GetDocContentResponse {
	s.Body = v
	return s
}

type GetDocContentTakIdHeaders struct {
	CommonHeaders  map[string]*string                       `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetDocContentTakIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetDocContentTakIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdHeaders) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdHeaders) SetCommonHeaders(v map[string]*string) *GetDocContentTakIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetDocContentTakIdHeaders) SetAccountContext(v *GetDocContentTakIdHeadersAccountContext) *GetDocContentTakIdHeaders {
	s.AccountContext = v
	return s
}

type GetDocContentTakIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetDocContentTakIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdHeadersAccountContext) SetAccountId(v string) *GetDocContentTakIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetDocContentTakIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetDocContentTakIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetDocContentTakIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetDocContentTakIdShrinkHeaders) SetAccountContextShrink(v string) *GetDocContentTakIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetDocContentTakIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// qnYMoO1rWxrkmoj2I5L2PYkoJ47Z3je9
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	GenerateCp *bool   `json:"GenerateCp,omitempty" xml:"GenerateCp,omitempty"`
	// example:
	//
	// markdown
	TargetFormat  *string                                 `json:"TargetFormat,omitempty" xml:"TargetFormat,omitempty"`
	TenantContext *GetDocContentTakIdRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetDocContentTakIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdRequest) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdRequest) SetDentryUuid(v string) *GetDocContentTakIdRequest {
	s.DentryUuid = &v
	return s
}

func (s *GetDocContentTakIdRequest) SetGenerateCp(v bool) *GetDocContentTakIdRequest {
	s.GenerateCp = &v
	return s
}

func (s *GetDocContentTakIdRequest) SetTargetFormat(v string) *GetDocContentTakIdRequest {
	s.TargetFormat = &v
	return s
}

func (s *GetDocContentTakIdRequest) SetTenantContext(v *GetDocContentTakIdRequestTenantContext) *GetDocContentTakIdRequest {
	s.TenantContext = v
	return s
}

type GetDocContentTakIdRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetDocContentTakIdRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdRequestTenantContext) SetTenantId(v string) *GetDocContentTakIdRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetDocContentTakIdShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// qnYMoO1rWxrkmoj2I5L2PYkoJ47Z3je9
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	GenerateCp *bool   `json:"GenerateCp,omitempty" xml:"GenerateCp,omitempty"`
	// example:
	//
	// markdown
	TargetFormat        *string `json:"TargetFormat,omitempty" xml:"TargetFormat,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetDocContentTakIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdShrinkRequest) SetDentryUuid(v string) *GetDocContentTakIdShrinkRequest {
	s.DentryUuid = &v
	return s
}

func (s *GetDocContentTakIdShrinkRequest) SetGenerateCp(v bool) *GetDocContentTakIdShrinkRequest {
	s.GenerateCp = &v
	return s
}

func (s *GetDocContentTakIdShrinkRequest) SetTargetFormat(v string) *GetDocContentTakIdShrinkRequest {
	s.TargetFormat = &v
	return s
}

func (s *GetDocContentTakIdShrinkRequest) SetTenantContextShrink(v string) *GetDocContentTakIdShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetDocContentTakIdResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 72652830001
	TaskId *int64 `json:"taskId,omitempty" xml:"taskId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetDocContentTakIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdResponseBody) SetRequestId(v string) *GetDocContentTakIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDocContentTakIdResponseBody) SetTaskId(v int64) *GetDocContentTakIdResponseBody {
	s.TaskId = &v
	return s
}

func (s *GetDocContentTakIdResponseBody) SetVendorRequestId(v string) *GetDocContentTakIdResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetDocContentTakIdResponseBody) SetVendorType(v string) *GetDocContentTakIdResponseBody {
	s.VendorType = &v
	return s
}

type GetDocContentTakIdResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDocContentTakIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDocContentTakIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDocContentTakIdResponse) GoString() string {
	return s.String()
}

func (s *GetDocContentTakIdResponse) SetHeaders(v map[string]*string) *GetDocContentTakIdResponse {
	s.Headers = v
	return s
}

func (s *GetDocContentTakIdResponse) SetStatusCode(v int32) *GetDocContentTakIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDocContentTakIdResponse) SetBody(v *GetDocContentTakIdResponseBody) *GetDocContentTakIdResponse {
	s.Body = v
	return s
}

type GetEventHeaders struct {
	CommonHeaders  map[string]*string             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetEventHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetEventHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetEventHeaders) GoString() string {
	return s.String()
}

func (s *GetEventHeaders) SetCommonHeaders(v map[string]*string) *GetEventHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetEventHeaders) SetAccountContext(v *GetEventHeadersAccountContext) *GetEventHeaders {
	s.AccountContext = v
	return s
}

type GetEventHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 123456
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetEventHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetEventHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetEventHeadersAccountContext) SetAccountId(v string) *GetEventHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetEventShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetEventShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetEventShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetEventShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetEventShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetEventShrinkHeaders) SetAccountContextShrink(v string) *GetEventShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetEventRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 311525211
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// example:
	//
	// 100
	MaxAttendees *int64 `json:"MaxAttendees,omitempty" xml:"MaxAttendees,omitempty"`
}

func (s GetEventRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventRequest) GoString() string {
	return s.String()
}

func (s *GetEventRequest) SetCalendarId(v string) *GetEventRequest {
	s.CalendarId = &v
	return s
}

func (s *GetEventRequest) SetEventId(v string) *GetEventRequest {
	s.EventId = &v
	return s
}

func (s *GetEventRequest) SetMaxAttendees(v int64) *GetEventRequest {
	s.MaxAttendees = &v
	return s
}

type GetEventResponseBody struct {
	Attendees  []*GetEventResponseBodyAttendees  `json:"attendees,omitempty" xml:"attendees,omitempty" type:"Repeated"`
	Categories []*GetEventResponseBodyCategories `json:"categories,omitempty" xml:"categories,omitempty" type:"Repeated"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	CreateTime *string `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	Description        *string                                 `json:"description,omitempty" xml:"description,omitempty"`
	End                *GetEventResponseBodyEnd                `json:"end,omitempty" xml:"end,omitempty" type:"Struct"`
	ExtendedProperties *GetEventResponseBodyExtendedProperties `json:"extendedProperties,omitempty" xml:"extendedProperties,omitempty" type:"Struct"`
	// example:
	//
	// iiiP35sJxxxxPRKgiEiF
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsAllDay          *bool                                  `json:"isAllDay,omitempty" xml:"isAllDay,omitempty"`
	Location          *GetEventResponseBodyLocation          `json:"location,omitempty" xml:"location,omitempty" type:"Struct"`
	MeetingRooms      []*GetEventResponseBodyMeetingRooms    `json:"meetingRooms,omitempty" xml:"meetingRooms,omitempty" type:"Repeated"`
	OnlineMeetingInfo *GetEventResponseBodyOnlineMeetingInfo `json:"onlineMeetingInfo,omitempty" xml:"onlineMeetingInfo,omitempty" type:"Struct"`
	Organizer         *GetEventResponseBodyOrganizer         `json:"organizer,omitempty" xml:"organizer,omitempty" type:"Struct"`
	OriginStart       *GetEventResponseBodyOriginStart       `json:"originStart,omitempty" xml:"originStart,omitempty" type:"Struct"`
	Recurrence        *GetEventResponseBodyRecurrence        `json:"recurrence,omitempty" xml:"recurrence,omitempty" type:"Struct"`
	Reminders         []*GetEventResponseBodyReminders       `json:"reminders,omitempty" xml:"reminders,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// requestId
	RequestId           *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	RichTextDescription *GetEventResponseBodyRichTextDescription `json:"richTextDescription,omitempty" xml:"richTextDescription,omitempty" type:"Struct"`
	// example:
	//
	// cnNTbW1YbxxxxvdlQrQT09
	SeriesMasterId *string                    `json:"seriesMasterId,omitempty" xml:"seriesMasterId,omitempty"`
	Start          *GetEventResponseBodyStart `json:"start,omitempty" xml:"start,omitempty" type:"Struct"`
	// example:
	//
	// confirmed
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// test event
	Summary *string `json:"summary,omitempty" xml:"summary,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s GetEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventResponseBody) SetAttendees(v []*GetEventResponseBodyAttendees) *GetEventResponseBody {
	s.Attendees = v
	return s
}

func (s *GetEventResponseBody) SetCategories(v []*GetEventResponseBodyCategories) *GetEventResponseBody {
	s.Categories = v
	return s
}

func (s *GetEventResponseBody) SetCreateTime(v string) *GetEventResponseBody {
	s.CreateTime = &v
	return s
}

func (s *GetEventResponseBody) SetDescription(v string) *GetEventResponseBody {
	s.Description = &v
	return s
}

func (s *GetEventResponseBody) SetEnd(v *GetEventResponseBodyEnd) *GetEventResponseBody {
	s.End = v
	return s
}

func (s *GetEventResponseBody) SetExtendedProperties(v *GetEventResponseBodyExtendedProperties) *GetEventResponseBody {
	s.ExtendedProperties = v
	return s
}

func (s *GetEventResponseBody) SetId(v string) *GetEventResponseBody {
	s.Id = &v
	return s
}

func (s *GetEventResponseBody) SetIsAllDay(v bool) *GetEventResponseBody {
	s.IsAllDay = &v
	return s
}

func (s *GetEventResponseBody) SetLocation(v *GetEventResponseBodyLocation) *GetEventResponseBody {
	s.Location = v
	return s
}

func (s *GetEventResponseBody) SetMeetingRooms(v []*GetEventResponseBodyMeetingRooms) *GetEventResponseBody {
	s.MeetingRooms = v
	return s
}

func (s *GetEventResponseBody) SetOnlineMeetingInfo(v *GetEventResponseBodyOnlineMeetingInfo) *GetEventResponseBody {
	s.OnlineMeetingInfo = v
	return s
}

func (s *GetEventResponseBody) SetOrganizer(v *GetEventResponseBodyOrganizer) *GetEventResponseBody {
	s.Organizer = v
	return s
}

func (s *GetEventResponseBody) SetOriginStart(v *GetEventResponseBodyOriginStart) *GetEventResponseBody {
	s.OriginStart = v
	return s
}

func (s *GetEventResponseBody) SetRecurrence(v *GetEventResponseBodyRecurrence) *GetEventResponseBody {
	s.Recurrence = v
	return s
}

func (s *GetEventResponseBody) SetReminders(v []*GetEventResponseBodyReminders) *GetEventResponseBody {
	s.Reminders = v
	return s
}

func (s *GetEventResponseBody) SetRequestId(v string) *GetEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventResponseBody) SetRichTextDescription(v *GetEventResponseBodyRichTextDescription) *GetEventResponseBody {
	s.RichTextDescription = v
	return s
}

func (s *GetEventResponseBody) SetSeriesMasterId(v string) *GetEventResponseBody {
	s.SeriesMasterId = &v
	return s
}

func (s *GetEventResponseBody) SetStart(v *GetEventResponseBodyStart) *GetEventResponseBody {
	s.Start = v
	return s
}

func (s *GetEventResponseBody) SetStatus(v string) *GetEventResponseBody {
	s.Status = &v
	return s
}

func (s *GetEventResponseBody) SetSummary(v string) *GetEventResponseBody {
	s.Summary = &v
	return s
}

func (s *GetEventResponseBody) SetUpdateTime(v string) *GetEventResponseBody {
	s.UpdateTime = &v
	return s
}

type GetEventResponseBodyAttendees struct {
	// example:
	//
	// jack
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 123456
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// true
	IsOptional *bool `json:"IsOptional,omitempty" xml:"IsOptional,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s GetEventResponseBodyAttendees) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyAttendees) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyAttendees) SetDisplayName(v string) *GetEventResponseBodyAttendees {
	s.DisplayName = &v
	return s
}

func (s *GetEventResponseBodyAttendees) SetId(v string) *GetEventResponseBodyAttendees {
	s.Id = &v
	return s
}

func (s *GetEventResponseBodyAttendees) SetIsOptional(v bool) *GetEventResponseBodyAttendees {
	s.IsOptional = &v
	return s
}

func (s *GetEventResponseBodyAttendees) SetResponseStatus(v string) *GetEventResponseBodyAttendees {
	s.ResponseStatus = &v
	return s
}

func (s *GetEventResponseBodyAttendees) SetSelf(v bool) *GetEventResponseBodyAttendees {
	s.Self = &v
	return s
}

type GetEventResponseBodyCategories struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
}

func (s GetEventResponseBodyCategories) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyCategories) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyCategories) SetDisplayName(v string) *GetEventResponseBodyCategories {
	s.DisplayName = &v
	return s
}

type GetEventResponseBodyEnd struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s GetEventResponseBodyEnd) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyEnd) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyEnd) SetDate(v string) *GetEventResponseBodyEnd {
	s.Date = &v
	return s
}

func (s *GetEventResponseBodyEnd) SetDateTime(v string) *GetEventResponseBodyEnd {
	s.DateTime = &v
	return s
}

func (s *GetEventResponseBodyEnd) SetTimeZone(v string) *GetEventResponseBodyEnd {
	s.TimeZone = &v
	return s
}

type GetEventResponseBodyExtendedProperties struct {
	SharedProperties *GetEventResponseBodyExtendedPropertiesSharedProperties `json:"SharedProperties,omitempty" xml:"SharedProperties,omitempty" type:"Struct"`
}

func (s GetEventResponseBodyExtendedProperties) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyExtendedProperties) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyExtendedProperties) SetSharedProperties(v *GetEventResponseBodyExtendedPropertiesSharedProperties) *GetEventResponseBodyExtendedProperties {
	s.SharedProperties = v
	return s
}

type GetEventResponseBodyExtendedPropertiesSharedProperties struct {
	// example:
	//
	// dingd*****1231231
	BelongCorpId *string `json:"BelongCorpId,omitempty" xml:"BelongCorpId,omitempty"`
	// example:
	//
	// zxcvasdfvb123====
	SourceOpenCid *string `json:"SourceOpenCid,omitempty" xml:"SourceOpenCid,omitempty"`
}

func (s GetEventResponseBodyExtendedPropertiesSharedProperties) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyExtendedPropertiesSharedProperties) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyExtendedPropertiesSharedProperties) SetBelongCorpId(v string) *GetEventResponseBodyExtendedPropertiesSharedProperties {
	s.BelongCorpId = &v
	return s
}

func (s *GetEventResponseBodyExtendedPropertiesSharedProperties) SetSourceOpenCid(v string) *GetEventResponseBodyExtendedPropertiesSharedProperties {
	s.SourceOpenCid = &v
	return s
}

type GetEventResponseBodyLocation struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// --
	MeetingRooms []*string `json:"MeetingRooms,omitempty" xml:"MeetingRooms,omitempty" type:"Repeated"`
}

func (s GetEventResponseBodyLocation) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyLocation) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyLocation) SetDisplayName(v string) *GetEventResponseBodyLocation {
	s.DisplayName = &v
	return s
}

func (s *GetEventResponseBodyLocation) SetMeetingRooms(v []*string) *GetEventResponseBodyLocation {
	s.MeetingRooms = v
	return s
}

type GetEventResponseBodyMeetingRooms struct {
	// example:
	//
	// room 1-2-3
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// c10315a8b4e740a317813ab6fxxxxxx
	RoomId *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s GetEventResponseBodyMeetingRooms) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyMeetingRooms) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyMeetingRooms) SetDisplayName(v string) *GetEventResponseBodyMeetingRooms {
	s.DisplayName = &v
	return s
}

func (s *GetEventResponseBodyMeetingRooms) SetResponseStatus(v string) *GetEventResponseBodyMeetingRooms {
	s.ResponseStatus = &v
	return s
}

func (s *GetEventResponseBodyMeetingRooms) SetRoomId(v string) *GetEventResponseBodyMeetingRooms {
	s.RoomId = &v
	return s
}

type GetEventResponseBodyOnlineMeetingInfo struct {
	// example:
	//
	// 5c4df21d-xxxx-a6db402b9f3a
	ConferenceId *string                `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	ExtraInfo    map[string]interface{} `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// example:
	//
	// dingtalk
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// dingtalk://dingtalkclient/page/videoxxxxalendar?confId=5c4df21d-xxxx9f3f&calendarId=127xxxx124
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetEventResponseBodyOnlineMeetingInfo) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyOnlineMeetingInfo) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyOnlineMeetingInfo) SetConferenceId(v string) *GetEventResponseBodyOnlineMeetingInfo {
	s.ConferenceId = &v
	return s
}

func (s *GetEventResponseBodyOnlineMeetingInfo) SetExtraInfo(v map[string]interface{}) *GetEventResponseBodyOnlineMeetingInfo {
	s.ExtraInfo = v
	return s
}

func (s *GetEventResponseBodyOnlineMeetingInfo) SetType(v string) *GetEventResponseBodyOnlineMeetingInfo {
	s.Type = &v
	return s
}

func (s *GetEventResponseBodyOnlineMeetingInfo) SetUrl(v string) *GetEventResponseBodyOnlineMeetingInfo {
	s.Url = &v
	return s
}

type GetEventResponseBodyOrganizer struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 123456
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s GetEventResponseBodyOrganizer) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyOrganizer) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyOrganizer) SetDisplayName(v string) *GetEventResponseBodyOrganizer {
	s.DisplayName = &v
	return s
}

func (s *GetEventResponseBodyOrganizer) SetId(v string) *GetEventResponseBodyOrganizer {
	s.Id = &v
	return s
}

func (s *GetEventResponseBodyOrganizer) SetResponseStatus(v string) *GetEventResponseBodyOrganizer {
	s.ResponseStatus = &v
	return s
}

func (s *GetEventResponseBodyOrganizer) SetSelf(v bool) *GetEventResponseBodyOrganizer {
	s.Self = &v
	return s
}

type GetEventResponseBodyOriginStart struct {
	// example:
	//
	// 2023-01-01T00:00:00Z
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
}

func (s GetEventResponseBodyOriginStart) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyOriginStart) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyOriginStart) SetDateTime(v string) *GetEventResponseBodyOriginStart {
	s.DateTime = &v
	return s
}

type GetEventResponseBodyRecurrence struct {
	Pattern *GetEventResponseBodyRecurrencePattern `json:"Pattern,omitempty" xml:"Pattern,omitempty" type:"Struct"`
	Range   *GetEventResponseBodyRecurrenceRange   `json:"Range,omitempty" xml:"Range,omitempty" type:"Struct"`
}

func (s GetEventResponseBodyRecurrence) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyRecurrence) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyRecurrence) SetPattern(v *GetEventResponseBodyRecurrencePattern) *GetEventResponseBodyRecurrence {
	s.Pattern = v
	return s
}

func (s *GetEventResponseBodyRecurrence) SetRange(v *GetEventResponseBodyRecurrenceRange) *GetEventResponseBodyRecurrence {
	s.Range = v
	return s
}

type GetEventResponseBodyRecurrencePattern struct {
	// example:
	//
	// 14
	DayOfMonth *int32 `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	// example:
	//
	// monday
	DaysOfWeek *string `json:"DaysOfWeek,omitempty" xml:"DaysOfWeek,omitempty"`
	// example:
	//
	// first
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// 1
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// daily
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetEventResponseBodyRecurrencePattern) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyRecurrencePattern) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyRecurrencePattern) SetDayOfMonth(v int32) *GetEventResponseBodyRecurrencePattern {
	s.DayOfMonth = &v
	return s
}

func (s *GetEventResponseBodyRecurrencePattern) SetDaysOfWeek(v string) *GetEventResponseBodyRecurrencePattern {
	s.DaysOfWeek = &v
	return s
}

func (s *GetEventResponseBodyRecurrencePattern) SetIndex(v string) *GetEventResponseBodyRecurrencePattern {
	s.Index = &v
	return s
}

func (s *GetEventResponseBodyRecurrencePattern) SetInterval(v int32) *GetEventResponseBodyRecurrencePattern {
	s.Interval = &v
	return s
}

func (s *GetEventResponseBodyRecurrencePattern) SetType(v string) *GetEventResponseBodyRecurrencePattern {
	s.Type = &v
	return s
}

type GetEventResponseBodyRecurrenceRange struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// example:
	//
	// 5
	NumberOfOccurrences *int32 `json:"NumberOfOccurrences,omitempty" xml:"NumberOfOccurrences,omitempty"`
	// example:
	//
	// noEnd
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetEventResponseBodyRecurrenceRange) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyRecurrenceRange) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyRecurrenceRange) SetEndDate(v string) *GetEventResponseBodyRecurrenceRange {
	s.EndDate = &v
	return s
}

func (s *GetEventResponseBodyRecurrenceRange) SetNumberOfOccurrences(v int32) *GetEventResponseBodyRecurrenceRange {
	s.NumberOfOccurrences = &v
	return s
}

func (s *GetEventResponseBodyRecurrenceRange) SetType(v string) *GetEventResponseBodyRecurrenceRange {
	s.Type = &v
	return s
}

type GetEventResponseBodyReminders struct {
	// example:
	//
	// dingtalk
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// 15
	Minutes *string `json:"Minutes,omitempty" xml:"Minutes,omitempty"`
}

func (s GetEventResponseBodyReminders) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyReminders) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyReminders) SetMethod(v string) *GetEventResponseBodyReminders {
	s.Method = &v
	return s
}

func (s *GetEventResponseBodyReminders) SetMinutes(v string) *GetEventResponseBodyReminders {
	s.Minutes = &v
	return s
}

type GetEventResponseBodyRichTextDescription struct {
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s GetEventResponseBodyRichTextDescription) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyRichTextDescription) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyRichTextDescription) SetText(v string) *GetEventResponseBodyRichTextDescription {
	s.Text = &v
	return s
}

type GetEventResponseBodyStart struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s GetEventResponseBodyStart) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponseBodyStart) GoString() string {
	return s.String()
}

func (s *GetEventResponseBodyStart) SetDate(v string) *GetEventResponseBodyStart {
	s.Date = &v
	return s
}

func (s *GetEventResponseBodyStart) SetDateTime(v string) *GetEventResponseBodyStart {
	s.DateTime = &v
	return s
}

func (s *GetEventResponseBodyStart) SetTimeZone(v string) *GetEventResponseBodyStart {
	s.TimeZone = &v
	return s
}

type GetEventResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventResponse) GoString() string {
	return s.String()
}

func (s *GetEventResponse) SetHeaders(v map[string]*string) *GetEventResponse {
	s.Headers = v
	return s
}

func (s *GetEventResponse) SetStatusCode(v int32) *GetEventResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventResponse) SetBody(v *GetEventResponseBody) *GetEventResponse {
	s.Body = v
	return s
}

type GetFieldDefByUuidHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetFieldDefByUuidHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetFieldDefByUuidHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFieldDefByUuidHeaders) GoString() string {
	return s.String()
}

func (s *GetFieldDefByUuidHeaders) SetCommonHeaders(v map[string]*string) *GetFieldDefByUuidHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFieldDefByUuidHeaders) SetAccountContext(v *GetFieldDefByUuidHeadersAccountContext) *GetFieldDefByUuidHeaders {
	s.AccountContext = v
	return s
}

type GetFieldDefByUuidHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetFieldDefByUuidHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetFieldDefByUuidHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetFieldDefByUuidHeadersAccountContext) SetAccountId(v string) *GetFieldDefByUuidHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetFieldDefByUuidShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetFieldDefByUuidShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFieldDefByUuidShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetFieldDefByUuidShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetFieldDefByUuidShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFieldDefByUuidShrinkHeaders) SetAccountContextShrink(v string) *GetFieldDefByUuidShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetFieldDefByUuidRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetFieldDefByUuidRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFieldDefByUuidRequest) GoString() string {
	return s.String()
}

func (s *GetFieldDefByUuidRequest) SetAppType(v string) *GetFieldDefByUuidRequest {
	s.AppType = &v
	return s
}

func (s *GetFieldDefByUuidRequest) SetFormUuid(v string) *GetFieldDefByUuidRequest {
	s.FormUuid = &v
	return s
}

func (s *GetFieldDefByUuidRequest) SetSystemToken(v string) *GetFieldDefByUuidRequest {
	s.SystemToken = &v
	return s
}

type GetFieldDefByUuidResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*GetFieldDefByUuidResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetFieldDefByUuidResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFieldDefByUuidResponseBody) GoString() string {
	return s.String()
}

func (s *GetFieldDefByUuidResponseBody) SetRequestId(v string) *GetFieldDefByUuidResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFieldDefByUuidResponseBody) SetResult(v []*GetFieldDefByUuidResponseBodyResult) *GetFieldDefByUuidResponseBody {
	s.Result = v
	return s
}

func (s *GetFieldDefByUuidResponseBody) SetSuccess(v bool) *GetFieldDefByUuidResponseBody {
	s.Success = &v
	return s
}

func (s *GetFieldDefByUuidResponseBody) SetVendorRequestId(v string) *GetFieldDefByUuidResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetFieldDefByUuidResponseBody) SetVendorType(v string) *GetFieldDefByUuidResponseBody {
	s.VendorType = &v
	return s
}

type GetFieldDefByUuidResponseBodyResult struct {
	// example:
	//
	// NORMAL
	Behavior *string `json:"Behavior,omitempty" xml:"Behavior,omitempty"`
	Children *string `json:"Children,omitempty" xml:"Children,omitempty"`
	// example:
	//
	// TextareaField
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	// example:
	//
	// textField_laq7xxx
	FieldId *string `json:"FieldId,omitempty" xml:"FieldId,omitempty"`
	// example:
	//
	// {}
	Label interface{} `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// {}
	Props interface{} `json:"Props,omitempty" xml:"Props,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFieldDefByUuidResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetFieldDefByUuidResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetFieldDefByUuidResponseBodyResult) SetBehavior(v string) *GetFieldDefByUuidResponseBodyResult {
	s.Behavior = &v
	return s
}

func (s *GetFieldDefByUuidResponseBodyResult) SetChildren(v string) *GetFieldDefByUuidResponseBodyResult {
	s.Children = &v
	return s
}

func (s *GetFieldDefByUuidResponseBodyResult) SetComponentName(v string) *GetFieldDefByUuidResponseBodyResult {
	s.ComponentName = &v
	return s
}

func (s *GetFieldDefByUuidResponseBodyResult) SetFieldId(v string) *GetFieldDefByUuidResponseBodyResult {
	s.FieldId = &v
	return s
}

func (s *GetFieldDefByUuidResponseBodyResult) SetLabel(v interface{}) *GetFieldDefByUuidResponseBodyResult {
	s.Label = v
	return s
}

func (s *GetFieldDefByUuidResponseBodyResult) SetProps(v interface{}) *GetFieldDefByUuidResponseBodyResult {
	s.Props = v
	return s
}

func (s *GetFieldDefByUuidResponseBodyResult) SetSuccess(v bool) *GetFieldDefByUuidResponseBodyResult {
	s.Success = &v
	return s
}

type GetFieldDefByUuidResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFieldDefByUuidResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFieldDefByUuidResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFieldDefByUuidResponse) GoString() string {
	return s.String()
}

func (s *GetFieldDefByUuidResponse) SetHeaders(v map[string]*string) *GetFieldDefByUuidResponse {
	s.Headers = v
	return s
}

func (s *GetFieldDefByUuidResponse) SetStatusCode(v int32) *GetFieldDefByUuidResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFieldDefByUuidResponse) SetBody(v *GetFieldDefByUuidResponseBody) *GetFieldDefByUuidResponse {
	s.Body = v
	return s
}

type GetFileDownloadInfoHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetFileDownloadInfoHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetFileDownloadInfoHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoHeaders) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoHeaders) SetCommonHeaders(v map[string]*string) *GetFileDownloadInfoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFileDownloadInfoHeaders) SetAccountContext(v *GetFileDownloadInfoHeadersAccountContext) *GetFileDownloadInfoHeaders {
	s.AccountContext = v
	return s
}

type GetFileDownloadInfoHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetFileDownloadInfoHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoHeadersAccountContext) SetAccountId(v string) *GetFileDownloadInfoHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetFileDownloadInfoShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetFileDownloadInfoShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetFileDownloadInfoShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFileDownloadInfoShrinkHeaders) SetAccountContextShrink(v string) *GetFileDownloadInfoShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetFileDownloadInfoRequest struct {
	// example:
	//
	// 798xxxxx
	DentryId *string                           `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	Option   *GetFileDownloadInfoRequestOption `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	// example:
	//
	// 854xxxx
	SpaceId       *string                                  `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContext *GetFileDownloadInfoRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetFileDownloadInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoRequest) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoRequest) SetDentryId(v string) *GetFileDownloadInfoRequest {
	s.DentryId = &v
	return s
}

func (s *GetFileDownloadInfoRequest) SetOption(v *GetFileDownloadInfoRequestOption) *GetFileDownloadInfoRequest {
	s.Option = v
	return s
}

func (s *GetFileDownloadInfoRequest) SetSpaceId(v string) *GetFileDownloadInfoRequest {
	s.SpaceId = &v
	return s
}

func (s *GetFileDownloadInfoRequest) SetTenantContext(v *GetFileDownloadInfoRequestTenantContext) *GetFileDownloadInfoRequest {
	s.TenantContext = v
	return s
}

type GetFileDownloadInfoRequestOption struct {
	// example:
	//
	// true
	PreferIntranet *bool `json:"PreferIntranet,omitempty" xml:"PreferIntranet,omitempty"`
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetFileDownloadInfoRequestOption) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoRequestOption) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoRequestOption) SetPreferIntranet(v bool) *GetFileDownloadInfoRequestOption {
	s.PreferIntranet = &v
	return s
}

func (s *GetFileDownloadInfoRequestOption) SetVersion(v int64) *GetFileDownloadInfoRequestOption {
	s.Version = &v
	return s
}

type GetFileDownloadInfoRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetFileDownloadInfoRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoRequestTenantContext) SetTenantId(v string) *GetFileDownloadInfoRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetFileDownloadInfoShrinkRequest struct {
	// example:
	//
	// 798xxxxx
	DentryId     *string `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	OptionShrink *string `json:"Option,omitempty" xml:"Option,omitempty"`
	// example:
	//
	// 854xxxx
	SpaceId             *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetFileDownloadInfoShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoShrinkRequest) SetDentryId(v string) *GetFileDownloadInfoShrinkRequest {
	s.DentryId = &v
	return s
}

func (s *GetFileDownloadInfoShrinkRequest) SetOptionShrink(v string) *GetFileDownloadInfoShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *GetFileDownloadInfoShrinkRequest) SetSpaceId(v string) *GetFileDownloadInfoShrinkRequest {
	s.SpaceId = &v
	return s
}

func (s *GetFileDownloadInfoShrinkRequest) SetTenantContextShrink(v string) *GetFileDownloadInfoShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetFileDownloadInfoResponseBody struct {
	HeaderSignatureInfo *GetFileDownloadInfoResponseBodyHeaderSignatureInfo `json:"headerSignatureInfo,omitempty" xml:"headerSignatureInfo,omitempty" type:"Struct"`
	// example:
	//
	// HEADER_SIGNATURE
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetFileDownloadInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoResponseBody) SetHeaderSignatureInfo(v *GetFileDownloadInfoResponseBodyHeaderSignatureInfo) *GetFileDownloadInfoResponseBody {
	s.HeaderSignatureInfo = v
	return s
}

func (s *GetFileDownloadInfoResponseBody) SetProtocol(v string) *GetFileDownloadInfoResponseBody {
	s.Protocol = &v
	return s
}

func (s *GetFileDownloadInfoResponseBody) SetRequestId(v string) *GetFileDownloadInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileDownloadInfoResponseBody) SetVendorRequestId(v string) *GetFileDownloadInfoResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetFileDownloadInfoResponseBody) SetVendorType(v string) *GetFileDownloadInfoResponseBody {
	s.VendorType = &v
	return s
}

type GetFileDownloadInfoResponseBodyHeaderSignatureInfo struct {
	// example:
	//
	// 900
	ExpirationSeconds    *int32             `json:"ExpirationSeconds,omitempty" xml:"ExpirationSeconds,omitempty"`
	Headers              map[string]*string `json:"Headers,omitempty" xml:"Headers,omitempty"`
	InternalResourceUrls []*string          `json:"InternalResourceUrls,omitempty" xml:"InternalResourceUrls,omitempty" type:"Repeated"`
	// example:
	//
	// ZHANGJIAKOU
	Region       *string   `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceUrls []*string `json:"ResourceUrls,omitempty" xml:"ResourceUrls,omitempty" type:"Repeated"`
}

func (s GetFileDownloadInfoResponseBodyHeaderSignatureInfo) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoResponseBodyHeaderSignatureInfo) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoResponseBodyHeaderSignatureInfo) SetExpirationSeconds(v int32) *GetFileDownloadInfoResponseBodyHeaderSignatureInfo {
	s.ExpirationSeconds = &v
	return s
}

func (s *GetFileDownloadInfoResponseBodyHeaderSignatureInfo) SetHeaders(v map[string]*string) *GetFileDownloadInfoResponseBodyHeaderSignatureInfo {
	s.Headers = v
	return s
}

func (s *GetFileDownloadInfoResponseBodyHeaderSignatureInfo) SetInternalResourceUrls(v []*string) *GetFileDownloadInfoResponseBodyHeaderSignatureInfo {
	s.InternalResourceUrls = v
	return s
}

func (s *GetFileDownloadInfoResponseBodyHeaderSignatureInfo) SetRegion(v string) *GetFileDownloadInfoResponseBodyHeaderSignatureInfo {
	s.Region = &v
	return s
}

func (s *GetFileDownloadInfoResponseBodyHeaderSignatureInfo) SetResourceUrls(v []*string) *GetFileDownloadInfoResponseBodyHeaderSignatureInfo {
	s.ResourceUrls = v
	return s
}

type GetFileDownloadInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFileDownloadInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFileDownloadInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileDownloadInfoResponse) GoString() string {
	return s.String()
}

func (s *GetFileDownloadInfoResponse) SetHeaders(v map[string]*string) *GetFileDownloadInfoResponse {
	s.Headers = v
	return s
}

func (s *GetFileDownloadInfoResponse) SetStatusCode(v int32) *GetFileDownloadInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileDownloadInfoResponse) SetBody(v *GetFileDownloadInfoResponseBody) *GetFileDownloadInfoResponse {
	s.Body = v
	return s
}

type GetFileUploadInfoHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetFileUploadInfoHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetFileUploadInfoHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoHeaders) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoHeaders) SetCommonHeaders(v map[string]*string) *GetFileUploadInfoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFileUploadInfoHeaders) SetAccountContext(v *GetFileUploadInfoHeadersAccountContext) *GetFileUploadInfoHeaders {
	s.AccountContext = v
	return s
}

type GetFileUploadInfoHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetFileUploadInfoHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoHeadersAccountContext) SetAccountId(v string) *GetFileUploadInfoHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetFileUploadInfoShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetFileUploadInfoShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetFileUploadInfoShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFileUploadInfoShrinkHeaders) SetAccountContextShrink(v string) *GetFileUploadInfoShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetFileUploadInfoRequest struct {
	Option *GetFileUploadInfoRequestOption `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	// example:
	//
	// dentryUuid
	ParentDentryUuid *string `json:"ParentDentryUuid,omitempty" xml:"ParentDentryUuid,omitempty"`
	// example:
	//
	// HEADER_SIGNATURE
	Protocol      *string                                `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	TenantContext *GetFileUploadInfoRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetFileUploadInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoRequest) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoRequest) SetOption(v *GetFileUploadInfoRequestOption) *GetFileUploadInfoRequest {
	s.Option = v
	return s
}

func (s *GetFileUploadInfoRequest) SetParentDentryUuid(v string) *GetFileUploadInfoRequest {
	s.ParentDentryUuid = &v
	return s
}

func (s *GetFileUploadInfoRequest) SetProtocol(v string) *GetFileUploadInfoRequest {
	s.Protocol = &v
	return s
}

func (s *GetFileUploadInfoRequest) SetTenantContext(v *GetFileUploadInfoRequestTenantContext) *GetFileUploadInfoRequest {
	s.TenantContext = v
	return s
}

type GetFileUploadInfoRequestOption struct {
	PreCheckParam *GetFileUploadInfoRequestOptionPreCheckParam `json:"PreCheckParam,omitempty" xml:"PreCheckParam,omitempty" type:"Struct"`
	// example:
	//
	// true
	PreferIntranet *bool `json:"PreferIntranet,omitempty" xml:"PreferIntranet,omitempty"`
	// example:
	//
	// ZHANGJIAKOU
	PreferRegion *string `json:"PreferRegion,omitempty" xml:"PreferRegion,omitempty"`
	// example:
	//
	// DINGTALK
	StorageDriver *string `json:"StorageDriver,omitempty" xml:"StorageDriver,omitempty"`
}

func (s GetFileUploadInfoRequestOption) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoRequestOption) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoRequestOption) SetPreCheckParam(v *GetFileUploadInfoRequestOptionPreCheckParam) *GetFileUploadInfoRequestOption {
	s.PreCheckParam = v
	return s
}

func (s *GetFileUploadInfoRequestOption) SetPreferIntranet(v bool) *GetFileUploadInfoRequestOption {
	s.PreferIntranet = &v
	return s
}

func (s *GetFileUploadInfoRequestOption) SetPreferRegion(v string) *GetFileUploadInfoRequestOption {
	s.PreferRegion = &v
	return s
}

func (s *GetFileUploadInfoRequestOption) SetStorageDriver(v string) *GetFileUploadInfoRequestOption {
	s.StorageDriver = &v
	return s
}

type GetFileUploadInfoRequestOptionPreCheckParam struct {
	// example:
	//
	// None
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// None
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s GetFileUploadInfoRequestOptionPreCheckParam) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoRequestOptionPreCheckParam) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoRequestOptionPreCheckParam) SetName(v string) *GetFileUploadInfoRequestOptionPreCheckParam {
	s.Name = &v
	return s
}

func (s *GetFileUploadInfoRequestOptionPreCheckParam) SetSize(v int64) *GetFileUploadInfoRequestOptionPreCheckParam {
	s.Size = &v
	return s
}

type GetFileUploadInfoRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetFileUploadInfoRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoRequestTenantContext) SetTenantId(v string) *GetFileUploadInfoRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetFileUploadInfoShrinkRequest struct {
	OptionShrink *string `json:"Option,omitempty" xml:"Option,omitempty"`
	// example:
	//
	// dentryUuid
	ParentDentryUuid *string `json:"ParentDentryUuid,omitempty" xml:"ParentDentryUuid,omitempty"`
	// example:
	//
	// HEADER_SIGNATURE
	Protocol            *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetFileUploadInfoShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoShrinkRequest) SetOptionShrink(v string) *GetFileUploadInfoShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *GetFileUploadInfoShrinkRequest) SetParentDentryUuid(v string) *GetFileUploadInfoShrinkRequest {
	s.ParentDentryUuid = &v
	return s
}

func (s *GetFileUploadInfoShrinkRequest) SetProtocol(v string) *GetFileUploadInfoShrinkRequest {
	s.Protocol = &v
	return s
}

func (s *GetFileUploadInfoShrinkRequest) SetTenantContextShrink(v string) *GetFileUploadInfoShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetFileUploadInfoResponseBody struct {
	HeaderSignatureInfo *GetFileUploadInfoResponseBodyHeaderSignatureInfo `json:"headerSignatureInfo,omitempty" xml:"headerSignatureInfo,omitempty" type:"Struct"`
	// example:
	//
	// HEADER_SIGNATURE
	Protocol *string `json:"protocol,omitempty" xml:"protocol,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// DINGTALK
	StorageDriver *string `json:"storageDriver,omitempty" xml:"storageDriver,omitempty"`
	// example:
	//
	// upload_key
	UploadKey *string `json:"uploadKey,omitempty" xml:"uploadKey,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetFileUploadInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoResponseBody) SetHeaderSignatureInfo(v *GetFileUploadInfoResponseBodyHeaderSignatureInfo) *GetFileUploadInfoResponseBody {
	s.HeaderSignatureInfo = v
	return s
}

func (s *GetFileUploadInfoResponseBody) SetProtocol(v string) *GetFileUploadInfoResponseBody {
	s.Protocol = &v
	return s
}

func (s *GetFileUploadInfoResponseBody) SetRequestId(v string) *GetFileUploadInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFileUploadInfoResponseBody) SetStorageDriver(v string) *GetFileUploadInfoResponseBody {
	s.StorageDriver = &v
	return s
}

func (s *GetFileUploadInfoResponseBody) SetUploadKey(v string) *GetFileUploadInfoResponseBody {
	s.UploadKey = &v
	return s
}

func (s *GetFileUploadInfoResponseBody) SetVendorRequestId(v string) *GetFileUploadInfoResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetFileUploadInfoResponseBody) SetVendorType(v string) *GetFileUploadInfoResponseBody {
	s.VendorType = &v
	return s
}

type GetFileUploadInfoResponseBodyHeaderSignatureInfo struct {
	// example:
	//
	// 900
	ExpirationSeconds    *int32             `json:"ExpirationSeconds,omitempty" xml:"ExpirationSeconds,omitempty"`
	Headers              map[string]*string `json:"Headers,omitempty" xml:"Headers,omitempty"`
	InternalResourceUrls []*string          `json:"InternalResourceUrls,omitempty" xml:"InternalResourceUrls,omitempty" type:"Repeated"`
	// example:
	//
	// ZHANGJIAKOU
	Region       *string   `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceUrls []*string `json:"ResourceUrls,omitempty" xml:"ResourceUrls,omitempty" type:"Repeated"`
}

func (s GetFileUploadInfoResponseBodyHeaderSignatureInfo) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoResponseBodyHeaderSignatureInfo) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoResponseBodyHeaderSignatureInfo) SetExpirationSeconds(v int32) *GetFileUploadInfoResponseBodyHeaderSignatureInfo {
	s.ExpirationSeconds = &v
	return s
}

func (s *GetFileUploadInfoResponseBodyHeaderSignatureInfo) SetHeaders(v map[string]*string) *GetFileUploadInfoResponseBodyHeaderSignatureInfo {
	s.Headers = v
	return s
}

func (s *GetFileUploadInfoResponseBodyHeaderSignatureInfo) SetInternalResourceUrls(v []*string) *GetFileUploadInfoResponseBodyHeaderSignatureInfo {
	s.InternalResourceUrls = v
	return s
}

func (s *GetFileUploadInfoResponseBodyHeaderSignatureInfo) SetRegion(v string) *GetFileUploadInfoResponseBodyHeaderSignatureInfo {
	s.Region = &v
	return s
}

func (s *GetFileUploadInfoResponseBodyHeaderSignatureInfo) SetResourceUrls(v []*string) *GetFileUploadInfoResponseBodyHeaderSignatureInfo {
	s.ResourceUrls = v
	return s
}

type GetFileUploadInfoResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFileUploadInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFileUploadInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFileUploadInfoResponse) GoString() string {
	return s.String()
}

func (s *GetFileUploadInfoResponse) SetHeaders(v map[string]*string) *GetFileUploadInfoResponse {
	s.Headers = v
	return s
}

func (s *GetFileUploadInfoResponse) SetStatusCode(v int32) *GetFileUploadInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFileUploadInfoResponse) SetBody(v *GetFileUploadInfoResponseBody) *GetFileUploadInfoResponse {
	s.Body = v
	return s
}

type GetFormComponentDefinitionListHeaders struct {
	CommonHeaders  map[string]*string                                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetFormComponentDefinitionListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetFormComponentDefinitionListHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFormComponentDefinitionListHeaders) GoString() string {
	return s.String()
}

func (s *GetFormComponentDefinitionListHeaders) SetCommonHeaders(v map[string]*string) *GetFormComponentDefinitionListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFormComponentDefinitionListHeaders) SetAccountContext(v *GetFormComponentDefinitionListHeadersAccountContext) *GetFormComponentDefinitionListHeaders {
	s.AccountContext = v
	return s
}

type GetFormComponentDefinitionListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetFormComponentDefinitionListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetFormComponentDefinitionListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetFormComponentDefinitionListHeadersAccountContext) SetAccountId(v string) *GetFormComponentDefinitionListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetFormComponentDefinitionListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetFormComponentDefinitionListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFormComponentDefinitionListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetFormComponentDefinitionListShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetFormComponentDefinitionListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFormComponentDefinitionListShrinkHeaders) SetAccountContextShrink(v string) *GetFormComponentDefinitionListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetFormComponentDefinitionListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetFormComponentDefinitionListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFormComponentDefinitionListRequest) GoString() string {
	return s.String()
}

func (s *GetFormComponentDefinitionListRequest) SetAppType(v string) *GetFormComponentDefinitionListRequest {
	s.AppType = &v
	return s
}

func (s *GetFormComponentDefinitionListRequest) SetFormUuid(v string) *GetFormComponentDefinitionListRequest {
	s.FormUuid = &v
	return s
}

func (s *GetFormComponentDefinitionListRequest) SetLanguage(v string) *GetFormComponentDefinitionListRequest {
	s.Language = &v
	return s
}

func (s *GetFormComponentDefinitionListRequest) SetSystemToken(v string) *GetFormComponentDefinitionListRequest {
	s.SystemToken = &v
	return s
}

type GetFormComponentDefinitionListResponseBody struct {
	Result []*GetFormComponentDefinitionListResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetFormComponentDefinitionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFormComponentDefinitionListResponseBody) GoString() string {
	return s.String()
}

func (s *GetFormComponentDefinitionListResponseBody) SetResult(v []*GetFormComponentDefinitionListResponseBodyResult) *GetFormComponentDefinitionListResponseBody {
	s.Result = v
	return s
}

func (s *GetFormComponentDefinitionListResponseBody) SetRequestId(v string) *GetFormComponentDefinitionListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFormComponentDefinitionListResponseBody) SetVendorRequestId(v string) *GetFormComponentDefinitionListResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetFormComponentDefinitionListResponseBody) SetVendorType(v string) *GetFormComponentDefinitionListResponseBody {
	s.VendorType = &v
	return s
}

type GetFormComponentDefinitionListResponseBodyResult struct {
	// example:
	//
	// FooterYida
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	// example:
	//
	// formContainer_kksjiuk
	FieldId *string `json:"FieldId,omitempty" xml:"FieldId,omitempty"`
	// example:
	//
	// {"en_US":""}
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// formContainer_kksjiuk
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s GetFormComponentDefinitionListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetFormComponentDefinitionListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetFormComponentDefinitionListResponseBodyResult) SetComponentName(v string) *GetFormComponentDefinitionListResponseBodyResult {
	s.ComponentName = &v
	return s
}

func (s *GetFormComponentDefinitionListResponseBodyResult) SetFieldId(v string) *GetFormComponentDefinitionListResponseBodyResult {
	s.FieldId = &v
	return s
}

func (s *GetFormComponentDefinitionListResponseBodyResult) SetLabel(v string) *GetFormComponentDefinitionListResponseBodyResult {
	s.Label = &v
	return s
}

func (s *GetFormComponentDefinitionListResponseBodyResult) SetParentId(v string) *GetFormComponentDefinitionListResponseBodyResult {
	s.ParentId = &v
	return s
}

type GetFormComponentDefinitionListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFormComponentDefinitionListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFormComponentDefinitionListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFormComponentDefinitionListResponse) GoString() string {
	return s.String()
}

func (s *GetFormComponentDefinitionListResponse) SetHeaders(v map[string]*string) *GetFormComponentDefinitionListResponse {
	s.Headers = v
	return s
}

func (s *GetFormComponentDefinitionListResponse) SetStatusCode(v int32) *GetFormComponentDefinitionListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFormComponentDefinitionListResponse) SetBody(v *GetFormComponentDefinitionListResponseBody) *GetFormComponentDefinitionListResponse {
	s.Body = v
	return s
}

type GetFormDataByIDHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetFormDataByIDHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetFormDataByIDHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDHeaders) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDHeaders) SetCommonHeaders(v map[string]*string) *GetFormDataByIDHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFormDataByIDHeaders) SetAccountContext(v *GetFormDataByIDHeadersAccountContext) *GetFormDataByIDHeaders {
	s.AccountContext = v
	return s
}

type GetFormDataByIDHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetFormDataByIDHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDHeadersAccountContext) SetAccountId(v string) *GetFormDataByIDHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetFormDataByIDShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetFormDataByIDShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetFormDataByIDShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFormDataByIDShrinkHeaders) SetAccountContextShrink(v string) *GetFormDataByIDShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetFormDataByIDRequest struct {
	// example:
	//
	// APP_PBKT0MFBEBTDO8T7SLVP
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// FORM_INST_12345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetFormDataByIDRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDRequest) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDRequest) SetAppType(v string) *GetFormDataByIDRequest {
	s.AppType = &v
	return s
}

func (s *GetFormDataByIDRequest) SetId(v string) *GetFormDataByIDRequest {
	s.Id = &v
	return s
}

func (s *GetFormDataByIDRequest) SetLanguage(v string) *GetFormDataByIDRequest {
	s.Language = &v
	return s
}

func (s *GetFormDataByIDRequest) SetSystemToken(v string) *GetFormDataByIDRequest {
	s.SystemToken = &v
	return s
}

type GetFormDataByIDResponseBody struct {
	FormData map[string]interface{} `json:"formData,omitempty" xml:"formData,omitempty"`
	// example:
	//
	// FORM_INST_12345
	FormInstId *string `json:"formInstId,omitempty" xml:"formInstId,omitempty"`
	// example:
	//
	// 2021-05-01
	ModifiedTimeGMT *string                                `json:"modifiedTimeGMT,omitempty" xml:"modifiedTimeGMT,omitempty"`
	Originator      *GetFormDataByIDResponseBodyOriginator `json:"originator,omitempty" xml:"originator,omitempty" type:"Struct"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetFormDataByIDResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDResponseBody) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDResponseBody) SetFormData(v map[string]interface{}) *GetFormDataByIDResponseBody {
	s.FormData = v
	return s
}

func (s *GetFormDataByIDResponseBody) SetFormInstId(v string) *GetFormDataByIDResponseBody {
	s.FormInstId = &v
	return s
}

func (s *GetFormDataByIDResponseBody) SetModifiedTimeGMT(v string) *GetFormDataByIDResponseBody {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *GetFormDataByIDResponseBody) SetOriginator(v *GetFormDataByIDResponseBodyOriginator) *GetFormDataByIDResponseBody {
	s.Originator = v
	return s
}

func (s *GetFormDataByIDResponseBody) SetRequestId(v string) *GetFormDataByIDResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFormDataByIDResponseBody) SetVendorRequestId(v string) *GetFormDataByIDResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetFormDataByIDResponseBody) SetVendorType(v string) *GetFormDataByIDResponseBody {
	s.VendorType = &v
	return s
}

type GetFormDataByIDResponseBodyOriginator struct {
	// example:
	//
	// 开发部
	DepartmentName *string `json:"DepartmentName,omitempty" xml:"DepartmentName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string                                    `json:"Email,omitempty" xml:"Email,omitempty"`
	Name  *GetFormDataByIDResponseBodyOriginatorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetFormDataByIDResponseBodyOriginator) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDResponseBodyOriginator) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDResponseBodyOriginator) SetDepartmentName(v string) *GetFormDataByIDResponseBodyOriginator {
	s.DepartmentName = &v
	return s
}

func (s *GetFormDataByIDResponseBodyOriginator) SetEmail(v string) *GetFormDataByIDResponseBodyOriginator {
	s.Email = &v
	return s
}

func (s *GetFormDataByIDResponseBodyOriginator) SetName(v *GetFormDataByIDResponseBodyOriginatorName) *GetFormDataByIDResponseBodyOriginator {
	s.Name = v
	return s
}

func (s *GetFormDataByIDResponseBodyOriginator) SetUserId(v string) *GetFormDataByIDResponseBodyOriginator {
	s.UserId = &v
	return s
}

type GetFormDataByIDResponseBodyOriginatorName struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetFormDataByIDResponseBodyOriginatorName) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDResponseBodyOriginatorName) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDResponseBodyOriginatorName) SetNameInChinese(v string) *GetFormDataByIDResponseBodyOriginatorName {
	s.NameInChinese = &v
	return s
}

func (s *GetFormDataByIDResponseBodyOriginatorName) SetNameInEnglish(v string) *GetFormDataByIDResponseBodyOriginatorName {
	s.NameInEnglish = &v
	return s
}

func (s *GetFormDataByIDResponseBodyOriginatorName) SetType(v string) *GetFormDataByIDResponseBodyOriginatorName {
	s.Type = &v
	return s
}

type GetFormDataByIDResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFormDataByIDResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFormDataByIDResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFormDataByIDResponse) GoString() string {
	return s.String()
}

func (s *GetFormDataByIDResponse) SetHeaders(v map[string]*string) *GetFormDataByIDResponse {
	s.Headers = v
	return s
}

func (s *GetFormDataByIDResponse) SetStatusCode(v int32) *GetFormDataByIDResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFormDataByIDResponse) SetBody(v *GetFormDataByIDResponseBody) *GetFormDataByIDResponse {
	s.Body = v
	return s
}

type GetFormListInAppHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetFormListInAppHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetFormListInAppHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppHeaders) GoString() string {
	return s.String()
}

func (s *GetFormListInAppHeaders) SetCommonHeaders(v map[string]*string) *GetFormListInAppHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFormListInAppHeaders) SetAccountContext(v *GetFormListInAppHeadersAccountContext) *GetFormListInAppHeaders {
	s.AccountContext = v
	return s
}

type GetFormListInAppHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetFormListInAppHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetFormListInAppHeadersAccountContext) SetAccountId(v string) *GetFormListInAppHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetFormListInAppShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetFormListInAppShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetFormListInAppShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetFormListInAppShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetFormListInAppShrinkHeaders) SetAccountContextShrink(v string) *GetFormListInAppShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetFormListInAppRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// receipt
	FormTypes *string `json:"FormTypes,omitempty" xml:"FormTypes,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetFormListInAppRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppRequest) GoString() string {
	return s.String()
}

func (s *GetFormListInAppRequest) SetAppType(v string) *GetFormListInAppRequest {
	s.AppType = &v
	return s
}

func (s *GetFormListInAppRequest) SetFormTypes(v string) *GetFormListInAppRequest {
	s.FormTypes = &v
	return s
}

func (s *GetFormListInAppRequest) SetPageNumber(v int32) *GetFormListInAppRequest {
	s.PageNumber = &v
	return s
}

func (s *GetFormListInAppRequest) SetPageSize(v int32) *GetFormListInAppRequest {
	s.PageSize = &v
	return s
}

func (s *GetFormListInAppRequest) SetSystemToken(v string) *GetFormListInAppRequest {
	s.SystemToken = &v
	return s
}

type GetFormListInAppResponseBody struct {
	// example:
	//
	// 1
	CurrentPage *int32                              `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Data        []*GetFormListInAppResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetFormListInAppResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppResponseBody) GoString() string {
	return s.String()
}

func (s *GetFormListInAppResponseBody) SetCurrentPage(v int32) *GetFormListInAppResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *GetFormListInAppResponseBody) SetData(v []*GetFormListInAppResponseBodyData) *GetFormListInAppResponseBody {
	s.Data = v
	return s
}

func (s *GetFormListInAppResponseBody) SetRequestId(v string) *GetFormListInAppResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFormListInAppResponseBody) SetSuccess(v bool) *GetFormListInAppResponseBody {
	s.Success = &v
	return s
}

func (s *GetFormListInAppResponseBody) SetTotalCount(v int32) *GetFormListInAppResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetFormListInAppResponseBody) SetVendorRequestId(v string) *GetFormListInAppResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetFormListInAppResponseBody) SetVendorType(v string) *GetFormListInAppResponseBody {
	s.VendorType = &v
	return s
}

type GetFormListInAppResponseBodyData struct {
	// example:
	//
	// 012345
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// receipt
	FormType *string `json:"FormType,omitempty" xml:"FormType,omitempty"`
	// example:
	//
	// FORM-BAxxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// 2023-02-22 15:27:07
	GmtCreate *string                                `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Title     *GetFormListInAppResponseBodyDataTitle `json:"Title,omitempty" xml:"Title,omitempty" type:"Struct"`
}

func (s GetFormListInAppResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFormListInAppResponseBodyData) SetCreator(v string) *GetFormListInAppResponseBodyData {
	s.Creator = &v
	return s
}

func (s *GetFormListInAppResponseBodyData) SetFormType(v string) *GetFormListInAppResponseBodyData {
	s.FormType = &v
	return s
}

func (s *GetFormListInAppResponseBodyData) SetFormUuid(v string) *GetFormListInAppResponseBodyData {
	s.FormUuid = &v
	return s
}

func (s *GetFormListInAppResponseBodyData) SetGmtCreate(v string) *GetFormListInAppResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetFormListInAppResponseBodyData) SetTitle(v *GetFormListInAppResponseBodyDataTitle) *GetFormListInAppResponseBodyData {
	s.Title = v
	return s
}

type GetFormListInAppResponseBodyDataTitle struct {
	// example:
	//
	// form
	EnUS *string `json:"EnUS,omitempty" xml:"EnUS,omitempty"`
	ZhCN *string `json:"ZhCN,omitempty" xml:"ZhCN,omitempty"`
}

func (s GetFormListInAppResponseBodyDataTitle) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppResponseBodyDataTitle) GoString() string {
	return s.String()
}

func (s *GetFormListInAppResponseBodyDataTitle) SetEnUS(v string) *GetFormListInAppResponseBodyDataTitle {
	s.EnUS = &v
	return s
}

func (s *GetFormListInAppResponseBodyDataTitle) SetZhCN(v string) *GetFormListInAppResponseBodyDataTitle {
	s.ZhCN = &v
	return s
}

type GetFormListInAppResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetFormListInAppResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetFormListInAppResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFormListInAppResponse) GoString() string {
	return s.String()
}

func (s *GetFormListInAppResponse) SetHeaders(v map[string]*string) *GetFormListInAppResponse {
	s.Headers = v
	return s
}

func (s *GetFormListInAppResponse) SetStatusCode(v int32) *GetFormListInAppResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFormListInAppResponse) SetBody(v *GetFormListInAppResponseBody) *GetFormListInAppResponse {
	s.Body = v
	return s
}

type GetInnerGroupMembersHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetInnerGroupMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetInnerGroupMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInnerGroupMembersHeaders) GoString() string {
	return s.String()
}

func (s *GetInnerGroupMembersHeaders) SetCommonHeaders(v map[string]*string) *GetInnerGroupMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInnerGroupMembersHeaders) SetAccountContext(v *GetInnerGroupMembersHeadersAccountContext) *GetInnerGroupMembersHeaders {
	s.AccountContext = v
	return s
}

type GetInnerGroupMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetInnerGroupMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetInnerGroupMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetInnerGroupMembersHeadersAccountContext) SetAccountId(v string) *GetInnerGroupMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetInnerGroupMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetInnerGroupMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInnerGroupMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetInnerGroupMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetInnerGroupMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInnerGroupMembersShrinkHeaders) SetAccountContextShrink(v string) *GetInnerGroupMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetInnerGroupMembersRequest struct {
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// UZr*****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// cidB8Pzg****FIWPv2PMA==
	OpenConversationId *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
}

func (s GetInnerGroupMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInnerGroupMembersRequest) GoString() string {
	return s.String()
}

func (s *GetInnerGroupMembersRequest) SetMaxResults(v int32) *GetInnerGroupMembersRequest {
	s.MaxResults = &v
	return s
}

func (s *GetInnerGroupMembersRequest) SetNextToken(v string) *GetInnerGroupMembersRequest {
	s.NextToken = &v
	return s
}

func (s *GetInnerGroupMembersRequest) SetOpenConversationId(v string) *GetInnerGroupMembersRequest {
	s.OpenConversationId = &v
	return s
}

type GetInnerGroupMembersResponseBody struct {
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// cdf***
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// ["012345"]
	UserIds []*string `json:"userIds,omitempty" xml:"userIds,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetInnerGroupMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInnerGroupMembersResponseBody) GoString() string {
	return s.String()
}

func (s *GetInnerGroupMembersResponseBody) SetHasMore(v bool) *GetInnerGroupMembersResponseBody {
	s.HasMore = &v
	return s
}

func (s *GetInnerGroupMembersResponseBody) SetNextToken(v string) *GetInnerGroupMembersResponseBody {
	s.NextToken = &v
	return s
}

func (s *GetInnerGroupMembersResponseBody) SetRequestId(v string) *GetInnerGroupMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInnerGroupMembersResponseBody) SetUserIds(v []*string) *GetInnerGroupMembersResponseBody {
	s.UserIds = v
	return s
}

func (s *GetInnerGroupMembersResponseBody) SetVendorRequestId(v string) *GetInnerGroupMembersResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetInnerGroupMembersResponseBody) SetVendorType(v string) *GetInnerGroupMembersResponseBody {
	s.VendorType = &v
	return s
}

type GetInnerGroupMembersResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInnerGroupMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInnerGroupMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInnerGroupMembersResponse) GoString() string {
	return s.String()
}

func (s *GetInnerGroupMembersResponse) SetHeaders(v map[string]*string) *GetInnerGroupMembersResponse {
	s.Headers = v
	return s
}

func (s *GetInnerGroupMembersResponse) SetStatusCode(v int32) *GetInnerGroupMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInnerGroupMembersResponse) SetBody(v *GetInnerGroupMembersResponseBody) *GetInnerGroupMembersResponse {
	s.Body = v
	return s
}

type GetInstanceByIdHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetInstanceByIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetInstanceByIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdHeaders) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdHeaders) SetCommonHeaders(v map[string]*string) *GetInstanceByIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstanceByIdHeaders) SetAccountContext(v *GetInstanceByIdHeadersAccountContext) *GetInstanceByIdHeaders {
	s.AccountContext = v
	return s
}

type GetInstanceByIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetInstanceByIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdHeadersAccountContext) SetAccountId(v string) *GetInstanceByIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetInstanceByIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetInstanceByIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetInstanceByIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstanceByIdShrinkHeaders) SetAccountContextShrink(v string) *GetInstanceByIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetInstanceByIdRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// f30233fb-72e1-xxx
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetInstanceByIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdRequest) SetAppType(v string) *GetInstanceByIdRequest {
	s.AppType = &v
	return s
}

func (s *GetInstanceByIdRequest) SetId(v string) *GetInstanceByIdRequest {
	s.Id = &v
	return s
}

func (s *GetInstanceByIdRequest) SetLanguage(v string) *GetInstanceByIdRequest {
	s.Language = &v
	return s
}

func (s *GetInstanceByIdRequest) SetSystemToken(v string) *GetInstanceByIdRequest {
	s.SystemToken = &v
	return s
}

type GetInstanceByIdResponseBody struct {
	ActionExecutor []*GetInstanceByIdResponseBodyActionExecutor `json:"actionExecutor,omitempty" xml:"actionExecutor,omitempty" type:"Repeated"`
	// example:
	//
	// agree
	ApprovedResult *string `json:"approvedResult,omitempty" xml:"approvedResult,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateTimeGMT *string                `json:"createTimeGMT,omitempty" xml:"createTimeGMT,omitempty"`
	Data          map[string]interface{} `json:"data,omitempty" xml:"data,omitempty"`
	// example:
	//
	// FORM-EF6Y4xxx
	FormUuid *string `json:"formUuid,omitempty" xml:"formUuid,omitempty"`
	// example:
	//
	// RUNNING
	InstanceStatus *string `json:"instanceStatus,omitempty" xml:"instanceStatus,omitempty"`
	// example:
	//
	// 2021-05-01
	ModifiedTimeGMT *string                                `json:"modifiedTimeGMT,omitempty" xml:"modifiedTimeGMT,omitempty"`
	Originator      *GetInstanceByIdResponseBodyOriginator `json:"originator,omitempty" xml:"originator,omitempty" type:"Struct"`
	// example:
	//
	// TPROC--X1Gxxx
	ProcessCode *string `json:"processCode,omitempty" xml:"processCode,omitempty"`
	// example:
	//
	// f30233fb-72e1-4xxx
	ProcessInstanceId *string `json:"processInstanceId,omitempty" xml:"processInstanceId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 李四发起的请购单
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
	// example:
	//
	// 1
	Version *int64 `json:"version,omitempty" xml:"version,omitempty"`
}

func (s GetInstanceByIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdResponseBody) SetActionExecutor(v []*GetInstanceByIdResponseBodyActionExecutor) *GetInstanceByIdResponseBody {
	s.ActionExecutor = v
	return s
}

func (s *GetInstanceByIdResponseBody) SetApprovedResult(v string) *GetInstanceByIdResponseBody {
	s.ApprovedResult = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetCreateTimeGMT(v string) *GetInstanceByIdResponseBody {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetData(v map[string]interface{}) *GetInstanceByIdResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceByIdResponseBody) SetFormUuid(v string) *GetInstanceByIdResponseBody {
	s.FormUuid = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetInstanceStatus(v string) *GetInstanceByIdResponseBody {
	s.InstanceStatus = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetModifiedTimeGMT(v string) *GetInstanceByIdResponseBody {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetOriginator(v *GetInstanceByIdResponseBodyOriginator) *GetInstanceByIdResponseBody {
	s.Originator = v
	return s
}

func (s *GetInstanceByIdResponseBody) SetProcessCode(v string) *GetInstanceByIdResponseBody {
	s.ProcessCode = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetProcessInstanceId(v string) *GetInstanceByIdResponseBody {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetRequestId(v string) *GetInstanceByIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetTitle(v string) *GetInstanceByIdResponseBody {
	s.Title = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetVendorRequestId(v string) *GetInstanceByIdResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetVendorType(v string) *GetInstanceByIdResponseBody {
	s.VendorType = &v
	return s
}

func (s *GetInstanceByIdResponseBody) SetVersion(v int64) *GetInstanceByIdResponseBody {
	s.Version = &v
	return s
}

type GetInstanceByIdResponseBodyActionExecutor struct {
	// example:
	//
	// 开发部
	DeptName *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string                                        `json:"Email,omitempty" xml:"Email,omitempty"`
	Name  *GetInstanceByIdResponseBodyActionExecutorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstanceByIdResponseBodyActionExecutor) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdResponseBodyActionExecutor) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdResponseBodyActionExecutor) SetDeptName(v string) *GetInstanceByIdResponseBodyActionExecutor {
	s.DeptName = &v
	return s
}

func (s *GetInstanceByIdResponseBodyActionExecutor) SetEmail(v string) *GetInstanceByIdResponseBodyActionExecutor {
	s.Email = &v
	return s
}

func (s *GetInstanceByIdResponseBodyActionExecutor) SetName(v *GetInstanceByIdResponseBodyActionExecutorName) *GetInstanceByIdResponseBodyActionExecutor {
	s.Name = v
	return s
}

func (s *GetInstanceByIdResponseBodyActionExecutor) SetUserId(v string) *GetInstanceByIdResponseBodyActionExecutor {
	s.UserId = &v
	return s
}

type GetInstanceByIdResponseBodyActionExecutorName struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetInstanceByIdResponseBodyActionExecutorName) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdResponseBodyActionExecutorName) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdResponseBodyActionExecutorName) SetNameInChinese(v string) *GetInstanceByIdResponseBodyActionExecutorName {
	s.NameInChinese = &v
	return s
}

func (s *GetInstanceByIdResponseBodyActionExecutorName) SetNameInEnglish(v string) *GetInstanceByIdResponseBodyActionExecutorName {
	s.NameInEnglish = &v
	return s
}

func (s *GetInstanceByIdResponseBodyActionExecutorName) SetType(v string) *GetInstanceByIdResponseBodyActionExecutorName {
	s.Type = &v
	return s
}

type GetInstanceByIdResponseBodyOriginator struct {
	// example:
	//
	// 开发部
	DeptName *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string                                    `json:"Email,omitempty" xml:"Email,omitempty"`
	Name  *GetInstanceByIdResponseBodyOriginatorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstanceByIdResponseBodyOriginator) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdResponseBodyOriginator) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdResponseBodyOriginator) SetDeptName(v string) *GetInstanceByIdResponseBodyOriginator {
	s.DeptName = &v
	return s
}

func (s *GetInstanceByIdResponseBodyOriginator) SetEmail(v string) *GetInstanceByIdResponseBodyOriginator {
	s.Email = &v
	return s
}

func (s *GetInstanceByIdResponseBodyOriginator) SetName(v *GetInstanceByIdResponseBodyOriginatorName) *GetInstanceByIdResponseBodyOriginator {
	s.Name = v
	return s
}

func (s *GetInstanceByIdResponseBodyOriginator) SetUserId(v string) *GetInstanceByIdResponseBodyOriginator {
	s.UserId = &v
	return s
}

type GetInstanceByIdResponseBodyOriginatorName struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetInstanceByIdResponseBodyOriginatorName) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdResponseBodyOriginatorName) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdResponseBodyOriginatorName) SetNameInChinese(v string) *GetInstanceByIdResponseBodyOriginatorName {
	s.NameInChinese = &v
	return s
}

func (s *GetInstanceByIdResponseBodyOriginatorName) SetNameInEnglish(v string) *GetInstanceByIdResponseBodyOriginatorName {
	s.NameInEnglish = &v
	return s
}

func (s *GetInstanceByIdResponseBodyOriginatorName) SetType(v string) *GetInstanceByIdResponseBodyOriginatorName {
	s.Type = &v
	return s
}

type GetInstanceByIdResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceByIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceByIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceByIdResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceByIdResponse) SetHeaders(v map[string]*string) *GetInstanceByIdResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceByIdResponse) SetStatusCode(v int32) *GetInstanceByIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceByIdResponse) SetBody(v *GetInstanceByIdResponseBody) *GetInstanceByIdResponse {
	s.Body = v
	return s
}

type GetInstanceIdListHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetInstanceIdListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetInstanceIdListHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceIdListHeaders) GoString() string {
	return s.String()
}

func (s *GetInstanceIdListHeaders) SetCommonHeaders(v map[string]*string) *GetInstanceIdListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstanceIdListHeaders) SetAccountContext(v *GetInstanceIdListHeadersAccountContext) *GetInstanceIdListHeaders {
	s.AccountContext = v
	return s
}

type GetInstanceIdListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetInstanceIdListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceIdListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetInstanceIdListHeadersAccountContext) SetAccountId(v string) *GetInstanceIdListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetInstanceIdListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetInstanceIdListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceIdListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetInstanceIdListShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetInstanceIdListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstanceIdListShrinkHeaders) SetAccountContextShrink(v string) *GetInstanceIdListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetInstanceIdListRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// agree
	ApprovedResult *string `json:"ApprovedResult,omitempty" xml:"ApprovedResult,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *string `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *string `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// FORM-EF6Yxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// RUNNING
	InstanceStatus *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 2021-05-01
	ModifiedFromTimeGMT *string `json:"ModifiedFromTimeGMT,omitempty" xml:"ModifiedFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-09-10
	ModifiedToTimeGMT *string `json:"ModifiedToTimeGMT,omitempty" xml:"ModifiedToTimeGMT,omitempty"`
	// example:
	//
	// 012345
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// {\\"textField\\":\\"123\\"}
	SearchFieldJson *string `json:"SearchFieldJson,omitempty" xml:"SearchFieldJson,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// 1045001
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetInstanceIdListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceIdListRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceIdListRequest) SetAppType(v string) *GetInstanceIdListRequest {
	s.AppType = &v
	return s
}

func (s *GetInstanceIdListRequest) SetApprovedResult(v string) *GetInstanceIdListRequest {
	s.ApprovedResult = &v
	return s
}

func (s *GetInstanceIdListRequest) SetCreateFromTimeGMT(v string) *GetInstanceIdListRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *GetInstanceIdListRequest) SetCreateToTimeGMT(v string) *GetInstanceIdListRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *GetInstanceIdListRequest) SetFormUuid(v string) *GetInstanceIdListRequest {
	s.FormUuid = &v
	return s
}

func (s *GetInstanceIdListRequest) SetInstanceStatus(v string) *GetInstanceIdListRequest {
	s.InstanceStatus = &v
	return s
}

func (s *GetInstanceIdListRequest) SetLanguage(v string) *GetInstanceIdListRequest {
	s.Language = &v
	return s
}

func (s *GetInstanceIdListRequest) SetModifiedFromTimeGMT(v string) *GetInstanceIdListRequest {
	s.ModifiedFromTimeGMT = &v
	return s
}

func (s *GetInstanceIdListRequest) SetModifiedToTimeGMT(v string) *GetInstanceIdListRequest {
	s.ModifiedToTimeGMT = &v
	return s
}

func (s *GetInstanceIdListRequest) SetOriginatorId(v string) *GetInstanceIdListRequest {
	s.OriginatorId = &v
	return s
}

func (s *GetInstanceIdListRequest) SetPageNumber(v int32) *GetInstanceIdListRequest {
	s.PageNumber = &v
	return s
}

func (s *GetInstanceIdListRequest) SetPageSize(v int32) *GetInstanceIdListRequest {
	s.PageSize = &v
	return s
}

func (s *GetInstanceIdListRequest) SetSearchFieldJson(v string) *GetInstanceIdListRequest {
	s.SearchFieldJson = &v
	return s
}

func (s *GetInstanceIdListRequest) SetSystemToken(v string) *GetInstanceIdListRequest {
	s.SystemToken = &v
	return s
}

func (s *GetInstanceIdListRequest) SetTaskId(v string) *GetInstanceIdListRequest {
	s.TaskId = &v
	return s
}

type GetInstanceIdListResponseBody struct {
	// example:
	//
	// [ "FINST-BOOxxx" ]
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetInstanceIdListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceIdListResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceIdListResponseBody) SetData(v []*string) *GetInstanceIdListResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceIdListResponseBody) SetPageNumber(v int64) *GetInstanceIdListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetInstanceIdListResponseBody) SetRequestId(v string) *GetInstanceIdListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceIdListResponseBody) SetTotalCount(v int64) *GetInstanceIdListResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetInstanceIdListResponseBody) SetVendorRequestId(v string) *GetInstanceIdListResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetInstanceIdListResponseBody) SetVendorType(v string) *GetInstanceIdListResponseBody {
	s.VendorType = &v
	return s
}

type GetInstanceIdListResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstanceIdListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstanceIdListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceIdListResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceIdListResponse) SetHeaders(v map[string]*string) *GetInstanceIdListResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceIdListResponse) SetStatusCode(v int32) *GetInstanceIdListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceIdListResponse) SetBody(v *GetInstanceIdListResponseBody) *GetInstanceIdListResponse {
	s.Body = v
	return s
}

type GetInstancesHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetInstancesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetInstancesHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesHeaders) GoString() string {
	return s.String()
}

func (s *GetInstancesHeaders) SetCommonHeaders(v map[string]*string) *GetInstancesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstancesHeaders) SetAccountContext(v *GetInstancesHeadersAccountContext) *GetInstancesHeaders {
	s.AccountContext = v
	return s
}

type GetInstancesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetInstancesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetInstancesHeadersAccountContext) SetAccountId(v string) *GetInstancesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetInstancesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetInstancesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetInstancesShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetInstancesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstancesShrinkHeaders) SetAccountContextShrink(v string) *GetInstancesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetInstancesRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// agree
	ApprovedResult *string `json:"ApprovedResult,omitempty" xml:"ApprovedResult,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *string `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *string `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// FORM-EF6Yxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// RUNNING
	InstanceStatus *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 2021-05-01
	ModifiedFromTimeGMT *string `json:"ModifiedFromTimeGMT,omitempty" xml:"ModifiedFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-09-10
	ModifiedToTimeGMT *string `json:"ModifiedToTimeGMT,omitempty" xml:"ModifiedToTimeGMT,omitempty"`
	// example:
	//
	// {}
	OrderConfigJson *string `json:"OrderConfigJson,omitempty" xml:"OrderConfigJson,omitempty"`
	// example:
	//
	// 012345
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// {\\"textField\\":\\"123\\"}
	SearchFieldJson *string `json:"SearchFieldJson,omitempty" xml:"SearchFieldJson,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// 1045001
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesRequest) GoString() string {
	return s.String()
}

func (s *GetInstancesRequest) SetAppType(v string) *GetInstancesRequest {
	s.AppType = &v
	return s
}

func (s *GetInstancesRequest) SetApprovedResult(v string) *GetInstancesRequest {
	s.ApprovedResult = &v
	return s
}

func (s *GetInstancesRequest) SetCreateFromTimeGMT(v string) *GetInstancesRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *GetInstancesRequest) SetCreateToTimeGMT(v string) *GetInstancesRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *GetInstancesRequest) SetFormUuid(v string) *GetInstancesRequest {
	s.FormUuid = &v
	return s
}

func (s *GetInstancesRequest) SetInstanceStatus(v string) *GetInstancesRequest {
	s.InstanceStatus = &v
	return s
}

func (s *GetInstancesRequest) SetLanguage(v string) *GetInstancesRequest {
	s.Language = &v
	return s
}

func (s *GetInstancesRequest) SetModifiedFromTimeGMT(v string) *GetInstancesRequest {
	s.ModifiedFromTimeGMT = &v
	return s
}

func (s *GetInstancesRequest) SetModifiedToTimeGMT(v string) *GetInstancesRequest {
	s.ModifiedToTimeGMT = &v
	return s
}

func (s *GetInstancesRequest) SetOrderConfigJson(v string) *GetInstancesRequest {
	s.OrderConfigJson = &v
	return s
}

func (s *GetInstancesRequest) SetOriginatorId(v string) *GetInstancesRequest {
	s.OriginatorId = &v
	return s
}

func (s *GetInstancesRequest) SetPageNumber(v int32) *GetInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *GetInstancesRequest) SetPageSize(v int32) *GetInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *GetInstancesRequest) SetSearchFieldJson(v string) *GetInstancesRequest {
	s.SearchFieldJson = &v
	return s
}

func (s *GetInstancesRequest) SetSystemToken(v string) *GetInstancesRequest {
	s.SystemToken = &v
	return s
}

func (s *GetInstancesRequest) SetTaskId(v string) *GetInstancesRequest {
	s.TaskId = &v
	return s
}

type GetInstancesResponseBody struct {
	Data []*GetInstancesResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstancesResponseBody) SetData(v []*GetInstancesResponseBodyData) *GetInstancesResponseBody {
	s.Data = v
	return s
}

func (s *GetInstancesResponseBody) SetPageNumber(v int64) *GetInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetInstancesResponseBody) SetRequestId(v string) *GetInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstancesResponseBody) SetTotalCount(v int64) *GetInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetInstancesResponseBody) SetVendorRequestId(v string) *GetInstancesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetInstancesResponseBody) SetVendorType(v string) *GetInstancesResponseBody {
	s.VendorType = &v
	return s
}

type GetInstancesResponseBodyData struct {
	ActionExecutor []*GetInstancesResponseBodyDataActionExecutor `json:"ActionExecutor,omitempty" xml:"ActionExecutor,omitempty" type:"Repeated"`
	// example:
	//
	// agree
	ApprovedResult *string `json:"ApprovedResult,omitempty" xml:"ApprovedResult,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateTimeGMT *string                `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	Data          map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// RUNNING
	InstanceStatus *string `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	// example:
	//
	// 2021-05-01
	ModifiedTimeGMT *string                                 `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
	Originator      *GetInstancesResponseBodyDataOriginator `json:"Originator,omitempty" xml:"Originator,omitempty" type:"Struct"`
	// example:
	//
	// TPROC--X1Gxxx
	ProcessCode *string `json:"ProcessCode,omitempty" xml:"ProcessCode,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// 小红发起的请购单
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1.0
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetInstancesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstancesResponseBodyData) SetActionExecutor(v []*GetInstancesResponseBodyDataActionExecutor) *GetInstancesResponseBodyData {
	s.ActionExecutor = v
	return s
}

func (s *GetInstancesResponseBodyData) SetApprovedResult(v string) *GetInstancesResponseBodyData {
	s.ApprovedResult = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetCreateTimeGMT(v string) *GetInstancesResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetData(v map[string]interface{}) *GetInstancesResponseBodyData {
	s.Data = v
	return s
}

func (s *GetInstancesResponseBodyData) SetFormUuid(v string) *GetInstancesResponseBodyData {
	s.FormUuid = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetInstanceStatus(v string) *GetInstancesResponseBodyData {
	s.InstanceStatus = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetModifiedTimeGMT(v string) *GetInstancesResponseBodyData {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetOriginator(v *GetInstancesResponseBodyDataOriginator) *GetInstancesResponseBodyData {
	s.Originator = v
	return s
}

func (s *GetInstancesResponseBodyData) SetProcessCode(v string) *GetInstancesResponseBodyData {
	s.ProcessCode = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetProcessInstanceId(v string) *GetInstancesResponseBodyData {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetTitle(v string) *GetInstancesResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetInstancesResponseBodyData) SetVersion(v int64) *GetInstancesResponseBodyData {
	s.Version = &v
	return s
}

type GetInstancesResponseBodyDataActionExecutor struct {
	// example:
	//
	// 开发部
	DeptName *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string                                         `json:"Email,omitempty" xml:"Email,omitempty"`
	Name  *GetInstancesResponseBodyDataActionExecutorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstancesResponseBodyDataActionExecutor) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesResponseBodyDataActionExecutor) GoString() string {
	return s.String()
}

func (s *GetInstancesResponseBodyDataActionExecutor) SetDeptName(v string) *GetInstancesResponseBodyDataActionExecutor {
	s.DeptName = &v
	return s
}

func (s *GetInstancesResponseBodyDataActionExecutor) SetEmail(v string) *GetInstancesResponseBodyDataActionExecutor {
	s.Email = &v
	return s
}

func (s *GetInstancesResponseBodyDataActionExecutor) SetName(v *GetInstancesResponseBodyDataActionExecutorName) *GetInstancesResponseBodyDataActionExecutor {
	s.Name = v
	return s
}

func (s *GetInstancesResponseBodyDataActionExecutor) SetUserId(v string) *GetInstancesResponseBodyDataActionExecutor {
	s.UserId = &v
	return s
}

type GetInstancesResponseBodyDataActionExecutorName struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetInstancesResponseBodyDataActionExecutorName) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesResponseBodyDataActionExecutorName) GoString() string {
	return s.String()
}

func (s *GetInstancesResponseBodyDataActionExecutorName) SetNameInChinese(v string) *GetInstancesResponseBodyDataActionExecutorName {
	s.NameInChinese = &v
	return s
}

func (s *GetInstancesResponseBodyDataActionExecutorName) SetNameInEnglish(v string) *GetInstancesResponseBodyDataActionExecutorName {
	s.NameInEnglish = &v
	return s
}

func (s *GetInstancesResponseBodyDataActionExecutorName) SetType(v string) *GetInstancesResponseBodyDataActionExecutorName {
	s.Type = &v
	return s
}

type GetInstancesResponseBodyDataOriginator struct {
	// example:
	//
	// 开发部
	DeptName *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string                                     `json:"Email,omitempty" xml:"Email,omitempty"`
	Name  *GetInstancesResponseBodyDataOriginatorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstancesResponseBodyDataOriginator) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesResponseBodyDataOriginator) GoString() string {
	return s.String()
}

func (s *GetInstancesResponseBodyDataOriginator) SetDeptName(v string) *GetInstancesResponseBodyDataOriginator {
	s.DeptName = &v
	return s
}

func (s *GetInstancesResponseBodyDataOriginator) SetEmail(v string) *GetInstancesResponseBodyDataOriginator {
	s.Email = &v
	return s
}

func (s *GetInstancesResponseBodyDataOriginator) SetName(v *GetInstancesResponseBodyDataOriginatorName) *GetInstancesResponseBodyDataOriginator {
	s.Name = v
	return s
}

func (s *GetInstancesResponseBodyDataOriginator) SetUserId(v string) *GetInstancesResponseBodyDataOriginator {
	s.UserId = &v
	return s
}

type GetInstancesResponseBodyDataOriginatorName struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetInstancesResponseBodyDataOriginatorName) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesResponseBodyDataOriginatorName) GoString() string {
	return s.String()
}

func (s *GetInstancesResponseBodyDataOriginatorName) SetNameInChinese(v string) *GetInstancesResponseBodyDataOriginatorName {
	s.NameInChinese = &v
	return s
}

func (s *GetInstancesResponseBodyDataOriginatorName) SetNameInEnglish(v string) *GetInstancesResponseBodyDataOriginatorName {
	s.NameInEnglish = &v
	return s
}

func (s *GetInstancesResponseBodyDataOriginatorName) SetType(v string) *GetInstancesResponseBodyDataOriginatorName {
	s.Type = &v
	return s
}

type GetInstancesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesResponse) GoString() string {
	return s.String()
}

func (s *GetInstancesResponse) SetHeaders(v map[string]*string) *GetInstancesResponse {
	s.Headers = v
	return s
}

func (s *GetInstancesResponse) SetStatusCode(v int32) *GetInstancesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstancesResponse) SetBody(v *GetInstancesResponseBody) *GetInstancesResponse {
	s.Body = v
	return s
}

type GetInstancesByIdListHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetInstancesByIdListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetInstancesByIdListHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListHeaders) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListHeaders) SetCommonHeaders(v map[string]*string) *GetInstancesByIdListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstancesByIdListHeaders) SetAccountContext(v *GetInstancesByIdListHeadersAccountContext) *GetInstancesByIdListHeaders {
	s.AccountContext = v
	return s
}

type GetInstancesByIdListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetInstancesByIdListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListHeadersAccountContext) SetAccountId(v string) *GetInstancesByIdListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetInstancesByIdListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetInstancesByIdListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetInstancesByIdListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetInstancesByIdListShrinkHeaders) SetAccountContextShrink(v string) *GetInstancesByIdListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetInstancesByIdListRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// inst-123,inst-223
	ProcessInstanceIds *string `json:"ProcessInstanceIds,omitempty" xml:"ProcessInstanceIds,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetInstancesByIdListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListRequest) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListRequest) SetAppType(v string) *GetInstancesByIdListRequest {
	s.AppType = &v
	return s
}

func (s *GetInstancesByIdListRequest) SetLanguage(v string) *GetInstancesByIdListRequest {
	s.Language = &v
	return s
}

func (s *GetInstancesByIdListRequest) SetProcessInstanceIds(v string) *GetInstancesByIdListRequest {
	s.ProcessInstanceIds = &v
	return s
}

func (s *GetInstancesByIdListRequest) SetSystemToken(v string) *GetInstancesByIdListRequest {
	s.SystemToken = &v
	return s
}

type GetInstancesByIdListResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*GetInstancesByIdListResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetInstancesByIdListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListResponseBody) SetRequestId(v string) *GetInstancesByIdListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstancesByIdListResponseBody) SetResult(v []*GetInstancesByIdListResponseBodyResult) *GetInstancesByIdListResponseBody {
	s.Result = v
	return s
}

func (s *GetInstancesByIdListResponseBody) SetVendorRequestId(v string) *GetInstancesByIdListResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetInstancesByIdListResponseBody) SetVendorType(v string) *GetInstancesByIdListResponseBody {
	s.VendorType = &v
	return s
}

type GetInstancesByIdListResponseBodyResult struct {
	ActionExecutor []*GetInstancesByIdListResponseBodyResultActionExecutor `json:"ActionExecutor,omitempty" xml:"ActionExecutor,omitempty" type:"Repeated"`
	// example:
	//
	// agree
	ApprovedResult *string                `json:"ApprovedResult,omitempty" xml:"ApprovedResult,omitempty"`
	Data           map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// RUNNING
	InstanceStatus *string                                           `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	Originator     *GetInstancesByIdListResponseBodyResultOriginator `json:"Originator,omitempty" xml:"Originator,omitempty" type:"Struct"`
	// example:
	//
	// TPROC--X1Gxxx
	ProcessCode *string `json:"ProcessCode,omitempty" xml:"ProcessCode,omitempty"`
	// example:
	//
	// f30233fb-72e1-4xxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// 李四发起的请购单
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetInstancesByIdListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListResponseBodyResult) SetActionExecutor(v []*GetInstancesByIdListResponseBodyResultActionExecutor) *GetInstancesByIdListResponseBodyResult {
	s.ActionExecutor = v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetApprovedResult(v string) *GetInstancesByIdListResponseBodyResult {
	s.ApprovedResult = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetData(v map[string]interface{}) *GetInstancesByIdListResponseBodyResult {
	s.Data = v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetFormUuid(v string) *GetInstancesByIdListResponseBodyResult {
	s.FormUuid = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetInstanceStatus(v string) *GetInstancesByIdListResponseBodyResult {
	s.InstanceStatus = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetOriginator(v *GetInstancesByIdListResponseBodyResultOriginator) *GetInstancesByIdListResponseBodyResult {
	s.Originator = v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetProcessCode(v string) *GetInstancesByIdListResponseBodyResult {
	s.ProcessCode = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetProcessInstanceId(v string) *GetInstancesByIdListResponseBodyResult {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResult) SetTitle(v string) *GetInstancesByIdListResponseBodyResult {
	s.Title = &v
	return s
}

type GetInstancesByIdListResponseBodyResultActionExecutor struct {
	// example:
	//
	// 开发部
	DepartmentName *string `json:"DepartmentName,omitempty" xml:"DepartmentName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string                                                   `json:"Email,omitempty" xml:"Email,omitempty"`
	Name  *GetInstancesByIdListResponseBodyResultActionExecutorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstancesByIdListResponseBodyResultActionExecutor) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListResponseBodyResultActionExecutor) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListResponseBodyResultActionExecutor) SetDepartmentName(v string) *GetInstancesByIdListResponseBodyResultActionExecutor {
	s.DepartmentName = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultActionExecutor) SetEmail(v string) *GetInstancesByIdListResponseBodyResultActionExecutor {
	s.Email = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultActionExecutor) SetName(v *GetInstancesByIdListResponseBodyResultActionExecutorName) *GetInstancesByIdListResponseBodyResultActionExecutor {
	s.Name = v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultActionExecutor) SetUserId(v string) *GetInstancesByIdListResponseBodyResultActionExecutor {
	s.UserId = &v
	return s
}

type GetInstancesByIdListResponseBodyResultActionExecutorName struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetInstancesByIdListResponseBodyResultActionExecutorName) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListResponseBodyResultActionExecutorName) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListResponseBodyResultActionExecutorName) SetNameInChinese(v string) *GetInstancesByIdListResponseBodyResultActionExecutorName {
	s.NameInChinese = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultActionExecutorName) SetNameInEnglish(v string) *GetInstancesByIdListResponseBodyResultActionExecutorName {
	s.NameInEnglish = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultActionExecutorName) SetType(v string) *GetInstancesByIdListResponseBodyResultActionExecutorName {
	s.Type = &v
	return s
}

type GetInstancesByIdListResponseBodyResultOriginator struct {
	// example:
	//
	// 开发部
	DepartmentName *string `json:"DepartmentName,omitempty" xml:"DepartmentName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string                                               `json:"Email,omitempty" xml:"Email,omitempty"`
	Name  *GetInstancesByIdListResponseBodyResultOriginatorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetInstancesByIdListResponseBodyResultOriginator) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListResponseBodyResultOriginator) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListResponseBodyResultOriginator) SetDepartmentName(v string) *GetInstancesByIdListResponseBodyResultOriginator {
	s.DepartmentName = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultOriginator) SetEmail(v string) *GetInstancesByIdListResponseBodyResultOriginator {
	s.Email = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultOriginator) SetName(v *GetInstancesByIdListResponseBodyResultOriginatorName) *GetInstancesByIdListResponseBodyResultOriginator {
	s.Name = v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultOriginator) SetUserId(v string) *GetInstancesByIdListResponseBodyResultOriginator {
	s.UserId = &v
	return s
}

type GetInstancesByIdListResponseBodyResultOriginatorName struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetInstancesByIdListResponseBodyResultOriginatorName) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListResponseBodyResultOriginatorName) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListResponseBodyResultOriginatorName) SetNameInChinese(v string) *GetInstancesByIdListResponseBodyResultOriginatorName {
	s.NameInChinese = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultOriginatorName) SetNameInEnglish(v string) *GetInstancesByIdListResponseBodyResultOriginatorName {
	s.NameInEnglish = &v
	return s
}

func (s *GetInstancesByIdListResponseBodyResultOriginatorName) SetType(v string) *GetInstancesByIdListResponseBodyResultOriginatorName {
	s.Type = &v
	return s
}

type GetInstancesByIdListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetInstancesByIdListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetInstancesByIdListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstancesByIdListResponse) GoString() string {
	return s.String()
}

func (s *GetInstancesByIdListResponse) SetHeaders(v map[string]*string) *GetInstancesByIdListResponse {
	s.Headers = v
	return s
}

func (s *GetInstancesByIdListResponse) SetStatusCode(v int32) *GetInstancesByIdListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstancesByIdListResponse) SetBody(v *GetInstancesByIdListResponseBody) *GetInstancesByIdListResponse {
	s.Body = v
	return s
}

type GetLiveReplayUrlHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetLiveReplayUrlHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetLiveReplayUrlHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlHeaders) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlHeaders) SetCommonHeaders(v map[string]*string) *GetLiveReplayUrlHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetLiveReplayUrlHeaders) SetAccountContext(v *GetLiveReplayUrlHeadersAccountContext) *GetLiveReplayUrlHeaders {
	s.AccountContext = v
	return s
}

type GetLiveReplayUrlHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetLiveReplayUrlHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlHeadersAccountContext) SetAccountId(v string) *GetLiveReplayUrlHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetLiveReplayUrlShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetLiveReplayUrlShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetLiveReplayUrlShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetLiveReplayUrlShrinkHeaders) SetAccountContextShrink(v string) *GetLiveReplayUrlShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetLiveReplayUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId        *string                               `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContext *GetLiveReplayUrlRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetLiveReplayUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlRequest) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlRequest) SetLiveId(v string) *GetLiveReplayUrlRequest {
	s.LiveId = &v
	return s
}

func (s *GetLiveReplayUrlRequest) SetTenantContext(v *GetLiveReplayUrlRequestTenantContext) *GetLiveReplayUrlRequest {
	s.TenantContext = v
	return s
}

type GetLiveReplayUrlRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetLiveReplayUrlRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlRequestTenantContext) SetTenantId(v string) *GetLiveReplayUrlRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetLiveReplayUrlShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId              *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetLiveReplayUrlShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlShrinkRequest) SetLiveId(v string) *GetLiveReplayUrlShrinkRequest {
	s.LiveId = &v
	return s
}

func (s *GetLiveReplayUrlShrinkRequest) SetTenantContextShrink(v string) *GetLiveReplayUrlShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetLiveReplayUrlResponseBody struct {
	// example:
	//
	// https://xxxxxxxx
	ReplayUrl *string `json:"replayUrl,omitempty" xml:"replayUrl,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetLiveReplayUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlResponseBody) SetReplayUrl(v string) *GetLiveReplayUrlResponseBody {
	s.ReplayUrl = &v
	return s
}

func (s *GetLiveReplayUrlResponseBody) SetRequestId(v string) *GetLiveReplayUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveReplayUrlResponseBody) SetVendorRequestId(v string) *GetLiveReplayUrlResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetLiveReplayUrlResponseBody) SetVendorType(v string) *GetLiveReplayUrlResponseBody {
	s.VendorType = &v
	return s
}

type GetLiveReplayUrlResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveReplayUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveReplayUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveReplayUrlResponse) GoString() string {
	return s.String()
}

func (s *GetLiveReplayUrlResponse) SetHeaders(v map[string]*string) *GetLiveReplayUrlResponse {
	s.Headers = v
	return s
}

func (s *GetLiveReplayUrlResponse) SetStatusCode(v int32) *GetLiveReplayUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveReplayUrlResponse) SetBody(v *GetLiveReplayUrlResponseBody) *GetLiveReplayUrlResponse {
	s.Body = v
	return s
}

type GetMeCorpSubmissionHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetMeCorpSubmissionHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetMeCorpSubmissionHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionHeaders) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionHeaders) SetCommonHeaders(v map[string]*string) *GetMeCorpSubmissionHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMeCorpSubmissionHeaders) SetAccountContext(v *GetMeCorpSubmissionHeadersAccountContext) *GetMeCorpSubmissionHeaders {
	s.AccountContext = v
	return s
}

type GetMeCorpSubmissionHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetMeCorpSubmissionHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionHeadersAccountContext) SetAccountId(v string) *GetMeCorpSubmissionHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetMeCorpSubmissionShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetMeCorpSubmissionShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetMeCorpSubmissionShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMeCorpSubmissionShrinkHeaders) SetAccountContextShrink(v string) *GetMeCorpSubmissionShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetMeCorpSubmissionRequest struct {
	// example:
	//
	// [\\"APP_xxx\\",\\"APP_xxx\\"]
	AppTypes *string `json:"AppTypes,omitempty" xml:"AppTypes,omitempty"`
	// example:
	//
	// ding123
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *int64 `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *int64 `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// {}
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// [\\"xx\\",\\"xxx\\"]
	ProcessCodes *string `json:"ProcessCodes,omitempty" xml:"ProcessCodes,omitempty"`
	// example:
	//
	// JHASD123HAXXX
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s GetMeCorpSubmissionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionRequest) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionRequest) SetAppTypes(v string) *GetMeCorpSubmissionRequest {
	s.AppTypes = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetCorpId(v string) *GetMeCorpSubmissionRequest {
	s.CorpId = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetCreateFromTimeGMT(v int64) *GetMeCorpSubmissionRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetCreateToTimeGMT(v int64) *GetMeCorpSubmissionRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetKeyword(v string) *GetMeCorpSubmissionRequest {
	s.Keyword = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetLanguage(v string) *GetMeCorpSubmissionRequest {
	s.Language = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetPageNumber(v int32) *GetMeCorpSubmissionRequest {
	s.PageNumber = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetPageSize(v int32) *GetMeCorpSubmissionRequest {
	s.PageSize = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetProcessCodes(v string) *GetMeCorpSubmissionRequest {
	s.ProcessCodes = &v
	return s
}

func (s *GetMeCorpSubmissionRequest) SetToken(v string) *GetMeCorpSubmissionRequest {
	s.Token = &v
	return s
}

type GetMeCorpSubmissionResponseBody struct {
	Data []*GetMeCorpSubmissionResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetMeCorpSubmissionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionResponseBody) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionResponseBody) SetData(v []*GetMeCorpSubmissionResponseBodyData) *GetMeCorpSubmissionResponseBody {
	s.Data = v
	return s
}

func (s *GetMeCorpSubmissionResponseBody) SetPageNumber(v int64) *GetMeCorpSubmissionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBody) SetRequestId(v string) *GetMeCorpSubmissionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBody) SetTotalCount(v int64) *GetMeCorpSubmissionResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBody) SetVendorRequestId(v string) *GetMeCorpSubmissionResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBody) SetVendorType(v string) *GetMeCorpSubmissionResponseBody {
	s.VendorType = &v
	return s
}

type GetMeCorpSubmissionResponseBodyData struct {
	Actioner     []*GetMeCorpSubmissionResponseBodyDataActioner `json:"Actioner,omitempty" xml:"Actioner,omitempty" type:"Repeated"`
	ActionerId   []*string                                      `json:"ActionerId,omitempty" xml:"ActionerId,omitempty" type:"Repeated"`
	ActionerName []*string                                      `json:"ActionerName,omitempty" xml:"ActionerName,omitempty" type:"Repeated"`
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 2021-01-01
	CreateTimeGMT            *string                                                        `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	CurrentActivityInstances []*GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances `json:"CurrentActivityInstances,omitempty" xml:"CurrentActivityInstances,omitempty" type:"Repeated"`
	DataMap                  map[string]interface{}                                         `json:"DataMap,omitempty" xml:"DataMap,omitempty"`
	// example:
	//
	// edit
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// example:
	//
	// 2021-01-01
	FinishTimeGMT *string `json:"FinishTimeGMT,omitempty" xml:"FinishTimeGMT,omitempty"`
	// example:
	//
	// FINST-NJYJxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// FORM-EF6xxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// 符合宜搭表单实例格式的json数据
	InstanceValue *string `json:"InstanceValue,omitempty" xml:"InstanceValue,omitempty"`
	// example:
	//
	// 2021-01-01
	ModifiedTimeGMT *string `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
	// example:
	//
	// zhangsan@mediaId
	OriginatorAvatar *string `json:"OriginatorAvatar,omitempty" xml:"OriginatorAvatar,omitempty"`
	// example:
	//
	// 张三
	OriginatorDisplayName *string `json:"OriginatorDisplayName,omitempty" xml:"OriginatorDisplayName,omitempty"`
	// example:
	//
	// manager123
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 同意
	ProcessApprovedResult *string `json:"ProcessApprovedResult,omitempty" xml:"ProcessApprovedResult,omitempty"`
	// example:
	//
	// 通过
	ProcessApprovedResultText *string `json:"ProcessApprovedResultText,omitempty" xml:"ProcessApprovedResultText,omitempty"`
	// example:
	//
	// TPROC--X1Gxxx
	ProcessCode *string `json:"ProcessCode,omitempty" xml:"ProcessCode,omitempty"`
	// example:
	//
	// 52330
	ProcessId *int64 `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
	// example:
	//
	// f30233fb-72e1-xxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// finished
	ProcessInstanceStatus *string `json:"ProcessInstanceStatus,omitempty" xml:"ProcessInstanceStatus,omitempty"`
	// example:
	//
	// 已同意
	ProcessInstanceStatusText *string `json:"ProcessInstanceStatusText,omitempty" xml:"ProcessInstanceStatusText,omitempty"`
	// example:
	//
	// 小红的单子
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// example:
	//
	// 小红发起的请购单
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetMeCorpSubmissionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionResponseBodyData) SetActioner(v []*GetMeCorpSubmissionResponseBodyDataActioner) *GetMeCorpSubmissionResponseBodyData {
	s.Actioner = v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetActionerId(v []*string) *GetMeCorpSubmissionResponseBodyData {
	s.ActionerId = v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetActionerName(v []*string) *GetMeCorpSubmissionResponseBodyData {
	s.ActionerName = v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetAppType(v string) *GetMeCorpSubmissionResponseBodyData {
	s.AppType = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetCreateTimeGMT(v string) *GetMeCorpSubmissionResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetCurrentActivityInstances(v []*GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) *GetMeCorpSubmissionResponseBodyData {
	s.CurrentActivityInstances = v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetDataMap(v map[string]interface{}) *GetMeCorpSubmissionResponseBodyData {
	s.DataMap = v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetDataType(v string) *GetMeCorpSubmissionResponseBodyData {
	s.DataType = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetFinishTimeGMT(v string) *GetMeCorpSubmissionResponseBodyData {
	s.FinishTimeGMT = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetFormInstanceId(v string) *GetMeCorpSubmissionResponseBodyData {
	s.FormInstanceId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetFormUuid(v string) *GetMeCorpSubmissionResponseBodyData {
	s.FormUuid = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetInstanceValue(v string) *GetMeCorpSubmissionResponseBodyData {
	s.InstanceValue = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetModifiedTimeGMT(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetOriginatorAvatar(v string) *GetMeCorpSubmissionResponseBodyData {
	s.OriginatorAvatar = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetOriginatorDisplayName(v string) *GetMeCorpSubmissionResponseBodyData {
	s.OriginatorDisplayName = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetOriginatorId(v string) *GetMeCorpSubmissionResponseBodyData {
	s.OriginatorId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessApprovedResult(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessApprovedResult = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessApprovedResultText(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessApprovedResultText = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessCode(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessCode = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessId(v int64) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessInstanceId(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessInstanceStatus(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessInstanceStatus = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessInstanceStatusText(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessInstanceStatusText = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetProcessName(v string) *GetMeCorpSubmissionResponseBodyData {
	s.ProcessName = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetTitle(v string) *GetMeCorpSubmissionResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyData) SetVersion(v int64) *GetMeCorpSubmissionResponseBodyData {
	s.Version = &v
	return s
}

type GetMeCorpSubmissionResponseBodyDataActioner struct {
	// example:
	//
	// 某研究部
	BuName *string `json:"BuName,omitempty" xml:"BuName,omitempty"`
	// example:
	//
	// abc@alimail.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 正式
	EmployeeType *string `json:"EmployeeType,omitempty" xml:"EmployeeType,omitempty"`
	// example:
	//
	// official
	EmployeeTypeInformation *string `json:"EmployeeTypeInformation,omitempty" xml:"EmployeeTypeInformation,omitempty"`
	// example:
	//
	// 123311221
	HumanResourceGroupWorkNumber *string `json:"HumanResourceGroupWorkNumber,omitempty" xml:"HumanResourceGroupWorkNumber,omitempty"`
	// example:
	//
	// true
	IsSystemAdmin *bool `json:"IsSystemAdmin,omitempty" xml:"IsSystemAdmin,omitempty"`
	// example:
	//
	// P7
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 请购单
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 与心
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// example:
	//
	// o-YDJKINSxxx
	OrderNumber *string `json:"OrderNumber,omitempty" xml:"OrderNumber,omitempty"`
	// example:
	//
	// https://abc.com/a.png
	PersonalPhoto *string `json:"PersonalPhoto,omitempty" xml:"PersonalPhoto,omitempty"`
	// example:
	//
	// https://oss/zhangsan.png
	PersonalPhotoUrl *string `json:"PersonalPhotoUrl,omitempty" xml:"PersonalPhotoUrl,omitempty"`
	// example:
	//
	// XIAOHONG
	PinyinNameAll *string `json:"PinyinNameAll,omitempty" xml:"PinyinNameAll,omitempty"`
	// example:
	//
	// xiaohong
	PinyinNickName *string `json:"PinyinNickName,omitempty" xml:"PinyinNickName,omitempty"`
	// example:
	//
	// running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// manager123
	SuperUserId *string `json:"SuperUserId,omitempty" xml:"SuperUserId,omitempty"`
	// example:
	//
	// wang123
	TbWang *string `json:"TbWang,omitempty" xml:"TbWang,omitempty"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetMeCorpSubmissionResponseBodyDataActioner) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionResponseBodyDataActioner) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetBuName(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.BuName = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetEmail(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.Email = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetEmployeeType(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.EmployeeType = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetEmployeeTypeInformation(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.EmployeeTypeInformation = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetHumanResourceGroupWorkNumber(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.HumanResourceGroupWorkNumber = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetIsSystemAdmin(v bool) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.IsSystemAdmin = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetLevel(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.Level = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetName(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.Name = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetNickName(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.NickName = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetOrderNumber(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.OrderNumber = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetPersonalPhoto(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.PersonalPhoto = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetPersonalPhotoUrl(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.PersonalPhotoUrl = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetPinyinNameAll(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.PinyinNameAll = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetPinyinNickName(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.PinyinNickName = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetState(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.State = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetSuperUserId(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.SuperUserId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetTbWang(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.TbWang = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataActioner) SetUserId(v string) *GetMeCorpSubmissionResponseBodyDataActioner {
	s.UserId = &v
	return s
}

type GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances struct {
	// example:
	//
	// act-xxaanfaf
	ActivityId *string `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	// example:
	//
	// running
	ActivityInstanceStatus *string `json:"ActivityInstanceStatus,omitempty" xml:"ActivityInstanceStatus,omitempty"`
	// example:
	//
	// activity-124
	ActivityName *string `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	// example:
	//
	// redirect task
	ActivityNameEn *string `json:"ActivityNameEn,omitempty" xml:"ActivityNameEn,omitempty"`
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) SetActivityId(v string) *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances {
	s.ActivityId = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) SetActivityInstanceStatus(v string) *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances {
	s.ActivityInstanceStatus = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) SetActivityName(v string) *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances {
	s.ActivityName = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) SetActivityNameEn(v string) *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances {
	s.ActivityNameEn = &v
	return s
}

func (s *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances) SetId(v int64) *GetMeCorpSubmissionResponseBodyDataCurrentActivityInstances {
	s.Id = &v
	return s
}

type GetMeCorpSubmissionResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMeCorpSubmissionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMeCorpSubmissionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMeCorpSubmissionResponse) GoString() string {
	return s.String()
}

func (s *GetMeCorpSubmissionResponse) SetHeaders(v map[string]*string) *GetMeCorpSubmissionResponse {
	s.Headers = v
	return s
}

func (s *GetMeCorpSubmissionResponse) SetStatusCode(v int32) *GetMeCorpSubmissionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMeCorpSubmissionResponse) SetBody(v *GetMeCorpSubmissionResponseBody) *GetMeCorpSubmissionResponse {
	s.Body = v
	return s
}

type GetMeetingRoomsScheduleHeaders struct {
	CommonHeaders  map[string]*string                            `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetMeetingRoomsScheduleHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetMeetingRoomsScheduleHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleHeaders) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleHeaders) SetCommonHeaders(v map[string]*string) *GetMeetingRoomsScheduleHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMeetingRoomsScheduleHeaders) SetAccountContext(v *GetMeetingRoomsScheduleHeadersAccountContext) *GetMeetingRoomsScheduleHeaders {
	s.AccountContext = v
	return s
}

type GetMeetingRoomsScheduleHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetMeetingRoomsScheduleHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleHeadersAccountContext) SetAccountId(v string) *GetMeetingRoomsScheduleHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetMeetingRoomsScheduleShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetMeetingRoomsScheduleShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetMeetingRoomsScheduleShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMeetingRoomsScheduleShrinkHeaders) SetAccountContextShrink(v string) *GetMeetingRoomsScheduleShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetMeetingRoomsScheduleRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["4002xxxxx"]
	RoomIds []*string `json:"RoomIds,omitempty" xml:"RoomIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetMeetingRoomsScheduleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleRequest) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleRequest) SetEndTime(v string) *GetMeetingRoomsScheduleRequest {
	s.EndTime = &v
	return s
}

func (s *GetMeetingRoomsScheduleRequest) SetRoomIds(v []*string) *GetMeetingRoomsScheduleRequest {
	s.RoomIds = v
	return s
}

func (s *GetMeetingRoomsScheduleRequest) SetStartTime(v string) *GetMeetingRoomsScheduleRequest {
	s.StartTime = &v
	return s
}

type GetMeetingRoomsScheduleShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ["4002xxxxx"]
	RoomIdsShrink *string `json:"RoomIds,omitempty" xml:"RoomIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetMeetingRoomsScheduleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleShrinkRequest) SetEndTime(v string) *GetMeetingRoomsScheduleShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *GetMeetingRoomsScheduleShrinkRequest) SetRoomIdsShrink(v string) *GetMeetingRoomsScheduleShrinkRequest {
	s.RoomIdsShrink = &v
	return s
}

func (s *GetMeetingRoomsScheduleShrinkRequest) SetStartTime(v string) *GetMeetingRoomsScheduleShrinkRequest {
	s.StartTime = &v
	return s
}

type GetMeetingRoomsScheduleResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId           *string                                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ScheduleInformation []*GetMeetingRoomsScheduleResponseBodyScheduleInformation `json:"scheduleInformation,omitempty" xml:"scheduleInformation,omitempty" type:"Repeated"`
}

func (s GetMeetingRoomsScheduleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleResponseBody) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleResponseBody) SetRequestId(v string) *GetMeetingRoomsScheduleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBody) SetScheduleInformation(v []*GetMeetingRoomsScheduleResponseBodyScheduleInformation) *GetMeetingRoomsScheduleResponseBody {
	s.ScheduleInformation = v
	return s
}

type GetMeetingRoomsScheduleResponseBodyScheduleInformation struct {
	// example:
	//
	// 无权限
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// example:
	//
	// 4002f89xxxxx
	RoomId        *string                                                                `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	ScheduleItems []*GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems `json:"ScheduleItems,omitempty" xml:"ScheduleItems,omitempty" type:"Repeated"`
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformation) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformation) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformation) SetError(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformation {
	s.Error = &v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformation) SetRoomId(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformation {
	s.RoomId = &v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformation) SetScheduleItems(v []*GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) *GetMeetingRoomsScheduleResponseBodyScheduleInformation {
	s.ScheduleItems = v
	return s
}

type GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems struct {
	End *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd `json:"End,omitempty" xml:"End,omitempty" type:"Struct"`
	// example:
	//
	// UzZvxxxxx
	EventId   *string                                                                       `json:"EventId,omitempty" xml:"EventId,omitempty"`
	Organizer *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer `json:"Organizer,omitempty" xml:"Organizer,omitempty" type:"Struct"`
	Start     *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart     `json:"Start,omitempty" xml:"Start,omitempty" type:"Struct"`
	// example:
	//
	// BUSY
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) SetEnd(v *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems {
	s.End = v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) SetEventId(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems {
	s.EventId = &v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) SetOrganizer(v *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems {
	s.Organizer = v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) SetStart(v *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems {
	s.Start = v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems) SetStatus(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItems {
	s.Status = &v
	return s
}

type GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd struct {
	// example:
	//
	// 2020-01-02T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd) SetDateTime(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd {
	s.DateTime = &v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd) SetTimeZone(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsEnd {
	s.TimeZone = &v
	return s
}

type GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer struct {
	// example:
	//
	// 012345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer) SetId(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsOrganizer {
	s.Id = &v
	return s
}

type GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart struct {
	// example:
	//
	// 2020-01-02T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart) SetDateTime(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart {
	s.DateTime = &v
	return s
}

func (s *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart) SetTimeZone(v string) *GetMeetingRoomsScheduleResponseBodyScheduleInformationScheduleItemsStart {
	s.TimeZone = &v
	return s
}

type GetMeetingRoomsScheduleResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMeetingRoomsScheduleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMeetingRoomsScheduleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMeetingRoomsScheduleResponse) GoString() string {
	return s.String()
}

func (s *GetMeetingRoomsScheduleResponse) SetHeaders(v map[string]*string) *GetMeetingRoomsScheduleResponse {
	s.Headers = v
	return s
}

func (s *GetMeetingRoomsScheduleResponse) SetStatusCode(v int32) *GetMeetingRoomsScheduleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMeetingRoomsScheduleResponse) SetBody(v *GetMeetingRoomsScheduleResponseBody) *GetMeetingRoomsScheduleResponse {
	s.Body = v
	return s
}

type GetMineWorkspaceHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetMineWorkspaceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetMineWorkspaceHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceHeaders) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceHeaders) SetCommonHeaders(v map[string]*string) *GetMineWorkspaceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMineWorkspaceHeaders) SetAccountContext(v *GetMineWorkspaceHeadersAccountContext) *GetMineWorkspaceHeaders {
	s.AccountContext = v
	return s
}

type GetMineWorkspaceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetMineWorkspaceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceHeadersAccountContext) SetAccountId(v string) *GetMineWorkspaceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetMineWorkspaceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetMineWorkspaceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetMineWorkspaceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMineWorkspaceShrinkHeaders) SetAccountContextShrink(v string) *GetMineWorkspaceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetMineWorkspaceRequest struct {
	Request       map[string]interface{}                `json:"Request,omitempty" xml:"Request,omitempty"`
	TenantContext *GetMineWorkspaceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetMineWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceRequest) SetRequest(v map[string]interface{}) *GetMineWorkspaceRequest {
	s.Request = v
	return s
}

func (s *GetMineWorkspaceRequest) SetTenantContext(v *GetMineWorkspaceRequestTenantContext) *GetMineWorkspaceRequest {
	s.TenantContext = v
	return s
}

type GetMineWorkspaceRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetMineWorkspaceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceRequestTenantContext) SetTenantId(v string) *GetMineWorkspaceRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetMineWorkspaceShrinkRequest struct {
	RequestShrink       *string `json:"Request,omitempty" xml:"Request,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetMineWorkspaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceShrinkRequest) SetRequestShrink(v string) *GetMineWorkspaceShrinkRequest {
	s.RequestShrink = &v
	return s
}

func (s *GetMineWorkspaceShrinkRequest) SetTenantContextShrink(v string) *GetMineWorkspaceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetMineWorkspaceResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Workspace *GetMineWorkspaceResponseBodyWorkspace `json:"workspace,omitempty" xml:"workspace,omitempty" type:"Struct"`
}

func (s GetMineWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceResponseBody) SetRequestId(v string) *GetMineWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMineWorkspaceResponseBody) SetWorkspace(v *GetMineWorkspaceResponseBodyWorkspace) *GetMineWorkspaceResponseBody {
	s.Workspace = v
	return s
}

type GetMineWorkspaceResponseBodyWorkspace struct {
	// example:
	//
	// ding16b241fd05********288
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// workspace_description
	Description *string                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	Icon        *GetMineWorkspaceResponseBodyWorkspaceIcon `json:"Icon,omitempty" xml:"Icon,omitempty" type:"Struct"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// workspace_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	RootNodeId *string `json:"RootNodeId,omitempty" xml:"RootNodeId,omitempty"`
	// example:
	//
	// lHiicjNFM2iSFYSdz2iPuI8ZwiEiE
	TeamId *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
	// example:
	//
	// TEAM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// workspace_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 9r09jSO3WARyxd8A
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetMineWorkspaceResponseBodyWorkspace) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceResponseBodyWorkspace) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetCorpId(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.CorpId = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetCover(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.Cover = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetCreateTime(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.CreateTime = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetCreatorId(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.CreatorId = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetDescription(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.Description = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetIcon(v *GetMineWorkspaceResponseBodyWorkspaceIcon) *GetMineWorkspaceResponseBodyWorkspace {
	s.Icon = v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetModifiedTime(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.ModifiedTime = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetModifierId(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.ModifierId = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetName(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.Name = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetPermissionRole(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.PermissionRole = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetRootNodeId(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.RootNodeId = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetTeamId(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.TeamId = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetType(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.Type = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetUrl(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.Url = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspace) SetWorkspaceId(v string) *GetMineWorkspaceResponseBodyWorkspace {
	s.WorkspaceId = &v
	return s
}

type GetMineWorkspaceResponseBodyWorkspaceIcon struct {
	// example:
	//
	// URL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetMineWorkspaceResponseBodyWorkspaceIcon) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceResponseBodyWorkspaceIcon) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceResponseBodyWorkspaceIcon) SetType(v string) *GetMineWorkspaceResponseBodyWorkspaceIcon {
	s.Type = &v
	return s
}

func (s *GetMineWorkspaceResponseBodyWorkspaceIcon) SetValue(v string) *GetMineWorkspaceResponseBodyWorkspaceIcon {
	s.Value = &v
	return s
}

type GetMineWorkspaceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMineWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMineWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMineWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetMineWorkspaceResponse) SetHeaders(v map[string]*string) *GetMineWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *GetMineWorkspaceResponse) SetStatusCode(v int32) *GetMineWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMineWorkspaceResponse) SetBody(v *GetMineWorkspaceResponseBody) *GetMineWorkspaceResponse {
	s.Body = v
	return s
}

type GetMultipartFileUploadInfosHeaders struct {
	CommonHeaders  map[string]*string                                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetMultipartFileUploadInfosHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetMultipartFileUploadInfosHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosHeaders) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosHeaders) SetCommonHeaders(v map[string]*string) *GetMultipartFileUploadInfosHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMultipartFileUploadInfosHeaders) SetAccountContext(v *GetMultipartFileUploadInfosHeadersAccountContext) *GetMultipartFileUploadInfosHeaders {
	s.AccountContext = v
	return s
}

type GetMultipartFileUploadInfosHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetMultipartFileUploadInfosHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosHeadersAccountContext) SetAccountId(v string) *GetMultipartFileUploadInfosHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetMultipartFileUploadInfosShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetMultipartFileUploadInfosShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetMultipartFileUploadInfosShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetMultipartFileUploadInfosShrinkHeaders) SetAccountContextShrink(v string) *GetMultipartFileUploadInfosShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetMultipartFileUploadInfosRequest struct {
	Option        *GetMultipartFileUploadInfosRequestOption        `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	PartNumbers   []*int32                                         `json:"PartNumbers,omitempty" xml:"PartNumbers,omitempty" type:"Repeated"`
	TenantContext *GetMultipartFileUploadInfosRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// hwHPAAAAAipHxxxxx
	UploadKey *string `json:"UploadKey,omitempty" xml:"UploadKey,omitempty"`
}

func (s GetMultipartFileUploadInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosRequest) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosRequest) SetOption(v *GetMultipartFileUploadInfosRequestOption) *GetMultipartFileUploadInfosRequest {
	s.Option = v
	return s
}

func (s *GetMultipartFileUploadInfosRequest) SetPartNumbers(v []*int32) *GetMultipartFileUploadInfosRequest {
	s.PartNumbers = v
	return s
}

func (s *GetMultipartFileUploadInfosRequest) SetTenantContext(v *GetMultipartFileUploadInfosRequestTenantContext) *GetMultipartFileUploadInfosRequest {
	s.TenantContext = v
	return s
}

func (s *GetMultipartFileUploadInfosRequest) SetUploadKey(v string) *GetMultipartFileUploadInfosRequest {
	s.UploadKey = &v
	return s
}

type GetMultipartFileUploadInfosRequestOption struct {
	// example:
	//
	// true
	PreferIntranet *bool `json:"PreferIntranet,omitempty" xml:"PreferIntranet,omitempty"`
}

func (s GetMultipartFileUploadInfosRequestOption) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosRequestOption) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosRequestOption) SetPreferIntranet(v bool) *GetMultipartFileUploadInfosRequestOption {
	s.PreferIntranet = &v
	return s
}

type GetMultipartFileUploadInfosRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetMultipartFileUploadInfosRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosRequestTenantContext) SetTenantId(v string) *GetMultipartFileUploadInfosRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetMultipartFileUploadInfosShrinkRequest struct {
	OptionShrink        *string `json:"Option,omitempty" xml:"Option,omitempty"`
	PartNumbersShrink   *string `json:"PartNumbers,omitempty" xml:"PartNumbers,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// hwHPAAAAAipHxxxxx
	UploadKey *string `json:"UploadKey,omitempty" xml:"UploadKey,omitempty"`
}

func (s GetMultipartFileUploadInfosShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosShrinkRequest) SetOptionShrink(v string) *GetMultipartFileUploadInfosShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *GetMultipartFileUploadInfosShrinkRequest) SetPartNumbersShrink(v string) *GetMultipartFileUploadInfosShrinkRequest {
	s.PartNumbersShrink = &v
	return s
}

func (s *GetMultipartFileUploadInfosShrinkRequest) SetTenantContextShrink(v string) *GetMultipartFileUploadInfosShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetMultipartFileUploadInfosShrinkRequest) SetUploadKey(v string) *GetMultipartFileUploadInfosShrinkRequest {
	s.UploadKey = &v
	return s
}

type GetMultipartFileUploadInfosResponseBody struct {
	MultipartHeaderSignatureInfos []*GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos `json:"multipartHeaderSignatureInfos,omitempty" xml:"multipartHeaderSignatureInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetMultipartFileUploadInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosResponseBody) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosResponseBody) SetMultipartHeaderSignatureInfos(v []*GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos) *GetMultipartFileUploadInfosResponseBody {
	s.MultipartHeaderSignatureInfos = v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBody) SetRequestId(v string) *GetMultipartFileUploadInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBody) SetVendorRequestId(v string) *GetMultipartFileUploadInfosResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBody) SetVendorType(v string) *GetMultipartFileUploadInfosResponseBody {
	s.VendorType = &v
	return s
}

type GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos struct {
	HeaderSignatureInfo *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo `json:"HeaderSignatureInfo,omitempty" xml:"HeaderSignatureInfo,omitempty" type:"Struct"`
	// example:
	//
	// 1
	PartNumber *int32 `json:"PartNumber,omitempty" xml:"PartNumber,omitempty"`
}

func (s GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos) SetHeaderSignatureInfo(v *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos {
	s.HeaderSignatureInfo = v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos) SetPartNumber(v int32) *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfos {
	s.PartNumber = &v
	return s
}

type GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo struct {
	// example:
	//
	// 900
	ExpirationSeconds    *int32             `json:"ExpirationSeconds,omitempty" xml:"ExpirationSeconds,omitempty"`
	Headers              map[string]*string `json:"Headers,omitempty" xml:"Headers,omitempty"`
	InternalResourceUrls []*string          `json:"InternalResourceUrls,omitempty" xml:"InternalResourceUrls,omitempty" type:"Repeated"`
	// example:
	//
	// ZHANGJIAKOU
	Region       *string   `json:"Region,omitempty" xml:"Region,omitempty"`
	ResourceUrls []*string `json:"ResourceUrls,omitempty" xml:"ResourceUrls,omitempty" type:"Repeated"`
}

func (s GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) SetExpirationSeconds(v int32) *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo {
	s.ExpirationSeconds = &v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) SetHeaders(v map[string]*string) *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo {
	s.Headers = v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) SetInternalResourceUrls(v []*string) *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo {
	s.InternalResourceUrls = v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) SetRegion(v string) *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo {
	s.Region = &v
	return s
}

func (s *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo) SetResourceUrls(v []*string) *GetMultipartFileUploadInfosResponseBodyMultipartHeaderSignatureInfosHeaderSignatureInfo {
	s.ResourceUrls = v
	return s
}

type GetMultipartFileUploadInfosResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMultipartFileUploadInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMultipartFileUploadInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMultipartFileUploadInfosResponse) GoString() string {
	return s.String()
}

func (s *GetMultipartFileUploadInfosResponse) SetHeaders(v map[string]*string) *GetMultipartFileUploadInfosResponse {
	s.Headers = v
	return s
}

func (s *GetMultipartFileUploadInfosResponse) SetStatusCode(v int32) *GetMultipartFileUploadInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMultipartFileUploadInfosResponse) SetBody(v *GetMultipartFileUploadInfosResponseBody) *GetMultipartFileUploadInfosResponse {
	s.Body = v
	return s
}

type GetNewestInnerGroupsHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetNewestInnerGroupsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetNewestInnerGroupsHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsHeaders) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsHeaders) SetCommonHeaders(v map[string]*string) *GetNewestInnerGroupsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNewestInnerGroupsHeaders) SetAccountContext(v *GetNewestInnerGroupsHeadersAccountContext) *GetNewestInnerGroupsHeaders {
	s.AccountContext = v
	return s
}

type GetNewestInnerGroupsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetNewestInnerGroupsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsHeadersAccountContext) SetAccountId(v string) *GetNewestInnerGroupsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetNewestInnerGroupsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetNewestInnerGroupsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetNewestInnerGroupsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNewestInnerGroupsShrinkHeaders) SetAccountContextShrink(v string) *GetNewestInnerGroupsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetNewestInnerGroupsRequest struct {
	// example:
	//
	// {}
	Request map[string]interface{} `json:"Request,omitempty" xml:"Request,omitempty"`
}

func (s GetNewestInnerGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsRequest) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsRequest) SetRequest(v map[string]interface{}) *GetNewestInnerGroupsRequest {
	s.Request = v
	return s
}

type GetNewestInnerGroupsShrinkRequest struct {
	// example:
	//
	// {}
	RequestShrink *string `json:"Request,omitempty" xml:"Request,omitempty"`
}

func (s GetNewestInnerGroupsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsShrinkRequest) SetRequestShrink(v string) *GetNewestInnerGroupsShrinkRequest {
	s.RequestShrink = &v
	return s
}

type GetNewestInnerGroupsResponseBody struct {
	GroupInfos []*GetNewestInnerGroupsResponseBodyGroupInfos `json:"groupInfos,omitempty" xml:"groupInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetNewestInnerGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsResponseBody) SetGroupInfos(v []*GetNewestInnerGroupsResponseBodyGroupInfos) *GetNewestInnerGroupsResponseBody {
	s.GroupInfos = v
	return s
}

func (s *GetNewestInnerGroupsResponseBody) SetRequestId(v string) *GetNewestInnerGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNewestInnerGroupsResponseBody) SetVendorRequestId(v string) *GetNewestInnerGroupsResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetNewestInnerGroupsResponseBody) SetVendorType(v string) *GetNewestInnerGroupsResponseBody {
	s.VendorType = &v
	return s
}

type GetNewestInnerGroupsResponseBodyGroupInfos struct {
	// example:
	//
	// @lADOADma*****QKA
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// 10
	MemberAmount *string `json:"MemberAmount,omitempty" xml:"MemberAmount,omitempty"`
	// example:
	//
	// cid1e******==
	OpenConversationId *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	Title              *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetNewestInnerGroupsResponseBodyGroupInfos) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsResponseBodyGroupInfos) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsResponseBodyGroupInfos) SetIcon(v string) *GetNewestInnerGroupsResponseBodyGroupInfos {
	s.Icon = &v
	return s
}

func (s *GetNewestInnerGroupsResponseBodyGroupInfos) SetMemberAmount(v string) *GetNewestInnerGroupsResponseBodyGroupInfos {
	s.MemberAmount = &v
	return s
}

func (s *GetNewestInnerGroupsResponseBodyGroupInfos) SetOpenConversationId(v string) *GetNewestInnerGroupsResponseBodyGroupInfos {
	s.OpenConversationId = &v
	return s
}

func (s *GetNewestInnerGroupsResponseBodyGroupInfos) SetTitle(v string) *GetNewestInnerGroupsResponseBodyGroupInfos {
	s.Title = &v
	return s
}

type GetNewestInnerGroupsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNewestInnerGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNewestInnerGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNewestInnerGroupsResponse) GoString() string {
	return s.String()
}

func (s *GetNewestInnerGroupsResponse) SetHeaders(v map[string]*string) *GetNewestInnerGroupsResponse {
	s.Headers = v
	return s
}

func (s *GetNewestInnerGroupsResponse) SetStatusCode(v int32) *GetNewestInnerGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNewestInnerGroupsResponse) SetBody(v *GetNewestInnerGroupsResponseBody) *GetNewestInnerGroupsResponse {
	s.Body = v
	return s
}

type GetNodeHeaders struct {
	CommonHeaders  map[string]*string            `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetNodeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetNodeHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNodeHeaders) GoString() string {
	return s.String()
}

func (s *GetNodeHeaders) SetCommonHeaders(v map[string]*string) *GetNodeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNodeHeaders) SetAccountContext(v *GetNodeHeadersAccountContext) *GetNodeHeaders {
	s.AccountContext = v
	return s
}

type GetNodeHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetNodeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetNodeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetNodeHeadersAccountContext) SetAccountId(v string) *GetNodeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetNodeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetNodeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNodeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetNodeShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetNodeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNodeShrinkHeaders) SetAccountContextShrink(v string) *GetNodeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetNodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// a9E05BDRVQ9K600yf1NplNDxV63zgkYA
	NodeId        *string                      `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContext *GetNodeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// true
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
	// example:
	//
	// true
	WithStatisticalInfo *bool `json:"WithStatisticalInfo,omitempty" xml:"WithStatisticalInfo,omitempty"`
}

func (s GetNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeRequest) GoString() string {
	return s.String()
}

func (s *GetNodeRequest) SetNodeId(v string) *GetNodeRequest {
	s.NodeId = &v
	return s
}

func (s *GetNodeRequest) SetTenantContext(v *GetNodeRequestTenantContext) *GetNodeRequest {
	s.TenantContext = v
	return s
}

func (s *GetNodeRequest) SetWithPermissionRole(v bool) *GetNodeRequest {
	s.WithPermissionRole = &v
	return s
}

func (s *GetNodeRequest) SetWithStatisticalInfo(v bool) *GetNodeRequest {
	s.WithStatisticalInfo = &v
	return s
}

type GetNodeRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetNodeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetNodeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetNodeRequestTenantContext) SetTenantId(v string) *GetNodeRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetNodeShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// a9E05BDRVQ9K600yf1NplNDxV63zgkYA
	NodeId              *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// true
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
	// example:
	//
	// true
	WithStatisticalInfo *bool `json:"WithStatisticalInfo,omitempty" xml:"WithStatisticalInfo,omitempty"`
}

func (s GetNodeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetNodeShrinkRequest) SetNodeId(v string) *GetNodeShrinkRequest {
	s.NodeId = &v
	return s
}

func (s *GetNodeShrinkRequest) SetTenantContextShrink(v string) *GetNodeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetNodeShrinkRequest) SetWithPermissionRole(v bool) *GetNodeShrinkRequest {
	s.WithPermissionRole = &v
	return s
}

func (s *GetNodeShrinkRequest) SetWithStatisticalInfo(v bool) *GetNodeShrinkRequest {
	s.WithStatisticalInfo = &v
	return s
}

type GetNodeResponseBody struct {
	Node *GetNodeResponseBodyNode `json:"node,omitempty" xml:"node,omitempty" type:"Struct"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeResponseBody) SetNode(v *GetNodeResponseBodyNode) *GetNodeResponseBody {
	s.Node = v
	return s
}

func (s *GetNodeResponseBody) SetRequestId(v string) *GetNodeResponseBody {
	s.RequestId = &v
	return s
}

type GetNodeResponseBodyNode struct {
	// example:
	//
	// ALIDOC
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// adoc
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// true
	HasChildren *bool `json:"HasChildren,omitempty" xml:"HasChildren,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// node_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// 123123
	Size            *int64                                  `json:"Size,omitempty" xml:"Size,omitempty"`
	StatisticalInfo *GetNodeResponseBodyNodeStatisticalInfo `json:"StatisticalInfo,omitempty" xml:"StatisticalInfo,omitempty" type:"Struct"`
	// example:
	//
	// FILE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// node_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// By8jQS1ZYjGn5b0M
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetNodeResponseBodyNode) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponseBodyNode) GoString() string {
	return s.String()
}

func (s *GetNodeResponseBodyNode) SetCategory(v string) *GetNodeResponseBodyNode {
	s.Category = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetCreateTime(v string) *GetNodeResponseBodyNode {
	s.CreateTime = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetCreatorId(v string) *GetNodeResponseBodyNode {
	s.CreatorId = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetExtension(v string) *GetNodeResponseBodyNode {
	s.Extension = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetHasChildren(v bool) *GetNodeResponseBodyNode {
	s.HasChildren = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetModifiedTime(v string) *GetNodeResponseBodyNode {
	s.ModifiedTime = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetModifierId(v string) *GetNodeResponseBodyNode {
	s.ModifierId = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetName(v string) *GetNodeResponseBodyNode {
	s.Name = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetNodeId(v string) *GetNodeResponseBodyNode {
	s.NodeId = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetPermissionRole(v string) *GetNodeResponseBodyNode {
	s.PermissionRole = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetSize(v int64) *GetNodeResponseBodyNode {
	s.Size = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetStatisticalInfo(v *GetNodeResponseBodyNodeStatisticalInfo) *GetNodeResponseBodyNode {
	s.StatisticalInfo = v
	return s
}

func (s *GetNodeResponseBodyNode) SetType(v string) *GetNodeResponseBodyNode {
	s.Type = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetUrl(v string) *GetNodeResponseBodyNode {
	s.Url = &v
	return s
}

func (s *GetNodeResponseBodyNode) SetWorkspaceId(v string) *GetNodeResponseBodyNode {
	s.WorkspaceId = &v
	return s
}

type GetNodeResponseBodyNodeStatisticalInfo struct {
	// example:
	//
	// 200
	WordCount *int64 `json:"WordCount,omitempty" xml:"WordCount,omitempty"`
}

func (s GetNodeResponseBodyNodeStatisticalInfo) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponseBodyNodeStatisticalInfo) GoString() string {
	return s.String()
}

func (s *GetNodeResponseBodyNodeStatisticalInfo) SetWordCount(v int64) *GetNodeResponseBodyNodeStatisticalInfo {
	s.WordCount = &v
	return s
}

type GetNodeResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeResponse) GoString() string {
	return s.String()
}

func (s *GetNodeResponse) SetHeaders(v map[string]*string) *GetNodeResponse {
	s.Headers = v
	return s
}

func (s *GetNodeResponse) SetStatusCode(v int32) *GetNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNodeResponse) SetBody(v *GetNodeResponseBody) *GetNodeResponse {
	s.Body = v
	return s
}

type GetNodeByUrlHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetNodeByUrlHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetNodeByUrlHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlHeaders) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlHeaders) SetCommonHeaders(v map[string]*string) *GetNodeByUrlHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNodeByUrlHeaders) SetAccountContext(v *GetNodeByUrlHeadersAccountContext) *GetNodeByUrlHeaders {
	s.AccountContext = v
	return s
}

type GetNodeByUrlHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetNodeByUrlHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlHeadersAccountContext) SetAccountId(v string) *GetNodeByUrlHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetNodeByUrlShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetNodeByUrlShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetNodeByUrlShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNodeByUrlShrinkHeaders) SetAccountContextShrink(v string) *GetNodeByUrlShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetNodeByUrlRequest struct {
	Option        *GetNodeByUrlRequestOption        `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	TenantContext *GetNodeByUrlRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// https://alidocs.dingtalk.com/i/nodes/EpGBa2L*********gN7R35y
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetNodeByUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlRequest) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlRequest) SetOption(v *GetNodeByUrlRequestOption) *GetNodeByUrlRequest {
	s.Option = v
	return s
}

func (s *GetNodeByUrlRequest) SetTenantContext(v *GetNodeByUrlRequestTenantContext) *GetNodeByUrlRequest {
	s.TenantContext = v
	return s
}

func (s *GetNodeByUrlRequest) SetUrl(v string) *GetNodeByUrlRequest {
	s.Url = &v
	return s
}

type GetNodeByUrlRequestOption struct {
	// example:
	//
	// false
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
	// example:
	//
	// false
	WithStatisticalInfo *bool `json:"WithStatisticalInfo,omitempty" xml:"WithStatisticalInfo,omitempty"`
}

func (s GetNodeByUrlRequestOption) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlRequestOption) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlRequestOption) SetWithPermissionRole(v bool) *GetNodeByUrlRequestOption {
	s.WithPermissionRole = &v
	return s
}

func (s *GetNodeByUrlRequestOption) SetWithStatisticalInfo(v bool) *GetNodeByUrlRequestOption {
	s.WithStatisticalInfo = &v
	return s
}

type GetNodeByUrlRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetNodeByUrlRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlRequestTenantContext) SetTenantId(v string) *GetNodeByUrlRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetNodeByUrlShrinkRequest struct {
	OptionShrink        *string `json:"Option,omitempty" xml:"Option,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://alidocs.dingtalk.com/i/nodes/EpGBa2L*********gN7R35y
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetNodeByUrlShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlShrinkRequest) SetOptionShrink(v string) *GetNodeByUrlShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *GetNodeByUrlShrinkRequest) SetTenantContextShrink(v string) *GetNodeByUrlShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetNodeByUrlShrinkRequest) SetUrl(v string) *GetNodeByUrlShrinkRequest {
	s.Url = &v
	return s
}

type GetNodeByUrlResponseBody struct {
	Node *GetNodeByUrlResponseBodyNode `json:"node,omitempty" xml:"node,omitempty" type:"Struct"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetNodeByUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlResponseBody) SetNode(v *GetNodeByUrlResponseBodyNode) *GetNodeByUrlResponseBody {
	s.Node = v
	return s
}

func (s *GetNodeByUrlResponseBody) SetRequestId(v string) *GetNodeByUrlResponseBody {
	s.RequestId = &v
	return s
}

type GetNodeByUrlResponseBodyNode struct {
	// example:
	//
	// ALIDOC
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// adoc
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// false
	HasChildren *bool `json:"HasChildren,omitempty" xml:"HasChildren,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// node_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// EpGBa2Lm8aRmzkkNhplMx1prWgN7R35y
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// 512
	Size            *int64                                       `json:"Size,omitempty" xml:"Size,omitempty"`
	StatisticalInfo *GetNodeByUrlResponseBodyNodeStatisticalInfo `json:"StatisticalInfo,omitempty" xml:"StatisticalInfo,omitempty" type:"Struct"`
	// example:
	//
	// FILE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// node_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// By8jQS1ZYjGn5b0M
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetNodeByUrlResponseBodyNode) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlResponseBodyNode) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlResponseBodyNode) SetCategory(v string) *GetNodeByUrlResponseBodyNode {
	s.Category = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetCreateTime(v string) *GetNodeByUrlResponseBodyNode {
	s.CreateTime = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetCreatorId(v string) *GetNodeByUrlResponseBodyNode {
	s.CreatorId = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetExtension(v string) *GetNodeByUrlResponseBodyNode {
	s.Extension = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetHasChildren(v bool) *GetNodeByUrlResponseBodyNode {
	s.HasChildren = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetModifiedTime(v string) *GetNodeByUrlResponseBodyNode {
	s.ModifiedTime = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetModifierId(v string) *GetNodeByUrlResponseBodyNode {
	s.ModifierId = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetName(v string) *GetNodeByUrlResponseBodyNode {
	s.Name = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetNodeId(v string) *GetNodeByUrlResponseBodyNode {
	s.NodeId = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetPermissionRole(v string) *GetNodeByUrlResponseBodyNode {
	s.PermissionRole = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetSize(v int64) *GetNodeByUrlResponseBodyNode {
	s.Size = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetStatisticalInfo(v *GetNodeByUrlResponseBodyNodeStatisticalInfo) *GetNodeByUrlResponseBodyNode {
	s.StatisticalInfo = v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetType(v string) *GetNodeByUrlResponseBodyNode {
	s.Type = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetUrl(v string) *GetNodeByUrlResponseBodyNode {
	s.Url = &v
	return s
}

func (s *GetNodeByUrlResponseBodyNode) SetWorkspaceId(v string) *GetNodeByUrlResponseBodyNode {
	s.WorkspaceId = &v
	return s
}

type GetNodeByUrlResponseBodyNodeStatisticalInfo struct {
	// example:
	//
	// 123
	WordCount *int64 `json:"WordCount,omitempty" xml:"WordCount,omitempty"`
}

func (s GetNodeByUrlResponseBodyNodeStatisticalInfo) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlResponseBodyNodeStatisticalInfo) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlResponseBodyNodeStatisticalInfo) SetWordCount(v int64) *GetNodeByUrlResponseBodyNodeStatisticalInfo {
	s.WordCount = &v
	return s
}

type GetNodeByUrlResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNodeByUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNodeByUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodeByUrlResponse) GoString() string {
	return s.String()
}

func (s *GetNodeByUrlResponse) SetHeaders(v map[string]*string) *GetNodeByUrlResponse {
	s.Headers = v
	return s
}

func (s *GetNodeByUrlResponse) SetStatusCode(v int32) *GetNodeByUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNodeByUrlResponse) SetBody(v *GetNodeByUrlResponseBody) *GetNodeByUrlResponse {
	s.Body = v
	return s
}

type GetNodesHeaders struct {
	CommonHeaders  map[string]*string             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetNodesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetNodesHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNodesHeaders) GoString() string {
	return s.String()
}

func (s *GetNodesHeaders) SetCommonHeaders(v map[string]*string) *GetNodesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNodesHeaders) SetAccountContext(v *GetNodesHeadersAccountContext) *GetNodesHeaders {
	s.AccountContext = v
	return s
}

type GetNodesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetNodesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetNodesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetNodesHeadersAccountContext) SetAccountId(v string) *GetNodesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetNodesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetNodesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNodesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetNodesShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetNodesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNodesShrinkHeaders) SetAccountContextShrink(v string) *GetNodesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetNodesRequest struct {
	// This parameter is required.
	NodeIds       []*string                     `json:"NodeIds,omitempty" xml:"NodeIds,omitempty" type:"Repeated"`
	Option        *GetNodesRequestOption        `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	TenantContext *GetNodesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetNodesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodesRequest) GoString() string {
	return s.String()
}

func (s *GetNodesRequest) SetNodeIds(v []*string) *GetNodesRequest {
	s.NodeIds = v
	return s
}

func (s *GetNodesRequest) SetOption(v *GetNodesRequestOption) *GetNodesRequest {
	s.Option = v
	return s
}

func (s *GetNodesRequest) SetTenantContext(v *GetNodesRequestTenantContext) *GetNodesRequest {
	s.TenantContext = v
	return s
}

type GetNodesRequestOption struct {
	// example:
	//
	// false
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
	// example:
	//
	// false
	WithStatisticalInfo *bool `json:"WithStatisticalInfo,omitempty" xml:"WithStatisticalInfo,omitempty"`
}

func (s GetNodesRequestOption) String() string {
	return tea.Prettify(s)
}

func (s GetNodesRequestOption) GoString() string {
	return s.String()
}

func (s *GetNodesRequestOption) SetWithPermissionRole(v bool) *GetNodesRequestOption {
	s.WithPermissionRole = &v
	return s
}

func (s *GetNodesRequestOption) SetWithStatisticalInfo(v bool) *GetNodesRequestOption {
	s.WithStatisticalInfo = &v
	return s
}

type GetNodesRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetNodesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetNodesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetNodesRequestTenantContext) SetTenantId(v string) *GetNodesRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetNodesShrinkRequest struct {
	// This parameter is required.
	NodeIdsShrink       *string `json:"NodeIds,omitempty" xml:"NodeIds,omitempty"`
	OptionShrink        *string `json:"Option,omitempty" xml:"Option,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetNodesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNodesShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetNodesShrinkRequest) SetNodeIdsShrink(v string) *GetNodesShrinkRequest {
	s.NodeIdsShrink = &v
	return s
}

func (s *GetNodesShrinkRequest) SetOptionShrink(v string) *GetNodesShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *GetNodesShrinkRequest) SetTenantContextShrink(v string) *GetNodesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetNodesResponseBody struct {
	Nodes []*GetNodesResponseBodyNodes `json:"nodes,omitempty" xml:"nodes,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetNodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNodesResponseBody) GoString() string {
	return s.String()
}

func (s *GetNodesResponseBody) SetNodes(v []*GetNodesResponseBodyNodes) *GetNodesResponseBody {
	s.Nodes = v
	return s
}

func (s *GetNodesResponseBody) SetRequestId(v string) *GetNodesResponseBody {
	s.RequestId = &v
	return s
}

type GetNodesResponseBodyNodes struct {
	// example:
	//
	// ALIDOC
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// adoc
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// false
	HasChildren *bool `json:"HasChildren,omitempty" xml:"HasChildren,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// node_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// 512
	Size            *int64                                    `json:"Size,omitempty" xml:"Size,omitempty"`
	StatisticalInfo *GetNodesResponseBodyNodesStatisticalInfo `json:"StatisticalInfo,omitempty" xml:"StatisticalInfo,omitempty" type:"Struct"`
	// example:
	//
	// FILE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// node_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetNodesResponseBodyNodes) String() string {
	return tea.Prettify(s)
}

func (s GetNodesResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *GetNodesResponseBodyNodes) SetCategory(v string) *GetNodesResponseBodyNodes {
	s.Category = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetCreateTime(v string) *GetNodesResponseBodyNodes {
	s.CreateTime = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetCreatorId(v string) *GetNodesResponseBodyNodes {
	s.CreatorId = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetExtension(v string) *GetNodesResponseBodyNodes {
	s.Extension = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetHasChildren(v bool) *GetNodesResponseBodyNodes {
	s.HasChildren = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetModifiedTime(v string) *GetNodesResponseBodyNodes {
	s.ModifiedTime = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetModifierId(v string) *GetNodesResponseBodyNodes {
	s.ModifierId = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetName(v string) *GetNodesResponseBodyNodes {
	s.Name = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetNodeId(v string) *GetNodesResponseBodyNodes {
	s.NodeId = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetPermissionRole(v string) *GetNodesResponseBodyNodes {
	s.PermissionRole = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetSize(v int64) *GetNodesResponseBodyNodes {
	s.Size = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetStatisticalInfo(v *GetNodesResponseBodyNodesStatisticalInfo) *GetNodesResponseBodyNodes {
	s.StatisticalInfo = v
	return s
}

func (s *GetNodesResponseBodyNodes) SetType(v string) *GetNodesResponseBodyNodes {
	s.Type = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetUrl(v string) *GetNodesResponseBodyNodes {
	s.Url = &v
	return s
}

func (s *GetNodesResponseBodyNodes) SetWorkspaceId(v string) *GetNodesResponseBodyNodes {
	s.WorkspaceId = &v
	return s
}

type GetNodesResponseBodyNodesStatisticalInfo struct {
	// example:
	//
	// 123
	WordCount *int64 `json:"WordCount,omitempty" xml:"WordCount,omitempty"`
}

func (s GetNodesResponseBodyNodesStatisticalInfo) String() string {
	return tea.Prettify(s)
}

func (s GetNodesResponseBodyNodesStatisticalInfo) GoString() string {
	return s.String()
}

func (s *GetNodesResponseBodyNodesStatisticalInfo) SetWordCount(v int64) *GetNodesResponseBodyNodesStatisticalInfo {
	s.WordCount = &v
	return s
}

type GetNodesResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNodesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNodesResponse) GoString() string {
	return s.String()
}

func (s *GetNodesResponse) SetHeaders(v map[string]*string) *GetNodesResponse {
	s.Headers = v
	return s
}

func (s *GetNodesResponse) SetStatusCode(v int32) *GetNodesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNodesResponse) SetBody(v *GetNodesResponseBody) *GetNodesResponse {
	s.Body = v
	return s
}

type GetNotifyMeHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetNotifyMeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetNotifyMeHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNotifyMeHeaders) GoString() string {
	return s.String()
}

func (s *GetNotifyMeHeaders) SetCommonHeaders(v map[string]*string) *GetNotifyMeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNotifyMeHeaders) SetAccountContext(v *GetNotifyMeHeadersAccountContext) *GetNotifyMeHeaders {
	s.AccountContext = v
	return s
}

type GetNotifyMeHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetNotifyMeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetNotifyMeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetNotifyMeHeadersAccountContext) SetAccountId(v string) *GetNotifyMeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetNotifyMeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetNotifyMeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetNotifyMeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetNotifyMeShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetNotifyMeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetNotifyMeShrinkHeaders) SetAccountContextShrink(v string) *GetNotifyMeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetNotifyMeRequest struct {
	// example:
	//
	// APP_PBKTxxx
	AppTypes *string `json:"AppTypes,omitempty" xml:"AppTypes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// corpIdxxx
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *int64 `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *int64 `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	InstanceCreateFromTimeGMT *int64 `json:"InstanceCreateFromTimeGMT,omitempty" xml:"InstanceCreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	InstanceCreateToTimeGMT *int64 `json:"InstanceCreateToTimeGMT,omitempty" xml:"InstanceCreateToTimeGMT,omitempty"`
	// example:
	//
	// keyword
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["xx","xxx"]
	ProcessCodes *string `json:"ProcessCodes,omitempty" xml:"ProcessCodes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s GetNotifyMeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetNotifyMeRequest) GoString() string {
	return s.String()
}

func (s *GetNotifyMeRequest) SetAppTypes(v string) *GetNotifyMeRequest {
	s.AppTypes = &v
	return s
}

func (s *GetNotifyMeRequest) SetCorpId(v string) *GetNotifyMeRequest {
	s.CorpId = &v
	return s
}

func (s *GetNotifyMeRequest) SetCreateFromTimeGMT(v int64) *GetNotifyMeRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *GetNotifyMeRequest) SetCreateToTimeGMT(v int64) *GetNotifyMeRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *GetNotifyMeRequest) SetInstanceCreateFromTimeGMT(v int64) *GetNotifyMeRequest {
	s.InstanceCreateFromTimeGMT = &v
	return s
}

func (s *GetNotifyMeRequest) SetInstanceCreateToTimeGMT(v int64) *GetNotifyMeRequest {
	s.InstanceCreateToTimeGMT = &v
	return s
}

func (s *GetNotifyMeRequest) SetKeyword(v string) *GetNotifyMeRequest {
	s.Keyword = &v
	return s
}

func (s *GetNotifyMeRequest) SetLanguage(v string) *GetNotifyMeRequest {
	s.Language = &v
	return s
}

func (s *GetNotifyMeRequest) SetPageNumber(v int32) *GetNotifyMeRequest {
	s.PageNumber = &v
	return s
}

func (s *GetNotifyMeRequest) SetPageSize(v int32) *GetNotifyMeRequest {
	s.PageSize = &v
	return s
}

func (s *GetNotifyMeRequest) SetProcessCodes(v string) *GetNotifyMeRequest {
	s.ProcessCodes = &v
	return s
}

func (s *GetNotifyMeRequest) SetToken(v string) *GetNotifyMeRequest {
	s.Token = &v
	return s
}

type GetNotifyMeResponseBody struct {
	// example:
	//
	// [{}]
	Data []*GetNotifyMeResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetNotifyMeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetNotifyMeResponseBody) GoString() string {
	return s.String()
}

func (s *GetNotifyMeResponseBody) SetData(v []*GetNotifyMeResponseBodyData) *GetNotifyMeResponseBody {
	s.Data = v
	return s
}

func (s *GetNotifyMeResponseBody) SetPageNumber(v int64) *GetNotifyMeResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetNotifyMeResponseBody) SetRequestId(v string) *GetNotifyMeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetNotifyMeResponseBody) SetTotalCount(v int64) *GetNotifyMeResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetNotifyMeResponseBody) SetVendorRequestId(v string) *GetNotifyMeResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetNotifyMeResponseBody) SetVendorType(v string) *GetNotifyMeResponseBody {
	s.VendorType = &v
	return s
}

type GetNotifyMeResponseBodyData struct {
	// example:
	//
	// act-xxaanfaf
	ActivityId *string `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	// example:
	//
	// APP_XCxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// corpIdxxx
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// 2020-01-01
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// 123456
	CreatorUserId *string `json:"CreatorUserId,omitempty" xml:"CreatorUserId,omitempty"`
	// example:
	//
	// formxxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// RUNNING
	InstStatus *string `json:"InstStatus,omitempty" xml:"InstStatus,omitempty"`
	// example:
	//
	// mobileUrlexample
	MobileUrl *string `json:"MobileUrl,omitempty" xml:"MobileUrl,omitempty"`
	// example:
	//
	// 2020-01-01
	ModifiedTimeGMT *string `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
}

func (s GetNotifyMeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetNotifyMeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetNotifyMeResponseBodyData) SetActivityId(v string) *GetNotifyMeResponseBodyData {
	s.ActivityId = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetAppType(v string) *GetNotifyMeResponseBodyData {
	s.AppType = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetCorpId(v string) *GetNotifyMeResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetCreateTimeGMT(v string) *GetNotifyMeResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetCreatorUserId(v string) *GetNotifyMeResponseBodyData {
	s.CreatorUserId = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetFormInstanceId(v string) *GetNotifyMeResponseBodyData {
	s.FormInstanceId = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetInstStatus(v string) *GetNotifyMeResponseBodyData {
	s.InstStatus = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetMobileUrl(v string) *GetNotifyMeResponseBodyData {
	s.MobileUrl = &v
	return s
}

func (s *GetNotifyMeResponseBodyData) SetModifiedTimeGMT(v string) *GetNotifyMeResponseBodyData {
	s.ModifiedTimeGMT = &v
	return s
}

type GetNotifyMeResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetNotifyMeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetNotifyMeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetNotifyMeResponse) GoString() string {
	return s.String()
}

func (s *GetNotifyMeResponse) SetHeaders(v map[string]*string) *GetNotifyMeResponse {
	s.Headers = v
	return s
}

func (s *GetNotifyMeResponse) SetStatusCode(v int32) *GetNotifyMeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetNotifyMeResponse) SetBody(v *GetNotifyMeResponseBody) *GetNotifyMeResponse {
	s.Body = v
	return s
}

type GetOpenUrlHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetOpenUrlHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetOpenUrlHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetOpenUrlHeaders) GoString() string {
	return s.String()
}

func (s *GetOpenUrlHeaders) SetCommonHeaders(v map[string]*string) *GetOpenUrlHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetOpenUrlHeaders) SetAccountContext(v *GetOpenUrlHeadersAccountContext) *GetOpenUrlHeaders {
	s.AccountContext = v
	return s
}

type GetOpenUrlHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetOpenUrlHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetOpenUrlHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetOpenUrlHeadersAccountContext) SetAccountId(v string) *GetOpenUrlHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetOpenUrlShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetOpenUrlShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetOpenUrlShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetOpenUrlShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetOpenUrlShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetOpenUrlShrinkHeaders) SetAccountContextShrink(v string) *GetOpenUrlShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetOpenUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://www.aliwork.com/fileHandle?appType=APP_VN7I6xxx&fileName=fileName.xlsx&instId=&type=download
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// 60000L
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetOpenUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOpenUrlRequest) GoString() string {
	return s.String()
}

func (s *GetOpenUrlRequest) SetAppType(v string) *GetOpenUrlRequest {
	s.AppType = &v
	return s
}

func (s *GetOpenUrlRequest) SetFileUrl(v string) *GetOpenUrlRequest {
	s.FileUrl = &v
	return s
}

func (s *GetOpenUrlRequest) SetLanguage(v string) *GetOpenUrlRequest {
	s.Language = &v
	return s
}

func (s *GetOpenUrlRequest) SetSystemToken(v string) *GetOpenUrlRequest {
	s.SystemToken = &v
	return s
}

func (s *GetOpenUrlRequest) SetTimeout(v int64) *GetOpenUrlRequest {
	s.Timeout = &v
	return s
}

type GetOpenUrlResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// https/www.aliwork.com
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
}

func (s GetOpenUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOpenUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetOpenUrlResponseBody) SetRequestId(v string) *GetOpenUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOpenUrlResponseBody) SetResult(v string) *GetOpenUrlResponseBody {
	s.Result = &v
	return s
}

type GetOpenUrlResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOpenUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOpenUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOpenUrlResponse) GoString() string {
	return s.String()
}

func (s *GetOpenUrlResponse) SetHeaders(v map[string]*string) *GetOpenUrlResponse {
	s.Headers = v
	return s
}

func (s *GetOpenUrlResponse) SetStatusCode(v int32) *GetOpenUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOpenUrlResponse) SetBody(v *GetOpenUrlResponseBody) *GetOpenUrlResponse {
	s.Body = v
	return s
}

type GetOperationRecordsHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetOperationRecordsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetOperationRecordsHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetOperationRecordsHeaders) GoString() string {
	return s.String()
}

func (s *GetOperationRecordsHeaders) SetCommonHeaders(v map[string]*string) *GetOperationRecordsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetOperationRecordsHeaders) SetAccountContext(v *GetOperationRecordsHeadersAccountContext) *GetOperationRecordsHeaders {
	s.AccountContext = v
	return s
}

type GetOperationRecordsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetOperationRecordsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetOperationRecordsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetOperationRecordsHeadersAccountContext) SetAccountId(v string) *GetOperationRecordsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetOperationRecordsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetOperationRecordsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetOperationRecordsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetOperationRecordsShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetOperationRecordsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetOperationRecordsShrinkHeaders) SetAccountContextShrink(v string) *GetOperationRecordsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetOperationRecordsRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetOperationRecordsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOperationRecordsRequest) GoString() string {
	return s.String()
}

func (s *GetOperationRecordsRequest) SetAppType(v string) *GetOperationRecordsRequest {
	s.AppType = &v
	return s
}

func (s *GetOperationRecordsRequest) SetLanguage(v string) *GetOperationRecordsRequest {
	s.Language = &v
	return s
}

func (s *GetOperationRecordsRequest) SetProcessInstanceId(v string) *GetOperationRecordsRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetOperationRecordsRequest) SetSystemToken(v string) *GetOperationRecordsRequest {
	s.SystemToken = &v
	return s
}

type GetOperationRecordsResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                  `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*GetOperationRecordsResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetOperationRecordsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOperationRecordsResponseBody) GoString() string {
	return s.String()
}

func (s *GetOperationRecordsResponseBody) SetRequestId(v string) *GetOperationRecordsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOperationRecordsResponseBody) SetResult(v []*GetOperationRecordsResponseBodyResult) *GetOperationRecordsResponseBody {
	s.Result = v
	return s
}

func (s *GetOperationRecordsResponseBody) SetVendorRequestId(v string) *GetOperationRecordsResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetOperationRecordsResponseBody) SetVendorType(v string) *GetOperationRecordsResponseBody {
	s.VendorType = &v
	return s
}

type GetOperationRecordsResponseBodyResult struct {
	// example:
	//
	// return
	Action *string `json:"Action,omitempty" xml:"Action,omitempty"`
	// example:
	//
	// 同意
	ActionExit *string `json:"ActionExit,omitempty" xml:"ActionExit,omitempty"`
	// example:
	//
	// 2021-02-01
	ActiveTimeGMT *string `json:"ActiveTimeGMT,omitempty" xml:"ActiveTimeGMT,omitempty"`
	// example:
	//
	// act-xxaanfaf
	ActivityId *string `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	// example:
	//
	// 12345
	DataId *int64 `json:"DataId,omitempty" xml:"DataId,omitempty"`
	// example:
	//
	// https://oss.com/Signature.pdf
	DigitalSign *string `json:"DigitalSign,omitempty" xml:"DigitalSign,omitempty"`
	// example:
	//
	// https://oss.com/a.pdf
	Files *string `json:"Files,omitempty" xml:"Files,omitempty"`
	// example:
	//
	// 2021-01-01
	OperateTimeGMT *string `json:"OperateTimeGMT,omitempty" xml:"OperateTimeGMT,omitempty"`
	// example:
	//
	// remove
	OperateType *string `json:"OperateType,omitempty" xml:"OperateType,omitempty"`
	// example:
	//
	// 张三
	OperatorDisplayName *string `json:"OperatorDisplayName,omitempty" xml:"OperatorDisplayName,omitempty"`
	// example:
	//
	// 李四
	OperatorName *string `json:"OperatorName,omitempty" xml:"OperatorName,omitempty"`
	// example:
	//
	// 无冬
	OperatorNickName *string `json:"OperatorNickName,omitempty" xml:"OperatorNickName,omitempty"`
	// example:
	//
	// https://oss.com/a.jpeg
	OperatorPhotoUrl *string `json:"OperatorPhotoUrl,omitempty" xml:"OperatorPhotoUrl,omitempty"`
	// example:
	//
	// 良好
	OperatorStatus *string `json:"OperatorStatus,omitempty" xml:"OperatorStatus,omitempty"`
	// example:
	//
	// manager123
	OperatorUserId *string `json:"OperatorUserId,omitempty" xml:"OperatorUserId,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// 确认同意
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// example:
	//
	// 请购类型
	ShowName *string `json:"ShowName,omitempty" xml:"ShowName,omitempty"`
	// example:
	//
	// 12
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 同步
	TaskExecuteType *string `json:"TaskExecuteType,omitempty" xml:"TaskExecuteType,omitempty"`
	// example:
	//
	// 2021-01-01
	TaskHoldTimeGMT *int64 `json:"TaskHoldTimeGMT,omitempty" xml:"TaskHoldTimeGMT,omitempty"`
	// example:
	//
	// task-123
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// append task
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// example:
	//
	// i18n
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetOperationRecordsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetOperationRecordsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetOperationRecordsResponseBodyResult) SetAction(v string) *GetOperationRecordsResponseBodyResult {
	s.Action = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetActionExit(v string) *GetOperationRecordsResponseBodyResult {
	s.ActionExit = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetActiveTimeGMT(v string) *GetOperationRecordsResponseBodyResult {
	s.ActiveTimeGMT = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetActivityId(v string) *GetOperationRecordsResponseBodyResult {
	s.ActivityId = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetDataId(v int64) *GetOperationRecordsResponseBodyResult {
	s.DataId = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetDigitalSign(v string) *GetOperationRecordsResponseBodyResult {
	s.DigitalSign = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetFiles(v string) *GetOperationRecordsResponseBodyResult {
	s.Files = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperateTimeGMT(v string) *GetOperationRecordsResponseBodyResult {
	s.OperateTimeGMT = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperateType(v string) *GetOperationRecordsResponseBodyResult {
	s.OperateType = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperatorDisplayName(v string) *GetOperationRecordsResponseBodyResult {
	s.OperatorDisplayName = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperatorName(v string) *GetOperationRecordsResponseBodyResult {
	s.OperatorName = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperatorNickName(v string) *GetOperationRecordsResponseBodyResult {
	s.OperatorNickName = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperatorPhotoUrl(v string) *GetOperationRecordsResponseBodyResult {
	s.OperatorPhotoUrl = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperatorStatus(v string) *GetOperationRecordsResponseBodyResult {
	s.OperatorStatus = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetOperatorUserId(v string) *GetOperationRecordsResponseBodyResult {
	s.OperatorUserId = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetProcessInstanceId(v string) *GetOperationRecordsResponseBodyResult {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetRemark(v string) *GetOperationRecordsResponseBodyResult {
	s.Remark = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetShowName(v string) *GetOperationRecordsResponseBodyResult {
	s.ShowName = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetSize(v int32) *GetOperationRecordsResponseBodyResult {
	s.Size = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetTaskExecuteType(v string) *GetOperationRecordsResponseBodyResult {
	s.TaskExecuteType = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetTaskHoldTimeGMT(v int64) *GetOperationRecordsResponseBodyResult {
	s.TaskHoldTimeGMT = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetTaskId(v string) *GetOperationRecordsResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetTaskType(v string) *GetOperationRecordsResponseBodyResult {
	s.TaskType = &v
	return s
}

func (s *GetOperationRecordsResponseBodyResult) SetType(v string) *GetOperationRecordsResponseBodyResult {
	s.Type = &v
	return s
}

type GetOperationRecordsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOperationRecordsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOperationRecordsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOperationRecordsResponse) GoString() string {
	return s.String()
}

func (s *GetOperationRecordsResponse) SetHeaders(v map[string]*string) *GetOperationRecordsResponse {
	s.Headers = v
	return s
}

func (s *GetOperationRecordsResponse) SetStatusCode(v int32) *GetOperationRecordsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOperationRecordsResponse) SetBody(v *GetOperationRecordsResponseBody) *GetOperationRecordsResponse {
	s.Body = v
	return s
}

type GetProcessDefinitionHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetProcessDefinitionHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetProcessDefinitionHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionHeaders) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionHeaders) SetCommonHeaders(v map[string]*string) *GetProcessDefinitionHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetProcessDefinitionHeaders) SetAccountContext(v *GetProcessDefinitionHeadersAccountContext) *GetProcessDefinitionHeaders {
	s.AccountContext = v
	return s
}

type GetProcessDefinitionHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetProcessDefinitionHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionHeadersAccountContext) SetAccountId(v string) *GetProcessDefinitionHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetProcessDefinitionShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetProcessDefinitionShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetProcessDefinitionShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetProcessDefinitionShrinkHeaders) SetAccountContextShrink(v string) *GetProcessDefinitionShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetProcessDefinitionRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// ding123
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// c-xxafafaf
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// dingtalk
	NameSpace *string `json:"NameSpace,omitempty" xml:"NameSpace,omitempty"`
	// example:
	//
	// o-YDJKIxxx
	OrderNumber *string `json:"OrderNumber,omitempty" xml:"OrderNumber,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// hexabc1234
	SystemType *string `json:"SystemType,omitempty" xml:"SystemType,omitempty"`
}

func (s GetProcessDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionRequest) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionRequest) SetAppType(v string) *GetProcessDefinitionRequest {
	s.AppType = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetCorpId(v string) *GetProcessDefinitionRequest {
	s.CorpId = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetGroupId(v string) *GetProcessDefinitionRequest {
	s.GroupId = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetLanguage(v string) *GetProcessDefinitionRequest {
	s.Language = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetNameSpace(v string) *GetProcessDefinitionRequest {
	s.NameSpace = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetOrderNumber(v string) *GetProcessDefinitionRequest {
	s.OrderNumber = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetProcessInstanceId(v string) *GetProcessDefinitionRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetSystemToken(v string) *GetProcessDefinitionRequest {
	s.SystemToken = &v
	return s
}

func (s *GetProcessDefinitionRequest) SetSystemType(v string) *GetProcessDefinitionRequest {
	s.SystemType = &v
	return s
}

type GetProcessDefinitionResponseBody struct {
	// example:
	//
	// FORM-EF6Y4xxx
	FormUuid   *string                                     `json:"formUuid,omitempty" xml:"formUuid,omitempty"`
	Originator *GetProcessDefinitionResponseBodyOriginator `json:"originator,omitempty" xml:"originator,omitempty" type:"Struct"`
	// example:
	//
	// agree
	OutResult *string                                   `json:"outResult,omitempty" xml:"outResult,omitempty"`
	Owners    []*GetProcessDefinitionResponseBodyOwners `json:"owners,omitempty" xml:"owners,omitempty" type:"Repeated"`
	// example:
	//
	// proc-123
	ProcessId *string `json:"processId,omitempty" xml:"processId,omitempty"`
	// example:
	//
	// f30233fb-72e1-4xxx
	ProcessInstanceId *string `json:"processInstanceId,omitempty" xml:"processInstanceId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// running
	Status *string                                  `json:"status,omitempty" xml:"status,omitempty"`
	Tasks  []*GetProcessDefinitionResponseBodyTasks `json:"tasks,omitempty" xml:"tasks,omitempty" type:"Repeated"`
	// example:
	//
	// 李四发起的请购单
	Title     *string                `json:"title,omitempty" xml:"title,omitempty"`
	Variables map[string]interface{} `json:"variables,omitempty" xml:"variables,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetProcessDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponseBody) SetFormUuid(v string) *GetProcessDefinitionResponseBody {
	s.FormUuid = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetOriginator(v *GetProcessDefinitionResponseBodyOriginator) *GetProcessDefinitionResponseBody {
	s.Originator = v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetOutResult(v string) *GetProcessDefinitionResponseBody {
	s.OutResult = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetOwners(v []*GetProcessDefinitionResponseBodyOwners) *GetProcessDefinitionResponseBody {
	s.Owners = v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetProcessId(v string) *GetProcessDefinitionResponseBody {
	s.ProcessId = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetProcessInstanceId(v string) *GetProcessDefinitionResponseBody {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetRequestId(v string) *GetProcessDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetStatus(v string) *GetProcessDefinitionResponseBody {
	s.Status = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetTasks(v []*GetProcessDefinitionResponseBodyTasks) *GetProcessDefinitionResponseBody {
	s.Tasks = v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetTitle(v string) *GetProcessDefinitionResponseBody {
	s.Title = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetVariables(v map[string]interface{}) *GetProcessDefinitionResponseBody {
	s.Variables = v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetVendorRequestId(v string) *GetProcessDefinitionResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetProcessDefinitionResponseBody) SetVendorType(v string) *GetProcessDefinitionResponseBody {
	s.VendorType = &v
	return s
}

type GetProcessDefinitionResponseBodyOriginator struct {
	// example:
	//
	// 开发部成立于2000年
	DepartmentDescription *string `json:"DepartmentDescription,omitempty" xml:"DepartmentDescription,omitempty"`
	// example:
	//
	// ZhangSan
	DisplayEnName *string `json:"DisplayEnName,omitempty" xml:"DisplayEnName,omitempty"`
	// example:
	//
	// 测试应用
	DisplayName           *string                                                            `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	MasterDataDepartments []*GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments `json:"MasterDataDepartments,omitempty" xml:"MasterDataDepartments,omitempty" type:"Repeated"`
	// example:
	//
	// o-YDJKINSxxx
	OrderNumber *string `json:"OrderNumber,omitempty" xml:"OrderNumber,omitempty"`
	// example:
	//
	// https://abc.com/a.png
	PersonalPhoto *string `json:"PersonalPhoto,omitempty" xml:"PersonalPhoto,omitempty"`
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// wang123
	TbWang *string `json:"TbWang,omitempty" xml:"TbWang,omitempty"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// 张三
	UserInfo *string `json:"UserInfo,omitempty" xml:"UserInfo,omitempty"`
}

func (s GetProcessDefinitionResponseBodyOriginator) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponseBodyOriginator) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetDepartmentDescription(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.DepartmentDescription = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetDisplayEnName(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.DisplayEnName = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetDisplayName(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.DisplayName = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetMasterDataDepartments(v []*GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) *GetProcessDefinitionResponseBodyOriginator {
	s.MasterDataDepartments = v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetOrderNumber(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.OrderNumber = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetPersonalPhoto(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.PersonalPhoto = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetStatus(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.Status = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetTbWang(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.TbWang = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetUserId(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.UserId = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginator) SetUserInfo(v string) *GetProcessDefinitionResponseBodyOriginator {
	s.UserInfo = &v
	return s
}

type GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments struct {
	// example:
	//
	// 开发部
	DeptName *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	// example:
	//
	// development department
	DeptNameInEnglish *string `json:"DeptNameInEnglish,omitempty" xml:"DeptNameInEnglish,omitempty"`
	// example:
	//
	// develop-A
	DeptNo *string `json:"DeptNo,omitempty" xml:"DeptNo,omitempty"`
	// example:
	//
	// 总部-开发部
	DeptPath *string `json:"DeptPath,omitempty" xml:"DeptPath,omitempty"`
	// example:
	//
	// xxafafaf
	HumanSourceGroupOrderNumber *string `json:"HumanSourceGroupOrderNumber,omitempty" xml:"HumanSourceGroupOrderNumber,omitempty"`
	// example:
	//
	// 123311221
	HumanSourceGroupWorkNo *string `json:"HumanSourceGroupWorkNo,omitempty" xml:"HumanSourceGroupWorkNo,omitempty"`
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1732245789
	MasterWorkNo *string `json:"MasterWorkNo,omitempty" xml:"MasterWorkNo,omitempty"`
}

func (s GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetDeptName(v string) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.DeptName = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetDeptNameInEnglish(v string) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.DeptNameInEnglish = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetDeptNo(v string) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.DeptNo = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetDeptPath(v string) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.DeptPath = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetHumanSourceGroupOrderNumber(v string) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.HumanSourceGroupOrderNumber = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetHumanSourceGroupWorkNo(v string) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.HumanSourceGroupWorkNo = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetId(v int64) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.Id = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments) SetMasterWorkNo(v string) *GetProcessDefinitionResponseBodyOriginatorMasterDataDepartments {
	s.MasterWorkNo = &v
	return s
}

type GetProcessDefinitionResponseBodyOwners struct {
	// example:
	//
	// 开发部成立于2000年
	DepartmentDescription *string `json:"DepartmentDescription,omitempty" xml:"DepartmentDescription,omitempty"`
	// example:
	//
	// ZhangSan
	DisplayEnName *string `json:"DisplayEnName,omitempty" xml:"DisplayEnName,omitempty"`
	// example:
	//
	// 测试应用
	DisplayName           *string                                                        `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	MasterDataDepartments []*GetProcessDefinitionResponseBodyOwnersMasterDataDepartments `json:"MasterDataDepartments,omitempty" xml:"MasterDataDepartments,omitempty" type:"Repeated"`
	// example:
	//
	// o-YDJKINSxxx
	OrderNumber *string `json:"OrderNumber,omitempty" xml:"OrderNumber,omitempty"`
	// example:
	//
	// https://abc.com/a.png
	PersonalPhoto *string `json:"PersonalPhoto,omitempty" xml:"PersonalPhoto,omitempty"`
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// wang123
	TbWang *string `json:"TbWang,omitempty" xml:"TbWang,omitempty"`
	// example:
	//
	// manager123
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// 张三
	UserInfo *string `json:"UserInfo,omitempty" xml:"UserInfo,omitempty"`
}

func (s GetProcessDefinitionResponseBodyOwners) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponseBodyOwners) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponseBodyOwners) SetDepartmentDescription(v string) *GetProcessDefinitionResponseBodyOwners {
	s.DepartmentDescription = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetDisplayEnName(v string) *GetProcessDefinitionResponseBodyOwners {
	s.DisplayEnName = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetDisplayName(v string) *GetProcessDefinitionResponseBodyOwners {
	s.DisplayName = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetMasterDataDepartments(v []*GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) *GetProcessDefinitionResponseBodyOwners {
	s.MasterDataDepartments = v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetOrderNumber(v string) *GetProcessDefinitionResponseBodyOwners {
	s.OrderNumber = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetPersonalPhoto(v string) *GetProcessDefinitionResponseBodyOwners {
	s.PersonalPhoto = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetStatus(v string) *GetProcessDefinitionResponseBodyOwners {
	s.Status = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetTbWang(v string) *GetProcessDefinitionResponseBodyOwners {
	s.TbWang = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetUserId(v string) *GetProcessDefinitionResponseBodyOwners {
	s.UserId = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwners) SetUserInfo(v string) *GetProcessDefinitionResponseBodyOwners {
	s.UserInfo = &v
	return s
}

type GetProcessDefinitionResponseBodyOwnersMasterDataDepartments struct {
	// example:
	//
	// 开发部
	DeptName *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	// example:
	//
	// development department
	DeptNameInEnglish *string `json:"DeptNameInEnglish,omitempty" xml:"DeptNameInEnglish,omitempty"`
	// example:
	//
	// develop-A
	DeptNo *string `json:"DeptNo,omitempty" xml:"DeptNo,omitempty"`
	// example:
	//
	// 总部-开发部
	DeptPath *string `json:"DeptPath,omitempty" xml:"DeptPath,omitempty"`
	// example:
	//
	// xxafafaf
	HumanSourceGroupOrderNumber *string `json:"HumanSourceGroupOrderNumber,omitempty" xml:"HumanSourceGroupOrderNumber,omitempty"`
	// example:
	//
	// 123311221
	HumanSourceGroupWorkNo *string `json:"HumanSourceGroupWorkNo,omitempty" xml:"HumanSourceGroupWorkNo,omitempty"`
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1732245789
	MasterWorkNo *string `json:"MasterWorkNo,omitempty" xml:"MasterWorkNo,omitempty"`
}

func (s GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetDeptName(v string) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.DeptName = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetDeptNameInEnglish(v string) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.DeptNameInEnglish = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetDeptNo(v string) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.DeptNo = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetDeptPath(v string) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.DeptPath = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetHumanSourceGroupOrderNumber(v string) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.HumanSourceGroupOrderNumber = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetHumanSourceGroupWorkNo(v string) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.HumanSourceGroupWorkNo = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetId(v int64) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.Id = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments) SetMasterWorkNo(v string) *GetProcessDefinitionResponseBodyOwnersMasterDataDepartments {
	s.MasterWorkNo = &v
	return s
}

type GetProcessDefinitionResponseBodyTasks struct {
	// example:
	//
	// manager123
	ActionerId *string                                        `json:"ActionerId,omitempty" xml:"ActionerId,omitempty"`
	Activity   *GetProcessDefinitionResponseBodyTasksActivity `json:"Activity,omitempty" xml:"Activity,omitempty" type:"Struct"`
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 792
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetProcessDefinitionResponseBodyTasks) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponseBodyTasks) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponseBodyTasks) SetActionerId(v string) *GetProcessDefinitionResponseBodyTasks {
	s.ActionerId = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyTasks) SetActivity(v *GetProcessDefinitionResponseBodyTasksActivity) *GetProcessDefinitionResponseBodyTasks {
	s.Activity = v
	return s
}

func (s *GetProcessDefinitionResponseBodyTasks) SetStatus(v string) *GetProcessDefinitionResponseBodyTasks {
	s.Status = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyTasks) SetTaskId(v int64) *GetProcessDefinitionResponseBodyTasks {
	s.TaskId = &v
	return s
}

type GetProcessDefinitionResponseBodyTasksActivity struct {
	// example:
	//
	// act-xxaanfaf
	ActivityId *string `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	// example:
	//
	// running
	ActivityInstanceStatus *string `json:"ActivityInstanceStatus,omitempty" xml:"ActivityInstanceStatus,omitempty"`
	// example:
	//
	// activity-124
	ActivityName *string `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	// example:
	//
	// redirect task
	ActivityNameInEnglish *string `json:"ActivityNameInEnglish,omitempty" xml:"ActivityNameInEnglish,omitempty"`
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetProcessDefinitionResponseBodyTasksActivity) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponseBodyTasksActivity) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponseBodyTasksActivity) SetActivityId(v string) *GetProcessDefinitionResponseBodyTasksActivity {
	s.ActivityId = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyTasksActivity) SetActivityInstanceStatus(v string) *GetProcessDefinitionResponseBodyTasksActivity {
	s.ActivityInstanceStatus = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyTasksActivity) SetActivityName(v string) *GetProcessDefinitionResponseBodyTasksActivity {
	s.ActivityName = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyTasksActivity) SetActivityNameInEnglish(v string) *GetProcessDefinitionResponseBodyTasksActivity {
	s.ActivityNameInEnglish = &v
	return s
}

func (s *GetProcessDefinitionResponseBodyTasksActivity) SetId(v int64) *GetProcessDefinitionResponseBodyTasksActivity {
	s.Id = &v
	return s
}

type GetProcessDefinitionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetProcessDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetProcessDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetProcessDefinitionResponse) GoString() string {
	return s.String()
}

func (s *GetProcessDefinitionResponse) SetHeaders(v map[string]*string) *GetProcessDefinitionResponse {
	s.Headers = v
	return s
}

func (s *GetProcessDefinitionResponse) SetStatusCode(v int32) *GetProcessDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetProcessDefinitionResponse) SetBody(v *GetProcessDefinitionResponseBody) *GetProcessDefinitionResponse {
	s.Body = v
	return s
}

type GetRangeHeaders struct {
	CommonHeaders  map[string]*string             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetRangeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetRangeHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetRangeHeaders) GoString() string {
	return s.String()
}

func (s *GetRangeHeaders) SetCommonHeaders(v map[string]*string) *GetRangeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetRangeHeaders) SetAccountContext(v *GetRangeHeadersAccountContext) *GetRangeHeaders {
	s.AccountContext = v
	return s
}

type GetRangeHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetRangeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetRangeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetRangeHeadersAccountContext) SetAccountId(v string) *GetRangeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetRangeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetRangeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetRangeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetRangeShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetRangeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetRangeShrinkHeaders) SetAccountContextShrink(v string) *GetRangeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetRangeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// example:
	//
	// values
	Select *string `json:"Select,omitempty" xml:"Select,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                       `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *GetRangeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s GetRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRangeRequest) GoString() string {
	return s.String()
}

func (s *GetRangeRequest) SetRangeAddress(v string) *GetRangeRequest {
	s.RangeAddress = &v
	return s
}

func (s *GetRangeRequest) SetSelect(v string) *GetRangeRequest {
	s.Select = &v
	return s
}

func (s *GetRangeRequest) SetSheetId(v string) *GetRangeRequest {
	s.SheetId = &v
	return s
}

func (s *GetRangeRequest) SetTenantContext(v *GetRangeRequestTenantContext) *GetRangeRequest {
	s.TenantContext = v
	return s
}

func (s *GetRangeRequest) SetWorkbookId(v string) *GetRangeRequest {
	s.WorkbookId = &v
	return s
}

type GetRangeRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetRangeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetRangeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetRangeRequestTenantContext) SetTenantId(v string) *GetRangeRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetRangeShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// example:
	//
	// values
	Select *string `json:"Select,omitempty" xml:"Select,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s GetRangeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRangeShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetRangeShrinkRequest) SetRangeAddress(v string) *GetRangeShrinkRequest {
	s.RangeAddress = &v
	return s
}

func (s *GetRangeShrinkRequest) SetSelect(v string) *GetRangeShrinkRequest {
	s.Select = &v
	return s
}

func (s *GetRangeShrinkRequest) SetSheetId(v string) *GetRangeShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *GetRangeShrinkRequest) SetTenantContextShrink(v string) *GetRangeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetRangeShrinkRequest) SetWorkbookId(v string) *GetRangeShrinkRequest {
	s.WorkbookId = &v
	return s
}

type GetRangeResponseBody struct {
	// example:
	//
	// []
	BackgroundColors [][]*GetRangeResponseBodyBackgroundColors `json:"backgroundColors,omitempty" xml:"backgroundColors,omitempty" type:"Repeated"`
	// example:
	//
	// []
	DisplayValues [][]*string `json:"displayValues,omitempty" xml:"displayValues,omitempty" type:"Repeated"`
	// example:
	//
	// []
	Formulas [][]*string `json:"formulas,omitempty" xml:"formulas,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// []
	Values [][]interface{} `json:"values,omitempty" xml:"values,omitempty" type:"Repeated"`
}

func (s GetRangeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRangeResponseBody) GoString() string {
	return s.String()
}

func (s *GetRangeResponseBody) SetBackgroundColors(v [][]*GetRangeResponseBodyBackgroundColors) *GetRangeResponseBody {
	s.BackgroundColors = v
	return s
}

func (s *GetRangeResponseBody) SetDisplayValues(v [][]*string) *GetRangeResponseBody {
	s.DisplayValues = v
	return s
}

func (s *GetRangeResponseBody) SetFormulas(v [][]*string) *GetRangeResponseBody {
	s.Formulas = v
	return s
}

func (s *GetRangeResponseBody) SetRequestId(v string) *GetRangeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRangeResponseBody) SetValues(v [][]interface{}) *GetRangeResponseBody {
	s.Values = v
	return s
}

type GetRangeResponseBodyBackgroundColors struct {
	// red
	//
	// example:
	//
	// 0
	Red *int32 `json:"Red,omitempty" xml:"Red,omitempty"`
	// green
	//
	// example:
	//
	// 0
	Green *int32 `json:"Green,omitempty" xml:"Green,omitempty"`
	// blue
	//
	// example:
	//
	// 0
	Blue *int32 `json:"Blue,omitempty" xml:"Blue,omitempty"`
	// hexString
	//
	// example:
	//
	// #000000
	HexString *string `json:"HexString,omitempty" xml:"HexString,omitempty"`
}

func (s GetRangeResponseBodyBackgroundColors) String() string {
	return tea.Prettify(s)
}

func (s GetRangeResponseBodyBackgroundColors) GoString() string {
	return s.String()
}

func (s *GetRangeResponseBodyBackgroundColors) SetRed(v int32) *GetRangeResponseBodyBackgroundColors {
	s.Red = &v
	return s
}

func (s *GetRangeResponseBodyBackgroundColors) SetGreen(v int32) *GetRangeResponseBodyBackgroundColors {
	s.Green = &v
	return s
}

func (s *GetRangeResponseBodyBackgroundColors) SetBlue(v int32) *GetRangeResponseBodyBackgroundColors {
	s.Blue = &v
	return s
}

func (s *GetRangeResponseBodyBackgroundColors) SetHexString(v string) *GetRangeResponseBodyBackgroundColors {
	s.HexString = &v
	return s
}

type GetRangeResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRangeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRangeResponse) GoString() string {
	return s.String()
}

func (s *GetRangeResponse) SetHeaders(v map[string]*string) *GetRangeResponse {
	s.Headers = v
	return s
}

func (s *GetRangeResponse) SetStatusCode(v int32) *GetRangeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRangeResponse) SetBody(v *GetRangeResponseBody) *GetRangeResponse {
	s.Body = v
	return s
}

type GetRelatedWorkspacesHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetRelatedWorkspacesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetRelatedWorkspacesHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesHeaders) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesHeaders) SetCommonHeaders(v map[string]*string) *GetRelatedWorkspacesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetRelatedWorkspacesHeaders) SetAccountContext(v *GetRelatedWorkspacesHeadersAccountContext) *GetRelatedWorkspacesHeaders {
	s.AccountContext = v
	return s
}

type GetRelatedWorkspacesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetRelatedWorkspacesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesHeadersAccountContext) SetAccountId(v string) *GetRelatedWorkspacesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetRelatedWorkspacesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetRelatedWorkspacesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetRelatedWorkspacesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetRelatedWorkspacesShrinkHeaders) SetAccountContextShrink(v string) *GetRelatedWorkspacesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetRelatedWorkspacesRequest struct {
	// example:
	//
	// true
	IncludeRecent *bool                                     `json:"IncludeRecent,omitempty" xml:"IncludeRecent,omitempty"`
	TenantContext *GetRelatedWorkspacesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetRelatedWorkspacesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesRequest) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesRequest) SetIncludeRecent(v bool) *GetRelatedWorkspacesRequest {
	s.IncludeRecent = &v
	return s
}

func (s *GetRelatedWorkspacesRequest) SetTenantContext(v *GetRelatedWorkspacesRequestTenantContext) *GetRelatedWorkspacesRequest {
	s.TenantContext = v
	return s
}

type GetRelatedWorkspacesRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetRelatedWorkspacesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesRequestTenantContext) SetTenantId(v string) *GetRelatedWorkspacesRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetRelatedWorkspacesShrinkRequest struct {
	// example:
	//
	// true
	IncludeRecent       *bool   `json:"IncludeRecent,omitempty" xml:"IncludeRecent,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetRelatedWorkspacesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesShrinkRequest) SetIncludeRecent(v bool) *GetRelatedWorkspacesShrinkRequest {
	s.IncludeRecent = &v
	return s
}

func (s *GetRelatedWorkspacesShrinkRequest) SetTenantContextShrink(v string) *GetRelatedWorkspacesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetRelatedWorkspacesResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string                                       `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
	Workspaces []*GetRelatedWorkspacesResponseBodyWorkspaces `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s GetRelatedWorkspacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesResponseBody) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesResponseBody) SetRequestId(v string) *GetRelatedWorkspacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBody) SetVendorRequestId(v string) *GetRelatedWorkspacesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBody) SetVendorType(v string) *GetRelatedWorkspacesResponseBody {
	s.VendorType = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBody) SetWorkspaces(v []*GetRelatedWorkspacesResponseBodyWorkspaces) *GetRelatedWorkspacesResponseBody {
	s.Workspaces = v
	return s
}

type GetRelatedWorkspacesResponseBodyWorkspaces struct {
	// example:
	//
	// 1638256965936
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// false
	Deleted *bool `json:"Deleted,omitempty" xml:"Deleted,omitempty"`
	// example:
	//
	// 知识库
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Q2xwPOKiSLxxxx
	Owner      *string                                                 `json:"Owner,omitempty" xml:"Owner,omitempty"`
	RecentList []*GetRelatedWorkspacesResponseBodyWorkspacesRecentList `json:"RecentList,omitempty" xml:"RecentList,omitempty" type:"Repeated"`
	// example:
	//
	// OWNER
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// example:
	//
	// https://alidocs.xxxx/nb9XJKdxxxxmyAp/docs/nb9XxxxxxxmyAp
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// nb9XJKdxxxxmyAp
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetRelatedWorkspacesResponseBodyWorkspaces) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesResponseBodyWorkspaces) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetCreateTime(v int64) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.CreateTime = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetDeleted(v bool) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.Deleted = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetName(v string) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.Name = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetOwner(v string) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.Owner = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetRecentList(v []*GetRelatedWorkspacesResponseBodyWorkspacesRecentList) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.RecentList = v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetRole(v string) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.Role = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetUrl(v string) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.Url = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspaces) SetWorkspaceId(v string) *GetRelatedWorkspacesResponseBodyWorkspaces {
	s.WorkspaceId = &v
	return s
}

type GetRelatedWorkspacesResponseBodyWorkspacesRecentList struct {
	// example:
	//
	// 1638256965936
	LastEditTime *int64 `json:"LastEditTime,omitempty" xml:"LastEditTime,omitempty"`
	// example:
	//
	// 知识库
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// nb9XxxxxxxmyAp
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// https://alidocs.xxxx/nb9XJKdxxxxmyAp
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetRelatedWorkspacesResponseBodyWorkspacesRecentList) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesResponseBodyWorkspacesRecentList) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesResponseBodyWorkspacesRecentList) SetLastEditTime(v int64) *GetRelatedWorkspacesResponseBodyWorkspacesRecentList {
	s.LastEditTime = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspacesRecentList) SetName(v string) *GetRelatedWorkspacesResponseBodyWorkspacesRecentList {
	s.Name = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspacesRecentList) SetNodeId(v string) *GetRelatedWorkspacesResponseBodyWorkspacesRecentList {
	s.NodeId = &v
	return s
}

func (s *GetRelatedWorkspacesResponseBodyWorkspacesRecentList) SetUrl(v string) *GetRelatedWorkspacesResponseBodyWorkspacesRecentList {
	s.Url = &v
	return s
}

type GetRelatedWorkspacesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRelatedWorkspacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRelatedWorkspacesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRelatedWorkspacesResponse) GoString() string {
	return s.String()
}

func (s *GetRelatedWorkspacesResponse) SetHeaders(v map[string]*string) *GetRelatedWorkspacesResponse {
	s.Headers = v
	return s
}

func (s *GetRelatedWorkspacesResponse) SetStatusCode(v int32) *GetRelatedWorkspacesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRelatedWorkspacesResponse) SetBody(v *GetRelatedWorkspacesResponseBody) *GetRelatedWorkspacesResponse {
	s.Body = v
	return s
}

type GetReportTemplateByNameHeaders struct {
	CommonHeaders  map[string]*string                            `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetReportTemplateByNameHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetReportTemplateByNameHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameHeaders) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameHeaders) SetCommonHeaders(v map[string]*string) *GetReportTemplateByNameHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetReportTemplateByNameHeaders) SetAccountContext(v *GetReportTemplateByNameHeadersAccountContext) *GetReportTemplateByNameHeaders {
	s.AccountContext = v
	return s
}

type GetReportTemplateByNameHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetReportTemplateByNameHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameHeadersAccountContext) SetAccountId(v string) *GetReportTemplateByNameHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetReportTemplateByNameShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetReportTemplateByNameShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetReportTemplateByNameShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetReportTemplateByNameShrinkHeaders) SetAccountContextShrink(v string) *GetReportTemplateByNameShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetReportTemplateByNameRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 我管理的模版
	TemplateName  *string                                      `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TenantContext *GetReportTemplateByNameRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetReportTemplateByNameRequest) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameRequest) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameRequest) SetTemplateName(v string) *GetReportTemplateByNameRequest {
	s.TemplateName = &v
	return s
}

func (s *GetReportTemplateByNameRequest) SetTenantContext(v *GetReportTemplateByNameRequestTenantContext) *GetReportTemplateByNameRequest {
	s.TenantContext = v
	return s
}

type GetReportTemplateByNameRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetReportTemplateByNameRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameRequestTenantContext) SetTenantId(v string) *GetReportTemplateByNameRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetReportTemplateByNameShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 我管理的模版
	TemplateName        *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetReportTemplateByNameShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameShrinkRequest) SetTemplateName(v string) *GetReportTemplateByNameShrinkRequest {
	s.TemplateName = &v
	return s
}

func (s *GetReportTemplateByNameShrinkRequest) SetTenantContextShrink(v string) *GetReportTemplateByNameShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetReportTemplateByNameResponseBody struct {
	DefaultReceivedConvs []*GetReportTemplateByNameResponseBodyDefaultReceivedConvs `json:"defaultReceivedConvs,omitempty" xml:"defaultReceivedConvs,omitempty" type:"Repeated"`
	DefaultReceivers     []*GetReportTemplateByNameResponseBodyDefaultReceivers     `json:"defaultReceivers,omitempty" xml:"defaultReceivers,omitempty" type:"Repeated"`
	Fields               []*GetReportTemplateByNameResponseBodyFields               `json:"fields,omitempty" xml:"fields,omitempty" type:"Repeated"`
	// example:
	//
	// 11111
	Id   *string `json:"id,omitempty" xml:"id,omitempty"`
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	UserName  *string `json:"userName,omitempty" xml:"userName,omitempty"`
	// example:
	//
	// 1234
	Userid *string `json:"userid,omitempty" xml:"userid,omitempty"`
}

func (s GetReportTemplateByNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameResponseBody) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameResponseBody) SetDefaultReceivedConvs(v []*GetReportTemplateByNameResponseBodyDefaultReceivedConvs) *GetReportTemplateByNameResponseBody {
	s.DefaultReceivedConvs = v
	return s
}

func (s *GetReportTemplateByNameResponseBody) SetDefaultReceivers(v []*GetReportTemplateByNameResponseBodyDefaultReceivers) *GetReportTemplateByNameResponseBody {
	s.DefaultReceivers = v
	return s
}

func (s *GetReportTemplateByNameResponseBody) SetFields(v []*GetReportTemplateByNameResponseBodyFields) *GetReportTemplateByNameResponseBody {
	s.Fields = v
	return s
}

func (s *GetReportTemplateByNameResponseBody) SetId(v string) *GetReportTemplateByNameResponseBody {
	s.Id = &v
	return s
}

func (s *GetReportTemplateByNameResponseBody) SetName(v string) *GetReportTemplateByNameResponseBody {
	s.Name = &v
	return s
}

func (s *GetReportTemplateByNameResponseBody) SetRequestId(v string) *GetReportTemplateByNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetReportTemplateByNameResponseBody) SetUserName(v string) *GetReportTemplateByNameResponseBody {
	s.UserName = &v
	return s
}

func (s *GetReportTemplateByNameResponseBody) SetUserid(v string) *GetReportTemplateByNameResponseBody {
	s.Userid = &v
	return s
}

type GetReportTemplateByNameResponseBodyDefaultReceivedConvs struct {
	// example:
	//
	// cid12334##2341
	ConversationId *string `json:"ConversationId,omitempty" xml:"ConversationId,omitempty"`
	Title          *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetReportTemplateByNameResponseBodyDefaultReceivedConvs) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameResponseBodyDefaultReceivedConvs) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameResponseBodyDefaultReceivedConvs) SetConversationId(v string) *GetReportTemplateByNameResponseBodyDefaultReceivedConvs {
	s.ConversationId = &v
	return s
}

func (s *GetReportTemplateByNameResponseBodyDefaultReceivedConvs) SetTitle(v string) *GetReportTemplateByNameResponseBodyDefaultReceivedConvs {
	s.Title = &v
	return s
}

type GetReportTemplateByNameResponseBodyDefaultReceivers struct {
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	// example:
	//
	// 1234
	Userid *string `json:"Userid,omitempty" xml:"Userid,omitempty"`
}

func (s GetReportTemplateByNameResponseBodyDefaultReceivers) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameResponseBodyDefaultReceivers) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameResponseBodyDefaultReceivers) SetUserName(v string) *GetReportTemplateByNameResponseBodyDefaultReceivers {
	s.UserName = &v
	return s
}

func (s *GetReportTemplateByNameResponseBodyDefaultReceivers) SetUserid(v string) *GetReportTemplateByNameResponseBodyDefaultReceivers {
	s.Userid = &v
	return s
}

type GetReportTemplateByNameResponseBodyFields struct {
	// example:
	//
	// key1
	FieldName *string `json:"FieldName,omitempty" xml:"FieldName,omitempty"`
	// example:
	//
	// 0
	Sort *int64 `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// example:
	//
	// 1
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetReportTemplateByNameResponseBodyFields) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameResponseBodyFields) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameResponseBodyFields) SetFieldName(v string) *GetReportTemplateByNameResponseBodyFields {
	s.FieldName = &v
	return s
}

func (s *GetReportTemplateByNameResponseBodyFields) SetSort(v int64) *GetReportTemplateByNameResponseBodyFields {
	s.Sort = &v
	return s
}

func (s *GetReportTemplateByNameResponseBodyFields) SetType(v int64) *GetReportTemplateByNameResponseBodyFields {
	s.Type = &v
	return s
}

type GetReportTemplateByNameResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetReportTemplateByNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetReportTemplateByNameResponse) String() string {
	return tea.Prettify(s)
}

func (s GetReportTemplateByNameResponse) GoString() string {
	return s.String()
}

func (s *GetReportTemplateByNameResponse) SetHeaders(v map[string]*string) *GetReportTemplateByNameResponse {
	s.Headers = v
	return s
}

func (s *GetReportTemplateByNameResponse) SetStatusCode(v int32) *GetReportTemplateByNameResponse {
	s.StatusCode = &v
	return s
}

func (s *GetReportTemplateByNameResponse) SetBody(v *GetReportTemplateByNameResponseBody) *GetReportTemplateByNameResponse {
	s.Body = v
	return s
}

type GetReportUnReadCountHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetReportUnReadCountHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetReportUnReadCountHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountHeaders) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountHeaders) SetCommonHeaders(v map[string]*string) *GetReportUnReadCountHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetReportUnReadCountHeaders) SetAccountContext(v *GetReportUnReadCountHeadersAccountContext) *GetReportUnReadCountHeaders {
	s.AccountContext = v
	return s
}

type GetReportUnReadCountHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetReportUnReadCountHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountHeadersAccountContext) SetAccountId(v string) *GetReportUnReadCountHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetReportUnReadCountShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetReportUnReadCountShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetReportUnReadCountShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetReportUnReadCountShrinkHeaders) SetAccountContextShrink(v string) *GetReportUnReadCountShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetReportUnReadCountRequest struct {
	// example:
	//
	// null
	Request       map[string]interface{}                    `json:"Request,omitempty" xml:"Request,omitempty"`
	TenantContext *GetReportUnReadCountRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetReportUnReadCountRequest) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountRequest) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountRequest) SetRequest(v map[string]interface{}) *GetReportUnReadCountRequest {
	s.Request = v
	return s
}

func (s *GetReportUnReadCountRequest) SetTenantContext(v *GetReportUnReadCountRequestTenantContext) *GetReportUnReadCountRequest {
	s.TenantContext = v
	return s
}

type GetReportUnReadCountRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetReportUnReadCountRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountRequestTenantContext) SetTenantId(v string) *GetReportUnReadCountRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetReportUnReadCountShrinkRequest struct {
	// example:
	//
	// null
	RequestShrink       *string `json:"Request,omitempty" xml:"Request,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetReportUnReadCountShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountShrinkRequest) SetRequestShrink(v string) *GetReportUnReadCountShrinkRequest {
	s.RequestShrink = &v
	return s
}

func (s *GetReportUnReadCountShrinkRequest) SetTenantContextShrink(v string) *GetReportUnReadCountShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetReportUnReadCountResponseBody struct {
	// example:
	//
	// 1
	Count *int64 `json:"count,omitempty" xml:"count,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetReportUnReadCountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountResponseBody) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountResponseBody) SetCount(v int64) *GetReportUnReadCountResponseBody {
	s.Count = &v
	return s
}

func (s *GetReportUnReadCountResponseBody) SetRequestId(v string) *GetReportUnReadCountResponseBody {
	s.RequestId = &v
	return s
}

type GetReportUnReadCountResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetReportUnReadCountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetReportUnReadCountResponse) String() string {
	return tea.Prettify(s)
}

func (s GetReportUnReadCountResponse) GoString() string {
	return s.String()
}

func (s *GetReportUnReadCountResponse) SetHeaders(v map[string]*string) *GetReportUnReadCountResponse {
	s.Headers = v
	return s
}

func (s *GetReportUnReadCountResponse) SetStatusCode(v int32) *GetReportUnReadCountResponse {
	s.StatusCode = &v
	return s
}

func (s *GetReportUnReadCountResponse) SetBody(v *GetReportUnReadCountResponseBody) *GetReportUnReadCountResponse {
	s.Body = v
	return s
}

type GetRunningTasksHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetRunningTasksHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetRunningTasksHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetRunningTasksHeaders) GoString() string {
	return s.String()
}

func (s *GetRunningTasksHeaders) SetCommonHeaders(v map[string]*string) *GetRunningTasksHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetRunningTasksHeaders) SetAccountContext(v *GetRunningTasksHeadersAccountContext) *GetRunningTasksHeaders {
	s.AccountContext = v
	return s
}

type GetRunningTasksHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetRunningTasksHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetRunningTasksHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetRunningTasksHeadersAccountContext) SetAccountId(v string) *GetRunningTasksHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetRunningTasksShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetRunningTasksShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetRunningTasksShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetRunningTasksShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetRunningTasksShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetRunningTasksShrinkHeaders) SetAccountContextShrink(v string) *GetRunningTasksShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetRunningTasksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// ["xx","xxx"]
	ProcessCodes *string `json:"ProcessCodes,omitempty" xml:"ProcessCodes,omitempty"`
	// example:
	//
	// instxxxxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetRunningTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRunningTasksRequest) GoString() string {
	return s.String()
}

func (s *GetRunningTasksRequest) SetAppType(v string) *GetRunningTasksRequest {
	s.AppType = &v
	return s
}

func (s *GetRunningTasksRequest) SetLanguage(v string) *GetRunningTasksRequest {
	s.Language = &v
	return s
}

func (s *GetRunningTasksRequest) SetProcessCodes(v string) *GetRunningTasksRequest {
	s.ProcessCodes = &v
	return s
}

func (s *GetRunningTasksRequest) SetProcessInstanceId(v string) *GetRunningTasksRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetRunningTasksRequest) SetSystemToken(v string) *GetRunningTasksRequest {
	s.SystemToken = &v
	return s
}

type GetRunningTasksResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// [{}]
	Result []*GetRunningTasksResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetRunningTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRunningTasksResponseBody) GoString() string {
	return s.String()
}

func (s *GetRunningTasksResponseBody) SetRequestId(v string) *GetRunningTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRunningTasksResponseBody) SetResult(v []*GetRunningTasksResponseBodyResult) *GetRunningTasksResponseBody {
	s.Result = v
	return s
}

func (s *GetRunningTasksResponseBody) SetVendorRequestId(v string) *GetRunningTasksResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetRunningTasksResponseBody) SetVendorType(v string) *GetRunningTasksResponseBody {
	s.VendorType = &v
	return s
}

type GetRunningTasksResponseBodyResult struct {
	// example:
	//
	// 2020-01-01
	ActiveTimeGMT *string `json:"ActiveTimeGMT,omitempty" xml:"ActiveTimeGMT,omitempty"`
	// example:
	//
	// act-xxaanfaf
	ActivityId *string `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	// example:
	//
	// 123456
	ActualActionerId *string `json:"ActualActionerId,omitempty" xml:"ActualActionerId,omitempty"`
	// example:
	//
	// 2020-01-01
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// 2020-01-01
	FinishTimeGMT *string `json:"FinishTimeGMT,omitempty" xml:"FinishTimeGMT,omitempty"`
	// example:
	//
	// 123456
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// instancexxxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// taskId
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// append task
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// title
	TitleInEnglish *string `json:"TitleInEnglish,omitempty" xml:"TitleInEnglish,omitempty"`
}

func (s GetRunningTasksResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetRunningTasksResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetRunningTasksResponseBodyResult) SetActiveTimeGMT(v string) *GetRunningTasksResponseBodyResult {
	s.ActiveTimeGMT = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetActivityId(v string) *GetRunningTasksResponseBodyResult {
	s.ActivityId = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetActualActionerId(v string) *GetRunningTasksResponseBodyResult {
	s.ActualActionerId = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetCreateTimeGMT(v string) *GetRunningTasksResponseBodyResult {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetFinishTimeGMT(v string) *GetRunningTasksResponseBodyResult {
	s.FinishTimeGMT = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetOriginatorId(v string) *GetRunningTasksResponseBodyResult {
	s.OriginatorId = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetProcessInstanceId(v string) *GetRunningTasksResponseBodyResult {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetStatus(v string) *GetRunningTasksResponseBodyResult {
	s.Status = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetTaskId(v string) *GetRunningTasksResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetTaskType(v string) *GetRunningTasksResponseBodyResult {
	s.TaskType = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetTitle(v string) *GetRunningTasksResponseBodyResult {
	s.Title = &v
	return s
}

func (s *GetRunningTasksResponseBodyResult) SetTitleInEnglish(v string) *GetRunningTasksResponseBodyResult {
	s.TitleInEnglish = &v
	return s
}

type GetRunningTasksResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetRunningTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetRunningTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRunningTasksResponse) GoString() string {
	return s.String()
}

func (s *GetRunningTasksResponse) SetHeaders(v map[string]*string) *GetRunningTasksResponse {
	s.Headers = v
	return s
}

func (s *GetRunningTasksResponse) SetStatusCode(v int32) *GetRunningTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRunningTasksResponse) SetBody(v *GetRunningTasksResponseBody) *GetRunningTasksResponse {
	s.Body = v
	return s
}

type GetScheduleHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetScheduleHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetScheduleHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleHeaders) GoString() string {
	return s.String()
}

func (s *GetScheduleHeaders) SetCommonHeaders(v map[string]*string) *GetScheduleHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetScheduleHeaders) SetAccountContext(v *GetScheduleHeadersAccountContext) *GetScheduleHeaders {
	s.AccountContext = v
	return s
}

type GetScheduleHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetScheduleHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetScheduleHeadersAccountContext) SetAccountId(v string) *GetScheduleHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetScheduleShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetScheduleShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetScheduleShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetScheduleShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetScheduleShrinkHeaders) SetAccountContextShrink(v string) *GetScheduleShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetScheduleRequest struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	StartTime     *string                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *GetScheduleRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	UserIds       []*string                        `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s GetScheduleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleRequest) GoString() string {
	return s.String()
}

func (s *GetScheduleRequest) SetEndTime(v string) *GetScheduleRequest {
	s.EndTime = &v
	return s
}

func (s *GetScheduleRequest) SetStartTime(v string) *GetScheduleRequest {
	s.StartTime = &v
	return s
}

func (s *GetScheduleRequest) SetTenantContext(v *GetScheduleRequestTenantContext) *GetScheduleRequest {
	s.TenantContext = v
	return s
}

func (s *GetScheduleRequest) SetUserIds(v []*string) *GetScheduleRequest {
	s.UserIds = v
	return s
}

type GetScheduleRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetScheduleRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetScheduleRequestTenantContext) SetTenantId(v string) *GetScheduleRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetScheduleShrinkRequest struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	StartTime           *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	UserIdsShrink       *string `json:"UserIds,omitempty" xml:"UserIds,omitempty"`
}

func (s GetScheduleShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetScheduleShrinkRequest) SetEndTime(v string) *GetScheduleShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *GetScheduleShrinkRequest) SetStartTime(v string) *GetScheduleShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *GetScheduleShrinkRequest) SetTenantContextShrink(v string) *GetScheduleShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetScheduleShrinkRequest) SetUserIdsShrink(v string) *GetScheduleShrinkRequest {
	s.UserIdsShrink = &v
	return s
}

type GetScheduleResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId           *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	ScheduleInformation []*GetScheduleResponseBodyScheduleInformation `json:"scheduleInformation,omitempty" xml:"scheduleInformation,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetScheduleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleResponseBody) GoString() string {
	return s.String()
}

func (s *GetScheduleResponseBody) SetRequestId(v string) *GetScheduleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetScheduleResponseBody) SetScheduleInformation(v []*GetScheduleResponseBodyScheduleInformation) *GetScheduleResponseBody {
	s.ScheduleInformation = v
	return s
}

func (s *GetScheduleResponseBody) SetVendorRequestId(v string) *GetScheduleResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetScheduleResponseBody) SetVendorType(v string) *GetScheduleResponseBody {
	s.VendorType = &v
	return s
}

type GetScheduleResponseBodyScheduleInformation struct {
	// example:
	//
	// 无权限
	Error         *string                                                    `json:"Error,omitempty" xml:"Error,omitempty"`
	ScheduleItems []*GetScheduleResponseBodyScheduleInformationScheduleItems `json:"ScheduleItems,omitempty" xml:"ScheduleItems,omitempty" type:"Repeated"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetScheduleResponseBodyScheduleInformation) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleResponseBodyScheduleInformation) GoString() string {
	return s.String()
}

func (s *GetScheduleResponseBodyScheduleInformation) SetError(v string) *GetScheduleResponseBodyScheduleInformation {
	s.Error = &v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformation) SetScheduleItems(v []*GetScheduleResponseBodyScheduleInformationScheduleItems) *GetScheduleResponseBodyScheduleInformation {
	s.ScheduleItems = v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformation) SetUserId(v string) *GetScheduleResponseBodyScheduleInformation {
	s.UserId = &v
	return s
}

type GetScheduleResponseBodyScheduleInformationScheduleItems struct {
	End   *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd   `json:"End,omitempty" xml:"End,omitempty" type:"Struct"`
	Start *GetScheduleResponseBodyScheduleInformationScheduleItemsStart `json:"Start,omitempty" xml:"Start,omitempty" type:"Struct"`
	// example:
	//
	// BUSY
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetScheduleResponseBodyScheduleInformationScheduleItems) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleResponseBodyScheduleInformationScheduleItems) GoString() string {
	return s.String()
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItems) SetEnd(v *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd) *GetScheduleResponseBodyScheduleInformationScheduleItems {
	s.End = v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItems) SetStart(v *GetScheduleResponseBodyScheduleInformationScheduleItemsStart) *GetScheduleResponseBodyScheduleInformationScheduleItems {
	s.Start = v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItems) SetStatus(v string) *GetScheduleResponseBodyScheduleInformationScheduleItems {
	s.Status = &v
	return s
}

type GetScheduleResponseBodyScheduleInformationScheduleItemsEnd struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s GetScheduleResponseBodyScheduleInformationScheduleItemsEnd) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleResponseBodyScheduleInformationScheduleItemsEnd) GoString() string {
	return s.String()
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd) SetDate(v string) *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd {
	s.Date = &v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd) SetDateTime(v string) *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd {
	s.DateTime = &v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd) SetTimeZone(v string) *GetScheduleResponseBodyScheduleInformationScheduleItemsEnd {
	s.TimeZone = &v
	return s
}

type GetScheduleResponseBodyScheduleInformationScheduleItemsStart struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s GetScheduleResponseBodyScheduleInformationScheduleItemsStart) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleResponseBodyScheduleInformationScheduleItemsStart) GoString() string {
	return s.String()
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItemsStart) SetDate(v string) *GetScheduleResponseBodyScheduleInformationScheduleItemsStart {
	s.Date = &v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItemsStart) SetDateTime(v string) *GetScheduleResponseBodyScheduleInformationScheduleItemsStart {
	s.DateTime = &v
	return s
}

func (s *GetScheduleResponseBodyScheduleInformationScheduleItemsStart) SetTimeZone(v string) *GetScheduleResponseBodyScheduleInformationScheduleItemsStart {
	s.TimeZone = &v
	return s
}

type GetScheduleResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetScheduleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetScheduleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetScheduleResponse) GoString() string {
	return s.String()
}

func (s *GetScheduleResponse) SetHeaders(v map[string]*string) *GetScheduleResponse {
	s.Headers = v
	return s
}

func (s *GetScheduleResponse) SetStatusCode(v int32) *GetScheduleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetScheduleResponse) SetBody(v *GetScheduleResponseBody) *GetScheduleResponse {
	s.Body = v
	return s
}

type GetSheetHeaders struct {
	CommonHeaders  map[string]*string             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetSheetHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetSheetHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSheetHeaders) GoString() string {
	return s.String()
}

func (s *GetSheetHeaders) SetCommonHeaders(v map[string]*string) *GetSheetHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSheetHeaders) SetAccountContext(v *GetSheetHeadersAccountContext) *GetSheetHeaders {
	s.AccountContext = v
	return s
}

type GetSheetHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetSheetHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetSheetHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetSheetHeadersAccountContext) SetAccountId(v string) *GetSheetHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetSheetShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetSheetShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSheetShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetSheetShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetSheetShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSheetShrinkHeaders) SetAccountContextShrink(v string) *GetSheetShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetSheetRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                       `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *GetSheetRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s GetSheetRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSheetRequest) GoString() string {
	return s.String()
}

func (s *GetSheetRequest) SetSheetId(v string) *GetSheetRequest {
	s.SheetId = &v
	return s
}

func (s *GetSheetRequest) SetTenantContext(v *GetSheetRequestTenantContext) *GetSheetRequest {
	s.TenantContext = v
	return s
}

func (s *GetSheetRequest) SetWorkbookId(v string) *GetSheetRequest {
	s.WorkbookId = &v
	return s
}

type GetSheetRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetSheetRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetSheetRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetSheetRequestTenantContext) SetTenantId(v string) *GetSheetRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetSheetShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s GetSheetShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSheetShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetSheetShrinkRequest) SetSheetId(v string) *GetSheetShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *GetSheetShrinkRequest) SetTenantContextShrink(v string) *GetSheetShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetSheetShrinkRequest) SetWorkbookId(v string) *GetSheetShrinkRequest {
	s.WorkbookId = &v
	return s
}

type GetSheetResponseBody struct {
	// example:
	//
	// 20
	ColumnCount *int64 `json:"columnCount,omitempty" xml:"columnCount,omitempty"`
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 1
	LastNonEmptyColumn *int64 `json:"lastNonEmptyColumn,omitempty" xml:"lastNonEmptyColumn,omitempty"`
	// example:
	//
	// 2
	LastNonEmptyRow *int64 `json:"lastNonEmptyRow,omitempty" xml:"lastNonEmptyRow,omitempty"`
	// example:
	//
	// Sheet1
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	RowCount *int64 `json:"rowCount,omitempty" xml:"rowCount,omitempty"`
	// example:
	//
	// visible
	Visibility *string `json:"visibility,omitempty" xml:"visibility,omitempty"`
}

func (s GetSheetResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSheetResponseBody) GoString() string {
	return s.String()
}

func (s *GetSheetResponseBody) SetColumnCount(v int64) *GetSheetResponseBody {
	s.ColumnCount = &v
	return s
}

func (s *GetSheetResponseBody) SetId(v string) *GetSheetResponseBody {
	s.Id = &v
	return s
}

func (s *GetSheetResponseBody) SetLastNonEmptyColumn(v int64) *GetSheetResponseBody {
	s.LastNonEmptyColumn = &v
	return s
}

func (s *GetSheetResponseBody) SetLastNonEmptyRow(v int64) *GetSheetResponseBody {
	s.LastNonEmptyRow = &v
	return s
}

func (s *GetSheetResponseBody) SetName(v string) *GetSheetResponseBody {
	s.Name = &v
	return s
}

func (s *GetSheetResponseBody) SetRequestId(v string) *GetSheetResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSheetResponseBody) SetRowCount(v int64) *GetSheetResponseBody {
	s.RowCount = &v
	return s
}

func (s *GetSheetResponseBody) SetVisibility(v string) *GetSheetResponseBody {
	s.Visibility = &v
	return s
}

type GetSheetResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSheetResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSheetResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSheetResponse) GoString() string {
	return s.String()
}

func (s *GetSheetResponse) SetHeaders(v map[string]*string) *GetSheetResponse {
	s.Headers = v
	return s
}

func (s *GetSheetResponse) SetStatusCode(v int32) *GetSheetResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSheetResponse) SetBody(v *GetSheetResponseBody) *GetSheetResponse {
	s.Body = v
	return s
}

type GetSheetContentJobIdHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetSheetContentJobIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetSheetContentJobIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdHeaders) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdHeaders) SetCommonHeaders(v map[string]*string) *GetSheetContentJobIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSheetContentJobIdHeaders) SetAccountContext(v *GetSheetContentJobIdHeadersAccountContext) *GetSheetContentJobIdHeaders {
	s.AccountContext = v
	return s
}

type GetSheetContentJobIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetSheetContentJobIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdHeadersAccountContext) SetAccountId(v string) *GetSheetContentJobIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetSheetContentJobIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetSheetContentJobIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetSheetContentJobIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSheetContentJobIdShrinkHeaders) SetAccountContextShrink(v string) *GetSheetContentJobIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetSheetContentJobIdRequest struct {
	// example:
	//
	// MNDoBb60VLYDGNPytQe7Gzp4JlemrZQ3
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	// example:
	//
	// dingTalksheetToxlsx
	ExportType    *string                                   `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	TenantContext *GetSheetContentJobIdRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetSheetContentJobIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdRequest) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdRequest) SetDentryUuid(v string) *GetSheetContentJobIdRequest {
	s.DentryUuid = &v
	return s
}

func (s *GetSheetContentJobIdRequest) SetExportType(v string) *GetSheetContentJobIdRequest {
	s.ExportType = &v
	return s
}

func (s *GetSheetContentJobIdRequest) SetTenantContext(v *GetSheetContentJobIdRequestTenantContext) *GetSheetContentJobIdRequest {
	s.TenantContext = v
	return s
}

type GetSheetContentJobIdRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetSheetContentJobIdRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdRequestTenantContext) SetTenantId(v string) *GetSheetContentJobIdRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetSheetContentJobIdShrinkRequest struct {
	// example:
	//
	// MNDoBb60VLYDGNPytQe7Gzp4JlemrZQ3
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	// example:
	//
	// dingTalksheetToxlsx
	ExportType          *string `json:"ExportType,omitempty" xml:"ExportType,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetSheetContentJobIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdShrinkRequest) SetDentryUuid(v string) *GetSheetContentJobIdShrinkRequest {
	s.DentryUuid = &v
	return s
}

func (s *GetSheetContentJobIdShrinkRequest) SetExportType(v string) *GetSheetContentJobIdShrinkRequest {
	s.ExportType = &v
	return s
}

func (s *GetSheetContentJobIdShrinkRequest) SetTenantContextShrink(v string) *GetSheetContentJobIdShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetSheetContentJobIdResponseBody struct {
	// example:
	//
	// 14640056080
	JobId *string `json:"jobId,omitempty" xml:"jobId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// init
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetSheetContentJobIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdResponseBody) SetJobId(v string) *GetSheetContentJobIdResponseBody {
	s.JobId = &v
	return s
}

func (s *GetSheetContentJobIdResponseBody) SetRequestId(v string) *GetSheetContentJobIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSheetContentJobIdResponseBody) SetStatus(v string) *GetSheetContentJobIdResponseBody {
	s.Status = &v
	return s
}

func (s *GetSheetContentJobIdResponseBody) SetVendorRequestId(v string) *GetSheetContentJobIdResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetSheetContentJobIdResponseBody) SetVendorType(v string) *GetSheetContentJobIdResponseBody {
	s.VendorType = &v
	return s
}

type GetSheetContentJobIdResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSheetContentJobIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSheetContentJobIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSheetContentJobIdResponse) GoString() string {
	return s.String()
}

func (s *GetSheetContentJobIdResponse) SetHeaders(v map[string]*string) *GetSheetContentJobIdResponse {
	s.Headers = v
	return s
}

func (s *GetSheetContentJobIdResponse) SetStatusCode(v int32) *GetSheetContentJobIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSheetContentJobIdResponse) SetBody(v *GetSheetContentJobIdResponseBody) *GetSheetContentJobIdResponse {
	s.Body = v
	return s
}

type GetSpaceDirectoriesHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetSpaceDirectoriesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetSpaceDirectoriesHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesHeaders) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesHeaders) SetCommonHeaders(v map[string]*string) *GetSpaceDirectoriesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSpaceDirectoriesHeaders) SetAccountContext(v *GetSpaceDirectoriesHeadersAccountContext) *GetSpaceDirectoriesHeaders {
	s.AccountContext = v
	return s
}

type GetSpaceDirectoriesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetSpaceDirectoriesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesHeadersAccountContext) SetAccountId(v string) *GetSpaceDirectoriesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetSpaceDirectoriesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetSpaceDirectoriesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetSpaceDirectoriesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSpaceDirectoriesShrinkHeaders) SetAccountContextShrink(v string) *GetSpaceDirectoriesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetSpaceDirectoriesRequest struct {
	// example:
	//
	// asdasd
	DentryId *string `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 30
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 123123
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// qweqwe
	SpaceId       *string                                  `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContext *GetSpaceDirectoriesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetSpaceDirectoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesRequest) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesRequest) SetDentryId(v string) *GetSpaceDirectoriesRequest {
	s.DentryId = &v
	return s
}

func (s *GetSpaceDirectoriesRequest) SetMaxResults(v int32) *GetSpaceDirectoriesRequest {
	s.MaxResults = &v
	return s
}

func (s *GetSpaceDirectoriesRequest) SetNextToken(v string) *GetSpaceDirectoriesRequest {
	s.NextToken = &v
	return s
}

func (s *GetSpaceDirectoriesRequest) SetSpaceId(v string) *GetSpaceDirectoriesRequest {
	s.SpaceId = &v
	return s
}

func (s *GetSpaceDirectoriesRequest) SetTenantContext(v *GetSpaceDirectoriesRequestTenantContext) *GetSpaceDirectoriesRequest {
	s.TenantContext = v
	return s
}

type GetSpaceDirectoriesRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetSpaceDirectoriesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesRequestTenantContext) SetTenantId(v string) *GetSpaceDirectoriesRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetSpaceDirectoriesShrinkRequest struct {
	// example:
	//
	// asdasd
	DentryId *string `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 30
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 123123
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// qweqwe
	SpaceId             *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetSpaceDirectoriesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesShrinkRequest) SetDentryId(v string) *GetSpaceDirectoriesShrinkRequest {
	s.DentryId = &v
	return s
}

func (s *GetSpaceDirectoriesShrinkRequest) SetMaxResults(v int32) *GetSpaceDirectoriesShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *GetSpaceDirectoriesShrinkRequest) SetNextToken(v string) *GetSpaceDirectoriesShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *GetSpaceDirectoriesShrinkRequest) SetSpaceId(v string) *GetSpaceDirectoriesShrinkRequest {
	s.SpaceId = &v
	return s
}

func (s *GetSpaceDirectoriesShrinkRequest) SetTenantContextShrink(v string) *GetSpaceDirectoriesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetSpaceDirectoriesResponseBody struct {
	Children []*GetSpaceDirectoriesResponseBodyChildren `json:"children,omitempty" xml:"children,omitempty" type:"Repeated"`
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 1296
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s GetSpaceDirectoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBody) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBody) SetChildren(v []*GetSpaceDirectoriesResponseBodyChildren) *GetSpaceDirectoriesResponseBody {
	s.Children = v
	return s
}

func (s *GetSpaceDirectoriesResponseBody) SetHasMore(v bool) *GetSpaceDirectoriesResponseBody {
	s.HasMore = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBody) SetNextToken(v string) *GetSpaceDirectoriesResponseBody {
	s.NextToken = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBody) SetRequestId(v string) *GetSpaceDirectoriesResponseBody {
	s.RequestId = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildren struct {
	// example:
	//
	// alidoc
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// example:
	//
	// 12345678
	CreatedTime *int64                                          `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Creator     *GetSpaceDirectoriesResponseBodyChildrenCreator `json:"Creator,omitempty" xml:"Creator,omitempty" type:"Struct"`
	// example:
	//
	// abc
	DentryId *string `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	// example:
	//
	// file
	DentryType *string `json:"DentryType,omitempty" xml:"DentryType,omitempty"`
	// example:
	//
	// cdefg
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	// example:
	//
	// aabbcc
	DocKey *string `json:"DocKey,omitempty" xml:"DocKey,omitempty"`
	// example:
	//
	// alidoc
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// false
	HasChildren    *bool                                                  `json:"HasChildren,omitempty" xml:"HasChildren,omitempty"`
	LinkSourceInfo *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo `json:"LinkSourceInfo,omitempty" xml:"LinkSourceInfo,omitempty" type:"Struct"`
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 测试组织/测试知识库/abc
	Path  *string                                       `json:"Path,omitempty" xml:"Path,omitempty"`
	Space *GetSpaceDirectoriesResponseBodyChildrenSpace `json:"Space,omitempty" xml:"Space,omitempty" type:"Struct"`
	// example:
	//
	// bcd
	SpaceId         *string                                                 `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	StatisticalInfo *GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo `json:"StatisticalInfo,omitempty" xml:"StatisticalInfo,omitempty" type:"Struct"`
	// example:
	//
	// 12345678
	UpdatedTime *int64                                          `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	Updater     *GetSpaceDirectoriesResponseBodyChildrenUpdater `json:"Updater,omitempty" xml:"Updater,omitempty" type:"Struct"`
	// example:
	//
	// https://xxx.yy
	Url         *string                                             `json:"Url,omitempty" xml:"Url,omitempty"`
	VisitorInfo *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo `json:"VisitorInfo,omitempty" xml:"VisitorInfo,omitempty" type:"Struct"`
}

func (s GetSpaceDirectoriesResponseBodyChildren) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildren) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetContentType(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.ContentType = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetCreatedTime(v int64) *GetSpaceDirectoriesResponseBodyChildren {
	s.CreatedTime = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetCreator(v *GetSpaceDirectoriesResponseBodyChildrenCreator) *GetSpaceDirectoriesResponseBodyChildren {
	s.Creator = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetDentryId(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.DentryId = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetDentryType(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.DentryType = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetDentryUuid(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.DentryUuid = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetDocKey(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.DocKey = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetExtension(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.Extension = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetHasChildren(v bool) *GetSpaceDirectoriesResponseBodyChildren {
	s.HasChildren = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetLinkSourceInfo(v *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) *GetSpaceDirectoriesResponseBodyChildren {
	s.LinkSourceInfo = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetName(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.Name = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetPath(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.Path = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetSpace(v *GetSpaceDirectoriesResponseBodyChildrenSpace) *GetSpaceDirectoriesResponseBodyChildren {
	s.Space = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetSpaceId(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.SpaceId = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetStatisticalInfo(v *GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo) *GetSpaceDirectoriesResponseBodyChildren {
	s.StatisticalInfo = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetUpdatedTime(v int64) *GetSpaceDirectoriesResponseBodyChildren {
	s.UpdatedTime = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetUpdater(v *GetSpaceDirectoriesResponseBodyChildrenUpdater) *GetSpaceDirectoriesResponseBodyChildren {
	s.Updater = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetUrl(v string) *GetSpaceDirectoriesResponseBodyChildren {
	s.Url = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildren) SetVisitorInfo(v *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo) *GetSpaceDirectoriesResponseBodyChildren {
	s.VisitorInfo = v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenCreator struct {
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenCreator) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenCreator) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenCreator) SetName(v string) *GetSpaceDirectoriesResponseBodyChildrenCreator {
	s.Name = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenCreator) SetUserId(v string) *GetSpaceDirectoriesResponseBodyChildrenCreator {
	s.UserId = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo struct {
	// example:
	//
	// docx
	Extension *string                                                       `json:"Extension,omitempty" xml:"Extension,omitempty"`
	IconUrl   *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl `json:"IconUrl,omitempty" xml:"IconUrl,omitempty" type:"Struct"`
	// example:
	//
	// def
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 0
	LinkType *int64 `json:"LinkType,omitempty" xml:"LinkType,omitempty"`
	// example:
	//
	// def
	SpaceId *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) SetExtension(v string) *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo {
	s.Extension = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) SetIconUrl(v *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl) *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo {
	s.IconUrl = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) SetId(v string) *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo {
	s.Id = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) SetLinkType(v int64) *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo {
	s.LinkType = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo) SetSpaceId(v string) *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfo {
	s.SpaceId = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl struct {
	// example:
	//
	// gh
	Line *string `json:"Line,omitempty" xml:"Line,omitempty"`
	// example:
	//
	// def
	Small *string `json:"Small,omitempty" xml:"Small,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl) SetLine(v string) *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl {
	s.Line = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl) SetSmall(v string) *GetSpaceDirectoriesResponseBodyChildrenLinkSourceInfoIconUrl {
	s.Small = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenSpace struct {
	// example:
	//
	// https://img.alicdn.com/imgextra/i1/O1xxxxx.png
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 这是简介
	Description *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	HdIconVO    *GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO `json:"HdIconVO,omitempty" xml:"HdIconVO,omitempty" type:"Struct"`
	IconVO      *GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO   `json:"IconVO,omitempty" xml:"IconVO,omitempty" type:"Struct"`
	// example:
	//
	// n9XJxxxxx
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 测试知识库
	Owner      *GetSpaceDirectoriesResponseBodyChildrenSpaceOwner `json:"Owner,omitempty" xml:"Owner,omitempty" type:"Struct"`
	RecentList []interface{}                                      `json:"RecentList,omitempty" xml:"RecentList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview
	Url         *string                                                  `json:"Url,omitempty" xml:"Url,omitempty"`
	VisitorInfo *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo `json:"VisitorInfo,omitempty" xml:"VisitorInfo,omitempty" type:"Struct"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpace) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpace) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetCover(v string) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.Cover = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetDescription(v string) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.Description = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetHdIconVO(v *GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.HdIconVO = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetIconVO(v *GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.IconVO = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetId(v string) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.Id = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetName(v string) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.Name = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetOwner(v *GetSpaceDirectoriesResponseBodyChildrenSpaceOwner) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.Owner = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetRecentList(v []interface{}) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.RecentList = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetType(v int32) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.Type = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetUrl(v string) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.Url = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpace) SetVisitorInfo(v *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo) *GetSpaceDirectoriesResponseBodyChildrenSpace {
	s.VisitorInfo = v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO struct {
	// example:
	//
	// https://img.alicdn.com/imgextra/i1/xxxxx.png
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// 1
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO) SetIcon(v string) *GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO {
	s.Icon = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO) SetType(v string) *GetSpaceDirectoriesResponseBodyChildrenSpaceHdIconVO {
	s.Type = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO struct {
	// example:
	//
	// https://img.alicdn.com/imgextra/i1/xxxxx.png
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// 1
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO) SetIcon(v string) *GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO {
	s.Icon = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO) SetType(v string) *GetSpaceDirectoriesResponseBodyChildrenSpaceIconVO {
	s.Type = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenSpaceOwner struct {
	// example:
	//
	// 小钉
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceOwner) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceOwner) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceOwner) SetName(v string) *GetSpaceDirectoriesResponseBodyChildrenSpaceOwner {
	s.Name = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceOwner) SetUserId(v string) *GetSpaceDirectoriesResponseBodyChildrenSpaceOwner {
	s.UserId = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo struct {
	// example:
	//
	// GET_DENTRY
	DentryActions []*string `json:"DentryActions,omitempty" xml:"DentryActions,omitempty" type:"Repeated"`
	// example:
	//
	// 3
	RoleCode *string `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	// example:
	//
	// GET_SPACE
	SpaceActions []*string `json:"SpaceActions,omitempty" xml:"SpaceActions,omitempty" type:"Repeated"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo) SetDentryActions(v []*string) *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo {
	s.DentryActions = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo) SetRoleCode(v string) *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo {
	s.RoleCode = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo) SetSpaceActions(v []*string) *GetSpaceDirectoriesResponseBodyChildrenSpaceVisitorInfo {
	s.SpaceActions = v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo struct {
	// WordCount
	//
	// example:
	//
	// 10
	WordCount *int64 `json:"WordCount,omitempty" xml:"WordCount,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo) SetWordCount(v int64) *GetSpaceDirectoriesResponseBodyChildrenStatisticalInfo {
	s.WordCount = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenUpdater struct {
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenUpdater) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenUpdater) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenUpdater) SetName(v string) *GetSpaceDirectoriesResponseBodyChildrenUpdater {
	s.Name = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenUpdater) SetUserId(v string) *GetSpaceDirectoriesResponseBodyChildrenUpdater {
	s.UserId = &v
	return s
}

type GetSpaceDirectoriesResponseBodyChildrenVisitorInfo struct {
	DentryActions []*string `json:"DentryActions,omitempty" xml:"DentryActions,omitempty" type:"Repeated"`
	// example:
	//
	// OWNER
	RoleCode     *string   `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	SpaceActions []*string `json:"SpaceActions,omitempty" xml:"SpaceActions,omitempty" type:"Repeated"`
}

func (s GetSpaceDirectoriesResponseBodyChildrenVisitorInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponseBodyChildrenVisitorInfo) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo) SetDentryActions(v []*string) *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo {
	s.DentryActions = v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo) SetRoleCode(v string) *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo {
	s.RoleCode = &v
	return s
}

func (s *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo) SetSpaceActions(v []*string) *GetSpaceDirectoriesResponseBodyChildrenVisitorInfo {
	s.SpaceActions = v
	return s
}

type GetSpaceDirectoriesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSpaceDirectoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSpaceDirectoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSpaceDirectoriesResponse) GoString() string {
	return s.String()
}

func (s *GetSpaceDirectoriesResponse) SetHeaders(v map[string]*string) *GetSpaceDirectoriesResponse {
	s.Headers = v
	return s
}

func (s *GetSpaceDirectoriesResponse) SetStatusCode(v int32) *GetSpaceDirectoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSpaceDirectoriesResponse) SetBody(v *GetSpaceDirectoriesResponseBody) *GetSpaceDirectoriesResponse {
	s.Body = v
	return s
}

type GetSubscribedCalendarHeaders struct {
	CommonHeaders  map[string]*string                          `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetSubscribedCalendarHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetSubscribedCalendarHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSubscribedCalendarHeaders) GoString() string {
	return s.String()
}

func (s *GetSubscribedCalendarHeaders) SetCommonHeaders(v map[string]*string) *GetSubscribedCalendarHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSubscribedCalendarHeaders) SetAccountContext(v *GetSubscribedCalendarHeadersAccountContext) *GetSubscribedCalendarHeaders {
	s.AccountContext = v
	return s
}

type GetSubscribedCalendarHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetSubscribedCalendarHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetSubscribedCalendarHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetSubscribedCalendarHeadersAccountContext) SetAccountId(v string) *GetSubscribedCalendarHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetSubscribedCalendarShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetSubscribedCalendarShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetSubscribedCalendarShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetSubscribedCalendarShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetSubscribedCalendarShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetSubscribedCalendarShrinkHeaders) SetAccountContextShrink(v string) *GetSubscribedCalendarShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetSubscribedCalendarRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
}

func (s GetSubscribedCalendarRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSubscribedCalendarRequest) GoString() string {
	return s.String()
}

func (s *GetSubscribedCalendarRequest) SetCalendarId(v string) *GetSubscribedCalendarRequest {
	s.CalendarId = &v
	return s
}

type GetSubscribedCalendarResponseBody struct {
	// example:
	//
	// 012345
	Author *string `json:"author,omitempty" xml:"author,omitempty"`
	// example:
	//
	// M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv
	CalendarId *string `json:"calendarId,omitempty" xml:"calendarId,omitempty"`
	// example:
	//
	// 中国传统日历
	Description *string   `json:"description,omitempty" xml:"description,omitempty"`
	Managers    []*string `json:"managers,omitempty" xml:"managers,omitempty" type:"Repeated"`
	// example:
	//
	// 中国传统日历
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId      *string                                          `json:"requestId,omitempty" xml:"requestId,omitempty"`
	SubscribeScope *GetSubscribedCalendarResponseBodySubscribeScope `json:"subscribeScope,omitempty" xml:"subscribeScope,omitempty" type:"Struct"`
}

func (s GetSubscribedCalendarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSubscribedCalendarResponseBody) GoString() string {
	return s.String()
}

func (s *GetSubscribedCalendarResponseBody) SetAuthor(v string) *GetSubscribedCalendarResponseBody {
	s.Author = &v
	return s
}

func (s *GetSubscribedCalendarResponseBody) SetCalendarId(v string) *GetSubscribedCalendarResponseBody {
	s.CalendarId = &v
	return s
}

func (s *GetSubscribedCalendarResponseBody) SetDescription(v string) *GetSubscribedCalendarResponseBody {
	s.Description = &v
	return s
}

func (s *GetSubscribedCalendarResponseBody) SetManagers(v []*string) *GetSubscribedCalendarResponseBody {
	s.Managers = v
	return s
}

func (s *GetSubscribedCalendarResponseBody) SetName(v string) *GetSubscribedCalendarResponseBody {
	s.Name = &v
	return s
}

func (s *GetSubscribedCalendarResponseBody) SetRequestId(v string) *GetSubscribedCalendarResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSubscribedCalendarResponseBody) SetSubscribeScope(v *GetSubscribedCalendarResponseBodySubscribeScope) *GetSubscribedCalendarResponseBody {
	s.SubscribeScope = v
	return s
}

type GetSubscribedCalendarResponseBodySubscribeScope struct {
	CorpIds             []*string `json:"CorpIds,omitempty" xml:"CorpIds,omitempty" type:"Repeated"`
	OpenConversationIds []*string `json:"OpenConversationIds,omitempty" xml:"OpenConversationIds,omitempty" type:"Repeated"`
	UserIds             []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s GetSubscribedCalendarResponseBodySubscribeScope) String() string {
	return tea.Prettify(s)
}

func (s GetSubscribedCalendarResponseBodySubscribeScope) GoString() string {
	return s.String()
}

func (s *GetSubscribedCalendarResponseBodySubscribeScope) SetCorpIds(v []*string) *GetSubscribedCalendarResponseBodySubscribeScope {
	s.CorpIds = v
	return s
}

func (s *GetSubscribedCalendarResponseBodySubscribeScope) SetOpenConversationIds(v []*string) *GetSubscribedCalendarResponseBodySubscribeScope {
	s.OpenConversationIds = v
	return s
}

func (s *GetSubscribedCalendarResponseBodySubscribeScope) SetUserIds(v []*string) *GetSubscribedCalendarResponseBodySubscribeScope {
	s.UserIds = v
	return s
}

type GetSubscribedCalendarResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSubscribedCalendarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSubscribedCalendarResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSubscribedCalendarResponse) GoString() string {
	return s.String()
}

func (s *GetSubscribedCalendarResponse) SetHeaders(v map[string]*string) *GetSubscribedCalendarResponse {
	s.Headers = v
	return s
}

func (s *GetSubscribedCalendarResponse) SetStatusCode(v int32) *GetSubscribedCalendarResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSubscribedCalendarResponse) SetBody(v *GetSubscribedCalendarResponseBody) *GetSubscribedCalendarResponse {
	s.Body = v
	return s
}

type GetTaskCopiesHeaders struct {
	CommonHeaders  map[string]*string                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetTaskCopiesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetTaskCopiesHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesHeaders) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesHeaders) SetCommonHeaders(v map[string]*string) *GetTaskCopiesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetTaskCopiesHeaders) SetAccountContext(v *GetTaskCopiesHeadersAccountContext) *GetTaskCopiesHeaders {
	s.AccountContext = v
	return s
}

type GetTaskCopiesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetTaskCopiesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesHeadersAccountContext) SetAccountId(v string) *GetTaskCopiesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetTaskCopiesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetTaskCopiesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetTaskCopiesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetTaskCopiesShrinkHeaders) SetAccountContextShrink(v string) *GetTaskCopiesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetTaskCopiesRequest struct {
	// example:
	//
	// APP_PBKxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *int64 `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *int64 `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// keyword
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ["xx","xxx"]
	ProcessCodes *string `json:"ProcessCodes,omitempty" xml:"ProcessCodes,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s GetTaskCopiesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesRequest) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesRequest) SetAppType(v string) *GetTaskCopiesRequest {
	s.AppType = &v
	return s
}

func (s *GetTaskCopiesRequest) SetCreateFromTimeGMT(v int64) *GetTaskCopiesRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *GetTaskCopiesRequest) SetCreateToTimeGMT(v int64) *GetTaskCopiesRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *GetTaskCopiesRequest) SetKeyword(v string) *GetTaskCopiesRequest {
	s.Keyword = &v
	return s
}

func (s *GetTaskCopiesRequest) SetLanguage(v string) *GetTaskCopiesRequest {
	s.Language = &v
	return s
}

func (s *GetTaskCopiesRequest) SetPageNumber(v int32) *GetTaskCopiesRequest {
	s.PageNumber = &v
	return s
}

func (s *GetTaskCopiesRequest) SetPageSize(v int32) *GetTaskCopiesRequest {
	s.PageSize = &v
	return s
}

func (s *GetTaskCopiesRequest) SetProcessCodes(v string) *GetTaskCopiesRequest {
	s.ProcessCodes = &v
	return s
}

func (s *GetTaskCopiesRequest) SetSystemToken(v string) *GetTaskCopiesRequest {
	s.SystemToken = &v
	return s
}

type GetTaskCopiesResponseBody struct {
	// example:
	//
	// [{}]
	Data []*GetTaskCopiesResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetTaskCopiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesResponseBody) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesResponseBody) SetData(v []*GetTaskCopiesResponseBodyData) *GetTaskCopiesResponseBody {
	s.Data = v
	return s
}

func (s *GetTaskCopiesResponseBody) SetPageNumber(v int64) *GetTaskCopiesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetTaskCopiesResponseBody) SetRequestId(v string) *GetTaskCopiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTaskCopiesResponseBody) SetTotalCount(v int64) *GetTaskCopiesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *GetTaskCopiesResponseBody) SetVendorRequestId(v string) *GetTaskCopiesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetTaskCopiesResponseBody) SetVendorType(v string) *GetTaskCopiesResponseBody {
	s.VendorType = &v
	return s
}

type GetTaskCopiesResponseBodyData struct {
	// example:
	//
	// [ "actxxx" ]
	ActionExecutorId []*string `json:"ActionExecutorId,omitempty" xml:"ActionExecutorId,omitempty" type:"Repeated"`
	// example:
	//
	// [ "name" ]
	ActionExecutorName []*string `json:"ActionExecutorName,omitempty" xml:"ActionExecutorName,omitempty" type:"Repeated"`
	// example:
	//
	// APP_XCxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// g02fbs08xxx
	CarbonActivityId *string `json:"CarbonActivityId,omitempty" xml:"CarbonActivityId,omitempty"`
	// example:
	//
	// 2020-01-01
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// []
	CurrentActivityInstances []*GetTaskCopiesResponseBodyDataCurrentActivityInstances `json:"CurrentActivityInstances,omitempty" xml:"CurrentActivityInstances,omitempty" type:"Repeated"`
	// example:
	//
	// {}
	DataMap map[string]interface{} `json:"DataMap,omitempty" xml:"DataMap,omitempty"`
	// example:
	//
	// edit
	DataType *string `json:"DataType,omitempty" xml:"DataType,omitempty"`
	// example:
	//
	// 2020-01-01
	FinishTimeGMT *string `json:"FinishTimeGMT,omitempty" xml:"FinishTimeGMT,omitempty"`
	// example:
	//
	// formxxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// uuid
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// value
	InstanceValue *string `json:"InstanceValue,omitempty" xml:"InstanceValue,omitempty"`
	// example:
	//
	// 2020-01-01
	ModifiedTimeGMT *string `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
	// example:
	//
	// guyagsd
	OriginatorAvatar *string `json:"OriginatorAvatar,omitempty" xml:"OriginatorAvatar,omitempty"`
	// example:
	//
	// guyagsd
	OriginatorDisplayName *string `json:"OriginatorDisplayName,omitempty" xml:"OriginatorDisplayName,omitempty"`
	// example:
	//
	// 123456
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 同意
	ProcessApprovedResult *string `json:"ProcessApprovedResult,omitempty" xml:"ProcessApprovedResult,omitempty"`
	// example:
	//
	// 同意
	ProcessApprovedResultText *string `json:"ProcessApprovedResultText,omitempty" xml:"ProcessApprovedResultText,omitempty"`
	// example:
	//
	// code
	ProcessCode *string `json:"ProcessCode,omitempty" xml:"ProcessCode,omitempty"`
	// example:
	//
	// processxxxx
	ProcessId *int64 `json:"ProcessId,omitempty" xml:"ProcessId,omitempty"`
	// example:
	//
	// instancexxxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// 同意
	ProcessInstanceStatus *string `json:"ProcessInstanceStatus,omitempty" xml:"ProcessInstanceStatus,omitempty"`
	// example:
	//
	// 同意
	ProcessInstanceStatusText *string `json:"ProcessInstanceStatusText,omitempty" xml:"ProcessInstanceStatusText,omitempty"`
	// example:
	//
	// 名称
	ProcessName *string `json:"ProcessName,omitempty" xml:"ProcessName,omitempty"`
	// example:
	//
	// 12345
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1.0
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetTaskCopiesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesResponseBodyData) SetActionExecutorId(v []*string) *GetTaskCopiesResponseBodyData {
	s.ActionExecutorId = v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetActionExecutorName(v []*string) *GetTaskCopiesResponseBodyData {
	s.ActionExecutorName = v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetAppType(v string) *GetTaskCopiesResponseBodyData {
	s.AppType = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetCarbonActivityId(v string) *GetTaskCopiesResponseBodyData {
	s.CarbonActivityId = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetCreateTimeGMT(v string) *GetTaskCopiesResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetCurrentActivityInstances(v []*GetTaskCopiesResponseBodyDataCurrentActivityInstances) *GetTaskCopiesResponseBodyData {
	s.CurrentActivityInstances = v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetDataMap(v map[string]interface{}) *GetTaskCopiesResponseBodyData {
	s.DataMap = v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetDataType(v string) *GetTaskCopiesResponseBodyData {
	s.DataType = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetFinishTimeGMT(v string) *GetTaskCopiesResponseBodyData {
	s.FinishTimeGMT = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetFormInstanceId(v string) *GetTaskCopiesResponseBodyData {
	s.FormInstanceId = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetFormUuid(v string) *GetTaskCopiesResponseBodyData {
	s.FormUuid = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetInstanceValue(v string) *GetTaskCopiesResponseBodyData {
	s.InstanceValue = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetModifiedTimeGMT(v string) *GetTaskCopiesResponseBodyData {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetOriginatorAvatar(v string) *GetTaskCopiesResponseBodyData {
	s.OriginatorAvatar = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetOriginatorDisplayName(v string) *GetTaskCopiesResponseBodyData {
	s.OriginatorDisplayName = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetOriginatorId(v string) *GetTaskCopiesResponseBodyData {
	s.OriginatorId = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessApprovedResult(v string) *GetTaskCopiesResponseBodyData {
	s.ProcessApprovedResult = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessApprovedResultText(v string) *GetTaskCopiesResponseBodyData {
	s.ProcessApprovedResultText = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessCode(v string) *GetTaskCopiesResponseBodyData {
	s.ProcessCode = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessId(v int64) *GetTaskCopiesResponseBodyData {
	s.ProcessId = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessInstanceId(v string) *GetTaskCopiesResponseBodyData {
	s.ProcessInstanceId = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessInstanceStatus(v string) *GetTaskCopiesResponseBodyData {
	s.ProcessInstanceStatus = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessInstanceStatusText(v string) *GetTaskCopiesResponseBodyData {
	s.ProcessInstanceStatusText = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetProcessName(v string) *GetTaskCopiesResponseBodyData {
	s.ProcessName = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetSerialNumber(v string) *GetTaskCopiesResponseBodyData {
	s.SerialNumber = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetTitle(v string) *GetTaskCopiesResponseBodyData {
	s.Title = &v
	return s
}

func (s *GetTaskCopiesResponseBodyData) SetVersion(v int64) *GetTaskCopiesResponseBodyData {
	s.Version = &v
	return s
}

type GetTaskCopiesResponseBodyDataCurrentActivityInstances struct {
	// example:
	//
	// act-xxaanfaf
	ActivityId *string `json:"ActivityId,omitempty" xml:"ActivityId,omitempty"`
	// example:
	//
	// running
	ActivityInstanceStatus *string `json:"ActivityInstanceStatus,omitempty" xml:"ActivityInstanceStatus,omitempty"`
	// example:
	//
	// act-12345
	ActivityName *string `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	// example:
	//
	// redirect task
	ActivityNameInEnglish *string `json:"ActivityNameInEnglish,omitempty" xml:"ActivityNameInEnglish,omitempty"`
	// example:
	//
	// 12345
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s GetTaskCopiesResponseBodyDataCurrentActivityInstances) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesResponseBodyDataCurrentActivityInstances) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesResponseBodyDataCurrentActivityInstances) SetActivityId(v string) *GetTaskCopiesResponseBodyDataCurrentActivityInstances {
	s.ActivityId = &v
	return s
}

func (s *GetTaskCopiesResponseBodyDataCurrentActivityInstances) SetActivityInstanceStatus(v string) *GetTaskCopiesResponseBodyDataCurrentActivityInstances {
	s.ActivityInstanceStatus = &v
	return s
}

func (s *GetTaskCopiesResponseBodyDataCurrentActivityInstances) SetActivityName(v string) *GetTaskCopiesResponseBodyDataCurrentActivityInstances {
	s.ActivityName = &v
	return s
}

func (s *GetTaskCopiesResponseBodyDataCurrentActivityInstances) SetActivityNameInEnglish(v string) *GetTaskCopiesResponseBodyDataCurrentActivityInstances {
	s.ActivityNameInEnglish = &v
	return s
}

func (s *GetTaskCopiesResponseBodyDataCurrentActivityInstances) SetId(v int64) *GetTaskCopiesResponseBodyDataCurrentActivityInstances {
	s.Id = &v
	return s
}

type GetTaskCopiesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTaskCopiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTaskCopiesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTaskCopiesResponse) GoString() string {
	return s.String()
}

func (s *GetTaskCopiesResponse) SetHeaders(v map[string]*string) *GetTaskCopiesResponse {
	s.Headers = v
	return s
}

func (s *GetTaskCopiesResponse) SetStatusCode(v int32) *GetTaskCopiesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTaskCopiesResponse) SetBody(v *GetTaskCopiesResponseBody) *GetTaskCopiesResponse {
	s.Body = v
	return s
}

type GetTemplateListByUserIdHeaders struct {
	CommonHeaders  map[string]*string                            `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetTemplateListByUserIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetTemplateListByUserIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdHeaders) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdHeaders) SetCommonHeaders(v map[string]*string) *GetTemplateListByUserIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetTemplateListByUserIdHeaders) SetAccountContext(v *GetTemplateListByUserIdHeadersAccountContext) *GetTemplateListByUserIdHeaders {
	s.AccountContext = v
	return s
}

type GetTemplateListByUserIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetTemplateListByUserIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdHeadersAccountContext) SetAccountId(v string) *GetTemplateListByUserIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetTemplateListByUserIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetTemplateListByUserIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetTemplateListByUserIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetTemplateListByUserIdShrinkHeaders) SetAccountContextShrink(v string) *GetTemplateListByUserIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetTemplateListByUserIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size          *int64                                       `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContext *GetTemplateListByUserIdRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetTemplateListByUserIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdRequest) SetOffset(v int64) *GetTemplateListByUserIdRequest {
	s.Offset = &v
	return s
}

func (s *GetTemplateListByUserIdRequest) SetSize(v int64) *GetTemplateListByUserIdRequest {
	s.Size = &v
	return s
}

func (s *GetTemplateListByUserIdRequest) SetTenantContext(v *GetTemplateListByUserIdRequestTenantContext) *GetTemplateListByUserIdRequest {
	s.TenantContext = v
	return s
}

type GetTemplateListByUserIdRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetTemplateListByUserIdRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdRequestTenantContext) SetTenantId(v string) *GetTemplateListByUserIdRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetTemplateListByUserIdShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size                *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetTemplateListByUserIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdShrinkRequest) SetOffset(v int64) *GetTemplateListByUserIdShrinkRequest {
	s.Offset = &v
	return s
}

func (s *GetTemplateListByUserIdShrinkRequest) SetSize(v int64) *GetTemplateListByUserIdShrinkRequest {
	s.Size = &v
	return s
}

func (s *GetTemplateListByUserIdShrinkRequest) SetTenantContextShrink(v string) *GetTemplateListByUserIdShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetTemplateListByUserIdResponseBody struct {
	// example:
	//
	// 12312131231
	NextCursor *int64 `json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId    *string                                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	TemplateList []*GetTemplateListByUserIdResponseBodyTemplateList `json:"templateList,omitempty" xml:"templateList,omitempty" type:"Repeated"`
}

func (s GetTemplateListByUserIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdResponseBody) SetNextCursor(v int64) *GetTemplateListByUserIdResponseBody {
	s.NextCursor = &v
	return s
}

func (s *GetTemplateListByUserIdResponseBody) SetRequestId(v string) *GetTemplateListByUserIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTemplateListByUserIdResponseBody) SetTemplateList(v []*GetTemplateListByUserIdResponseBodyTemplateList) *GetTemplateListByUserIdResponseBody {
	s.TemplateList = v
	return s
}

type GetTemplateListByUserIdResponseBodyTemplateList struct {
	IconUrl *string `json:"IconUrl,omitempty" xml:"IconUrl,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 11111
	ReportCode *string `json:"ReportCode,omitempty" xml:"ReportCode,omitempty"`
	// example:
	//
	// https://scsss/sss
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetTemplateListByUserIdResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdResponseBodyTemplateList) SetIconUrl(v string) *GetTemplateListByUserIdResponseBodyTemplateList {
	s.IconUrl = &v
	return s
}

func (s *GetTemplateListByUserIdResponseBodyTemplateList) SetName(v string) *GetTemplateListByUserIdResponseBodyTemplateList {
	s.Name = &v
	return s
}

func (s *GetTemplateListByUserIdResponseBodyTemplateList) SetReportCode(v string) *GetTemplateListByUserIdResponseBodyTemplateList {
	s.ReportCode = &v
	return s
}

func (s *GetTemplateListByUserIdResponseBodyTemplateList) SetUrl(v string) *GetTemplateListByUserIdResponseBodyTemplateList {
	s.Url = &v
	return s
}

type GetTemplateListByUserIdResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplateListByUserIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplateListByUserIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateListByUserIdResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateListByUserIdResponse) SetHeaders(v map[string]*string) *GetTemplateListByUserIdResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateListByUserIdResponse) SetStatusCode(v int32) *GetTemplateListByUserIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateListByUserIdResponse) SetBody(v *GetTemplateListByUserIdResponseBody) *GetTemplateListByUserIdResponse {
	s.Body = v
	return s
}

type GetUserHeaders struct {
	CommonHeaders  map[string]*string            `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetUserHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetUserHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserHeaders) GoString() string {
	return s.String()
}

func (s *GetUserHeaders) SetCommonHeaders(v map[string]*string) *GetUserHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserHeaders) SetAccountContext(v *GetUserHeadersAccountContext) *GetUserHeaders {
	s.AccountContext = v
	return s
}

type GetUserHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetUserHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetUserHeadersAccountContext) SetAccountId(v string) *GetUserHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetUserShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetUserShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetUserShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetUserShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserShrinkHeaders) SetAccountContextShrink(v string) *GetUserShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetUserRequest struct {
	TenantContext *GetUserRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// zh_CN
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
}

func (s GetUserRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserRequest) GoString() string {
	return s.String()
}

func (s *GetUserRequest) SetTenantContext(v *GetUserRequestTenantContext) *GetUserRequest {
	s.TenantContext = v
	return s
}

func (s *GetUserRequest) SetLanguage(v string) *GetUserRequest {
	s.Language = &v
	return s
}

type GetUserRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetUserRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetUserRequestTenantContext) SetTenantId(v string) *GetUserRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetUserShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"language,omitempty" xml:"language,omitempty"`
}

func (s GetUserShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetUserShrinkRequest) SetTenantContextShrink(v string) *GetUserShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetUserShrinkRequest) SetLanguage(v string) *GetUserShrinkRequest {
	s.Language = &v
	return s
}

type GetUserResponseBody struct {
	// example:
	//
	// true
	Active *bool `json:"active,omitempty" xml:"active,omitempty"`
	// example:
	//
	// true
	Admin *bool `json:"admin,omitempty" xml:"admin,omitempty"`
	// example:
	//
	// xxx
	Avatar *string `json:"avatar,omitempty" xml:"avatar,omitempty"`
	// example:
	//
	// true
	Boss *bool `json:"boss,omitempty" xml:"boss,omitempty"`
	// example:
	//
	// [2,3,4]
	DeptIdList    []*int64                            `json:"deptIdList,omitempty" xml:"deptIdList,omitempty" type:"Repeated"`
	DeptOrderList []*GetUserResponseBodyDeptOrderList `json:"deptOrderList,omitempty" xml:"deptOrderList,omitempty" type:"Repeated"`
	// example:
	//
	// test@xxx.com
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// example:
	//
	// true
	ExclusiveAccount *bool `json:"exclusiveAccount,omitempty" xml:"exclusiveAccount,omitempty"`
	// example:
	//
	// dingxxx
	ExclusiveAccountCorpId *string `json:"exclusiveAccountCorpId,omitempty" xml:"exclusiveAccountCorpId,omitempty"`
	// example:
	//
	// 组织名称
	ExclusiveAccountCorpName *string `json:"exclusiveAccountCorpName,omitempty" xml:"exclusiveAccountCorpName,omitempty"`
	// example:
	//
	// dingtalk
	ExclusiveAccountType *string `json:"exclusiveAccountType,omitempty" xml:"exclusiveAccountType,omitempty"`
	// example:
	//
	// {"爱好":"旅游","年龄":"24"}
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// example:
	//
	// false
	HideMobile *bool `json:"hideMobile,omitempty" xml:"hideMobile,omitempty"`
	// example:
	//
	// 1597573616828
	HiredDate *int64 `json:"hiredDate,omitempty" xml:"hiredDate,omitempty"`
	// example:
	//
	// 4
	JobNumber    *string                            `json:"jobNumber,omitempty" xml:"jobNumber,omitempty"`
	LeaderInDept []*GetUserResponseBodyLeaderInDept `json:"leaderInDept,omitempty" xml:"leaderInDept,omitempty" type:"Repeated"`
	// example:
	//
	// login_id3
	LoginId *string `json:"loginId,omitempty" xml:"loginId,omitempty"`
	// example:
	//
	// manager240
	ManagerUserid *string `json:"managerUserid,omitempty" xml:"managerUserid,omitempty"`
	// example:
	//
	// 18513027676
	Mobile *string `json:"mobile,omitempty" xml:"mobile,omitempty"`
	// example:
	//
	// 张三
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 昵称
	Nickname *string `json:"nickname,omitempty" xml:"nickname,omitempty"`
	// example:
	//
	// test@xxx.com
	OrgEmail *string `json:"orgEmail,omitempty" xml:"orgEmail,omitempty"`
	// example:
	//
	// true
	RealAuthed *bool `json:"realAuthed,omitempty" xml:"realAuthed,omitempty"`
	// example:
	//
	// 备注备注
	Remark *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	RoleList  []*GetUserResponseBodyRoleList `json:"roleList,omitempty" xml:"roleList,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Senior *bool `json:"senior,omitempty" xml:"senior,omitempty"`
	// example:
	//
	// 86
	StateCode *string `json:"stateCode,omitempty" xml:"stateCode,omitempty"`
	// example:
	//
	// 010-86123456-2345
	Telephone *string `json:"telephone,omitempty" xml:"telephone,omitempty"`
	// example:
	//
	// 技术总监
	Title       *string                         `json:"title,omitempty" xml:"title,omitempty"`
	UnionEmpExt *GetUserResponseBodyUnionEmpExt `json:"unionEmpExt,omitempty" xml:"unionEmpExt,omitempty" type:"Struct"`
	// example:
	//
	// zhangsan
	Userid *string `json:"userid,omitempty" xml:"userid,omitempty"`
	// example:
	//
	// 未来park
	WorkPlace *string `json:"workPlace,omitempty" xml:"workPlace,omitempty"`
}

func (s GetUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserResponseBody) SetActive(v bool) *GetUserResponseBody {
	s.Active = &v
	return s
}

func (s *GetUserResponseBody) SetAdmin(v bool) *GetUserResponseBody {
	s.Admin = &v
	return s
}

func (s *GetUserResponseBody) SetAvatar(v string) *GetUserResponseBody {
	s.Avatar = &v
	return s
}

func (s *GetUserResponseBody) SetBoss(v bool) *GetUserResponseBody {
	s.Boss = &v
	return s
}

func (s *GetUserResponseBody) SetDeptIdList(v []*int64) *GetUserResponseBody {
	s.DeptIdList = v
	return s
}

func (s *GetUserResponseBody) SetDeptOrderList(v []*GetUserResponseBodyDeptOrderList) *GetUserResponseBody {
	s.DeptOrderList = v
	return s
}

func (s *GetUserResponseBody) SetEmail(v string) *GetUserResponseBody {
	s.Email = &v
	return s
}

func (s *GetUserResponseBody) SetExclusiveAccount(v bool) *GetUserResponseBody {
	s.ExclusiveAccount = &v
	return s
}

func (s *GetUserResponseBody) SetExclusiveAccountCorpId(v string) *GetUserResponseBody {
	s.ExclusiveAccountCorpId = &v
	return s
}

func (s *GetUserResponseBody) SetExclusiveAccountCorpName(v string) *GetUserResponseBody {
	s.ExclusiveAccountCorpName = &v
	return s
}

func (s *GetUserResponseBody) SetExclusiveAccountType(v string) *GetUserResponseBody {
	s.ExclusiveAccountType = &v
	return s
}

func (s *GetUserResponseBody) SetExtension(v string) *GetUserResponseBody {
	s.Extension = &v
	return s
}

func (s *GetUserResponseBody) SetHideMobile(v bool) *GetUserResponseBody {
	s.HideMobile = &v
	return s
}

func (s *GetUserResponseBody) SetHiredDate(v int64) *GetUserResponseBody {
	s.HiredDate = &v
	return s
}

func (s *GetUserResponseBody) SetJobNumber(v string) *GetUserResponseBody {
	s.JobNumber = &v
	return s
}

func (s *GetUserResponseBody) SetLeaderInDept(v []*GetUserResponseBodyLeaderInDept) *GetUserResponseBody {
	s.LeaderInDept = v
	return s
}

func (s *GetUserResponseBody) SetLoginId(v string) *GetUserResponseBody {
	s.LoginId = &v
	return s
}

func (s *GetUserResponseBody) SetManagerUserid(v string) *GetUserResponseBody {
	s.ManagerUserid = &v
	return s
}

func (s *GetUserResponseBody) SetMobile(v string) *GetUserResponseBody {
	s.Mobile = &v
	return s
}

func (s *GetUserResponseBody) SetName(v string) *GetUserResponseBody {
	s.Name = &v
	return s
}

func (s *GetUserResponseBody) SetNickname(v string) *GetUserResponseBody {
	s.Nickname = &v
	return s
}

func (s *GetUserResponseBody) SetOrgEmail(v string) *GetUserResponseBody {
	s.OrgEmail = &v
	return s
}

func (s *GetUserResponseBody) SetRealAuthed(v bool) *GetUserResponseBody {
	s.RealAuthed = &v
	return s
}

func (s *GetUserResponseBody) SetRemark(v string) *GetUserResponseBody {
	s.Remark = &v
	return s
}

func (s *GetUserResponseBody) SetRequestId(v string) *GetUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserResponseBody) SetRoleList(v []*GetUserResponseBodyRoleList) *GetUserResponseBody {
	s.RoleList = v
	return s
}

func (s *GetUserResponseBody) SetSenior(v bool) *GetUserResponseBody {
	s.Senior = &v
	return s
}

func (s *GetUserResponseBody) SetStateCode(v string) *GetUserResponseBody {
	s.StateCode = &v
	return s
}

func (s *GetUserResponseBody) SetTelephone(v string) *GetUserResponseBody {
	s.Telephone = &v
	return s
}

func (s *GetUserResponseBody) SetTitle(v string) *GetUserResponseBody {
	s.Title = &v
	return s
}

func (s *GetUserResponseBody) SetUnionEmpExt(v *GetUserResponseBodyUnionEmpExt) *GetUserResponseBody {
	s.UnionEmpExt = v
	return s
}

func (s *GetUserResponseBody) SetUserid(v string) *GetUserResponseBody {
	s.Userid = &v
	return s
}

func (s *GetUserResponseBody) SetWorkPlace(v string) *GetUserResponseBody {
	s.WorkPlace = &v
	return s
}

type GetUserResponseBodyDeptOrderList struct {
	DeptId *int64 `json:"deptId,omitempty" xml:"deptId,omitempty"`
	Order  *int64 `json:"order,omitempty" xml:"order,omitempty"`
}

func (s GetUserResponseBodyDeptOrderList) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyDeptOrderList) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyDeptOrderList) SetDeptId(v int64) *GetUserResponseBodyDeptOrderList {
	s.DeptId = &v
	return s
}

func (s *GetUserResponseBodyDeptOrderList) SetOrder(v int64) *GetUserResponseBodyDeptOrderList {
	s.Order = &v
	return s
}

type GetUserResponseBodyLeaderInDept struct {
	DeptId *int64 `json:"deptId,omitempty" xml:"deptId,omitempty"`
	Leader *bool  `json:"leader,omitempty" xml:"leader,omitempty"`
}

func (s GetUserResponseBodyLeaderInDept) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyLeaderInDept) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyLeaderInDept) SetDeptId(v int64) *GetUserResponseBodyLeaderInDept {
	s.DeptId = &v
	return s
}

func (s *GetUserResponseBodyLeaderInDept) SetLeader(v bool) *GetUserResponseBodyLeaderInDept {
	s.Leader = &v
	return s
}

type GetUserResponseBodyRoleList struct {
	// example:
	//
	// 职务
	GroupName *string `json:"groupName,omitempty" xml:"groupName,omitempty"`
	Id        *int64  `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// 张三
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
}

func (s GetUserResponseBodyRoleList) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyRoleList) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyRoleList) SetGroupName(v string) *GetUserResponseBodyRoleList {
	s.GroupName = &v
	return s
}

func (s *GetUserResponseBodyRoleList) SetId(v int64) *GetUserResponseBodyRoleList {
	s.Id = &v
	return s
}

func (s *GetUserResponseBodyRoleList) SetName(v string) *GetUserResponseBodyRoleList {
	s.Name = &v
	return s
}

type GetUserResponseBodyUnionEmpExt struct {
	// example:
	//
	// dingxxx
	CorpId          *string                                          `json:"corpId,omitempty" xml:"corpId,omitempty"`
	UnionEmpMapList []*GetUserResponseBodyUnionEmpExtUnionEmpMapList `json:"unionEmpMapList,omitempty" xml:"unionEmpMapList,omitempty" type:"Repeated"`
	// example:
	//
	// zhangsan
	Userid *string `json:"userid,omitempty" xml:"userid,omitempty"`
}

func (s GetUserResponseBodyUnionEmpExt) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUnionEmpExt) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUnionEmpExt) SetCorpId(v string) *GetUserResponseBodyUnionEmpExt {
	s.CorpId = &v
	return s
}

func (s *GetUserResponseBodyUnionEmpExt) SetUnionEmpMapList(v []*GetUserResponseBodyUnionEmpExtUnionEmpMapList) *GetUserResponseBodyUnionEmpExt {
	s.UnionEmpMapList = v
	return s
}

func (s *GetUserResponseBodyUnionEmpExt) SetUserid(v string) *GetUserResponseBodyUnionEmpExt {
	s.Userid = &v
	return s
}

type GetUserResponseBodyUnionEmpExtUnionEmpMapList struct {
	// example:
	//
	// dingxxx
	CropId *string `json:"cropId,omitempty" xml:"cropId,omitempty"`
	// example:
	//
	// zhangsan
	Userid *string `json:"userid,omitempty" xml:"userid,omitempty"`
}

func (s GetUserResponseBodyUnionEmpExtUnionEmpMapList) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponseBodyUnionEmpExtUnionEmpMapList) GoString() string {
	return s.String()
}

func (s *GetUserResponseBodyUnionEmpExtUnionEmpMapList) SetCropId(v string) *GetUserResponseBodyUnionEmpExtUnionEmpMapList {
	s.CropId = &v
	return s
}

func (s *GetUserResponseBodyUnionEmpExtUnionEmpMapList) SetUserid(v string) *GetUserResponseBodyUnionEmpExtUnionEmpMapList {
	s.Userid = &v
	return s
}

type GetUserResponse struct {
	Headers    map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserResponse) GoString() string {
	return s.String()
}

func (s *GetUserResponse) SetHeaders(v map[string]*string) *GetUserResponse {
	s.Headers = v
	return s
}

func (s *GetUserResponse) SetStatusCode(v int32) *GetUserResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserResponse) SetBody(v *GetUserResponseBody) *GetUserResponse {
	s.Body = v
	return s
}

type GetUserIdHeaders struct {
	CommonHeaders  map[string]*string              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetUserIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetUserIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdHeaders) GoString() string {
	return s.String()
}

func (s *GetUserIdHeaders) SetCommonHeaders(v map[string]*string) *GetUserIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserIdHeaders) SetAccountContext(v *GetUserIdHeadersAccountContext) *GetUserIdHeaders {
	s.AccountContext = v
	return s
}

type GetUserIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetUserIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetUserIdHeadersAccountContext) SetAccountId(v string) *GetUserIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetUserIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetUserIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetUserIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetUserIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserIdShrinkHeaders) SetAccountContextShrink(v string) *GetUserIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetUserIdRequest struct {
	TenantContext *GetUserIdRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// unionId
	//
	// example:
	//
	// ****iE
	UnionId *string `json:"UnionId,omitempty" xml:"UnionId,omitempty"`
}

func (s GetUserIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdRequest) GoString() string {
	return s.String()
}

func (s *GetUserIdRequest) SetTenantContext(v *GetUserIdRequestTenantContext) *GetUserIdRequest {
	s.TenantContext = v
	return s
}

func (s *GetUserIdRequest) SetUnionId(v string) *GetUserIdRequest {
	s.UnionId = &v
	return s
}

type GetUserIdRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetUserIdRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetUserIdRequestTenantContext) SetTenantId(v string) *GetUserIdRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetUserIdShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// unionId
	//
	// example:
	//
	// ****iE
	UnionId *string `json:"UnionId,omitempty" xml:"UnionId,omitempty"`
}

func (s GetUserIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetUserIdShrinkRequest) SetTenantContextShrink(v string) *GetUserIdShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetUserIdShrinkRequest) SetUnionId(v string) *GetUserIdShrinkRequest {
	s.UnionId = &v
	return s
}

type GetUserIdResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetUserIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserIdResponseBody) SetRequestId(v string) *GetUserIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserIdResponseBody) SetUserId(v string) *GetUserIdResponseBody {
	s.UserId = &v
	return s
}

func (s *GetUserIdResponseBody) SetVendorRequestId(v string) *GetUserIdResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetUserIdResponseBody) SetVendorType(v string) *GetUserIdResponseBody {
	s.VendorType = &v
	return s
}

type GetUserIdResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdResponse) GoString() string {
	return s.String()
}

func (s *GetUserIdResponse) SetHeaders(v map[string]*string) *GetUserIdResponse {
	s.Headers = v
	return s
}

func (s *GetUserIdResponse) SetStatusCode(v int32) *GetUserIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserIdResponse) SetBody(v *GetUserIdResponseBody) *GetUserIdResponse {
	s.Body = v
	return s
}

type GetUserIdByOrgIdAndStaffIdHeaders struct {
	CommonHeaders  map[string]*string                               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetUserIdByOrgIdAndStaffIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetUserIdByOrgIdAndStaffIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdHeaders) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdHeaders) SetCommonHeaders(v map[string]*string) *GetUserIdByOrgIdAndStaffIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdHeaders) SetAccountContext(v *GetUserIdByOrgIdAndStaffIdHeadersAccountContext) *GetUserIdByOrgIdAndStaffIdHeaders {
	s.AccountContext = v
	return s
}

type GetUserIdByOrgIdAndStaffIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetUserIdByOrgIdAndStaffIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdHeadersAccountContext) SetAccountId(v string) *GetUserIdByOrgIdAndStaffIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetUserIdByOrgIdAndStaffIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetUserIdByOrgIdAndStaffIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetUserIdByOrgIdAndStaffIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdShrinkHeaders) SetAccountContextShrink(v string) *GetUserIdByOrgIdAndStaffIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetUserIdByOrgIdAndStaffIdRequest struct {
	// example:
	//
	// 123456
	OrgId         *int64                                          `json:"OrgId,omitempty" xml:"OrgId,omitempty"`
	TenantContext *GetUserIdByOrgIdAndStaffIdRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetUserIdByOrgIdAndStaffIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdRequest) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdRequest) SetOrgId(v int64) *GetUserIdByOrgIdAndStaffIdRequest {
	s.OrgId = &v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdRequest) SetTenantContext(v *GetUserIdByOrgIdAndStaffIdRequestTenantContext) *GetUserIdByOrgIdAndStaffIdRequest {
	s.TenantContext = v
	return s
}

type GetUserIdByOrgIdAndStaffIdRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetUserIdByOrgIdAndStaffIdRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdRequestTenantContext) SetTenantId(v string) *GetUserIdByOrgIdAndStaffIdRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetUserIdByOrgIdAndStaffIdShrinkRequest struct {
	// example:
	//
	// 123456
	OrgId               *int64  `json:"OrgId,omitempty" xml:"OrgId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetUserIdByOrgIdAndStaffIdShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdShrinkRequest) SetOrgId(v int64) *GetUserIdByOrgIdAndStaffIdShrinkRequest {
	s.OrgId = &v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdShrinkRequest) SetTenantContextShrink(v string) *GetUserIdByOrgIdAndStaffIdShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetUserIdByOrgIdAndStaffIdResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 01223245436
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetUserIdByOrgIdAndStaffIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdResponseBody) SetRequestId(v string) *GetUserIdByOrgIdAndStaffIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdResponseBody) SetUserId(v string) *GetUserIdByOrgIdAndStaffIdResponseBody {
	s.UserId = &v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdResponseBody) SetVendorRequestId(v string) *GetUserIdByOrgIdAndStaffIdResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdResponseBody) SetVendorType(v string) *GetUserIdByOrgIdAndStaffIdResponseBody {
	s.VendorType = &v
	return s
}

type GetUserIdByOrgIdAndStaffIdResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserIdByOrgIdAndStaffIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserIdByOrgIdAndStaffIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserIdByOrgIdAndStaffIdResponse) GoString() string {
	return s.String()
}

func (s *GetUserIdByOrgIdAndStaffIdResponse) SetHeaders(v map[string]*string) *GetUserIdByOrgIdAndStaffIdResponse {
	s.Headers = v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdResponse) SetStatusCode(v int32) *GetUserIdByOrgIdAndStaffIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserIdByOrgIdAndStaffIdResponse) SetBody(v *GetUserIdByOrgIdAndStaffIdResponseBody) *GetUserIdByOrgIdAndStaffIdResponse {
	s.Body = v
	return s
}

type GetUserLatestPlanHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetUserLatestPlanHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetUserLatestPlanHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanHeaders) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanHeaders) SetCommonHeaders(v map[string]*string) *GetUserLatestPlanHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserLatestPlanHeaders) SetAccountContext(v *GetUserLatestPlanHeadersAccountContext) *GetUserLatestPlanHeaders {
	s.AccountContext = v
	return s
}

type GetUserLatestPlanHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetUserLatestPlanHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanHeadersAccountContext) SetAccountId(v string) *GetUserLatestPlanHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetUserLatestPlanShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetUserLatestPlanShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetUserLatestPlanShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetUserLatestPlanShrinkHeaders) SetAccountContextShrink(v string) *GetUserLatestPlanShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetUserLatestPlanRequest struct {
	TenantContext *GetUserLatestPlanRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s GetUserLatestPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanRequest) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanRequest) SetTenantContext(v *GetUserLatestPlanRequestTenantContext) *GetUserLatestPlanRequest {
	s.TenantContext = v
	return s
}

type GetUserLatestPlanRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetUserLatestPlanRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanRequestTenantContext) SetTenantId(v string) *GetUserLatestPlanRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetUserLatestPlanShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s GetUserLatestPlanShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanShrinkRequest) SetTenantContextShrink(v string) *GetUserLatestPlanShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type GetUserLatestPlanResponseBody struct {
	// example:
	//
	// 1
	AccountHandleStatus *int32 `json:"accountHandleStatus,omitempty" xml:"accountHandleStatus,omitempty"`
	// example:
	//
	// 2022-02-02
	AccountHandleTime *string `json:"accountHandleTime,omitempty" xml:"accountHandleTime,omitempty"`
	// example:
	//
	// 0
	AccountType *int32 `json:"accountType,omitempty" xml:"accountType,omitempty"`
	// example:
	//
	// 2022-02-05
	AgreementFirstSignTime *string `json:"agreementFirstSignTime,omitempty" xml:"agreementFirstSignTime,omitempty"`
	// example:
	//
	// 2022-02-06
	AgreementLastSignTime *string `json:"agreementLastSignTime,omitempty" xml:"agreementLastSignTime,omitempty"`
	// example:
	//
	// 1
	AgreementStatus *int32 `json:"agreementStatus,omitempty" xml:"agreementStatus,omitempty"`
	// example:
	//
	// 2022-02-04
	DataHandleEndTime *string `json:"dataHandleEndTime,omitempty" xml:"dataHandleEndTime,omitempty"`
	// example:
	//
	// 2022-02-03
	DataHandleStartTime *string `json:"dataHandleStartTime,omitempty" xml:"dataHandleStartTime,omitempty"`
	// example:
	//
	// 1
	DataHandleStatus *int32 `json:"dataHandleStatus,omitempty" xml:"dataHandleStatus,omitempty"`
	// example:
	//
	// 1
	ExclusivePlan *int32 `json:"exclusivePlan,omitempty" xml:"exclusivePlan,omitempty"`
	// example:
	//
	// 1
	NewAccountUid *int64 `json:"newAccountUid,omitempty" xml:"newAccountUid,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0
	Status *int32 `json:"status,omitempty" xml:"status,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s GetUserLatestPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanResponseBody) SetAccountHandleStatus(v int32) *GetUserLatestPlanResponseBody {
	s.AccountHandleStatus = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetAccountHandleTime(v string) *GetUserLatestPlanResponseBody {
	s.AccountHandleTime = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetAccountType(v int32) *GetUserLatestPlanResponseBody {
	s.AccountType = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetAgreementFirstSignTime(v string) *GetUserLatestPlanResponseBody {
	s.AgreementFirstSignTime = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetAgreementLastSignTime(v string) *GetUserLatestPlanResponseBody {
	s.AgreementLastSignTime = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetAgreementStatus(v int32) *GetUserLatestPlanResponseBody {
	s.AgreementStatus = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetDataHandleEndTime(v string) *GetUserLatestPlanResponseBody {
	s.DataHandleEndTime = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetDataHandleStartTime(v string) *GetUserLatestPlanResponseBody {
	s.DataHandleStartTime = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetDataHandleStatus(v int32) *GetUserLatestPlanResponseBody {
	s.DataHandleStatus = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetExclusivePlan(v int32) *GetUserLatestPlanResponseBody {
	s.ExclusivePlan = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetNewAccountUid(v int64) *GetUserLatestPlanResponseBody {
	s.NewAccountUid = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetRequestId(v string) *GetUserLatestPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetStatus(v int32) *GetUserLatestPlanResponseBody {
	s.Status = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetVendorRequestId(v string) *GetUserLatestPlanResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *GetUserLatestPlanResponseBody) SetVendorType(v string) *GetUserLatestPlanResponseBody {
	s.VendorType = &v
	return s
}

type GetUserLatestPlanResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUserLatestPlanResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUserLatestPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserLatestPlanResponse) GoString() string {
	return s.String()
}

func (s *GetUserLatestPlanResponse) SetHeaders(v map[string]*string) *GetUserLatestPlanResponse {
	s.Headers = v
	return s
}

func (s *GetUserLatestPlanResponse) SetStatusCode(v int32) *GetUserLatestPlanResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUserLatestPlanResponse) SetBody(v *GetUserLatestPlanResponseBody) *GetUserLatestPlanResponse {
	s.Body = v
	return s
}

type GetWorkspaceHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetWorkspaceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetWorkspaceHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceHeaders) GoString() string {
	return s.String()
}

func (s *GetWorkspaceHeaders) SetCommonHeaders(v map[string]*string) *GetWorkspaceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetWorkspaceHeaders) SetAccountContext(v *GetWorkspaceHeadersAccountContext) *GetWorkspaceHeaders {
	s.AccountContext = v
	return s
}

type GetWorkspaceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetWorkspaceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetWorkspaceHeadersAccountContext) SetAccountId(v string) *GetWorkspaceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetWorkspaceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetWorkspaceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetWorkspaceShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetWorkspaceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetWorkspaceShrinkHeaders) SetAccountContextShrink(v string) *GetWorkspaceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetWorkspaceRequest struct {
	TenantContext *GetWorkspaceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// false
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MJ0pDSKMV9dO20E4
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetWorkspaceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspaceRequest) SetTenantContext(v *GetWorkspaceRequestTenantContext) *GetWorkspaceRequest {
	s.TenantContext = v
	return s
}

func (s *GetWorkspaceRequest) SetWithPermissionRole(v bool) *GetWorkspaceRequest {
	s.WithPermissionRole = &v
	return s
}

func (s *GetWorkspaceRequest) SetWorkspaceId(v string) *GetWorkspaceRequest {
	s.WorkspaceId = &v
	return s
}

type GetWorkspaceRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetWorkspaceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetWorkspaceRequestTenantContext) SetTenantId(v string) *GetWorkspaceRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetWorkspaceShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// false
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MJ0pDSKMV9dO20E4
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetWorkspaceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspaceShrinkRequest) SetTenantContextShrink(v string) *GetWorkspaceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetWorkspaceShrinkRequest) SetWithPermissionRole(v bool) *GetWorkspaceShrinkRequest {
	s.WithPermissionRole = &v
	return s
}

func (s *GetWorkspaceShrinkRequest) SetWorkspaceId(v string) *GetWorkspaceShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type GetWorkspaceResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Workspace *GetWorkspaceResponseBodyWorkspace `json:"workspace,omitempty" xml:"workspace,omitempty" type:"Struct"`
}

func (s GetWorkspaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponseBody) SetRequestId(v string) *GetWorkspaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkspaceResponseBody) SetWorkspace(v *GetWorkspaceResponseBodyWorkspace) *GetWorkspaceResponseBody {
	s.Workspace = v
	return s
}

type GetWorkspaceResponseBodyWorkspace struct {
	// example:
	//
	// ding16b241fd05********288
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// workspace_description
	Description *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Icon        *GetWorkspaceResponseBodyWorkspaceIcon `json:"Icon,omitempty" xml:"Icon,omitempty" type:"Struct"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// workspace_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// ydxXB52LJqqK7xxNTXyo390kJqjMp697
	RootNodeId *string `json:"RootNodeId,omitempty" xml:"RootNodeId,omitempty"`
	// example:
	//
	// lHiicjNFM2iSFYSdz2iPuI8ZwiEiE
	TeamId *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
	// example:
	//
	// TEAM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// workspace_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// MJ0pDSKMV9dO20E4
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetWorkspaceResponseBodyWorkspace) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponseBodyWorkspace) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponseBodyWorkspace) SetCorpId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.CorpId = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetCover(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Cover = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetCreateTime(v string) *GetWorkspaceResponseBodyWorkspace {
	s.CreateTime = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetCreatorId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.CreatorId = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetDescription(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Description = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetIcon(v *GetWorkspaceResponseBodyWorkspaceIcon) *GetWorkspaceResponseBodyWorkspace {
	s.Icon = v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetModifiedTime(v string) *GetWorkspaceResponseBodyWorkspace {
	s.ModifiedTime = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetModifierId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.ModifierId = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetName(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Name = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetPermissionRole(v string) *GetWorkspaceResponseBodyWorkspace {
	s.PermissionRole = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetRootNodeId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.RootNodeId = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetTeamId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.TeamId = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetType(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Type = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetUrl(v string) *GetWorkspaceResponseBodyWorkspace {
	s.Url = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspace) SetWorkspaceId(v string) *GetWorkspaceResponseBodyWorkspace {
	s.WorkspaceId = &v
	return s
}

type GetWorkspaceResponseBodyWorkspaceIcon struct {
	// example:
	//
	// URL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetWorkspaceResponseBodyWorkspaceIcon) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponseBodyWorkspaceIcon) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponseBodyWorkspaceIcon) SetType(v string) *GetWorkspaceResponseBodyWorkspaceIcon {
	s.Type = &v
	return s
}

func (s *GetWorkspaceResponseBodyWorkspaceIcon) SetValue(v string) *GetWorkspaceResponseBodyWorkspaceIcon {
	s.Value = &v
	return s
}

type GetWorkspaceResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkspaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkspaceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspaceResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspaceResponse) SetHeaders(v map[string]*string) *GetWorkspaceResponse {
	s.Headers = v
	return s
}

func (s *GetWorkspaceResponse) SetStatusCode(v int32) *GetWorkspaceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkspaceResponse) SetBody(v *GetWorkspaceResponseBody) *GetWorkspaceResponse {
	s.Body = v
	return s
}

type GetWorkspacesHeaders struct {
	CommonHeaders  map[string]*string                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GetWorkspacesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GetWorkspacesHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesHeaders) GoString() string {
	return s.String()
}

func (s *GetWorkspacesHeaders) SetCommonHeaders(v map[string]*string) *GetWorkspacesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetWorkspacesHeaders) SetAccountContext(v *GetWorkspacesHeadersAccountContext) *GetWorkspacesHeaders {
	s.AccountContext = v
	return s
}

type GetWorkspacesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GetWorkspacesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GetWorkspacesHeadersAccountContext) SetAccountId(v string) *GetWorkspacesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GetWorkspacesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GetWorkspacesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GetWorkspacesShrinkHeaders) SetCommonHeaders(v map[string]*string) *GetWorkspacesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GetWorkspacesShrinkHeaders) SetAccountContextShrink(v string) *GetWorkspacesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GetWorkspacesRequest struct {
	Option        *GetWorkspacesRequestOption        `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	TenantContext *GetWorkspacesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// workspace_id
	WorkspaceIds []*string `json:"WorkspaceIds,omitempty" xml:"WorkspaceIds,omitempty" type:"Repeated"`
}

func (s GetWorkspacesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspacesRequest) SetOption(v *GetWorkspacesRequestOption) *GetWorkspacesRequest {
	s.Option = v
	return s
}

func (s *GetWorkspacesRequest) SetTenantContext(v *GetWorkspacesRequestTenantContext) *GetWorkspacesRequest {
	s.TenantContext = v
	return s
}

func (s *GetWorkspacesRequest) SetWorkspaceIds(v []*string) *GetWorkspacesRequest {
	s.WorkspaceIds = v
	return s
}

type GetWorkspacesRequestOption struct {
	// example:
	//
	// true
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
}

func (s GetWorkspacesRequestOption) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesRequestOption) GoString() string {
	return s.String()
}

func (s *GetWorkspacesRequestOption) SetWithPermissionRole(v bool) *GetWorkspacesRequestOption {
	s.WithPermissionRole = &v
	return s
}

type GetWorkspacesRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GetWorkspacesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GetWorkspacesRequestTenantContext) SetTenantId(v string) *GetWorkspacesRequestTenantContext {
	s.TenantId = &v
	return s
}

type GetWorkspacesShrinkRequest struct {
	OptionShrink        *string `json:"Option,omitempty" xml:"Option,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// workspace_id
	WorkspaceIdsShrink *string `json:"WorkspaceIds,omitempty" xml:"WorkspaceIds,omitempty"`
}

func (s GetWorkspacesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesShrinkRequest) GoString() string {
	return s.String()
}

func (s *GetWorkspacesShrinkRequest) SetOptionShrink(v string) *GetWorkspacesShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *GetWorkspacesShrinkRequest) SetTenantContextShrink(v string) *GetWorkspacesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GetWorkspacesShrinkRequest) SetWorkspaceIdsShrink(v string) *GetWorkspacesShrinkRequest {
	s.WorkspaceIdsShrink = &v
	return s
}

type GetWorkspacesResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                               `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Workspace []*GetWorkspacesResponseBodyWorkspace `json:"workspace,omitempty" xml:"workspace,omitempty" type:"Repeated"`
}

func (s GetWorkspacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkspacesResponseBody) SetRequestId(v string) *GetWorkspacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkspacesResponseBody) SetWorkspace(v []*GetWorkspacesResponseBodyWorkspace) *GetWorkspacesResponseBody {
	s.Workspace = v
	return s
}

type GetWorkspacesResponseBodyWorkspace struct {
	// example:
	//
	// ding16b241fd05********288
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// workspace_description
	Description *string                                 `json:"Description,omitempty" xml:"Description,omitempty"`
	Icon        *GetWorkspacesResponseBodyWorkspaceIcon `json:"Icon,omitempty" xml:"Icon,omitempty" type:"Struct"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// workspace_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk
	RootNodeId *string `json:"RootNodeId,omitempty" xml:"RootNodeId,omitempty"`
	// example:
	//
	// lHiicjNFM2iSFYSdz2iPuI8ZwiEiE
	TeamId *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
	// example:
	//
	// TEAM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// workspace_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// By8jQS1ZYjGn5b0M
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s GetWorkspacesResponseBodyWorkspace) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesResponseBodyWorkspace) GoString() string {
	return s.String()
}

func (s *GetWorkspacesResponseBodyWorkspace) SetCorpId(v string) *GetWorkspacesResponseBodyWorkspace {
	s.CorpId = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetCover(v string) *GetWorkspacesResponseBodyWorkspace {
	s.Cover = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetCreateTime(v string) *GetWorkspacesResponseBodyWorkspace {
	s.CreateTime = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetCreatorId(v string) *GetWorkspacesResponseBodyWorkspace {
	s.CreatorId = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetDescription(v string) *GetWorkspacesResponseBodyWorkspace {
	s.Description = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetIcon(v *GetWorkspacesResponseBodyWorkspaceIcon) *GetWorkspacesResponseBodyWorkspace {
	s.Icon = v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetModifiedTime(v string) *GetWorkspacesResponseBodyWorkspace {
	s.ModifiedTime = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetModifierId(v string) *GetWorkspacesResponseBodyWorkspace {
	s.ModifierId = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetName(v string) *GetWorkspacesResponseBodyWorkspace {
	s.Name = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetPermissionRole(v string) *GetWorkspacesResponseBodyWorkspace {
	s.PermissionRole = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetRootNodeId(v string) *GetWorkspacesResponseBodyWorkspace {
	s.RootNodeId = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetTeamId(v string) *GetWorkspacesResponseBodyWorkspace {
	s.TeamId = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetType(v string) *GetWorkspacesResponseBodyWorkspace {
	s.Type = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetUrl(v string) *GetWorkspacesResponseBodyWorkspace {
	s.Url = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspace) SetWorkspaceId(v string) *GetWorkspacesResponseBodyWorkspace {
	s.WorkspaceId = &v
	return s
}

type GetWorkspacesResponseBodyWorkspaceIcon struct {
	// example:
	//
	// URL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetWorkspacesResponseBodyWorkspaceIcon) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesResponseBodyWorkspaceIcon) GoString() string {
	return s.String()
}

func (s *GetWorkspacesResponseBodyWorkspaceIcon) SetType(v string) *GetWorkspacesResponseBodyWorkspaceIcon {
	s.Type = &v
	return s
}

func (s *GetWorkspacesResponseBodyWorkspaceIcon) SetValue(v string) *GetWorkspacesResponseBodyWorkspaceIcon {
	s.Value = &v
	return s
}

type GetWorkspacesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkspacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkspacesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkspacesResponse) GoString() string {
	return s.String()
}

func (s *GetWorkspacesResponse) SetHeaders(v map[string]*string) *GetWorkspacesResponse {
	s.Headers = v
	return s
}

func (s *GetWorkspacesResponse) SetStatusCode(v int32) *GetWorkspacesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkspacesResponse) SetBody(v *GetWorkspacesResponseBody) *GetWorkspacesResponse {
	s.Body = v
	return s
}

type GrantHonorHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *GrantHonorHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s GrantHonorHeaders) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorHeaders) GoString() string {
	return s.String()
}

func (s *GrantHonorHeaders) SetCommonHeaders(v map[string]*string) *GrantHonorHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GrantHonorHeaders) SetAccountContext(v *GrantHonorHeadersAccountContext) *GrantHonorHeaders {
	s.AccountContext = v
	return s
}

type GrantHonorHeadersAccountContext struct {
	// example:
	//
	// null
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s GrantHonorHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *GrantHonorHeadersAccountContext) SetAccountId(v string) *GrantHonorHeadersAccountContext {
	s.AccountId = &v
	return s
}

type GrantHonorShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s GrantHonorShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorShrinkHeaders) GoString() string {
	return s.String()
}

func (s *GrantHonorShrinkHeaders) SetCommonHeaders(v map[string]*string) *GrantHonorShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *GrantHonorShrinkHeaders) SetAccountContextShrink(v string) *GrantHonorShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type GrantHonorRequest struct {
	TenantContext *GrantHonorRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// null
	ExpirationTime *int64 `json:"expirationTime,omitempty" xml:"expirationTime,omitempty"`
	// This parameter is required.
	GrantReason *string `json:"grantReason,omitempty" xml:"grantReason,omitempty"`
	// This parameter is required.
	GranterName *string `json:"granterName,omitempty" xml:"granterName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 21659398
	HonorId *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// example:
	//
	// false
	NoticeAnnouncer *bool `json:"noticeAnnouncer,omitempty" xml:"noticeAnnouncer,omitempty"`
	// example:
	//
	// false
	NoticeSingle        *bool     `json:"noticeSingle,omitempty" xml:"noticeSingle,omitempty"`
	OpenConversationIds []*string `json:"openConversationIds,omitempty" xml:"openConversationIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 345391052
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	ReceiverUserIds []*string `json:"receiverUserIds,omitempty" xml:"receiverUserIds,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	SenderUserId *string `json:"senderUserId,omitempty" xml:"senderUserId,omitempty"`
}

func (s GrantHonorRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorRequest) GoString() string {
	return s.String()
}

func (s *GrantHonorRequest) SetTenantContext(v *GrantHonorRequestTenantContext) *GrantHonorRequest {
	s.TenantContext = v
	return s
}

func (s *GrantHonorRequest) SetExpirationTime(v int64) *GrantHonorRequest {
	s.ExpirationTime = &v
	return s
}

func (s *GrantHonorRequest) SetGrantReason(v string) *GrantHonorRequest {
	s.GrantReason = &v
	return s
}

func (s *GrantHonorRequest) SetGranterName(v string) *GrantHonorRequest {
	s.GranterName = &v
	return s
}

func (s *GrantHonorRequest) SetHonorId(v string) *GrantHonorRequest {
	s.HonorId = &v
	return s
}

func (s *GrantHonorRequest) SetNoticeAnnouncer(v bool) *GrantHonorRequest {
	s.NoticeAnnouncer = &v
	return s
}

func (s *GrantHonorRequest) SetNoticeSingle(v bool) *GrantHonorRequest {
	s.NoticeSingle = &v
	return s
}

func (s *GrantHonorRequest) SetOpenConversationIds(v []*string) *GrantHonorRequest {
	s.OpenConversationIds = v
	return s
}

func (s *GrantHonorRequest) SetOrgId(v int64) *GrantHonorRequest {
	s.OrgId = &v
	return s
}

func (s *GrantHonorRequest) SetReceiverUserIds(v []*string) *GrantHonorRequest {
	s.ReceiverUserIds = v
	return s
}

func (s *GrantHonorRequest) SetSenderUserId(v string) *GrantHonorRequest {
	s.SenderUserId = &v
	return s
}

type GrantHonorRequestTenantContext struct {
	// example:
	//
	// null
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s GrantHonorRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorRequestTenantContext) GoString() string {
	return s.String()
}

func (s *GrantHonorRequestTenantContext) SetTenantId(v string) *GrantHonorRequestTenantContext {
	s.TenantId = &v
	return s
}

type GrantHonorShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// null
	ExpirationTime *int64 `json:"expirationTime,omitempty" xml:"expirationTime,omitempty"`
	// This parameter is required.
	GrantReason *string `json:"grantReason,omitempty" xml:"grantReason,omitempty"`
	// This parameter is required.
	GranterName *string `json:"granterName,omitempty" xml:"granterName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 21659398
	HonorId *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// example:
	//
	// false
	NoticeAnnouncer *bool `json:"noticeAnnouncer,omitempty" xml:"noticeAnnouncer,omitempty"`
	// example:
	//
	// false
	NoticeSingle              *bool   `json:"noticeSingle,omitempty" xml:"noticeSingle,omitempty"`
	OpenConversationIdsShrink *string `json:"openConversationIds,omitempty" xml:"openConversationIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 345391052
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	ReceiverUserIdsShrink *string `json:"receiverUserIds,omitempty" xml:"receiverUserIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	SenderUserId *string `json:"senderUserId,omitempty" xml:"senderUserId,omitempty"`
}

func (s GrantHonorShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorShrinkRequest) GoString() string {
	return s.String()
}

func (s *GrantHonorShrinkRequest) SetTenantContextShrink(v string) *GrantHonorShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetExpirationTime(v int64) *GrantHonorShrinkRequest {
	s.ExpirationTime = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetGrantReason(v string) *GrantHonorShrinkRequest {
	s.GrantReason = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetGranterName(v string) *GrantHonorShrinkRequest {
	s.GranterName = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetHonorId(v string) *GrantHonorShrinkRequest {
	s.HonorId = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetNoticeAnnouncer(v bool) *GrantHonorShrinkRequest {
	s.NoticeAnnouncer = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetNoticeSingle(v bool) *GrantHonorShrinkRequest {
	s.NoticeSingle = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetOpenConversationIdsShrink(v string) *GrantHonorShrinkRequest {
	s.OpenConversationIdsShrink = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetOrgId(v int64) *GrantHonorShrinkRequest {
	s.OrgId = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetReceiverUserIdsShrink(v string) *GrantHonorShrinkRequest {
	s.ReceiverUserIdsShrink = &v
	return s
}

func (s *GrantHonorShrinkRequest) SetSenderUserId(v string) *GrantHonorShrinkRequest {
	s.SenderUserId = &v
	return s
}

type GrantHonorResponseBody struct {
	FailedUserIds []*string `json:"failedUserIds,omitempty" xml:"failedUserIds,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 45b4d029-ab94-4672-aa0f-bd79590374cb
	RequestId      *string   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	SuccessUserIds []*string `json:"successUserIds,omitempty" xml:"successUserIds,omitempty" type:"Repeated"`
}

func (s GrantHonorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorResponseBody) GoString() string {
	return s.String()
}

func (s *GrantHonorResponseBody) SetFailedUserIds(v []*string) *GrantHonorResponseBody {
	s.FailedUserIds = v
	return s
}

func (s *GrantHonorResponseBody) SetRequestId(v string) *GrantHonorResponseBody {
	s.RequestId = &v
	return s
}

func (s *GrantHonorResponseBody) SetSuccessUserIds(v []*string) *GrantHonorResponseBody {
	s.SuccessUserIds = v
	return s
}

type GrantHonorResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GrantHonorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GrantHonorResponse) String() string {
	return tea.Prettify(s)
}

func (s GrantHonorResponse) GoString() string {
	return s.String()
}

func (s *GrantHonorResponse) SetHeaders(v map[string]*string) *GrantHonorResponse {
	s.Headers = v
	return s
}

func (s *GrantHonorResponse) SetStatusCode(v int32) *GrantHonorResponse {
	s.StatusCode = &v
	return s
}

func (s *GrantHonorResponse) SetBody(v *GrantHonorResponseBody) *GrantHonorResponse {
	s.Body = v
	return s
}

type InitMultipartFileUploadHeaders struct {
	CommonHeaders  map[string]*string                            `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *InitMultipartFileUploadHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s InitMultipartFileUploadHeaders) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadHeaders) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadHeaders) SetCommonHeaders(v map[string]*string) *InitMultipartFileUploadHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InitMultipartFileUploadHeaders) SetAccountContext(v *InitMultipartFileUploadHeadersAccountContext) *InitMultipartFileUploadHeaders {
	s.AccountContext = v
	return s
}

type InitMultipartFileUploadHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s InitMultipartFileUploadHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadHeadersAccountContext) SetAccountId(v string) *InitMultipartFileUploadHeadersAccountContext {
	s.AccountId = &v
	return s
}

type InitMultipartFileUploadShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s InitMultipartFileUploadShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadShrinkHeaders) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadShrinkHeaders) SetCommonHeaders(v map[string]*string) *InitMultipartFileUploadShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InitMultipartFileUploadShrinkHeaders) SetAccountContextShrink(v string) *InitMultipartFileUploadShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type InitMultipartFileUploadRequest struct {
	Option *InitMultipartFileUploadRequestOption `json:"Option,omitempty" xml:"Option,omitempty" type:"Struct"`
	// example:
	//
	// dentryUuid
	ParentDentryUuid *string                                      `json:"ParentDentryUuid,omitempty" xml:"ParentDentryUuid,omitempty"`
	TenantContext    *InitMultipartFileUploadRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s InitMultipartFileUploadRequest) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadRequest) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadRequest) SetOption(v *InitMultipartFileUploadRequestOption) *InitMultipartFileUploadRequest {
	s.Option = v
	return s
}

func (s *InitMultipartFileUploadRequest) SetParentDentryUuid(v string) *InitMultipartFileUploadRequest {
	s.ParentDentryUuid = &v
	return s
}

func (s *InitMultipartFileUploadRequest) SetTenantContext(v *InitMultipartFileUploadRequestTenantContext) *InitMultipartFileUploadRequest {
	s.TenantContext = v
	return s
}

type InitMultipartFileUploadRequestOption struct {
	PreCheckParam *InitMultipartFileUploadRequestOptionPreCheckParam `json:"PreCheckParam,omitempty" xml:"PreCheckParam,omitempty" type:"Struct"`
	// example:
	//
	// ZHANGJIAKOU
	PreferRegion *string `json:"PreferRegion,omitempty" xml:"PreferRegion,omitempty"`
	// example:
	//
	// DINGTALK
	StorageDriver *string `json:"StorageDriver,omitempty" xml:"StorageDriver,omitempty"`
}

func (s InitMultipartFileUploadRequestOption) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadRequestOption) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadRequestOption) SetPreCheckParam(v *InitMultipartFileUploadRequestOptionPreCheckParam) *InitMultipartFileUploadRequestOption {
	s.PreCheckParam = v
	return s
}

func (s *InitMultipartFileUploadRequestOption) SetPreferRegion(v string) *InitMultipartFileUploadRequestOption {
	s.PreferRegion = &v
	return s
}

func (s *InitMultipartFileUploadRequestOption) SetStorageDriver(v string) *InitMultipartFileUploadRequestOption {
	s.StorageDriver = &v
	return s
}

type InitMultipartFileUploadRequestOptionPreCheckParam struct {
	// example:
	//
	// md5
	Md5 *string `json:"Md5,omitempty" xml:"Md5,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 0
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// 100
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s InitMultipartFileUploadRequestOptionPreCheckParam) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadRequestOptionPreCheckParam) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadRequestOptionPreCheckParam) SetMd5(v string) *InitMultipartFileUploadRequestOptionPreCheckParam {
	s.Md5 = &v
	return s
}

func (s *InitMultipartFileUploadRequestOptionPreCheckParam) SetName(v string) *InitMultipartFileUploadRequestOptionPreCheckParam {
	s.Name = &v
	return s
}

func (s *InitMultipartFileUploadRequestOptionPreCheckParam) SetParentId(v string) *InitMultipartFileUploadRequestOptionPreCheckParam {
	s.ParentId = &v
	return s
}

func (s *InitMultipartFileUploadRequestOptionPreCheckParam) SetSize(v int64) *InitMultipartFileUploadRequestOptionPreCheckParam {
	s.Size = &v
	return s
}

type InitMultipartFileUploadRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s InitMultipartFileUploadRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadRequestTenantContext) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadRequestTenantContext) SetTenantId(v string) *InitMultipartFileUploadRequestTenantContext {
	s.TenantId = &v
	return s
}

type InitMultipartFileUploadShrinkRequest struct {
	OptionShrink *string `json:"Option,omitempty" xml:"Option,omitempty"`
	// example:
	//
	// dentryUuid
	ParentDentryUuid    *string `json:"ParentDentryUuid,omitempty" xml:"ParentDentryUuid,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s InitMultipartFileUploadShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadShrinkRequest) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadShrinkRequest) SetOptionShrink(v string) *InitMultipartFileUploadShrinkRequest {
	s.OptionShrink = &v
	return s
}

func (s *InitMultipartFileUploadShrinkRequest) SetParentDentryUuid(v string) *InitMultipartFileUploadShrinkRequest {
	s.ParentDentryUuid = &v
	return s
}

func (s *InitMultipartFileUploadShrinkRequest) SetTenantContextShrink(v string) *InitMultipartFileUploadShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type InitMultipartFileUploadResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// DINGTALK
	StorageDriver *string `json:"storageDriver,omitempty" xml:"storageDriver,omitempty"`
	// example:
	//
	// xhy89xxxxx
	UploadKey *string `json:"uploadKey,omitempty" xml:"uploadKey,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s InitMultipartFileUploadResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadResponseBody) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadResponseBody) SetRequestId(v string) *InitMultipartFileUploadResponseBody {
	s.RequestId = &v
	return s
}

func (s *InitMultipartFileUploadResponseBody) SetStorageDriver(v string) *InitMultipartFileUploadResponseBody {
	s.StorageDriver = &v
	return s
}

func (s *InitMultipartFileUploadResponseBody) SetUploadKey(v string) *InitMultipartFileUploadResponseBody {
	s.UploadKey = &v
	return s
}

func (s *InitMultipartFileUploadResponseBody) SetVendorRequestId(v string) *InitMultipartFileUploadResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *InitMultipartFileUploadResponseBody) SetVendorType(v string) *InitMultipartFileUploadResponseBody {
	s.VendorType = &v
	return s
}

type InitMultipartFileUploadResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InitMultipartFileUploadResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InitMultipartFileUploadResponse) String() string {
	return tea.Prettify(s)
}

func (s InitMultipartFileUploadResponse) GoString() string {
	return s.String()
}

func (s *InitMultipartFileUploadResponse) SetHeaders(v map[string]*string) *InitMultipartFileUploadResponse {
	s.Headers = v
	return s
}

func (s *InitMultipartFileUploadResponse) SetStatusCode(v int32) *InitMultipartFileUploadResponse {
	s.StatusCode = &v
	return s
}

func (s *InitMultipartFileUploadResponse) SetBody(v *InitMultipartFileUploadResponseBody) *InitMultipartFileUploadResponse {
	s.Body = v
	return s
}

type InsertColumnsBeforeHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *InsertColumnsBeforeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s InsertColumnsBeforeHeaders) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeHeaders) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeHeaders) SetCommonHeaders(v map[string]*string) *InsertColumnsBeforeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InsertColumnsBeforeHeaders) SetAccountContext(v *InsertColumnsBeforeHeadersAccountContext) *InsertColumnsBeforeHeaders {
	s.AccountContext = v
	return s
}

type InsertColumnsBeforeHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s InsertColumnsBeforeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeHeadersAccountContext) SetAccountId(v string) *InsertColumnsBeforeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type InsertColumnsBeforeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s InsertColumnsBeforeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeShrinkHeaders) SetCommonHeaders(v map[string]*string) *InsertColumnsBeforeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InsertColumnsBeforeShrinkHeaders) SetAccountContextShrink(v string) *InsertColumnsBeforeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type InsertColumnsBeforeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Column *int64 `json:"Column,omitempty" xml:"Column,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3
	ColumnCount *int64 `json:"ColumnCount,omitempty" xml:"ColumnCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                                  `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *InsertColumnsBeforeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s InsertColumnsBeforeRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeRequest) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeRequest) SetColumn(v int64) *InsertColumnsBeforeRequest {
	s.Column = &v
	return s
}

func (s *InsertColumnsBeforeRequest) SetColumnCount(v int64) *InsertColumnsBeforeRequest {
	s.ColumnCount = &v
	return s
}

func (s *InsertColumnsBeforeRequest) SetSheetId(v string) *InsertColumnsBeforeRequest {
	s.SheetId = &v
	return s
}

func (s *InsertColumnsBeforeRequest) SetTenantContext(v *InsertColumnsBeforeRequestTenantContext) *InsertColumnsBeforeRequest {
	s.TenantContext = v
	return s
}

func (s *InsertColumnsBeforeRequest) SetWorkbookId(v string) *InsertColumnsBeforeRequest {
	s.WorkbookId = &v
	return s
}

type InsertColumnsBeforeRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s InsertColumnsBeforeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeRequestTenantContext) SetTenantId(v string) *InsertColumnsBeforeRequestTenantContext {
	s.TenantId = &v
	return s
}

type InsertColumnsBeforeShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Column *int64 `json:"Column,omitempty" xml:"Column,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3
	ColumnCount *int64 `json:"ColumnCount,omitempty" xml:"ColumnCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s InsertColumnsBeforeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeShrinkRequest) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeShrinkRequest) SetColumn(v int64) *InsertColumnsBeforeShrinkRequest {
	s.Column = &v
	return s
}

func (s *InsertColumnsBeforeShrinkRequest) SetColumnCount(v int64) *InsertColumnsBeforeShrinkRequest {
	s.ColumnCount = &v
	return s
}

func (s *InsertColumnsBeforeShrinkRequest) SetSheetId(v string) *InsertColumnsBeforeShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *InsertColumnsBeforeShrinkRequest) SetTenantContextShrink(v string) *InsertColumnsBeforeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *InsertColumnsBeforeShrinkRequest) SetWorkbookId(v string) *InsertColumnsBeforeShrinkRequest {
	s.WorkbookId = &v
	return s
}

type InsertColumnsBeforeResponseBody struct {
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s InsertColumnsBeforeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeResponseBody) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeResponseBody) SetId(v string) *InsertColumnsBeforeResponseBody {
	s.Id = &v
	return s
}

func (s *InsertColumnsBeforeResponseBody) SetRequestId(v string) *InsertColumnsBeforeResponseBody {
	s.RequestId = &v
	return s
}

type InsertColumnsBeforeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InsertColumnsBeforeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InsertColumnsBeforeResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertColumnsBeforeResponse) GoString() string {
	return s.String()
}

func (s *InsertColumnsBeforeResponse) SetHeaders(v map[string]*string) *InsertColumnsBeforeResponse {
	s.Headers = v
	return s
}

func (s *InsertColumnsBeforeResponse) SetStatusCode(v int32) *InsertColumnsBeforeResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertColumnsBeforeResponse) SetBody(v *InsertColumnsBeforeResponseBody) *InsertColumnsBeforeResponse {
	s.Body = v
	return s
}

type InsertRowsBeforeHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *InsertRowsBeforeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s InsertRowsBeforeHeaders) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeHeaders) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeHeaders) SetCommonHeaders(v map[string]*string) *InsertRowsBeforeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InsertRowsBeforeHeaders) SetAccountContext(v *InsertRowsBeforeHeadersAccountContext) *InsertRowsBeforeHeaders {
	s.AccountContext = v
	return s
}

type InsertRowsBeforeHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s InsertRowsBeforeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeHeadersAccountContext) SetAccountId(v string) *InsertRowsBeforeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type InsertRowsBeforeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s InsertRowsBeforeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeShrinkHeaders) SetCommonHeaders(v map[string]*string) *InsertRowsBeforeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InsertRowsBeforeShrinkHeaders) SetAccountContextShrink(v string) *InsertRowsBeforeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type InsertRowsBeforeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2
	Row *int64 `json:"Row,omitempty" xml:"Row,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                               `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *InsertRowsBeforeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s InsertRowsBeforeRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeRequest) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeRequest) SetRow(v int64) *InsertRowsBeforeRequest {
	s.Row = &v
	return s
}

func (s *InsertRowsBeforeRequest) SetRowCount(v int64) *InsertRowsBeforeRequest {
	s.RowCount = &v
	return s
}

func (s *InsertRowsBeforeRequest) SetSheetId(v string) *InsertRowsBeforeRequest {
	s.SheetId = &v
	return s
}

func (s *InsertRowsBeforeRequest) SetTenantContext(v *InsertRowsBeforeRequestTenantContext) *InsertRowsBeforeRequest {
	s.TenantContext = v
	return s
}

func (s *InsertRowsBeforeRequest) SetWorkbookId(v string) *InsertRowsBeforeRequest {
	s.WorkbookId = &v
	return s
}

type InsertRowsBeforeRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s InsertRowsBeforeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeRequestTenantContext) SetTenantId(v string) *InsertRowsBeforeRequestTenantContext {
	s.TenantId = &v
	return s
}

type InsertRowsBeforeShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2
	Row *int64 `json:"Row,omitempty" xml:"Row,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s InsertRowsBeforeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeShrinkRequest) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeShrinkRequest) SetRow(v int64) *InsertRowsBeforeShrinkRequest {
	s.Row = &v
	return s
}

func (s *InsertRowsBeforeShrinkRequest) SetRowCount(v int64) *InsertRowsBeforeShrinkRequest {
	s.RowCount = &v
	return s
}

func (s *InsertRowsBeforeShrinkRequest) SetSheetId(v string) *InsertRowsBeforeShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *InsertRowsBeforeShrinkRequest) SetTenantContextShrink(v string) *InsertRowsBeforeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *InsertRowsBeforeShrinkRequest) SetWorkbookId(v string) *InsertRowsBeforeShrinkRequest {
	s.WorkbookId = &v
	return s
}

type InsertRowsBeforeResponseBody struct {
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s InsertRowsBeforeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeResponseBody) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeResponseBody) SetId(v string) *InsertRowsBeforeResponseBody {
	s.Id = &v
	return s
}

func (s *InsertRowsBeforeResponseBody) SetRequestId(v string) *InsertRowsBeforeResponseBody {
	s.RequestId = &v
	return s
}

type InsertRowsBeforeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InsertRowsBeforeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InsertRowsBeforeResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertRowsBeforeResponse) GoString() string {
	return s.String()
}

func (s *InsertRowsBeforeResponse) SetHeaders(v map[string]*string) *InsertRowsBeforeResponse {
	s.Headers = v
	return s
}

func (s *InsertRowsBeforeResponse) SetStatusCode(v int32) *InsertRowsBeforeResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertRowsBeforeResponse) SetBody(v *InsertRowsBeforeResponseBody) *InsertRowsBeforeResponse {
	s.Body = v
	return s
}

type InviteUsersHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *InviteUsersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s InviteUsersHeaders) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersHeaders) GoString() string {
	return s.String()
}

func (s *InviteUsersHeaders) SetCommonHeaders(v map[string]*string) *InviteUsersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InviteUsersHeaders) SetAccountContext(v *InviteUsersHeadersAccountContext) *InviteUsersHeaders {
	s.AccountContext = v
	return s
}

type InviteUsersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s InviteUsersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *InviteUsersHeadersAccountContext) SetAccountId(v string) *InviteUsersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type InviteUsersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s InviteUsersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *InviteUsersShrinkHeaders) SetCommonHeaders(v map[string]*string) *InviteUsersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *InviteUsersShrinkHeaders) SetAccountContextShrink(v string) *InviteUsersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type InviteUsersRequest struct {
	InviteeList   []*InviteUsersRequestInviteeList `json:"InviteeList,omitempty" xml:"InviteeList,omitempty" type:"Repeated"`
	TenantContext *InviteUsersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId     *string                               `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	PhoneInviteeList []*InviteUsersRequestPhoneInviteeList `json:"phoneInviteeList,omitempty" xml:"phoneInviteeList,omitempty" type:"Repeated"`
}

func (s InviteUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersRequest) GoString() string {
	return s.String()
}

func (s *InviteUsersRequest) SetInviteeList(v []*InviteUsersRequestInviteeList) *InviteUsersRequest {
	s.InviteeList = v
	return s
}

func (s *InviteUsersRequest) SetTenantContext(v *InviteUsersRequestTenantContext) *InviteUsersRequest {
	s.TenantContext = v
	return s
}

func (s *InviteUsersRequest) SetConferenceId(v string) *InviteUsersRequest {
	s.ConferenceId = &v
	return s
}

func (s *InviteUsersRequest) SetPhoneInviteeList(v []*InviteUsersRequestPhoneInviteeList) *InviteUsersRequest {
	s.PhoneInviteeList = v
	return s
}

type InviteUsersRequestInviteeList struct {
	// This parameter is required.
	//
	// example:
	//
	// 测试用户
	Nick *string `json:"Nick,omitempty" xml:"Nick,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InviteUsersRequestInviteeList) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersRequestInviteeList) GoString() string {
	return s.String()
}

func (s *InviteUsersRequestInviteeList) SetNick(v string) *InviteUsersRequestInviteeList {
	s.Nick = &v
	return s
}

func (s *InviteUsersRequestInviteeList) SetUserId(v string) *InviteUsersRequestInviteeList {
	s.UserId = &v
	return s
}

type InviteUsersRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s InviteUsersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *InviteUsersRequestTenantContext) SetTenantId(v string) *InviteUsersRequestTenantContext {
	s.TenantId = &v
	return s
}

type InviteUsersRequestPhoneInviteeList struct {
	InviteClient *bool   `json:"InviteClient,omitempty" xml:"InviteClient,omitempty"`
	Nick         *string `json:"Nick,omitempty" xml:"Nick,omitempty"`
	PhoneNumber  *string `json:"PhoneNumber,omitempty" xml:"PhoneNumber,omitempty"`
	StatusCode   *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
}

func (s InviteUsersRequestPhoneInviteeList) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersRequestPhoneInviteeList) GoString() string {
	return s.String()
}

func (s *InviteUsersRequestPhoneInviteeList) SetInviteClient(v bool) *InviteUsersRequestPhoneInviteeList {
	s.InviteClient = &v
	return s
}

func (s *InviteUsersRequestPhoneInviteeList) SetNick(v string) *InviteUsersRequestPhoneInviteeList {
	s.Nick = &v
	return s
}

func (s *InviteUsersRequestPhoneInviteeList) SetPhoneNumber(v string) *InviteUsersRequestPhoneInviteeList {
	s.PhoneNumber = &v
	return s
}

func (s *InviteUsersRequestPhoneInviteeList) SetStatusCode(v string) *InviteUsersRequestPhoneInviteeList {
	s.StatusCode = &v
	return s
}

type InviteUsersShrinkRequest struct {
	InviteeListShrink   *string `json:"InviteeList,omitempty" xml:"InviteeList,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId           *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	PhoneInviteeListShrink *string `json:"phoneInviteeList,omitempty" xml:"phoneInviteeList,omitempty"`
}

func (s InviteUsersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersShrinkRequest) GoString() string {
	return s.String()
}

func (s *InviteUsersShrinkRequest) SetInviteeListShrink(v string) *InviteUsersShrinkRequest {
	s.InviteeListShrink = &v
	return s
}

func (s *InviteUsersShrinkRequest) SetTenantContextShrink(v string) *InviteUsersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *InviteUsersShrinkRequest) SetConferenceId(v string) *InviteUsersShrinkRequest {
	s.ConferenceId = &v
	return s
}

func (s *InviteUsersShrinkRequest) SetPhoneInviteeListShrink(v string) *InviteUsersShrinkRequest {
	s.PhoneInviteeListShrink = &v
	return s
}

type InviteUsersResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success         *bool   `json:"success,omitempty" xml:"success,omitempty"`
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	VendorType      *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s InviteUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersResponseBody) GoString() string {
	return s.String()
}

func (s *InviteUsersResponseBody) SetRequestId(v string) *InviteUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *InviteUsersResponseBody) SetSuccess(v bool) *InviteUsersResponseBody {
	s.Success = &v
	return s
}

func (s *InviteUsersResponseBody) SetVendorRequestId(v string) *InviteUsersResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *InviteUsersResponseBody) SetVendorType(v string) *InviteUsersResponseBody {
	s.VendorType = &v
	return s
}

type InviteUsersResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InviteUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InviteUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s InviteUsersResponse) GoString() string {
	return s.String()
}

func (s *InviteUsersResponse) SetHeaders(v map[string]*string) *InviteUsersResponse {
	s.Headers = v
	return s
}

func (s *InviteUsersResponse) SetStatusCode(v int32) *InviteUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *InviteUsersResponse) SetBody(v *InviteUsersResponseBody) *InviteUsersResponse {
	s.Body = v
	return s
}

type ListApplicationHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListApplicationHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListApplicationHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationHeaders) GoString() string {
	return s.String()
}

func (s *ListApplicationHeaders) SetCommonHeaders(v map[string]*string) *ListApplicationHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListApplicationHeaders) SetAccountContext(v *ListApplicationHeadersAccountContext) *ListApplicationHeaders {
	s.AccountContext = v
	return s
}

type ListApplicationHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListApplicationHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListApplicationHeadersAccountContext) SetAccountId(v string) *ListApplicationHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListApplicationShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListApplicationShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListApplicationShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListApplicationShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListApplicationShrinkHeaders) SetAccountContextShrink(v string) *ListApplicationShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListApplicationRequest struct {
	// example:
	//
	// createdByMe
	AppFilter *string `json:"AppFilter,omitempty" xml:"AppFilter,omitempty"`
	// example:
	//
	// keyword
	AppNameSearchKeyword *string `json:"AppNameSearchKeyword,omitempty" xml:"AppNameSearchKeyword,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// corpid
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// keyword
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// keyword
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// keyword
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s ListApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationRequest) GoString() string {
	return s.String()
}

func (s *ListApplicationRequest) SetAppFilter(v string) *ListApplicationRequest {
	s.AppFilter = &v
	return s
}

func (s *ListApplicationRequest) SetAppNameSearchKeyword(v string) *ListApplicationRequest {
	s.AppNameSearchKeyword = &v
	return s
}

func (s *ListApplicationRequest) SetCorpId(v string) *ListApplicationRequest {
	s.CorpId = &v
	return s
}

func (s *ListApplicationRequest) SetPageNumber(v int32) *ListApplicationRequest {
	s.PageNumber = &v
	return s
}

func (s *ListApplicationRequest) SetPageSize(v int32) *ListApplicationRequest {
	s.PageSize = &v
	return s
}

func (s *ListApplicationRequest) SetToken(v string) *ListApplicationRequest {
	s.Token = &v
	return s
}

type ListApplicationResponseBody struct {
	// example:
	//
	// [{}]
	Data []*ListApplicationResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 10
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBody) SetData(v []*ListApplicationResponseBodyData) *ListApplicationResponseBody {
	s.Data = v
	return s
}

func (s *ListApplicationResponseBody) SetPageNumber(v int64) *ListApplicationResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListApplicationResponseBody) SetRequestId(v string) *ListApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApplicationResponseBody) SetTotalCount(v int64) *ListApplicationResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListApplicationResponseBody) SetVendorRequestId(v string) *ListApplicationResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListApplicationResponseBody) SetVendorType(v string) *ListApplicationResponseBody {
	s.VendorType = &v
	return s
}

type ListApplicationResponseBodyData struct {
	// example:
	//
	// {\\"ODIN_TOPIC_ID\\":\\"256\\"}
	AppConfig *string `json:"AppConfig,omitempty" xml:"AppConfig,omitempty"`
	// example:
	//
	// APP_XCxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// ONLINE
	ApplicationStatus *string `json:"ApplicationStatus,omitempty" xml:"ApplicationStatus,omitempty"`
	// example:
	//
	// ding5xxx
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// 123456
	CreatorUserId *string `json:"CreatorUserId,omitempty" xml:"CreatorUserId,omitempty"`
	// example:
	//
	// 小明创建的宜搭应用
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// appdiqiu%%#0089FF
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// y
	Inexistence *string `json:"Inexistence,omitempty" xml:"Inexistence,omitempty"`
	// example:
	//
	// app
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ding5xxx
	SubCorpId *string `json:"SubCorpId,omitempty" xml:"SubCorpId,omitempty"`
}

func (s ListApplicationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListApplicationResponseBodyData) SetAppConfig(v string) *ListApplicationResponseBodyData {
	s.AppConfig = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetAppType(v string) *ListApplicationResponseBodyData {
	s.AppType = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetApplicationStatus(v string) *ListApplicationResponseBodyData {
	s.ApplicationStatus = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetCorpId(v string) *ListApplicationResponseBodyData {
	s.CorpId = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetCreatorUserId(v string) *ListApplicationResponseBodyData {
	s.CreatorUserId = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetDescription(v string) *ListApplicationResponseBodyData {
	s.Description = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetIcon(v string) *ListApplicationResponseBodyData {
	s.Icon = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetInexistence(v string) *ListApplicationResponseBodyData {
	s.Inexistence = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetName(v string) *ListApplicationResponseBodyData {
	s.Name = &v
	return s
}

func (s *ListApplicationResponseBodyData) SetSubCorpId(v string) *ListApplicationResponseBodyData {
	s.SubCorpId = &v
	return s
}

type ListApplicationResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApplicationResponse) GoString() string {
	return s.String()
}

func (s *ListApplicationResponse) SetHeaders(v map[string]*string) *ListApplicationResponse {
	s.Headers = v
	return s
}

func (s *ListApplicationResponse) SetStatusCode(v int32) *ListApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *ListApplicationResponse) SetBody(v *ListApplicationResponseBody) *ListApplicationResponse {
	s.Body = v
	return s
}

type ListCalendarsHeaders struct {
	CommonHeaders  map[string]*string                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListCalendarsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListCalendarsHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsHeaders) GoString() string {
	return s.String()
}

func (s *ListCalendarsHeaders) SetCommonHeaders(v map[string]*string) *ListCalendarsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListCalendarsHeaders) SetAccountContext(v *ListCalendarsHeadersAccountContext) *ListCalendarsHeaders {
	s.AccountContext = v
	return s
}

type ListCalendarsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListCalendarsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListCalendarsHeadersAccountContext) SetAccountId(v string) *ListCalendarsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListCalendarsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListCalendarsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListCalendarsShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListCalendarsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListCalendarsShrinkHeaders) SetAccountContextShrink(v string) *ListCalendarsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListCalendarsRequest struct {
	// example:
	//
	// {}
	Request map[string]interface{} `json:"Request,omitempty" xml:"Request,omitempty"`
}

func (s ListCalendarsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsRequest) GoString() string {
	return s.String()
}

func (s *ListCalendarsRequest) SetRequest(v map[string]interface{}) *ListCalendarsRequest {
	s.Request = v
	return s
}

type ListCalendarsShrinkRequest struct {
	// example:
	//
	// {}
	RequestShrink *string `json:"Request,omitempty" xml:"Request,omitempty"`
}

func (s ListCalendarsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListCalendarsShrinkRequest) SetRequestShrink(v string) *ListCalendarsShrinkRequest {
	s.RequestShrink = &v
	return s
}

type ListCalendarsResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                            `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Response  *ListCalendarsResponseBodyResponse `json:"response,omitempty" xml:"response,omitempty" type:"Struct"`
}

func (s ListCalendarsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCalendarsResponseBody) SetRequestId(v string) *ListCalendarsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCalendarsResponseBody) SetResponse(v *ListCalendarsResponseBodyResponse) *ListCalendarsResponseBody {
	s.Response = v
	return s
}

type ListCalendarsResponseBodyResponse struct {
	Calendars []*ListCalendarsResponseBodyResponseCalendars `json:"Calendars,omitempty" xml:"Calendars,omitempty" type:"Repeated"`
}

func (s ListCalendarsResponseBodyResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsResponseBodyResponse) GoString() string {
	return s.String()
}

func (s *ListCalendarsResponseBodyResponse) SetCalendars(v []*ListCalendarsResponseBodyResponseCalendars) *ListCalendarsResponseBodyResponse {
	s.Calendars = v
	return s
}

type ListCalendarsResponseBodyResponseCalendars struct {
	// example:
	//
	// 描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 0
	ETag *string `json:"ETag,omitempty" xml:"ETag,omitempty"`
	// example:
	//
	// cnNTbWxxx
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// VIEW_DETAIL
	Privilege *string `json:"Privilege,omitempty" xml:"Privilege,omitempty"`
	// example:
	//
	// 标题
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
	// example:
	//
	// primary
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCalendarsResponseBodyResponseCalendars) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsResponseBodyResponseCalendars) GoString() string {
	return s.String()
}

func (s *ListCalendarsResponseBodyResponseCalendars) SetDescription(v string) *ListCalendarsResponseBodyResponseCalendars {
	s.Description = &v
	return s
}

func (s *ListCalendarsResponseBodyResponseCalendars) SetETag(v string) *ListCalendarsResponseBodyResponseCalendars {
	s.ETag = &v
	return s
}

func (s *ListCalendarsResponseBodyResponseCalendars) SetId(v string) *ListCalendarsResponseBodyResponseCalendars {
	s.Id = &v
	return s
}

func (s *ListCalendarsResponseBodyResponseCalendars) SetPrivilege(v string) *ListCalendarsResponseBodyResponseCalendars {
	s.Privilege = &v
	return s
}

func (s *ListCalendarsResponseBodyResponseCalendars) SetSummary(v string) *ListCalendarsResponseBodyResponseCalendars {
	s.Summary = &v
	return s
}

func (s *ListCalendarsResponseBodyResponseCalendars) SetTimeZone(v string) *ListCalendarsResponseBodyResponseCalendars {
	s.TimeZone = &v
	return s
}

func (s *ListCalendarsResponseBodyResponseCalendars) SetType(v string) *ListCalendarsResponseBodyResponseCalendars {
	s.Type = &v
	return s
}

type ListCalendarsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCalendarsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCalendarsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCalendarsResponse) GoString() string {
	return s.String()
}

func (s *ListCalendarsResponse) SetHeaders(v map[string]*string) *ListCalendarsResponse {
	s.Headers = v
	return s
}

func (s *ListCalendarsResponse) SetStatusCode(v int32) *ListCalendarsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCalendarsResponse) SetBody(v *ListCalendarsResponseBody) *ListCalendarsResponse {
	s.Body = v
	return s
}

type ListDentriesHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListDentriesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListDentriesHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesHeaders) GoString() string {
	return s.String()
}

func (s *ListDentriesHeaders) SetCommonHeaders(v map[string]*string) *ListDentriesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListDentriesHeaders) SetAccountContext(v *ListDentriesHeadersAccountContext) *ListDentriesHeaders {
	s.AccountContext = v
	return s
}

type ListDentriesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListDentriesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListDentriesHeadersAccountContext) SetAccountId(v string) *ListDentriesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListDentriesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListDentriesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListDentriesShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListDentriesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListDentriesShrinkHeaders) SetAccountContextShrink(v string) *ListDentriesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListDentriesRequest struct {
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// next_token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// ASC
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// MODIFIED_TIME
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 854xxxxx
	SpaceId       *string                           `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContext *ListDentriesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// true
	WithThumbnail *bool `json:"WithThumbnail,omitempty" xml:"WithThumbnail,omitempty"`
}

func (s ListDentriesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesRequest) GoString() string {
	return s.String()
}

func (s *ListDentriesRequest) SetMaxResults(v int32) *ListDentriesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDentriesRequest) SetNextToken(v string) *ListDentriesRequest {
	s.NextToken = &v
	return s
}

func (s *ListDentriesRequest) SetOrder(v string) *ListDentriesRequest {
	s.Order = &v
	return s
}

func (s *ListDentriesRequest) SetOrderBy(v string) *ListDentriesRequest {
	s.OrderBy = &v
	return s
}

func (s *ListDentriesRequest) SetParentId(v string) *ListDentriesRequest {
	s.ParentId = &v
	return s
}

func (s *ListDentriesRequest) SetSpaceId(v string) *ListDentriesRequest {
	s.SpaceId = &v
	return s
}

func (s *ListDentriesRequest) SetTenantContext(v *ListDentriesRequestTenantContext) *ListDentriesRequest {
	s.TenantContext = v
	return s
}

func (s *ListDentriesRequest) SetWithThumbnail(v bool) *ListDentriesRequest {
	s.WithThumbnail = &v
	return s
}

type ListDentriesRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ListDentriesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ListDentriesRequestTenantContext) SetTenantId(v string) *ListDentriesRequestTenantContext {
	s.TenantId = &v
	return s
}

type ListDentriesShrinkRequest struct {
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// next_token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// ASC
	Order *string `json:"Order,omitempty" xml:"Order,omitempty"`
	// example:
	//
	// MODIFIED_TIME
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 854xxxxx
	SpaceId             *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// true
	WithThumbnail *bool `json:"WithThumbnail,omitempty" xml:"WithThumbnail,omitempty"`
}

func (s ListDentriesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDentriesShrinkRequest) SetMaxResults(v int32) *ListDentriesShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDentriesShrinkRequest) SetNextToken(v string) *ListDentriesShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListDentriesShrinkRequest) SetOrder(v string) *ListDentriesShrinkRequest {
	s.Order = &v
	return s
}

func (s *ListDentriesShrinkRequest) SetOrderBy(v string) *ListDentriesShrinkRequest {
	s.OrderBy = &v
	return s
}

func (s *ListDentriesShrinkRequest) SetParentId(v string) *ListDentriesShrinkRequest {
	s.ParentId = &v
	return s
}

func (s *ListDentriesShrinkRequest) SetSpaceId(v string) *ListDentriesShrinkRequest {
	s.SpaceId = &v
	return s
}

func (s *ListDentriesShrinkRequest) SetTenantContextShrink(v string) *ListDentriesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *ListDentriesShrinkRequest) SetWithThumbnail(v bool) *ListDentriesShrinkRequest {
	s.WithThumbnail = &v
	return s
}

type ListDentriesResponseBody struct {
	Dentries []*ListDentriesResponseBodyDentries `json:"dentries,omitempty" xml:"dentries,omitempty" type:"Repeated"`
	// example:
	//
	// next_token
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListDentriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDentriesResponseBody) SetDentries(v []*ListDentriesResponseBodyDentries) *ListDentriesResponseBody {
	s.Dentries = v
	return s
}

func (s *ListDentriesResponseBody) SetNextToken(v string) *ListDentriesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDentriesResponseBody) SetRequestId(v string) *ListDentriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDentriesResponseBody) SetVendorRequestId(v string) *ListDentriesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListDentriesResponseBody) SetVendorType(v string) *ListDentriesResponseBody {
	s.VendorType = &v
	return s
}

type ListDentriesResponseBodyDentries struct {
	AppProperties map[string][]*DentriesAppPropertiesValue `json:"AppProperties,omitempty" xml:"AppProperties,omitempty"`
	// example:
	//
	// 2022-01-01T10:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// cHtUxxxxx
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// txt
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// 657xxxxx
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2022-01-01T10:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// cHtUxxxxx
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// 测试文件夹
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 0
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// PUBLIC_OSS_PARTITION
	PartitionType *string `json:"PartitionType,omitempty" xml:"PartitionType,omitempty"`
	// example:
	//
	// ./test.txt
	Path       *string                                     `json:"Path,omitempty" xml:"Path,omitempty"`
	Properties *ListDentriesResponseBodyDentriesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
	// example:
	//
	// 512
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 854xxxxx
	SpaceId *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	// example:
	//
	// NORMAL
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// DINGTALK
	StorageDriver *string                                    `json:"StorageDriver,omitempty" xml:"StorageDriver,omitempty"`
	Thumbnail     *ListDentriesResponseBodyDentriesThumbnail `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty" type:"Struct"`
	// example:
	//
	// FILE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 123xxxxx
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// example:
	//
	// 1
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ListDentriesResponseBodyDentries) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesResponseBodyDentries) GoString() string {
	return s.String()
}

func (s *ListDentriesResponseBodyDentries) SetAppProperties(v map[string][]*DentriesAppPropertiesValue) *ListDentriesResponseBodyDentries {
	s.AppProperties = v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetCreateTime(v string) *ListDentriesResponseBodyDentries {
	s.CreateTime = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetCreatorId(v string) *ListDentriesResponseBodyDentries {
	s.CreatorId = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetExtension(v string) *ListDentriesResponseBodyDentries {
	s.Extension = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetId(v string) *ListDentriesResponseBodyDentries {
	s.Id = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetModifiedTime(v string) *ListDentriesResponseBodyDentries {
	s.ModifiedTime = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetModifierId(v string) *ListDentriesResponseBodyDentries {
	s.ModifierId = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetName(v string) *ListDentriesResponseBodyDentries {
	s.Name = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetParentId(v string) *ListDentriesResponseBodyDentries {
	s.ParentId = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetPartitionType(v string) *ListDentriesResponseBodyDentries {
	s.PartitionType = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetPath(v string) *ListDentriesResponseBodyDentries {
	s.Path = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetProperties(v *ListDentriesResponseBodyDentriesProperties) *ListDentriesResponseBodyDentries {
	s.Properties = v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetSize(v int64) *ListDentriesResponseBodyDentries {
	s.Size = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetSpaceId(v string) *ListDentriesResponseBodyDentries {
	s.SpaceId = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetStatus(v string) *ListDentriesResponseBodyDentries {
	s.Status = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetStorageDriver(v string) *ListDentriesResponseBodyDentries {
	s.StorageDriver = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetThumbnail(v *ListDentriesResponseBodyDentriesThumbnail) *ListDentriesResponseBodyDentries {
	s.Thumbnail = v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetType(v string) *ListDentriesResponseBodyDentries {
	s.Type = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetUuid(v string) *ListDentriesResponseBodyDentries {
	s.Uuid = &v
	return s
}

func (s *ListDentriesResponseBodyDentries) SetVersion(v int64) *ListDentriesResponseBodyDentries {
	s.Version = &v
	return s
}

type ListDentriesResponseBodyDentriesProperties struct {
	// example:
	//
	// true
	ReadOnly *bool `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
}

func (s ListDentriesResponseBodyDentriesProperties) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesResponseBodyDentriesProperties) GoString() string {
	return s.String()
}

func (s *ListDentriesResponseBodyDentriesProperties) SetReadOnly(v bool) *ListDentriesResponseBodyDentriesProperties {
	s.ReadOnly = &v
	return s
}

type ListDentriesResponseBodyDentriesThumbnail struct {
	// example:
	//
	// 64
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// 64
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListDentriesResponseBodyDentriesThumbnail) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesResponseBodyDentriesThumbnail) GoString() string {
	return s.String()
}

func (s *ListDentriesResponseBodyDentriesThumbnail) SetHeight(v int32) *ListDentriesResponseBodyDentriesThumbnail {
	s.Height = &v
	return s
}

func (s *ListDentriesResponseBodyDentriesThumbnail) SetUrl(v string) *ListDentriesResponseBodyDentriesThumbnail {
	s.Url = &v
	return s
}

func (s *ListDentriesResponseBodyDentriesThumbnail) SetWidth(v int32) *ListDentriesResponseBodyDentriesThumbnail {
	s.Width = &v
	return s
}

type ListDentriesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDentriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDentriesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDentriesResponse) GoString() string {
	return s.String()
}

func (s *ListDentriesResponse) SetHeaders(v map[string]*string) *ListDentriesResponse {
	s.Headers = v
	return s
}

func (s *ListDentriesResponse) SetStatusCode(v int32) *ListDentriesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDentriesResponse) SetBody(v *ListDentriesResponseBody) *ListDentriesResponse {
	s.Body = v
	return s
}

type ListDriveSpacesHeaders struct {
	CommonHeaders map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	// This parameter is required.
	AccountContext *ListDriveSpacesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListDriveSpacesHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesHeaders) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesHeaders) SetCommonHeaders(v map[string]*string) *ListDriveSpacesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListDriveSpacesHeaders) SetAccountContext(v *ListDriveSpacesHeadersAccountContext) *ListDriveSpacesHeaders {
	s.AccountContext = v
	return s
}

type ListDriveSpacesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListDriveSpacesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesHeadersAccountContext) SetAccountId(v string) *ListDriveSpacesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListDriveSpacesShrinkHeaders struct {
	CommonHeaders map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	// This parameter is required.
	AccountContextShrink *string `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListDriveSpacesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListDriveSpacesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListDriveSpacesShrinkHeaders) SetAccountContextShrink(v string) *ListDriveSpacesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListDriveSpacesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// fekaf
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// org
	SpaceType     *string                              `json:"SpaceType,omitempty" xml:"SpaceType,omitempty"`
	TenantContext *ListDriveSpacesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s ListDriveSpacesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesRequest) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesRequest) SetMaxResults(v int32) *ListDriveSpacesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDriveSpacesRequest) SetNextToken(v string) *ListDriveSpacesRequest {
	s.NextToken = &v
	return s
}

func (s *ListDriveSpacesRequest) SetSpaceType(v string) *ListDriveSpacesRequest {
	s.SpaceType = &v
	return s
}

func (s *ListDriveSpacesRequest) SetTenantContext(v *ListDriveSpacesRequestTenantContext) *ListDriveSpacesRequest {
	s.TenantContext = v
	return s
}

type ListDriveSpacesRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ListDriveSpacesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesRequestTenantContext) SetTenantId(v string) *ListDriveSpacesRequestTenantContext {
	s.TenantId = &v
	return s
}

type ListDriveSpacesShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// fekaf
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// org
	SpaceType           *string `json:"SpaceType,omitempty" xml:"SpaceType,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s ListDriveSpacesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesShrinkRequest) SetMaxResults(v int32) *ListDriveSpacesShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListDriveSpacesShrinkRequest) SetNextToken(v string) *ListDriveSpacesShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListDriveSpacesShrinkRequest) SetSpaceType(v string) *ListDriveSpacesShrinkRequest {
	s.SpaceType = &v
	return s
}

func (s *ListDriveSpacesShrinkRequest) SetTenantContextShrink(v string) *ListDriveSpacesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type ListDriveSpacesResponseBody struct {
	// example:
	//
	// fekaf
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                              `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Spaces    []*ListDriveSpacesResponseBodySpaces `json:"spaces,omitempty" xml:"spaces,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListDriveSpacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesResponseBody) SetNextToken(v string) *ListDriveSpacesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListDriveSpacesResponseBody) SetRequestId(v string) *ListDriveSpacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDriveSpacesResponseBody) SetSpaces(v []*ListDriveSpacesResponseBodySpaces) *ListDriveSpacesResponseBody {
	s.Spaces = v
	return s
}

func (s *ListDriveSpacesResponseBody) SetVendorRequestId(v string) *ListDriveSpacesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListDriveSpacesResponseBody) SetVendorType(v string) *ListDriveSpacesResponseBody {
	s.VendorType = &v
	return s
}

type ListDriveSpacesResponseBodySpaces struct {
	// example:
	//
	// 2016-02-28T10:47:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2016-02-28T10:47:08Z
	ModifyTime *string `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	// example:
	//
	// acl
	PermissionMode *string `json:"PermissionMode,omitempty" xml:"PermissionMode,omitempty"`
	// example:
	//
	// 2147483648
	Quota *int64 `json:"Quota,omitempty" xml:"Quota,omitempty"`
	// example:
	//
	// 123456789
	SpaceId   *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	SpaceName *string `json:"SpaceName,omitempty" xml:"SpaceName,omitempty"`
	// example:
	//
	// org
	SpaceType *string `json:"SpaceType,omitempty" xml:"SpaceType,omitempty"`
	// example:
	//
	// 640445953
	UsedQuota *int64 `json:"UsedQuota,omitempty" xml:"UsedQuota,omitempty"`
}

func (s ListDriveSpacesResponseBodySpaces) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesResponseBodySpaces) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesResponseBodySpaces) SetCreateTime(v string) *ListDriveSpacesResponseBodySpaces {
	s.CreateTime = &v
	return s
}

func (s *ListDriveSpacesResponseBodySpaces) SetModifyTime(v string) *ListDriveSpacesResponseBodySpaces {
	s.ModifyTime = &v
	return s
}

func (s *ListDriveSpacesResponseBodySpaces) SetPermissionMode(v string) *ListDriveSpacesResponseBodySpaces {
	s.PermissionMode = &v
	return s
}

func (s *ListDriveSpacesResponseBodySpaces) SetQuota(v int64) *ListDriveSpacesResponseBodySpaces {
	s.Quota = &v
	return s
}

func (s *ListDriveSpacesResponseBodySpaces) SetSpaceId(v string) *ListDriveSpacesResponseBodySpaces {
	s.SpaceId = &v
	return s
}

func (s *ListDriveSpacesResponseBodySpaces) SetSpaceName(v string) *ListDriveSpacesResponseBodySpaces {
	s.SpaceName = &v
	return s
}

func (s *ListDriveSpacesResponseBodySpaces) SetSpaceType(v string) *ListDriveSpacesResponseBodySpaces {
	s.SpaceType = &v
	return s
}

func (s *ListDriveSpacesResponseBodySpaces) SetUsedQuota(v int64) *ListDriveSpacesResponseBodySpaces {
	s.UsedQuota = &v
	return s
}

type ListDriveSpacesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDriveSpacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDriveSpacesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDriveSpacesResponse) GoString() string {
	return s.String()
}

func (s *ListDriveSpacesResponse) SetHeaders(v map[string]*string) *ListDriveSpacesResponse {
	s.Headers = v
	return s
}

func (s *ListDriveSpacesResponse) SetStatusCode(v int32) *ListDriveSpacesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDriveSpacesResponse) SetBody(v *ListDriveSpacesResponseBody) *ListDriveSpacesResponse {
	s.Body = v
	return s
}

type ListEventsHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListEventsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListEventsHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListEventsHeaders) GoString() string {
	return s.String()
}

func (s *ListEventsHeaders) SetCommonHeaders(v map[string]*string) *ListEventsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListEventsHeaders) SetAccountContext(v *ListEventsHeadersAccountContext) *ListEventsHeaders {
	s.AccountContext = v
	return s
}

type ListEventsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 208579
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListEventsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListEventsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListEventsHeadersAccountContext) SetAccountId(v string) *ListEventsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListEventsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListEventsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListEventsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListEventsShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListEventsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListEventsShrinkHeaders) SetAccountContextShrink(v string) *ListEventsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListEventsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// example:
	//
	// 100
	MaxAttendees *int32 `json:"MaxAttendees,omitempty" xml:"MaxAttendees,omitempty"`
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// cnNTbW1YbxxxxdlQrQT09
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// cnNTbWxxxxaFJZdEgvdlQrQT09
	SeriesMasterId *string `json:"SeriesMasterId,omitempty" xml:"SeriesMasterId,omitempty"`
	// example:
	//
	// true
	ShowDeleted *bool `json:"ShowDeleted,omitempty" xml:"ShowDeleted,omitempty"`
	// example:
	//
	// zxcasdfvc000009
	SyncToken *string `json:"SyncToken,omitempty" xml:"SyncToken,omitempty"`
	// example:
	//
	// 2023-06-21T00:00:00+08:00
	TimeMax *string `json:"TimeMax,omitempty" xml:"TimeMax,omitempty"`
	// example:
	//
	// 2023-06-20T00:00:00+08:00
	TimeMin *string `json:"TimeMin,omitempty" xml:"TimeMin,omitempty"`
}

func (s ListEventsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEventsRequest) GoString() string {
	return s.String()
}

func (s *ListEventsRequest) SetCalendarId(v string) *ListEventsRequest {
	s.CalendarId = &v
	return s
}

func (s *ListEventsRequest) SetMaxAttendees(v int32) *ListEventsRequest {
	s.MaxAttendees = &v
	return s
}

func (s *ListEventsRequest) SetMaxResults(v int32) *ListEventsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListEventsRequest) SetNextToken(v string) *ListEventsRequest {
	s.NextToken = &v
	return s
}

func (s *ListEventsRequest) SetSeriesMasterId(v string) *ListEventsRequest {
	s.SeriesMasterId = &v
	return s
}

func (s *ListEventsRequest) SetShowDeleted(v bool) *ListEventsRequest {
	s.ShowDeleted = &v
	return s
}

func (s *ListEventsRequest) SetSyncToken(v string) *ListEventsRequest {
	s.SyncToken = &v
	return s
}

func (s *ListEventsRequest) SetTimeMax(v string) *ListEventsRequest {
	s.TimeMax = &v
	return s
}

func (s *ListEventsRequest) SetTimeMin(v string) *ListEventsRequest {
	s.TimeMin = &v
	return s
}

type ListEventsResponseBody struct {
	Events []*ListEventsResponseBodyEvents `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
	// example:
	//
	// cnNTbW1YbxxxxdlQrQT09
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 4248DCC9-785F-5A14-8BE0-830FD52E1261
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// zxcasdfvc000009
	SyncToken       *string `json:"syncToken,omitempty" xml:"syncToken,omitempty"`
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	VendorType      *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListEventsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBody) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBody) SetEvents(v []*ListEventsResponseBodyEvents) *ListEventsResponseBody {
	s.Events = v
	return s
}

func (s *ListEventsResponseBody) SetNextToken(v string) *ListEventsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListEventsResponseBody) SetRequestId(v string) *ListEventsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEventsResponseBody) SetSyncToken(v string) *ListEventsResponseBody {
	s.SyncToken = &v
	return s
}

func (s *ListEventsResponseBody) SetVendorRequestId(v string) *ListEventsResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListEventsResponseBody) SetVendorType(v string) *ListEventsResponseBody {
	s.VendorType = &v
	return s
}

type ListEventsResponseBodyEvents struct {
	Attendees  []*ListEventsResponseBodyEventsAttendees  `json:"Attendees,omitempty" xml:"Attendees,omitempty" type:"Repeated"`
	Categories []*ListEventsResponseBodyEventsCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// something about this event
	Description        *string                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	End                *ListEventsResponseBodyEventsEnd                `json:"End,omitempty" xml:"End,omitempty" type:"Struct"`
	ExtendedProperties *ListEventsResponseBodyEventsExtendedProperties `json:"ExtendedProperties,omitempty" xml:"ExtendedProperties,omitempty" type:"Struct"`
	// example:
	//
	// cnNTbW1YbxxxxdEgvdlQrQT09
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// true
	IsAllDay            *bool                                            `json:"IsAllDay,omitempty" xml:"IsAllDay,omitempty"`
	Location            *ListEventsResponseBodyEventsLocation            `json:"Location,omitempty" xml:"Location,omitempty" type:"Struct"`
	MeetingRooms        []*ListEventsResponseBodyEventsMeetingRooms      `json:"MeetingRooms,omitempty" xml:"MeetingRooms,omitempty" type:"Repeated"`
	OnlineMeetingInfo   *ListEventsResponseBodyEventsOnlineMeetingInfo   `json:"OnlineMeetingInfo,omitempty" xml:"OnlineMeetingInfo,omitempty" type:"Struct"`
	Organizer           *ListEventsResponseBodyEventsOrganizer           `json:"Organizer,omitempty" xml:"Organizer,omitempty" type:"Struct"`
	OriginStart         *ListEventsResponseBodyEventsOriginStart         `json:"OriginStart,omitempty" xml:"OriginStart,omitempty" type:"Struct"`
	Recurrence          *ListEventsResponseBodyEventsRecurrence          `json:"Recurrence,omitempty" xml:"Recurrence,omitempty" type:"Struct"`
	Reminders           []*ListEventsResponseBodyEventsReminders         `json:"Reminders,omitempty" xml:"Reminders,omitempty" type:"Repeated"`
	RichTextDescription *ListEventsResponseBodyEventsRichTextDescription `json:"RichTextDescription,omitempty" xml:"RichTextDescription,omitempty" type:"Struct"`
	// example:
	//
	// cnNTbWxxxxaFJZdEgvdlQrQT09
	SeriesMasterId *string                            `json:"SeriesMasterId,omitempty" xml:"SeriesMasterId,omitempty"`
	Start          *ListEventsResponseBodyEventsStart `json:"Start,omitempty" xml:"Start,omitempty" type:"Struct"`
	// example:
	//
	// confirmed
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListEventsResponseBodyEvents) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEvents) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEvents) SetAttendees(v []*ListEventsResponseBodyEventsAttendees) *ListEventsResponseBodyEvents {
	s.Attendees = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetCategories(v []*ListEventsResponseBodyEventsCategories) *ListEventsResponseBodyEvents {
	s.Categories = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetCreateTime(v string) *ListEventsResponseBodyEvents {
	s.CreateTime = &v
	return s
}

func (s *ListEventsResponseBodyEvents) SetDescription(v string) *ListEventsResponseBodyEvents {
	s.Description = &v
	return s
}

func (s *ListEventsResponseBodyEvents) SetEnd(v *ListEventsResponseBodyEventsEnd) *ListEventsResponseBodyEvents {
	s.End = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetExtendedProperties(v *ListEventsResponseBodyEventsExtendedProperties) *ListEventsResponseBodyEvents {
	s.ExtendedProperties = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetId(v string) *ListEventsResponseBodyEvents {
	s.Id = &v
	return s
}

func (s *ListEventsResponseBodyEvents) SetIsAllDay(v bool) *ListEventsResponseBodyEvents {
	s.IsAllDay = &v
	return s
}

func (s *ListEventsResponseBodyEvents) SetLocation(v *ListEventsResponseBodyEventsLocation) *ListEventsResponseBodyEvents {
	s.Location = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetMeetingRooms(v []*ListEventsResponseBodyEventsMeetingRooms) *ListEventsResponseBodyEvents {
	s.MeetingRooms = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetOnlineMeetingInfo(v *ListEventsResponseBodyEventsOnlineMeetingInfo) *ListEventsResponseBodyEvents {
	s.OnlineMeetingInfo = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetOrganizer(v *ListEventsResponseBodyEventsOrganizer) *ListEventsResponseBodyEvents {
	s.Organizer = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetOriginStart(v *ListEventsResponseBodyEventsOriginStart) *ListEventsResponseBodyEvents {
	s.OriginStart = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetRecurrence(v *ListEventsResponseBodyEventsRecurrence) *ListEventsResponseBodyEvents {
	s.Recurrence = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetReminders(v []*ListEventsResponseBodyEventsReminders) *ListEventsResponseBodyEvents {
	s.Reminders = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetRichTextDescription(v *ListEventsResponseBodyEventsRichTextDescription) *ListEventsResponseBodyEvents {
	s.RichTextDescription = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetSeriesMasterId(v string) *ListEventsResponseBodyEvents {
	s.SeriesMasterId = &v
	return s
}

func (s *ListEventsResponseBodyEvents) SetStart(v *ListEventsResponseBodyEventsStart) *ListEventsResponseBodyEvents {
	s.Start = v
	return s
}

func (s *ListEventsResponseBodyEvents) SetStatus(v string) *ListEventsResponseBodyEvents {
	s.Status = &v
	return s
}

func (s *ListEventsResponseBodyEvents) SetSummary(v string) *ListEventsResponseBodyEvents {
	s.Summary = &v
	return s
}

func (s *ListEventsResponseBodyEvents) SetUpdateTime(v string) *ListEventsResponseBodyEvents {
	s.UpdateTime = &v
	return s
}

type ListEventsResponseBodyEventsAttendees struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// true
	IsOptional *bool `json:"IsOptional,omitempty" xml:"IsOptional,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s ListEventsResponseBodyEventsAttendees) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsAttendees) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsAttendees) SetDisplayName(v string) *ListEventsResponseBodyEventsAttendees {
	s.DisplayName = &v
	return s
}

func (s *ListEventsResponseBodyEventsAttendees) SetIsOptional(v bool) *ListEventsResponseBodyEventsAttendees {
	s.IsOptional = &v
	return s
}

func (s *ListEventsResponseBodyEventsAttendees) SetResponseStatus(v string) *ListEventsResponseBodyEventsAttendees {
	s.ResponseStatus = &v
	return s
}

func (s *ListEventsResponseBodyEventsAttendees) SetSelf(v bool) *ListEventsResponseBodyEventsAttendees {
	s.Self = &v
	return s
}

type ListEventsResponseBodyEventsCategories struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
}

func (s ListEventsResponseBodyEventsCategories) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsCategories) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsCategories) SetDisplayName(v string) *ListEventsResponseBodyEventsCategories {
	s.DisplayName = &v
	return s
}

type ListEventsResponseBodyEventsEnd struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s ListEventsResponseBodyEventsEnd) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsEnd) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsEnd) SetDate(v string) *ListEventsResponseBodyEventsEnd {
	s.Date = &v
	return s
}

func (s *ListEventsResponseBodyEventsEnd) SetDateTime(v string) *ListEventsResponseBodyEventsEnd {
	s.DateTime = &v
	return s
}

func (s *ListEventsResponseBodyEventsEnd) SetTimeZone(v string) *ListEventsResponseBodyEventsEnd {
	s.TimeZone = &v
	return s
}

type ListEventsResponseBodyEventsExtendedProperties struct {
	SharedProperties *ListEventsResponseBodyEventsExtendedPropertiesSharedProperties `json:"SharedProperties,omitempty" xml:"SharedProperties,omitempty" type:"Struct"`
}

func (s ListEventsResponseBodyEventsExtendedProperties) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsExtendedProperties) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsExtendedProperties) SetSharedProperties(v *ListEventsResponseBodyEventsExtendedPropertiesSharedProperties) *ListEventsResponseBodyEventsExtendedProperties {
	s.SharedProperties = v
	return s
}

type ListEventsResponseBodyEventsExtendedPropertiesSharedProperties struct {
	// example:
	//
	// ding*********31
	BelongCorpId *string `json:"BelongCorpId,omitempty" xml:"BelongCorpId,omitempty"`
	// example:
	//
	// zxcv90asdf123===
	SourceOpenCid *string `json:"SourceOpenCid,omitempty" xml:"SourceOpenCid,omitempty"`
}

func (s ListEventsResponseBodyEventsExtendedPropertiesSharedProperties) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsExtendedPropertiesSharedProperties) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsExtendedPropertiesSharedProperties) SetBelongCorpId(v string) *ListEventsResponseBodyEventsExtendedPropertiesSharedProperties {
	s.BelongCorpId = &v
	return s
}

func (s *ListEventsResponseBodyEventsExtendedPropertiesSharedProperties) SetSourceOpenCid(v string) *ListEventsResponseBodyEventsExtendedPropertiesSharedProperties {
	s.SourceOpenCid = &v
	return s
}

type ListEventsResponseBodyEventsLocation struct {
	// example:
	//
	// room 1-2-3
	DisplayName  *string   `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	MeetingRooms []*string `json:"MeetingRooms,omitempty" xml:"MeetingRooms,omitempty" type:"Repeated"`
}

func (s ListEventsResponseBodyEventsLocation) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsLocation) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsLocation) SetDisplayName(v string) *ListEventsResponseBodyEventsLocation {
	s.DisplayName = &v
	return s
}

func (s *ListEventsResponseBodyEventsLocation) SetMeetingRooms(v []*string) *ListEventsResponseBodyEventsLocation {
	s.MeetingRooms = v
	return s
}

type ListEventsResponseBodyEventsMeetingRooms struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// c10315a8b4e740a317813ab6fxxxxxx
	RoomId *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s ListEventsResponseBodyEventsMeetingRooms) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsMeetingRooms) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsMeetingRooms) SetDisplayName(v string) *ListEventsResponseBodyEventsMeetingRooms {
	s.DisplayName = &v
	return s
}

func (s *ListEventsResponseBodyEventsMeetingRooms) SetResponseStatus(v string) *ListEventsResponseBodyEventsMeetingRooms {
	s.ResponseStatus = &v
	return s
}

func (s *ListEventsResponseBodyEventsMeetingRooms) SetRoomId(v string) *ListEventsResponseBodyEventsMeetingRooms {
	s.RoomId = &v
	return s
}

type ListEventsResponseBodyEventsOnlineMeetingInfo struct {
	// example:
	//
	// 5c4df21dxxxx-a6db402b9f3a
	ConferenceId *string                `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	ExtraInfo    map[string]interface{} `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// example:
	//
	// dingtalk
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// dingtalk://dingtalkclient/page/videoCoxxxxndar?confId=5c4df21dxxxx2b9f3a&calendarId=92xxxx36
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListEventsResponseBodyEventsOnlineMeetingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsOnlineMeetingInfo) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsOnlineMeetingInfo) SetConferenceId(v string) *ListEventsResponseBodyEventsOnlineMeetingInfo {
	s.ConferenceId = &v
	return s
}

func (s *ListEventsResponseBodyEventsOnlineMeetingInfo) SetExtraInfo(v map[string]interface{}) *ListEventsResponseBodyEventsOnlineMeetingInfo {
	s.ExtraInfo = v
	return s
}

func (s *ListEventsResponseBodyEventsOnlineMeetingInfo) SetType(v string) *ListEventsResponseBodyEventsOnlineMeetingInfo {
	s.Type = &v
	return s
}

func (s *ListEventsResponseBodyEventsOnlineMeetingInfo) SetUrl(v string) *ListEventsResponseBodyEventsOnlineMeetingInfo {
	s.Url = &v
	return s
}

type ListEventsResponseBodyEventsOrganizer struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s ListEventsResponseBodyEventsOrganizer) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsOrganizer) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsOrganizer) SetDisplayName(v string) *ListEventsResponseBodyEventsOrganizer {
	s.DisplayName = &v
	return s
}

func (s *ListEventsResponseBodyEventsOrganizer) SetResponseStatus(v string) *ListEventsResponseBodyEventsOrganizer {
	s.ResponseStatus = &v
	return s
}

func (s *ListEventsResponseBodyEventsOrganizer) SetSelf(v bool) *ListEventsResponseBodyEventsOrganizer {
	s.Self = &v
	return s
}

type ListEventsResponseBodyEventsOriginStart struct {
	// example:
	//
	// 2023-01-01T00:00:00Z
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
}

func (s ListEventsResponseBodyEventsOriginStart) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsOriginStart) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsOriginStart) SetDateTime(v string) *ListEventsResponseBodyEventsOriginStart {
	s.DateTime = &v
	return s
}

type ListEventsResponseBodyEventsRecurrence struct {
	Pattern *ListEventsResponseBodyEventsRecurrencePattern `json:"Pattern,omitempty" xml:"Pattern,omitempty" type:"Struct"`
	Range   *ListEventsResponseBodyEventsRecurrenceRange   `json:"Range,omitempty" xml:"Range,omitempty" type:"Struct"`
}

func (s ListEventsResponseBodyEventsRecurrence) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsRecurrence) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsRecurrence) SetPattern(v *ListEventsResponseBodyEventsRecurrencePattern) *ListEventsResponseBodyEventsRecurrence {
	s.Pattern = v
	return s
}

func (s *ListEventsResponseBodyEventsRecurrence) SetRange(v *ListEventsResponseBodyEventsRecurrenceRange) *ListEventsResponseBodyEventsRecurrence {
	s.Range = v
	return s
}

type ListEventsResponseBodyEventsRecurrencePattern struct {
	// example:
	//
	// 1
	DayOfMonth *int32 `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	// example:
	//
	// sunday
	DaysOfWeek *string `json:"DaysOfWeek,omitempty" xml:"DaysOfWeek,omitempty"`
	// example:
	//
	// first
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// 1
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// daily
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListEventsResponseBodyEventsRecurrencePattern) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsRecurrencePattern) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsRecurrencePattern) SetDayOfMonth(v int32) *ListEventsResponseBodyEventsRecurrencePattern {
	s.DayOfMonth = &v
	return s
}

func (s *ListEventsResponseBodyEventsRecurrencePattern) SetDaysOfWeek(v string) *ListEventsResponseBodyEventsRecurrencePattern {
	s.DaysOfWeek = &v
	return s
}

func (s *ListEventsResponseBodyEventsRecurrencePattern) SetIndex(v string) *ListEventsResponseBodyEventsRecurrencePattern {
	s.Index = &v
	return s
}

func (s *ListEventsResponseBodyEventsRecurrencePattern) SetInterval(v int32) *ListEventsResponseBodyEventsRecurrencePattern {
	s.Interval = &v
	return s
}

func (s *ListEventsResponseBodyEventsRecurrencePattern) SetType(v string) *ListEventsResponseBodyEventsRecurrencePattern {
	s.Type = &v
	return s
}

type ListEventsResponseBodyEventsRecurrenceRange struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// example:
	//
	// 5
	NumberOfOccurrences *int32 `json:"NumberOfOccurrences,omitempty" xml:"NumberOfOccurrences,omitempty"`
	// example:
	//
	// noEnd
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListEventsResponseBodyEventsRecurrenceRange) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsRecurrenceRange) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsRecurrenceRange) SetEndDate(v string) *ListEventsResponseBodyEventsRecurrenceRange {
	s.EndDate = &v
	return s
}

func (s *ListEventsResponseBodyEventsRecurrenceRange) SetNumberOfOccurrences(v int32) *ListEventsResponseBodyEventsRecurrenceRange {
	s.NumberOfOccurrences = &v
	return s
}

func (s *ListEventsResponseBodyEventsRecurrenceRange) SetType(v string) *ListEventsResponseBodyEventsRecurrenceRange {
	s.Type = &v
	return s
}

type ListEventsResponseBodyEventsReminders struct {
	// example:
	//
	// dingtalk
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// 15
	Minutes *string `json:"Minutes,omitempty" xml:"Minutes,omitempty"`
}

func (s ListEventsResponseBodyEventsReminders) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsReminders) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsReminders) SetMethod(v string) *ListEventsResponseBodyEventsReminders {
	s.Method = &v
	return s
}

func (s *ListEventsResponseBodyEventsReminders) SetMinutes(v string) *ListEventsResponseBodyEventsReminders {
	s.Minutes = &v
	return s
}

type ListEventsResponseBodyEventsRichTextDescription struct {
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s ListEventsResponseBodyEventsRichTextDescription) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsRichTextDescription) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsRichTextDescription) SetText(v string) *ListEventsResponseBodyEventsRichTextDescription {
	s.Text = &v
	return s
}

type ListEventsResponseBodyEventsStart struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s ListEventsResponseBodyEventsStart) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponseBodyEventsStart) GoString() string {
	return s.String()
}

func (s *ListEventsResponseBodyEventsStart) SetDate(v string) *ListEventsResponseBodyEventsStart {
	s.Date = &v
	return s
}

func (s *ListEventsResponseBodyEventsStart) SetDateTime(v string) *ListEventsResponseBodyEventsStart {
	s.DateTime = &v
	return s
}

func (s *ListEventsResponseBodyEventsStart) SetTimeZone(v string) *ListEventsResponseBodyEventsStart {
	s.TimeZone = &v
	return s
}

type ListEventsResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEventsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEventsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEventsResponse) GoString() string {
	return s.String()
}

func (s *ListEventsResponse) SetHeaders(v map[string]*string) *ListEventsResponse {
	s.Headers = v
	return s
}

func (s *ListEventsResponse) SetStatusCode(v int32) *ListEventsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEventsResponse) SetBody(v *ListEventsResponseBody) *ListEventsResponse {
	s.Body = v
	return s
}

type ListEventsViewHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListEventsViewHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListEventsViewHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewHeaders) GoString() string {
	return s.String()
}

func (s *ListEventsViewHeaders) SetCommonHeaders(v map[string]*string) *ListEventsViewHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListEventsViewHeaders) SetAccountContext(v *ListEventsViewHeadersAccountContext) *ListEventsViewHeaders {
	s.AccountContext = v
	return s
}

type ListEventsViewHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListEventsViewHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListEventsViewHeadersAccountContext) SetAccountId(v string) *ListEventsViewHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListEventsViewShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListEventsViewShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListEventsViewShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListEventsViewShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListEventsViewShrinkHeaders) SetAccountContextShrink(v string) *ListEventsViewShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListEventsViewRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// example:
	//
	// 100
	MaxAttendees *int32 `json:"MaxAttendees,omitempty" xml:"MaxAttendees,omitempty"`
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// cnNTbW1xxx
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 2022-11-28T00:00:00+08:00
	TimeMax *string `json:"TimeMax,omitempty" xml:"TimeMax,omitempty"`
	// example:
	//
	// 2022-11-27T00:00:00+08:00
	TimeMin *string `json:"TimeMin,omitempty" xml:"TimeMin,omitempty"`
}

func (s ListEventsViewRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewRequest) GoString() string {
	return s.String()
}

func (s *ListEventsViewRequest) SetCalendarId(v string) *ListEventsViewRequest {
	s.CalendarId = &v
	return s
}

func (s *ListEventsViewRequest) SetMaxAttendees(v int32) *ListEventsViewRequest {
	s.MaxAttendees = &v
	return s
}

func (s *ListEventsViewRequest) SetMaxResults(v int32) *ListEventsViewRequest {
	s.MaxResults = &v
	return s
}

func (s *ListEventsViewRequest) SetNextToken(v string) *ListEventsViewRequest {
	s.NextToken = &v
	return s
}

func (s *ListEventsViewRequest) SetTimeMax(v string) *ListEventsViewRequest {
	s.TimeMax = &v
	return s
}

func (s *ListEventsViewRequest) SetTimeMin(v string) *ListEventsViewRequest {
	s.TimeMin = &v
	return s
}

type ListEventsViewResponseBody struct {
	Events []*ListEventsViewResponseBodyEvents `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
	// example:
	//
	// cnNTbWxxx
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ListEventsViewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBody) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBody) SetEvents(v []*ListEventsViewResponseBodyEvents) *ListEventsViewResponseBody {
	s.Events = v
	return s
}

func (s *ListEventsViewResponseBody) SetNextToken(v string) *ListEventsViewResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListEventsViewResponseBody) SetRequestId(v string) *ListEventsViewResponseBody {
	s.RequestId = &v
	return s
}

type ListEventsViewResponseBodyEvents struct {
	Attendees  []*ListEventsViewResponseBodyEventsAttendees  `json:"Attendees,omitempty" xml:"Attendees,omitempty" type:"Repeated"`
	Categories []*ListEventsViewResponseBodyEventsCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Repeated"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// something about this event
	Description        *string                                             `json:"Description,omitempty" xml:"Description,omitempty"`
	End                *ListEventsViewResponseBodyEventsEnd                `json:"End,omitempty" xml:"End,omitempty" type:"Struct"`
	ExtendedProperties *ListEventsViewResponseBodyEventsExtendedProperties `json:"ExtendedProperties,omitempty" xml:"ExtendedProperties,omitempty" type:"Struct"`
	// example:
	//
	// iiiP35xxx
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// false
	IsAllDay            *bool                                                `json:"IsAllDay,omitempty" xml:"IsAllDay,omitempty"`
	Location            *ListEventsViewResponseBodyEventsLocation            `json:"Location,omitempty" xml:"Location,omitempty" type:"Struct"`
	MeetingRooms        []*ListEventsViewResponseBodyEventsMeetingRooms      `json:"MeetingRooms,omitempty" xml:"MeetingRooms,omitempty" type:"Repeated"`
	OnlineMeetingInfo   *ListEventsViewResponseBodyEventsOnlineMeetingInfo   `json:"OnlineMeetingInfo,omitempty" xml:"OnlineMeetingInfo,omitempty" type:"Struct"`
	Organizer           *ListEventsViewResponseBodyEventsOrganizer           `json:"Organizer,omitempty" xml:"Organizer,omitempty" type:"Struct"`
	OriginStart         *ListEventsViewResponseBodyEventsOriginStart         `json:"OriginStart,omitempty" xml:"OriginStart,omitempty" type:"Struct"`
	Recurrence          *ListEventsViewResponseBodyEventsRecurrence          `json:"Recurrence,omitempty" xml:"Recurrence,omitempty" type:"Struct"`
	RichTextDescription *ListEventsViewResponseBodyEventsRichTextDescription `json:"RichTextDescription,omitempty" xml:"RichTextDescription,omitempty" type:"Struct"`
	// example:
	//
	// cnNTbxxx
	SeriesMasterId *string                                `json:"SeriesMasterId,omitempty" xml:"SeriesMasterId,omitempty"`
	Start          *ListEventsViewResponseBodyEventsStart `json:"Start,omitempty" xml:"Start,omitempty" type:"Struct"`
	// example:
	//
	// confirmed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// test event
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s ListEventsViewResponseBodyEvents) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEvents) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEvents) SetAttendees(v []*ListEventsViewResponseBodyEventsAttendees) *ListEventsViewResponseBodyEvents {
	s.Attendees = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetCategories(v []*ListEventsViewResponseBodyEventsCategories) *ListEventsViewResponseBodyEvents {
	s.Categories = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetCreateTime(v string) *ListEventsViewResponseBodyEvents {
	s.CreateTime = &v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetDescription(v string) *ListEventsViewResponseBodyEvents {
	s.Description = &v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetEnd(v *ListEventsViewResponseBodyEventsEnd) *ListEventsViewResponseBodyEvents {
	s.End = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetExtendedProperties(v *ListEventsViewResponseBodyEventsExtendedProperties) *ListEventsViewResponseBodyEvents {
	s.ExtendedProperties = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetId(v string) *ListEventsViewResponseBodyEvents {
	s.Id = &v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetIsAllDay(v bool) *ListEventsViewResponseBodyEvents {
	s.IsAllDay = &v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetLocation(v *ListEventsViewResponseBodyEventsLocation) *ListEventsViewResponseBodyEvents {
	s.Location = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetMeetingRooms(v []*ListEventsViewResponseBodyEventsMeetingRooms) *ListEventsViewResponseBodyEvents {
	s.MeetingRooms = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetOnlineMeetingInfo(v *ListEventsViewResponseBodyEventsOnlineMeetingInfo) *ListEventsViewResponseBodyEvents {
	s.OnlineMeetingInfo = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetOrganizer(v *ListEventsViewResponseBodyEventsOrganizer) *ListEventsViewResponseBodyEvents {
	s.Organizer = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetOriginStart(v *ListEventsViewResponseBodyEventsOriginStart) *ListEventsViewResponseBodyEvents {
	s.OriginStart = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetRecurrence(v *ListEventsViewResponseBodyEventsRecurrence) *ListEventsViewResponseBodyEvents {
	s.Recurrence = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetRichTextDescription(v *ListEventsViewResponseBodyEventsRichTextDescription) *ListEventsViewResponseBodyEvents {
	s.RichTextDescription = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetSeriesMasterId(v string) *ListEventsViewResponseBodyEvents {
	s.SeriesMasterId = &v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetStart(v *ListEventsViewResponseBodyEventsStart) *ListEventsViewResponseBodyEvents {
	s.Start = v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetStatus(v string) *ListEventsViewResponseBodyEvents {
	s.Status = &v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetSummary(v string) *ListEventsViewResponseBodyEvents {
	s.Summary = &v
	return s
}

func (s *ListEventsViewResponseBodyEvents) SetUpdateTime(v string) *ListEventsViewResponseBodyEvents {
	s.UpdateTime = &v
	return s
}

type ListEventsViewResponseBodyEventsAttendees struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 012345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// false
	IsOptional *bool `json:"IsOptional,omitempty" xml:"IsOptional,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// false
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s ListEventsViewResponseBodyEventsAttendees) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsAttendees) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsAttendees) SetDisplayName(v string) *ListEventsViewResponseBodyEventsAttendees {
	s.DisplayName = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsAttendees) SetId(v string) *ListEventsViewResponseBodyEventsAttendees {
	s.Id = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsAttendees) SetIsOptional(v bool) *ListEventsViewResponseBodyEventsAttendees {
	s.IsOptional = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsAttendees) SetResponseStatus(v string) *ListEventsViewResponseBodyEventsAttendees {
	s.ResponseStatus = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsAttendees) SetSelf(v bool) *ListEventsViewResponseBodyEventsAttendees {
	s.Self = &v
	return s
}

type ListEventsViewResponseBodyEventsCategories struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
}

func (s ListEventsViewResponseBodyEventsCategories) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsCategories) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsCategories) SetDisplayName(v string) *ListEventsViewResponseBodyEventsCategories {
	s.DisplayName = &v
	return s
}

type ListEventsViewResponseBodyEventsEnd struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s ListEventsViewResponseBodyEventsEnd) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsEnd) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsEnd) SetDate(v string) *ListEventsViewResponseBodyEventsEnd {
	s.Date = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsEnd) SetDateTime(v string) *ListEventsViewResponseBodyEventsEnd {
	s.DateTime = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsEnd) SetTimeZone(v string) *ListEventsViewResponseBodyEventsEnd {
	s.TimeZone = &v
	return s
}

type ListEventsViewResponseBodyEventsExtendedProperties struct {
	SharedProperties *ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties `json:"SharedProperties,omitempty" xml:"SharedProperties,omitempty" type:"Struct"`
}

func (s ListEventsViewResponseBodyEventsExtendedProperties) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsExtendedProperties) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsExtendedProperties) SetSharedProperties(v *ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties) *ListEventsViewResponseBodyEventsExtendedProperties {
	s.SharedProperties = v
	return s
}

type ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties struct {
	// example:
	//
	// dingd8*****1231
	BelongCorpId *string `json:"BelongCorpId,omitempty" xml:"BelongCorpId,omitempty"`
	// example:
	//
	// zxcvasdfa123===
	SourceOpenCid *string `json:"SourceOpenCid,omitempty" xml:"SourceOpenCid,omitempty"`
}

func (s ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties) SetBelongCorpId(v string) *ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties {
	s.BelongCorpId = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties) SetSourceOpenCid(v string) *ListEventsViewResponseBodyEventsExtendedPropertiesSharedProperties {
	s.SourceOpenCid = &v
	return s
}

type ListEventsViewResponseBodyEventsLocation struct {
	// example:
	//
	// tony
	DisplayName  *string   `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	MeetingRooms []*string `json:"MeetingRooms,omitempty" xml:"MeetingRooms,omitempty" type:"Repeated"`
}

func (s ListEventsViewResponseBodyEventsLocation) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsLocation) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsLocation) SetDisplayName(v string) *ListEventsViewResponseBodyEventsLocation {
	s.DisplayName = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsLocation) SetMeetingRooms(v []*string) *ListEventsViewResponseBodyEventsLocation {
	s.MeetingRooms = v
	return s
}

type ListEventsViewResponseBodyEventsMeetingRooms struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// c10315a8b4e740a317813ab6fxxxxxx
	RoomId *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s ListEventsViewResponseBodyEventsMeetingRooms) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsMeetingRooms) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsMeetingRooms) SetDisplayName(v string) *ListEventsViewResponseBodyEventsMeetingRooms {
	s.DisplayName = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsMeetingRooms) SetResponseStatus(v string) *ListEventsViewResponseBodyEventsMeetingRooms {
	s.ResponseStatus = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsMeetingRooms) SetRoomId(v string) *ListEventsViewResponseBodyEventsMeetingRooms {
	s.RoomId = &v
	return s
}

type ListEventsViewResponseBodyEventsOnlineMeetingInfo struct {
	// example:
	//
	// 5c4df2xxx
	ConferenceId *string                `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	ExtraInfo    map[string]interface{} `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	// example:
	//
	// dingtalk
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// dingtalk://dingtalkclient/page/xxx?confId=xxx&calendarId=xxx
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListEventsViewResponseBodyEventsOnlineMeetingInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsOnlineMeetingInfo) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsOnlineMeetingInfo) SetConferenceId(v string) *ListEventsViewResponseBodyEventsOnlineMeetingInfo {
	s.ConferenceId = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsOnlineMeetingInfo) SetExtraInfo(v map[string]interface{}) *ListEventsViewResponseBodyEventsOnlineMeetingInfo {
	s.ExtraInfo = v
	return s
}

func (s *ListEventsViewResponseBodyEventsOnlineMeetingInfo) SetType(v string) *ListEventsViewResponseBodyEventsOnlineMeetingInfo {
	s.Type = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsOnlineMeetingInfo) SetUrl(v string) *ListEventsViewResponseBodyEventsOnlineMeetingInfo {
	s.Url = &v
	return s
}

type ListEventsViewResponseBodyEventsOrganizer struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 012345
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// false
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s ListEventsViewResponseBodyEventsOrganizer) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsOrganizer) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsOrganizer) SetDisplayName(v string) *ListEventsViewResponseBodyEventsOrganizer {
	s.DisplayName = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsOrganizer) SetId(v string) *ListEventsViewResponseBodyEventsOrganizer {
	s.Id = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsOrganizer) SetResponseStatus(v string) *ListEventsViewResponseBodyEventsOrganizer {
	s.ResponseStatus = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsOrganizer) SetSelf(v bool) *ListEventsViewResponseBodyEventsOrganizer {
	s.Self = &v
	return s
}

type ListEventsViewResponseBodyEventsOriginStart struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
}

func (s ListEventsViewResponseBodyEventsOriginStart) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsOriginStart) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsOriginStart) SetDateTime(v string) *ListEventsViewResponseBodyEventsOriginStart {
	s.DateTime = &v
	return s
}

type ListEventsViewResponseBodyEventsRecurrence struct {
	Pattern *ListEventsViewResponseBodyEventsRecurrencePattern `json:"Pattern,omitempty" xml:"Pattern,omitempty" type:"Struct"`
	Range   *ListEventsViewResponseBodyEventsRecurrenceRange   `json:"Range,omitempty" xml:"Range,omitempty" type:"Struct"`
}

func (s ListEventsViewResponseBodyEventsRecurrence) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsRecurrence) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsRecurrence) SetPattern(v *ListEventsViewResponseBodyEventsRecurrencePattern) *ListEventsViewResponseBodyEventsRecurrence {
	s.Pattern = v
	return s
}

func (s *ListEventsViewResponseBodyEventsRecurrence) SetRange(v *ListEventsViewResponseBodyEventsRecurrenceRange) *ListEventsViewResponseBodyEventsRecurrence {
	s.Range = v
	return s
}

type ListEventsViewResponseBodyEventsRecurrencePattern struct {
	// example:
	//
	// 14
	DayOfMonth *int32 `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	// example:
	//
	// sunday
	DaysOfWeek *string `json:"DaysOfWeek,omitempty" xml:"DaysOfWeek,omitempty"`
	// example:
	//
	// first
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// 1
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// dingtalk
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListEventsViewResponseBodyEventsRecurrencePattern) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsRecurrencePattern) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsRecurrencePattern) SetDayOfMonth(v int32) *ListEventsViewResponseBodyEventsRecurrencePattern {
	s.DayOfMonth = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsRecurrencePattern) SetDaysOfWeek(v string) *ListEventsViewResponseBodyEventsRecurrencePattern {
	s.DaysOfWeek = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsRecurrencePattern) SetIndex(v string) *ListEventsViewResponseBodyEventsRecurrencePattern {
	s.Index = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsRecurrencePattern) SetInterval(v int32) *ListEventsViewResponseBodyEventsRecurrencePattern {
	s.Interval = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsRecurrencePattern) SetType(v string) *ListEventsViewResponseBodyEventsRecurrencePattern {
	s.Type = &v
	return s
}

type ListEventsViewResponseBodyEventsRecurrenceRange struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// example:
	//
	// 5
	NumberOfOccurrences *int32 `json:"NumberOfOccurrences,omitempty" xml:"NumberOfOccurrences,omitempty"`
	// example:
	//
	// dingtalk
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListEventsViewResponseBodyEventsRecurrenceRange) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsRecurrenceRange) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsRecurrenceRange) SetEndDate(v string) *ListEventsViewResponseBodyEventsRecurrenceRange {
	s.EndDate = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsRecurrenceRange) SetNumberOfOccurrences(v int32) *ListEventsViewResponseBodyEventsRecurrenceRange {
	s.NumberOfOccurrences = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsRecurrenceRange) SetType(v string) *ListEventsViewResponseBodyEventsRecurrenceRange {
	s.Type = &v
	return s
}

type ListEventsViewResponseBodyEventsRichTextDescription struct {
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s ListEventsViewResponseBodyEventsRichTextDescription) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsRichTextDescription) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsRichTextDescription) SetText(v string) *ListEventsViewResponseBodyEventsRichTextDescription {
	s.Text = &v
	return s
}

type ListEventsViewResponseBodyEventsStart struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s ListEventsViewResponseBodyEventsStart) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponseBodyEventsStart) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponseBodyEventsStart) SetDate(v string) *ListEventsViewResponseBodyEventsStart {
	s.Date = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsStart) SetDateTime(v string) *ListEventsViewResponseBodyEventsStart {
	s.DateTime = &v
	return s
}

func (s *ListEventsViewResponseBodyEventsStart) SetTimeZone(v string) *ListEventsViewResponseBodyEventsStart {
	s.TimeZone = &v
	return s
}

type ListEventsViewResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEventsViewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEventsViewResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEventsViewResponse) GoString() string {
	return s.String()
}

func (s *ListEventsViewResponse) SetHeaders(v map[string]*string) *ListEventsViewResponse {
	s.Headers = v
	return s
}

func (s *ListEventsViewResponse) SetStatusCode(v int32) *ListEventsViewResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEventsViewResponse) SetBody(v *ListEventsViewResponseBody) *ListEventsViewResponse {
	s.Body = v
	return s
}

type ListFormRemarksHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListFormRemarksHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListFormRemarksHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListFormRemarksHeaders) GoString() string {
	return s.String()
}

func (s *ListFormRemarksHeaders) SetCommonHeaders(v map[string]*string) *ListFormRemarksHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListFormRemarksHeaders) SetAccountContext(v *ListFormRemarksHeadersAccountContext) *ListFormRemarksHeaders {
	s.AccountContext = v
	return s
}

type ListFormRemarksHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListFormRemarksHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListFormRemarksHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListFormRemarksHeadersAccountContext) SetAccountId(v string) *ListFormRemarksHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListFormRemarksShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListFormRemarksShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListFormRemarksShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListFormRemarksShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListFormRemarksShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListFormRemarksShrinkHeaders) SetAccountContextShrink(v string) *ListFormRemarksShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListFormRemarksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormInstanceIdList []*string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s ListFormRemarksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFormRemarksRequest) GoString() string {
	return s.String()
}

func (s *ListFormRemarksRequest) SetAppType(v string) *ListFormRemarksRequest {
	s.AppType = &v
	return s
}

func (s *ListFormRemarksRequest) SetFormInstanceIdList(v []*string) *ListFormRemarksRequest {
	s.FormInstanceIdList = v
	return s
}

func (s *ListFormRemarksRequest) SetFormUuid(v string) *ListFormRemarksRequest {
	s.FormUuid = &v
	return s
}

func (s *ListFormRemarksRequest) SetSystemToken(v string) *ListFormRemarksRequest {
	s.SystemToken = &v
	return s
}

type ListFormRemarksShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormInstanceIdListShrink *string `json:"FormInstanceIdList,omitempty" xml:"FormInstanceIdList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s ListFormRemarksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFormRemarksShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListFormRemarksShrinkRequest) SetAppType(v string) *ListFormRemarksShrinkRequest {
	s.AppType = &v
	return s
}

func (s *ListFormRemarksShrinkRequest) SetFormInstanceIdListShrink(v string) *ListFormRemarksShrinkRequest {
	s.FormInstanceIdListShrink = &v
	return s
}

func (s *ListFormRemarksShrinkRequest) SetFormUuid(v string) *ListFormRemarksShrinkRequest {
	s.FormUuid = &v
	return s
}

func (s *ListFormRemarksShrinkRequest) SetSystemToken(v string) *ListFormRemarksShrinkRequest {
	s.SystemToken = &v
	return s
}

type ListFormRemarksResponseBody struct {
	// example:
	//
	// {}
	FormRemarkVoMap map[string]interface{} `json:"formRemarkVoMap,omitempty" xml:"formRemarkVoMap,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListFormRemarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFormRemarksResponseBody) GoString() string {
	return s.String()
}

func (s *ListFormRemarksResponseBody) SetFormRemarkVoMap(v map[string]interface{}) *ListFormRemarksResponseBody {
	s.FormRemarkVoMap = v
	return s
}

func (s *ListFormRemarksResponseBody) SetRequestId(v string) *ListFormRemarksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFormRemarksResponseBody) SetVendorRequestId(v string) *ListFormRemarksResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListFormRemarksResponseBody) SetVendorType(v string) *ListFormRemarksResponseBody {
	s.VendorType = &v
	return s
}

type ListFormRemarksResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFormRemarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFormRemarksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFormRemarksResponse) GoString() string {
	return s.String()
}

func (s *ListFormRemarksResponse) SetHeaders(v map[string]*string) *ListFormRemarksResponse {
	s.Headers = v
	return s
}

func (s *ListFormRemarksResponse) SetStatusCode(v int32) *ListFormRemarksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFormRemarksResponse) SetBody(v *ListFormRemarksResponseBody) *ListFormRemarksResponse {
	s.Body = v
	return s
}

type ListNavigationByFormTypeHeaders struct {
	CommonHeaders  map[string]*string                             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListNavigationByFormTypeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListNavigationByFormTypeHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeHeaders) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeHeaders) SetCommonHeaders(v map[string]*string) *ListNavigationByFormTypeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListNavigationByFormTypeHeaders) SetAccountContext(v *ListNavigationByFormTypeHeadersAccountContext) *ListNavigationByFormTypeHeaders {
	s.AccountContext = v
	return s
}

type ListNavigationByFormTypeHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListNavigationByFormTypeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeHeadersAccountContext) SetAccountId(v string) *ListNavigationByFormTypeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListNavigationByFormTypeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListNavigationByFormTypeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListNavigationByFormTypeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListNavigationByFormTypeShrinkHeaders) SetAccountContextShrink(v string) *ListNavigationByFormTypeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListNavigationByFormTypeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKTxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// receipt
	FormType *string `json:"FormType,omitempty" xml:"FormType,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s ListNavigationByFormTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeRequest) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeRequest) SetAppType(v string) *ListNavigationByFormTypeRequest {
	s.AppType = &v
	return s
}

func (s *ListNavigationByFormTypeRequest) SetFormType(v string) *ListNavigationByFormTypeRequest {
	s.FormType = &v
	return s
}

func (s *ListNavigationByFormTypeRequest) SetLanguage(v string) *ListNavigationByFormTypeRequest {
	s.Language = &v
	return s
}

func (s *ListNavigationByFormTypeRequest) SetSystemToken(v string) *ListNavigationByFormTypeRequest {
	s.SystemToken = &v
	return s
}

type ListNavigationByFormTypeResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*ListNavigationByFormTypeResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListNavigationByFormTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeResponseBody) SetRequestId(v string) *ListNavigationByFormTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNavigationByFormTypeResponseBody) SetResult(v []*ListNavigationByFormTypeResponseBodyResult) *ListNavigationByFormTypeResponseBody {
	s.Result = v
	return s
}

func (s *ListNavigationByFormTypeResponseBody) SetVendorRequestId(v string) *ListNavigationByFormTypeResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListNavigationByFormTypeResponseBody) SetVendorType(v string) *ListNavigationByFormTypeResponseBody {
	s.VendorType = &v
	return s
}

type ListNavigationByFormTypeResponseBodyResult struct {
	// example:
	//
	// FORM-EF6Yxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// TPROC--X1Gxxx
	ProcessCode *string                                          `json:"ProcessCode,omitempty" xml:"ProcessCode,omitempty"`
	Title       *ListNavigationByFormTypeResponseBodyResultTitle `json:"Title,omitempty" xml:"Title,omitempty" type:"Struct"`
}

func (s ListNavigationByFormTypeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeResponseBodyResult) SetFormUuid(v string) *ListNavigationByFormTypeResponseBodyResult {
	s.FormUuid = &v
	return s
}

func (s *ListNavigationByFormTypeResponseBodyResult) SetProcessCode(v string) *ListNavigationByFormTypeResponseBodyResult {
	s.ProcessCode = &v
	return s
}

func (s *ListNavigationByFormTypeResponseBodyResult) SetTitle(v *ListNavigationByFormTypeResponseBodyResultTitle) *ListNavigationByFormTypeResponseBodyResult {
	s.Title = v
	return s
}

type ListNavigationByFormTypeResponseBodyResultTitle struct {
	// example:
	//
	// 张三
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// ZhangSan
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// 未知
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListNavigationByFormTypeResponseBodyResultTitle) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeResponseBodyResultTitle) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeResponseBodyResultTitle) SetNameInChinese(v string) *ListNavigationByFormTypeResponseBodyResultTitle {
	s.NameInChinese = &v
	return s
}

func (s *ListNavigationByFormTypeResponseBodyResultTitle) SetNameInEnglish(v string) *ListNavigationByFormTypeResponseBodyResultTitle {
	s.NameInEnglish = &v
	return s
}

func (s *ListNavigationByFormTypeResponseBodyResultTitle) SetType(v string) *ListNavigationByFormTypeResponseBodyResultTitle {
	s.Type = &v
	return s
}

type ListNavigationByFormTypeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNavigationByFormTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNavigationByFormTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNavigationByFormTypeResponse) GoString() string {
	return s.String()
}

func (s *ListNavigationByFormTypeResponse) SetHeaders(v map[string]*string) *ListNavigationByFormTypeResponse {
	s.Headers = v
	return s
}

func (s *ListNavigationByFormTypeResponse) SetStatusCode(v int32) *ListNavigationByFormTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNavigationByFormTypeResponse) SetBody(v *ListNavigationByFormTypeResponseBody) *ListNavigationByFormTypeResponse {
	s.Body = v
	return s
}

type ListNodesHeaders struct {
	CommonHeaders  map[string]*string              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListNodesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListNodesHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListNodesHeaders) GoString() string {
	return s.String()
}

func (s *ListNodesHeaders) SetCommonHeaders(v map[string]*string) *ListNodesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListNodesHeaders) SetAccountContext(v *ListNodesHeadersAccountContext) *ListNodesHeaders {
	s.AccountContext = v
	return s
}

type ListNodesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListNodesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListNodesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListNodesHeadersAccountContext) SetAccountId(v string) *ListNodesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListNodesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListNodesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListNodesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListNodesShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListNodesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListNodesShrinkHeaders) SetAccountContextShrink(v string) *ListNodesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListNodesRequest struct {
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// next_token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	ParentNodeId  *string                        `json:"ParentNodeId,omitempty" xml:"ParentNodeId,omitempty"`
	TenantContext *ListNodesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// false
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
}

func (s ListNodesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodesRequest) GoString() string {
	return s.String()
}

func (s *ListNodesRequest) SetMaxResults(v int32) *ListNodesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListNodesRequest) SetNextToken(v string) *ListNodesRequest {
	s.NextToken = &v
	return s
}

func (s *ListNodesRequest) SetParentNodeId(v string) *ListNodesRequest {
	s.ParentNodeId = &v
	return s
}

func (s *ListNodesRequest) SetTenantContext(v *ListNodesRequestTenantContext) *ListNodesRequest {
	s.TenantContext = v
	return s
}

func (s *ListNodesRequest) SetWithPermissionRole(v bool) *ListNodesRequest {
	s.WithPermissionRole = &v
	return s
}

type ListNodesRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ListNodesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ListNodesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ListNodesRequestTenantContext) SetTenantId(v string) *ListNodesRequestTenantContext {
	s.TenantId = &v
	return s
}

type ListNodesShrinkRequest struct {
	// example:
	//
	// 50
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// next_token
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	ParentNodeId        *string `json:"ParentNodeId,omitempty" xml:"ParentNodeId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// false
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
}

func (s ListNodesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNodesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListNodesShrinkRequest) SetMaxResults(v int32) *ListNodesShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListNodesShrinkRequest) SetNextToken(v string) *ListNodesShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListNodesShrinkRequest) SetParentNodeId(v string) *ListNodesShrinkRequest {
	s.ParentNodeId = &v
	return s
}

func (s *ListNodesShrinkRequest) SetTenantContextShrink(v string) *ListNodesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *ListNodesShrinkRequest) SetWithPermissionRole(v bool) *ListNodesShrinkRequest {
	s.WithPermissionRole = &v
	return s
}

type ListNodesResponseBody struct {
	// example:
	//
	// next_token
	NextToken *string                       `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	Nodes     []*ListNodesResponseBodyNodes `json:"nodes,omitempty" xml:"nodes,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s ListNodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBody) SetNextToken(v string) *ListNodesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListNodesResponseBody) SetNodes(v []*ListNodesResponseBodyNodes) *ListNodesResponseBody {
	s.Nodes = v
	return s
}

func (s *ListNodesResponseBody) SetRequestId(v string) *ListNodesResponseBody {
	s.RequestId = &v
	return s
}

type ListNodesResponseBodyNodes struct {
	// example:
	//
	// ALIDOC
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// adoc
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// true
	HasChildren *bool `json:"HasChildren,omitempty" xml:"HasChildren,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 01472825524039877041
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// node_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// 512
	Size            *int64                                     `json:"Size,omitempty" xml:"Size,omitempty"`
	StatisticalInfo *ListNodesResponseBodyNodesStatisticalInfo `json:"StatisticalInfo,omitempty" xml:"StatisticalInfo,omitempty" type:"Struct"`
	// example:
	//
	// FILE
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// node_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// MNDoBb60VLBPraakI1Ywxyyn8lemrZQ3
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListNodesResponseBodyNodes) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyNodes) SetCategory(v string) *ListNodesResponseBodyNodes {
	s.Category = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetCreateTime(v string) *ListNodesResponseBodyNodes {
	s.CreateTime = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetCreatorId(v string) *ListNodesResponseBodyNodes {
	s.CreatorId = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetExtension(v string) *ListNodesResponseBodyNodes {
	s.Extension = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetHasChildren(v bool) *ListNodesResponseBodyNodes {
	s.HasChildren = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetModifiedTime(v string) *ListNodesResponseBodyNodes {
	s.ModifiedTime = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetModifierId(v string) *ListNodesResponseBodyNodes {
	s.ModifierId = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetName(v string) *ListNodesResponseBodyNodes {
	s.Name = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetNodeId(v string) *ListNodesResponseBodyNodes {
	s.NodeId = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetPermissionRole(v string) *ListNodesResponseBodyNodes {
	s.PermissionRole = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetSize(v int64) *ListNodesResponseBodyNodes {
	s.Size = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetStatisticalInfo(v *ListNodesResponseBodyNodesStatisticalInfo) *ListNodesResponseBodyNodes {
	s.StatisticalInfo = v
	return s
}

func (s *ListNodesResponseBodyNodes) SetType(v string) *ListNodesResponseBodyNodes {
	s.Type = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetUrl(v string) *ListNodesResponseBodyNodes {
	s.Url = &v
	return s
}

func (s *ListNodesResponseBodyNodes) SetWorkspaceId(v string) *ListNodesResponseBodyNodes {
	s.WorkspaceId = &v
	return s
}

type ListNodesResponseBodyNodesStatisticalInfo struct {
	// example:
	//
	// 123
	WordCount *int64 `json:"WordCount,omitempty" xml:"WordCount,omitempty"`
}

func (s ListNodesResponseBodyNodesStatisticalInfo) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponseBodyNodesStatisticalInfo) GoString() string {
	return s.String()
}

func (s *ListNodesResponseBodyNodesStatisticalInfo) SetWordCount(v int64) *ListNodesResponseBodyNodesStatisticalInfo {
	s.WordCount = &v
	return s
}

type ListNodesResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListNodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListNodesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNodesResponse) GoString() string {
	return s.String()
}

func (s *ListNodesResponse) SetHeaders(v map[string]*string) *ListNodesResponse {
	s.Headers = v
	return s
}

func (s *ListNodesResponse) SetStatusCode(v int32) *ListNodesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListNodesResponse) SetBody(v *ListNodesResponseBody) *ListNodesResponse {
	s.Body = v
	return s
}

type ListReportHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListReportHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListReportHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListReportHeaders) GoString() string {
	return s.String()
}

func (s *ListReportHeaders) SetCommonHeaders(v map[string]*string) *ListReportHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListReportHeaders) SetAccountContext(v *ListReportHeadersAccountContext) *ListReportHeaders {
	s.AccountContext = v
	return s
}

type ListReportHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListReportHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListReportHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListReportHeadersAccountContext) SetAccountId(v string) *ListReportHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListReportShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListReportShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListReportShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListReportShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListReportShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListReportShrinkHeaders) SetAccountContextShrink(v string) *ListReportShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0
	Cursor *int64 `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1507564800000
	ModifiedEndTime *int64 `json:"ModifiedEndTime,omitempty" xml:"ModifiedEndTime,omitempty"`
	// example:
	//
	// 1507564800000
	ModifiedStartTime *int64 `json:"ModifiedStartTime,omitempty" xml:"ModifiedStartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 我管理的模版
	TemplateName  *string                         `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TenantContext *ListReportRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s ListReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ListReportRequest) GoString() string {
	return s.String()
}

func (s *ListReportRequest) SetCursor(v int64) *ListReportRequest {
	s.Cursor = &v
	return s
}

func (s *ListReportRequest) SetEndTime(v int64) *ListReportRequest {
	s.EndTime = &v
	return s
}

func (s *ListReportRequest) SetModifiedEndTime(v int64) *ListReportRequest {
	s.ModifiedEndTime = &v
	return s
}

func (s *ListReportRequest) SetModifiedStartTime(v int64) *ListReportRequest {
	s.ModifiedStartTime = &v
	return s
}

func (s *ListReportRequest) SetSize(v int64) *ListReportRequest {
	s.Size = &v
	return s
}

func (s *ListReportRequest) SetStartTime(v int64) *ListReportRequest {
	s.StartTime = &v
	return s
}

func (s *ListReportRequest) SetTemplateName(v string) *ListReportRequest {
	s.TemplateName = &v
	return s
}

func (s *ListReportRequest) SetTenantContext(v *ListReportRequestTenantContext) *ListReportRequest {
	s.TenantContext = v
	return s
}

type ListReportRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ListReportRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ListReportRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ListReportRequestTenantContext) SetTenantId(v string) *ListReportRequestTenantContext {
	s.TenantId = &v
	return s
}

type ListReportShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0
	Cursor *int64 `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1507564800000
	ModifiedEndTime *int64 `json:"ModifiedEndTime,omitempty" xml:"ModifiedEndTime,omitempty"`
	// example:
	//
	// 1507564800000
	ModifiedStartTime *int64 `json:"ModifiedStartTime,omitempty" xml:"ModifiedStartTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 我管理的模版
	TemplateName        *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s ListReportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListReportShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListReportShrinkRequest) SetCursor(v int64) *ListReportShrinkRequest {
	s.Cursor = &v
	return s
}

func (s *ListReportShrinkRequest) SetEndTime(v int64) *ListReportShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *ListReportShrinkRequest) SetModifiedEndTime(v int64) *ListReportShrinkRequest {
	s.ModifiedEndTime = &v
	return s
}

func (s *ListReportShrinkRequest) SetModifiedStartTime(v int64) *ListReportShrinkRequest {
	s.ModifiedStartTime = &v
	return s
}

func (s *ListReportShrinkRequest) SetSize(v int64) *ListReportShrinkRequest {
	s.Size = &v
	return s
}

func (s *ListReportShrinkRequest) SetStartTime(v int64) *ListReportShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *ListReportShrinkRequest) SetTemplateName(v string) *ListReportShrinkRequest {
	s.TemplateName = &v
	return s
}

func (s *ListReportShrinkRequest) SetTenantContextShrink(v string) *ListReportShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type ListReportResponseBody struct {
	DataList []*ListReportResponseBodyDataList `json:"dataList,omitempty" xml:"dataList,omitempty" type:"Repeated"`
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 12312131231
	NextCursor *int64 `json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	Size *int64 `json:"size,omitempty" xml:"size,omitempty"`
}

func (s ListReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListReportResponseBody) GoString() string {
	return s.String()
}

func (s *ListReportResponseBody) SetDataList(v []*ListReportResponseBodyDataList) *ListReportResponseBody {
	s.DataList = v
	return s
}

func (s *ListReportResponseBody) SetHasMore(v bool) *ListReportResponseBody {
	s.HasMore = &v
	return s
}

func (s *ListReportResponseBody) SetNextCursor(v int64) *ListReportResponseBody {
	s.NextCursor = &v
	return s
}

func (s *ListReportResponseBody) SetRequestId(v string) *ListReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListReportResponseBody) SetSize(v int64) *ListReportResponseBody {
	s.Size = &v
	return s
}

type ListReportResponseBodyDataList struct {
	Contents []*ListReportResponseBodyDataListContents `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
	// example:
	//
	// 1678416166000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1127123
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// admin
	CreatorName *string   `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	DeptName    *string   `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	Images      []*string `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	// example:
	//
	// 31.1264
	Latitude *string `json:"Latitude,omitempty" xml:"Latitude,omitempty"`
	// example:
	//
	// 108.938036
	Longitude *string `json:"Longitude,omitempty" xml:"Longitude,omitempty"`
	// example:
	//
	// 1653543540000
	ModifiedTime *int64  `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Remark       *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// example:
	//
	// d64994d09916c76276dd9bfa23637644
	ReportId     *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s ListReportResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s ListReportResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *ListReportResponseBodyDataList) SetContents(v []*ListReportResponseBodyDataListContents) *ListReportResponseBodyDataList {
	s.Contents = v
	return s
}

func (s *ListReportResponseBodyDataList) SetCreateTime(v int64) *ListReportResponseBodyDataList {
	s.CreateTime = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetCreatorId(v string) *ListReportResponseBodyDataList {
	s.CreatorId = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetCreatorName(v string) *ListReportResponseBodyDataList {
	s.CreatorName = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetDeptName(v string) *ListReportResponseBodyDataList {
	s.DeptName = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetImages(v []*string) *ListReportResponseBodyDataList {
	s.Images = v
	return s
}

func (s *ListReportResponseBodyDataList) SetLatitude(v string) *ListReportResponseBodyDataList {
	s.Latitude = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetLongitude(v string) *ListReportResponseBodyDataList {
	s.Longitude = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetModifiedTime(v int64) *ListReportResponseBodyDataList {
	s.ModifiedTime = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetRemark(v string) *ListReportResponseBodyDataList {
	s.Remark = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetReportId(v string) *ListReportResponseBodyDataList {
	s.ReportId = &v
	return s
}

func (s *ListReportResponseBodyDataList) SetTemplateName(v string) *ListReportResponseBodyDataList {
	s.TemplateName = &v
	return s
}

type ListReportResponseBodyDataListContents struct {
	// example:
	//
	// env
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 0
	Sort *string `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// example:
	//
	// 1
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// ce9ab5d4a80a9401f97c7077e6a9634bd
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListReportResponseBodyDataListContents) String() string {
	return tea.Prettify(s)
}

func (s ListReportResponseBodyDataListContents) GoString() string {
	return s.String()
}

func (s *ListReportResponseBodyDataListContents) SetKey(v string) *ListReportResponseBodyDataListContents {
	s.Key = &v
	return s
}

func (s *ListReportResponseBodyDataListContents) SetSort(v string) *ListReportResponseBodyDataListContents {
	s.Sort = &v
	return s
}

func (s *ListReportResponseBodyDataListContents) SetType(v string) *ListReportResponseBodyDataListContents {
	s.Type = &v
	return s
}

func (s *ListReportResponseBodyDataListContents) SetValue(v string) *ListReportResponseBodyDataListContents {
	s.Value = &v
	return s
}

type ListReportResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ListReportResponse) GoString() string {
	return s.String()
}

func (s *ListReportResponse) SetHeaders(v map[string]*string) *ListReportResponse {
	s.Headers = v
	return s
}

func (s *ListReportResponse) SetStatusCode(v int32) *ListReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ListReportResponse) SetBody(v *ListReportResponseBody) *ListReportResponse {
	s.Body = v
	return s
}

type ListTableDataByFormInstanceIdTableIdHeaders struct {
	CommonHeaders  map[string]*string                                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListTableDataByFormInstanceIdTableIdHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListTableDataByFormInstanceIdTableIdHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListTableDataByFormInstanceIdTableIdHeaders) GoString() string {
	return s.String()
}

func (s *ListTableDataByFormInstanceIdTableIdHeaders) SetCommonHeaders(v map[string]*string) *ListTableDataByFormInstanceIdTableIdHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdHeaders) SetAccountContext(v *ListTableDataByFormInstanceIdTableIdHeadersAccountContext) *ListTableDataByFormInstanceIdTableIdHeaders {
	s.AccountContext = v
	return s
}

type ListTableDataByFormInstanceIdTableIdHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListTableDataByFormInstanceIdTableIdHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListTableDataByFormInstanceIdTableIdHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListTableDataByFormInstanceIdTableIdHeadersAccountContext) SetAccountId(v string) *ListTableDataByFormInstanceIdTableIdHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListTableDataByFormInstanceIdTableIdShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListTableDataByFormInstanceIdTableIdShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListTableDataByFormInstanceIdTableIdShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListTableDataByFormInstanceIdTableIdShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListTableDataByFormInstanceIdTableIdShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdShrinkHeaders) SetAccountContextShrink(v string) *ListTableDataByFormInstanceIdTableIdShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListTableDataByFormInstanceIdTableIdRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM_PBKT0xxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1111
	TableFieldId *string `json:"TableFieldId,omitempty" xml:"TableFieldId,omitempty"`
}

func (s ListTableDataByFormInstanceIdTableIdRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTableDataByFormInstanceIdTableIdRequest) GoString() string {
	return s.String()
}

func (s *ListTableDataByFormInstanceIdTableIdRequest) SetAppType(v string) *ListTableDataByFormInstanceIdTableIdRequest {
	s.AppType = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdRequest) SetFormInstanceId(v string) *ListTableDataByFormInstanceIdTableIdRequest {
	s.FormInstanceId = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdRequest) SetFormUuid(v string) *ListTableDataByFormInstanceIdTableIdRequest {
	s.FormUuid = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdRequest) SetPageNumber(v int32) *ListTableDataByFormInstanceIdTableIdRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdRequest) SetPageSize(v int32) *ListTableDataByFormInstanceIdTableIdRequest {
	s.PageSize = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdRequest) SetSystemToken(v string) *ListTableDataByFormInstanceIdTableIdRequest {
	s.SystemToken = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdRequest) SetTableFieldId(v string) *ListTableDataByFormInstanceIdTableIdRequest {
	s.TableFieldId = &v
	return s
}

type ListTableDataByFormInstanceIdTableIdResponseBody struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListTableDataByFormInstanceIdTableIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTableDataByFormInstanceIdTableIdResponseBody) GoString() string {
	return s.String()
}

func (s *ListTableDataByFormInstanceIdTableIdResponseBody) SetData(v []*string) *ListTableDataByFormInstanceIdTableIdResponseBody {
	s.Data = v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdResponseBody) SetPageNumber(v int64) *ListTableDataByFormInstanceIdTableIdResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdResponseBody) SetRequestId(v string) *ListTableDataByFormInstanceIdTableIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdResponseBody) SetTotalCount(v int64) *ListTableDataByFormInstanceIdTableIdResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdResponseBody) SetVendorRequestId(v string) *ListTableDataByFormInstanceIdTableIdResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdResponseBody) SetVendorType(v string) *ListTableDataByFormInstanceIdTableIdResponseBody {
	s.VendorType = &v
	return s
}

type ListTableDataByFormInstanceIdTableIdResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTableDataByFormInstanceIdTableIdResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTableDataByFormInstanceIdTableIdResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTableDataByFormInstanceIdTableIdResponse) GoString() string {
	return s.String()
}

func (s *ListTableDataByFormInstanceIdTableIdResponse) SetHeaders(v map[string]*string) *ListTableDataByFormInstanceIdTableIdResponse {
	s.Headers = v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdResponse) SetStatusCode(v int32) *ListTableDataByFormInstanceIdTableIdResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTableDataByFormInstanceIdTableIdResponse) SetBody(v *ListTableDataByFormInstanceIdTableIdResponseBody) *ListTableDataByFormInstanceIdTableIdResponse {
	s.Body = v
	return s
}

type ListTeamsHeaders struct {
	CommonHeaders  map[string]*string              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListTeamsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListTeamsHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsHeaders) GoString() string {
	return s.String()
}

func (s *ListTeamsHeaders) SetCommonHeaders(v map[string]*string) *ListTeamsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListTeamsHeaders) SetAccountContext(v *ListTeamsHeadersAccountContext) *ListTeamsHeaders {
	s.AccountContext = v
	return s
}

type ListTeamsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListTeamsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListTeamsHeadersAccountContext) SetAccountId(v string) *ListTeamsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListTeamsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListTeamsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListTeamsShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListTeamsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListTeamsShrinkHeaders) SetAccountContextShrink(v string) *ListTeamsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListTeamsRequest struct {
	// example:
	//
	// 30
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	NextToken     *string                        `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TenantContext *ListTeamsRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s ListTeamsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsRequest) GoString() string {
	return s.String()
}

func (s *ListTeamsRequest) SetMaxResults(v int32) *ListTeamsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTeamsRequest) SetNextToken(v string) *ListTeamsRequest {
	s.NextToken = &v
	return s
}

func (s *ListTeamsRequest) SetTenantContext(v *ListTeamsRequestTenantContext) *ListTeamsRequest {
	s.TenantContext = v
	return s
}

type ListTeamsRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ListTeamsRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ListTeamsRequestTenantContext) SetTenantId(v string) *ListTeamsRequestTenantContext {
	s.TenantId = &v
	return s
}

type ListTeamsShrinkRequest struct {
	// example:
	//
	// 30
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	NextToken           *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s ListTeamsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTeamsShrinkRequest) SetMaxResults(v int32) *ListTeamsShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTeamsShrinkRequest) SetNextToken(v string) *ListTeamsShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListTeamsShrinkRequest) SetTenantContextShrink(v string) *ListTeamsShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type ListTeamsResponseBody struct {
	// example:
	//
	// 2023-05-15T11:29Z
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Teams     []*ListTeamsResponseBodyTeams `json:"teams,omitempty" xml:"teams,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListTeamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTeamsResponseBody) SetNextToken(v string) *ListTeamsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTeamsResponseBody) SetRequestId(v string) *ListTeamsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTeamsResponseBody) SetTeams(v []*ListTeamsResponseBodyTeams) *ListTeamsResponseBody {
	s.Teams = v
	return s
}

func (s *ListTeamsResponseBody) SetVendorRequestId(v string) *ListTeamsResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListTeamsResponseBody) SetVendorType(v string) *ListTeamsResponseBody {
	s.VendorType = &v
	return s
}

type ListTeamsResponseBodyTeams struct {
	// example:
	//
	// ding16b241fd05********288
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 01472825524039877041
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 012345
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// team_description
	Description *string                         `json:"Description,omitempty" xml:"Description,omitempty"`
	Icon        *ListTeamsResponseBodyTeamsIcon `json:"Icon,omitempty" xml:"Icon,omitempty" type:"Struct"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 012345
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// team_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// lHiicjNFM2iSFYSdz2iPuI8ZwiEiE
	TeamId *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
}

func (s ListTeamsResponseBodyTeams) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsResponseBodyTeams) GoString() string {
	return s.String()
}

func (s *ListTeamsResponseBodyTeams) SetCorpId(v string) *ListTeamsResponseBodyTeams {
	s.CorpId = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetCover(v string) *ListTeamsResponseBodyTeams {
	s.Cover = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetCreateTime(v string) *ListTeamsResponseBodyTeams {
	s.CreateTime = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetCreatorId(v string) *ListTeamsResponseBodyTeams {
	s.CreatorId = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetDescription(v string) *ListTeamsResponseBodyTeams {
	s.Description = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetIcon(v *ListTeamsResponseBodyTeamsIcon) *ListTeamsResponseBodyTeams {
	s.Icon = v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetModifiedTime(v string) *ListTeamsResponseBodyTeams {
	s.ModifiedTime = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetModifierId(v string) *ListTeamsResponseBodyTeams {
	s.ModifierId = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetName(v string) *ListTeamsResponseBodyTeams {
	s.Name = &v
	return s
}

func (s *ListTeamsResponseBodyTeams) SetTeamId(v string) *ListTeamsResponseBodyTeams {
	s.TeamId = &v
	return s
}

type ListTeamsResponseBodyTeamsIcon struct {
	// example:
	//
	// URL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/avatar3.jpg
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTeamsResponseBodyTeamsIcon) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsResponseBodyTeamsIcon) GoString() string {
	return s.String()
}

func (s *ListTeamsResponseBodyTeamsIcon) SetType(v string) *ListTeamsResponseBodyTeamsIcon {
	s.Type = &v
	return s
}

func (s *ListTeamsResponseBodyTeamsIcon) SetValue(v string) *ListTeamsResponseBodyTeamsIcon {
	s.Value = &v
	return s
}

type ListTeamsResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTeamsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTeamsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTeamsResponse) GoString() string {
	return s.String()
}

func (s *ListTeamsResponse) SetHeaders(v map[string]*string) *ListTeamsResponse {
	s.Headers = v
	return s
}

func (s *ListTeamsResponse) SetStatusCode(v int32) *ListTeamsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTeamsResponse) SetBody(v *ListTeamsResponseBody) *ListTeamsResponse {
	s.Body = v
	return s
}

type ListTemplateHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListTemplateHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListTemplateHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateHeaders) GoString() string {
	return s.String()
}

func (s *ListTemplateHeaders) SetCommonHeaders(v map[string]*string) *ListTemplateHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListTemplateHeaders) SetAccountContext(v *ListTemplateHeadersAccountContext) *ListTemplateHeaders {
	s.AccountContext = v
	return s
}

type ListTemplateHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListTemplateHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListTemplateHeadersAccountContext) SetAccountId(v string) *ListTemplateHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListTemplateShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListTemplateShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListTemplateShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListTemplateShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListTemplateShrinkHeaders) SetAccountContextShrink(v string) *ListTemplateShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// zzz
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// public_template
	TemplateType  *string                           `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	TenantContext *ListTemplateRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// workspaceId
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateRequest) GoString() string {
	return s.String()
}

func (s *ListTemplateRequest) SetMaxResults(v int32) *ListTemplateRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTemplateRequest) SetNextToken(v string) *ListTemplateRequest {
	s.NextToken = &v
	return s
}

func (s *ListTemplateRequest) SetTemplateType(v string) *ListTemplateRequest {
	s.TemplateType = &v
	return s
}

func (s *ListTemplateRequest) SetTenantContext(v *ListTemplateRequestTenantContext) *ListTemplateRequest {
	s.TenantContext = v
	return s
}

func (s *ListTemplateRequest) SetWorkspaceId(v string) *ListTemplateRequest {
	s.WorkspaceId = &v
	return s
}

type ListTemplateRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ListTemplateRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ListTemplateRequestTenantContext) SetTenantId(v string) *ListTemplateRequestTenantContext {
	s.TenantId = &v
	return s
}

type ListTemplateShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// zzz
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// public_template
	TemplateType        *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// workspaceId
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListTemplateShrinkRequest) SetMaxResults(v int32) *ListTemplateShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListTemplateShrinkRequest) SetNextToken(v string) *ListTemplateShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListTemplateShrinkRequest) SetTemplateType(v string) *ListTemplateShrinkRequest {
	s.TemplateType = &v
	return s
}

func (s *ListTemplateShrinkRequest) SetTenantContextShrink(v string) *ListTemplateShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *ListTemplateShrinkRequest) SetWorkspaceId(v string) *ListTemplateShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type ListTemplateResponseBody struct {
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// next_token
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// []
	TemplateList []*ListTemplateResponseBodyTemplateList `json:"templateList,omitempty" xml:"templateList,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s ListTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ListTemplateResponseBody) SetHasMore(v bool) *ListTemplateResponseBody {
	s.HasMore = &v
	return s
}

func (s *ListTemplateResponseBody) SetNextToken(v string) *ListTemplateResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTemplateResponseBody) SetRequestId(v string) *ListTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTemplateResponseBody) SetTemplateList(v []*ListTemplateResponseBodyTemplateList) *ListTemplateResponseBody {
	s.TemplateList = v
	return s
}

func (s *ListTemplateResponseBody) SetVendorRequestId(v string) *ListTemplateResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *ListTemplateResponseBody) SetVendorType(v string) *ListTemplateResponseBody {
	s.VendorType = &v
	return s
}

type ListTemplateResponseBodyTemplateList struct {
	// example:
	//
	// URL
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 1596506100000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// WORKBOOK
	DocType *string `json:"DocType,omitempty" xml:"DocType,omitempty"`
	// example:
	//
	// 123
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// user_template
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// example:
	//
	// title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 1596506100000
	UpdateTime *int64 `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	// example:
	//
	// workspaceId
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListTemplateResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *ListTemplateResponseBodyTemplateList) SetCoverUrl(v string) *ListTemplateResponseBodyTemplateList {
	s.CoverUrl = &v
	return s
}

func (s *ListTemplateResponseBodyTemplateList) SetCreateTime(v int64) *ListTemplateResponseBodyTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListTemplateResponseBodyTemplateList) SetDocType(v string) *ListTemplateResponseBodyTemplateList {
	s.DocType = &v
	return s
}

func (s *ListTemplateResponseBodyTemplateList) SetId(v string) *ListTemplateResponseBodyTemplateList {
	s.Id = &v
	return s
}

func (s *ListTemplateResponseBodyTemplateList) SetTemplateType(v string) *ListTemplateResponseBodyTemplateList {
	s.TemplateType = &v
	return s
}

func (s *ListTemplateResponseBodyTemplateList) SetTitle(v string) *ListTemplateResponseBodyTemplateList {
	s.Title = &v
	return s
}

func (s *ListTemplateResponseBodyTemplateList) SetUpdateTime(v int64) *ListTemplateResponseBodyTemplateList {
	s.UpdateTime = &v
	return s
}

func (s *ListTemplateResponseBodyTemplateList) SetWorkspaceId(v string) *ListTemplateResponseBodyTemplateList {
	s.WorkspaceId = &v
	return s
}

type ListTemplateResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTemplateResponse) GoString() string {
	return s.String()
}

func (s *ListTemplateResponse) SetHeaders(v map[string]*string) *ListTemplateResponse {
	s.Headers = v
	return s
}

func (s *ListTemplateResponse) SetStatusCode(v int32) *ListTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTemplateResponse) SetBody(v *ListTemplateResponseBody) *ListTemplateResponse {
	s.Body = v
	return s
}

type ListWorkspacesHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ListWorkspacesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ListWorkspacesHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesHeaders) GoString() string {
	return s.String()
}

func (s *ListWorkspacesHeaders) SetCommonHeaders(v map[string]*string) *ListWorkspacesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListWorkspacesHeaders) SetAccountContext(v *ListWorkspacesHeadersAccountContext) *ListWorkspacesHeaders {
	s.AccountContext = v
	return s
}

type ListWorkspacesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ListWorkspacesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ListWorkspacesHeadersAccountContext) SetAccountId(v string) *ListWorkspacesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ListWorkspacesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ListWorkspacesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ListWorkspacesShrinkHeaders) SetCommonHeaders(v map[string]*string) *ListWorkspacesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ListWorkspacesShrinkHeaders) SetAccountContextShrink(v string) *ListWorkspacesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ListWorkspacesRequest struct {
	// example:
	//
	// 30
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 123123
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// VIEW_TIME_DESC
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// qweqwe
	TeamId        *string                             `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
	TenantContext *ListWorkspacesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// true
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
}

func (s ListWorkspacesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesRequest) GoString() string {
	return s.String()
}

func (s *ListWorkspacesRequest) SetMaxResults(v int32) *ListWorkspacesRequest {
	s.MaxResults = &v
	return s
}

func (s *ListWorkspacesRequest) SetNextToken(v string) *ListWorkspacesRequest {
	s.NextToken = &v
	return s
}

func (s *ListWorkspacesRequest) SetOrderBy(v string) *ListWorkspacesRequest {
	s.OrderBy = &v
	return s
}

func (s *ListWorkspacesRequest) SetTeamId(v string) *ListWorkspacesRequest {
	s.TeamId = &v
	return s
}

func (s *ListWorkspacesRequest) SetTenantContext(v *ListWorkspacesRequestTenantContext) *ListWorkspacesRequest {
	s.TenantContext = v
	return s
}

func (s *ListWorkspacesRequest) SetWithPermissionRole(v bool) *ListWorkspacesRequest {
	s.WithPermissionRole = &v
	return s
}

type ListWorkspacesRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ListWorkspacesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ListWorkspacesRequestTenantContext) SetTenantId(v string) *ListWorkspacesRequestTenantContext {
	s.TenantId = &v
	return s
}

type ListWorkspacesShrinkRequest struct {
	// example:
	//
	// 30
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 123123
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// VIEW_TIME_DESC
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// qweqwe
	TeamId              *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// true
	WithPermissionRole *bool `json:"WithPermissionRole,omitempty" xml:"WithPermissionRole,omitempty"`
}

func (s ListWorkspacesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesShrinkRequest) GoString() string {
	return s.String()
}

func (s *ListWorkspacesShrinkRequest) SetMaxResults(v int32) *ListWorkspacesShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetNextToken(v string) *ListWorkspacesShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetOrderBy(v string) *ListWorkspacesShrinkRequest {
	s.OrderBy = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetTeamId(v string) *ListWorkspacesShrinkRequest {
	s.TeamId = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetTenantContextShrink(v string) *ListWorkspacesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *ListWorkspacesShrinkRequest) SetWithPermissionRole(v bool) *ListWorkspacesShrinkRequest {
	s.WithPermissionRole = &v
	return s
}

type ListWorkspacesResponseBody struct {
	// example:
	//
	// next_token
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId  *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Workspaces []*ListWorkspacesResponseBodyWorkspaces `json:"workspaces,omitempty" xml:"workspaces,omitempty" type:"Repeated"`
}

func (s ListWorkspacesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesResponseBody) GoString() string {
	return s.String()
}

func (s *ListWorkspacesResponseBody) SetNextToken(v string) *ListWorkspacesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetRequestId(v string) *ListWorkspacesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListWorkspacesResponseBody) SetWorkspaces(v []*ListWorkspacesResponseBodyWorkspaces) *ListWorkspacesResponseBody {
	s.Workspaces = v
	return s
}

type ListWorkspacesResponseBodyWorkspaces struct {
	// example:
	//
	// ding16b241fd05********288
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// https://example/file-manage-files/zh-CN/202***13/ldet/XXXX.jpg
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 2023-05-15T11:29Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// workspace_creator_id
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// workspace_description
	Description *string                                   `json:"Description,omitempty" xml:"Description,omitempty"`
	Icon        *ListWorkspacesResponseBodyWorkspacesIcon `json:"Icon,omitempty" xml:"Icon,omitempty" type:"Struct"`
	// example:
	//
	// 2023-05-15T11:29Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// workspace_modifier_id
	ModifierId *string `json:"ModifierId,omitempty" xml:"ModifierId,omitempty"`
	// example:
	//
	// workspace_name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// READER
	PermissionRole *string `json:"PermissionRole,omitempty" xml:"PermissionRole,omitempty"`
	// example:
	//
	// ZgpG2NdyVXXjrKKzIBqMp5zkVMwvDqPk
	RootNodeId *string `json:"RootNodeId,omitempty" xml:"RootNodeId,omitempty"`
	// example:
	//
	// iPes3KGYA9DxYSdz2iPuI8ZwiEiE
	TeamId *string `json:"TeamId,omitempty" xml:"TeamId,omitempty"`
	// example:
	//
	// TEAM
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// workspace_url
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
	// example:
	//
	// By8jQS1ZYjGn5b0M
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s ListWorkspacesResponseBodyWorkspaces) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesResponseBodyWorkspaces) GoString() string {
	return s.String()
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetCorpId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.CorpId = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetCover(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Cover = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetCreateTime(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.CreateTime = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetCreatorId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.CreatorId = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetDescription(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Description = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetIcon(v *ListWorkspacesResponseBodyWorkspacesIcon) *ListWorkspacesResponseBodyWorkspaces {
	s.Icon = v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetModifiedTime(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.ModifiedTime = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetModifierId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.ModifierId = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetName(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Name = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetPermissionRole(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.PermissionRole = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetRootNodeId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.RootNodeId = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetTeamId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.TeamId = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetType(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Type = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetUrl(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.Url = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspaces) SetWorkspaceId(v string) *ListWorkspacesResponseBodyWorkspaces {
	s.WorkspaceId = &v
	return s
}

type ListWorkspacesResponseBodyWorkspacesIcon struct {
	// example:
	//
	// URL
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// icon_url
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListWorkspacesResponseBodyWorkspacesIcon) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesResponseBodyWorkspacesIcon) GoString() string {
	return s.String()
}

func (s *ListWorkspacesResponseBodyWorkspacesIcon) SetType(v string) *ListWorkspacesResponseBodyWorkspacesIcon {
	s.Type = &v
	return s
}

func (s *ListWorkspacesResponseBodyWorkspacesIcon) SetValue(v string) *ListWorkspacesResponseBodyWorkspacesIcon {
	s.Value = &v
	return s
}

type ListWorkspacesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListWorkspacesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListWorkspacesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListWorkspacesResponse) GoString() string {
	return s.String()
}

func (s *ListWorkspacesResponse) SetHeaders(v map[string]*string) *ListWorkspacesResponse {
	s.Headers = v
	return s
}

func (s *ListWorkspacesResponse) SetStatusCode(v int32) *ListWorkspacesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListWorkspacesResponse) SetBody(v *ListWorkspacesResponseBody) *ListWorkspacesResponse {
	s.Body = v
	return s
}

type PatchEventHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *PatchEventHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s PatchEventHeaders) String() string {
	return tea.Prettify(s)
}

func (s PatchEventHeaders) GoString() string {
	return s.String()
}

func (s *PatchEventHeaders) SetCommonHeaders(v map[string]*string) *PatchEventHeaders {
	s.CommonHeaders = v
	return s
}

func (s *PatchEventHeaders) SetAccountContext(v *PatchEventHeadersAccountContext) *PatchEventHeaders {
	s.AccountContext = v
	return s
}

type PatchEventHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 123456
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s PatchEventHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s PatchEventHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *PatchEventHeadersAccountContext) SetAccountId(v string) *PatchEventHeadersAccountContext {
	s.AccountId = &v
	return s
}

type PatchEventShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s PatchEventShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s PatchEventShrinkHeaders) GoString() string {
	return s.String()
}

func (s *PatchEventShrinkHeaders) SetCommonHeaders(v map[string]*string) *PatchEventShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *PatchEventShrinkHeaders) SetAccountContextShrink(v string) *PatchEventShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type PatchEventRequest struct {
	Attendees []*PatchEventRequestAttendees `json:"Attendees,omitempty" xml:"Attendees,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId    *string                           `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	CardInstances []*PatchEventRequestCardInstances `json:"CardInstances,omitempty" xml:"CardInstances,omitempty" type:"Repeated"`
	Description   *string                           `json:"Description,omitempty" xml:"Description,omitempty"`
	End           *PatchEventRequestEnd             `json:"End,omitempty" xml:"End,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// iiiP35sJadba8aBSgjrwPRKgiEiF
	EventId *string            `json:"EventId,omitempty" xml:"EventId,omitempty"`
	Extra   map[string]*string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// example:
	//
	// true
	IsAllDay   *bool                         `json:"IsAllDay,omitempty" xml:"IsAllDay,omitempty"`
	Location   *PatchEventRequestLocation    `json:"Location,omitempty" xml:"Location,omitempty" type:"Struct"`
	Recurrence *PatchEventRequestRecurrence  `json:"Recurrence,omitempty" xml:"Recurrence,omitempty" type:"Struct"`
	Reminders  []*PatchEventRequestReminders `json:"Reminders,omitempty" xml:"Reminders,omitempty" type:"Repeated"`
	Start      *PatchEventRequestStart       `json:"Start,omitempty" xml:"Start,omitempty" type:"Struct"`
	Summary    *string                       `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s PatchEventRequest) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequest) GoString() string {
	return s.String()
}

func (s *PatchEventRequest) SetAttendees(v []*PatchEventRequestAttendees) *PatchEventRequest {
	s.Attendees = v
	return s
}

func (s *PatchEventRequest) SetCalendarId(v string) *PatchEventRequest {
	s.CalendarId = &v
	return s
}

func (s *PatchEventRequest) SetCardInstances(v []*PatchEventRequestCardInstances) *PatchEventRequest {
	s.CardInstances = v
	return s
}

func (s *PatchEventRequest) SetDescription(v string) *PatchEventRequest {
	s.Description = &v
	return s
}

func (s *PatchEventRequest) SetEnd(v *PatchEventRequestEnd) *PatchEventRequest {
	s.End = v
	return s
}

func (s *PatchEventRequest) SetEventId(v string) *PatchEventRequest {
	s.EventId = &v
	return s
}

func (s *PatchEventRequest) SetExtra(v map[string]*string) *PatchEventRequest {
	s.Extra = v
	return s
}

func (s *PatchEventRequest) SetIsAllDay(v bool) *PatchEventRequest {
	s.IsAllDay = &v
	return s
}

func (s *PatchEventRequest) SetLocation(v *PatchEventRequestLocation) *PatchEventRequest {
	s.Location = v
	return s
}

func (s *PatchEventRequest) SetRecurrence(v *PatchEventRequestRecurrence) *PatchEventRequest {
	s.Recurrence = v
	return s
}

func (s *PatchEventRequest) SetReminders(v []*PatchEventRequestReminders) *PatchEventRequest {
	s.Reminders = v
	return s
}

func (s *PatchEventRequest) SetStart(v *PatchEventRequestStart) *PatchEventRequest {
	s.Start = v
	return s
}

func (s *PatchEventRequest) SetSummary(v string) *PatchEventRequest {
	s.Summary = &v
	return s
}

type PatchEventRequestAttendees struct {
	// example:
	//
	// 123456
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// false
	IsOptional *bool `json:"isOptional,omitempty" xml:"isOptional,omitempty"`
}

func (s PatchEventRequestAttendees) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestAttendees) GoString() string {
	return s.String()
}

func (s *PatchEventRequestAttendees) SetId(v string) *PatchEventRequestAttendees {
	s.Id = &v
	return s
}

func (s *PatchEventRequestAttendees) SetIsOptional(v bool) *PatchEventRequestAttendees {
	s.IsOptional = &v
	return s
}

type PatchEventRequestCardInstances struct {
	OutTrackId *string `json:"OutTrackId,omitempty" xml:"OutTrackId,omitempty"`
	Scenario   *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
}

func (s PatchEventRequestCardInstances) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestCardInstances) GoString() string {
	return s.String()
}

func (s *PatchEventRequestCardInstances) SetOutTrackId(v string) *PatchEventRequestCardInstances {
	s.OutTrackId = &v
	return s
}

func (s *PatchEventRequestCardInstances) SetScenario(v string) *PatchEventRequestCardInstances {
	s.Scenario = &v
	return s
}

type PatchEventRequestEnd struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"dateTime,omitempty" xml:"dateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"timeZone,omitempty" xml:"timeZone,omitempty"`
}

func (s PatchEventRequestEnd) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestEnd) GoString() string {
	return s.String()
}

func (s *PatchEventRequestEnd) SetDate(v string) *PatchEventRequestEnd {
	s.Date = &v
	return s
}

func (s *PatchEventRequestEnd) SetDateTime(v string) *PatchEventRequestEnd {
	s.DateTime = &v
	return s
}

func (s *PatchEventRequestEnd) SetTimeZone(v string) *PatchEventRequestEnd {
	s.TimeZone = &v
	return s
}

type PatchEventRequestLocation struct {
	// example:
	//
	// room 1-2-3
	DisplayName *string `json:"displayName,omitempty" xml:"displayName,omitempty"`
}

func (s PatchEventRequestLocation) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestLocation) GoString() string {
	return s.String()
}

func (s *PatchEventRequestLocation) SetDisplayName(v string) *PatchEventRequestLocation {
	s.DisplayName = &v
	return s
}

type PatchEventRequestRecurrence struct {
	Pattern *PatchEventRequestRecurrencePattern `json:"pattern,omitempty" xml:"pattern,omitempty" type:"Struct"`
	Range   *PatchEventRequestRecurrenceRange   `json:"range,omitempty" xml:"range,omitempty" type:"Struct"`
}

func (s PatchEventRequestRecurrence) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestRecurrence) GoString() string {
	return s.String()
}

func (s *PatchEventRequestRecurrence) SetPattern(v *PatchEventRequestRecurrencePattern) *PatchEventRequestRecurrence {
	s.Pattern = v
	return s
}

func (s *PatchEventRequestRecurrence) SetRange(v *PatchEventRequestRecurrenceRange) *PatchEventRequestRecurrence {
	s.Range = v
	return s
}

type PatchEventRequestRecurrencePattern struct {
	// example:
	//
	// 1
	DayOfMonth *int32 `json:"dayOfMonth,omitempty" xml:"dayOfMonth,omitempty"`
	// example:
	//
	// sunday
	DaysOfWeek *string `json:"daysOfWeek,omitempty" xml:"daysOfWeek,omitempty"`
	// example:
	//
	// last
	Index *string `json:"index,omitempty" xml:"index,omitempty"`
	// example:
	//
	// 1
	Interval *int32 `json:"interval,omitempty" xml:"interval,omitempty"`
	// example:
	//
	// daily
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s PatchEventRequestRecurrencePattern) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestRecurrencePattern) GoString() string {
	return s.String()
}

func (s *PatchEventRequestRecurrencePattern) SetDayOfMonth(v int32) *PatchEventRequestRecurrencePattern {
	s.DayOfMonth = &v
	return s
}

func (s *PatchEventRequestRecurrencePattern) SetDaysOfWeek(v string) *PatchEventRequestRecurrencePattern {
	s.DaysOfWeek = &v
	return s
}

func (s *PatchEventRequestRecurrencePattern) SetIndex(v string) *PatchEventRequestRecurrencePattern {
	s.Index = &v
	return s
}

func (s *PatchEventRequestRecurrencePattern) SetInterval(v int32) *PatchEventRequestRecurrencePattern {
	s.Interval = &v
	return s
}

func (s *PatchEventRequestRecurrencePattern) SetType(v string) *PatchEventRequestRecurrencePattern {
	s.Type = &v
	return s
}

type PatchEventRequestRecurrenceRange struct {
	// example:
	//
	// 2021-12-31T10:15:30+08:00
	EndDate *string `json:"endDate,omitempty" xml:"endDate,omitempty"`
	// example:
	//
	// 1
	NumberOfOccurrences *int32 `json:"numberOfOccurrences,omitempty" xml:"numberOfOccurrences,omitempty"`
	// example:
	//
	// endDate
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s PatchEventRequestRecurrenceRange) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestRecurrenceRange) GoString() string {
	return s.String()
}

func (s *PatchEventRequestRecurrenceRange) SetEndDate(v string) *PatchEventRequestRecurrenceRange {
	s.EndDate = &v
	return s
}

func (s *PatchEventRequestRecurrenceRange) SetNumberOfOccurrences(v int32) *PatchEventRequestRecurrenceRange {
	s.NumberOfOccurrences = &v
	return s
}

func (s *PatchEventRequestRecurrenceRange) SetType(v string) *PatchEventRequestRecurrenceRange {
	s.Type = &v
	return s
}

type PatchEventRequestReminders struct {
	// example:
	//
	// dingtalk
	Method *string `json:"method,omitempty" xml:"method,omitempty"`
	// example:
	//
	// 15
	Minutes *int32 `json:"minutes,omitempty" xml:"minutes,omitempty"`
}

func (s PatchEventRequestReminders) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestReminders) GoString() string {
	return s.String()
}

func (s *PatchEventRequestReminders) SetMethod(v string) *PatchEventRequestReminders {
	s.Method = &v
	return s
}

func (s *PatchEventRequestReminders) SetMinutes(v int32) *PatchEventRequestReminders {
	s.Minutes = &v
	return s
}

type PatchEventRequestStart struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"date,omitempty" xml:"date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"dateTime,omitempty" xml:"dateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"timeZone,omitempty" xml:"timeZone,omitempty"`
}

func (s PatchEventRequestStart) String() string {
	return tea.Prettify(s)
}

func (s PatchEventRequestStart) GoString() string {
	return s.String()
}

func (s *PatchEventRequestStart) SetDate(v string) *PatchEventRequestStart {
	s.Date = &v
	return s
}

func (s *PatchEventRequestStart) SetDateTime(v string) *PatchEventRequestStart {
	s.DateTime = &v
	return s
}

func (s *PatchEventRequestStart) SetTimeZone(v string) *PatchEventRequestStart {
	s.TimeZone = &v
	return s
}

type PatchEventShrinkRequest struct {
	AttendeesShrink *string `json:"Attendees,omitempty" xml:"Attendees,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId          *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	CardInstancesShrink *string `json:"CardInstances,omitempty" xml:"CardInstances,omitempty"`
	Description         *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndShrink           *string `json:"End,omitempty" xml:"End,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// iiiP35sJadba8aBSgjrwPRKgiEiF
	EventId     *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	ExtraShrink *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// example:
	//
	// true
	IsAllDay         *bool   `json:"IsAllDay,omitempty" xml:"IsAllDay,omitempty"`
	LocationShrink   *string `json:"Location,omitempty" xml:"Location,omitempty"`
	RecurrenceShrink *string `json:"Recurrence,omitempty" xml:"Recurrence,omitempty"`
	RemindersShrink  *string `json:"Reminders,omitempty" xml:"Reminders,omitempty"`
	StartShrink      *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Summary          *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s PatchEventShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s PatchEventShrinkRequest) GoString() string {
	return s.String()
}

func (s *PatchEventShrinkRequest) SetAttendeesShrink(v string) *PatchEventShrinkRequest {
	s.AttendeesShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetCalendarId(v string) *PatchEventShrinkRequest {
	s.CalendarId = &v
	return s
}

func (s *PatchEventShrinkRequest) SetCardInstancesShrink(v string) *PatchEventShrinkRequest {
	s.CardInstancesShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetDescription(v string) *PatchEventShrinkRequest {
	s.Description = &v
	return s
}

func (s *PatchEventShrinkRequest) SetEndShrink(v string) *PatchEventShrinkRequest {
	s.EndShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetEventId(v string) *PatchEventShrinkRequest {
	s.EventId = &v
	return s
}

func (s *PatchEventShrinkRequest) SetExtraShrink(v string) *PatchEventShrinkRequest {
	s.ExtraShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetIsAllDay(v bool) *PatchEventShrinkRequest {
	s.IsAllDay = &v
	return s
}

func (s *PatchEventShrinkRequest) SetLocationShrink(v string) *PatchEventShrinkRequest {
	s.LocationShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetRecurrenceShrink(v string) *PatchEventShrinkRequest {
	s.RecurrenceShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetRemindersShrink(v string) *PatchEventShrinkRequest {
	s.RemindersShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetStartShrink(v string) *PatchEventShrinkRequest {
	s.StartShrink = &v
	return s
}

func (s *PatchEventShrinkRequest) SetSummary(v string) *PatchEventShrinkRequest {
	s.Summary = &v
	return s
}

type PatchEventResponseBody struct {
	Attendees []*PatchEventResponseBodyAttendees `json:"attendees,omitempty" xml:"attendees,omitempty" type:"Repeated"`
	// example:
	//
	// 2022-10-25T02:26:14Z
	CreateTime  *string                    `json:"createTime,omitempty" xml:"createTime,omitempty"`
	Description *string                    `json:"description,omitempty" xml:"description,omitempty"`
	End         *PatchEventResponseBodyEnd `json:"end,omitempty" xml:"end,omitempty" type:"Struct"`
	// example:
	//
	// 123456
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsAllDay   *bool                              `json:"isAllDay,omitempty" xml:"isAllDay,omitempty"`
	Location   *PatchEventResponseBodyLocation    `json:"location,omitempty" xml:"location,omitempty" type:"Struct"`
	Organizer  *PatchEventResponseBodyOrganizer   `json:"organizer,omitempty" xml:"organizer,omitempty" type:"Struct"`
	Recurrence *PatchEventResponseBodyRecurrence  `json:"recurrence,omitempty" xml:"recurrence,omitempty" type:"Struct"`
	Reminders  []*PatchEventResponseBodyReminders `json:"reminders,omitempty" xml:"reminders,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 4248DCC9-785F-5A14-8BE0-830FD52E1261
	RequestId *string                      `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Start     *PatchEventResponseBodyStart `json:"start,omitempty" xml:"start,omitempty" type:"Struct"`
	Summary   *string                      `json:"summary,omitempty" xml:"summary,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	UpdateTime *string `json:"updateTime,omitempty" xml:"updateTime,omitempty"`
}

func (s PatchEventResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBody) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBody) SetAttendees(v []*PatchEventResponseBodyAttendees) *PatchEventResponseBody {
	s.Attendees = v
	return s
}

func (s *PatchEventResponseBody) SetCreateTime(v string) *PatchEventResponseBody {
	s.CreateTime = &v
	return s
}

func (s *PatchEventResponseBody) SetDescription(v string) *PatchEventResponseBody {
	s.Description = &v
	return s
}

func (s *PatchEventResponseBody) SetEnd(v *PatchEventResponseBodyEnd) *PatchEventResponseBody {
	s.End = v
	return s
}

func (s *PatchEventResponseBody) SetId(v string) *PatchEventResponseBody {
	s.Id = &v
	return s
}

func (s *PatchEventResponseBody) SetIsAllDay(v bool) *PatchEventResponseBody {
	s.IsAllDay = &v
	return s
}

func (s *PatchEventResponseBody) SetLocation(v *PatchEventResponseBodyLocation) *PatchEventResponseBody {
	s.Location = v
	return s
}

func (s *PatchEventResponseBody) SetOrganizer(v *PatchEventResponseBodyOrganizer) *PatchEventResponseBody {
	s.Organizer = v
	return s
}

func (s *PatchEventResponseBody) SetRecurrence(v *PatchEventResponseBodyRecurrence) *PatchEventResponseBody {
	s.Recurrence = v
	return s
}

func (s *PatchEventResponseBody) SetReminders(v []*PatchEventResponseBodyReminders) *PatchEventResponseBody {
	s.Reminders = v
	return s
}

func (s *PatchEventResponseBody) SetRequestId(v string) *PatchEventResponseBody {
	s.RequestId = &v
	return s
}

func (s *PatchEventResponseBody) SetStart(v *PatchEventResponseBodyStart) *PatchEventResponseBody {
	s.Start = v
	return s
}

func (s *PatchEventResponseBody) SetSummary(v string) *PatchEventResponseBody {
	s.Summary = &v
	return s
}

func (s *PatchEventResponseBody) SetUpdateTime(v string) *PatchEventResponseBody {
	s.UpdateTime = &v
	return s
}

type PatchEventResponseBodyAttendees struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 123456
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// true
	IsOptional *bool `json:"IsOptional,omitempty" xml:"IsOptional,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s PatchEventResponseBodyAttendees) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyAttendees) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyAttendees) SetDisplayName(v string) *PatchEventResponseBodyAttendees {
	s.DisplayName = &v
	return s
}

func (s *PatchEventResponseBodyAttendees) SetId(v string) *PatchEventResponseBodyAttendees {
	s.Id = &v
	return s
}

func (s *PatchEventResponseBodyAttendees) SetIsOptional(v bool) *PatchEventResponseBodyAttendees {
	s.IsOptional = &v
	return s
}

func (s *PatchEventResponseBodyAttendees) SetResponseStatus(v string) *PatchEventResponseBodyAttendees {
	s.ResponseStatus = &v
	return s
}

func (s *PatchEventResponseBodyAttendees) SetSelf(v bool) *PatchEventResponseBodyAttendees {
	s.Self = &v
	return s
}

type PatchEventResponseBodyEnd struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s PatchEventResponseBodyEnd) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyEnd) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyEnd) SetDate(v string) *PatchEventResponseBodyEnd {
	s.Date = &v
	return s
}

func (s *PatchEventResponseBodyEnd) SetDateTime(v string) *PatchEventResponseBodyEnd {
	s.DateTime = &v
	return s
}

func (s *PatchEventResponseBodyEnd) SetTimeZone(v string) *PatchEventResponseBodyEnd {
	s.TimeZone = &v
	return s
}

type PatchEventResponseBodyLocation struct {
	// example:
	//
	// true
	DisplayName  *string   `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	MeetingRooms []*string `json:"MeetingRooms,omitempty" xml:"MeetingRooms,omitempty" type:"Repeated"`
}

func (s PatchEventResponseBodyLocation) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyLocation) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyLocation) SetDisplayName(v string) *PatchEventResponseBodyLocation {
	s.DisplayName = &v
	return s
}

func (s *PatchEventResponseBodyLocation) SetMeetingRooms(v []*string) *PatchEventResponseBodyLocation {
	s.MeetingRooms = v
	return s
}

type PatchEventResponseBodyOrganizer struct {
	// example:
	//
	// tony
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	// example:
	//
	// 123456
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// accepted
	ResponseStatus *string `json:"ResponseStatus,omitempty" xml:"ResponseStatus,omitempty"`
	// example:
	//
	// true
	Self *bool `json:"Self,omitempty" xml:"Self,omitempty"`
}

func (s PatchEventResponseBodyOrganizer) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyOrganizer) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyOrganizer) SetDisplayName(v string) *PatchEventResponseBodyOrganizer {
	s.DisplayName = &v
	return s
}

func (s *PatchEventResponseBodyOrganizer) SetId(v string) *PatchEventResponseBodyOrganizer {
	s.Id = &v
	return s
}

func (s *PatchEventResponseBodyOrganizer) SetResponseStatus(v string) *PatchEventResponseBodyOrganizer {
	s.ResponseStatus = &v
	return s
}

func (s *PatchEventResponseBodyOrganizer) SetSelf(v bool) *PatchEventResponseBodyOrganizer {
	s.Self = &v
	return s
}

type PatchEventResponseBodyRecurrence struct {
	Pattern *PatchEventResponseBodyRecurrencePattern `json:"Pattern,omitempty" xml:"Pattern,omitempty" type:"Struct"`
	Range   *PatchEventResponseBodyRecurrenceRange   `json:"Range,omitempty" xml:"Range,omitempty" type:"Struct"`
}

func (s PatchEventResponseBodyRecurrence) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyRecurrence) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyRecurrence) SetPattern(v *PatchEventResponseBodyRecurrencePattern) *PatchEventResponseBodyRecurrence {
	s.Pattern = v
	return s
}

func (s *PatchEventResponseBodyRecurrence) SetRange(v *PatchEventResponseBodyRecurrenceRange) *PatchEventResponseBodyRecurrence {
	s.Range = v
	return s
}

type PatchEventResponseBodyRecurrencePattern struct {
	// example:
	//
	// 14
	DayOfMonth *int32 `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	// example:
	//
	// sunday
	DaysOfWeek *string `json:"DaysOfWeek,omitempty" xml:"DaysOfWeek,omitempty"`
	// example:
	//
	// first
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// 1
	Interval *int32 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// daily
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s PatchEventResponseBodyRecurrencePattern) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyRecurrencePattern) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyRecurrencePattern) SetDayOfMonth(v int32) *PatchEventResponseBodyRecurrencePattern {
	s.DayOfMonth = &v
	return s
}

func (s *PatchEventResponseBodyRecurrencePattern) SetDaysOfWeek(v string) *PatchEventResponseBodyRecurrencePattern {
	s.DaysOfWeek = &v
	return s
}

func (s *PatchEventResponseBodyRecurrencePattern) SetIndex(v string) *PatchEventResponseBodyRecurrencePattern {
	s.Index = &v
	return s
}

func (s *PatchEventResponseBodyRecurrencePattern) SetInterval(v int32) *PatchEventResponseBodyRecurrencePattern {
	s.Interval = &v
	return s
}

func (s *PatchEventResponseBodyRecurrencePattern) SetType(v string) *PatchEventResponseBodyRecurrencePattern {
	s.Type = &v
	return s
}

type PatchEventResponseBodyRecurrenceRange struct {
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	EndDate *string `json:"EndDate,omitempty" xml:"EndDate,omitempty"`
	// example:
	//
	// 5
	NumberOfOccurrences *int32 `json:"NumberOfOccurrences,omitempty" xml:"NumberOfOccurrences,omitempty"`
	// example:
	//
	// noEnd
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s PatchEventResponseBodyRecurrenceRange) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyRecurrenceRange) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyRecurrenceRange) SetEndDate(v string) *PatchEventResponseBodyRecurrenceRange {
	s.EndDate = &v
	return s
}

func (s *PatchEventResponseBodyRecurrenceRange) SetNumberOfOccurrences(v int32) *PatchEventResponseBodyRecurrenceRange {
	s.NumberOfOccurrences = &v
	return s
}

func (s *PatchEventResponseBodyRecurrenceRange) SetType(v string) *PatchEventResponseBodyRecurrenceRange {
	s.Type = &v
	return s
}

type PatchEventResponseBodyReminders struct {
	// example:
	//
	// dingtalk
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// 15
	Minutes *string `json:"Minutes,omitempty" xml:"Minutes,omitempty"`
}

func (s PatchEventResponseBodyReminders) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyReminders) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyReminders) SetMethod(v string) *PatchEventResponseBodyReminders {
	s.Method = &v
	return s
}

func (s *PatchEventResponseBodyReminders) SetMinutes(v string) *PatchEventResponseBodyReminders {
	s.Minutes = &v
	return s
}

type PatchEventResponseBodyStart struct {
	// example:
	//
	// 2020-01-01
	Date *string `json:"Date,omitempty" xml:"Date,omitempty"`
	// example:
	//
	// 2020-01-01T10:15:30+08:00
	DateTime *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	// example:
	//
	// Asia/Shanghai
	TimeZone *string `json:"TimeZone,omitempty" xml:"TimeZone,omitempty"`
}

func (s PatchEventResponseBodyStart) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponseBodyStart) GoString() string {
	return s.String()
}

func (s *PatchEventResponseBodyStart) SetDate(v string) *PatchEventResponseBodyStart {
	s.Date = &v
	return s
}

func (s *PatchEventResponseBodyStart) SetDateTime(v string) *PatchEventResponseBodyStart {
	s.DateTime = &v
	return s
}

func (s *PatchEventResponseBodyStart) SetTimeZone(v string) *PatchEventResponseBodyStart {
	s.TimeZone = &v
	return s
}

type PatchEventResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *PatchEventResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s PatchEventResponse) String() string {
	return tea.Prettify(s)
}

func (s PatchEventResponse) GoString() string {
	return s.String()
}

func (s *PatchEventResponse) SetHeaders(v map[string]*string) *PatchEventResponse {
	s.Headers = v
	return s
}

func (s *PatchEventResponse) SetStatusCode(v int32) *PatchEventResponse {
	s.StatusCode = &v
	return s
}

func (s *PatchEventResponse) SetBody(v *PatchEventResponseBody) *PatchEventResponse {
	s.Body = v
	return s
}

type QueryCloudRecordTextHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryCloudRecordTextHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryCloudRecordTextHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextHeaders) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextHeaders) SetCommonHeaders(v map[string]*string) *QueryCloudRecordTextHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryCloudRecordTextHeaders) SetAccountContext(v *QueryCloudRecordTextHeadersAccountContext) *QueryCloudRecordTextHeaders {
	s.AccountContext = v
	return s
}

type QueryCloudRecordTextHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryCloudRecordTextHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextHeadersAccountContext) SetAccountId(v string) *QueryCloudRecordTextHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryCloudRecordTextShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryCloudRecordTextShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryCloudRecordTextShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryCloudRecordTextShrinkHeaders) SetAccountContextShrink(v string) *QueryCloudRecordTextShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryCloudRecordTextRequest struct {
	// example:
	//
	// 0
	Direction *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	// example:
	//
	// 20000
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 1631172045153000
	NextToken *int64 `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 7940
	StartTime     *int64                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *QueryCloudRecordTextRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryCloudRecordTextRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextRequest) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextRequest) SetDirection(v string) *QueryCloudRecordTextRequest {
	s.Direction = &v
	return s
}

func (s *QueryCloudRecordTextRequest) SetMaxResults(v int64) *QueryCloudRecordTextRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryCloudRecordTextRequest) SetNextToken(v int64) *QueryCloudRecordTextRequest {
	s.NextToken = &v
	return s
}

func (s *QueryCloudRecordTextRequest) SetStartTime(v int64) *QueryCloudRecordTextRequest {
	s.StartTime = &v
	return s
}

func (s *QueryCloudRecordTextRequest) SetTenantContext(v *QueryCloudRecordTextRequestTenantContext) *QueryCloudRecordTextRequest {
	s.TenantContext = v
	return s
}

func (s *QueryCloudRecordTextRequest) SetConferenceId(v string) *QueryCloudRecordTextRequest {
	s.ConferenceId = &v
	return s
}

type QueryCloudRecordTextRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryCloudRecordTextRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextRequestTenantContext) SetTenantId(v string) *QueryCloudRecordTextRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryCloudRecordTextShrinkRequest struct {
	// example:
	//
	// 0
	Direction *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
	// example:
	//
	// 20000
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 1631172045153000
	NextToken *int64 `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 7940
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryCloudRecordTextShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextShrinkRequest) SetDirection(v string) *QueryCloudRecordTextShrinkRequest {
	s.Direction = &v
	return s
}

func (s *QueryCloudRecordTextShrinkRequest) SetMaxResults(v int64) *QueryCloudRecordTextShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryCloudRecordTextShrinkRequest) SetNextToken(v int64) *QueryCloudRecordTextShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *QueryCloudRecordTextShrinkRequest) SetStartTime(v int64) *QueryCloudRecordTextShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *QueryCloudRecordTextShrinkRequest) SetTenantContextShrink(v string) *QueryCloudRecordTextShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryCloudRecordTextShrinkRequest) SetConferenceId(v string) *QueryCloudRecordTextShrinkRequest {
	s.ConferenceId = &v
	return s
}

type QueryCloudRecordTextResponseBody struct {
	// example:
	//
	// true
	HasMore       *bool                                            `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	ParagraphList []*QueryCloudRecordTextResponseBodyParagraphList `json:"paragraphList,omitempty" xml:"paragraphList,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s QueryCloudRecordTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextResponseBody) SetHasMore(v bool) *QueryCloudRecordTextResponseBody {
	s.HasMore = &v
	return s
}

func (s *QueryCloudRecordTextResponseBody) SetParagraphList(v []*QueryCloudRecordTextResponseBodyParagraphList) *QueryCloudRecordTextResponseBody {
	s.ParagraphList = v
	return s
}

func (s *QueryCloudRecordTextResponseBody) SetRequestId(v string) *QueryCloudRecordTextResponseBody {
	s.RequestId = &v
	return s
}

type QueryCloudRecordTextResponseBodyParagraphList struct {
	// example:
	//
	// 7940
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1631172045153000
	NextTtoken *int64 `json:"NextTtoken,omitempty" xml:"NextTtoken,omitempty"`
	// example:
	//
	// 小钉
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// example:
	//
	// 嘿！你好，这里是小钉
	Paragraph *string `json:"Paragraph,omitempty" xml:"Paragraph,omitempty"`
	// example:
	//
	// 44444
	RecordId     *int64                                                       `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	SentenceList []*QueryCloudRecordTextResponseBodyParagraphListSentenceList `json:"SentenceList,omitempty" xml:"SentenceList,omitempty" type:"Repeated"`
	// example:
	//
	// 7940
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1
	Status *int64 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryCloudRecordTextResponseBodyParagraphList) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextResponseBodyParagraphList) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetEndTime(v int64) *QueryCloudRecordTextResponseBodyParagraphList {
	s.EndTime = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetNextTtoken(v int64) *QueryCloudRecordTextResponseBodyParagraphList {
	s.NextTtoken = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetNickName(v string) *QueryCloudRecordTextResponseBodyParagraphList {
	s.NickName = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetParagraph(v string) *QueryCloudRecordTextResponseBodyParagraphList {
	s.Paragraph = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetRecordId(v int64) *QueryCloudRecordTextResponseBodyParagraphList {
	s.RecordId = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetSentenceList(v []*QueryCloudRecordTextResponseBodyParagraphListSentenceList) *QueryCloudRecordTextResponseBodyParagraphList {
	s.SentenceList = v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetStartTime(v int64) *QueryCloudRecordTextResponseBodyParagraphList {
	s.StartTime = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetStatus(v int64) *QueryCloudRecordTextResponseBodyParagraphList {
	s.Status = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphList) SetUserId(v string) *QueryCloudRecordTextResponseBodyParagraphList {
	s.UserId = &v
	return s
}

type QueryCloudRecordTextResponseBodyParagraphListSentenceList struct {
	// example:
	//
	// 7940
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 这里是小钉
	Sentence *string `json:"Sentence,omitempty" xml:"Sentence,omitempty"`
	// example:
	//
	// 7940
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 012345
	UserId   *string                                                              `json:"UserId,omitempty" xml:"UserId,omitempty"`
	WordList []*QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList `json:"WordList,omitempty" xml:"WordList,omitempty" type:"Repeated"`
}

func (s QueryCloudRecordTextResponseBodyParagraphListSentenceList) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextResponseBodyParagraphListSentenceList) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceList) SetEndTime(v int64) *QueryCloudRecordTextResponseBodyParagraphListSentenceList {
	s.EndTime = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceList) SetSentence(v string) *QueryCloudRecordTextResponseBodyParagraphListSentenceList {
	s.Sentence = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceList) SetStartTime(v int64) *QueryCloudRecordTextResponseBodyParagraphListSentenceList {
	s.StartTime = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceList) SetUserId(v string) *QueryCloudRecordTextResponseBodyParagraphListSentenceList {
	s.UserId = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceList) SetWordList(v []*QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList) *QueryCloudRecordTextResponseBodyParagraphListSentenceList {
	s.WordList = v
	return s
}

type QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList struct {
	// example:
	//
	// 7940
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 7940
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 这里
	Word *string `json:"Word,omitempty" xml:"Word,omitempty"`
	// example:
	//
	// 1631172050535000#0
	WordId *string `json:"WordId,omitempty" xml:"WordId,omitempty"`
}

func (s QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList) SetEndTime(v int64) *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList {
	s.EndTime = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList) SetStartTime(v int64) *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList {
	s.StartTime = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList) SetWord(v string) *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList {
	s.Word = &v
	return s
}

func (s *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList) SetWordId(v string) *QueryCloudRecordTextResponseBodyParagraphListSentenceListWordList {
	s.WordId = &v
	return s
}

type QueryCloudRecordTextResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCloudRecordTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCloudRecordTextResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordTextResponse) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordTextResponse) SetHeaders(v map[string]*string) *QueryCloudRecordTextResponse {
	s.Headers = v
	return s
}

func (s *QueryCloudRecordTextResponse) SetStatusCode(v int32) *QueryCloudRecordTextResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCloudRecordTextResponse) SetBody(v *QueryCloudRecordTextResponseBody) *QueryCloudRecordTextResponse {
	s.Body = v
	return s
}

type QueryCloudRecordVideoHeaders struct {
	CommonHeaders  map[string]*string                          `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryCloudRecordVideoHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryCloudRecordVideoHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoHeaders) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoHeaders) SetCommonHeaders(v map[string]*string) *QueryCloudRecordVideoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryCloudRecordVideoHeaders) SetAccountContext(v *QueryCloudRecordVideoHeadersAccountContext) *QueryCloudRecordVideoHeaders {
	s.AccountContext = v
	return s
}

type QueryCloudRecordVideoHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryCloudRecordVideoHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoHeadersAccountContext) SetAccountId(v string) *QueryCloudRecordVideoHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryCloudRecordVideoShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryCloudRecordVideoShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryCloudRecordVideoShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryCloudRecordVideoShrinkHeaders) SetAccountContextShrink(v string) *QueryCloudRecordVideoShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryCloudRecordVideoRequest struct {
	TenantContext *QueryCloudRecordVideoRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryCloudRecordVideoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoRequest) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoRequest) SetTenantContext(v *QueryCloudRecordVideoRequestTenantContext) *QueryCloudRecordVideoRequest {
	s.TenantContext = v
	return s
}

func (s *QueryCloudRecordVideoRequest) SetConferenceId(v string) *QueryCloudRecordVideoRequest {
	s.ConferenceId = &v
	return s
}

type QueryCloudRecordVideoRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryCloudRecordVideoRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoRequestTenantContext) SetTenantId(v string) *QueryCloudRecordVideoRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryCloudRecordVideoShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryCloudRecordVideoShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoShrinkRequest) SetTenantContextShrink(v string) *QueryCloudRecordVideoShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryCloudRecordVideoShrinkRequest) SetConferenceId(v string) *QueryCloudRecordVideoShrinkRequest {
	s.ConferenceId = &v
	return s
}

type QueryCloudRecordVideoResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	VideoList []*QueryCloudRecordVideoResponseBodyVideoList `json:"videoList,omitempty" xml:"videoList,omitempty" type:"Repeated"`
}

func (s QueryCloudRecordVideoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoResponseBody) SetRequestId(v string) *QueryCloudRecordVideoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBody) SetVideoList(v []*QueryCloudRecordVideoResponseBodyVideoList) *QueryCloudRecordVideoResponseBody {
	s.VideoList = v
	return s
}

type QueryCloudRecordVideoResponseBodyVideoList struct {
	// example:
	//
	// 59886
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1631172094000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1127942
	FileSize *int64 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// faa1566c5bc24f21821ae2394f82db2e
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 290882268xxx1172033231
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	// example:
	//
	// 1
	RecordType *int64 `json:"RecordType,omitempty" xml:"RecordType,omitempty"`
	// example:
	//
	// cn-shenzhen
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1631172094000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryCloudRecordVideoResponseBodyVideoList) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoResponseBodyVideoList) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetDuration(v int64) *QueryCloudRecordVideoResponseBodyVideoList {
	s.Duration = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetEndTime(v int64) *QueryCloudRecordVideoResponseBodyVideoList {
	s.EndTime = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetFileSize(v int64) *QueryCloudRecordVideoResponseBodyVideoList {
	s.FileSize = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetMediaId(v string) *QueryCloudRecordVideoResponseBodyVideoList {
	s.MediaId = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetRecordId(v string) *QueryCloudRecordVideoResponseBodyVideoList {
	s.RecordId = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetRecordType(v int64) *QueryCloudRecordVideoResponseBodyVideoList {
	s.RecordType = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetRegionId(v string) *QueryCloudRecordVideoResponseBodyVideoList {
	s.RegionId = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetStartTime(v int64) *QueryCloudRecordVideoResponseBodyVideoList {
	s.StartTime = &v
	return s
}

func (s *QueryCloudRecordVideoResponseBodyVideoList) SetUserId(v string) *QueryCloudRecordVideoResponseBodyVideoList {
	s.UserId = &v
	return s
}

type QueryCloudRecordVideoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCloudRecordVideoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCloudRecordVideoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoResponse) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoResponse) SetHeaders(v map[string]*string) *QueryCloudRecordVideoResponse {
	s.Headers = v
	return s
}

func (s *QueryCloudRecordVideoResponse) SetStatusCode(v int32) *QueryCloudRecordVideoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCloudRecordVideoResponse) SetBody(v *QueryCloudRecordVideoResponseBody) *QueryCloudRecordVideoResponse {
	s.Body = v
	return s
}

type QueryCloudRecordVideoPlayInfoHeaders struct {
	CommonHeaders  map[string]*string                                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryCloudRecordVideoPlayInfoHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryCloudRecordVideoPlayInfoHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoHeaders) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoHeaders) SetCommonHeaders(v map[string]*string) *QueryCloudRecordVideoPlayInfoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoHeaders) SetAccountContext(v *QueryCloudRecordVideoPlayInfoHeadersAccountContext) *QueryCloudRecordVideoPlayInfoHeaders {
	s.AccountContext = v
	return s
}

type QueryCloudRecordVideoPlayInfoHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryCloudRecordVideoPlayInfoHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoHeadersAccountContext) SetAccountId(v string) *QueryCloudRecordVideoPlayInfoHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryCloudRecordVideoPlayInfoShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryCloudRecordVideoPlayInfoShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryCloudRecordVideoPlayInfoShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoShrinkHeaders) SetAccountContextShrink(v string) *QueryCloudRecordVideoPlayInfoShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryCloudRecordVideoPlayInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6139b4xxx
	ConferenceId *string `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 44444444
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen
	RegionId      *string                                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TenantContext *QueryCloudRecordVideoPlayInfoRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryCloudRecordVideoPlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoRequest) SetConferenceId(v string) *QueryCloudRecordVideoPlayInfoRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoRequest) SetMediaId(v string) *QueryCloudRecordVideoPlayInfoRequest {
	s.MediaId = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoRequest) SetRegionId(v string) *QueryCloudRecordVideoPlayInfoRequest {
	s.RegionId = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoRequest) SetTenantContext(v *QueryCloudRecordVideoPlayInfoRequestTenantContext) *QueryCloudRecordVideoPlayInfoRequest {
	s.TenantContext = v
	return s
}

type QueryCloudRecordVideoPlayInfoRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryCloudRecordVideoPlayInfoRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoRequestTenantContext) SetTenantId(v string) *QueryCloudRecordVideoPlayInfoRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryCloudRecordVideoPlayInfoShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 6139b4xxx
	ConferenceId *string `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 44444444
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-shenzhen
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryCloudRecordVideoPlayInfoShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoShrinkRequest) SetConferenceId(v string) *QueryCloudRecordVideoPlayInfoShrinkRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoShrinkRequest) SetMediaId(v string) *QueryCloudRecordVideoPlayInfoShrinkRequest {
	s.MediaId = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoShrinkRequest) SetRegionId(v string) *QueryCloudRecordVideoPlayInfoShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoShrinkRequest) SetTenantContextShrink(v string) *QueryCloudRecordVideoPlayInfoShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryCloudRecordVideoPlayInfoResponseBody struct {
	// example:
	//
	// 59886
	Duration *int64 `json:"duration,omitempty" xml:"duration,omitempty"`
	// example:
	//
	// 1127942
	FileSize *int64 `json:"fileSize,omitempty" xml:"fileSize,omitempty"`
	// example:
	//
	// https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-b8531e0d534b2f9747a9fdfxxxxxxxxc-sd.mp4
	Mp4FileUrl *string `json:"mp4FileUrl,omitempty" xml:"mp4FileUrl,omitempty"`
	// example:
	//
	// https://vod.mcs.dingtalk.com/faa1566c5bc24f21821ae2394f82db2e/8bbd1612e686462ab4717919f67bb721-ab85cc044a163568c9485xxxxxxxx76d-sd.m3u8
	PlayUrl *string `json:"playUrl,omitempty" xml:"playUrl,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 1
	Status *int64 `json:"status,omitempty" xml:"status,omitempty"`
}

func (s QueryCloudRecordVideoPlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoResponseBody) SetDuration(v int64) *QueryCloudRecordVideoPlayInfoResponseBody {
	s.Duration = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoResponseBody) SetFileSize(v int64) *QueryCloudRecordVideoPlayInfoResponseBody {
	s.FileSize = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoResponseBody) SetMp4FileUrl(v string) *QueryCloudRecordVideoPlayInfoResponseBody {
	s.Mp4FileUrl = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoResponseBody) SetPlayUrl(v string) *QueryCloudRecordVideoPlayInfoResponseBody {
	s.PlayUrl = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoResponseBody) SetRequestId(v string) *QueryCloudRecordVideoPlayInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoResponseBody) SetStatus(v int64) *QueryCloudRecordVideoPlayInfoResponseBody {
	s.Status = &v
	return s
}

type QueryCloudRecordVideoPlayInfoResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryCloudRecordVideoPlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryCloudRecordVideoPlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCloudRecordVideoPlayInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryCloudRecordVideoPlayInfoResponse) SetHeaders(v map[string]*string) *QueryCloudRecordVideoPlayInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoResponse) SetStatusCode(v int32) *QueryCloudRecordVideoPlayInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCloudRecordVideoPlayInfoResponse) SetBody(v *QueryCloudRecordVideoPlayInfoResponseBody) *QueryCloudRecordVideoPlayInfoResponse {
	s.Body = v
	return s
}

type QueryConferenceInfoHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryConferenceInfoHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryConferenceInfoHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceInfoHeaders) GoString() string {
	return s.String()
}

func (s *QueryConferenceInfoHeaders) SetCommonHeaders(v map[string]*string) *QueryConferenceInfoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryConferenceInfoHeaders) SetAccountContext(v *QueryConferenceInfoHeadersAccountContext) *QueryConferenceInfoHeaders {
	s.AccountContext = v
	return s
}

type QueryConferenceInfoHeadersAccountContext struct {
	// example:
	//
	// 208579
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryConferenceInfoHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceInfoHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryConferenceInfoHeadersAccountContext) SetAccountId(v string) *QueryConferenceInfoHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryConferenceInfoShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryConferenceInfoShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceInfoShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryConferenceInfoShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryConferenceInfoShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryConferenceInfoShrinkHeaders) SetAccountContextShrink(v string) *QueryConferenceInfoShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryConferenceInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryConferenceInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryConferenceInfoRequest) SetConferenceId(v string) *QueryConferenceInfoRequest {
	s.ConferenceId = &v
	return s
}

type QueryConferenceInfoResponseBody struct {
	ConfInfo *QueryConferenceInfoResponseBodyConfInfo `json:"confInfo,omitempty" xml:"confInfo,omitempty" type:"Struct"`
	// requestId
	//
	// example:
	//
	// 4248DCC9-785F-5A14-8BE0-830FD52E1261
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s QueryConferenceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryConferenceInfoResponseBody) SetConfInfo(v *QueryConferenceInfoResponseBodyConfInfo) *QueryConferenceInfoResponseBody {
	s.ConfInfo = v
	return s
}

func (s *QueryConferenceInfoResponseBody) SetRequestId(v string) *QueryConferenceInfoResponseBody {
	s.RequestId = &v
	return s
}

type QueryConferenceInfoResponseBodyConfInfo struct {
	// example:
	//
	// 2
	ActiveNum *int32 `json:"ActiveNum,omitempty" xml:"ActiveNum,omitempty"`
	// example:
	//
	// 2
	AttendNum *int32 `json:"AttendNum,omitempty" xml:"AttendNum,omitempty"`
	// example:
	//
	// 1000000
	ConfDuration *int64 `json:"ConfDuration,omitempty" xml:"ConfDuration,omitempty"`
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId *string `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	// example:
	//
	// 208579
	CreatorId   *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	CreatorNick *string `json:"CreatorNick,omitempty" xml:"CreatorNick,omitempty"`
	// example:
	//
	// 1663294270000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// https://meeting.dingtalk.com/app?roomCode=42726xxx&token=1_7ac9xxx
	ExternalLinkUrl *string `json:"ExternalLinkUrl,omitempty" xml:"ExternalLinkUrl,omitempty"`
	// example:
	//
	// 2
	InvitedNum *int32 `json:"InvitedNum,omitempty" xml:"InvitedNum,omitempty"`
	// example:
	//
	// 4272xxxxx
	RoomCode *string `json:"RoomCode,omitempty" xml:"RoomCode,omitempty"`
	// example:
	//
	// 1663293270000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 0
	Status *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s QueryConferenceInfoResponseBodyConfInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceInfoResponseBodyConfInfo) GoString() string {
	return s.String()
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetActiveNum(v int32) *QueryConferenceInfoResponseBodyConfInfo {
	s.ActiveNum = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetAttendNum(v int32) *QueryConferenceInfoResponseBodyConfInfo {
	s.AttendNum = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetConfDuration(v int64) *QueryConferenceInfoResponseBodyConfInfo {
	s.ConfDuration = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetConferenceId(v string) *QueryConferenceInfoResponseBodyConfInfo {
	s.ConferenceId = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetCreatorId(v string) *QueryConferenceInfoResponseBodyConfInfo {
	s.CreatorId = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetCreatorNick(v string) *QueryConferenceInfoResponseBodyConfInfo {
	s.CreatorNick = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetEndTime(v int64) *QueryConferenceInfoResponseBodyConfInfo {
	s.EndTime = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetExternalLinkUrl(v string) *QueryConferenceInfoResponseBodyConfInfo {
	s.ExternalLinkUrl = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetInvitedNum(v int32) *QueryConferenceInfoResponseBodyConfInfo {
	s.InvitedNum = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetRoomCode(v string) *QueryConferenceInfoResponseBodyConfInfo {
	s.RoomCode = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetStartTime(v int64) *QueryConferenceInfoResponseBodyConfInfo {
	s.StartTime = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetStatus(v int32) *QueryConferenceInfoResponseBodyConfInfo {
	s.Status = &v
	return s
}

func (s *QueryConferenceInfoResponseBodyConfInfo) SetTitle(v string) *QueryConferenceInfoResponseBodyConfInfo {
	s.Title = &v
	return s
}

type QueryConferenceInfoResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryConferenceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryConferenceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryConferenceInfoResponse) SetHeaders(v map[string]*string) *QueryConferenceInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryConferenceInfoResponse) SetStatusCode(v int32) *QueryConferenceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryConferenceInfoResponse) SetBody(v *QueryConferenceInfoResponseBody) *QueryConferenceInfoResponse {
	s.Body = v
	return s
}

type QueryConferenceMembersHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryConferenceMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryConferenceMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersHeaders) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersHeaders) SetCommonHeaders(v map[string]*string) *QueryConferenceMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryConferenceMembersHeaders) SetAccountContext(v *QueryConferenceMembersHeadersAccountContext) *QueryConferenceMembersHeaders {
	s.AccountContext = v
	return s
}

type QueryConferenceMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryConferenceMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersHeadersAccountContext) SetAccountId(v string) *QueryConferenceMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryConferenceMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryConferenceMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryConferenceMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryConferenceMembersShrinkHeaders) SetAccountContextShrink(v string) *QueryConferenceMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryConferenceMembersRequest struct {
	// example:
	//
	// 300
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 123000000
	NextToken     *string                                     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TenantContext *QueryConferenceMembersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryConferenceMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersRequest) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersRequest) SetMaxResults(v int32) *QueryConferenceMembersRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryConferenceMembersRequest) SetNextToken(v string) *QueryConferenceMembersRequest {
	s.NextToken = &v
	return s
}

func (s *QueryConferenceMembersRequest) SetTenantContext(v *QueryConferenceMembersRequestTenantContext) *QueryConferenceMembersRequest {
	s.TenantContext = v
	return s
}

func (s *QueryConferenceMembersRequest) SetConferenceId(v string) *QueryConferenceMembersRequest {
	s.ConferenceId = &v
	return s
}

type QueryConferenceMembersRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryConferenceMembersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersRequestTenantContext) SetTenantId(v string) *QueryConferenceMembersRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryConferenceMembersShrinkRequest struct {
	// example:
	//
	// 300
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 123000000
	NextToken           *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryConferenceMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersShrinkRequest) SetMaxResults(v int32) *QueryConferenceMembersShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryConferenceMembersShrinkRequest) SetNextToken(v string) *QueryConferenceMembersShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *QueryConferenceMembersShrinkRequest) SetTenantContextShrink(v string) *QueryConferenceMembersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryConferenceMembersShrinkRequest) SetConferenceId(v string) *QueryConferenceMembersShrinkRequest {
	s.ConferenceId = &v
	return s
}

type QueryConferenceMembersResponseBody struct {
	MemberModels []*QueryConferenceMembersResponseBodyMemberModels `json:"memberModels,omitempty" xml:"memberModels,omitempty" type:"Repeated"`
	// example:
	//
	// 123000000
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
}

func (s QueryConferenceMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersResponseBody) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersResponseBody) SetMemberModels(v []*QueryConferenceMembersResponseBodyMemberModels) *QueryConferenceMembersResponseBody {
	s.MemberModels = v
	return s
}

func (s *QueryConferenceMembersResponseBody) SetNextToken(v string) *QueryConferenceMembersResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryConferenceMembersResponseBody) SetRequestId(v string) *QueryConferenceMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryConferenceMembersResponseBody) SetTotalCount(v int32) *QueryConferenceMembersResponseBody {
	s.TotalCount = &v
	return s
}

type QueryConferenceMembersResponseBodyMemberModels struct {
	// example:
	//
	// 6
	AttendStatus *int32 `json:"AttendStatus,omitempty" xml:"AttendStatus,omitempty"`
	// example:
	//
	// false
	CoHost *bool `json:"CoHost,omitempty" xml:"CoHost,omitempty"`
	// example:
	//
	// 6323dxxxxx
	ConferenceId *string `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	// example:
	//
	// 10000
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// false
	Host *bool `json:"Host,omitempty" xml:"Host,omitempty"`
	// example:
	//
	// 1663293270000
	JoinTime *int64 `json:"JoinTime,omitempty" xml:"JoinTime,omitempty"`
	// example:
	//
	// 1663293280000
	LeaveTime *int64 `json:"LeaveTime,omitempty" xml:"LeaveTime,omitempty"`
	// example:
	//
	// true
	OuterOrgMember *bool `json:"OuterOrgMember,omitempty" xml:"OuterOrgMember,omitempty"`
	// example:
	//
	// false
	PstnJoin *bool `json:"PstnJoin,omitempty" xml:"PstnJoin,omitempty"`
	// example:
	//
	// -12345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// 小钉
	UserNick *string `json:"UserNick,omitempty" xml:"UserNick,omitempty"`
}

func (s QueryConferenceMembersResponseBodyMemberModels) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersResponseBodyMemberModels) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetAttendStatus(v int32) *QueryConferenceMembersResponseBodyMemberModels {
	s.AttendStatus = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetCoHost(v bool) *QueryConferenceMembersResponseBodyMemberModels {
	s.CoHost = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetConferenceId(v string) *QueryConferenceMembersResponseBodyMemberModels {
	s.ConferenceId = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetDuration(v int64) *QueryConferenceMembersResponseBodyMemberModels {
	s.Duration = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetHost(v bool) *QueryConferenceMembersResponseBodyMemberModels {
	s.Host = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetJoinTime(v int64) *QueryConferenceMembersResponseBodyMemberModels {
	s.JoinTime = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetLeaveTime(v int64) *QueryConferenceMembersResponseBodyMemberModels {
	s.LeaveTime = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetOuterOrgMember(v bool) *QueryConferenceMembersResponseBodyMemberModels {
	s.OuterOrgMember = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetPstnJoin(v bool) *QueryConferenceMembersResponseBodyMemberModels {
	s.PstnJoin = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetUserId(v string) *QueryConferenceMembersResponseBodyMemberModels {
	s.UserId = &v
	return s
}

func (s *QueryConferenceMembersResponseBodyMemberModels) SetUserNick(v string) *QueryConferenceMembersResponseBodyMemberModels {
	s.UserNick = &v
	return s
}

type QueryConferenceMembersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryConferenceMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryConferenceMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConferenceMembersResponse) GoString() string {
	return s.String()
}

func (s *QueryConferenceMembersResponse) SetHeaders(v map[string]*string) *QueryConferenceMembersResponse {
	s.Headers = v
	return s
}

func (s *QueryConferenceMembersResponse) SetStatusCode(v int32) *QueryConferenceMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryConferenceMembersResponse) SetBody(v *QueryConferenceMembersResponseBody) *QueryConferenceMembersResponse {
	s.Body = v
	return s
}

type QueryDentryHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryDentryHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryDentryHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryHeaders) GoString() string {
	return s.String()
}

func (s *QueryDentryHeaders) SetCommonHeaders(v map[string]*string) *QueryDentryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryDentryHeaders) SetAccountContext(v *QueryDentryHeadersAccountContext) *QueryDentryHeaders {
	s.AccountContext = v
	return s
}

type QueryDentryHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryDentryHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryDentryHeadersAccountContext) SetAccountId(v string) *QueryDentryHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryDentryShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryDentryShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryDentryShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryDentryShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryDentryShrinkHeaders) SetAccountContextShrink(v string) *QueryDentryShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryDentryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx
	DentryId *string `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	// example:
	//
	// true
	IncludeSpace *bool `json:"IncludeSpace,omitempty" xml:"IncludeSpace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// space-fxhb96vuddz8htqt
	SpaceId       *string                          `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContext *QueryDentryRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryDentryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryRequest) GoString() string {
	return s.String()
}

func (s *QueryDentryRequest) SetDentryId(v string) *QueryDentryRequest {
	s.DentryId = &v
	return s
}

func (s *QueryDentryRequest) SetIncludeSpace(v bool) *QueryDentryRequest {
	s.IncludeSpace = &v
	return s
}

func (s *QueryDentryRequest) SetSpaceId(v string) *QueryDentryRequest {
	s.SpaceId = &v
	return s
}

func (s *QueryDentryRequest) SetTenantContext(v *QueryDentryRequestTenantContext) *QueryDentryRequest {
	s.TenantContext = v
	return s
}

type QueryDentryRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryDentryRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryDentryRequestTenantContext) SetTenantId(v string) *QueryDentryRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryDentryShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// xxx
	DentryId *string `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	// example:
	//
	// true
	IncludeSpace *bool `json:"IncludeSpace,omitempty" xml:"IncludeSpace,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// space-fxhb96vuddz8htqt
	SpaceId             *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryDentryShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryDentryShrinkRequest) SetDentryId(v string) *QueryDentryShrinkRequest {
	s.DentryId = &v
	return s
}

func (s *QueryDentryShrinkRequest) SetIncludeSpace(v bool) *QueryDentryShrinkRequest {
	s.IncludeSpace = &v
	return s
}

func (s *QueryDentryShrinkRequest) SetSpaceId(v string) *QueryDentryShrinkRequest {
	s.SpaceId = &v
	return s
}

func (s *QueryDentryShrinkRequest) SetTenantContextShrink(v string) *QueryDentryShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryDentryResponseBody struct {
	// example:
	//
	// alidoc
	ContentType *string `json:"contentType,omitempty" xml:"contentType,omitempty"`
	// example:
	//
	// 12345678
	CreatedTime *int64                          `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	Creator     *QueryDentryResponseBodyCreator `json:"creator,omitempty" xml:"creator,omitempty" type:"Struct"`
	// example:
	//
	// abc
	DentryId *string `json:"dentryId,omitempty" xml:"dentryId,omitempty"`
	// example:
	//
	// file
	DentryType *string `json:"dentryType,omitempty" xml:"dentryType,omitempty"`
	// example:
	//
	// cdefg
	DentryUuid *string `json:"dentryUuid,omitempty" xml:"dentryUuid,omitempty"`
	// example:
	//
	// aabbcc
	DocKey *string `json:"docKey,omitempty" xml:"docKey,omitempty"`
	// example:
	//
	// alidoc
	Extension *string `json:"extension,omitempty" xml:"extension,omitempty"`
	// example:
	//
	// false
	HasChildren    *bool                                  `json:"hasChildren,omitempty" xml:"hasChildren,omitempty"`
	LinkSourceInfo *QueryDentryResponseBodyLinkSourceInfo `json:"linkSourceInfo,omitempty" xml:"linkSourceInfo,omitempty" type:"Struct"`
	// example:
	//
	// hello
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// example:
	//
	// 测试组织/测试知识库/abc
	Path *string `json:"path,omitempty" xml:"path,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                       `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Space     *QueryDentryResponseBodySpace `json:"space,omitempty" xml:"space,omitempty" type:"Struct"`
	// example:
	//
	// bcd
	SpaceId *string `json:"spaceId,omitempty" xml:"spaceId,omitempty"`
	// example:
	//
	// 12345678
	UpdatedTime *int64                          `json:"updatedTime,omitempty" xml:"updatedTime,omitempty"`
	Updater     *QueryDentryResponseBodyUpdater `json:"updater,omitempty" xml:"updater,omitempty" type:"Struct"`
	// example:
	//
	// https://xxx.yy
	Url         *string                             `json:"url,omitempty" xml:"url,omitempty"`
	VisitorInfo *QueryDentryResponseBodyVisitorInfo `json:"visitorInfo,omitempty" xml:"visitorInfo,omitempty" type:"Struct"`
}

func (s QueryDentryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBody) SetContentType(v string) *QueryDentryResponseBody {
	s.ContentType = &v
	return s
}

func (s *QueryDentryResponseBody) SetCreatedTime(v int64) *QueryDentryResponseBody {
	s.CreatedTime = &v
	return s
}

func (s *QueryDentryResponseBody) SetCreator(v *QueryDentryResponseBodyCreator) *QueryDentryResponseBody {
	s.Creator = v
	return s
}

func (s *QueryDentryResponseBody) SetDentryId(v string) *QueryDentryResponseBody {
	s.DentryId = &v
	return s
}

func (s *QueryDentryResponseBody) SetDentryType(v string) *QueryDentryResponseBody {
	s.DentryType = &v
	return s
}

func (s *QueryDentryResponseBody) SetDentryUuid(v string) *QueryDentryResponseBody {
	s.DentryUuid = &v
	return s
}

func (s *QueryDentryResponseBody) SetDocKey(v string) *QueryDentryResponseBody {
	s.DocKey = &v
	return s
}

func (s *QueryDentryResponseBody) SetExtension(v string) *QueryDentryResponseBody {
	s.Extension = &v
	return s
}

func (s *QueryDentryResponseBody) SetHasChildren(v bool) *QueryDentryResponseBody {
	s.HasChildren = &v
	return s
}

func (s *QueryDentryResponseBody) SetLinkSourceInfo(v *QueryDentryResponseBodyLinkSourceInfo) *QueryDentryResponseBody {
	s.LinkSourceInfo = v
	return s
}

func (s *QueryDentryResponseBody) SetName(v string) *QueryDentryResponseBody {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBody) SetPath(v string) *QueryDentryResponseBody {
	s.Path = &v
	return s
}

func (s *QueryDentryResponseBody) SetRequestId(v string) *QueryDentryResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryDentryResponseBody) SetSpace(v *QueryDentryResponseBodySpace) *QueryDentryResponseBody {
	s.Space = v
	return s
}

func (s *QueryDentryResponseBody) SetSpaceId(v string) *QueryDentryResponseBody {
	s.SpaceId = &v
	return s
}

func (s *QueryDentryResponseBody) SetUpdatedTime(v int64) *QueryDentryResponseBody {
	s.UpdatedTime = &v
	return s
}

func (s *QueryDentryResponseBody) SetUpdater(v *QueryDentryResponseBodyUpdater) *QueryDentryResponseBody {
	s.Updater = v
	return s
}

func (s *QueryDentryResponseBody) SetUrl(v string) *QueryDentryResponseBody {
	s.Url = &v
	return s
}

func (s *QueryDentryResponseBody) SetVisitorInfo(v *QueryDentryResponseBodyVisitorInfo) *QueryDentryResponseBody {
	s.VisitorInfo = v
	return s
}

type QueryDentryResponseBodyCreator struct {
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryDentryResponseBodyCreator) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodyCreator) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodyCreator) SetName(v string) *QueryDentryResponseBodyCreator {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBodyCreator) SetUserId(v string) *QueryDentryResponseBodyCreator {
	s.UserId = &v
	return s
}

type QueryDentryResponseBodyLinkSourceInfo struct {
	// example:
	//
	// docx
	Extension *string                                       `json:"Extension,omitempty" xml:"Extension,omitempty"`
	IconUrl   *QueryDentryResponseBodyLinkSourceInfoIconUrl `json:"IconUrl,omitempty" xml:"IconUrl,omitempty" type:"Struct"`
	// example:
	//
	// def
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 0
	LinkType *int64 `json:"LinkType,omitempty" xml:"LinkType,omitempty"`
	// example:
	//
	// def
	SpaceId *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
}

func (s QueryDentryResponseBodyLinkSourceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodyLinkSourceInfo) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodyLinkSourceInfo) SetExtension(v string) *QueryDentryResponseBodyLinkSourceInfo {
	s.Extension = &v
	return s
}

func (s *QueryDentryResponseBodyLinkSourceInfo) SetIconUrl(v *QueryDentryResponseBodyLinkSourceInfoIconUrl) *QueryDentryResponseBodyLinkSourceInfo {
	s.IconUrl = v
	return s
}

func (s *QueryDentryResponseBodyLinkSourceInfo) SetId(v string) *QueryDentryResponseBodyLinkSourceInfo {
	s.Id = &v
	return s
}

func (s *QueryDentryResponseBodyLinkSourceInfo) SetLinkType(v int64) *QueryDentryResponseBodyLinkSourceInfo {
	s.LinkType = &v
	return s
}

func (s *QueryDentryResponseBodyLinkSourceInfo) SetSpaceId(v string) *QueryDentryResponseBodyLinkSourceInfo {
	s.SpaceId = &v
	return s
}

type QueryDentryResponseBodyLinkSourceInfoIconUrl struct {
	// example:
	//
	// gh
	Line *string `json:"Line,omitempty" xml:"Line,omitempty"`
	// example:
	//
	// def
	Small *string `json:"Small,omitempty" xml:"Small,omitempty"`
}

func (s QueryDentryResponseBodyLinkSourceInfoIconUrl) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodyLinkSourceInfoIconUrl) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodyLinkSourceInfoIconUrl) SetLine(v string) *QueryDentryResponseBodyLinkSourceInfoIconUrl {
	s.Line = &v
	return s
}

func (s *QueryDentryResponseBodyLinkSourceInfoIconUrl) SetSmall(v string) *QueryDentryResponseBodyLinkSourceInfoIconUrl {
	s.Small = &v
	return s
}

type QueryDentryResponseBodySpace struct {
	// example:
	//
	// https://img.alicdn.com/imgextra/i1/O1xxxxx.png
	Cover *string `json:"Cover,omitempty" xml:"Cover,omitempty"`
	// example:
	//
	// 这是简介
	Description *string                               `json:"Description,omitempty" xml:"Description,omitempty"`
	HdIconVO    *QueryDentryResponseBodySpaceHdIconVO `json:"HdIconVO,omitempty" xml:"HdIconVO,omitempty" type:"Struct"`
	IconVO      *QueryDentryResponseBodySpaceIconVO   `json:"IconVO,omitempty" xml:"IconVO,omitempty" type:"Struct"`
	// example:
	//
	// n9XJxxxxx
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 测试知识库
	Owner      *QueryDentryResponseBodySpaceOwner        `json:"Owner,omitempty" xml:"Owner,omitempty" type:"Struct"`
	RecentList []*QueryDentryResponseBodySpaceRecentList `json:"RecentList,omitempty" xml:"RecentList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://alidocs.dingtalk.com/i/spaces/n9XJ*******Xy/overview
	Url         *string                                  `json:"Url,omitempty" xml:"Url,omitempty"`
	VisitorInfo *QueryDentryResponseBodySpaceVisitorInfo `json:"VisitorInfo,omitempty" xml:"VisitorInfo,omitempty" type:"Struct"`
}

func (s QueryDentryResponseBodySpace) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpace) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpace) SetCover(v string) *QueryDentryResponseBodySpace {
	s.Cover = &v
	return s
}

func (s *QueryDentryResponseBodySpace) SetDescription(v string) *QueryDentryResponseBodySpace {
	s.Description = &v
	return s
}

func (s *QueryDentryResponseBodySpace) SetHdIconVO(v *QueryDentryResponseBodySpaceHdIconVO) *QueryDentryResponseBodySpace {
	s.HdIconVO = v
	return s
}

func (s *QueryDentryResponseBodySpace) SetIconVO(v *QueryDentryResponseBodySpaceIconVO) *QueryDentryResponseBodySpace {
	s.IconVO = v
	return s
}

func (s *QueryDentryResponseBodySpace) SetId(v string) *QueryDentryResponseBodySpace {
	s.Id = &v
	return s
}

func (s *QueryDentryResponseBodySpace) SetName(v string) *QueryDentryResponseBodySpace {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBodySpace) SetOwner(v *QueryDentryResponseBodySpaceOwner) *QueryDentryResponseBodySpace {
	s.Owner = v
	return s
}

func (s *QueryDentryResponseBodySpace) SetRecentList(v []*QueryDentryResponseBodySpaceRecentList) *QueryDentryResponseBodySpace {
	s.RecentList = v
	return s
}

func (s *QueryDentryResponseBodySpace) SetType(v int32) *QueryDentryResponseBodySpace {
	s.Type = &v
	return s
}

func (s *QueryDentryResponseBodySpace) SetUrl(v string) *QueryDentryResponseBodySpace {
	s.Url = &v
	return s
}

func (s *QueryDentryResponseBodySpace) SetVisitorInfo(v *QueryDentryResponseBodySpaceVisitorInfo) *QueryDentryResponseBodySpace {
	s.VisitorInfo = v
	return s
}

type QueryDentryResponseBodySpaceHdIconVO struct {
	// example:
	//
	// http://
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// type
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryDentryResponseBodySpaceHdIconVO) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceHdIconVO) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceHdIconVO) SetIcon(v string) *QueryDentryResponseBodySpaceHdIconVO {
	s.Icon = &v
	return s
}

func (s *QueryDentryResponseBodySpaceHdIconVO) SetType(v string) *QueryDentryResponseBodySpaceHdIconVO {
	s.Type = &v
	return s
}

type QueryDentryResponseBodySpaceIconVO struct {
	// example:
	//
	// http://
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// type
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryDentryResponseBodySpaceIconVO) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceIconVO) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceIconVO) SetIcon(v string) *QueryDentryResponseBodySpaceIconVO {
	s.Icon = &v
	return s
}

func (s *QueryDentryResponseBodySpaceIconVO) SetType(v string) *QueryDentryResponseBodySpaceIconVO {
	s.Type = &v
	return s
}

type QueryDentryResponseBodySpaceOwner struct {
	// example:
	//
	// 小钉
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryDentryResponseBodySpaceOwner) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceOwner) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceOwner) SetName(v string) *QueryDentryResponseBodySpaceOwner {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBodySpaceOwner) SetUserId(v string) *QueryDentryResponseBodySpaceOwner {
	s.UserId = &v
	return s
}

type QueryDentryResponseBodySpaceRecentList struct {
	// example:
	//
	// alidoc
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// example:
	//
	// 12345678
	CreatedTime *int64                                         `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	Creator     *QueryDentryResponseBodySpaceRecentListCreator `json:"Creator,omitempty" xml:"Creator,omitempty" type:"Struct"`
	// example:
	//
	// abc
	DentryId *string `json:"DentryId,omitempty" xml:"DentryId,omitempty"`
	// example:
	//
	// file
	DentryType *string `json:"DentryType,omitempty" xml:"DentryType,omitempty"`
	// example:
	//
	// cdefg
	DentryUuid *string `json:"DentryUuid,omitempty" xml:"DentryUuid,omitempty"`
	// example:
	//
	// aabbcc
	DocKey *string `json:"DocKey,omitempty" xml:"DocKey,omitempty"`
	// example:
	//
	// alidoc
	Extension *string `json:"Extension,omitempty" xml:"Extension,omitempty"`
	// example:
	//
	// false
	HasChildren    *bool                                                 `json:"HasChildren,omitempty" xml:"HasChildren,omitempty"`
	LinkSourceInfo *QueryDentryResponseBodySpaceRecentListLinkSourceInfo `json:"LinkSourceInfo,omitempty" xml:"LinkSourceInfo,omitempty" type:"Struct"`
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 测试组织/测试知识库/abc
	Path  *string     `json:"Path,omitempty" xml:"Path,omitempty"`
	Space interface{} `json:"Space,omitempty" xml:"Space,omitempty"`
	// example:
	//
	// bcd
	SpaceId         *string                                                `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
	StatisticalInfo *QueryDentryResponseBodySpaceRecentListStatisticalInfo `json:"StatisticalInfo,omitempty" xml:"StatisticalInfo,omitempty" type:"Struct"`
	// example:
	//
	// 12345678
	UpdatedTime *int64                                         `json:"UpdatedTime,omitempty" xml:"UpdatedTime,omitempty"`
	Updater     *QueryDentryResponseBodySpaceRecentListUpdater `json:"Updater,omitempty" xml:"Updater,omitempty" type:"Struct"`
	// example:
	//
	// https://xxx.yy
	Url         *string                                            `json:"Url,omitempty" xml:"Url,omitempty"`
	VisitorInfo *QueryDentryResponseBodySpaceRecentListVisitorInfo `json:"VisitorInfo,omitempty" xml:"VisitorInfo,omitempty" type:"Struct"`
}

func (s QueryDentryResponseBodySpaceRecentList) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceRecentList) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceRecentList) SetContentType(v string) *QueryDentryResponseBodySpaceRecentList {
	s.ContentType = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetCreatedTime(v int64) *QueryDentryResponseBodySpaceRecentList {
	s.CreatedTime = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetCreator(v *QueryDentryResponseBodySpaceRecentListCreator) *QueryDentryResponseBodySpaceRecentList {
	s.Creator = v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetDentryId(v string) *QueryDentryResponseBodySpaceRecentList {
	s.DentryId = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetDentryType(v string) *QueryDentryResponseBodySpaceRecentList {
	s.DentryType = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetDentryUuid(v string) *QueryDentryResponseBodySpaceRecentList {
	s.DentryUuid = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetDocKey(v string) *QueryDentryResponseBodySpaceRecentList {
	s.DocKey = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetExtension(v string) *QueryDentryResponseBodySpaceRecentList {
	s.Extension = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetHasChildren(v bool) *QueryDentryResponseBodySpaceRecentList {
	s.HasChildren = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetLinkSourceInfo(v *QueryDentryResponseBodySpaceRecentListLinkSourceInfo) *QueryDentryResponseBodySpaceRecentList {
	s.LinkSourceInfo = v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetName(v string) *QueryDentryResponseBodySpaceRecentList {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetPath(v string) *QueryDentryResponseBodySpaceRecentList {
	s.Path = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetSpace(v interface{}) *QueryDentryResponseBodySpaceRecentList {
	s.Space = v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetSpaceId(v string) *QueryDentryResponseBodySpaceRecentList {
	s.SpaceId = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetStatisticalInfo(v *QueryDentryResponseBodySpaceRecentListStatisticalInfo) *QueryDentryResponseBodySpaceRecentList {
	s.StatisticalInfo = v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetUpdatedTime(v int64) *QueryDentryResponseBodySpaceRecentList {
	s.UpdatedTime = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetUpdater(v *QueryDentryResponseBodySpaceRecentListUpdater) *QueryDentryResponseBodySpaceRecentList {
	s.Updater = v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetUrl(v string) *QueryDentryResponseBodySpaceRecentList {
	s.Url = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentList) SetVisitorInfo(v *QueryDentryResponseBodySpaceRecentListVisitorInfo) *QueryDentryResponseBodySpaceRecentList {
	s.VisitorInfo = v
	return s
}

type QueryDentryResponseBodySpaceRecentListCreator struct {
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryDentryResponseBodySpaceRecentListCreator) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceRecentListCreator) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceRecentListCreator) SetName(v string) *QueryDentryResponseBodySpaceRecentListCreator {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListCreator) SetUserId(v string) *QueryDentryResponseBodySpaceRecentListCreator {
	s.UserId = &v
	return s
}

type QueryDentryResponseBodySpaceRecentListLinkSourceInfo struct {
	// example:
	//
	// docx
	Extension *string                                                      `json:"Extension,omitempty" xml:"Extension,omitempty"`
	IconUrl   *QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl `json:"IconUrl,omitempty" xml:"IconUrl,omitempty" type:"Struct"`
	// example:
	//
	// def
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 0
	LinkType *int64 `json:"LinkType,omitempty" xml:"LinkType,omitempty"`
	// example:
	//
	// def
	SpaceId *string `json:"SpaceId,omitempty" xml:"SpaceId,omitempty"`
}

func (s QueryDentryResponseBodySpaceRecentListLinkSourceInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceRecentListLinkSourceInfo) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceRecentListLinkSourceInfo) SetExtension(v string) *QueryDentryResponseBodySpaceRecentListLinkSourceInfo {
	s.Extension = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListLinkSourceInfo) SetIconUrl(v *QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl) *QueryDentryResponseBodySpaceRecentListLinkSourceInfo {
	s.IconUrl = v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListLinkSourceInfo) SetId(v string) *QueryDentryResponseBodySpaceRecentListLinkSourceInfo {
	s.Id = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListLinkSourceInfo) SetLinkType(v int64) *QueryDentryResponseBodySpaceRecentListLinkSourceInfo {
	s.LinkType = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListLinkSourceInfo) SetSpaceId(v string) *QueryDentryResponseBodySpaceRecentListLinkSourceInfo {
	s.SpaceId = &v
	return s
}

type QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl struct {
	// example:
	//
	// gh
	Line *string `json:"Line,omitempty" xml:"Line,omitempty"`
	// example:
	//
	// def
	Small *string `json:"Small,omitempty" xml:"Small,omitempty"`
}

func (s QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl) SetLine(v string) *QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl {
	s.Line = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl) SetSmall(v string) *QueryDentryResponseBodySpaceRecentListLinkSourceInfoIconUrl {
	s.Small = &v
	return s
}

type QueryDentryResponseBodySpaceRecentListStatisticalInfo struct {
	WordCount *int64 `json:"WordCount,omitempty" xml:"WordCount,omitempty"`
}

func (s QueryDentryResponseBodySpaceRecentListStatisticalInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceRecentListStatisticalInfo) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceRecentListStatisticalInfo) SetWordCount(v int64) *QueryDentryResponseBodySpaceRecentListStatisticalInfo {
	s.WordCount = &v
	return s
}

type QueryDentryResponseBodySpaceRecentListUpdater struct {
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryDentryResponseBodySpaceRecentListUpdater) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceRecentListUpdater) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceRecentListUpdater) SetName(v string) *QueryDentryResponseBodySpaceRecentListUpdater {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListUpdater) SetUserId(v string) *QueryDentryResponseBodySpaceRecentListUpdater {
	s.UserId = &v
	return s
}

type QueryDentryResponseBodySpaceRecentListVisitorInfo struct {
	DentryActions []*string `json:"DentryActions,omitempty" xml:"DentryActions,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	RoleCode     *string   `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	SpaceActions []*string `json:"SpaceActions,omitempty" xml:"SpaceActions,omitempty" type:"Repeated"`
}

func (s QueryDentryResponseBodySpaceRecentListVisitorInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceRecentListVisitorInfo) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceRecentListVisitorInfo) SetDentryActions(v []*string) *QueryDentryResponseBodySpaceRecentListVisitorInfo {
	s.DentryActions = v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListVisitorInfo) SetRoleCode(v string) *QueryDentryResponseBodySpaceRecentListVisitorInfo {
	s.RoleCode = &v
	return s
}

func (s *QueryDentryResponseBodySpaceRecentListVisitorInfo) SetSpaceActions(v []*string) *QueryDentryResponseBodySpaceRecentListVisitorInfo {
	s.SpaceActions = v
	return s
}

type QueryDentryResponseBodySpaceVisitorInfo struct {
	// example:
	//
	// GET_DENTRY
	DentryActions []*string `json:"DentryActions,omitempty" xml:"DentryActions,omitempty" type:"Repeated"`
	// example:
	//
	// 3
	RoleCode *string `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	// example:
	//
	// GET_SPACE
	SpaceActions []*string `json:"SpaceActions,omitempty" xml:"SpaceActions,omitempty" type:"Repeated"`
}

func (s QueryDentryResponseBodySpaceVisitorInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodySpaceVisitorInfo) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodySpaceVisitorInfo) SetDentryActions(v []*string) *QueryDentryResponseBodySpaceVisitorInfo {
	s.DentryActions = v
	return s
}

func (s *QueryDentryResponseBodySpaceVisitorInfo) SetRoleCode(v string) *QueryDentryResponseBodySpaceVisitorInfo {
	s.RoleCode = &v
	return s
}

func (s *QueryDentryResponseBodySpaceVisitorInfo) SetSpaceActions(v []*string) *QueryDentryResponseBodySpaceVisitorInfo {
	s.SpaceActions = v
	return s
}

type QueryDentryResponseBodyUpdater struct {
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryDentryResponseBodyUpdater) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodyUpdater) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodyUpdater) SetName(v string) *QueryDentryResponseBodyUpdater {
	s.Name = &v
	return s
}

func (s *QueryDentryResponseBodyUpdater) SetUserId(v string) *QueryDentryResponseBodyUpdater {
	s.UserId = &v
	return s
}

type QueryDentryResponseBodyVisitorInfo struct {
	DentryActions []*string `json:"DentryActions,omitempty" xml:"DentryActions,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	RoleCode     *string   `json:"RoleCode,omitempty" xml:"RoleCode,omitempty"`
	SpaceActions []*string `json:"SpaceActions,omitempty" xml:"SpaceActions,omitempty" type:"Repeated"`
}

func (s QueryDentryResponseBodyVisitorInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponseBodyVisitorInfo) GoString() string {
	return s.String()
}

func (s *QueryDentryResponseBodyVisitorInfo) SetDentryActions(v []*string) *QueryDentryResponseBodyVisitorInfo {
	s.DentryActions = v
	return s
}

func (s *QueryDentryResponseBodyVisitorInfo) SetRoleCode(v string) *QueryDentryResponseBodyVisitorInfo {
	s.RoleCode = &v
	return s
}

func (s *QueryDentryResponseBodyVisitorInfo) SetSpaceActions(v []*string) *QueryDentryResponseBodyVisitorInfo {
	s.SpaceActions = v
	return s
}

type QueryDentryResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDentryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDentryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDentryResponse) GoString() string {
	return s.String()
}

func (s *QueryDentryResponse) SetHeaders(v map[string]*string) *QueryDentryResponse {
	s.Headers = v
	return s
}

func (s *QueryDentryResponse) SetStatusCode(v int32) *QueryDentryResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDentryResponse) SetBody(v *QueryDentryResponseBody) *QueryDentryResponse {
	s.Body = v
	return s
}

type QueryLiveInfoHeaders struct {
	CommonHeaders  map[string]*string                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryLiveInfoHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryLiveInfoHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoHeaders) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoHeaders) SetCommonHeaders(v map[string]*string) *QueryLiveInfoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryLiveInfoHeaders) SetAccountContext(v *QueryLiveInfoHeadersAccountContext) *QueryLiveInfoHeaders {
	s.AccountContext = v
	return s
}

type QueryLiveInfoHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryLiveInfoHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoHeadersAccountContext) SetAccountId(v string) *QueryLiveInfoHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryLiveInfoShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryLiveInfoShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryLiveInfoShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryLiveInfoShrinkHeaders) SetAccountContextShrink(v string) *QueryLiveInfoShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryLiveInfoRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId        *string                            `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContext *QueryLiveInfoRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryLiveInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoRequest) SetLiveId(v string) *QueryLiveInfoRequest {
	s.LiveId = &v
	return s
}

func (s *QueryLiveInfoRequest) SetTenantContext(v *QueryLiveInfoRequestTenantContext) *QueryLiveInfoRequest {
	s.TenantContext = v
	return s
}

type QueryLiveInfoRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryLiveInfoRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoRequestTenantContext) SetTenantId(v string) *QueryLiveInfoRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryLiveInfoShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId              *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryLiveInfoShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoShrinkRequest) SetLiveId(v string) *QueryLiveInfoShrinkRequest {
	s.LiveId = &v
	return s
}

func (s *QueryLiveInfoShrinkRequest) SetTenantContextShrink(v string) *QueryLiveInfoShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryLiveInfoResponseBody struct {
	// example:
	//
	// http://xxx/kk.jpg
	CoverUrl *string `json:"coverUrl,omitempty" xml:"coverUrl,omitempty"`
	// example:
	//
	// 59886
	Duration *int64 `json:"duration,omitempty" xml:"duration,omitempty"`
	// example:
	//
	// 1662447951960
	EndTime      *int64  `json:"endTime,omitempty" xml:"endTime,omitempty"`
	Introduction *string `json:"introduction,omitempty" xml:"introduction,omitempty"`
	// example:
	//
	// 1211-3442-122
	LiveId *string `json:"liveId,omitempty" xml:"liveId,omitempty"`
	// example:
	//
	// http://ssssss
	LivePlayUrl *string `json:"livePlayUrl,omitempty" xml:"livePlayUrl,omitempty"`
	LiveStatus  *int32  `json:"liveStatus,omitempty" xml:"liveStatus,omitempty"`
	// example:
	//
	// 13414
	PlaybackDuration *int64 `json:"playbackDuration,omitempty" xml:"playbackDuration,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 1627353123000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// 111
	SubscribeCount *int32  `json:"subscribeCount,omitempty" xml:"subscribeCount,omitempty"`
	Title          *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// 10
	Uv *int32 `json:"uv,omitempty" xml:"uv,omitempty"`
}

func (s QueryLiveInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoResponseBody) SetCoverUrl(v string) *QueryLiveInfoResponseBody {
	s.CoverUrl = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetDuration(v int64) *QueryLiveInfoResponseBody {
	s.Duration = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetEndTime(v int64) *QueryLiveInfoResponseBody {
	s.EndTime = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetIntroduction(v string) *QueryLiveInfoResponseBody {
	s.Introduction = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetLiveId(v string) *QueryLiveInfoResponseBody {
	s.LiveId = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetLivePlayUrl(v string) *QueryLiveInfoResponseBody {
	s.LivePlayUrl = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetLiveStatus(v int32) *QueryLiveInfoResponseBody {
	s.LiveStatus = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetPlaybackDuration(v int64) *QueryLiveInfoResponseBody {
	s.PlaybackDuration = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetRequestId(v string) *QueryLiveInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetStartTime(v int64) *QueryLiveInfoResponseBody {
	s.StartTime = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetSubscribeCount(v int32) *QueryLiveInfoResponseBody {
	s.SubscribeCount = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetTitle(v string) *QueryLiveInfoResponseBody {
	s.Title = &v
	return s
}

func (s *QueryLiveInfoResponseBody) SetUv(v int32) *QueryLiveInfoResponseBody {
	s.Uv = &v
	return s
}

type QueryLiveInfoResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryLiveInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryLiveInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryLiveInfoResponse) SetHeaders(v map[string]*string) *QueryLiveInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryLiveInfoResponse) SetStatusCode(v int32) *QueryLiveInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryLiveInfoResponse) SetBody(v *QueryLiveInfoResponseBody) *QueryLiveInfoResponse {
	s.Body = v
	return s
}

type QueryLiveWatchDetailHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryLiveWatchDetailHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryLiveWatchDetailHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailHeaders) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailHeaders) SetCommonHeaders(v map[string]*string) *QueryLiveWatchDetailHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryLiveWatchDetailHeaders) SetAccountContext(v *QueryLiveWatchDetailHeadersAccountContext) *QueryLiveWatchDetailHeaders {
	s.AccountContext = v
	return s
}

type QueryLiveWatchDetailHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryLiveWatchDetailHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailHeadersAccountContext) SetAccountId(v string) *QueryLiveWatchDetailHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryLiveWatchDetailShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryLiveWatchDetailShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryLiveWatchDetailShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryLiveWatchDetailShrinkHeaders) SetAccountContextShrink(v string) *QueryLiveWatchDetailShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryLiveWatchDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId        *string                                   `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContext *QueryLiveWatchDetailRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryLiveWatchDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailRequest) SetLiveId(v string) *QueryLiveWatchDetailRequest {
	s.LiveId = &v
	return s
}

func (s *QueryLiveWatchDetailRequest) SetTenantContext(v *QueryLiveWatchDetailRequestTenantContext) *QueryLiveWatchDetailRequest {
	s.TenantContext = v
	return s
}

type QueryLiveWatchDetailRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryLiveWatchDetailRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailRequestTenantContext) SetTenantId(v string) *QueryLiveWatchDetailRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryLiveWatchDetailShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId              *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryLiveWatchDetailShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailShrinkRequest) SetLiveId(v string) *QueryLiveWatchDetailShrinkRequest {
	s.LiveId = &v
	return s
}

func (s *QueryLiveWatchDetailShrinkRequest) SetTenantContextShrink(v string) *QueryLiveWatchDetailShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryLiveWatchDetailResponseBody struct {
	// example:
	//
	// 84600
	AvgWatchTime *int64 `json:"avgWatchTime,omitempty" xml:"avgWatchTime,omitempty"`
	// example:
	//
	// 100
	LiveUv *int32 `json:"liveUv,omitempty" xml:"liveUv,omitempty"`
	// example:
	//
	// 10000
	MsgCount *int32 `json:"msgCount,omitempty" xml:"msgCount,omitempty"`
	// example:
	//
	// 20
	PlaybackUv *int32 `json:"playbackUv,omitempty" xml:"playbackUv,omitempty"`
	// example:
	//
	// 30
	PraiseCount *int32 `json:"praiseCount,omitempty" xml:"praiseCount,omitempty"`
	// example:
	//
	// 1000
	Pv *int32 `json:"pv,omitempty" xml:"pv,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 1222000
	TotalWatchTime *int64 `json:"totalWatchTime,omitempty" xml:"totalWatchTime,omitempty"`
	// example:
	//
	// 10
	Uv *int32 `json:"uv,omitempty" xml:"uv,omitempty"`
}

func (s QueryLiveWatchDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailResponseBody) SetAvgWatchTime(v int64) *QueryLiveWatchDetailResponseBody {
	s.AvgWatchTime = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetLiveUv(v int32) *QueryLiveWatchDetailResponseBody {
	s.LiveUv = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetMsgCount(v int32) *QueryLiveWatchDetailResponseBody {
	s.MsgCount = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetPlaybackUv(v int32) *QueryLiveWatchDetailResponseBody {
	s.PlaybackUv = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetPraiseCount(v int32) *QueryLiveWatchDetailResponseBody {
	s.PraiseCount = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetPv(v int32) *QueryLiveWatchDetailResponseBody {
	s.Pv = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetRequestId(v string) *QueryLiveWatchDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetTotalWatchTime(v int64) *QueryLiveWatchDetailResponseBody {
	s.TotalWatchTime = &v
	return s
}

func (s *QueryLiveWatchDetailResponseBody) SetUv(v int32) *QueryLiveWatchDetailResponseBody {
	s.Uv = &v
	return s
}

type QueryLiveWatchDetailResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryLiveWatchDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryLiveWatchDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchDetailResponse) SetHeaders(v map[string]*string) *QueryLiveWatchDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryLiveWatchDetailResponse) SetStatusCode(v int32) *QueryLiveWatchDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryLiveWatchDetailResponse) SetBody(v *QueryLiveWatchDetailResponseBody) *QueryLiveWatchDetailResponse {
	s.Body = v
	return s
}

type QueryLiveWatchUserListHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryLiveWatchUserListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryLiveWatchUserListHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListHeaders) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListHeaders) SetCommonHeaders(v map[string]*string) *QueryLiveWatchUserListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryLiveWatchUserListHeaders) SetAccountContext(v *QueryLiveWatchUserListHeadersAccountContext) *QueryLiveWatchUserListHeaders {
	s.AccountContext = v
	return s
}

type QueryLiveWatchUserListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryLiveWatchUserListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListHeadersAccountContext) SetAccountId(v string) *QueryLiveWatchUserListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryLiveWatchUserListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryLiveWatchUserListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryLiveWatchUserListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryLiveWatchUserListShrinkHeaders) SetAccountContextShrink(v string) *QueryLiveWatchUserListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryLiveWatchUserListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	// example:
	//
	// 0
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	PageSize      *int32                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantContext *QueryLiveWatchUserListRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryLiveWatchUserListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListRequest) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListRequest) SetLiveId(v string) *QueryLiveWatchUserListRequest {
	s.LiveId = &v
	return s
}

func (s *QueryLiveWatchUserListRequest) SetPageNumber(v int32) *QueryLiveWatchUserListRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryLiveWatchUserListRequest) SetPageSize(v int32) *QueryLiveWatchUserListRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLiveWatchUserListRequest) SetTenantContext(v *QueryLiveWatchUserListRequestTenantContext) *QueryLiveWatchUserListRequest {
	s.TenantContext = v
	return s
}

type QueryLiveWatchUserListRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryLiveWatchUserListRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListRequestTenantContext) SetTenantId(v string) *QueryLiveWatchUserListRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryLiveWatchUserListShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	// example:
	//
	// 0
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	PageSize            *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryLiveWatchUserListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListShrinkRequest) SetLiveId(v string) *QueryLiveWatchUserListShrinkRequest {
	s.LiveId = &v
	return s
}

func (s *QueryLiveWatchUserListShrinkRequest) SetPageNumber(v int32) *QueryLiveWatchUserListShrinkRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryLiveWatchUserListShrinkRequest) SetPageSize(v int32) *QueryLiveWatchUserListShrinkRequest {
	s.PageSize = &v
	return s
}

func (s *QueryLiveWatchUserListShrinkRequest) SetTenantContextShrink(v string) *QueryLiveWatchUserListShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryLiveWatchUserListResponseBody struct {
	OrgUsesList    []*QueryLiveWatchUserListResponseBodyOrgUsesList    `json:"orgUsesList,omitempty" xml:"orgUsesList,omitempty" type:"Repeated"`
	OutOrgUserList []*QueryLiveWatchUserListResponseBodyOutOrgUserList `json:"outOrgUserList,omitempty" xml:"outOrgUserList,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s QueryLiveWatchUserListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListResponseBody) SetOrgUsesList(v []*QueryLiveWatchUserListResponseBodyOrgUsesList) *QueryLiveWatchUserListResponseBody {
	s.OrgUsesList = v
	return s
}

func (s *QueryLiveWatchUserListResponseBody) SetOutOrgUserList(v []*QueryLiveWatchUserListResponseBodyOutOrgUserList) *QueryLiveWatchUserListResponseBody {
	s.OutOrgUserList = v
	return s
}

func (s *QueryLiveWatchUserListResponseBody) SetRequestId(v string) *QueryLiveWatchUserListResponseBody {
	s.RequestId = &v
	return s
}

type QueryLiveWatchUserListResponseBodyOrgUsesList struct {
	DeptName *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	Name     *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1234
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// 19999
	WatchLiveTime *int64 `json:"WatchLiveTime,omitempty" xml:"WatchLiveTime,omitempty"`
	// example:
	//
	// 131312312
	WatchPlaybackTime *int64 `json:"WatchPlaybackTime,omitempty" xml:"WatchPlaybackTime,omitempty"`
	// example:
	//
	// 1323132
	WatchProgressMs *int64 `json:"WatchProgressMs,omitempty" xml:"WatchProgressMs,omitempty"`
}

func (s QueryLiveWatchUserListResponseBodyOrgUsesList) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListResponseBodyOrgUsesList) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListResponseBodyOrgUsesList) SetDeptName(v string) *QueryLiveWatchUserListResponseBodyOrgUsesList {
	s.DeptName = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOrgUsesList) SetName(v string) *QueryLiveWatchUserListResponseBodyOrgUsesList {
	s.Name = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOrgUsesList) SetUserId(v string) *QueryLiveWatchUserListResponseBodyOrgUsesList {
	s.UserId = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOrgUsesList) SetWatchLiveTime(v int64) *QueryLiveWatchUserListResponseBodyOrgUsesList {
	s.WatchLiveTime = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOrgUsesList) SetWatchPlaybackTime(v int64) *QueryLiveWatchUserListResponseBodyOrgUsesList {
	s.WatchPlaybackTime = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOrgUsesList) SetWatchProgressMs(v int64) *QueryLiveWatchUserListResponseBodyOrgUsesList {
	s.WatchProgressMs = &v
	return s
}

type QueryLiveWatchUserListResponseBodyOutOrgUserList struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 12312312
	WatchLiveTime *int64 `json:"WatchLiveTime,omitempty" xml:"WatchLiveTime,omitempty"`
	// example:
	//
	// 21313131
	WatchPlaybackTime *int64 `json:"WatchPlaybackTime,omitempty" xml:"WatchPlaybackTime,omitempty"`
	// example:
	//
	// 123131
	WatchProgressMs *int64 `json:"WatchProgressMs,omitempty" xml:"WatchProgressMs,omitempty"`
}

func (s QueryLiveWatchUserListResponseBodyOutOrgUserList) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListResponseBodyOutOrgUserList) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListResponseBodyOutOrgUserList) SetName(v string) *QueryLiveWatchUserListResponseBodyOutOrgUserList {
	s.Name = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOutOrgUserList) SetWatchLiveTime(v int64) *QueryLiveWatchUserListResponseBodyOutOrgUserList {
	s.WatchLiveTime = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOutOrgUserList) SetWatchPlaybackTime(v int64) *QueryLiveWatchUserListResponseBodyOutOrgUserList {
	s.WatchPlaybackTime = &v
	return s
}

func (s *QueryLiveWatchUserListResponseBodyOutOrgUserList) SetWatchProgressMs(v int64) *QueryLiveWatchUserListResponseBodyOutOrgUserList {
	s.WatchProgressMs = &v
	return s
}

type QueryLiveWatchUserListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryLiveWatchUserListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryLiveWatchUserListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryLiveWatchUserListResponse) GoString() string {
	return s.String()
}

func (s *QueryLiveWatchUserListResponse) SetHeaders(v map[string]*string) *QueryLiveWatchUserListResponse {
	s.Headers = v
	return s
}

func (s *QueryLiveWatchUserListResponse) SetStatusCode(v int32) *QueryLiveWatchUserListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryLiveWatchUserListResponse) SetBody(v *QueryLiveWatchUserListResponseBody) *QueryLiveWatchUserListResponse {
	s.Body = v
	return s
}

type QueryMeetingRoomHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryMeetingRoomHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomHeaders) SetAccountContext(v *QueryMeetingRoomHeadersAccountContext) *QueryMeetingRoomHeaders {
	s.AccountContext = v
	return s
}

type QueryMeetingRoomHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryMeetingRoomHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomHeadersAccountContext) SetAccountId(v string) *QueryMeetingRoomHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryMeetingRoomShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryMeetingRoomShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomShrinkHeaders) SetAccountContextShrink(v string) *QueryMeetingRoomShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryMeetingRoomRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0ffb7xxxxx
	RoomId        *string                               `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	TenantContext *QueryMeetingRoomRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomRequest) SetRoomId(v string) *QueryMeetingRoomRequest {
	s.RoomId = &v
	return s
}

func (s *QueryMeetingRoomRequest) SetTenantContext(v *QueryMeetingRoomRequestTenantContext) *QueryMeetingRoomRequest {
	s.TenantContext = v
	return s
}

type QueryMeetingRoomRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryMeetingRoomRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomRequestTenantContext) SetTenantId(v string) *QueryMeetingRoomRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryMeetingRoomShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0ffb7xxxxx
	RoomId              *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryMeetingRoomShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomShrinkRequest) SetRoomId(v string) *QueryMeetingRoomShrinkRequest {
	s.RoomId = &v
	return s
}

func (s *QueryMeetingRoomShrinkRequest) SetTenantContextShrink(v string) *QueryMeetingRoomShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryMeetingRoomResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                             `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *QueryMeetingRoomResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Struct"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s QueryMeetingRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponseBody) SetRequestId(v string) *QueryMeetingRoomResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMeetingRoomResponseBody) SetResult(v *QueryMeetingRoomResponseBodyResult) *QueryMeetingRoomResponseBody {
	s.Result = v
	return s
}

func (s *QueryMeetingRoomResponseBody) SetVendorRequestId(v string) *QueryMeetingRoomResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *QueryMeetingRoomResponseBody) SetVendorType(v string) *QueryMeetingRoomResponseBody {
	s.VendorType = &v
	return s
}

type QueryMeetingRoomResponseBodyResult struct {
	// example:
	//
	// ding994axxxxx
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// [ "2iPOLbpxxxxuwggiiqiPwiEiF" ]
	DeviceUnionIds []*string `json:"DeviceUnionIds,omitempty" xml:"DeviceUnionIds,omitempty" type:"Repeated"`
	// example:
	//
	// true
	EnableCycleReservation *bool `json:"EnableCycleReservation,omitempty" xml:"EnableCycleReservation,omitempty"`
	// example:
	//
	// xxxIsvRoomId
	IsvRoomId            *string                                                 `json:"IsvRoomId,omitempty" xml:"IsvRoomId,omitempty"`
	ReservationAuthority *QueryMeetingRoomResponseBodyResultReservationAuthority `json:"ReservationAuthority,omitempty" xml:"ReservationAuthority,omitempty" type:"Struct"`
	// example:
	//
	// 10
	RoomCapacity *int32                                       `json:"RoomCapacity,omitempty" xml:"RoomCapacity,omitempty"`
	RoomGroup    *QueryMeetingRoomResponseBodyResultRoomGroup `json:"RoomGroup,omitempty" xml:"RoomGroup,omitempty" type:"Struct"`
	// example:
	//
	// 0ffb7184xxxxx
	RoomId       *string                                         `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	RoomLabels   []*QueryMeetingRoomResponseBodyResultRoomLabels `json:"RoomLabels,omitempty" xml:"RoomLabels,omitempty" type:"Repeated"`
	RoomLocation *QueryMeetingRoomResponseBodyResultRoomLocation `json:"RoomLocation,omitempty" xml:"RoomLocation,omitempty" type:"Struct"`
	// example:
	//
	// 测试会议室
	RoomName *string `json:"RoomName,omitempty" xml:"RoomName,omitempty"`
	// example:
	//
	// https://static.dingtalk.com/media/lADxxxxx.jpg
	RoomPicture *string `json:"RoomPicture,omitempty" xml:"RoomPicture,omitempty"`
	// example:
	//
	// 0122414
	RoomStaffId *string `json:"RoomStaffId,omitempty" xml:"RoomStaffId,omitempty"`
	// example:
	//
	// 0
	RoomStatus *int32 `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
}

func (s QueryMeetingRoomResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponseBodyResult) SetCorpId(v string) *QueryMeetingRoomResponseBodyResult {
	s.CorpId = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetDeviceUnionIds(v []*string) *QueryMeetingRoomResponseBodyResult {
	s.DeviceUnionIds = v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetEnableCycleReservation(v bool) *QueryMeetingRoomResponseBodyResult {
	s.EnableCycleReservation = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetIsvRoomId(v string) *QueryMeetingRoomResponseBodyResult {
	s.IsvRoomId = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetReservationAuthority(v *QueryMeetingRoomResponseBodyResultReservationAuthority) *QueryMeetingRoomResponseBodyResult {
	s.ReservationAuthority = v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomCapacity(v int32) *QueryMeetingRoomResponseBodyResult {
	s.RoomCapacity = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomGroup(v *QueryMeetingRoomResponseBodyResultRoomGroup) *QueryMeetingRoomResponseBodyResult {
	s.RoomGroup = v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomId(v string) *QueryMeetingRoomResponseBodyResult {
	s.RoomId = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomLabels(v []*QueryMeetingRoomResponseBodyResultRoomLabels) *QueryMeetingRoomResponseBodyResult {
	s.RoomLabels = v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomLocation(v *QueryMeetingRoomResponseBodyResultRoomLocation) *QueryMeetingRoomResponseBodyResult {
	s.RoomLocation = v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomName(v string) *QueryMeetingRoomResponseBodyResult {
	s.RoomName = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomPicture(v string) *QueryMeetingRoomResponseBodyResult {
	s.RoomPicture = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomStaffId(v string) *QueryMeetingRoomResponseBodyResult {
	s.RoomStaffId = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResult) SetRoomStatus(v int32) *QueryMeetingRoomResponseBodyResult {
	s.RoomStatus = &v
	return s
}

type QueryMeetingRoomResponseBodyResultReservationAuthority struct {
	AuthorizedMembers []*QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers `json:"AuthorizedMembers,omitempty" xml:"AuthorizedMembers,omitempty" type:"Repeated"`
}

func (s QueryMeetingRoomResponseBodyResultReservationAuthority) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponseBodyResultReservationAuthority) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponseBodyResultReservationAuthority) SetAuthorizedMembers(v []*QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers) *QueryMeetingRoomResponseBodyResultReservationAuthority {
	s.AuthorizedMembers = v
	return s
}

type QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers struct {
	MemberId   *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
}

func (s QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers) SetMemberId(v string) *QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers {
	s.MemberId = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers) SetMemberName(v string) *QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers {
	s.MemberName = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers) SetMemberType(v string) *QueryMeetingRoomResponseBodyResultReservationAuthorityAuthorizedMembers {
	s.MemberType = &v
	return s
}

type QueryMeetingRoomResponseBodyResultRoomGroup struct {
	// example:
	//
	// 1
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 测试分组
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// 0
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s QueryMeetingRoomResponseBodyResultRoomGroup) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponseBodyResultRoomGroup) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponseBodyResultRoomGroup) SetGroupId(v int64) *QueryMeetingRoomResponseBodyResultRoomGroup {
	s.GroupId = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResultRoomGroup) SetGroupName(v string) *QueryMeetingRoomResponseBodyResultRoomGroup {
	s.GroupName = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResultRoomGroup) SetParentId(v int64) *QueryMeetingRoomResponseBodyResultRoomGroup {
	s.ParentId = &v
	return s
}

type QueryMeetingRoomResponseBodyResultRoomLabels struct {
	// example:
	//
	// 1
	LabelId *int64 `json:"LabelId,omitempty" xml:"LabelId,omitempty"`
	// example:
	//
	// 电视
	LabelName *string `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
}

func (s QueryMeetingRoomResponseBodyResultRoomLabels) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponseBodyResultRoomLabels) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponseBodyResultRoomLabels) SetLabelId(v int64) *QueryMeetingRoomResponseBodyResultRoomLabels {
	s.LabelId = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResultRoomLabels) SetLabelName(v string) *QueryMeetingRoomResponseBodyResultRoomLabels {
	s.LabelName = &v
	return s
}

type QueryMeetingRoomResponseBodyResultRoomLocation struct {
	// example:
	//
	// xx市xx区xx街道xx号
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// example:
	//
	// xxx公司
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s QueryMeetingRoomResponseBodyResultRoomLocation) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponseBodyResultRoomLocation) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponseBodyResultRoomLocation) SetDesc(v string) *QueryMeetingRoomResponseBodyResultRoomLocation {
	s.Desc = &v
	return s
}

func (s *QueryMeetingRoomResponseBodyResultRoomLocation) SetTitle(v string) *QueryMeetingRoomResponseBodyResultRoomLocation {
	s.Title = &v
	return s
}

type QueryMeetingRoomResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMeetingRoomResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMeetingRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomResponse) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomResponse) SetHeaders(v map[string]*string) *QueryMeetingRoomResponse {
	s.Headers = v
	return s
}

func (s *QueryMeetingRoomResponse) SetStatusCode(v int32) *QueryMeetingRoomResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMeetingRoomResponse) SetBody(v *QueryMeetingRoomResponseBody) *QueryMeetingRoomResponse {
	s.Body = v
	return s
}

type QueryMeetingRoomGroupHeaders struct {
	CommonHeaders  map[string]*string                          `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryMeetingRoomGroupHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomGroupHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomGroupHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomGroupHeaders) SetAccountContext(v *QueryMeetingRoomGroupHeadersAccountContext) *QueryMeetingRoomGroupHeaders {
	s.AccountContext = v
	return s
}

type QueryMeetingRoomGroupHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryMeetingRoomGroupHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupHeadersAccountContext) SetAccountId(v string) *QueryMeetingRoomGroupHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryMeetingRoomGroupShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryMeetingRoomGroupShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomGroupShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomGroupShrinkHeaders) SetAccountContextShrink(v string) *QueryMeetingRoomGroupShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryMeetingRoomGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 172
	GroupId       *string                                    `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	TenantContext *QueryMeetingRoomGroupRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupRequest) SetGroupId(v string) *QueryMeetingRoomGroupRequest {
	s.GroupId = &v
	return s
}

func (s *QueryMeetingRoomGroupRequest) SetTenantContext(v *QueryMeetingRoomGroupRequestTenantContext) *QueryMeetingRoomGroupRequest {
	s.TenantContext = v
	return s
}

type QueryMeetingRoomGroupRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryMeetingRoomGroupRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupRequestTenantContext) SetTenantId(v string) *QueryMeetingRoomGroupRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryMeetingRoomGroupShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 172
	GroupId             *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryMeetingRoomGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupShrinkRequest) SetGroupId(v string) *QueryMeetingRoomGroupShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *QueryMeetingRoomGroupShrinkRequest) SetTenantContextShrink(v string) *QueryMeetingRoomGroupShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryMeetingRoomGroupResponseBody struct {
	// example:
	//
	// 172
	GroupId *int64 `json:"groupId,omitempty" xml:"groupId,omitempty"`
	// example:
	//
	// 测试分组
	GroupName *string `json:"groupName,omitempty" xml:"groupName,omitempty"`
	// example:
	//
	// 0
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s QueryMeetingRoomGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupResponseBody) SetGroupId(v int64) *QueryMeetingRoomGroupResponseBody {
	s.GroupId = &v
	return s
}

func (s *QueryMeetingRoomGroupResponseBody) SetGroupName(v string) *QueryMeetingRoomGroupResponseBody {
	s.GroupName = &v
	return s
}

func (s *QueryMeetingRoomGroupResponseBody) SetParentId(v int64) *QueryMeetingRoomGroupResponseBody {
	s.ParentId = &v
	return s
}

func (s *QueryMeetingRoomGroupResponseBody) SetRequestId(v string) *QueryMeetingRoomGroupResponseBody {
	s.RequestId = &v
	return s
}

type QueryMeetingRoomGroupResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMeetingRoomGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMeetingRoomGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupResponse) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupResponse) SetHeaders(v map[string]*string) *QueryMeetingRoomGroupResponse {
	s.Headers = v
	return s
}

func (s *QueryMeetingRoomGroupResponse) SetStatusCode(v int32) *QueryMeetingRoomGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMeetingRoomGroupResponse) SetBody(v *QueryMeetingRoomGroupResponseBody) *QueryMeetingRoomGroupResponse {
	s.Body = v
	return s
}

type QueryMeetingRoomGroupListHeaders struct {
	CommonHeaders  map[string]*string                              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryMeetingRoomGroupListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomGroupListHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomGroupListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomGroupListHeaders) SetAccountContext(v *QueryMeetingRoomGroupListHeadersAccountContext) *QueryMeetingRoomGroupListHeaders {
	s.AccountContext = v
	return s
}

type QueryMeetingRoomGroupListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryMeetingRoomGroupListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListHeadersAccountContext) SetAccountId(v string) *QueryMeetingRoomGroupListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryMeetingRoomGroupListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryMeetingRoomGroupListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomGroupListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomGroupListShrinkHeaders) SetAccountContextShrink(v string) *QueryMeetingRoomGroupListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryMeetingRoomGroupListRequest struct {
	Request       map[string]interface{}                         `json:"Request,omitempty" xml:"Request,omitempty"`
	TenantContext *QueryMeetingRoomGroupListRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomGroupListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListRequest) SetRequest(v map[string]interface{}) *QueryMeetingRoomGroupListRequest {
	s.Request = v
	return s
}

func (s *QueryMeetingRoomGroupListRequest) SetTenantContext(v *QueryMeetingRoomGroupListRequestTenantContext) *QueryMeetingRoomGroupListRequest {
	s.TenantContext = v
	return s
}

type QueryMeetingRoomGroupListRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryMeetingRoomGroupListRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListRequestTenantContext) SetTenantId(v string) *QueryMeetingRoomGroupListRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryMeetingRoomGroupListShrinkRequest struct {
	RequestShrink       *string `json:"Request,omitempty" xml:"Request,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryMeetingRoomGroupListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListShrinkRequest) SetRequestShrink(v string) *QueryMeetingRoomGroupListShrinkRequest {
	s.RequestShrink = &v
	return s
}

func (s *QueryMeetingRoomGroupListShrinkRequest) SetTenantContextShrink(v string) *QueryMeetingRoomGroupListShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryMeetingRoomGroupListResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                        `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*QueryMeetingRoomGroupListResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryMeetingRoomGroupListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListResponseBody) SetRequestId(v string) *QueryMeetingRoomGroupListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMeetingRoomGroupListResponseBody) SetResult(v []*QueryMeetingRoomGroupListResponseBodyResult) *QueryMeetingRoomGroupListResponseBody {
	s.Result = v
	return s
}

type QueryMeetingRoomGroupListResponseBodyResult struct {
	// example:
	//
	// 172
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 测试分组
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// 0
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s QueryMeetingRoomGroupListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListResponseBodyResult) SetGroupId(v int64) *QueryMeetingRoomGroupListResponseBodyResult {
	s.GroupId = &v
	return s
}

func (s *QueryMeetingRoomGroupListResponseBodyResult) SetGroupName(v string) *QueryMeetingRoomGroupListResponseBodyResult {
	s.GroupName = &v
	return s
}

func (s *QueryMeetingRoomGroupListResponseBodyResult) SetParentId(v int64) *QueryMeetingRoomGroupListResponseBodyResult {
	s.ParentId = &v
	return s
}

type QueryMeetingRoomGroupListResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMeetingRoomGroupListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMeetingRoomGroupListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomGroupListResponse) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomGroupListResponse) SetHeaders(v map[string]*string) *QueryMeetingRoomGroupListResponse {
	s.Headers = v
	return s
}

func (s *QueryMeetingRoomGroupListResponse) SetStatusCode(v int32) *QueryMeetingRoomGroupListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMeetingRoomGroupListResponse) SetBody(v *QueryMeetingRoomGroupListResponseBody) *QueryMeetingRoomGroupListResponse {
	s.Body = v
	return s
}

type QueryMeetingRoomListHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryMeetingRoomListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomListHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomListHeaders) SetAccountContext(v *QueryMeetingRoomListHeadersAccountContext) *QueryMeetingRoomListHeaders {
	s.AccountContext = v
	return s
}

type QueryMeetingRoomListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryMeetingRoomListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListHeadersAccountContext) SetAccountId(v string) *QueryMeetingRoomListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryMeetingRoomListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryMeetingRoomListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryMeetingRoomListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMeetingRoomListShrinkHeaders) SetAccountContextShrink(v string) *QueryMeetingRoomListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryMeetingRoomListRequest struct {
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 124L
	NextToken     *int64                                    `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TenantContext *QueryMeetingRoomListRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryMeetingRoomListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListRequest) SetMaxResults(v int32) *QueryMeetingRoomListRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryMeetingRoomListRequest) SetNextToken(v int64) *QueryMeetingRoomListRequest {
	s.NextToken = &v
	return s
}

func (s *QueryMeetingRoomListRequest) SetTenantContext(v *QueryMeetingRoomListRequestTenantContext) *QueryMeetingRoomListRequest {
	s.TenantContext = v
	return s
}

type QueryMeetingRoomListRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryMeetingRoomListRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListRequestTenantContext) SetTenantId(v string) *QueryMeetingRoomListRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryMeetingRoomListShrinkRequest struct {
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 124L
	NextToken           *int64  `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryMeetingRoomListShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListShrinkRequest) SetMaxResults(v int32) *QueryMeetingRoomListShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryMeetingRoomListShrinkRequest) SetNextToken(v int64) *QueryMeetingRoomListShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *QueryMeetingRoomListShrinkRequest) SetTenantContextShrink(v string) *QueryMeetingRoomListShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryMeetingRoomListResponseBody struct {
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 123
	NextToken *int64 `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    []*QueryMeetingRoomListResponseBodyResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
}

func (s QueryMeetingRoomListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListResponseBody) SetHasMore(v bool) *QueryMeetingRoomListResponseBody {
	s.HasMore = &v
	return s
}

func (s *QueryMeetingRoomListResponseBody) SetNextToken(v int64) *QueryMeetingRoomListResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryMeetingRoomListResponseBody) SetRequestId(v string) *QueryMeetingRoomListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMeetingRoomListResponseBody) SetResult(v []*QueryMeetingRoomListResponseBodyResult) *QueryMeetingRoomListResponseBody {
	s.Result = v
	return s
}

type QueryMeetingRoomListResponseBodyResult struct {
	// example:
	//
	// ding994axxxx
	CorpId *string `json:"CorpId,omitempty" xml:"CorpId,omitempty"`
	// example:
	//
	// xxxIsvRoomId
	IsvRoomId *string `json:"IsvRoomId,omitempty" xml:"IsvRoomId,omitempty"`
	// example:
	//
	// 10
	RoomCapacity *int32                                           `json:"RoomCapacity,omitempty" xml:"RoomCapacity,omitempty"`
	RoomGroup    *QueryMeetingRoomListResponseBodyResultRoomGroup `json:"RoomGroup,omitempty" xml:"RoomGroup,omitempty" type:"Struct"`
	// example:
	//
	// 0ffb7xxxxx
	RoomId       *string                                             `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	RoomLabels   []*QueryMeetingRoomListResponseBodyResultRoomLabels `json:"RoomLabels,omitempty" xml:"RoomLabels,omitempty" type:"Repeated"`
	RoomLocation *QueryMeetingRoomListResponseBodyResultRoomLocation `json:"RoomLocation,omitempty" xml:"RoomLocation,omitempty" type:"Struct"`
	// example:
	//
	// 测试会议室
	RoomName *string `json:"RoomName,omitempty" xml:"RoomName,omitempty"`
	// example:
	//
	// https://static.dingtalk.com/media/lADPxxxxx.jpg
	RoomPicture *string `json:"RoomPicture,omitempty" xml:"RoomPicture,omitempty"`
	// example:
	//
	// 012241xxxxx
	RoomStaffId *string `json:"RoomStaffId,omitempty" xml:"RoomStaffId,omitempty"`
	// example:
	//
	// 0
	RoomStatus *int32 `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
}

func (s QueryMeetingRoomListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListResponseBodyResult) SetCorpId(v string) *QueryMeetingRoomListResponseBodyResult {
	s.CorpId = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetIsvRoomId(v string) *QueryMeetingRoomListResponseBodyResult {
	s.IsvRoomId = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomCapacity(v int32) *QueryMeetingRoomListResponseBodyResult {
	s.RoomCapacity = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomGroup(v *QueryMeetingRoomListResponseBodyResultRoomGroup) *QueryMeetingRoomListResponseBodyResult {
	s.RoomGroup = v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomId(v string) *QueryMeetingRoomListResponseBodyResult {
	s.RoomId = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomLabels(v []*QueryMeetingRoomListResponseBodyResultRoomLabels) *QueryMeetingRoomListResponseBodyResult {
	s.RoomLabels = v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomLocation(v *QueryMeetingRoomListResponseBodyResultRoomLocation) *QueryMeetingRoomListResponseBodyResult {
	s.RoomLocation = v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomName(v string) *QueryMeetingRoomListResponseBodyResult {
	s.RoomName = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomPicture(v string) *QueryMeetingRoomListResponseBodyResult {
	s.RoomPicture = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomStaffId(v string) *QueryMeetingRoomListResponseBodyResult {
	s.RoomStaffId = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResult) SetRoomStatus(v int32) *QueryMeetingRoomListResponseBodyResult {
	s.RoomStatus = &v
	return s
}

type QueryMeetingRoomListResponseBodyResultRoomGroup struct {
	// example:
	//
	// 1
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 测试分组
	GroupName *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	// example:
	//
	// 0
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s QueryMeetingRoomListResponseBodyResultRoomGroup) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListResponseBodyResultRoomGroup) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListResponseBodyResultRoomGroup) SetGroupId(v int64) *QueryMeetingRoomListResponseBodyResultRoomGroup {
	s.GroupId = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResultRoomGroup) SetGroupName(v string) *QueryMeetingRoomListResponseBodyResultRoomGroup {
	s.GroupName = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResultRoomGroup) SetParentId(v int64) *QueryMeetingRoomListResponseBodyResultRoomGroup {
	s.ParentId = &v
	return s
}

type QueryMeetingRoomListResponseBodyResultRoomLabels struct {
	// example:
	//
	// 1
	LabelId *int64 `json:"LabelId,omitempty" xml:"LabelId,omitempty"`
	// example:
	//
	// 电视
	LabelName *string `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
}

func (s QueryMeetingRoomListResponseBodyResultRoomLabels) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListResponseBodyResultRoomLabels) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListResponseBodyResultRoomLabels) SetLabelId(v int64) *QueryMeetingRoomListResponseBodyResultRoomLabels {
	s.LabelId = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResultRoomLabels) SetLabelName(v string) *QueryMeetingRoomListResponseBodyResultRoomLabels {
	s.LabelName = &v
	return s
}

type QueryMeetingRoomListResponseBodyResultRoomLocation struct {
	// example:
	//
	// xx市xx区xx街道xx号
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// example:
	//
	// xxx公司
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s QueryMeetingRoomListResponseBodyResultRoomLocation) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListResponseBodyResultRoomLocation) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListResponseBodyResultRoomLocation) SetDesc(v string) *QueryMeetingRoomListResponseBodyResultRoomLocation {
	s.Desc = &v
	return s
}

func (s *QueryMeetingRoomListResponseBodyResultRoomLocation) SetTitle(v string) *QueryMeetingRoomListResponseBodyResultRoomLocation {
	s.Title = &v
	return s
}

type QueryMeetingRoomListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMeetingRoomListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMeetingRoomListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMeetingRoomListResponse) GoString() string {
	return s.String()
}

func (s *QueryMeetingRoomListResponse) SetHeaders(v map[string]*string) *QueryMeetingRoomListResponse {
	s.Headers = v
	return s
}

func (s *QueryMeetingRoomListResponse) SetStatusCode(v int32) *QueryMeetingRoomListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMeetingRoomListResponse) SetBody(v *QueryMeetingRoomListResponseBody) *QueryMeetingRoomListResponse {
	s.Body = v
	return s
}

type QueryMinutesHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryMinutesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryMinutesHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesHeaders) GoString() string {
	return s.String()
}

func (s *QueryMinutesHeaders) SetCommonHeaders(v map[string]*string) *QueryMinutesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMinutesHeaders) SetAccountContext(v *QueryMinutesHeadersAccountContext) *QueryMinutesHeaders {
	s.AccountContext = v
	return s
}

type QueryMinutesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryMinutesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryMinutesHeadersAccountContext) SetAccountId(v string) *QueryMinutesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryMinutesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryMinutesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryMinutesShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryMinutesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMinutesShrinkHeaders) SetAccountContextShrink(v string) *QueryMinutesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryMinutesRequest struct {
	TenantContext *QueryMinutesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryMinutesRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesRequest) GoString() string {
	return s.String()
}

func (s *QueryMinutesRequest) SetTenantContext(v *QueryMinutesRequestTenantContext) *QueryMinutesRequest {
	s.TenantContext = v
	return s
}

func (s *QueryMinutesRequest) SetConferenceId(v string) *QueryMinutesRequest {
	s.ConferenceId = &v
	return s
}

type QueryMinutesRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryMinutesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryMinutesRequestTenantContext) SetTenantId(v string) *QueryMinutesRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryMinutesShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s QueryMinutesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryMinutesShrinkRequest) SetTenantContextShrink(v string) *QueryMinutesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryMinutesShrinkRequest) SetConferenceId(v string) *QueryMinutesShrinkRequest {
	s.ConferenceId = &v
	return s
}

type QueryMinutesResponseBody struct {
	AudioList []*QueryMinutesResponseBodyAudioList `json:"audioList,omitempty" xml:"audioList,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s QueryMinutesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMinutesResponseBody) SetAudioList(v []*QueryMinutesResponseBodyAudioList) *QueryMinutesResponseBody {
	s.AudioList = v
	return s
}

func (s *QueryMinutesResponseBody) SetRequestId(v string) *QueryMinutesResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMinutesResponseBody) SetVendorRequestId(v string) *QueryMinutesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *QueryMinutesResponseBody) SetVendorType(v string) *QueryMinutesResponseBody {
	s.VendorType = &v
	return s
}

type QueryMinutesResponseBodyAudioList struct {
	// example:
	//
	// 1000
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1000000000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1127942
	FileSize *int64 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// https://xxx-hangzhou.oss-cn-hangzhou.aliyuncs.com/record_xxxx.mp3?Expires=1718045081&OSSAccessKeyId=TMP.3KdwHtvZxopmwacMZEdyb4WHLVmbArrNRB9CTKnR1MaJgmRjdmZczs6Rip66cgKgk2HhQon1yygvBnbY3uqEaZNeHBLcBa&Signature=OFWyAIY%2FdlzfwM9wIfEaKoAudkxxxxx
	PlayUrl *string `json:"PlayUrl,omitempty" xml:"PlayUrl,omitempty"`
	// example:
	//
	// 123
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	// example:
	//
	// 1000000000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryMinutesResponseBodyAudioList) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesResponseBodyAudioList) GoString() string {
	return s.String()
}

func (s *QueryMinutesResponseBodyAudioList) SetDuration(v int64) *QueryMinutesResponseBodyAudioList {
	s.Duration = &v
	return s
}

func (s *QueryMinutesResponseBodyAudioList) SetEndTime(v int64) *QueryMinutesResponseBodyAudioList {
	s.EndTime = &v
	return s
}

func (s *QueryMinutesResponseBodyAudioList) SetFileSize(v int64) *QueryMinutesResponseBodyAudioList {
	s.FileSize = &v
	return s
}

func (s *QueryMinutesResponseBodyAudioList) SetPlayUrl(v string) *QueryMinutesResponseBodyAudioList {
	s.PlayUrl = &v
	return s
}

func (s *QueryMinutesResponseBodyAudioList) SetRecordId(v string) *QueryMinutesResponseBodyAudioList {
	s.RecordId = &v
	return s
}

func (s *QueryMinutesResponseBodyAudioList) SetStartTime(v int64) *QueryMinutesResponseBodyAudioList {
	s.StartTime = &v
	return s
}

func (s *QueryMinutesResponseBodyAudioList) SetUserId(v string) *QueryMinutesResponseBodyAudioList {
	s.UserId = &v
	return s
}

type QueryMinutesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMinutesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMinutesResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesResponse) GoString() string {
	return s.String()
}

func (s *QueryMinutesResponse) SetHeaders(v map[string]*string) *QueryMinutesResponse {
	s.Headers = v
	return s
}

func (s *QueryMinutesResponse) SetStatusCode(v int32) *QueryMinutesResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMinutesResponse) SetBody(v *QueryMinutesResponseBody) *QueryMinutesResponse {
	s.Body = v
	return s
}

type QueryMinutesSummaryHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryMinutesSummaryHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryMinutesSummaryHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryHeaders) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryHeaders) SetCommonHeaders(v map[string]*string) *QueryMinutesSummaryHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMinutesSummaryHeaders) SetAccountContext(v *QueryMinutesSummaryHeadersAccountContext) *QueryMinutesSummaryHeaders {
	s.AccountContext = v
	return s
}

type QueryMinutesSummaryHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryMinutesSummaryHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryHeadersAccountContext) SetAccountId(v string) *QueryMinutesSummaryHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryMinutesSummaryShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryMinutesSummaryShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryMinutesSummaryShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMinutesSummaryShrinkHeaders) SetAccountContextShrink(v string) *QueryMinutesSummaryShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryMinutesSummaryRequest struct {
	TenantContext *QueryMinutesSummaryRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId    *string   `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	SummaryTypeList []*string `json:"summaryTypeList,omitempty" xml:"summaryTypeList,omitempty" type:"Repeated"`
}

func (s QueryMinutesSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryRequest) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryRequest) SetTenantContext(v *QueryMinutesSummaryRequestTenantContext) *QueryMinutesSummaryRequest {
	s.TenantContext = v
	return s
}

func (s *QueryMinutesSummaryRequest) SetConferenceId(v string) *QueryMinutesSummaryRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryMinutesSummaryRequest) SetSummaryTypeList(v []*string) *QueryMinutesSummaryRequest {
	s.SummaryTypeList = v
	return s
}

type QueryMinutesSummaryRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryMinutesSummaryRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryRequestTenantContext) SetTenantId(v string) *QueryMinutesSummaryRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryMinutesSummaryShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId          *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	SummaryTypeListShrink *string `json:"summaryTypeList,omitempty" xml:"summaryTypeList,omitempty"`
}

func (s QueryMinutesSummaryShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryShrinkRequest) SetTenantContextShrink(v string) *QueryMinutesSummaryShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryMinutesSummaryShrinkRequest) SetConferenceId(v string) *QueryMinutesSummaryShrinkRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryMinutesSummaryShrinkRequest) SetSummaryTypeListShrink(v string) *QueryMinutesSummaryShrinkRequest {
	s.SummaryTypeListShrink = &v
	return s
}

type QueryMinutesSummaryResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                 `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Summary   *QueryMinutesSummaryResponseBodySummary `json:"summary,omitempty" xml:"summary,omitempty" type:"Struct"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s QueryMinutesSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponseBody) SetRequestId(v string) *QueryMinutesSummaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMinutesSummaryResponseBody) SetSummary(v *QueryMinutesSummaryResponseBodySummary) *QueryMinutesSummaryResponseBody {
	s.Summary = v
	return s
}

func (s *QueryMinutesSummaryResponseBody) SetVendorRequestId(v string) *QueryMinutesSummaryResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *QueryMinutesSummaryResponseBody) SetVendorType(v string) *QueryMinutesSummaryResponseBody {
	s.VendorType = &v
	return s
}

type QueryMinutesSummaryResponseBodySummary struct {
	// example:
	//
	// {}
	Actions *QueryMinutesSummaryResponseBodySummaryActions `json:"Actions,omitempty" xml:"Actions,omitempty" type:"Struct"`
	// example:
	//
	// []
	AutoChapters []*QueryMinutesSummaryResponseBodySummaryAutoChapters `json:"AutoChapters,omitempty" xml:"AutoChapters,omitempty" type:"Repeated"`
	// example:
	//
	// []
	ConversationalSummary []*QueryMinutesSummaryResponseBodySummaryConversationalSummary `json:"ConversationalSummary,omitempty" xml:"ConversationalSummary,omitempty" type:"Repeated"`
	// example:
	//
	// {}
	KeySentences *QueryMinutesSummaryResponseBodySummaryKeySentences `json:"KeySentences,omitempty" xml:"KeySentences,omitempty" type:"Struct"`
	// example:
	//
	// []
	Keywords []*string `json:"Keywords,omitempty" xml:"Keywords,omitempty" type:"Repeated"`
	// example:
	//
	// 全文摘要结果，全文摘要通过两三百字的篇幅将最重要的信息呈现出来，用于快速了解记录内容与主旨
	ParagraphSummary *string `json:"ParagraphSummary,omitempty" xml:"ParagraphSummary,omitempty"`
	// example:
	//
	// []
	QuestionsAnsweringSummary []*QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary `json:"QuestionsAnsweringSummary,omitempty" xml:"QuestionsAnsweringSummary,omitempty" type:"Repeated"`
}

func (s QueryMinutesSummaryResponseBodySummary) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponseBodySummary) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponseBodySummary) SetActions(v *QueryMinutesSummaryResponseBodySummaryActions) *QueryMinutesSummaryResponseBodySummary {
	s.Actions = v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummary) SetAutoChapters(v []*QueryMinutesSummaryResponseBodySummaryAutoChapters) *QueryMinutesSummaryResponseBodySummary {
	s.AutoChapters = v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummary) SetConversationalSummary(v []*QueryMinutesSummaryResponseBodySummaryConversationalSummary) *QueryMinutesSummaryResponseBodySummary {
	s.ConversationalSummary = v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummary) SetKeySentences(v *QueryMinutesSummaryResponseBodySummaryKeySentences) *QueryMinutesSummaryResponseBodySummary {
	s.KeySentences = v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummary) SetKeywords(v []*string) *QueryMinutesSummaryResponseBodySummary {
	s.Keywords = v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummary) SetParagraphSummary(v string) *QueryMinutesSummaryResponseBodySummary {
	s.ParagraphSummary = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummary) SetQuestionsAnsweringSummary(v []*QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary) *QueryMinutesSummaryResponseBodySummary {
	s.QuestionsAnsweringSummary = v
	return s
}

type QueryMinutesSummaryResponseBodySummaryActions struct {
	// example:
	//
	// 7910000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// example:
	//
	// 2
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2
	SentenceId *int64 `json:"SentenceId,omitempty" xml:"SentenceId,omitempty"`
	// example:
	//
	// 7901100
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// example:
	//
	// 内容
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMinutesSummaryResponseBodySummaryActions) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponseBodySummaryActions) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponseBodySummaryActions) SetEnd(v int64) *QueryMinutesSummaryResponseBodySummaryActions {
	s.End = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryActions) SetId(v int64) *QueryMinutesSummaryResponseBodySummaryActions {
	s.Id = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryActions) SetSentenceId(v int64) *QueryMinutesSummaryResponseBodySummaryActions {
	s.SentenceId = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryActions) SetStart(v int64) *QueryMinutesSummaryResponseBodySummaryActions {
	s.Start = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryActions) SetText(v string) *QueryMinutesSummaryResponseBodySummaryActions {
	s.Text = &v
	return s
}

type QueryMinutesSummaryResponseBodySummaryAutoChapters struct {
	// example:
	//
	// 7910000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// example:
	//
	// 章节的一句话标题
	Headline *string `json:"Headline,omitempty" xml:"Headline,omitempty"`
	// example:
	//
	// 2
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 7901100
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// example:
	//
	// 章节总结
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s QueryMinutesSummaryResponseBodySummaryAutoChapters) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponseBodySummaryAutoChapters) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponseBodySummaryAutoChapters) SetEnd(v int64) *QueryMinutesSummaryResponseBodySummaryAutoChapters {
	s.End = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryAutoChapters) SetHeadline(v string) *QueryMinutesSummaryResponseBodySummaryAutoChapters {
	s.Headline = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryAutoChapters) SetId(v int64) *QueryMinutesSummaryResponseBodySummaryAutoChapters {
	s.Id = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryAutoChapters) SetStart(v int64) *QueryMinutesSummaryResponseBodySummaryAutoChapters {
	s.Start = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryAutoChapters) SetSummary(v string) *QueryMinutesSummaryResponseBodySummaryAutoChapters {
	s.Summary = &v
	return s
}

type QueryMinutesSummaryResponseBodySummaryConversationalSummary struct {
	// example:
	//
	// 012345
	SpeakerId *string `json:"SpeakerId,omitempty" xml:"SpeakerId,omitempty"`
	// example:
	//
	// 发言人姓名
	SpeakerName *string `json:"SpeakerName,omitempty" xml:"SpeakerName,omitempty"`
	// example:
	//
	// 发言人对应的总结
	Summary *string `json:"Summary,omitempty" xml:"Summary,omitempty"`
}

func (s QueryMinutesSummaryResponseBodySummaryConversationalSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponseBodySummaryConversationalSummary) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponseBodySummaryConversationalSummary) SetSpeakerId(v string) *QueryMinutesSummaryResponseBodySummaryConversationalSummary {
	s.SpeakerId = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryConversationalSummary) SetSpeakerName(v string) *QueryMinutesSummaryResponseBodySummaryConversationalSummary {
	s.SpeakerName = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryConversationalSummary) SetSummary(v string) *QueryMinutesSummaryResponseBodySummaryConversationalSummary {
	s.Summary = &v
	return s
}

type QueryMinutesSummaryResponseBodySummaryKeySentences struct {
	// example:
	//
	// 7910000
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// example:
	//
	// 2
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2
	SentenceId *int64 `json:"SentenceId,omitempty" xml:"SentenceId,omitempty"`
	// example:
	//
	// 7901100
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// example:
	//
	// 内容
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMinutesSummaryResponseBodySummaryKeySentences) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponseBodySummaryKeySentences) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponseBodySummaryKeySentences) SetEnd(v int64) *QueryMinutesSummaryResponseBodySummaryKeySentences {
	s.End = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryKeySentences) SetId(v int64) *QueryMinutesSummaryResponseBodySummaryKeySentences {
	s.Id = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryKeySentences) SetSentenceId(v int64) *QueryMinutesSummaryResponseBodySummaryKeySentences {
	s.SentenceId = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryKeySentences) SetStart(v int64) *QueryMinutesSummaryResponseBodySummaryKeySentences {
	s.Start = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryKeySentences) SetText(v string) *QueryMinutesSummaryResponseBodySummaryKeySentences {
	s.Text = &v
	return s
}

type QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary struct {
	// example:
	//
	// 问题
	Answer *string `json:"Answer,omitempty" xml:"Answer,omitempty"`
	// example:
	//
	// 回答
	Question *string `json:"Question,omitempty" xml:"Question,omitempty"`
	// example:
	//
	// []
	SentenceIdsOfAnswer []*int64 `json:"SentenceIdsOfAnswer,omitempty" xml:"SentenceIdsOfAnswer,omitempty" type:"Repeated"`
	// example:
	//
	// []
	SentenceIdsOfQuestion []*int64 `json:"SentenceIdsOfQuestion,omitempty" xml:"SentenceIdsOfQuestion,omitempty" type:"Repeated"`
}

func (s QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary) SetAnswer(v string) *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary {
	s.Answer = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary) SetQuestion(v string) *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary {
	s.Question = &v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary) SetSentenceIdsOfAnswer(v []*int64) *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary {
	s.SentenceIdsOfAnswer = v
	return s
}

func (s *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary) SetSentenceIdsOfQuestion(v []*int64) *QueryMinutesSummaryResponseBodySummaryQuestionsAnsweringSummary {
	s.SentenceIdsOfQuestion = v
	return s
}

type QueryMinutesSummaryResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMinutesSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMinutesSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesSummaryResponse) GoString() string {
	return s.String()
}

func (s *QueryMinutesSummaryResponse) SetHeaders(v map[string]*string) *QueryMinutesSummaryResponse {
	s.Headers = v
	return s
}

func (s *QueryMinutesSummaryResponse) SetStatusCode(v int32) *QueryMinutesSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMinutesSummaryResponse) SetBody(v *QueryMinutesSummaryResponseBody) *QueryMinutesSummaryResponse {
	s.Body = v
	return s
}

type QueryMinutesTextHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryMinutesTextHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryMinutesTextHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextHeaders) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextHeaders) SetCommonHeaders(v map[string]*string) *QueryMinutesTextHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMinutesTextHeaders) SetAccountContext(v *QueryMinutesTextHeadersAccountContext) *QueryMinutesTextHeaders {
	s.AccountContext = v
	return s
}

type QueryMinutesTextHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryMinutesTextHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextHeadersAccountContext) SetAccountId(v string) *QueryMinutesTextHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryMinutesTextShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryMinutesTextShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryMinutesTextShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryMinutesTextShrinkHeaders) SetAccountContextShrink(v string) *QueryMinutesTextShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryMinutesTextRequest struct {
	TenantContext *QueryMinutesTextRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	Direction *string `json:"direction,omitempty" xml:"direction,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 0
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
}

func (s QueryMinutesTextRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextRequest) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextRequest) SetTenantContext(v *QueryMinutesTextRequestTenantContext) *QueryMinutesTextRequest {
	s.TenantContext = v
	return s
}

func (s *QueryMinutesTextRequest) SetConferenceId(v string) *QueryMinutesTextRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryMinutesTextRequest) SetDirection(v string) *QueryMinutesTextRequest {
	s.Direction = &v
	return s
}

func (s *QueryMinutesTextRequest) SetMaxResults(v int64) *QueryMinutesTextRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryMinutesTextRequest) SetNextToken(v string) *QueryMinutesTextRequest {
	s.NextToken = &v
	return s
}

type QueryMinutesTextRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryMinutesTextRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextRequestTenantContext) SetTenantId(v string) *QueryMinutesTextRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryMinutesTextShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 607452e01401526ee39609e1
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	Direction *string `json:"direction,omitempty" xml:"direction,omitempty"`
	// example:
	//
	// 20
	MaxResults *int64 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// example:
	//
	// 0
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
}

func (s QueryMinutesTextShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextShrinkRequest) SetTenantContextShrink(v string) *QueryMinutesTextShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryMinutesTextShrinkRequest) SetConferenceId(v string) *QueryMinutesTextShrinkRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryMinutesTextShrinkRequest) SetDirection(v string) *QueryMinutesTextShrinkRequest {
	s.Direction = &v
	return s
}

func (s *QueryMinutesTextShrinkRequest) SetMaxResults(v int64) *QueryMinutesTextShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryMinutesTextShrinkRequest) SetNextToken(v string) *QueryMinutesTextShrinkRequest {
	s.NextToken = &v
	return s
}

type QueryMinutesTextResponseBody struct {
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 0
	NextToken     *string                                      `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	ParagraphList []*QueryMinutesTextResponseBodyParagraphList `json:"paragraphList,omitempty" xml:"paragraphList,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s QueryMinutesTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextResponseBody) SetHasMore(v bool) *QueryMinutesTextResponseBody {
	s.HasMore = &v
	return s
}

func (s *QueryMinutesTextResponseBody) SetNextToken(v string) *QueryMinutesTextResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryMinutesTextResponseBody) SetParagraphList(v []*QueryMinutesTextResponseBodyParagraphList) *QueryMinutesTextResponseBody {
	s.ParagraphList = v
	return s
}

func (s *QueryMinutesTextResponseBody) SetRequestId(v string) *QueryMinutesTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMinutesTextResponseBody) SetVendorRequestId(v string) *QueryMinutesTextResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *QueryMinutesTextResponseBody) SetVendorType(v string) *QueryMinutesTextResponseBody {
	s.VendorType = &v
	return s
}

type QueryMinutesTextResponseBodyParagraphList struct {
	// example:
	//
	// 7910000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 小钉
	NickName *string `json:"NickName,omitempty" xml:"NickName,omitempty"`
	// example:
	//
	// 123
	Paragraph *string `json:"Paragraph,omitempty" xml:"Paragraph,omitempty"`
	// example:
	//
	// 123
	ParagraphId *int64 `json:"ParagraphId,omitempty" xml:"ParagraphId,omitempty"`
	// example:
	//
	// 44444
	RecordId *int64 `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	// example:
	//
	// []
	SentenceList []*QueryMinutesTextResponseBodyParagraphListSentenceList `json:"SentenceList,omitempty" xml:"SentenceList,omitempty" type:"Repeated"`
	// example:
	//
	// 7910000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s QueryMinutesTextResponseBodyParagraphList) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextResponseBodyParagraphList) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetEndTime(v int64) *QueryMinutesTextResponseBodyParagraphList {
	s.EndTime = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetNickName(v string) *QueryMinutesTextResponseBodyParagraphList {
	s.NickName = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetParagraph(v string) *QueryMinutesTextResponseBodyParagraphList {
	s.Paragraph = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetParagraphId(v int64) *QueryMinutesTextResponseBodyParagraphList {
	s.ParagraphId = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetRecordId(v int64) *QueryMinutesTextResponseBodyParagraphList {
	s.RecordId = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetSentenceList(v []*QueryMinutesTextResponseBodyParagraphListSentenceList) *QueryMinutesTextResponseBodyParagraphList {
	s.SentenceList = v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetStartTime(v int64) *QueryMinutesTextResponseBodyParagraphList {
	s.StartTime = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphList) SetUserId(v string) *QueryMinutesTextResponseBodyParagraphList {
	s.UserId = &v
	return s
}

type QueryMinutesTextResponseBodyParagraphListSentenceList struct {
	// example:
	//
	// 7910000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 这里是小钉
	Sentence *string `json:"Sentence,omitempty" xml:"Sentence,omitempty"`
	// example:
	//
	// 7910000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// example:
	//
	// []
	WordList []*QueryMinutesTextResponseBodyParagraphListSentenceListWordList `json:"WordList,omitempty" xml:"WordList,omitempty" type:"Repeated"`
}

func (s QueryMinutesTextResponseBodyParagraphListSentenceList) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextResponseBodyParagraphListSentenceList) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceList) SetEndTime(v int64) *QueryMinutesTextResponseBodyParagraphListSentenceList {
	s.EndTime = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceList) SetSentence(v string) *QueryMinutesTextResponseBodyParagraphListSentenceList {
	s.Sentence = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceList) SetStartTime(v int64) *QueryMinutesTextResponseBodyParagraphListSentenceList {
	s.StartTime = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceList) SetUserId(v string) *QueryMinutesTextResponseBodyParagraphListSentenceList {
	s.UserId = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceList) SetWordList(v []*QueryMinutesTextResponseBodyParagraphListSentenceListWordList) *QueryMinutesTextResponseBodyParagraphListSentenceList {
	s.WordList = v
	return s
}

type QueryMinutesTextResponseBodyParagraphListSentenceListWordList struct {
	// example:
	//
	// 7910000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 7910000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 单词
	Word *string `json:"Word,omitempty" xml:"Word,omitempty"`
	// example:
	//
	// 172
	WordId *string `json:"WordId,omitempty" xml:"WordId,omitempty"`
}

func (s QueryMinutesTextResponseBodyParagraphListSentenceListWordList) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextResponseBodyParagraphListSentenceListWordList) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceListWordList) SetEndTime(v int64) *QueryMinutesTextResponseBodyParagraphListSentenceListWordList {
	s.EndTime = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceListWordList) SetStartTime(v int64) *QueryMinutesTextResponseBodyParagraphListSentenceListWordList {
	s.StartTime = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceListWordList) SetWord(v string) *QueryMinutesTextResponseBodyParagraphListSentenceListWordList {
	s.Word = &v
	return s
}

func (s *QueryMinutesTextResponseBodyParagraphListSentenceListWordList) SetWordId(v string) *QueryMinutesTextResponseBodyParagraphListSentenceListWordList {
	s.WordId = &v
	return s
}

type QueryMinutesTextResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMinutesTextResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMinutesTextResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMinutesTextResponse) GoString() string {
	return s.String()
}

func (s *QueryMinutesTextResponse) SetHeaders(v map[string]*string) *QueryMinutesTextResponse {
	s.Headers = v
	return s
}

func (s *QueryMinutesTextResponse) SetStatusCode(v int32) *QueryMinutesTextResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMinutesTextResponse) SetBody(v *QueryMinutesTextResponseBody) *QueryMinutesTextResponse {
	s.Body = v
	return s
}

type QueryOrgHonorsHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryOrgHonorsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryOrgHonorsHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsHeaders) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsHeaders) SetCommonHeaders(v map[string]*string) *QueryOrgHonorsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryOrgHonorsHeaders) SetAccountContext(v *QueryOrgHonorsHeadersAccountContext) *QueryOrgHonorsHeaders {
	s.AccountContext = v
	return s
}

type QueryOrgHonorsHeadersAccountContext struct {
	// example:
	//
	// 243331014234180628
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryOrgHonorsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsHeadersAccountContext) SetAccountId(v string) *QueryOrgHonorsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryOrgHonorsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryOrgHonorsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryOrgHonorsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryOrgHonorsShrinkHeaders) SetAccountContextShrink(v string) *QueryOrgHonorsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryOrgHonorsRequest struct {
	TenantContext *QueryOrgHonorsRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// 48
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 15
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
}

func (s QueryOrgHonorsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsRequest) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsRequest) SetTenantContext(v *QueryOrgHonorsRequestTenantContext) *QueryOrgHonorsRequest {
	s.TenantContext = v
	return s
}

func (s *QueryOrgHonorsRequest) SetMaxResults(v int32) *QueryOrgHonorsRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryOrgHonorsRequest) SetNextToken(v string) *QueryOrgHonorsRequest {
	s.NextToken = &v
	return s
}

func (s *QueryOrgHonorsRequest) SetOrgId(v int64) *QueryOrgHonorsRequest {
	s.OrgId = &v
	return s
}

type QueryOrgHonorsRequestTenantContext struct {
	// example:
	//
	// 487986704507650
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryOrgHonorsRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsRequestTenantContext) SetTenantId(v string) *QueryOrgHonorsRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryOrgHonorsShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// 48
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 15
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
}

func (s QueryOrgHonorsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsShrinkRequest) SetTenantContextShrink(v string) *QueryOrgHonorsShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryOrgHonorsShrinkRequest) SetMaxResults(v int32) *QueryOrgHonorsShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryOrgHonorsShrinkRequest) SetNextToken(v string) *QueryOrgHonorsShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *QueryOrgHonorsShrinkRequest) SetOrgId(v int64) *QueryOrgHonorsShrinkRequest {
	s.OrgId = &v
	return s
}

type QueryOrgHonorsResponseBody struct {
	// example:
	//
	// 15
	NextToken  *string                                 `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	OpenHonors []*QueryOrgHonorsResponseBodyOpenHonors `json:"openHonors,omitempty" xml:"openHonors,omitempty" type:"Repeated"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s QueryOrgHonorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsResponseBody) SetNextToken(v string) *QueryOrgHonorsResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryOrgHonorsResponseBody) SetOpenHonors(v []*QueryOrgHonorsResponseBodyOpenHonors) *QueryOrgHonorsResponseBody {
	s.OpenHonors = v
	return s
}

func (s *QueryOrgHonorsResponseBody) SetRequestId(v string) *QueryOrgHonorsResponseBody {
	s.RequestId = &v
	return s
}

type QueryOrgHonorsResponseBodyOpenHonors struct {
	HonorDesc *string `json:"honorDesc,omitempty" xml:"honorDesc,omitempty"`
	// example:
	//
	// 21658579
	HonorId *int64 `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// example:
	//
	// https://xxxx.ali-cdn.com/jfejfi.jpg
	HonorImgUrl *string `json:"honorImgUrl,omitempty" xml:"honorImgUrl,omitempty"`
	HonorName   *string `json:"honorName,omitempty" xml:"honorName,omitempty"`
	// example:
	//
	// https://xxxx.ali-cdn.com/jfejfi.jpg
	HonorPendantImgUrl *string `json:"honorPendantImgUrl,omitempty" xml:"honorPendantImgUrl,omitempty"`
}

func (s QueryOrgHonorsResponseBodyOpenHonors) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsResponseBodyOpenHonors) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsResponseBodyOpenHonors) SetHonorDesc(v string) *QueryOrgHonorsResponseBodyOpenHonors {
	s.HonorDesc = &v
	return s
}

func (s *QueryOrgHonorsResponseBodyOpenHonors) SetHonorId(v int64) *QueryOrgHonorsResponseBodyOpenHonors {
	s.HonorId = &v
	return s
}

func (s *QueryOrgHonorsResponseBodyOpenHonors) SetHonorImgUrl(v string) *QueryOrgHonorsResponseBodyOpenHonors {
	s.HonorImgUrl = &v
	return s
}

func (s *QueryOrgHonorsResponseBodyOpenHonors) SetHonorName(v string) *QueryOrgHonorsResponseBodyOpenHonors {
	s.HonorName = &v
	return s
}

func (s *QueryOrgHonorsResponseBodyOpenHonors) SetHonorPendantImgUrl(v string) *QueryOrgHonorsResponseBodyOpenHonors {
	s.HonorPendantImgUrl = &v
	return s
}

type QueryOrgHonorsResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryOrgHonorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryOrgHonorsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgHonorsResponse) GoString() string {
	return s.String()
}

func (s *QueryOrgHonorsResponse) SetHeaders(v map[string]*string) *QueryOrgHonorsResponse {
	s.Headers = v
	return s
}

func (s *QueryOrgHonorsResponse) SetStatusCode(v int32) *QueryOrgHonorsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOrgHonorsResponse) SetBody(v *QueryOrgHonorsResponseBody) *QueryOrgHonorsResponse {
	s.Body = v
	return s
}

type QueryOrgTodoTasksHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryOrgTodoTasksHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryOrgTodoTasksHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksHeaders) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksHeaders) SetCommonHeaders(v map[string]*string) *QueryOrgTodoTasksHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryOrgTodoTasksHeaders) SetAccountContext(v *QueryOrgTodoTasksHeadersAccountContext) *QueryOrgTodoTasksHeaders {
	s.AccountContext = v
	return s
}

type QueryOrgTodoTasksHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryOrgTodoTasksHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksHeadersAccountContext) SetAccountId(v string) *QueryOrgTodoTasksHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryOrgTodoTasksShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryOrgTodoTasksShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryOrgTodoTasksShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryOrgTodoTasksShrinkHeaders) SetAccountContextShrink(v string) *QueryOrgTodoTasksShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryOrgTodoTasksRequest struct {
	TenantContext *QueryOrgTodoTasksRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// true
	IsDone *bool `json:"isDone,omitempty" xml:"isDone,omitempty"`
	// example:
	//
	// 0
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
}

func (s QueryOrgTodoTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksRequest) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksRequest) SetTenantContext(v *QueryOrgTodoTasksRequestTenantContext) *QueryOrgTodoTasksRequest {
	s.TenantContext = v
	return s
}

func (s *QueryOrgTodoTasksRequest) SetIsDone(v bool) *QueryOrgTodoTasksRequest {
	s.IsDone = &v
	return s
}

func (s *QueryOrgTodoTasksRequest) SetNextToken(v string) *QueryOrgTodoTasksRequest {
	s.NextToken = &v
	return s
}

type QueryOrgTodoTasksRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryOrgTodoTasksRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksRequestTenantContext) SetTenantId(v string) *QueryOrgTodoTasksRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryOrgTodoTasksShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// true
	IsDone *bool `json:"isDone,omitempty" xml:"isDone,omitempty"`
	// example:
	//
	// 0
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
}

func (s QueryOrgTodoTasksShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksShrinkRequest) SetTenantContextShrink(v string) *QueryOrgTodoTasksShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryOrgTodoTasksShrinkRequest) SetIsDone(v bool) *QueryOrgTodoTasksShrinkRequest {
	s.IsDone = &v
	return s
}

func (s *QueryOrgTodoTasksShrinkRequest) SetNextToken(v string) *QueryOrgTodoTasksShrinkRequest {
	s.NextToken = &v
	return s
}

type QueryOrgTodoTasksResponseBody struct {
	// example:
	//
	// 15
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string                                   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	TodoCards []*QueryOrgTodoTasksResponseBodyTodoCards `json:"todoCards,omitempty" xml:"todoCards,omitempty" type:"Repeated"`
}

func (s QueryOrgTodoTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksResponseBody) SetNextToken(v string) *QueryOrgTodoTasksResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBody) SetRequestId(v string) *QueryOrgTodoTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBody) SetTodoCards(v []*QueryOrgTodoTasksResponseBodyTodoCards) *QueryOrgTodoTasksResponseBody {
	s.TodoCards = v
	return s
}

type QueryOrgTodoTasksResponseBodyTodoCards struct {
	// example:
	//
	// isv_dingtalkTodo
	BizTag *string `json:"bizTag,omitempty" xml:"bizTag,omitempty"`
	// example:
	//
	// 1617675000000
	CreatedTime *int64 `json:"createdTime,omitempty" xml:"createdTime,omitempty"`
	// example:
	//
	// xxxx
	CreatorId *string                                          `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	DetailUrl *QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl `json:"detailUrl,omitempty" xml:"detailUrl,omitempty" type:"Struct"`
	// example:
	//
	// 1617675000000
	DueTime *int64 `json:"dueTime,omitempty" xml:"dueTime,omitempty"`
	// example:
	//
	// true
	IsDone *bool `json:"isDone,omitempty" xml:"isDone,omitempty"`
	// example:
	//
	// 1617675000000
	ModifiedTime *int64 `json:"modifiedTime,omitempty" xml:"modifiedTime,omitempty"`
	// example:
	//
	// 10
	Priority *int32 `json:"priority,omitempty" xml:"priority,omitempty"`
	// example:
	//
	// isv_dingtalkTodo1
	SourceId *string `json:"sourceId,omitempty" xml:"sourceId,omitempty"`
	// example:
	//
	// 接入钉钉待办
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// example:
	//
	// taskOPJpwtwPVNGIFKURjrzd
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s QueryOrgTodoTasksResponseBodyTodoCards) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksResponseBodyTodoCards) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetBizTag(v string) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.BizTag = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetCreatedTime(v int64) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.CreatedTime = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetCreatorId(v string) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.CreatorId = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetDetailUrl(v *QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.DetailUrl = v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetDueTime(v int64) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.DueTime = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetIsDone(v bool) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.IsDone = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetModifiedTime(v int64) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.ModifiedTime = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetPriority(v int32) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.Priority = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetSourceId(v string) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.SourceId = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetSubject(v string) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.Subject = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCards) SetTaskId(v string) *QueryOrgTodoTasksResponseBodyTodoCards {
	s.TaskId = &v
	return s
}

type QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl struct {
	// example:
	//
	// https://www.dingtalk.com
	AppUrl *string `json:"appUrl,omitempty" xml:"appUrl,omitempty"`
	// example:
	//
	// https://www.dingtalk.com
	PcUrl *string `json:"pcUrl,omitempty" xml:"pcUrl,omitempty"`
}

func (s QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl) SetAppUrl(v string) *QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl {
	s.AppUrl = &v
	return s
}

func (s *QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl) SetPcUrl(v string) *QueryOrgTodoTasksResponseBodyTodoCardsDetailUrl {
	s.PcUrl = &v
	return s
}

type QueryOrgTodoTasksResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryOrgTodoTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryOrgTodoTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOrgTodoTasksResponse) GoString() string {
	return s.String()
}

func (s *QueryOrgTodoTasksResponse) SetHeaders(v map[string]*string) *QueryOrgTodoTasksResponse {
	s.Headers = v
	return s
}

func (s *QueryOrgTodoTasksResponse) SetStatusCode(v int32) *QueryOrgTodoTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOrgTodoTasksResponse) SetBody(v *QueryOrgTodoTasksResponseBody) *QueryOrgTodoTasksResponse {
	s.Body = v
	return s
}

type QueryRecordMinutesUrlHeaders struct {
	CommonHeaders  map[string]*string                          `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryRecordMinutesUrlHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryRecordMinutesUrlHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlHeaders) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlHeaders) SetCommonHeaders(v map[string]*string) *QueryRecordMinutesUrlHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryRecordMinutesUrlHeaders) SetAccountContext(v *QueryRecordMinutesUrlHeadersAccountContext) *QueryRecordMinutesUrlHeaders {
	s.AccountContext = v
	return s
}

type QueryRecordMinutesUrlHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryRecordMinutesUrlHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlHeadersAccountContext) SetAccountId(v string) *QueryRecordMinutesUrlHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryRecordMinutesUrlShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryRecordMinutesUrlShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryRecordMinutesUrlShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryRecordMinutesUrlShrinkHeaders) SetAccountContextShrink(v string) *QueryRecordMinutesUrlShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryRecordMinutesUrlRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// minutes
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1dddwrqrq
	ConferenceId  *string                                    `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	TenantContext *QueryRecordMinutesUrlRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryRecordMinutesUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlRequest) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlRequest) SetBizType(v string) *QueryRecordMinutesUrlRequest {
	s.BizType = &v
	return s
}

func (s *QueryRecordMinutesUrlRequest) SetConferenceId(v string) *QueryRecordMinutesUrlRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryRecordMinutesUrlRequest) SetTenantContext(v *QueryRecordMinutesUrlRequestTenantContext) *QueryRecordMinutesUrlRequest {
	s.TenantContext = v
	return s
}

type QueryRecordMinutesUrlRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryRecordMinutesUrlRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlRequestTenantContext) SetTenantId(v string) *QueryRecordMinutesUrlRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryRecordMinutesUrlShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// minutes
	BizType *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1dddwrqrq
	ConferenceId        *string `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryRecordMinutesUrlShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlShrinkRequest) SetBizType(v string) *QueryRecordMinutesUrlShrinkRequest {
	s.BizType = &v
	return s
}

func (s *QueryRecordMinutesUrlShrinkRequest) SetConferenceId(v string) *QueryRecordMinutesUrlShrinkRequest {
	s.ConferenceId = &v
	return s
}

func (s *QueryRecordMinutesUrlShrinkRequest) SetTenantContextShrink(v string) *QueryRecordMinutesUrlShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryRecordMinutesUrlResponseBody struct {
	RecordMinutesUrls []*QueryRecordMinutesUrlResponseBodyRecordMinutesUrls `json:"recordMinutesUrls,omitempty" xml:"recordMinutesUrls,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s QueryRecordMinutesUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlResponseBody) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlResponseBody) SetRecordMinutesUrls(v []*QueryRecordMinutesUrlResponseBodyRecordMinutesUrls) *QueryRecordMinutesUrlResponseBody {
	s.RecordMinutesUrls = v
	return s
}

func (s *QueryRecordMinutesUrlResponseBody) SetRequestId(v string) *QueryRecordMinutesUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryRecordMinutesUrlResponseBody) SetVendorRequestId(v string) *QueryRecordMinutesUrlResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *QueryRecordMinutesUrlResponseBody) SetVendorType(v string) *QueryRecordMinutesUrlResponseBody {
	s.VendorType = &v
	return s
}

type QueryRecordMinutesUrlResponseBodyRecordMinutesUrls struct {
	// example:
	//
	// url
	RecordMinutesUrl *string `json:"RecordMinutesUrl,omitempty" xml:"RecordMinutesUrl,omitempty"`
}

func (s QueryRecordMinutesUrlResponseBodyRecordMinutesUrls) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlResponseBodyRecordMinutesUrls) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlResponseBodyRecordMinutesUrls) SetRecordMinutesUrl(v string) *QueryRecordMinutesUrlResponseBodyRecordMinutesUrls {
	s.RecordMinutesUrl = &v
	return s
}

type QueryRecordMinutesUrlResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryRecordMinutesUrlResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryRecordMinutesUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryRecordMinutesUrlResponse) GoString() string {
	return s.String()
}

func (s *QueryRecordMinutesUrlResponse) SetHeaders(v map[string]*string) *QueryRecordMinutesUrlResponse {
	s.Headers = v
	return s
}

func (s *QueryRecordMinutesUrlResponse) SetStatusCode(v int32) *QueryRecordMinutesUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryRecordMinutesUrlResponse) SetBody(v *QueryRecordMinutesUrlResponseBody) *QueryRecordMinutesUrlResponse {
	s.Body = v
	return s
}

type QueryReportDetailHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryReportDetailHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryReportDetailHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailHeaders) GoString() string {
	return s.String()
}

func (s *QueryReportDetailHeaders) SetCommonHeaders(v map[string]*string) *QueryReportDetailHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryReportDetailHeaders) SetAccountContext(v *QueryReportDetailHeadersAccountContext) *QueryReportDetailHeaders {
	s.AccountContext = v
	return s
}

type QueryReportDetailHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryReportDetailHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryReportDetailHeadersAccountContext) SetAccountId(v string) *QueryReportDetailHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryReportDetailShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryReportDetailShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryReportDetailShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryReportDetailShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryReportDetailShrinkHeaders) SetAccountContextShrink(v string) *QueryReportDetailShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryReportDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 18054XXX
	ReportId      *string                                `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	TenantContext *QueryReportDetailRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryReportDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryReportDetailRequest) SetReportId(v string) *QueryReportDetailRequest {
	s.ReportId = &v
	return s
}

func (s *QueryReportDetailRequest) SetTenantContext(v *QueryReportDetailRequestTenantContext) *QueryReportDetailRequest {
	s.TenantContext = v
	return s
}

type QueryReportDetailRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryReportDetailRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryReportDetailRequestTenantContext) SetTenantId(v string) *QueryReportDetailRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryReportDetailShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 18054XXX
	ReportId            *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryReportDetailShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryReportDetailShrinkRequest) SetReportId(v string) *QueryReportDetailShrinkRequest {
	s.ReportId = &v
	return s
}

func (s *QueryReportDetailShrinkRequest) SetTenantContextShrink(v string) *QueryReportDetailShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryReportDetailResponseBody struct {
	Content []*QueryReportDetailResponseBodyContent `json:"content,omitempty" xml:"content,omitempty" type:"Repeated"`
	// example:
	//
	// 1691980997000
	CreateTime *int64 `json:"createTime,omitempty" xml:"createTime,omitempty"`
	// example:
	//
	// 012345
	CreatorId   *string `json:"creatorId,omitempty" xml:"creatorId,omitempty"`
	CreatorName *string `json:"creatorName,omitempty" xml:"creatorName,omitempty"`
	DeptName    *string `json:"deptName,omitempty" xml:"deptName,omitempty"`
	// example:
	//
	// 1691980997000
	ModifiedTime *int64  `json:"modifiedTime,omitempty" xml:"modifiedTime,omitempty"`
	Remark       *string `json:"remark,omitempty" xml:"remark,omitempty"`
	// example:
	//
	// 1231232134
	ReportId *string `json:"reportId,omitempty" xml:"reportId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId    *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	TemplateName *string `json:"templateName,omitempty" xml:"templateName,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s QueryReportDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryReportDetailResponseBody) SetContent(v []*QueryReportDetailResponseBodyContent) *QueryReportDetailResponseBody {
	s.Content = v
	return s
}

func (s *QueryReportDetailResponseBody) SetCreateTime(v int64) *QueryReportDetailResponseBody {
	s.CreateTime = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetCreatorId(v string) *QueryReportDetailResponseBody {
	s.CreatorId = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetCreatorName(v string) *QueryReportDetailResponseBody {
	s.CreatorName = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetDeptName(v string) *QueryReportDetailResponseBody {
	s.DeptName = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetModifiedTime(v int64) *QueryReportDetailResponseBody {
	s.ModifiedTime = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetRemark(v string) *QueryReportDetailResponseBody {
	s.Remark = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetReportId(v string) *QueryReportDetailResponseBody {
	s.ReportId = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetRequestId(v string) *QueryReportDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetTemplateName(v string) *QueryReportDetailResponseBody {
	s.TemplateName = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetVendorRequestId(v string) *QueryReportDetailResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *QueryReportDetailResponseBody) SetVendorType(v string) *QueryReportDetailResponseBody {
	s.VendorType = &v
	return s
}

type QueryReportDetailResponseBodyContent struct {
	Images []*string `json:"Images,omitempty" xml:"Images,omitempty" type:"Repeated"`
	Key    *string   `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 0
	Sort *string `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// example:
	//
	// 1
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s QueryReportDetailResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailResponseBodyContent) GoString() string {
	return s.String()
}

func (s *QueryReportDetailResponseBodyContent) SetImages(v []*string) *QueryReportDetailResponseBodyContent {
	s.Images = v
	return s
}

func (s *QueryReportDetailResponseBodyContent) SetKey(v string) *QueryReportDetailResponseBodyContent {
	s.Key = &v
	return s
}

func (s *QueryReportDetailResponseBodyContent) SetSort(v string) *QueryReportDetailResponseBodyContent {
	s.Sort = &v
	return s
}

func (s *QueryReportDetailResponseBodyContent) SetType(v string) *QueryReportDetailResponseBodyContent {
	s.Type = &v
	return s
}

func (s *QueryReportDetailResponseBodyContent) SetValue(v string) *QueryReportDetailResponseBodyContent {
	s.Value = &v
	return s
}

type QueryReportDetailResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryReportDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryReportDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryReportDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryReportDetailResponse) SetHeaders(v map[string]*string) *QueryReportDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryReportDetailResponse) SetStatusCode(v int32) *QueryReportDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryReportDetailResponse) SetBody(v *QueryReportDetailResponseBody) *QueryReportDetailResponse {
	s.Body = v
	return s
}

type QueryScheduleConferenceHeaders struct {
	CommonHeaders  map[string]*string                            `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryScheduleConferenceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryScheduleConferenceHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceHeaders) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceHeaders) SetCommonHeaders(v map[string]*string) *QueryScheduleConferenceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryScheduleConferenceHeaders) SetAccountContext(v *QueryScheduleConferenceHeadersAccountContext) *QueryScheduleConferenceHeaders {
	s.AccountContext = v
	return s
}

type QueryScheduleConferenceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryScheduleConferenceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceHeadersAccountContext) SetAccountId(v string) *QueryScheduleConferenceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryScheduleConferenceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryScheduleConferenceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryScheduleConferenceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryScheduleConferenceShrinkHeaders) SetAccountContextShrink(v string) *QueryScheduleConferenceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryScheduleConferenceRequest struct {
	TenantContext *QueryScheduleConferenceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string `json:"scheduleConferenceId,omitempty" xml:"scheduleConferenceId,omitempty"`
}

func (s QueryScheduleConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceRequest) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceRequest) SetTenantContext(v *QueryScheduleConferenceRequestTenantContext) *QueryScheduleConferenceRequest {
	s.TenantContext = v
	return s
}

func (s *QueryScheduleConferenceRequest) SetScheduleConferenceId(v string) *QueryScheduleConferenceRequest {
	s.ScheduleConferenceId = &v
	return s
}

type QueryScheduleConferenceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryScheduleConferenceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceRequestTenantContext) SetTenantId(v string) *QueryScheduleConferenceRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryScheduleConferenceShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string `json:"scheduleConferenceId,omitempty" xml:"scheduleConferenceId,omitempty"`
}

func (s QueryScheduleConferenceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceShrinkRequest) SetTenantContextShrink(v string) *QueryScheduleConferenceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryScheduleConferenceShrinkRequest) SetScheduleConferenceId(v string) *QueryScheduleConferenceShrinkRequest {
	s.ScheduleConferenceId = &v
	return s
}

type QueryScheduleConferenceResponseBody struct {
	// example:
	//
	// 1687928400000
	EndTime *int64 `json:"endTime,omitempty" xml:"endTime,omitempty"`
	// example:
	//
	// [ "+86123xxxx" ]
	Phones []*string `json:"phones,omitempty" xml:"phones,omitempty" type:"Repeated"`
	// example:
	//
	// xxxxx
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 838 722 xxxxx
	RoomCode *string `json:"roomCode,omitempty" xml:"roomCode,omitempty"`
	// example:
	//
	// 2a489c68-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string `json:"scheduleConferenceId,omitempty" xml:"scheduleConferenceId,omitempty"`
	// example:
	//
	// 1687924800000
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// example:
	//
	// 预约会议标题
	Title *string `json:"title,omitempty" xml:"title,omitempty"`
	// example:
	//
	// https://meeting.dingtalk.com/j/Bsbp3ixxxxxUyJJ9
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s QueryScheduleConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceResponseBody) SetEndTime(v int64) *QueryScheduleConferenceResponseBody {
	s.EndTime = &v
	return s
}

func (s *QueryScheduleConferenceResponseBody) SetPhones(v []*string) *QueryScheduleConferenceResponseBody {
	s.Phones = v
	return s
}

func (s *QueryScheduleConferenceResponseBody) SetRequestId(v string) *QueryScheduleConferenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryScheduleConferenceResponseBody) SetRoomCode(v string) *QueryScheduleConferenceResponseBody {
	s.RoomCode = &v
	return s
}

func (s *QueryScheduleConferenceResponseBody) SetScheduleConferenceId(v string) *QueryScheduleConferenceResponseBody {
	s.ScheduleConferenceId = &v
	return s
}

func (s *QueryScheduleConferenceResponseBody) SetStartTime(v int64) *QueryScheduleConferenceResponseBody {
	s.StartTime = &v
	return s
}

func (s *QueryScheduleConferenceResponseBody) SetTitle(v string) *QueryScheduleConferenceResponseBody {
	s.Title = &v
	return s
}

func (s *QueryScheduleConferenceResponseBody) SetUrl(v string) *QueryScheduleConferenceResponseBody {
	s.Url = &v
	return s
}

type QueryScheduleConferenceResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryScheduleConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryScheduleConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceResponse) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceResponse) SetHeaders(v map[string]*string) *QueryScheduleConferenceResponse {
	s.Headers = v
	return s
}

func (s *QueryScheduleConferenceResponse) SetStatusCode(v int32) *QueryScheduleConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryScheduleConferenceResponse) SetBody(v *QueryScheduleConferenceResponseBody) *QueryScheduleConferenceResponse {
	s.Body = v
	return s
}

type QueryScheduleConferenceInfoHeaders struct {
	CommonHeaders  map[string]*string                                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryScheduleConferenceInfoHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryScheduleConferenceInfoHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoHeaders) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoHeaders) SetCommonHeaders(v map[string]*string) *QueryScheduleConferenceInfoHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryScheduleConferenceInfoHeaders) SetAccountContext(v *QueryScheduleConferenceInfoHeadersAccountContext) *QueryScheduleConferenceInfoHeaders {
	s.AccountContext = v
	return s
}

type QueryScheduleConferenceInfoHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryScheduleConferenceInfoHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoHeadersAccountContext) SetAccountId(v string) *QueryScheduleConferenceInfoHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryScheduleConferenceInfoShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryScheduleConferenceInfoShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryScheduleConferenceInfoShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryScheduleConferenceInfoShrinkHeaders) SetAccountContextShrink(v string) *QueryScheduleConferenceInfoShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryScheduleConferenceInfoRequest struct {
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 19
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 636cf59f2b032f014ae32902
	ScheduleConferenceId *string                                          `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	TenantContext        *QueryScheduleConferenceInfoRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s QueryScheduleConferenceInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoRequest) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoRequest) SetMaxResults(v int32) *QueryScheduleConferenceInfoRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryScheduleConferenceInfoRequest) SetNextToken(v string) *QueryScheduleConferenceInfoRequest {
	s.NextToken = &v
	return s
}

func (s *QueryScheduleConferenceInfoRequest) SetScheduleConferenceId(v string) *QueryScheduleConferenceInfoRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *QueryScheduleConferenceInfoRequest) SetTenantContext(v *QueryScheduleConferenceInfoRequestTenantContext) *QueryScheduleConferenceInfoRequest {
	s.TenantContext = v
	return s
}

type QueryScheduleConferenceInfoRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryScheduleConferenceInfoRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoRequestTenantContext) SetTenantId(v string) *QueryScheduleConferenceInfoRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryScheduleConferenceInfoShrinkRequest struct {
	// example:
	//
	// 20
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 19
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 636cf59f2b032f014ae32902
	ScheduleConferenceId *string `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	TenantContextShrink  *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s QueryScheduleConferenceInfoShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoShrinkRequest) SetMaxResults(v int32) *QueryScheduleConferenceInfoShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryScheduleConferenceInfoShrinkRequest) SetNextToken(v string) *QueryScheduleConferenceInfoShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *QueryScheduleConferenceInfoShrinkRequest) SetScheduleConferenceId(v string) *QueryScheduleConferenceInfoShrinkRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *QueryScheduleConferenceInfoShrinkRequest) SetTenantContextShrink(v string) *QueryScheduleConferenceInfoShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type QueryScheduleConferenceInfoResponseBody struct {
	ConferenceList []*QueryScheduleConferenceInfoResponseBodyConferenceList `json:"conferenceList,omitempty" xml:"conferenceList,omitempty" type:"Repeated"`
	// example:
	//
	// 19
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s QueryScheduleConferenceInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoResponseBody) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoResponseBody) SetConferenceList(v []*QueryScheduleConferenceInfoResponseBodyConferenceList) *QueryScheduleConferenceInfoResponseBody {
	s.ConferenceList = v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBody) SetNextToken(v string) *QueryScheduleConferenceInfoResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBody) SetRequestId(v string) *QueryScheduleConferenceInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBody) SetTotalCount(v int32) *QueryScheduleConferenceInfoResponseBody {
	s.TotalCount = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBody) SetVendorRequestId(v string) *QueryScheduleConferenceInfoResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBody) SetVendorType(v string) *QueryScheduleConferenceInfoResponseBody {
	s.VendorType = &v
	return s
}

type QueryScheduleConferenceInfoResponseBodyConferenceList struct {
	// example:
	//
	// 636cf59f2b032f014ae32902
	ConferenceId *string `json:"ConferenceId,omitempty" xml:"ConferenceId,omitempty"`
	// example:
	//
	// 1668087732000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 123456789
	RoomCode *string `json:"RoomCode,omitempty" xml:"RoomCode,omitempty"`
	// example:
	//
	// 1668087731000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 2
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// xxx发起的视频会议
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s QueryScheduleConferenceInfoResponseBodyConferenceList) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoResponseBodyConferenceList) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoResponseBodyConferenceList) SetConferenceId(v string) *QueryScheduleConferenceInfoResponseBodyConferenceList {
	s.ConferenceId = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBodyConferenceList) SetEndTime(v int64) *QueryScheduleConferenceInfoResponseBodyConferenceList {
	s.EndTime = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBodyConferenceList) SetRoomCode(v string) *QueryScheduleConferenceInfoResponseBodyConferenceList {
	s.RoomCode = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBodyConferenceList) SetStartTime(v int64) *QueryScheduleConferenceInfoResponseBodyConferenceList {
	s.StartTime = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBodyConferenceList) SetStatus(v int32) *QueryScheduleConferenceInfoResponseBodyConferenceList {
	s.Status = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponseBodyConferenceList) SetTitle(v string) *QueryScheduleConferenceInfoResponseBodyConferenceList {
	s.Title = &v
	return s
}

type QueryScheduleConferenceInfoResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryScheduleConferenceInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryScheduleConferenceInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryScheduleConferenceInfoResponse) GoString() string {
	return s.String()
}

func (s *QueryScheduleConferenceInfoResponse) SetHeaders(v map[string]*string) *QueryScheduleConferenceInfoResponse {
	s.Headers = v
	return s
}

func (s *QueryScheduleConferenceInfoResponse) SetStatusCode(v int32) *QueryScheduleConferenceInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryScheduleConferenceInfoResponse) SetBody(v *QueryScheduleConferenceInfoResponseBody) *QueryScheduleConferenceInfoResponse {
	s.Body = v
	return s
}

type QueryUserHonorsHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *QueryUserHonorsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s QueryUserHonorsHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsHeaders) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsHeaders) SetCommonHeaders(v map[string]*string) *QueryUserHonorsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryUserHonorsHeaders) SetAccountContext(v *QueryUserHonorsHeadersAccountContext) *QueryUserHonorsHeaders {
	s.AccountContext = v
	return s
}

type QueryUserHonorsHeadersAccountContext struct {
	// example:
	//
	// 243331014234180628
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s QueryUserHonorsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsHeadersAccountContext) SetAccountId(v string) *QueryUserHonorsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type QueryUserHonorsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s QueryUserHonorsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsShrinkHeaders) SetCommonHeaders(v map[string]*string) *QueryUserHonorsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *QueryUserHonorsShrinkHeaders) SetAccountContextShrink(v string) *QueryUserHonorsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type QueryUserHonorsRequest struct {
	TenantContext *QueryUserHonorsRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// 200
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 15
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123123
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s QueryUserHonorsRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsRequest) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsRequest) SetTenantContext(v *QueryUserHonorsRequestTenantContext) *QueryUserHonorsRequest {
	s.TenantContext = v
	return s
}

func (s *QueryUserHonorsRequest) SetMaxResults(v int32) *QueryUserHonorsRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryUserHonorsRequest) SetNextToken(v string) *QueryUserHonorsRequest {
	s.NextToken = &v
	return s
}

func (s *QueryUserHonorsRequest) SetOrgId(v int64) *QueryUserHonorsRequest {
	s.OrgId = &v
	return s
}

func (s *QueryUserHonorsRequest) SetUserId(v string) *QueryUserHonorsRequest {
	s.UserId = &v
	return s
}

type QueryUserHonorsRequestTenantContext struct {
	// example:
	//
	// 189477710813728
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s QueryUserHonorsRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsRequestTenantContext) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsRequestTenantContext) SetTenantId(v string) *QueryUserHonorsRequestTenantContext {
	s.TenantId = &v
	return s
}

type QueryUserHonorsShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// 200
	MaxResults *int32 `json:"maxResults,omitempty" xml:"maxResults,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 15
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123123
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s QueryUserHonorsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsShrinkRequest) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsShrinkRequest) SetTenantContextShrink(v string) *QueryUserHonorsShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *QueryUserHonorsShrinkRequest) SetMaxResults(v int32) *QueryUserHonorsShrinkRequest {
	s.MaxResults = &v
	return s
}

func (s *QueryUserHonorsShrinkRequest) SetNextToken(v string) *QueryUserHonorsShrinkRequest {
	s.NextToken = &v
	return s
}

func (s *QueryUserHonorsShrinkRequest) SetOrgId(v int64) *QueryUserHonorsShrinkRequest {
	s.OrgId = &v
	return s
}

func (s *QueryUserHonorsShrinkRequest) SetUserId(v string) *QueryUserHonorsShrinkRequest {
	s.UserId = &v
	return s
}

type QueryUserHonorsResponseBody struct {
	Honors []*QueryUserHonorsResponseBodyHonors `json:"honors,omitempty" xml:"honors,omitempty" type:"Repeated"`
	// example:
	//
	// http-trigger-nodejs10.luoni-old.1431999136518149.cn-hangzhou.fc.devsapp.net
	NextToken *string `json:"nextToken,omitempty" xml:"nextToken,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s QueryUserHonorsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsResponseBody) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsResponseBody) SetHonors(v []*QueryUserHonorsResponseBodyHonors) *QueryUserHonorsResponseBody {
	s.Honors = v
	return s
}

func (s *QueryUserHonorsResponseBody) SetNextToken(v string) *QueryUserHonorsResponseBody {
	s.NextToken = &v
	return s
}

func (s *QueryUserHonorsResponseBody) SetRequestId(v string) *QueryUserHonorsResponseBody {
	s.RequestId = &v
	return s
}

type QueryUserHonorsResponseBodyHonors struct {
	// example:
	//
	// null
	ExpirationTime *int64                                           `json:"expirationTime,omitempty" xml:"expirationTime,omitempty"`
	GrantHistory   []*QueryUserHonorsResponseBodyHonorsGrantHistory `json:"grantHistory,omitempty" xml:"grantHistory,omitempty" type:"Repeated"`
	HonorDesc      *string                                          `json:"honorDesc,omitempty" xml:"honorDesc,omitempty"`
	// example:
	//
	// 21659398
	HonorId   *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	HonorName *string `json:"honorName,omitempty" xml:"honorName,omitempty"`
}

func (s QueryUserHonorsResponseBodyHonors) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsResponseBodyHonors) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsResponseBodyHonors) SetExpirationTime(v int64) *QueryUserHonorsResponseBodyHonors {
	s.ExpirationTime = &v
	return s
}

func (s *QueryUserHonorsResponseBodyHonors) SetGrantHistory(v []*QueryUserHonorsResponseBodyHonorsGrantHistory) *QueryUserHonorsResponseBodyHonors {
	s.GrantHistory = v
	return s
}

func (s *QueryUserHonorsResponseBodyHonors) SetHonorDesc(v string) *QueryUserHonorsResponseBodyHonors {
	s.HonorDesc = &v
	return s
}

func (s *QueryUserHonorsResponseBodyHonors) SetHonorId(v string) *QueryUserHonorsResponseBodyHonors {
	s.HonorId = &v
	return s
}

func (s *QueryUserHonorsResponseBodyHonors) SetHonorName(v string) *QueryUserHonorsResponseBodyHonors {
	s.HonorName = &v
	return s
}

type QueryUserHonorsResponseBodyHonorsGrantHistory struct {
	// example:
	//
	// 12312312312312312
	GrantTime *int64 `json:"grantTime,omitempty" xml:"grantTime,omitempty"`
	// example:
	//
	// 363784
	SenderUserid *string `json:"senderUserid,omitempty" xml:"senderUserid,omitempty"`
}

func (s QueryUserHonorsResponseBodyHonorsGrantHistory) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsResponseBodyHonorsGrantHistory) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsResponseBodyHonorsGrantHistory) SetGrantTime(v int64) *QueryUserHonorsResponseBodyHonorsGrantHistory {
	s.GrantTime = &v
	return s
}

func (s *QueryUserHonorsResponseBodyHonorsGrantHistory) SetSenderUserid(v string) *QueryUserHonorsResponseBodyHonorsGrantHistory {
	s.SenderUserid = &v
	return s
}

type QueryUserHonorsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryUserHonorsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryUserHonorsResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryUserHonorsResponse) GoString() string {
	return s.String()
}

func (s *QueryUserHonorsResponse) SetHeaders(v map[string]*string) *QueryUserHonorsResponse {
	s.Headers = v
	return s
}

func (s *QueryUserHonorsResponse) SetStatusCode(v int32) *QueryUserHonorsResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryUserHonorsResponse) SetBody(v *QueryUserHonorsResponseBody) *QueryUserHonorsResponse {
	s.Body = v
	return s
}

type RecallHonorHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *RecallHonorHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s RecallHonorHeaders) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorHeaders) GoString() string {
	return s.String()
}

func (s *RecallHonorHeaders) SetCommonHeaders(v map[string]*string) *RecallHonorHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RecallHonorHeaders) SetAccountContext(v *RecallHonorHeadersAccountContext) *RecallHonorHeaders {
	s.AccountContext = v
	return s
}

type RecallHonorHeadersAccountContext struct {
	// example:
	//
	// 1323845308033417
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s RecallHonorHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *RecallHonorHeadersAccountContext) SetAccountId(v string) *RecallHonorHeadersAccountContext {
	s.AccountId = &v
	return s
}

type RecallHonorShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s RecallHonorShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorShrinkHeaders) GoString() string {
	return s.String()
}

func (s *RecallHonorShrinkHeaders) SetCommonHeaders(v map[string]*string) *RecallHonorShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RecallHonorShrinkHeaders) SetAccountContextShrink(v string) *RecallHonorShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type RecallHonorRequest struct {
	TenantContext *RecallHonorRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 21660610
	HonorId *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 345391052
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s RecallHonorRequest) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorRequest) GoString() string {
	return s.String()
}

func (s *RecallHonorRequest) SetTenantContext(v *RecallHonorRequestTenantContext) *RecallHonorRequest {
	s.TenantContext = v
	return s
}

func (s *RecallHonorRequest) SetHonorId(v string) *RecallHonorRequest {
	s.HonorId = &v
	return s
}

func (s *RecallHonorRequest) SetOrgId(v int64) *RecallHonorRequest {
	s.OrgId = &v
	return s
}

func (s *RecallHonorRequest) SetUserId(v string) *RecallHonorRequest {
	s.UserId = &v
	return s
}

type RecallHonorRequestTenantContext struct {
	// example:
	//
	// 4
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s RecallHonorRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorRequestTenantContext) GoString() string {
	return s.String()
}

func (s *RecallHonorRequestTenantContext) SetTenantId(v string) *RecallHonorRequestTenantContext {
	s.TenantId = &v
	return s
}

type RecallHonorShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 21660610
	HonorId *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 345391052
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s RecallHonorShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorShrinkRequest) GoString() string {
	return s.String()
}

func (s *RecallHonorShrinkRequest) SetTenantContextShrink(v string) *RecallHonorShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *RecallHonorShrinkRequest) SetHonorId(v string) *RecallHonorShrinkRequest {
	s.HonorId = &v
	return s
}

func (s *RecallHonorShrinkRequest) SetOrgId(v int64) *RecallHonorShrinkRequest {
	s.OrgId = &v
	return s
}

func (s *RecallHonorShrinkRequest) SetUserId(v string) *RecallHonorShrinkRequest {
	s.UserId = &v
	return s
}

type RecallHonorResponseBody struct {
	Content *RecallHonorResponseBodyContent `json:"content,omitempty" xml:"content,omitempty" type:"Struct"`
	// example:
	//
	// 040008
	ErrorCode *string                `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	ErrorCtx  map[string]interface{} `json:"errorCtx,omitempty" xml:"errorCtx,omitempty"`
	ErrorMsg  *string                `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s RecallHonorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorResponseBody) GoString() string {
	return s.String()
}

func (s *RecallHonorResponseBody) SetContent(v *RecallHonorResponseBodyContent) *RecallHonorResponseBody {
	s.Content = v
	return s
}

func (s *RecallHonorResponseBody) SetErrorCode(v string) *RecallHonorResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RecallHonorResponseBody) SetErrorCtx(v map[string]interface{}) *RecallHonorResponseBody {
	s.ErrorCtx = v
	return s
}

func (s *RecallHonorResponseBody) SetErrorMsg(v string) *RecallHonorResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *RecallHonorResponseBody) SetHttpStatusCode(v int32) *RecallHonorResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RecallHonorResponseBody) SetRequestId(v string) *RecallHonorResponseBody {
	s.RequestId = &v
	return s
}

func (s *RecallHonorResponseBody) SetSuccess(v bool) *RecallHonorResponseBody {
	s.Success = &v
	return s
}

type RecallHonorResponseBodyContent struct {
	// example:
	//
	// success
	Data interface{} `json:"data,omitempty" xml:"data,omitempty"`
}

func (s RecallHonorResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorResponseBodyContent) GoString() string {
	return s.String()
}

func (s *RecallHonorResponseBodyContent) SetData(v interface{}) *RecallHonorResponseBodyContent {
	s.Data = v
	return s
}

type RecallHonorResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RecallHonorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RecallHonorResponse) String() string {
	return tea.Prettify(s)
}

func (s RecallHonorResponse) GoString() string {
	return s.String()
}

func (s *RecallHonorResponse) SetHeaders(v map[string]*string) *RecallHonorResponse {
	s.Headers = v
	return s
}

func (s *RecallHonorResponse) SetStatusCode(v int32) *RecallHonorResponse {
	s.StatusCode = &v
	return s
}

func (s *RecallHonorResponse) SetBody(v *RecallHonorResponseBody) *RecallHonorResponse {
	s.Body = v
	return s
}

type ReceiverListReportHeaders struct {
	CommonHeaders  map[string]*string                       `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *ReceiverListReportHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s ReceiverListReportHeaders) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportHeaders) GoString() string {
	return s.String()
}

func (s *ReceiverListReportHeaders) SetCommonHeaders(v map[string]*string) *ReceiverListReportHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ReceiverListReportHeaders) SetAccountContext(v *ReceiverListReportHeadersAccountContext) *ReceiverListReportHeaders {
	s.AccountContext = v
	return s
}

type ReceiverListReportHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s ReceiverListReportHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *ReceiverListReportHeadersAccountContext) SetAccountId(v string) *ReceiverListReportHeadersAccountContext {
	s.AccountId = &v
	return s
}

type ReceiverListReportShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s ReceiverListReportShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportShrinkHeaders) GoString() string {
	return s.String()
}

func (s *ReceiverListReportShrinkHeaders) SetCommonHeaders(v map[string]*string) *ReceiverListReportShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *ReceiverListReportShrinkHeaders) SetAccountContextShrink(v string) *ReceiverListReportShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type ReceiverListReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size          *int64                                  `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContext *ReceiverListReportRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s ReceiverListReportRequest) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportRequest) GoString() string {
	return s.String()
}

func (s *ReceiverListReportRequest) SetOffset(v int64) *ReceiverListReportRequest {
	s.Offset = &v
	return s
}

func (s *ReceiverListReportRequest) SetReportId(v string) *ReceiverListReportRequest {
	s.ReportId = &v
	return s
}

func (s *ReceiverListReportRequest) SetSize(v int64) *ReceiverListReportRequest {
	s.Size = &v
	return s
}

func (s *ReceiverListReportRequest) SetTenantContext(v *ReceiverListReportRequestTenantContext) *ReceiverListReportRequest {
	s.TenantContext = v
	return s
}

type ReceiverListReportRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s ReceiverListReportRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportRequestTenantContext) GoString() string {
	return s.String()
}

func (s *ReceiverListReportRequestTenantContext) SetTenantId(v string) *ReceiverListReportRequestTenantContext {
	s.TenantId = &v
	return s
}

type ReceiverListReportShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size                *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s ReceiverListReportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportShrinkRequest) GoString() string {
	return s.String()
}

func (s *ReceiverListReportShrinkRequest) SetOffset(v int64) *ReceiverListReportShrinkRequest {
	s.Offset = &v
	return s
}

func (s *ReceiverListReportShrinkRequest) SetReportId(v string) *ReceiverListReportShrinkRequest {
	s.ReportId = &v
	return s
}

func (s *ReceiverListReportShrinkRequest) SetSize(v int64) *ReceiverListReportShrinkRequest {
	s.Size = &v
	return s
}

func (s *ReceiverListReportShrinkRequest) SetTenantContextShrink(v string) *ReceiverListReportShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type ReceiverListReportResponseBody struct {
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 132131312312
	NextCursor *int64 `json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId  *string   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	UseridList []*string `json:"useridList,omitempty" xml:"useridList,omitempty" type:"Repeated"`
}

func (s ReceiverListReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportResponseBody) GoString() string {
	return s.String()
}

func (s *ReceiverListReportResponseBody) SetHasMore(v bool) *ReceiverListReportResponseBody {
	s.HasMore = &v
	return s
}

func (s *ReceiverListReportResponseBody) SetNextCursor(v int64) *ReceiverListReportResponseBody {
	s.NextCursor = &v
	return s
}

func (s *ReceiverListReportResponseBody) SetRequestId(v string) *ReceiverListReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReceiverListReportResponseBody) SetUseridList(v []*string) *ReceiverListReportResponseBody {
	s.UseridList = v
	return s
}

type ReceiverListReportResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReceiverListReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReceiverListReportResponse) String() string {
	return tea.Prettify(s)
}

func (s ReceiverListReportResponse) GoString() string {
	return s.String()
}

func (s *ReceiverListReportResponse) SetHeaders(v map[string]*string) *ReceiverListReportResponse {
	s.Headers = v
	return s
}

func (s *ReceiverListReportResponse) SetStatusCode(v int32) *ReceiverListReportResponse {
	s.StatusCode = &v
	return s
}

func (s *ReceiverListReportResponse) SetBody(v *ReceiverListReportResponseBody) *ReceiverListReportResponse {
	s.Body = v
	return s
}

type RedirectTaskHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *RedirectTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s RedirectTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s RedirectTaskHeaders) GoString() string {
	return s.String()
}

func (s *RedirectTaskHeaders) SetCommonHeaders(v map[string]*string) *RedirectTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RedirectTaskHeaders) SetAccountContext(v *RedirectTaskHeadersAccountContext) *RedirectTaskHeaders {
	s.AccountContext = v
	return s
}

type RedirectTaskHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s RedirectTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s RedirectTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *RedirectTaskHeadersAccountContext) SetAccountId(v string) *RedirectTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type RedirectTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s RedirectTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s RedirectTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *RedirectTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *RedirectTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RedirectTaskShrinkHeaders) SetAccountContextShrink(v string) *RedirectTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type RedirectTaskRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// y
	ByManager *string `json:"ByManager,omitempty" xml:"ByManager,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	NowActionExecutorId *string `json:"NowActionExecutorId,omitempty" xml:"NowActionExecutorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// instxxxx
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// remark
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	TaskId *int64 `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s RedirectTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RedirectTaskRequest) GoString() string {
	return s.String()
}

func (s *RedirectTaskRequest) SetAppType(v string) *RedirectTaskRequest {
	s.AppType = &v
	return s
}

func (s *RedirectTaskRequest) SetByManager(v string) *RedirectTaskRequest {
	s.ByManager = &v
	return s
}

func (s *RedirectTaskRequest) SetLanguage(v string) *RedirectTaskRequest {
	s.Language = &v
	return s
}

func (s *RedirectTaskRequest) SetNowActionExecutorId(v string) *RedirectTaskRequest {
	s.NowActionExecutorId = &v
	return s
}

func (s *RedirectTaskRequest) SetProcessInstanceId(v string) *RedirectTaskRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *RedirectTaskRequest) SetRemark(v string) *RedirectTaskRequest {
	s.Remark = &v
	return s
}

func (s *RedirectTaskRequest) SetSystemToken(v string) *RedirectTaskRequest {
	s.SystemToken = &v
	return s
}

func (s *RedirectTaskRequest) SetTaskId(v int64) *RedirectTaskRequest {
	s.TaskId = &v
	return s
}

type RedirectTaskResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s RedirectTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RedirectTaskResponseBody) GoString() string {
	return s.String()
}

func (s *RedirectTaskResponseBody) SetRequestId(v string) *RedirectTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *RedirectTaskResponseBody) SetVendorRequestId(v string) *RedirectTaskResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *RedirectTaskResponseBody) SetVendorType(v string) *RedirectTaskResponseBody {
	s.VendorType = &v
	return s
}

type RedirectTaskResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RedirectTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RedirectTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RedirectTaskResponse) GoString() string {
	return s.String()
}

func (s *RedirectTaskResponse) SetHeaders(v map[string]*string) *RedirectTaskResponse {
	s.Headers = v
	return s
}

func (s *RedirectTaskResponse) SetStatusCode(v int32) *RedirectTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *RedirectTaskResponse) SetBody(v *RedirectTaskResponseBody) *RedirectTaskResponse {
	s.Body = v
	return s
}

type RemoveAttendeeHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *RemoveAttendeeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s RemoveAttendeeHeaders) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeHeaders) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeHeaders) SetCommonHeaders(v map[string]*string) *RemoveAttendeeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RemoveAttendeeHeaders) SetAccountContext(v *RemoveAttendeeHeadersAccountContext) *RemoveAttendeeHeaders {
	s.AccountContext = v
	return s
}

type RemoveAttendeeHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 123456
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s RemoveAttendeeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeHeadersAccountContext) SetAccountId(v string) *RemoveAttendeeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type RemoveAttendeeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s RemoveAttendeeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeShrinkHeaders) SetCommonHeaders(v map[string]*string) *RemoveAttendeeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RemoveAttendeeShrinkHeaders) SetAccountContextShrink(v string) *RemoveAttendeeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type RemoveAttendeeRequest struct {
	AttendeesToRemove []*string `json:"AttendeesToRemove,omitempty" xml:"AttendeesToRemove,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// iiiP35sJadba8aBSgjrwPRKgiEiF
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
}

func (s RemoveAttendeeRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeRequest) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeRequest) SetAttendeesToRemove(v []*string) *RemoveAttendeeRequest {
	s.AttendeesToRemove = v
	return s
}

func (s *RemoveAttendeeRequest) SetCalendarId(v string) *RemoveAttendeeRequest {
	s.CalendarId = &v
	return s
}

func (s *RemoveAttendeeRequest) SetEventId(v string) *RemoveAttendeeRequest {
	s.EventId = &v
	return s
}

type RemoveAttendeeShrinkRequest struct {
	AttendeesToRemoveShrink *string `json:"AttendeesToRemove,omitempty" xml:"AttendeesToRemove,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// iiiP35sJadba8aBSgjrwPRKgiEiF
	EventId *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
}

func (s RemoveAttendeeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeShrinkRequest) SetAttendeesToRemoveShrink(v string) *RemoveAttendeeShrinkRequest {
	s.AttendeesToRemoveShrink = &v
	return s
}

func (s *RemoveAttendeeShrinkRequest) SetCalendarId(v string) *RemoveAttendeeShrinkRequest {
	s.CalendarId = &v
	return s
}

func (s *RemoveAttendeeShrinkRequest) SetEventId(v string) *RemoveAttendeeShrinkRequest {
	s.EventId = &v
	return s
}

type RemoveAttendeeResponseBody struct {
	Content *RemoveAttendeeResponseBodyContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	// example:
	//
	// success
	ErrorCode *string                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorCtx  map[string]interface{} `json:"ErrorCtx,omitempty" xml:"ErrorCtx,omitempty"`
	ErrorMsg  *string                `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	// RequestId
	//
	// example:
	//
	// A348BA5D-FFD4-57E4-9450-23A14D72F331
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// True
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RemoveAttendeeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeResponseBody) SetContent(v *RemoveAttendeeResponseBodyContent) *RemoveAttendeeResponseBody {
	s.Content = v
	return s
}

func (s *RemoveAttendeeResponseBody) SetErrorCode(v string) *RemoveAttendeeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *RemoveAttendeeResponseBody) SetErrorCtx(v map[string]interface{}) *RemoveAttendeeResponseBody {
	s.ErrorCtx = v
	return s
}

func (s *RemoveAttendeeResponseBody) SetErrorMsg(v string) *RemoveAttendeeResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *RemoveAttendeeResponseBody) SetHttpStatusCode(v int32) *RemoveAttendeeResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *RemoveAttendeeResponseBody) SetRequestId(v string) *RemoveAttendeeResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveAttendeeResponseBody) SetSuccess(v bool) *RemoveAttendeeResponseBody {
	s.Success = &v
	return s
}

type RemoveAttendeeResponseBodyContent struct {
	// example:
	//
	// []
	Data interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s RemoveAttendeeResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeResponseBodyContent) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeResponseBodyContent) SetData(v interface{}) *RemoveAttendeeResponseBodyContent {
	s.Data = v
	return s
}

type RemoveAttendeeResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveAttendeeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveAttendeeResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveAttendeeResponse) GoString() string {
	return s.String()
}

func (s *RemoveAttendeeResponse) SetHeaders(v map[string]*string) *RemoveAttendeeResponse {
	s.Headers = v
	return s
}

func (s *RemoveAttendeeResponse) SetStatusCode(v int32) *RemoveAttendeeResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveAttendeeResponse) SetBody(v *RemoveAttendeeResponseBody) *RemoveAttendeeResponse {
	s.Body = v
	return s
}

type RemoveMeetingRoomsHeaders struct {
	CommonHeaders  map[string]*string                       `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *RemoveMeetingRoomsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s RemoveMeetingRoomsHeaders) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsHeaders) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsHeaders) SetCommonHeaders(v map[string]*string) *RemoveMeetingRoomsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RemoveMeetingRoomsHeaders) SetAccountContext(v *RemoveMeetingRoomsHeadersAccountContext) *RemoveMeetingRoomsHeaders {
	s.AccountContext = v
	return s
}

type RemoveMeetingRoomsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s RemoveMeetingRoomsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsHeadersAccountContext) SetAccountId(v string) *RemoveMeetingRoomsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type RemoveMeetingRoomsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s RemoveMeetingRoomsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsShrinkHeaders) SetCommonHeaders(v map[string]*string) *RemoveMeetingRoomsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *RemoveMeetingRoomsShrinkHeaders) SetAccountContextShrink(v string) *RemoveMeetingRoomsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type RemoveMeetingRoomsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// U5Kxxxxx
	EventId              *string                                          `json:"EventId,omitempty" xml:"EventId,omitempty"`
	MeetingRoomsToRemove []*RemoveMeetingRoomsRequestMeetingRoomsToRemove `json:"MeetingRoomsToRemove,omitempty" xml:"MeetingRoomsToRemove,omitempty" type:"Repeated"`
}

func (s RemoveMeetingRoomsRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsRequest) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsRequest) SetCalendarId(v string) *RemoveMeetingRoomsRequest {
	s.CalendarId = &v
	return s
}

func (s *RemoveMeetingRoomsRequest) SetEventId(v string) *RemoveMeetingRoomsRequest {
	s.EventId = &v
	return s
}

func (s *RemoveMeetingRoomsRequest) SetMeetingRoomsToRemove(v []*RemoveMeetingRoomsRequestMeetingRoomsToRemove) *RemoveMeetingRoomsRequest {
	s.MeetingRoomsToRemove = v
	return s
}

type RemoveMeetingRoomsRequestMeetingRoomsToRemove struct {
	// This parameter is required.
	//
	// example:
	//
	// U5Kxxxxx
	RoomId *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
}

func (s RemoveMeetingRoomsRequestMeetingRoomsToRemove) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsRequestMeetingRoomsToRemove) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsRequestMeetingRoomsToRemove) SetRoomId(v string) *RemoveMeetingRoomsRequestMeetingRoomsToRemove {
	s.RoomId = &v
	return s
}

type RemoveMeetingRoomsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// primary
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// U5Kxxxxx
	EventId                    *string `json:"EventId,omitempty" xml:"EventId,omitempty"`
	MeetingRoomsToRemoveShrink *string `json:"MeetingRoomsToRemove,omitempty" xml:"MeetingRoomsToRemove,omitempty"`
}

func (s RemoveMeetingRoomsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsShrinkRequest) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsShrinkRequest) SetCalendarId(v string) *RemoveMeetingRoomsShrinkRequest {
	s.CalendarId = &v
	return s
}

func (s *RemoveMeetingRoomsShrinkRequest) SetEventId(v string) *RemoveMeetingRoomsShrinkRequest {
	s.EventId = &v
	return s
}

func (s *RemoveMeetingRoomsShrinkRequest) SetMeetingRoomsToRemoveShrink(v string) *RemoveMeetingRoomsShrinkRequest {
	s.MeetingRoomsToRemoveShrink = &v
	return s
}

type RemoveMeetingRoomsResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s RemoveMeetingRoomsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsResponseBody) SetRequestId(v string) *RemoveMeetingRoomsResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveMeetingRoomsResponseBody) SetResult(v bool) *RemoveMeetingRoomsResponseBody {
	s.Result = &v
	return s
}

type RemoveMeetingRoomsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveMeetingRoomsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveMeetingRoomsResponse) String() string {
	return tea.Prettify(s)
}

func (s RemoveMeetingRoomsResponse) GoString() string {
	return s.String()
}

func (s *RemoveMeetingRoomsResponse) SetHeaders(v map[string]*string) *RemoveMeetingRoomsResponse {
	s.Headers = v
	return s
}

func (s *RemoveMeetingRoomsResponse) SetStatusCode(v int32) *RemoveMeetingRoomsResponse {
	s.StatusCode = &v
	return s
}

func (s *RemoveMeetingRoomsResponse) SetBody(v *RemoveMeetingRoomsResponseBody) *RemoveMeetingRoomsResponse {
	s.Body = v
	return s
}

type SaveContentHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SaveContentHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SaveContentHeaders) String() string {
	return tea.Prettify(s)
}

func (s SaveContentHeaders) GoString() string {
	return s.String()
}

func (s *SaveContentHeaders) SetCommonHeaders(v map[string]*string) *SaveContentHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SaveContentHeaders) SetAccountContext(v *SaveContentHeadersAccountContext) *SaveContentHeaders {
	s.AccountContext = v
	return s
}

type SaveContentHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SaveContentHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SaveContentHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SaveContentHeadersAccountContext) SetAccountId(v string) *SaveContentHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SaveContentShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SaveContentShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SaveContentShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SaveContentShrinkHeaders) SetCommonHeaders(v map[string]*string) *SaveContentShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SaveContentShrinkHeaders) SetAccountContextShrink(v string) *SaveContentShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SaveContentRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// []
	Contents []*SaveContentRequestContents `json:"Contents,omitempty" xml:"Contents,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// client
	DdFrom *string `json:"DdFrom,omitempty" xml:"DdFrom,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// sdfafdsfsafdfsaf
	TemplateId    *string                          `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TenantContext *SaveContentRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s SaveContentRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveContentRequest) GoString() string {
	return s.String()
}

func (s *SaveContentRequest) SetContents(v []*SaveContentRequestContents) *SaveContentRequest {
	s.Contents = v
	return s
}

func (s *SaveContentRequest) SetDdFrom(v string) *SaveContentRequest {
	s.DdFrom = &v
	return s
}

func (s *SaveContentRequest) SetTemplateId(v string) *SaveContentRequest {
	s.TemplateId = &v
	return s
}

func (s *SaveContentRequest) SetTenantContext(v *SaveContentRequestTenantContext) *SaveContentRequest {
	s.TenantContext = v
	return s
}

type SaveContentRequestContents struct {
	// This parameter is required.
	//
	// example:
	//
	// ### 序号1
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// markdown
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 今日完成工作
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Sort *int64 `json:"Sort,omitempty" xml:"Sort,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SaveContentRequestContents) String() string {
	return tea.Prettify(s)
}

func (s SaveContentRequestContents) GoString() string {
	return s.String()
}

func (s *SaveContentRequestContents) SetContent(v string) *SaveContentRequestContents {
	s.Content = &v
	return s
}

func (s *SaveContentRequestContents) SetContentType(v string) *SaveContentRequestContents {
	s.ContentType = &v
	return s
}

func (s *SaveContentRequestContents) SetKey(v string) *SaveContentRequestContents {
	s.Key = &v
	return s
}

func (s *SaveContentRequestContents) SetSort(v int64) *SaveContentRequestContents {
	s.Sort = &v
	return s
}

func (s *SaveContentRequestContents) SetType(v int64) *SaveContentRequestContents {
	s.Type = &v
	return s
}

type SaveContentRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SaveContentRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SaveContentRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SaveContentRequestTenantContext) SetTenantId(v string) *SaveContentRequestTenantContext {
	s.TenantId = &v
	return s
}

type SaveContentShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// []
	ContentsShrink *string `json:"Contents,omitempty" xml:"Contents,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// client
	DdFrom *string `json:"DdFrom,omitempty" xml:"DdFrom,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// sdfafdsfsafdfsaf
	TemplateId          *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s SaveContentShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveContentShrinkRequest) GoString() string {
	return s.String()
}

func (s *SaveContentShrinkRequest) SetContentsShrink(v string) *SaveContentShrinkRequest {
	s.ContentsShrink = &v
	return s
}

func (s *SaveContentShrinkRequest) SetDdFrom(v string) *SaveContentShrinkRequest {
	s.DdFrom = &v
	return s
}

func (s *SaveContentShrinkRequest) SetTemplateId(v string) *SaveContentShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SaveContentShrinkRequest) SetTenantContextShrink(v string) *SaveContentShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type SaveContentResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s SaveContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveContentResponseBody) GoString() string {
	return s.String()
}

func (s *SaveContentResponseBody) SetRequestId(v string) *SaveContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveContentResponseBody) SetSuccess(v bool) *SaveContentResponseBody {
	s.Success = &v
	return s
}

type SaveContentResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveContentResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveContentResponse) GoString() string {
	return s.String()
}

func (s *SaveContentResponse) SetHeaders(v map[string]*string) *SaveContentResponse {
	s.Headers = v
	return s
}

func (s *SaveContentResponse) SetStatusCode(v int32) *SaveContentResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveContentResponse) SetBody(v *SaveContentResponseBody) *SaveContentResponse {
	s.Body = v
	return s
}

type SaveFormDataHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SaveFormDataHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SaveFormDataHeaders) String() string {
	return tea.Prettify(s)
}

func (s SaveFormDataHeaders) GoString() string {
	return s.String()
}

func (s *SaveFormDataHeaders) SetCommonHeaders(v map[string]*string) *SaveFormDataHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SaveFormDataHeaders) SetAccountContext(v *SaveFormDataHeadersAccountContext) *SaveFormDataHeaders {
	s.AccountContext = v
	return s
}

type SaveFormDataHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SaveFormDataHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SaveFormDataHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SaveFormDataHeadersAccountContext) SetAccountId(v string) *SaveFormDataHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SaveFormDataShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SaveFormDataShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SaveFormDataShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SaveFormDataShrinkHeaders) SetCommonHeaders(v map[string]*string) *SaveFormDataShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SaveFormDataShrinkHeaders) SetAccountContextShrink(v string) *SaveFormDataShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SaveFormDataRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {\"textField_jcpm6agt\": \"单行\",\"employeeField_jcos0sar\": [\"workno\"]}
	FormDataJson *string `json:"FormDataJson,omitempty" xml:"FormDataJson,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-EF6Y4G8WO2FN0SUB43TDQ3CGC3FMFQ1G9400RCJ3
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s SaveFormDataRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveFormDataRequest) GoString() string {
	return s.String()
}

func (s *SaveFormDataRequest) SetAppType(v string) *SaveFormDataRequest {
	s.AppType = &v
	return s
}

func (s *SaveFormDataRequest) SetFormDataJson(v string) *SaveFormDataRequest {
	s.FormDataJson = &v
	return s
}

func (s *SaveFormDataRequest) SetFormUuid(v string) *SaveFormDataRequest {
	s.FormUuid = &v
	return s
}

func (s *SaveFormDataRequest) SetLanguage(v string) *SaveFormDataRequest {
	s.Language = &v
	return s
}

func (s *SaveFormDataRequest) SetSystemToken(v string) *SaveFormDataRequest {
	s.SystemToken = &v
	return s
}

type SaveFormDataResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// FORM-EF6xxx
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SaveFormDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveFormDataResponseBody) GoString() string {
	return s.String()
}

func (s *SaveFormDataResponseBody) SetRequestId(v string) *SaveFormDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveFormDataResponseBody) SetResult(v string) *SaveFormDataResponseBody {
	s.Result = &v
	return s
}

func (s *SaveFormDataResponseBody) SetVendorRequestId(v string) *SaveFormDataResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SaveFormDataResponseBody) SetVendorType(v string) *SaveFormDataResponseBody {
	s.VendorType = &v
	return s
}

type SaveFormDataResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveFormDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveFormDataResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveFormDataResponse) GoString() string {
	return s.String()
}

func (s *SaveFormDataResponse) SetHeaders(v map[string]*string) *SaveFormDataResponse {
	s.Headers = v
	return s
}

func (s *SaveFormDataResponse) SetStatusCode(v int32) *SaveFormDataResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveFormDataResponse) SetBody(v *SaveFormDataResponseBody) *SaveFormDataResponse {
	s.Body = v
	return s
}

type SaveFormRemarkHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SaveFormRemarkHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SaveFormRemarkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SaveFormRemarkHeaders) GoString() string {
	return s.String()
}

func (s *SaveFormRemarkHeaders) SetCommonHeaders(v map[string]*string) *SaveFormRemarkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SaveFormRemarkHeaders) SetAccountContext(v *SaveFormRemarkHeadersAccountContext) *SaveFormRemarkHeaders {
	s.AccountContext = v
	return s
}

type SaveFormRemarkHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SaveFormRemarkHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SaveFormRemarkHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SaveFormRemarkHeadersAccountContext) SetAccountId(v string) *SaveFormRemarkHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SaveFormRemarkShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SaveFormRemarkShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SaveFormRemarkShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SaveFormRemarkShrinkHeaders) SetCommonHeaders(v map[string]*string) *SaveFormRemarkShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SaveFormRemarkShrinkHeaders) SetAccountContextShrink(v string) *SaveFormRemarkShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SaveFormRemarkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 123456
	AtUserId *string `json:"AtUserId,omitempty" xml:"AtUserId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// instxxxx
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// instxxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// hexxxx
	ReplyId *int64 `json:"ReplyId,omitempty" xml:"ReplyId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s SaveFormRemarkRequest) String() string {
	return tea.Prettify(s)
}

func (s SaveFormRemarkRequest) GoString() string {
	return s.String()
}

func (s *SaveFormRemarkRequest) SetAppType(v string) *SaveFormRemarkRequest {
	s.AppType = &v
	return s
}

func (s *SaveFormRemarkRequest) SetAtUserId(v string) *SaveFormRemarkRequest {
	s.AtUserId = &v
	return s
}

func (s *SaveFormRemarkRequest) SetContent(v string) *SaveFormRemarkRequest {
	s.Content = &v
	return s
}

func (s *SaveFormRemarkRequest) SetFormInstanceId(v string) *SaveFormRemarkRequest {
	s.FormInstanceId = &v
	return s
}

func (s *SaveFormRemarkRequest) SetLanguage(v string) *SaveFormRemarkRequest {
	s.Language = &v
	return s
}

func (s *SaveFormRemarkRequest) SetReplyId(v int64) *SaveFormRemarkRequest {
	s.ReplyId = &v
	return s
}

func (s *SaveFormRemarkRequest) SetSystemToken(v string) *SaveFormRemarkRequest {
	s.SystemToken = &v
	return s
}

type SaveFormRemarkResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	Result    *int64  `json:"result,omitempty" xml:"result,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SaveFormRemarkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SaveFormRemarkResponseBody) GoString() string {
	return s.String()
}

func (s *SaveFormRemarkResponseBody) SetRequestId(v string) *SaveFormRemarkResponseBody {
	s.RequestId = &v
	return s
}

func (s *SaveFormRemarkResponseBody) SetResult(v int64) *SaveFormRemarkResponseBody {
	s.Result = &v
	return s
}

func (s *SaveFormRemarkResponseBody) SetVendorRequestId(v string) *SaveFormRemarkResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SaveFormRemarkResponseBody) SetVendorType(v string) *SaveFormRemarkResponseBody {
	s.VendorType = &v
	return s
}

type SaveFormRemarkResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SaveFormRemarkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SaveFormRemarkResponse) String() string {
	return tea.Prettify(s)
}

func (s SaveFormRemarkResponse) GoString() string {
	return s.String()
}

func (s *SaveFormRemarkResponse) SetHeaders(v map[string]*string) *SaveFormRemarkResponse {
	s.Headers = v
	return s
}

func (s *SaveFormRemarkResponse) SetStatusCode(v int32) *SaveFormRemarkResponse {
	s.StatusCode = &v
	return s
}

func (s *SaveFormRemarkResponse) SetBody(v *SaveFormRemarkResponseBody) *SaveFormRemarkResponse {
	s.Body = v
	return s
}

type SearchEmployeeFieldValuesHeaders struct {
	CommonHeaders  map[string]*string                              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SearchEmployeeFieldValuesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SearchEmployeeFieldValuesHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchEmployeeFieldValuesHeaders) GoString() string {
	return s.String()
}

func (s *SearchEmployeeFieldValuesHeaders) SetCommonHeaders(v map[string]*string) *SearchEmployeeFieldValuesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchEmployeeFieldValuesHeaders) SetAccountContext(v *SearchEmployeeFieldValuesHeadersAccountContext) *SearchEmployeeFieldValuesHeaders {
	s.AccountContext = v
	return s
}

type SearchEmployeeFieldValuesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SearchEmployeeFieldValuesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SearchEmployeeFieldValuesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SearchEmployeeFieldValuesHeadersAccountContext) SetAccountId(v string) *SearchEmployeeFieldValuesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SearchEmployeeFieldValuesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SearchEmployeeFieldValuesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchEmployeeFieldValuesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SearchEmployeeFieldValuesShrinkHeaders) SetCommonHeaders(v map[string]*string) *SearchEmployeeFieldValuesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchEmployeeFieldValuesShrinkHeaders) SetAccountContextShrink(v string) *SearchEmployeeFieldValuesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SearchEmployeeFieldValuesRequest struct {
	// example:
	//
	// APP_PBKxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateFromTimeGMT *string `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-05-01
	CreateToTimeGMT *string `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// FORM-EF6Yxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// 2021-05-01
	ModifiedFromTimeGMT *string `json:"ModifiedFromTimeGMT,omitempty" xml:"ModifiedFromTimeGMT,omitempty"`
	// example:
	//
	// 2021-09-10
	ModifiedToTimeGMT *string `json:"ModifiedToTimeGMT,omitempty" xml:"ModifiedToTimeGMT,omitempty"`
	// example:
	//
	// 112212221
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// {\\"textField_annandfa\\":\\"1212\\"}
	SearchFieldJson *string `json:"SearchFieldJson,omitempty" xml:"SearchFieldJson,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// [\\"textField_xahdfna\\"]
	TargetFieldJson *string `json:"TargetFieldJson,omitempty" xml:"TargetFieldJson,omitempty"`
}

func (s SearchEmployeeFieldValuesRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchEmployeeFieldValuesRequest) GoString() string {
	return s.String()
}

func (s *SearchEmployeeFieldValuesRequest) SetAppType(v string) *SearchEmployeeFieldValuesRequest {
	s.AppType = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetCreateFromTimeGMT(v string) *SearchEmployeeFieldValuesRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetCreateToTimeGMT(v string) *SearchEmployeeFieldValuesRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetFormUuid(v string) *SearchEmployeeFieldValuesRequest {
	s.FormUuid = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetLanguage(v string) *SearchEmployeeFieldValuesRequest {
	s.Language = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetModifiedFromTimeGMT(v string) *SearchEmployeeFieldValuesRequest {
	s.ModifiedFromTimeGMT = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetModifiedToTimeGMT(v string) *SearchEmployeeFieldValuesRequest {
	s.ModifiedToTimeGMT = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetOriginatorId(v string) *SearchEmployeeFieldValuesRequest {
	s.OriginatorId = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetSearchFieldJson(v string) *SearchEmployeeFieldValuesRequest {
	s.SearchFieldJson = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetSystemToken(v string) *SearchEmployeeFieldValuesRequest {
	s.SystemToken = &v
	return s
}

func (s *SearchEmployeeFieldValuesRequest) SetTargetFieldJson(v string) *SearchEmployeeFieldValuesRequest {
	s.TargetFieldJson = &v
	return s
}

type SearchEmployeeFieldValuesResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// manager123
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SearchEmployeeFieldValuesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchEmployeeFieldValuesResponseBody) GoString() string {
	return s.String()
}

func (s *SearchEmployeeFieldValuesResponseBody) SetRequestId(v string) *SearchEmployeeFieldValuesResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchEmployeeFieldValuesResponseBody) SetResult(v string) *SearchEmployeeFieldValuesResponseBody {
	s.Result = &v
	return s
}

func (s *SearchEmployeeFieldValuesResponseBody) SetVendorRequestId(v string) *SearchEmployeeFieldValuesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SearchEmployeeFieldValuesResponseBody) SetVendorType(v string) *SearchEmployeeFieldValuesResponseBody {
	s.VendorType = &v
	return s
}

type SearchEmployeeFieldValuesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchEmployeeFieldValuesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchEmployeeFieldValuesResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchEmployeeFieldValuesResponse) GoString() string {
	return s.String()
}

func (s *SearchEmployeeFieldValuesResponse) SetHeaders(v map[string]*string) *SearchEmployeeFieldValuesResponse {
	s.Headers = v
	return s
}

func (s *SearchEmployeeFieldValuesResponse) SetStatusCode(v int32) *SearchEmployeeFieldValuesResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchEmployeeFieldValuesResponse) SetBody(v *SearchEmployeeFieldValuesResponseBody) *SearchEmployeeFieldValuesResponse {
	s.Body = v
	return s
}

type SearchFormDataIdListHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SearchFormDataIdListHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SearchFormDataIdListHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataIdListHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDataIdListHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDataIdListHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDataIdListHeaders) SetAccountContext(v *SearchFormDataIdListHeadersAccountContext) *SearchFormDataIdListHeaders {
	s.AccountContext = v
	return s
}

type SearchFormDataIdListHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SearchFormDataIdListHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataIdListHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SearchFormDataIdListHeadersAccountContext) SetAccountId(v string) *SearchFormDataIdListHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SearchFormDataIdListShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SearchFormDataIdListShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataIdListShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDataIdListShrinkHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDataIdListShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDataIdListShrinkHeaders) SetAccountContextShrink(v string) *SearchFormDataIdListShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SearchFormDataIdListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateFromTimeGMT *string `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateToTimeGMT *string `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// zh-CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedFromTimeGMT *string `json:"ModifiedFromTimeGMT,omitempty" xml:"ModifiedFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedToTimeGMT *string `json:"ModifiedToTimeGMT,omitempty" xml:"ModifiedToTimeGMT,omitempty"`
	// example:
	//
	// 012345
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// {}
	SearchFieldJson *string `json:"SearchFieldJson,omitempty" xml:"SearchFieldJson,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s SearchFormDataIdListRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataIdListRequest) GoString() string {
	return s.String()
}

func (s *SearchFormDataIdListRequest) SetAppType(v string) *SearchFormDataIdListRequest {
	s.AppType = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetCreateFromTimeGMT(v string) *SearchFormDataIdListRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetCreateToTimeGMT(v string) *SearchFormDataIdListRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetFormUuid(v string) *SearchFormDataIdListRequest {
	s.FormUuid = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetLanguage(v string) *SearchFormDataIdListRequest {
	s.Language = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetModifiedFromTimeGMT(v string) *SearchFormDataIdListRequest {
	s.ModifiedFromTimeGMT = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetModifiedToTimeGMT(v string) *SearchFormDataIdListRequest {
	s.ModifiedToTimeGMT = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetOriginatorId(v string) *SearchFormDataIdListRequest {
	s.OriginatorId = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetPageNumber(v int32) *SearchFormDataIdListRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetPageSize(v int32) *SearchFormDataIdListRequest {
	s.PageSize = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetSearchFieldJson(v string) *SearchFormDataIdListRequest {
	s.SearchFieldJson = &v
	return s
}

func (s *SearchFormDataIdListRequest) SetSystemToken(v string) *SearchFormDataIdListRequest {
	s.SystemToken = &v
	return s
}

type SearchFormDataIdListResponseBody struct {
	Data []*string `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SearchFormDataIdListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataIdListResponseBody) GoString() string {
	return s.String()
}

func (s *SearchFormDataIdListResponseBody) SetData(v []*string) *SearchFormDataIdListResponseBody {
	s.Data = v
	return s
}

func (s *SearchFormDataIdListResponseBody) SetPageNumber(v int64) *SearchFormDataIdListResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchFormDataIdListResponseBody) SetRequestId(v string) *SearchFormDataIdListResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchFormDataIdListResponseBody) SetTotalCount(v int64) *SearchFormDataIdListResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchFormDataIdListResponseBody) SetVendorRequestId(v string) *SearchFormDataIdListResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SearchFormDataIdListResponseBody) SetVendorType(v string) *SearchFormDataIdListResponseBody {
	s.VendorType = &v
	return s
}

type SearchFormDataIdListResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchFormDataIdListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchFormDataIdListResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataIdListResponse) GoString() string {
	return s.String()
}

func (s *SearchFormDataIdListResponse) SetHeaders(v map[string]*string) *SearchFormDataIdListResponse {
	s.Headers = v
	return s
}

func (s *SearchFormDataIdListResponse) SetStatusCode(v int32) *SearchFormDataIdListResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchFormDataIdListResponse) SetBody(v *SearchFormDataIdListResponseBody) *SearchFormDataIdListResponse {
	s.Body = v
	return s
}

type SearchFormDataSecondGenerationHeaders struct {
	CommonHeaders  map[string]*string                                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SearchFormDataSecondGenerationHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SearchFormDataSecondGenerationHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDataSecondGenerationHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDataSecondGenerationHeaders) SetAccountContext(v *SearchFormDataSecondGenerationHeadersAccountContext) *SearchFormDataSecondGenerationHeaders {
	s.AccountContext = v
	return s
}

type SearchFormDataSecondGenerationHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SearchFormDataSecondGenerationHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationHeadersAccountContext) SetAccountId(v string) *SearchFormDataSecondGenerationHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SearchFormDataSecondGenerationShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SearchFormDataSecondGenerationShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationShrinkHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDataSecondGenerationShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDataSecondGenerationShrinkHeaders) SetAccountContextShrink(v string) *SearchFormDataSecondGenerationShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SearchFormDataSecondGenerationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateFromTimeGMT *string `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateToTimeGMT *string `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedFromTimeGMT *string `json:"ModifiedFromTimeGMT,omitempty" xml:"ModifiedFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedToTimeGMT *string `json:"ModifiedToTimeGMT,omitempty" xml:"ModifiedToTimeGMT,omitempty"`
	// example:
	//
	// {}
	OrderConfigJson *string `json:"OrderConfigJson,omitempty" xml:"OrderConfigJson,omitempty"`
	// example:
	//
	// 012345
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// {}
	SearchCondition *string `json:"SearchCondition,omitempty" xml:"SearchCondition,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s SearchFormDataSecondGenerationRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationRequest) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationRequest) SetAppType(v string) *SearchFormDataSecondGenerationRequest {
	s.AppType = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetCreateFromTimeGMT(v string) *SearchFormDataSecondGenerationRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetCreateToTimeGMT(v string) *SearchFormDataSecondGenerationRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetFormUuid(v string) *SearchFormDataSecondGenerationRequest {
	s.FormUuid = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetModifiedFromTimeGMT(v string) *SearchFormDataSecondGenerationRequest {
	s.ModifiedFromTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetModifiedToTimeGMT(v string) *SearchFormDataSecondGenerationRequest {
	s.ModifiedToTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetOrderConfigJson(v string) *SearchFormDataSecondGenerationRequest {
	s.OrderConfigJson = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetOriginatorId(v string) *SearchFormDataSecondGenerationRequest {
	s.OriginatorId = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetPageNumber(v int32) *SearchFormDataSecondGenerationRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetPageSize(v int32) *SearchFormDataSecondGenerationRequest {
	s.PageSize = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetSearchCondition(v string) *SearchFormDataSecondGenerationRequest {
	s.SearchCondition = &v
	return s
}

func (s *SearchFormDataSecondGenerationRequest) SetSystemToken(v string) *SearchFormDataSecondGenerationRequest {
	s.SystemToken = &v
	return s
}

type SearchFormDataSecondGenerationResponseBody struct {
	Data []*SearchFormDataSecondGenerationResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SearchFormDataSecondGenerationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationResponseBody) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationResponseBody) SetData(v []*SearchFormDataSecondGenerationResponseBodyData) *SearchFormDataSecondGenerationResponseBody {
	s.Data = v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBody) SetPageNumber(v int64) *SearchFormDataSecondGenerationResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBody) SetRequestId(v string) *SearchFormDataSecondGenerationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBody) SetTotalCount(v int64) *SearchFormDataSecondGenerationResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBody) SetVendorRequestId(v string) *SearchFormDataSecondGenerationResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBody) SetVendorType(v string) *SearchFormDataSecondGenerationResponseBody {
	s.VendorType = &v
	return s
}

type SearchFormDataSecondGenerationResponseBodyData struct {
	// example:
	//
	// 2021-05-01 10:10:10
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// 012345
	CreatorUserId *string                `json:"CreatorUserId,omitempty" xml:"CreatorUserId,omitempty"`
	FormData      map[string]interface{} `json:"FormData,omitempty" xml:"FormData,omitempty"`
	// example:
	//
	// FINST-xxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// FORM-xxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// 1023
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// {}
	InstanceValue *string `json:"InstanceValue,omitempty" xml:"InstanceValue,omitempty"`
	// example:
	//
	// 2021-05-01 10:10:10
	ModifiedTimeGMT *string                                                   `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
	Modifier        *string                                                   `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	ModifyUser      *SearchFormDataSecondGenerationResponseBodyDataModifyUser `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty" type:"Struct"`
	Originator      *SearchFormDataSecondGenerationResponseBodyDataOriginator `json:"Originator,omitempty" xml:"Originator,omitempty" type:"Struct"`
	// example:
	//
	// 1
	Sequence *string `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// example:
	//
	// sagc1b3090d
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Title        *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 3
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s SearchFormDataSecondGenerationResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetCreateTimeGMT(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetCreatorUserId(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.CreatorUserId = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetFormData(v map[string]interface{}) *SearchFormDataSecondGenerationResponseBodyData {
	s.FormData = v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetFormInstanceId(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.FormInstanceId = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetFormUuid(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.FormUuid = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetId(v int64) *SearchFormDataSecondGenerationResponseBodyData {
	s.Id = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetInstanceValue(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.InstanceValue = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetModifiedTimeGMT(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetModifier(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.Modifier = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetModifyUser(v *SearchFormDataSecondGenerationResponseBodyDataModifyUser) *SearchFormDataSecondGenerationResponseBodyData {
	s.ModifyUser = v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetOriginator(v *SearchFormDataSecondGenerationResponseBodyDataOriginator) *SearchFormDataSecondGenerationResponseBodyData {
	s.Originator = v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetSequence(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.Sequence = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetSerialNumber(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.SerialNumber = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetTitle(v string) *SearchFormDataSecondGenerationResponseBodyData {
	s.Title = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyData) SetVersion(v int64) *SearchFormDataSecondGenerationResponseBodyData {
	s.Version = &v
	return s
}

type SearchFormDataSecondGenerationResponseBodyDataModifyUser struct {
	Name *SearchFormDataSecondGenerationResponseBodyDataModifyUserName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchFormDataSecondGenerationResponseBodyDataModifyUser) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationResponseBodyDataModifyUser) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationResponseBodyDataModifyUser) SetName(v *SearchFormDataSecondGenerationResponseBodyDataModifyUserName) *SearchFormDataSecondGenerationResponseBodyDataModifyUser {
	s.Name = v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyDataModifyUser) SetUserId(v string) *SearchFormDataSecondGenerationResponseBodyDataModifyUser {
	s.UserId = &v
	return s
}

type SearchFormDataSecondGenerationResponseBodyDataModifyUserName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// English
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
}

func (s SearchFormDataSecondGenerationResponseBodyDataModifyUserName) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationResponseBodyDataModifyUserName) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationResponseBodyDataModifyUserName) SetNameInChinese(v string) *SearchFormDataSecondGenerationResponseBodyDataModifyUserName {
	s.NameInChinese = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyDataModifyUserName) SetNameInEnglish(v string) *SearchFormDataSecondGenerationResponseBodyDataModifyUserName {
	s.NameInEnglish = &v
	return s
}

type SearchFormDataSecondGenerationResponseBodyDataOriginator struct {
	Name *SearchFormDataSecondGenerationResponseBodyDataOriginatorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchFormDataSecondGenerationResponseBodyDataOriginator) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationResponseBodyDataOriginator) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationResponseBodyDataOriginator) SetName(v *SearchFormDataSecondGenerationResponseBodyDataOriginatorName) *SearchFormDataSecondGenerationResponseBodyDataOriginator {
	s.Name = v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyDataOriginator) SetUserId(v string) *SearchFormDataSecondGenerationResponseBodyDataOriginator {
	s.UserId = &v
	return s
}

type SearchFormDataSecondGenerationResponseBodyDataOriginatorName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// English
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
}

func (s SearchFormDataSecondGenerationResponseBodyDataOriginatorName) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationResponseBodyDataOriginatorName) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationResponseBodyDataOriginatorName) SetNameInChinese(v string) *SearchFormDataSecondGenerationResponseBodyDataOriginatorName {
	s.NameInChinese = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponseBodyDataOriginatorName) SetNameInEnglish(v string) *SearchFormDataSecondGenerationResponseBodyDataOriginatorName {
	s.NameInEnglish = &v
	return s
}

type SearchFormDataSecondGenerationResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchFormDataSecondGenerationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchFormDataSecondGenerationResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationResponse) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationResponse) SetHeaders(v map[string]*string) *SearchFormDataSecondGenerationResponse {
	s.Headers = v
	return s
}

func (s *SearchFormDataSecondGenerationResponse) SetStatusCode(v int32) *SearchFormDataSecondGenerationResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchFormDataSecondGenerationResponse) SetBody(v *SearchFormDataSecondGenerationResponseBody) *SearchFormDataSecondGenerationResponse {
	s.Body = v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldHeaders struct {
	CommonHeaders  map[string]*string                                               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SearchFormDataSecondGenerationNoTableFieldHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDataSecondGenerationNoTableFieldHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldHeaders) SetAccountContext(v *SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext) *SearchFormDataSecondGenerationNoTableFieldHeaders {
	s.AccountContext = v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext) SetAccountId(v string) *SearchFormDataSecondGenerationNoTableFieldHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldShrinkHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDataSecondGenerationNoTableFieldShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldShrinkHeaders) SetAccountContextShrink(v string) *SearchFormDataSecondGenerationNoTableFieldShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateFromTimeGMT *string `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateToTimeGMT *string `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedFromTimeGMT *string `json:"ModifiedFromTimeGMT,omitempty" xml:"ModifiedFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedToTimeGMT *string `json:"ModifiedToTimeGMT,omitempty" xml:"ModifiedToTimeGMT,omitempty"`
	// example:
	//
	// {}
	OrderConfigJson *string `json:"OrderConfigJson,omitempty" xml:"OrderConfigJson,omitempty"`
	// example:
	//
	// 012345
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 20
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// {}
	SearchCondition *string `json:"SearchCondition,omitempty" xml:"SearchCondition,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldRequest) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetAppType(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.AppType = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetCreateFromTimeGMT(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetCreateToTimeGMT(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetFormUuid(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.FormUuid = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetModifiedFromTimeGMT(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.ModifiedFromTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetModifiedToTimeGMT(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.ModifiedToTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetOrderConfigJson(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.OrderConfigJson = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetOriginatorId(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.OriginatorId = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetPageNumber(v int32) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetPageSize(v int32) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.PageSize = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetSearchCondition(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.SearchCondition = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldRequest) SetSystemToken(v string) *SearchFormDataSecondGenerationNoTableFieldRequest {
	s.SystemToken = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldResponseBody struct {
	Data []*SearchFormDataSecondGenerationNoTableFieldResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNumber *int64 `json:"pageNumber,omitempty" xml:"pageNumber,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int64 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBody) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBody) SetData(v []*SearchFormDataSecondGenerationNoTableFieldResponseBodyData) *SearchFormDataSecondGenerationNoTableFieldResponseBody {
	s.Data = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBody) SetPageNumber(v int64) *SearchFormDataSecondGenerationNoTableFieldResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBody) SetRequestId(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBody) SetTotalCount(v int64) *SearchFormDataSecondGenerationNoTableFieldResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBody) SetVendorRequestId(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBody) SetVendorType(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBody {
	s.VendorType = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldResponseBodyData struct {
	// example:
	//
	// 2021-05-01 10:10:10
	CreateTimeGMT *string `json:"CreateTimeGMT,omitempty" xml:"CreateTimeGMT,omitempty"`
	// example:
	//
	// 012345
	CreatorUserId *string                `json:"CreatorUserId,omitempty" xml:"CreatorUserId,omitempty"`
	FormData      map[string]interface{} `json:"FormData,omitempty" xml:"FormData,omitempty"`
	// example:
	//
	// FINST-xxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// FORM-xxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// 54114
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// {}
	InstanceValue *string `json:"InstanceValue,omitempty" xml:"InstanceValue,omitempty"`
	// example:
	//
	// 2021-05-01 10:10:10
	ModifiedTimeGMT *string                                                               `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
	Modifier        *string                                                               `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	ModifyUser      *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty" type:"Struct"`
	Originator      *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator `json:"Originator,omitempty" xml:"Originator,omitempty" type:"Struct"`
	// example:
	//
	// 1
	Sequence *string `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// example:
	//
	// 7CE737P1SS
	SerialNumber *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Title        *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 3
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetCreateTimeGMT(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.CreateTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetCreatorUserId(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.CreatorUserId = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetFormData(v map[string]interface{}) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.FormData = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetFormInstanceId(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.FormInstanceId = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetFormUuid(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.FormUuid = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetId(v int64) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.Id = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetInstanceValue(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.InstanceValue = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetModifiedTimeGMT(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetModifier(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.Modifier = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetModifyUser(v *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.ModifyUser = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetOriginator(v *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.Originator = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetSequence(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.Sequence = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetSerialNumber(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.SerialNumber = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetTitle(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.Title = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyData) SetVersion(v int64) *SearchFormDataSecondGenerationNoTableFieldResponseBodyData {
	s.Version = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser struct {
	Name *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser) SetName(v *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser {
	s.Name = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser) SetUserId(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUser {
	s.UserId = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// English
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName) SetNameInChinese(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName {
	s.NameInChinese = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName) SetNameInEnglish(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataModifyUserName {
	s.NameInEnglish = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator struct {
	Name *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName `json:"Name,omitempty" xml:"Name,omitempty" type:"Struct"`
	// example:
	//
	// 012345
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator) SetName(v *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator {
	s.Name = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator) SetUserId(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginator {
	s.UserId = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// English
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName) SetNameInChinese(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName {
	s.NameInChinese = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName) SetNameInEnglish(v string) *SearchFormDataSecondGenerationNoTableFieldResponseBodyDataOriginatorName {
	s.NameInEnglish = &v
	return s
}

type SearchFormDataSecondGenerationNoTableFieldResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchFormDataSecondGenerationNoTableFieldResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchFormDataSecondGenerationNoTableFieldResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDataSecondGenerationNoTableFieldResponse) GoString() string {
	return s.String()
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponse) SetHeaders(v map[string]*string) *SearchFormDataSecondGenerationNoTableFieldResponse {
	s.Headers = v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponse) SetStatusCode(v int32) *SearchFormDataSecondGenerationNoTableFieldResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchFormDataSecondGenerationNoTableFieldResponse) SetBody(v *SearchFormDataSecondGenerationNoTableFieldResponseBody) *SearchFormDataSecondGenerationNoTableFieldResponse {
	s.Body = v
	return s
}

type SearchFormDatasHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SearchFormDatasHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SearchFormDatasHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDatasHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDatasHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDatasHeaders) SetAccountContext(v *SearchFormDatasHeadersAccountContext) *SearchFormDatasHeaders {
	s.AccountContext = v
	return s
}

type SearchFormDatasHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SearchFormDatasHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SearchFormDatasHeadersAccountContext) SetAccountId(v string) *SearchFormDatasHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SearchFormDatasShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SearchFormDatasShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SearchFormDatasShrinkHeaders) SetCommonHeaders(v map[string]*string) *SearchFormDatasShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchFormDatasShrinkHeaders) SetAccountContextShrink(v string) *SearchFormDatasShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SearchFormDatasRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// APP_PBKT0xxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateFromTimeGMT *string `json:"CreateFromTimeGMT,omitempty" xml:"CreateFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	CreateToTimeGMT *string `json:"CreateToTimeGMT,omitempty" xml:"CreateToTimeGMT,omitempty"`
	// example:
	//
	// 20
	CurrentPage *int32 `json:"CurrentPage,omitempty" xml:"CurrentPage,omitempty"`
	// example:
	//
	// 20
	DynamicOrder *string `json:"DynamicOrder,omitempty" xml:"DynamicOrder,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// FORM-xxxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// en_US
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedFromTimeGMT *string `json:"ModifiedFromTimeGMT,omitempty" xml:"ModifiedFromTimeGMT,omitempty"`
	// example:
	//
	// yyyy-MM-dd
	ModifiedToTimeGMT *string `json:"ModifiedToTimeGMT,omitempty" xml:"ModifiedToTimeGMT,omitempty"`
	// example:
	//
	// 012345
	OriginatorId *string `json:"OriginatorId,omitempty" xml:"OriginatorId,omitempty"`
	// example:
	//
	// 20
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchFieldJson *string `json:"SearchFieldJson,omitempty" xml:"SearchFieldJson,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s SearchFormDatasRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasRequest) GoString() string {
	return s.String()
}

func (s *SearchFormDatasRequest) SetAppType(v string) *SearchFormDatasRequest {
	s.AppType = &v
	return s
}

func (s *SearchFormDatasRequest) SetCreateFromTimeGMT(v string) *SearchFormDatasRequest {
	s.CreateFromTimeGMT = &v
	return s
}

func (s *SearchFormDatasRequest) SetCreateToTimeGMT(v string) *SearchFormDatasRequest {
	s.CreateToTimeGMT = &v
	return s
}

func (s *SearchFormDatasRequest) SetCurrentPage(v int32) *SearchFormDatasRequest {
	s.CurrentPage = &v
	return s
}

func (s *SearchFormDatasRequest) SetDynamicOrder(v string) *SearchFormDatasRequest {
	s.DynamicOrder = &v
	return s
}

func (s *SearchFormDatasRequest) SetFormUuid(v string) *SearchFormDatasRequest {
	s.FormUuid = &v
	return s
}

func (s *SearchFormDatasRequest) SetLanguage(v string) *SearchFormDatasRequest {
	s.Language = &v
	return s
}

func (s *SearchFormDatasRequest) SetModifiedFromTimeGMT(v string) *SearchFormDatasRequest {
	s.ModifiedFromTimeGMT = &v
	return s
}

func (s *SearchFormDatasRequest) SetModifiedToTimeGMT(v string) *SearchFormDatasRequest {
	s.ModifiedToTimeGMT = &v
	return s
}

func (s *SearchFormDatasRequest) SetOriginatorId(v string) *SearchFormDatasRequest {
	s.OriginatorId = &v
	return s
}

func (s *SearchFormDatasRequest) SetPageSize(v int32) *SearchFormDatasRequest {
	s.PageSize = &v
	return s
}

func (s *SearchFormDatasRequest) SetSearchFieldJson(v string) *SearchFormDatasRequest {
	s.SearchFieldJson = &v
	return s
}

func (s *SearchFormDatasRequest) SetSystemToken(v string) *SearchFormDatasRequest {
	s.SystemToken = &v
	return s
}

type SearchFormDatasResponseBody struct {
	// example:
	//
	// 1
	CurrentPage *int32                             `json:"currentPage,omitempty" xml:"currentPage,omitempty"`
	Data        []*SearchFormDatasResponseBodyData `json:"data,omitempty" xml:"data,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	TotalCount *int32 `json:"totalCount,omitempty" xml:"totalCount,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SearchFormDatasResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasResponseBody) GoString() string {
	return s.String()
}

func (s *SearchFormDatasResponseBody) SetCurrentPage(v int32) *SearchFormDatasResponseBody {
	s.CurrentPage = &v
	return s
}

func (s *SearchFormDatasResponseBody) SetData(v []*SearchFormDatasResponseBodyData) *SearchFormDatasResponseBody {
	s.Data = v
	return s
}

func (s *SearchFormDatasResponseBody) SetRequestId(v string) *SearchFormDatasResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchFormDatasResponseBody) SetTotalCount(v int32) *SearchFormDatasResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchFormDatasResponseBody) SetVendorRequestId(v string) *SearchFormDatasResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SearchFormDatasResponseBody) SetVendorType(v string) *SearchFormDatasResponseBody {
	s.VendorType = &v
	return s
}

type SearchFormDatasResponseBodyData struct {
	// example:
	//
	// 2018-01-24 11:22:01
	CreatedTimeGMT *string `json:"CreatedTimeGMT,omitempty" xml:"CreatedTimeGMT,omitempty"`
	// example:
	//
	// 012345
	CreatorUserId *string `json:"CreatorUserId,omitempty" xml:"CreatorUserId,omitempty"`
	// example:
	//
	// 1002
	DataId   *int64                 `json:"DataId,omitempty" xml:"DataId,omitempty"`
	FormData map[string]interface{} `json:"FormData,omitempty" xml:"FormData,omitempty"`
	// example:
	//
	// FINST-BNKJDRF
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// FORM-EF6Y93URN24F1SCX15VA2P918LPEIJ2H3UFORCJ1
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// {}
	InstanceValue *string `json:"InstanceValue,omitempty" xml:"InstanceValue,omitempty"`
	// example:
	//
	// FORM-EF6Y93URN24F1SCX15VA2P918LPEIJ2H3UFORCJ1
	ModelUuid *string `json:"ModelUuid,omitempty" xml:"ModelUuid,omitempty"`
	// example:
	//
	// 2018-01-24 11:22:01
	ModifiedTimeGMT *string `json:"ModifiedTimeGMT,omitempty" xml:"ModifiedTimeGMT,omitempty"`
	// example:
	//
	// 012345
	ModifierUserId *string                                    `json:"ModifierUserId,omitempty" xml:"ModifierUserId,omitempty"`
	ModifyUser     *SearchFormDatasResponseBodyDataModifyUser `json:"ModifyUser,omitempty" xml:"ModifyUser,omitempty" type:"Struct"`
	Originator     *SearchFormDatasResponseBodyDataOriginator `json:"Originator,omitempty" xml:"Originator,omitempty" type:"Struct"`
	// example:
	//
	// 1
	Sequence *string `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	// example:
	//
	// 231008101012015353
	SerialNo *string `json:"SerialNo,omitempty" xml:"SerialNo,omitempty"`
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// 3
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s SearchFormDatasResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasResponseBodyData) GoString() string {
	return s.String()
}

func (s *SearchFormDatasResponseBodyData) SetCreatedTimeGMT(v string) *SearchFormDatasResponseBodyData {
	s.CreatedTimeGMT = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetCreatorUserId(v string) *SearchFormDatasResponseBodyData {
	s.CreatorUserId = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetDataId(v int64) *SearchFormDatasResponseBodyData {
	s.DataId = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetFormData(v map[string]interface{}) *SearchFormDatasResponseBodyData {
	s.FormData = v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetFormInstanceId(v string) *SearchFormDatasResponseBodyData {
	s.FormInstanceId = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetFormUuid(v string) *SearchFormDatasResponseBodyData {
	s.FormUuid = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetInstanceValue(v string) *SearchFormDatasResponseBodyData {
	s.InstanceValue = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetModelUuid(v string) *SearchFormDatasResponseBodyData {
	s.ModelUuid = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetModifiedTimeGMT(v string) *SearchFormDatasResponseBodyData {
	s.ModifiedTimeGMT = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetModifierUserId(v string) *SearchFormDatasResponseBodyData {
	s.ModifierUserId = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetModifyUser(v *SearchFormDatasResponseBodyDataModifyUser) *SearchFormDatasResponseBodyData {
	s.ModifyUser = v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetOriginator(v *SearchFormDatasResponseBodyDataOriginator) *SearchFormDatasResponseBodyData {
	s.Originator = v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetSequence(v string) *SearchFormDatasResponseBodyData {
	s.Sequence = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetSerialNo(v string) *SearchFormDatasResponseBodyData {
	s.SerialNo = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetTitle(v string) *SearchFormDatasResponseBodyData {
	s.Title = &v
	return s
}

func (s *SearchFormDatasResponseBodyData) SetVersion(v int64) *SearchFormDatasResponseBodyData {
	s.Version = &v
	return s
}

type SearchFormDatasResponseBodyDataModifyUser struct {
	// example:
	//
	// 012345
	UserId   *string                                            `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName *SearchFormDatasResponseBodyDataModifyUserUserName `json:"UserName,omitempty" xml:"UserName,omitempty" type:"Struct"`
}

func (s SearchFormDatasResponseBodyDataModifyUser) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasResponseBodyDataModifyUser) GoString() string {
	return s.String()
}

func (s *SearchFormDatasResponseBodyDataModifyUser) SetUserId(v string) *SearchFormDatasResponseBodyDataModifyUser {
	s.UserId = &v
	return s
}

func (s *SearchFormDatasResponseBodyDataModifyUser) SetUserName(v *SearchFormDatasResponseBodyDataModifyUserUserName) *SearchFormDatasResponseBodyDataModifyUser {
	s.UserName = v
	return s
}

type SearchFormDatasResponseBodyDataModifyUserUserName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// EngilishName
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// ZH-CN
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchFormDatasResponseBodyDataModifyUserUserName) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasResponseBodyDataModifyUserUserName) GoString() string {
	return s.String()
}

func (s *SearchFormDatasResponseBodyDataModifyUserUserName) SetNameInChinese(v string) *SearchFormDatasResponseBodyDataModifyUserUserName {
	s.NameInChinese = &v
	return s
}

func (s *SearchFormDatasResponseBodyDataModifyUserUserName) SetNameInEnglish(v string) *SearchFormDatasResponseBodyDataModifyUserUserName {
	s.NameInEnglish = &v
	return s
}

func (s *SearchFormDatasResponseBodyDataModifyUserUserName) SetType(v string) *SearchFormDatasResponseBodyDataModifyUserUserName {
	s.Type = &v
	return s
}

type SearchFormDatasResponseBodyDataOriginator struct {
	// example:
	//
	// 012345
	UserId   *string                                            `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName *SearchFormDatasResponseBodyDataOriginatorUserName `json:"UserName,omitempty" xml:"UserName,omitempty" type:"Struct"`
}

func (s SearchFormDatasResponseBodyDataOriginator) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasResponseBodyDataOriginator) GoString() string {
	return s.String()
}

func (s *SearchFormDatasResponseBodyDataOriginator) SetUserId(v string) *SearchFormDatasResponseBodyDataOriginator {
	s.UserId = &v
	return s
}

func (s *SearchFormDatasResponseBodyDataOriginator) SetUserName(v *SearchFormDatasResponseBodyDataOriginatorUserName) *SearchFormDatasResponseBodyDataOriginator {
	s.UserName = v
	return s
}

type SearchFormDatasResponseBodyDataOriginatorUserName struct {
	NameInChinese *string `json:"NameInChinese,omitempty" xml:"NameInChinese,omitempty"`
	// example:
	//
	// EngilishName
	NameInEnglish *string `json:"NameInEnglish,omitempty" xml:"NameInEnglish,omitempty"`
	// example:
	//
	// ZH-CN
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchFormDatasResponseBodyDataOriginatorUserName) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasResponseBodyDataOriginatorUserName) GoString() string {
	return s.String()
}

func (s *SearchFormDatasResponseBodyDataOriginatorUserName) SetNameInChinese(v string) *SearchFormDatasResponseBodyDataOriginatorUserName {
	s.NameInChinese = &v
	return s
}

func (s *SearchFormDatasResponseBodyDataOriginatorUserName) SetNameInEnglish(v string) *SearchFormDatasResponseBodyDataOriginatorUserName {
	s.NameInEnglish = &v
	return s
}

func (s *SearchFormDatasResponseBodyDataOriginatorUserName) SetType(v string) *SearchFormDatasResponseBodyDataOriginatorUserName {
	s.Type = &v
	return s
}

type SearchFormDatasResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchFormDatasResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchFormDatasResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchFormDatasResponse) GoString() string {
	return s.String()
}

func (s *SearchFormDatasResponse) SetHeaders(v map[string]*string) *SearchFormDatasResponse {
	s.Headers = v
	return s
}

func (s *SearchFormDatasResponse) SetStatusCode(v int32) *SearchFormDatasResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchFormDatasResponse) SetBody(v *SearchFormDatasResponseBody) *SearchFormDatasResponse {
	s.Body = v
	return s
}

type SearchInnerGroupsHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SearchInnerGroupsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SearchInnerGroupsHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchInnerGroupsHeaders) GoString() string {
	return s.String()
}

func (s *SearchInnerGroupsHeaders) SetCommonHeaders(v map[string]*string) *SearchInnerGroupsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchInnerGroupsHeaders) SetAccountContext(v *SearchInnerGroupsHeadersAccountContext) *SearchInnerGroupsHeaders {
	s.AccountContext = v
	return s
}

type SearchInnerGroupsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SearchInnerGroupsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SearchInnerGroupsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SearchInnerGroupsHeadersAccountContext) SetAccountId(v string) *SearchInnerGroupsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SearchInnerGroupsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SearchInnerGroupsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SearchInnerGroupsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SearchInnerGroupsShrinkHeaders) SetCommonHeaders(v map[string]*string) *SearchInnerGroupsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SearchInnerGroupsShrinkHeaders) SetAccountContextShrink(v string) *SearchInnerGroupsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SearchInnerGroupsRequest struct {
	// example:
	//
	// 100
	MaxResults *int32  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	SearchKey  *string `json:"SearchKey,omitempty" xml:"SearchKey,omitempty"`
}

func (s SearchInnerGroupsRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchInnerGroupsRequest) GoString() string {
	return s.String()
}

func (s *SearchInnerGroupsRequest) SetMaxResults(v int32) *SearchInnerGroupsRequest {
	s.MaxResults = &v
	return s
}

func (s *SearchInnerGroupsRequest) SetSearchKey(v string) *SearchInnerGroupsRequest {
	s.SearchKey = &v
	return s
}

type SearchInnerGroupsResponseBody struct {
	GroupInfos []*SearchInnerGroupsResponseBodyGroupInfos `json:"groupInfos,omitempty" xml:"groupInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SearchInnerGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchInnerGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *SearchInnerGroupsResponseBody) SetGroupInfos(v []*SearchInnerGroupsResponseBodyGroupInfos) *SearchInnerGroupsResponseBody {
	s.GroupInfos = v
	return s
}

func (s *SearchInnerGroupsResponseBody) SetRequestId(v string) *SearchInnerGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchInnerGroupsResponseBody) SetVendorRequestId(v string) *SearchInnerGroupsResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SearchInnerGroupsResponseBody) SetVendorType(v string) *SearchInnerGroupsResponseBody {
	s.VendorType = &v
	return s
}

type SearchInnerGroupsResponseBodyGroupInfos struct {
	// example:
	//
	// @lAD*****
	Icon *string `json:"Icon,omitempty" xml:"Icon,omitempty"`
	// example:
	//
	// 10
	MemberAmount *string `json:"MemberAmount,omitempty" xml:"MemberAmount,omitempty"`
	// example:
	//
	// cid13*****==
	OpenConversationId *string `json:"OpenConversationId,omitempty" xml:"OpenConversationId,omitempty"`
	Title              *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SearchInnerGroupsResponseBodyGroupInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchInnerGroupsResponseBodyGroupInfos) GoString() string {
	return s.String()
}

func (s *SearchInnerGroupsResponseBodyGroupInfos) SetIcon(v string) *SearchInnerGroupsResponseBodyGroupInfos {
	s.Icon = &v
	return s
}

func (s *SearchInnerGroupsResponseBodyGroupInfos) SetMemberAmount(v string) *SearchInnerGroupsResponseBodyGroupInfos {
	s.MemberAmount = &v
	return s
}

func (s *SearchInnerGroupsResponseBodyGroupInfos) SetOpenConversationId(v string) *SearchInnerGroupsResponseBodyGroupInfos {
	s.OpenConversationId = &v
	return s
}

func (s *SearchInnerGroupsResponseBodyGroupInfos) SetTitle(v string) *SearchInnerGroupsResponseBodyGroupInfos {
	s.Title = &v
	return s
}

type SearchInnerGroupsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchInnerGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchInnerGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchInnerGroupsResponse) GoString() string {
	return s.String()
}

func (s *SearchInnerGroupsResponse) SetHeaders(v map[string]*string) *SearchInnerGroupsResponse {
	s.Headers = v
	return s
}

func (s *SearchInnerGroupsResponse) SetStatusCode(v int32) *SearchInnerGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchInnerGroupsResponse) SetBody(v *SearchInnerGroupsResponseBody) *SearchInnerGroupsResponse {
	s.Body = v
	return s
}

type SendBannerHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SendBannerHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SendBannerHeaders) String() string {
	return tea.Prettify(s)
}

func (s SendBannerHeaders) GoString() string {
	return s.String()
}

func (s *SendBannerHeaders) SetCommonHeaders(v map[string]*string) *SendBannerHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SendBannerHeaders) SetAccountContext(v *SendBannerHeadersAccountContext) *SendBannerHeaders {
	s.AccountContext = v
	return s
}

type SendBannerHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SendBannerHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SendBannerHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SendBannerHeadersAccountContext) SetAccountId(v string) *SendBannerHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SendBannerShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SendBannerShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SendBannerShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SendBannerShrinkHeaders) SetCommonHeaders(v map[string]*string) *SendBannerShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SendBannerShrinkHeaders) SetAccountContextShrink(v string) *SendBannerShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SendBannerRequest struct {
	Content map[string]interface{} `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1693881641000L
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1693881641000L
	StartTime     *int64                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *SendBannerRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s SendBannerRequest) String() string {
	return tea.Prettify(s)
}

func (s SendBannerRequest) GoString() string {
	return s.String()
}

func (s *SendBannerRequest) SetContent(v map[string]interface{}) *SendBannerRequest {
	s.Content = v
	return s
}

func (s *SendBannerRequest) SetEndTime(v int64) *SendBannerRequest {
	s.EndTime = &v
	return s
}

func (s *SendBannerRequest) SetStartTime(v int64) *SendBannerRequest {
	s.StartTime = &v
	return s
}

func (s *SendBannerRequest) SetTenantContext(v *SendBannerRequestTenantContext) *SendBannerRequest {
	s.TenantContext = v
	return s
}

type SendBannerRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SendBannerRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SendBannerRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SendBannerRequestTenantContext) SetTenantId(v string) *SendBannerRequestTenantContext {
	s.TenantId = &v
	return s
}

type SendBannerShrinkRequest struct {
	ContentShrink *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1693881641000L
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1693881641000L
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s SendBannerShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SendBannerShrinkRequest) GoString() string {
	return s.String()
}

func (s *SendBannerShrinkRequest) SetContentShrink(v string) *SendBannerShrinkRequest {
	s.ContentShrink = &v
	return s
}

func (s *SendBannerShrinkRequest) SetEndTime(v int64) *SendBannerShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *SendBannerShrinkRequest) SetStartTime(v int64) *SendBannerShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *SendBannerShrinkRequest) SetTenantContextShrink(v string) *SendBannerShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type SendBannerResponseBody struct {
	Arguments []interface{} `json:"arguments,omitempty" xml:"arguments,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SendBannerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendBannerResponseBody) GoString() string {
	return s.String()
}

func (s *SendBannerResponseBody) SetArguments(v []interface{}) *SendBannerResponseBody {
	s.Arguments = v
	return s
}

func (s *SendBannerResponseBody) SetRequestId(v string) *SendBannerResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendBannerResponseBody) SetSuccess(v bool) *SendBannerResponseBody {
	s.Success = &v
	return s
}

func (s *SendBannerResponseBody) SetVendorRequestId(v string) *SendBannerResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SendBannerResponseBody) SetVendorType(v string) *SendBannerResponseBody {
	s.VendorType = &v
	return s
}

type SendBannerResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendBannerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendBannerResponse) String() string {
	return tea.Prettify(s)
}

func (s SendBannerResponse) GoString() string {
	return s.String()
}

func (s *SendBannerResponse) SetHeaders(v map[string]*string) *SendBannerResponse {
	s.Headers = v
	return s
}

func (s *SendBannerResponse) SetStatusCode(v int32) *SendBannerResponse {
	s.StatusCode = &v
	return s
}

func (s *SendBannerResponse) SetBody(v *SendBannerResponseBody) *SendBannerResponse {
	s.Body = v
	return s
}

type SendPopupHeaders struct {
	CommonHeaders  map[string]*string              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SendPopupHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SendPopupHeaders) String() string {
	return tea.Prettify(s)
}

func (s SendPopupHeaders) GoString() string {
	return s.String()
}

func (s *SendPopupHeaders) SetCommonHeaders(v map[string]*string) *SendPopupHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SendPopupHeaders) SetAccountContext(v *SendPopupHeadersAccountContext) *SendPopupHeaders {
	s.AccountContext = v
	return s
}

type SendPopupHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SendPopupHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SendPopupHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SendPopupHeadersAccountContext) SetAccountId(v string) *SendPopupHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SendPopupShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SendPopupShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SendPopupShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SendPopupShrinkHeaders) SetCommonHeaders(v map[string]*string) *SendPopupShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SendPopupShrinkHeaders) SetAccountContextShrink(v string) *SendPopupShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SendPopupRequest struct {
	Content map[string]interface{} `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1693881641000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1693881641000
	StartTime     *int64                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *SendPopupRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s SendPopupRequest) String() string {
	return tea.Prettify(s)
}

func (s SendPopupRequest) GoString() string {
	return s.String()
}

func (s *SendPopupRequest) SetContent(v map[string]interface{}) *SendPopupRequest {
	s.Content = v
	return s
}

func (s *SendPopupRequest) SetEndTime(v int64) *SendPopupRequest {
	s.EndTime = &v
	return s
}

func (s *SendPopupRequest) SetStartTime(v int64) *SendPopupRequest {
	s.StartTime = &v
	return s
}

func (s *SendPopupRequest) SetTenantContext(v *SendPopupRequestTenantContext) *SendPopupRequest {
	s.TenantContext = v
	return s
}

type SendPopupRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SendPopupRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SendPopupRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SendPopupRequestTenantContext) SetTenantId(v string) *SendPopupRequestTenantContext {
	s.TenantId = &v
	return s
}

type SendPopupShrinkRequest struct {
	ContentShrink *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1693881641000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1693881641000
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s SendPopupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SendPopupShrinkRequest) GoString() string {
	return s.String()
}

func (s *SendPopupShrinkRequest) SetContentShrink(v string) *SendPopupShrinkRequest {
	s.ContentShrink = &v
	return s
}

func (s *SendPopupShrinkRequest) SetEndTime(v int64) *SendPopupShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *SendPopupShrinkRequest) SetStartTime(v int64) *SendPopupShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *SendPopupShrinkRequest) SetTenantContextShrink(v string) *SendPopupShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type SendPopupResponseBody struct {
	Arguments []interface{} `json:"arguments,omitempty" xml:"arguments,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SendPopupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendPopupResponseBody) GoString() string {
	return s.String()
}

func (s *SendPopupResponseBody) SetArguments(v []interface{}) *SendPopupResponseBody {
	s.Arguments = v
	return s
}

func (s *SendPopupResponseBody) SetRequestId(v string) *SendPopupResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendPopupResponseBody) SetSuccess(v bool) *SendPopupResponseBody {
	s.Success = &v
	return s
}

func (s *SendPopupResponseBody) SetVendorRequestId(v string) *SendPopupResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SendPopupResponseBody) SetVendorType(v string) *SendPopupResponseBody {
	s.VendorType = &v
	return s
}

type SendPopupResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendPopupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendPopupResponse) String() string {
	return tea.Prettify(s)
}

func (s SendPopupResponse) GoString() string {
	return s.String()
}

func (s *SendPopupResponse) SetHeaders(v map[string]*string) *SendPopupResponse {
	s.Headers = v
	return s
}

func (s *SendPopupResponse) SetStatusCode(v int32) *SendPopupResponse {
	s.StatusCode = &v
	return s
}

func (s *SendPopupResponse) SetBody(v *SendPopupResponseBody) *SendPopupResponse {
	s.Body = v
	return s
}

type SendSearchShadeHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SendSearchShadeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SendSearchShadeHeaders) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeHeaders) GoString() string {
	return s.String()
}

func (s *SendSearchShadeHeaders) SetCommonHeaders(v map[string]*string) *SendSearchShadeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SendSearchShadeHeaders) SetAccountContext(v *SendSearchShadeHeadersAccountContext) *SendSearchShadeHeaders {
	s.AccountContext = v
	return s
}

type SendSearchShadeHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SendSearchShadeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SendSearchShadeHeadersAccountContext) SetAccountId(v string) *SendSearchShadeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SendSearchShadeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SendSearchShadeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SendSearchShadeShrinkHeaders) SetCommonHeaders(v map[string]*string) *SendSearchShadeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SendSearchShadeShrinkHeaders) SetAccountContextShrink(v string) *SendSearchShadeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SendSearchShadeRequest struct {
	Content map[string]interface{} `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1693881641000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1693881641000
	StartTime     *int64                               `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *SendSearchShadeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s SendSearchShadeRequest) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeRequest) GoString() string {
	return s.String()
}

func (s *SendSearchShadeRequest) SetContent(v map[string]interface{}) *SendSearchShadeRequest {
	s.Content = v
	return s
}

func (s *SendSearchShadeRequest) SetEndTime(v int64) *SendSearchShadeRequest {
	s.EndTime = &v
	return s
}

func (s *SendSearchShadeRequest) SetStartTime(v int64) *SendSearchShadeRequest {
	s.StartTime = &v
	return s
}

func (s *SendSearchShadeRequest) SetTenantContext(v *SendSearchShadeRequestTenantContext) *SendSearchShadeRequest {
	s.TenantContext = v
	return s
}

type SendSearchShadeRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SendSearchShadeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SendSearchShadeRequestTenantContext) SetTenantId(v string) *SendSearchShadeRequestTenantContext {
	s.TenantId = &v
	return s
}

type SendSearchShadeShrinkRequest struct {
	ContentShrink *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1693881641000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1693881641000
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s SendSearchShadeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeShrinkRequest) GoString() string {
	return s.String()
}

func (s *SendSearchShadeShrinkRequest) SetContentShrink(v string) *SendSearchShadeShrinkRequest {
	s.ContentShrink = &v
	return s
}

func (s *SendSearchShadeShrinkRequest) SetEndTime(v int64) *SendSearchShadeShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *SendSearchShadeShrinkRequest) SetStartTime(v int64) *SendSearchShadeShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *SendSearchShadeShrinkRequest) SetTenantContextShrink(v string) *SendSearchShadeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type SendSearchShadeResponseBody struct {
	Arguments []interface{} `json:"arguments,omitempty" xml:"arguments,omitempty" type:"Repeated"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SendSearchShadeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeResponseBody) GoString() string {
	return s.String()
}

func (s *SendSearchShadeResponseBody) SetArguments(v []interface{}) *SendSearchShadeResponseBody {
	s.Arguments = v
	return s
}

func (s *SendSearchShadeResponseBody) SetRequestId(v string) *SendSearchShadeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SendSearchShadeResponseBody) SetSuccess(v bool) *SendSearchShadeResponseBody {
	s.Success = &v
	return s
}

func (s *SendSearchShadeResponseBody) SetVendorRequestId(v string) *SendSearchShadeResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SendSearchShadeResponseBody) SetVendorType(v string) *SendSearchShadeResponseBody {
	s.VendorType = &v
	return s
}

type SendSearchShadeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendSearchShadeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendSearchShadeResponse) String() string {
	return tea.Prettify(s)
}

func (s SendSearchShadeResponse) GoString() string {
	return s.String()
}

func (s *SendSearchShadeResponse) SetHeaders(v map[string]*string) *SendSearchShadeResponse {
	s.Headers = v
	return s
}

func (s *SendSearchShadeResponse) SetStatusCode(v int32) *SendSearchShadeResponse {
	s.StatusCode = &v
	return s
}

func (s *SendSearchShadeResponse) SetBody(v *SendSearchShadeResponseBody) *SendSearchShadeResponse {
	s.Body = v
	return s
}

type SetColumnsVisibilityHeaders struct {
	CommonHeaders  map[string]*string                         `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SetColumnsVisibilityHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SetColumnsVisibilityHeaders) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityHeaders) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityHeaders) SetCommonHeaders(v map[string]*string) *SetColumnsVisibilityHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SetColumnsVisibilityHeaders) SetAccountContext(v *SetColumnsVisibilityHeadersAccountContext) *SetColumnsVisibilityHeaders {
	s.AccountContext = v
	return s
}

type SetColumnsVisibilityHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SetColumnsVisibilityHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityHeadersAccountContext) SetAccountId(v string) *SetColumnsVisibilityHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SetColumnsVisibilityShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SetColumnsVisibilityShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityShrinkHeaders) SetCommonHeaders(v map[string]*string) *SetColumnsVisibilityShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SetColumnsVisibilityShrinkHeaders) SetAccountContextShrink(v string) *SetColumnsVisibilityShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SetColumnsVisibilityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Column *int64 `json:"Column,omitempty" xml:"Column,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	ColumnCount *int64 `json:"ColumnCount,omitempty" xml:"ColumnCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                                   `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *SetColumnsVisibilityRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// hidden
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s SetColumnsVisibilityRequest) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityRequest) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityRequest) SetColumn(v int64) *SetColumnsVisibilityRequest {
	s.Column = &v
	return s
}

func (s *SetColumnsVisibilityRequest) SetColumnCount(v int64) *SetColumnsVisibilityRequest {
	s.ColumnCount = &v
	return s
}

func (s *SetColumnsVisibilityRequest) SetSheetId(v string) *SetColumnsVisibilityRequest {
	s.SheetId = &v
	return s
}

func (s *SetColumnsVisibilityRequest) SetTenantContext(v *SetColumnsVisibilityRequestTenantContext) *SetColumnsVisibilityRequest {
	s.TenantContext = v
	return s
}

func (s *SetColumnsVisibilityRequest) SetVisibility(v string) *SetColumnsVisibilityRequest {
	s.Visibility = &v
	return s
}

func (s *SetColumnsVisibilityRequest) SetWorkbookId(v string) *SetColumnsVisibilityRequest {
	s.WorkbookId = &v
	return s
}

type SetColumnsVisibilityRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SetColumnsVisibilityRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityRequestTenantContext) SetTenantId(v string) *SetColumnsVisibilityRequestTenantContext {
	s.TenantId = &v
	return s
}

type SetColumnsVisibilityShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Column *int64 `json:"Column,omitempty" xml:"Column,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	ColumnCount *int64 `json:"ColumnCount,omitempty" xml:"ColumnCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hidden
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s SetColumnsVisibilityShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityShrinkRequest) SetColumn(v int64) *SetColumnsVisibilityShrinkRequest {
	s.Column = &v
	return s
}

func (s *SetColumnsVisibilityShrinkRequest) SetColumnCount(v int64) *SetColumnsVisibilityShrinkRequest {
	s.ColumnCount = &v
	return s
}

func (s *SetColumnsVisibilityShrinkRequest) SetSheetId(v string) *SetColumnsVisibilityShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *SetColumnsVisibilityShrinkRequest) SetTenantContextShrink(v string) *SetColumnsVisibilityShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *SetColumnsVisibilityShrinkRequest) SetVisibility(v string) *SetColumnsVisibilityShrinkRequest {
	s.Visibility = &v
	return s
}

func (s *SetColumnsVisibilityShrinkRequest) SetWorkbookId(v string) *SetColumnsVisibilityShrinkRequest {
	s.WorkbookId = &v
	return s
}

type SetColumnsVisibilityResponseBody struct {
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s SetColumnsVisibilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityResponseBody) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityResponseBody) SetId(v string) *SetColumnsVisibilityResponseBody {
	s.Id = &v
	return s
}

func (s *SetColumnsVisibilityResponseBody) SetRequestId(v string) *SetColumnsVisibilityResponseBody {
	s.RequestId = &v
	return s
}

type SetColumnsVisibilityResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetColumnsVisibilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetColumnsVisibilityResponse) String() string {
	return tea.Prettify(s)
}

func (s SetColumnsVisibilityResponse) GoString() string {
	return s.String()
}

func (s *SetColumnsVisibilityResponse) SetHeaders(v map[string]*string) *SetColumnsVisibilityResponse {
	s.Headers = v
	return s
}

func (s *SetColumnsVisibilityResponse) SetStatusCode(v int32) *SetColumnsVisibilityResponse {
	s.StatusCode = &v
	return s
}

func (s *SetColumnsVisibilityResponse) SetBody(v *SetColumnsVisibilityResponseBody) *SetColumnsVisibilityResponse {
	s.Body = v
	return s
}

type SetRowsVisibilityHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SetRowsVisibilityHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SetRowsVisibilityHeaders) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityHeaders) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityHeaders) SetCommonHeaders(v map[string]*string) *SetRowsVisibilityHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SetRowsVisibilityHeaders) SetAccountContext(v *SetRowsVisibilityHeadersAccountContext) *SetRowsVisibilityHeaders {
	s.AccountContext = v
	return s
}

type SetRowsVisibilityHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SetRowsVisibilityHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityHeadersAccountContext) SetAccountId(v string) *SetRowsVisibilityHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SetRowsVisibilityShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SetRowsVisibilityShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityShrinkHeaders) SetCommonHeaders(v map[string]*string) *SetRowsVisibilityShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SetRowsVisibilityShrinkHeaders) SetAccountContextShrink(v string) *SetRowsVisibilityShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SetRowsVisibilityRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Row *int64 `json:"Row,omitempty" xml:"Row,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                                `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *SetRowsVisibilityRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// hidden
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s SetRowsVisibilityRequest) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityRequest) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityRequest) SetRow(v int64) *SetRowsVisibilityRequest {
	s.Row = &v
	return s
}

func (s *SetRowsVisibilityRequest) SetRowCount(v int64) *SetRowsVisibilityRequest {
	s.RowCount = &v
	return s
}

func (s *SetRowsVisibilityRequest) SetSheetId(v string) *SetRowsVisibilityRequest {
	s.SheetId = &v
	return s
}

func (s *SetRowsVisibilityRequest) SetTenantContext(v *SetRowsVisibilityRequestTenantContext) *SetRowsVisibilityRequest {
	s.TenantContext = v
	return s
}

func (s *SetRowsVisibilityRequest) SetVisibility(v string) *SetRowsVisibilityRequest {
	s.Visibility = &v
	return s
}

func (s *SetRowsVisibilityRequest) SetWorkbookId(v string) *SetRowsVisibilityRequest {
	s.WorkbookId = &v
	return s
}

type SetRowsVisibilityRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SetRowsVisibilityRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityRequestTenantContext) SetTenantId(v string) *SetRowsVisibilityRequestTenantContext {
	s.TenantId = &v
	return s
}

type SetRowsVisibilityShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	Row *int64 `json:"Row,omitempty" xml:"Row,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 20
	RowCount *int64 `json:"RowCount,omitempty" xml:"RowCount,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hidden
	Visibility *string `json:"Visibility,omitempty" xml:"Visibility,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s SetRowsVisibilityShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityShrinkRequest) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityShrinkRequest) SetRow(v int64) *SetRowsVisibilityShrinkRequest {
	s.Row = &v
	return s
}

func (s *SetRowsVisibilityShrinkRequest) SetRowCount(v int64) *SetRowsVisibilityShrinkRequest {
	s.RowCount = &v
	return s
}

func (s *SetRowsVisibilityShrinkRequest) SetSheetId(v string) *SetRowsVisibilityShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *SetRowsVisibilityShrinkRequest) SetTenantContextShrink(v string) *SetRowsVisibilityShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *SetRowsVisibilityShrinkRequest) SetVisibility(v string) *SetRowsVisibilityShrinkRequest {
	s.Visibility = &v
	return s
}

func (s *SetRowsVisibilityShrinkRequest) SetWorkbookId(v string) *SetRowsVisibilityShrinkRequest {
	s.WorkbookId = &v
	return s
}

type SetRowsVisibilityResponseBody struct {
	// example:
	//
	// stxxxx
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s SetRowsVisibilityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityResponseBody) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityResponseBody) SetId(v string) *SetRowsVisibilityResponseBody {
	s.Id = &v
	return s
}

func (s *SetRowsVisibilityResponseBody) SetRequestId(v string) *SetRowsVisibilityResponseBody {
	s.RequestId = &v
	return s
}

type SetRowsVisibilityResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetRowsVisibilityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetRowsVisibilityResponse) String() string {
	return tea.Prettify(s)
}

func (s SetRowsVisibilityResponse) GoString() string {
	return s.String()
}

func (s *SetRowsVisibilityResponse) SetHeaders(v map[string]*string) *SetRowsVisibilityResponse {
	s.Headers = v
	return s
}

func (s *SetRowsVisibilityResponse) SetStatusCode(v int32) *SetRowsVisibilityResponse {
	s.StatusCode = &v
	return s
}

func (s *SetRowsVisibilityResponse) SetBody(v *SetRowsVisibilityResponseBody) *SetRowsVisibilityResponse {
	s.Body = v
	return s
}

type SimpleListReportHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SimpleListReportHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SimpleListReportHeaders) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportHeaders) GoString() string {
	return s.String()
}

func (s *SimpleListReportHeaders) SetCommonHeaders(v map[string]*string) *SimpleListReportHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SimpleListReportHeaders) SetAccountContext(v *SimpleListReportHeadersAccountContext) *SimpleListReportHeaders {
	s.AccountContext = v
	return s
}

type SimpleListReportHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SimpleListReportHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SimpleListReportHeadersAccountContext) SetAccountId(v string) *SimpleListReportHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SimpleListReportShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SimpleListReportShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SimpleListReportShrinkHeaders) SetCommonHeaders(v map[string]*string) *SimpleListReportShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SimpleListReportShrinkHeaders) SetAccountContextShrink(v string) *SimpleListReportShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SimpleListReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0
	Cursor *int64 `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 我管理的模版
	TemplateName  *string                               `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TenantContext *SimpleListReportRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s SimpleListReportRequest) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportRequest) GoString() string {
	return s.String()
}

func (s *SimpleListReportRequest) SetCursor(v int64) *SimpleListReportRequest {
	s.Cursor = &v
	return s
}

func (s *SimpleListReportRequest) SetEndTime(v int64) *SimpleListReportRequest {
	s.EndTime = &v
	return s
}

func (s *SimpleListReportRequest) SetSize(v int64) *SimpleListReportRequest {
	s.Size = &v
	return s
}

func (s *SimpleListReportRequest) SetStartTime(v int64) *SimpleListReportRequest {
	s.StartTime = &v
	return s
}

func (s *SimpleListReportRequest) SetTemplateName(v string) *SimpleListReportRequest {
	s.TemplateName = &v
	return s
}

func (s *SimpleListReportRequest) SetTenantContext(v *SimpleListReportRequestTenantContext) *SimpleListReportRequest {
	s.TenantContext = v
	return s
}

type SimpleListReportRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SimpleListReportRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SimpleListReportRequestTenantContext) SetTenantId(v string) *SimpleListReportRequestTenantContext {
	s.TenantId = &v
	return s
}

type SimpleListReportShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 0
	Cursor *int64 `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1507564800000
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 我管理的模版
	TemplateName        *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s SimpleListReportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportShrinkRequest) GoString() string {
	return s.String()
}

func (s *SimpleListReportShrinkRequest) SetCursor(v int64) *SimpleListReportShrinkRequest {
	s.Cursor = &v
	return s
}

func (s *SimpleListReportShrinkRequest) SetEndTime(v int64) *SimpleListReportShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *SimpleListReportShrinkRequest) SetSize(v int64) *SimpleListReportShrinkRequest {
	s.Size = &v
	return s
}

func (s *SimpleListReportShrinkRequest) SetStartTime(v int64) *SimpleListReportShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *SimpleListReportShrinkRequest) SetTemplateName(v string) *SimpleListReportShrinkRequest {
	s.TemplateName = &v
	return s
}

func (s *SimpleListReportShrinkRequest) SetTenantContextShrink(v string) *SimpleListReportShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type SimpleListReportResponseBody struct {
	DataList []*SimpleListReportResponseBodyDataList `json:"dataList,omitempty" xml:"dataList,omitempty" type:"Repeated"`
	// example:
	//
	// false
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 12312131231
	NextCursor *int64 `json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 20
	Size *int64 `json:"size,omitempty" xml:"size,omitempty"`
}

func (s SimpleListReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportResponseBody) GoString() string {
	return s.String()
}

func (s *SimpleListReportResponseBody) SetDataList(v []*SimpleListReportResponseBodyDataList) *SimpleListReportResponseBody {
	s.DataList = v
	return s
}

func (s *SimpleListReportResponseBody) SetHasMore(v bool) *SimpleListReportResponseBody {
	s.HasMore = &v
	return s
}

func (s *SimpleListReportResponseBody) SetNextCursor(v int64) *SimpleListReportResponseBody {
	s.NextCursor = &v
	return s
}

func (s *SimpleListReportResponseBody) SetRequestId(v string) *SimpleListReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *SimpleListReportResponseBody) SetSize(v int64) *SimpleListReportResponseBody {
	s.Size = &v
	return s
}

type SimpleListReportResponseBodyDataList struct {
	// example:
	//
	// 1567034772000
	CreateTime *int64 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1701038
	CreatorId *string `json:"CreatorId,omitempty" xml:"CreatorId,omitempty"`
	// example:
	//
	// xinmu
	CreatorName *string `json:"CreatorName,omitempty" xml:"CreatorName,omitempty"`
	DeptName    *string `json:"DeptName,omitempty" xml:"DeptName,omitempty"`
	// example:
	//
	// ops
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	// example:
	//
	// d64994d09916c76276dd9bfa23637644
	ReportId *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	// example:
	//
	// WG-Template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s SimpleListReportResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *SimpleListReportResponseBodyDataList) SetCreateTime(v int64) *SimpleListReportResponseBodyDataList {
	s.CreateTime = &v
	return s
}

func (s *SimpleListReportResponseBodyDataList) SetCreatorId(v string) *SimpleListReportResponseBodyDataList {
	s.CreatorId = &v
	return s
}

func (s *SimpleListReportResponseBodyDataList) SetCreatorName(v string) *SimpleListReportResponseBodyDataList {
	s.CreatorName = &v
	return s
}

func (s *SimpleListReportResponseBodyDataList) SetDeptName(v string) *SimpleListReportResponseBodyDataList {
	s.DeptName = &v
	return s
}

func (s *SimpleListReportResponseBodyDataList) SetRemark(v string) *SimpleListReportResponseBodyDataList {
	s.Remark = &v
	return s
}

func (s *SimpleListReportResponseBodyDataList) SetReportId(v string) *SimpleListReportResponseBodyDataList {
	s.ReportId = &v
	return s
}

func (s *SimpleListReportResponseBodyDataList) SetTemplateName(v string) *SimpleListReportResponseBodyDataList {
	s.TemplateName = &v
	return s
}

type SimpleListReportResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SimpleListReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SimpleListReportResponse) String() string {
	return tea.Prettify(s)
}

func (s SimpleListReportResponse) GoString() string {
	return s.String()
}

func (s *SimpleListReportResponse) SetHeaders(v map[string]*string) *SimpleListReportResponse {
	s.Headers = v
	return s
}

func (s *SimpleListReportResponse) SetStatusCode(v int32) *SimpleListReportResponse {
	s.StatusCode = &v
	return s
}

func (s *SimpleListReportResponse) SetBody(v *SimpleListReportResponseBody) *SimpleListReportResponse {
	s.Body = v
	return s
}

type StartCloudRecordHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *StartCloudRecordHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s StartCloudRecordHeaders) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordHeaders) GoString() string {
	return s.String()
}

func (s *StartCloudRecordHeaders) SetCommonHeaders(v map[string]*string) *StartCloudRecordHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StartCloudRecordHeaders) SetAccountContext(v *StartCloudRecordHeadersAccountContext) *StartCloudRecordHeaders {
	s.AccountContext = v
	return s
}

type StartCloudRecordHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s StartCloudRecordHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *StartCloudRecordHeadersAccountContext) SetAccountId(v string) *StartCloudRecordHeadersAccountContext {
	s.AccountId = &v
	return s
}

type StartCloudRecordShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s StartCloudRecordShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordShrinkHeaders) GoString() string {
	return s.String()
}

func (s *StartCloudRecordShrinkHeaders) SetCommonHeaders(v map[string]*string) *StartCloudRecordShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StartCloudRecordShrinkHeaders) SetAccountContextShrink(v string) *StartCloudRecordShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type StartCloudRecordRequest struct {
	// example:
	//
	// speech
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// example:
	//
	// relative_right
	SmallWindowPosition *string                               `json:"SmallWindowPosition,omitempty" xml:"SmallWindowPosition,omitempty"`
	TenantContext       *StartCloudRecordRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s StartCloudRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordRequest) GoString() string {
	return s.String()
}

func (s *StartCloudRecordRequest) SetMode(v string) *StartCloudRecordRequest {
	s.Mode = &v
	return s
}

func (s *StartCloudRecordRequest) SetSmallWindowPosition(v string) *StartCloudRecordRequest {
	s.SmallWindowPosition = &v
	return s
}

func (s *StartCloudRecordRequest) SetTenantContext(v *StartCloudRecordRequestTenantContext) *StartCloudRecordRequest {
	s.TenantContext = v
	return s
}

func (s *StartCloudRecordRequest) SetConferenceId(v string) *StartCloudRecordRequest {
	s.ConferenceId = &v
	return s
}

type StartCloudRecordRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s StartCloudRecordRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordRequestTenantContext) GoString() string {
	return s.String()
}

func (s *StartCloudRecordRequestTenantContext) SetTenantId(v string) *StartCloudRecordRequestTenantContext {
	s.TenantId = &v
	return s
}

type StartCloudRecordShrinkRequest struct {
	// example:
	//
	// speech
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	// example:
	//
	// relative_right
	SmallWindowPosition *string `json:"SmallWindowPosition,omitempty" xml:"SmallWindowPosition,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s StartCloudRecordShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartCloudRecordShrinkRequest) SetMode(v string) *StartCloudRecordShrinkRequest {
	s.Mode = &v
	return s
}

func (s *StartCloudRecordShrinkRequest) SetSmallWindowPosition(v string) *StartCloudRecordShrinkRequest {
	s.SmallWindowPosition = &v
	return s
}

func (s *StartCloudRecordShrinkRequest) SetTenantContextShrink(v string) *StartCloudRecordShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *StartCloudRecordShrinkRequest) SetConferenceId(v string) *StartCloudRecordShrinkRequest {
	s.ConferenceId = &v
	return s
}

type StartCloudRecordResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s StartCloudRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordResponseBody) GoString() string {
	return s.String()
}

func (s *StartCloudRecordResponseBody) SetCode(v string) *StartCloudRecordResponseBody {
	s.Code = &v
	return s
}

func (s *StartCloudRecordResponseBody) SetRequestId(v string) *StartCloudRecordResponseBody {
	s.RequestId = &v
	return s
}

type StartCloudRecordResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartCloudRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartCloudRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s StartCloudRecordResponse) GoString() string {
	return s.String()
}

func (s *StartCloudRecordResponse) SetHeaders(v map[string]*string) *StartCloudRecordResponse {
	s.Headers = v
	return s
}

func (s *StartCloudRecordResponse) SetStatusCode(v int32) *StartCloudRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *StartCloudRecordResponse) SetBody(v *StartCloudRecordResponseBody) *StartCloudRecordResponse {
	s.Body = v
	return s
}

type StartInstanceHeaders struct {
	CommonHeaders  map[string]*string                  `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *StartInstanceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s StartInstanceHeaders) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceHeaders) GoString() string {
	return s.String()
}

func (s *StartInstanceHeaders) SetCommonHeaders(v map[string]*string) *StartInstanceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StartInstanceHeaders) SetAccountContext(v *StartInstanceHeadersAccountContext) *StartInstanceHeaders {
	s.AccountContext = v
	return s
}

type StartInstanceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s StartInstanceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *StartInstanceHeadersAccountContext) SetAccountId(v string) *StartInstanceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type StartInstanceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s StartInstanceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *StartInstanceShrinkHeaders) SetCommonHeaders(v map[string]*string) *StartInstanceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StartInstanceShrinkHeaders) SetAccountContextShrink(v string) *StartInstanceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type StartInstanceRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// 18295
	DepartmentId *string `json:"DepartmentId,omitempty" xml:"DepartmentId,omitempty"`
	// example:
	//
	// {}
	FormDataJson *string `json:"FormDataJson,omitempty" xml:"FormDataJson,omitempty"`
	// example:
	//
	// FORM-EF6Yxxx
	FormUuid *string `json:"FormUuid,omitempty" xml:"FormUuid,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// TPROC--EF6Y4xxx
	ProcessCode *string `json:"ProcessCode,omitempty" xml:"ProcessCode,omitempty"`
	ProcessData *string `json:"ProcessData,omitempty" xml:"ProcessData,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s StartInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceRequest) GoString() string {
	return s.String()
}

func (s *StartInstanceRequest) SetAppType(v string) *StartInstanceRequest {
	s.AppType = &v
	return s
}

func (s *StartInstanceRequest) SetDepartmentId(v string) *StartInstanceRequest {
	s.DepartmentId = &v
	return s
}

func (s *StartInstanceRequest) SetFormDataJson(v string) *StartInstanceRequest {
	s.FormDataJson = &v
	return s
}

func (s *StartInstanceRequest) SetFormUuid(v string) *StartInstanceRequest {
	s.FormUuid = &v
	return s
}

func (s *StartInstanceRequest) SetLanguage(v string) *StartInstanceRequest {
	s.Language = &v
	return s
}

func (s *StartInstanceRequest) SetProcessCode(v string) *StartInstanceRequest {
	s.ProcessCode = &v
	return s
}

func (s *StartInstanceRequest) SetProcessData(v string) *StartInstanceRequest {
	s.ProcessData = &v
	return s
}

func (s *StartInstanceRequest) SetSystemToken(v string) *StartInstanceRequest {
	s.SystemToken = &v
	return s
}

type StartInstanceResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// f30233fb-72e1-xxx-xxx
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s StartInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *StartInstanceResponseBody) SetRequestId(v string) *StartInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartInstanceResponseBody) SetResult(v string) *StartInstanceResponseBody {
	s.Result = &v
	return s
}

func (s *StartInstanceResponseBody) SetVendorRequestId(v string) *StartInstanceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *StartInstanceResponseBody) SetVendorType(v string) *StartInstanceResponseBody {
	s.VendorType = &v
	return s
}

type StartInstanceResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s StartInstanceResponse) GoString() string {
	return s.String()
}

func (s *StartInstanceResponse) SetHeaders(v map[string]*string) *StartInstanceResponse {
	s.Headers = v
	return s
}

func (s *StartInstanceResponse) SetStatusCode(v int32) *StartInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *StartInstanceResponse) SetBody(v *StartInstanceResponseBody) *StartInstanceResponse {
	s.Body = v
	return s
}

type StartMinutesHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *StartMinutesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s StartMinutesHeaders) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesHeaders) GoString() string {
	return s.String()
}

func (s *StartMinutesHeaders) SetCommonHeaders(v map[string]*string) *StartMinutesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StartMinutesHeaders) SetAccountContext(v *StartMinutesHeadersAccountContext) *StartMinutesHeaders {
	s.AccountContext = v
	return s
}

type StartMinutesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s StartMinutesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *StartMinutesHeadersAccountContext) SetAccountId(v string) *StartMinutesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type StartMinutesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s StartMinutesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *StartMinutesShrinkHeaders) SetCommonHeaders(v map[string]*string) *StartMinutesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StartMinutesShrinkHeaders) SetAccountContextShrink(v string) *StartMinutesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type StartMinutesRequest struct {
	TenantContext *StartMinutesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 012345
	OwnerUserId *string `json:"ownerUserId,omitempty" xml:"ownerUserId,omitempty"`
	// example:
	//
	// false
	RecordAudio *bool `json:"recordAudio,omitempty" xml:"recordAudio,omitempty"`
}

func (s StartMinutesRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesRequest) GoString() string {
	return s.String()
}

func (s *StartMinutesRequest) SetTenantContext(v *StartMinutesRequestTenantContext) *StartMinutesRequest {
	s.TenantContext = v
	return s
}

func (s *StartMinutesRequest) SetConferenceId(v string) *StartMinutesRequest {
	s.ConferenceId = &v
	return s
}

func (s *StartMinutesRequest) SetOwnerUserId(v string) *StartMinutesRequest {
	s.OwnerUserId = &v
	return s
}

func (s *StartMinutesRequest) SetRecordAudio(v bool) *StartMinutesRequest {
	s.RecordAudio = &v
	return s
}

type StartMinutesRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s StartMinutesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *StartMinutesRequestTenantContext) SetTenantId(v string) *StartMinutesRequestTenantContext {
	s.TenantId = &v
	return s
}

type StartMinutesShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 012345
	OwnerUserId *string `json:"ownerUserId,omitempty" xml:"ownerUserId,omitempty"`
	// example:
	//
	// false
	RecordAudio *bool `json:"recordAudio,omitempty" xml:"recordAudio,omitempty"`
}

func (s StartMinutesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesShrinkRequest) GoString() string {
	return s.String()
}

func (s *StartMinutesShrinkRequest) SetTenantContextShrink(v string) *StartMinutesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *StartMinutesShrinkRequest) SetConferenceId(v string) *StartMinutesShrinkRequest {
	s.ConferenceId = &v
	return s
}

func (s *StartMinutesShrinkRequest) SetOwnerUserId(v string) *StartMinutesShrinkRequest {
	s.OwnerUserId = &v
	return s
}

func (s *StartMinutesShrinkRequest) SetRecordAudio(v bool) *StartMinutesShrinkRequest {
	s.RecordAudio = &v
	return s
}

type StartMinutesResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s StartMinutesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesResponseBody) GoString() string {
	return s.String()
}

func (s *StartMinutesResponseBody) SetCode(v string) *StartMinutesResponseBody {
	s.Code = &v
	return s
}

func (s *StartMinutesResponseBody) SetRequestId(v string) *StartMinutesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartMinutesResponseBody) SetVendorRequestId(v string) *StartMinutesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *StartMinutesResponseBody) SetVendorType(v string) *StartMinutesResponseBody {
	s.VendorType = &v
	return s
}

type StartMinutesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartMinutesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartMinutesResponse) String() string {
	return tea.Prettify(s)
}

func (s StartMinutesResponse) GoString() string {
	return s.String()
}

func (s *StartMinutesResponse) SetHeaders(v map[string]*string) *StartMinutesResponse {
	s.Headers = v
	return s
}

func (s *StartMinutesResponse) SetStatusCode(v int32) *StartMinutesResponse {
	s.StatusCode = &v
	return s
}

func (s *StartMinutesResponse) SetBody(v *StartMinutesResponseBody) *StartMinutesResponse {
	s.Body = v
	return s
}

type StatisticsListByTypeReportHeaders struct {
	CommonHeaders  map[string]*string                               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *StatisticsListByTypeReportHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s StatisticsListByTypeReportHeaders) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportHeaders) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportHeaders) SetCommonHeaders(v map[string]*string) *StatisticsListByTypeReportHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StatisticsListByTypeReportHeaders) SetAccountContext(v *StatisticsListByTypeReportHeadersAccountContext) *StatisticsListByTypeReportHeaders {
	s.AccountContext = v
	return s
}

type StatisticsListByTypeReportHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s StatisticsListByTypeReportHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportHeadersAccountContext) SetAccountId(v string) *StatisticsListByTypeReportHeadersAccountContext {
	s.AccountId = &v
	return s
}

type StatisticsListByTypeReportShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s StatisticsListByTypeReportShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportShrinkHeaders) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportShrinkHeaders) SetCommonHeaders(v map[string]*string) *StatisticsListByTypeReportShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StatisticsListByTypeReportShrinkHeaders) SetAccountContextShrink(v string) *StatisticsListByTypeReportShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type StatisticsListByTypeReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size          *int64                                          `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContext *StatisticsListByTypeReportRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s StatisticsListByTypeReportRequest) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportRequest) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportRequest) SetOffset(v int64) *StatisticsListByTypeReportRequest {
	s.Offset = &v
	return s
}

func (s *StatisticsListByTypeReportRequest) SetReportId(v string) *StatisticsListByTypeReportRequest {
	s.ReportId = &v
	return s
}

func (s *StatisticsListByTypeReportRequest) SetSize(v int64) *StatisticsListByTypeReportRequest {
	s.Size = &v
	return s
}

func (s *StatisticsListByTypeReportRequest) SetTenantContext(v *StatisticsListByTypeReportRequestTenantContext) *StatisticsListByTypeReportRequest {
	s.TenantContext = v
	return s
}

func (s *StatisticsListByTypeReportRequest) SetType(v int64) *StatisticsListByTypeReportRequest {
	s.Type = &v
	return s
}

type StatisticsListByTypeReportRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s StatisticsListByTypeReportRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportRequestTenantContext) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportRequestTenantContext) SetTenantId(v string) *StatisticsListByTypeReportRequestTenantContext {
	s.TenantId = &v
	return s
}

type StatisticsListByTypeReportShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 10
	Offset *int64 `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	Size                *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	Type *int64 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s StatisticsListByTypeReportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportShrinkRequest) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportShrinkRequest) SetOffset(v int64) *StatisticsListByTypeReportShrinkRequest {
	s.Offset = &v
	return s
}

func (s *StatisticsListByTypeReportShrinkRequest) SetReportId(v string) *StatisticsListByTypeReportShrinkRequest {
	s.ReportId = &v
	return s
}

func (s *StatisticsListByTypeReportShrinkRequest) SetSize(v int64) *StatisticsListByTypeReportShrinkRequest {
	s.Size = &v
	return s
}

func (s *StatisticsListByTypeReportShrinkRequest) SetTenantContextShrink(v string) *StatisticsListByTypeReportShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *StatisticsListByTypeReportShrinkRequest) SetType(v int64) *StatisticsListByTypeReportShrinkRequest {
	s.Type = &v
	return s
}

type StatisticsListByTypeReportResponseBody struct {
	// example:
	//
	// true
	HasMore *bool `json:"hasMore,omitempty" xml:"hasMore,omitempty"`
	// example:
	//
	// 12312131231
	NextCursor *int64 `json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId  *string   `json:"requestId,omitempty" xml:"requestId,omitempty"`
	UseridList []*string `json:"useridList,omitempty" xml:"useridList,omitempty" type:"Repeated"`
}

func (s StatisticsListByTypeReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportResponseBody) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportResponseBody) SetHasMore(v bool) *StatisticsListByTypeReportResponseBody {
	s.HasMore = &v
	return s
}

func (s *StatisticsListByTypeReportResponseBody) SetNextCursor(v int64) *StatisticsListByTypeReportResponseBody {
	s.NextCursor = &v
	return s
}

func (s *StatisticsListByTypeReportResponseBody) SetRequestId(v string) *StatisticsListByTypeReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *StatisticsListByTypeReportResponseBody) SetUseridList(v []*string) *StatisticsListByTypeReportResponseBody {
	s.UseridList = v
	return s
}

type StatisticsListByTypeReportResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StatisticsListByTypeReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StatisticsListByTypeReportResponse) String() string {
	return tea.Prettify(s)
}

func (s StatisticsListByTypeReportResponse) GoString() string {
	return s.String()
}

func (s *StatisticsListByTypeReportResponse) SetHeaders(v map[string]*string) *StatisticsListByTypeReportResponse {
	s.Headers = v
	return s
}

func (s *StatisticsListByTypeReportResponse) SetStatusCode(v int32) *StatisticsListByTypeReportResponse {
	s.StatusCode = &v
	return s
}

func (s *StatisticsListByTypeReportResponse) SetBody(v *StatisticsListByTypeReportResponseBody) *StatisticsListByTypeReportResponse {
	s.Body = v
	return s
}

type StatisticsReportHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *StatisticsReportHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s StatisticsReportHeaders) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportHeaders) GoString() string {
	return s.String()
}

func (s *StatisticsReportHeaders) SetCommonHeaders(v map[string]*string) *StatisticsReportHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StatisticsReportHeaders) SetAccountContext(v *StatisticsReportHeadersAccountContext) *StatisticsReportHeaders {
	s.AccountContext = v
	return s
}

type StatisticsReportHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s StatisticsReportHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *StatisticsReportHeadersAccountContext) SetAccountId(v string) *StatisticsReportHeadersAccountContext {
	s.AccountId = &v
	return s
}

type StatisticsReportShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s StatisticsReportShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportShrinkHeaders) GoString() string {
	return s.String()
}

func (s *StatisticsReportShrinkHeaders) SetCommonHeaders(v map[string]*string) *StatisticsReportShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StatisticsReportShrinkHeaders) SetAccountContextShrink(v string) *StatisticsReportShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type StatisticsReportRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId      *string                               `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	TenantContext *StatisticsReportRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s StatisticsReportRequest) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportRequest) GoString() string {
	return s.String()
}

func (s *StatisticsReportRequest) SetReportId(v string) *StatisticsReportRequest {
	s.ReportId = &v
	return s
}

func (s *StatisticsReportRequest) SetTenantContext(v *StatisticsReportRequestTenantContext) *StatisticsReportRequest {
	s.TenantContext = v
	return s
}

type StatisticsReportRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s StatisticsReportRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportRequestTenantContext) GoString() string {
	return s.String()
}

func (s *StatisticsReportRequestTenantContext) SetTenantId(v string) *StatisticsReportRequestTenantContext {
	s.TenantId = &v
	return s
}

type StatisticsReportShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 173xxxx
	ReportId            *string `json:"ReportId,omitempty" xml:"ReportId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s StatisticsReportShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportShrinkRequest) GoString() string {
	return s.String()
}

func (s *StatisticsReportShrinkRequest) SetReportId(v string) *StatisticsReportShrinkRequest {
	s.ReportId = &v
	return s
}

func (s *StatisticsReportShrinkRequest) SetTenantContextShrink(v string) *StatisticsReportShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type StatisticsReportResponseBody struct {
	// example:
	//
	// 1
	CommentNum *int64 `json:"commentNum,omitempty" xml:"commentNum,omitempty"`
	// example:
	//
	// 1
	CommentUserNum *int64 `json:"commentUserNum,omitempty" xml:"commentUserNum,omitempty"`
	// example:
	//
	// 2
	LikeNum *int64 `json:"likeNum,omitempty" xml:"likeNum,omitempty"`
	// example:
	//
	// 3
	ReadNum *int64 `json:"readNum,omitempty" xml:"readNum,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s StatisticsReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportResponseBody) GoString() string {
	return s.String()
}

func (s *StatisticsReportResponseBody) SetCommentNum(v int64) *StatisticsReportResponseBody {
	s.CommentNum = &v
	return s
}

func (s *StatisticsReportResponseBody) SetCommentUserNum(v int64) *StatisticsReportResponseBody {
	s.CommentUserNum = &v
	return s
}

func (s *StatisticsReportResponseBody) SetLikeNum(v int64) *StatisticsReportResponseBody {
	s.LikeNum = &v
	return s
}

func (s *StatisticsReportResponseBody) SetReadNum(v int64) *StatisticsReportResponseBody {
	s.ReadNum = &v
	return s
}

func (s *StatisticsReportResponseBody) SetRequestId(v string) *StatisticsReportResponseBody {
	s.RequestId = &v
	return s
}

type StatisticsReportResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StatisticsReportResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StatisticsReportResponse) String() string {
	return tea.Prettify(s)
}

func (s StatisticsReportResponse) GoString() string {
	return s.String()
}

func (s *StatisticsReportResponse) SetHeaders(v map[string]*string) *StatisticsReportResponse {
	s.Headers = v
	return s
}

func (s *StatisticsReportResponse) SetStatusCode(v int32) *StatisticsReportResponse {
	s.StatusCode = &v
	return s
}

func (s *StatisticsReportResponse) SetBody(v *StatisticsReportResponseBody) *StatisticsReportResponse {
	s.Body = v
	return s
}

type StopCloudRecordHeaders struct {
	CommonHeaders  map[string]*string                    `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *StopCloudRecordHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s StopCloudRecordHeaders) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordHeaders) GoString() string {
	return s.String()
}

func (s *StopCloudRecordHeaders) SetCommonHeaders(v map[string]*string) *StopCloudRecordHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StopCloudRecordHeaders) SetAccountContext(v *StopCloudRecordHeadersAccountContext) *StopCloudRecordHeaders {
	s.AccountContext = v
	return s
}

type StopCloudRecordHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s StopCloudRecordHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *StopCloudRecordHeadersAccountContext) SetAccountId(v string) *StopCloudRecordHeadersAccountContext {
	s.AccountId = &v
	return s
}

type StopCloudRecordShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s StopCloudRecordShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordShrinkHeaders) GoString() string {
	return s.String()
}

func (s *StopCloudRecordShrinkHeaders) SetCommonHeaders(v map[string]*string) *StopCloudRecordShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StopCloudRecordShrinkHeaders) SetAccountContextShrink(v string) *StopCloudRecordShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type StopCloudRecordRequest struct {
	TenantContext *StopCloudRecordRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s StopCloudRecordRequest) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordRequest) GoString() string {
	return s.String()
}

func (s *StopCloudRecordRequest) SetTenantContext(v *StopCloudRecordRequestTenantContext) *StopCloudRecordRequest {
	s.TenantContext = v
	return s
}

func (s *StopCloudRecordRequest) SetConferenceId(v string) *StopCloudRecordRequest {
	s.ConferenceId = &v
	return s
}

type StopCloudRecordRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s StopCloudRecordRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordRequestTenantContext) GoString() string {
	return s.String()
}

func (s *StopCloudRecordRequestTenantContext) SetTenantId(v string) *StopCloudRecordRequestTenantContext {
	s.TenantId = &v
	return s
}

type StopCloudRecordShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s StopCloudRecordShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordShrinkRequest) GoString() string {
	return s.String()
}

func (s *StopCloudRecordShrinkRequest) SetTenantContextShrink(v string) *StopCloudRecordShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *StopCloudRecordShrinkRequest) SetConferenceId(v string) *StopCloudRecordShrinkRequest {
	s.ConferenceId = &v
	return s
}

type StopCloudRecordResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s StopCloudRecordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordResponseBody) GoString() string {
	return s.String()
}

func (s *StopCloudRecordResponseBody) SetCode(v string) *StopCloudRecordResponseBody {
	s.Code = &v
	return s
}

func (s *StopCloudRecordResponseBody) SetRequestId(v string) *StopCloudRecordResponseBody {
	s.RequestId = &v
	return s
}

type StopCloudRecordResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopCloudRecordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopCloudRecordResponse) String() string {
	return tea.Prettify(s)
}

func (s StopCloudRecordResponse) GoString() string {
	return s.String()
}

func (s *StopCloudRecordResponse) SetHeaders(v map[string]*string) *StopCloudRecordResponse {
	s.Headers = v
	return s
}

func (s *StopCloudRecordResponse) SetStatusCode(v int32) *StopCloudRecordResponse {
	s.StatusCode = &v
	return s
}

func (s *StopCloudRecordResponse) SetBody(v *StopCloudRecordResponseBody) *StopCloudRecordResponse {
	s.Body = v
	return s
}

type StopMinutesHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *StopMinutesHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s StopMinutesHeaders) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesHeaders) GoString() string {
	return s.String()
}

func (s *StopMinutesHeaders) SetCommonHeaders(v map[string]*string) *StopMinutesHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StopMinutesHeaders) SetAccountContext(v *StopMinutesHeadersAccountContext) *StopMinutesHeaders {
	s.AccountContext = v
	return s
}

type StopMinutesHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s StopMinutesHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *StopMinutesHeadersAccountContext) SetAccountId(v string) *StopMinutesHeadersAccountContext {
	s.AccountId = &v
	return s
}

type StopMinutesShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s StopMinutesShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesShrinkHeaders) GoString() string {
	return s.String()
}

func (s *StopMinutesShrinkHeaders) SetCommonHeaders(v map[string]*string) *StopMinutesShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *StopMinutesShrinkHeaders) SetAccountContextShrink(v string) *StopMinutesShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type StopMinutesRequest struct {
	TenantContext *StopMinutesRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s StopMinutesRequest) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesRequest) GoString() string {
	return s.String()
}

func (s *StopMinutesRequest) SetTenantContext(v *StopMinutesRequestTenantContext) *StopMinutesRequest {
	s.TenantContext = v
	return s
}

func (s *StopMinutesRequest) SetConferenceId(v string) *StopMinutesRequest {
	s.ConferenceId = &v
	return s
}

type StopMinutesRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s StopMinutesRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesRequestTenantContext) GoString() string {
	return s.String()
}

func (s *StopMinutesRequestTenantContext) SetTenantId(v string) *StopMinutesRequestTenantContext {
	s.TenantId = &v
	return s
}

type StopMinutesShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s StopMinutesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesShrinkRequest) GoString() string {
	return s.String()
}

func (s *StopMinutesShrinkRequest) SetTenantContextShrink(v string) *StopMinutesShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *StopMinutesShrinkRequest) SetConferenceId(v string) *StopMinutesShrinkRequest {
	s.ConferenceId = &v
	return s
}

type StopMinutesResponseBody struct {
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s StopMinutesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesResponseBody) GoString() string {
	return s.String()
}

func (s *StopMinutesResponseBody) SetCode(v string) *StopMinutesResponseBody {
	s.Code = &v
	return s
}

func (s *StopMinutesResponseBody) SetRequestId(v string) *StopMinutesResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopMinutesResponseBody) SetVendorRequestId(v string) *StopMinutesResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *StopMinutesResponseBody) SetVendorType(v string) *StopMinutesResponseBody {
	s.VendorType = &v
	return s
}

type StopMinutesResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StopMinutesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StopMinutesResponse) String() string {
	return tea.Prettify(s)
}

func (s StopMinutesResponse) GoString() string {
	return s.String()
}

func (s *StopMinutesResponse) SetHeaders(v map[string]*string) *StopMinutesResponse {
	s.Headers = v
	return s
}

func (s *StopMinutesResponse) SetStatusCode(v int32) *StopMinutesResponse {
	s.StatusCode = &v
	return s
}

func (s *StopMinutesResponse) SetBody(v *StopMinutesResponseBody) *StopMinutesResponse {
	s.Body = v
	return s
}

type SubscribeCalendarHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SubscribeCalendarHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SubscribeCalendarHeaders) String() string {
	return tea.Prettify(s)
}

func (s SubscribeCalendarHeaders) GoString() string {
	return s.String()
}

func (s *SubscribeCalendarHeaders) SetCommonHeaders(v map[string]*string) *SubscribeCalendarHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SubscribeCalendarHeaders) SetAccountContext(v *SubscribeCalendarHeadersAccountContext) *SubscribeCalendarHeaders {
	s.AccountContext = v
	return s
}

type SubscribeCalendarHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SubscribeCalendarHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SubscribeCalendarHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SubscribeCalendarHeadersAccountContext) SetAccountId(v string) *SubscribeCalendarHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SubscribeCalendarShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SubscribeCalendarShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SubscribeCalendarShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SubscribeCalendarShrinkHeaders) SetCommonHeaders(v map[string]*string) *SubscribeCalendarShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SubscribeCalendarShrinkHeaders) SetAccountContextShrink(v string) *SubscribeCalendarShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SubscribeCalendarRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// MzM5Mxxx
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
}

func (s SubscribeCalendarRequest) String() string {
	return tea.Prettify(s)
}

func (s SubscribeCalendarRequest) GoString() string {
	return s.String()
}

func (s *SubscribeCalendarRequest) SetCalendarId(v string) *SubscribeCalendarRequest {
	s.CalendarId = &v
	return s
}

type SubscribeCalendarResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s SubscribeCalendarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubscribeCalendarResponseBody) GoString() string {
	return s.String()
}

func (s *SubscribeCalendarResponseBody) SetRequestId(v string) *SubscribeCalendarResponseBody {
	s.RequestId = &v
	return s
}

type SubscribeCalendarResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubscribeCalendarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubscribeCalendarResponse) String() string {
	return tea.Prettify(s)
}

func (s SubscribeCalendarResponse) GoString() string {
	return s.String()
}

func (s *SubscribeCalendarResponse) SetHeaders(v map[string]*string) *SubscribeCalendarResponse {
	s.Headers = v
	return s
}

func (s *SubscribeCalendarResponse) SetStatusCode(v int32) *SubscribeCalendarResponse {
	s.StatusCode = &v
	return s
}

func (s *SubscribeCalendarResponse) SetBody(v *SubscribeCalendarResponseBody) *SubscribeCalendarResponse {
	s.Body = v
	return s
}

type SyncDingTypeHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *SyncDingTypeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s SyncDingTypeHeaders) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeHeaders) GoString() string {
	return s.String()
}

func (s *SyncDingTypeHeaders) SetCommonHeaders(v map[string]*string) *SyncDingTypeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SyncDingTypeHeaders) SetAccountContext(v *SyncDingTypeHeadersAccountContext) *SyncDingTypeHeaders {
	s.AccountContext = v
	return s
}

type SyncDingTypeHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s SyncDingTypeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *SyncDingTypeHeadersAccountContext) SetAccountId(v string) *SyncDingTypeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type SyncDingTypeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s SyncDingTypeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *SyncDingTypeShrinkHeaders) SetCommonHeaders(v map[string]*string) *SyncDingTypeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *SyncDingTypeShrinkHeaders) SetAccountContextShrink(v string) *SyncDingTypeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type SyncDingTypeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ANT_DING
	DingType *string `json:"DingType,omitempty" xml:"DingType,omitempty"`
	// example:
	//
	// y
	IsDimission *string `json:"IsDimission,omitempty" xml:"IsDimission,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// antding
	Source        *string                           `json:"Source,omitempty" xml:"Source,omitempty"`
	TenantContext *SyncDingTypeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 012345
	WorkNo *string `json:"WorkNo,omitempty" xml:"WorkNo,omitempty"`
}

func (s SyncDingTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeRequest) GoString() string {
	return s.String()
}

func (s *SyncDingTypeRequest) SetDingType(v string) *SyncDingTypeRequest {
	s.DingType = &v
	return s
}

func (s *SyncDingTypeRequest) SetIsDimission(v string) *SyncDingTypeRequest {
	s.IsDimission = &v
	return s
}

func (s *SyncDingTypeRequest) SetSource(v string) *SyncDingTypeRequest {
	s.Source = &v
	return s
}

func (s *SyncDingTypeRequest) SetTenantContext(v *SyncDingTypeRequestTenantContext) *SyncDingTypeRequest {
	s.TenantContext = v
	return s
}

func (s *SyncDingTypeRequest) SetWorkNo(v string) *SyncDingTypeRequest {
	s.WorkNo = &v
	return s
}

type SyncDingTypeRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s SyncDingTypeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *SyncDingTypeRequestTenantContext) SetTenantId(v string) *SyncDingTypeRequestTenantContext {
	s.TenantId = &v
	return s
}

type SyncDingTypeShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ANT_DING
	DingType *string `json:"DingType,omitempty" xml:"DingType,omitempty"`
	// example:
	//
	// y
	IsDimission *string `json:"IsDimission,omitempty" xml:"IsDimission,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// antding
	Source              *string `json:"Source,omitempty" xml:"Source,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 012345
	WorkNo *string `json:"WorkNo,omitempty" xml:"WorkNo,omitempty"`
}

func (s SyncDingTypeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeShrinkRequest) GoString() string {
	return s.String()
}

func (s *SyncDingTypeShrinkRequest) SetDingType(v string) *SyncDingTypeShrinkRequest {
	s.DingType = &v
	return s
}

func (s *SyncDingTypeShrinkRequest) SetIsDimission(v string) *SyncDingTypeShrinkRequest {
	s.IsDimission = &v
	return s
}

func (s *SyncDingTypeShrinkRequest) SetSource(v string) *SyncDingTypeShrinkRequest {
	s.Source = &v
	return s
}

func (s *SyncDingTypeShrinkRequest) SetTenantContextShrink(v string) *SyncDingTypeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *SyncDingTypeShrinkRequest) SetWorkNo(v string) *SyncDingTypeShrinkRequest {
	s.WorkNo = &v
	return s
}

type SyncDingTypeResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s SyncDingTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeResponseBody) GoString() string {
	return s.String()
}

func (s *SyncDingTypeResponseBody) SetRequestId(v string) *SyncDingTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SyncDingTypeResponseBody) SetSuccess(v bool) *SyncDingTypeResponseBody {
	s.Success = &v
	return s
}

func (s *SyncDingTypeResponseBody) SetVendorRequestId(v string) *SyncDingTypeResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *SyncDingTypeResponseBody) SetVendorType(v string) *SyncDingTypeResponseBody {
	s.VendorType = &v
	return s
}

type SyncDingTypeResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SyncDingTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SyncDingTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncDingTypeResponse) GoString() string {
	return s.String()
}

func (s *SyncDingTypeResponse) SetHeaders(v map[string]*string) *SyncDingTypeResponse {
	s.Headers = v
	return s
}

func (s *SyncDingTypeResponse) SetStatusCode(v int32) *SyncDingTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *SyncDingTypeResponse) SetBody(v *SyncDingTypeResponseBody) *SyncDingTypeResponse {
	s.Body = v
	return s
}

type TerminateInstanceHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *TerminateInstanceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s TerminateInstanceHeaders) String() string {
	return tea.Prettify(s)
}

func (s TerminateInstanceHeaders) GoString() string {
	return s.String()
}

func (s *TerminateInstanceHeaders) SetCommonHeaders(v map[string]*string) *TerminateInstanceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TerminateInstanceHeaders) SetAccountContext(v *TerminateInstanceHeadersAccountContext) *TerminateInstanceHeaders {
	s.AccountContext = v
	return s
}

type TerminateInstanceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s TerminateInstanceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s TerminateInstanceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *TerminateInstanceHeadersAccountContext) SetAccountId(v string) *TerminateInstanceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type TerminateInstanceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s TerminateInstanceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s TerminateInstanceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *TerminateInstanceShrinkHeaders) SetCommonHeaders(v map[string]*string) *TerminateInstanceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *TerminateInstanceShrinkHeaders) SetAccountContextShrink(v string) *TerminateInstanceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type TerminateInstanceRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s TerminateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s TerminateInstanceRequest) GoString() string {
	return s.String()
}

func (s *TerminateInstanceRequest) SetAppType(v string) *TerminateInstanceRequest {
	s.AppType = &v
	return s
}

func (s *TerminateInstanceRequest) SetLanguage(v string) *TerminateInstanceRequest {
	s.Language = &v
	return s
}

func (s *TerminateInstanceRequest) SetProcessInstanceId(v string) *TerminateInstanceRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *TerminateInstanceRequest) SetSystemToken(v string) *TerminateInstanceRequest {
	s.SystemToken = &v
	return s
}

type TerminateInstanceResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s TerminateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TerminateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *TerminateInstanceResponseBody) SetRequestId(v string) *TerminateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *TerminateInstanceResponseBody) SetVendorRequestId(v string) *TerminateInstanceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *TerminateInstanceResponseBody) SetVendorType(v string) *TerminateInstanceResponseBody {
	s.VendorType = &v
	return s
}

type TerminateInstanceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TerminateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TerminateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s TerminateInstanceResponse) GoString() string {
	return s.String()
}

func (s *TerminateInstanceResponse) SetHeaders(v map[string]*string) *TerminateInstanceResponse {
	s.Headers = v
	return s
}

func (s *TerminateInstanceResponse) SetStatusCode(v int32) *TerminateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *TerminateInstanceResponse) SetBody(v *TerminateInstanceResponseBody) *TerminateInstanceResponse {
	s.Body = v
	return s
}

type UnsubscribeCalendarHeaders struct {
	CommonHeaders  map[string]*string                        `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UnsubscribeCalendarHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UnsubscribeCalendarHeaders) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeCalendarHeaders) GoString() string {
	return s.String()
}

func (s *UnsubscribeCalendarHeaders) SetCommonHeaders(v map[string]*string) *UnsubscribeCalendarHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UnsubscribeCalendarHeaders) SetAccountContext(v *UnsubscribeCalendarHeadersAccountContext) *UnsubscribeCalendarHeaders {
	s.AccountContext = v
	return s
}

type UnsubscribeCalendarHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UnsubscribeCalendarHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeCalendarHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UnsubscribeCalendarHeadersAccountContext) SetAccountId(v string) *UnsubscribeCalendarHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UnsubscribeCalendarShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UnsubscribeCalendarShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeCalendarShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UnsubscribeCalendarShrinkHeaders) SetCommonHeaders(v map[string]*string) *UnsubscribeCalendarShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UnsubscribeCalendarShrinkHeaders) SetAccountContextShrink(v string) *UnsubscribeCalendarShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UnsubscribeCalendarRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// MzM5Mxxx
	CalendarId *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
}

func (s UnsubscribeCalendarRequest) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeCalendarRequest) GoString() string {
	return s.String()
}

func (s *UnsubscribeCalendarRequest) SetCalendarId(v string) *UnsubscribeCalendarRequest {
	s.CalendarId = &v
	return s
}

type UnsubscribeCalendarResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UnsubscribeCalendarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeCalendarResponseBody) GoString() string {
	return s.String()
}

func (s *UnsubscribeCalendarResponseBody) SetRequestId(v string) *UnsubscribeCalendarResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnsubscribeCalendarResponseBody) SetResult(v bool) *UnsubscribeCalendarResponseBody {
	s.Result = &v
	return s
}

type UnsubscribeCalendarResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnsubscribeCalendarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnsubscribeCalendarResponse) String() string {
	return tea.Prettify(s)
}

func (s UnsubscribeCalendarResponse) GoString() string {
	return s.String()
}

func (s *UnsubscribeCalendarResponse) SetHeaders(v map[string]*string) *UnsubscribeCalendarResponse {
	s.Headers = v
	return s
}

func (s *UnsubscribeCalendarResponse) SetStatusCode(v int32) *UnsubscribeCalendarResponse {
	s.StatusCode = &v
	return s
}

func (s *UnsubscribeCalendarResponse) SetBody(v *UnsubscribeCalendarResponseBody) *UnsubscribeCalendarResponse {
	s.Body = v
	return s
}

type UpdateFormDataHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateFormDataHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateFormDataHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateFormDataHeaders) GoString() string {
	return s.String()
}

func (s *UpdateFormDataHeaders) SetCommonHeaders(v map[string]*string) *UpdateFormDataHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateFormDataHeaders) SetAccountContext(v *UpdateFormDataHeadersAccountContext) *UpdateFormDataHeaders {
	s.AccountContext = v
	return s
}

type UpdateFormDataHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateFormDataHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateFormDataHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateFormDataHeadersAccountContext) SetAccountId(v string) *UpdateFormDataHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateFormDataShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateFormDataShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateFormDataShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateFormDataShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateFormDataShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateFormDataShrinkHeaders) SetAccountContextShrink(v string) *UpdateFormDataShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateFormDataRequest struct {
	// example:
	//
	// APP_PBKTxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// FORM_INxxx
	FormInstanceId *string `json:"FormInstanceId,omitempty" xml:"FormInstanceId,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// {}
	UpdateFormDataJson *string `json:"UpdateFormDataJson,omitempty" xml:"UpdateFormDataJson,omitempty"`
	// example:
	//
	// false
	UseLatestVersion *bool `json:"UseLatestVersion,omitempty" xml:"UseLatestVersion,omitempty"`
}

func (s UpdateFormDataRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateFormDataRequest) GoString() string {
	return s.String()
}

func (s *UpdateFormDataRequest) SetAppType(v string) *UpdateFormDataRequest {
	s.AppType = &v
	return s
}

func (s *UpdateFormDataRequest) SetFormInstanceId(v string) *UpdateFormDataRequest {
	s.FormInstanceId = &v
	return s
}

func (s *UpdateFormDataRequest) SetLanguage(v string) *UpdateFormDataRequest {
	s.Language = &v
	return s
}

func (s *UpdateFormDataRequest) SetSystemToken(v string) *UpdateFormDataRequest {
	s.SystemToken = &v
	return s
}

func (s *UpdateFormDataRequest) SetUpdateFormDataJson(v string) *UpdateFormDataRequest {
	s.UpdateFormDataJson = &v
	return s
}

func (s *UpdateFormDataRequest) SetUseLatestVersion(v bool) *UpdateFormDataRequest {
	s.UseLatestVersion = &v
	return s
}

type UpdateFormDataResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s UpdateFormDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateFormDataResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateFormDataResponseBody) SetRequestId(v string) *UpdateFormDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateFormDataResponseBody) SetVendorRequestId(v string) *UpdateFormDataResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *UpdateFormDataResponseBody) SetVendorType(v string) *UpdateFormDataResponseBody {
	s.VendorType = &v
	return s
}

type UpdateFormDataResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateFormDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateFormDataResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateFormDataResponse) GoString() string {
	return s.String()
}

func (s *UpdateFormDataResponse) SetHeaders(v map[string]*string) *UpdateFormDataResponse {
	s.Headers = v
	return s
}

func (s *UpdateFormDataResponse) SetStatusCode(v int32) *UpdateFormDataResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateFormDataResponse) SetBody(v *UpdateFormDataResponseBody) *UpdateFormDataResponse {
	s.Body = v
	return s
}

type UpdateInstanceHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateInstanceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateInstanceHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateInstanceHeaders) GoString() string {
	return s.String()
}

func (s *UpdateInstanceHeaders) SetCommonHeaders(v map[string]*string) *UpdateInstanceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateInstanceHeaders) SetAccountContext(v *UpdateInstanceHeadersAccountContext) *UpdateInstanceHeaders {
	s.AccountContext = v
	return s
}

type UpdateInstanceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateInstanceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateInstanceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateInstanceHeadersAccountContext) SetAccountId(v string) *UpdateInstanceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateInstanceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateInstanceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateInstanceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateInstanceShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateInstanceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateInstanceShrinkHeaders) SetAccountContextShrink(v string) *UpdateInstanceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateInstanceRequest struct {
	// example:
	//
	// APP_PBxxx
	AppType *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// f30233fb-72e1-4af4-8cb8-c7e0ea9ee530
	ProcessInstanceId *string `json:"ProcessInstanceId,omitempty" xml:"ProcessInstanceId,omitempty"`
	// example:
	//
	// hexxyy
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
	// example:
	//
	// {}
	UpdateFormDataJson *string `json:"UpdateFormDataJson,omitempty" xml:"UpdateFormDataJson,omitempty"`
}

func (s UpdateInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateInstanceRequest) GoString() string {
	return s.String()
}

func (s *UpdateInstanceRequest) SetAppType(v string) *UpdateInstanceRequest {
	s.AppType = &v
	return s
}

func (s *UpdateInstanceRequest) SetLanguage(v string) *UpdateInstanceRequest {
	s.Language = &v
	return s
}

func (s *UpdateInstanceRequest) SetProcessInstanceId(v string) *UpdateInstanceRequest {
	s.ProcessInstanceId = &v
	return s
}

func (s *UpdateInstanceRequest) SetSystemToken(v string) *UpdateInstanceRequest {
	s.SystemToken = &v
	return s
}

func (s *UpdateInstanceRequest) SetUpdateFormDataJson(v string) *UpdateInstanceRequest {
	s.UpdateFormDataJson = &v
	return s
}

type UpdateInstanceResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s UpdateInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateInstanceResponseBody) SetRequestId(v string) *UpdateInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateInstanceResponseBody) SetVendorRequestId(v string) *UpdateInstanceResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *UpdateInstanceResponseBody) SetVendorType(v string) *UpdateInstanceResponseBody {
	s.VendorType = &v
	return s
}

type UpdateInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateInstanceResponse) GoString() string {
	return s.String()
}

func (s *UpdateInstanceResponse) SetHeaders(v map[string]*string) *UpdateInstanceResponse {
	s.Headers = v
	return s
}

func (s *UpdateInstanceResponse) SetStatusCode(v int32) *UpdateInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateInstanceResponse) SetBody(v *UpdateInstanceResponseBody) *UpdateInstanceResponse {
	s.Body = v
	return s
}

type UpdateLiveHeaders struct {
	CommonHeaders  map[string]*string               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateLiveHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateLiveHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveHeaders) GoString() string {
	return s.String()
}

func (s *UpdateLiveHeaders) SetCommonHeaders(v map[string]*string) *UpdateLiveHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateLiveHeaders) SetAccountContext(v *UpdateLiveHeadersAccountContext) *UpdateLiveHeaders {
	s.AccountContext = v
	return s
}

type UpdateLiveHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateLiveHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateLiveHeadersAccountContext) SetAccountId(v string) *UpdateLiveHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateLiveShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateLiveShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateLiveShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateLiveShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateLiveShrinkHeaders) SetAccountContextShrink(v string) *UpdateLiveShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateLiveRequest struct {
	// example:
	//
	// http://sss/sss
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 这是一个直播
	Introduction *string `json:"Introduction,omitempty" xml:"Introduction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1698596800000
	PreEndTime *int64 `json:"PreEndTime,omitempty" xml:"PreEndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1691596800000
	PreStartTime  *int64                          `json:"PreStartTime,omitempty" xml:"PreStartTime,omitempty"`
	TenantContext *UpdateLiveRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateLiveRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveRequest) SetCoverUrl(v string) *UpdateLiveRequest {
	s.CoverUrl = &v
	return s
}

func (s *UpdateLiveRequest) SetIntroduction(v string) *UpdateLiveRequest {
	s.Introduction = &v
	return s
}

func (s *UpdateLiveRequest) SetLiveId(v string) *UpdateLiveRequest {
	s.LiveId = &v
	return s
}

func (s *UpdateLiveRequest) SetPreEndTime(v int64) *UpdateLiveRequest {
	s.PreEndTime = &v
	return s
}

func (s *UpdateLiveRequest) SetPreStartTime(v int64) *UpdateLiveRequest {
	s.PreStartTime = &v
	return s
}

func (s *UpdateLiveRequest) SetTenantContext(v *UpdateLiveRequestTenantContext) *UpdateLiveRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateLiveRequest) SetTitle(v string) *UpdateLiveRequest {
	s.Title = &v
	return s
}

type UpdateLiveRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateLiveRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateLiveRequestTenantContext) SetTenantId(v string) *UpdateLiveRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateLiveShrinkRequest struct {
	// example:
	//
	// http://sss/sss
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 这是一个直播
	Introduction *string `json:"Introduction,omitempty" xml:"Introduction,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 4d38xxxxx
	LiveId *string `json:"LiveId,omitempty" xml:"LiveId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1698596800000
	PreEndTime *int64 `json:"PreEndTime,omitempty" xml:"PreEndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1691596800000
	PreStartTime        *int64  `json:"PreStartTime,omitempty" xml:"PreStartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateLiveShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveShrinkRequest) SetCoverUrl(v string) *UpdateLiveShrinkRequest {
	s.CoverUrl = &v
	return s
}

func (s *UpdateLiveShrinkRequest) SetIntroduction(v string) *UpdateLiveShrinkRequest {
	s.Introduction = &v
	return s
}

func (s *UpdateLiveShrinkRequest) SetLiveId(v string) *UpdateLiveShrinkRequest {
	s.LiveId = &v
	return s
}

func (s *UpdateLiveShrinkRequest) SetPreEndTime(v int64) *UpdateLiveShrinkRequest {
	s.PreEndTime = &v
	return s
}

func (s *UpdateLiveShrinkRequest) SetPreStartTime(v int64) *UpdateLiveShrinkRequest {
	s.PreStartTime = &v
	return s
}

func (s *UpdateLiveShrinkRequest) SetTenantContextShrink(v string) *UpdateLiveShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateLiveShrinkRequest) SetTitle(v string) *UpdateLiveShrinkRequest {
	s.Title = &v
	return s
}

type UpdateLiveResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateLiveResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveResponseBody) SetRequestId(v string) *UpdateLiveResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateLiveResponseBody) SetSuccess(v bool) *UpdateLiveResponseBody {
	s.Success = &v
	return s
}

type UpdateLiveResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveResponse) SetHeaders(v map[string]*string) *UpdateLiveResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveResponse) SetStatusCode(v int32) *UpdateLiveResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveResponse) SetBody(v *UpdateLiveResponseBody) *UpdateLiveResponse {
	s.Body = v
	return s
}

type UpdateMeetingRoomHeaders struct {
	CommonHeaders  map[string]*string                      `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateMeetingRoomHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateMeetingRoomHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomHeaders) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomHeaders) SetCommonHeaders(v map[string]*string) *UpdateMeetingRoomHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateMeetingRoomHeaders) SetAccountContext(v *UpdateMeetingRoomHeadersAccountContext) *UpdateMeetingRoomHeaders {
	s.AccountContext = v
	return s
}

type UpdateMeetingRoomHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateMeetingRoomHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomHeadersAccountContext) SetAccountId(v string) *UpdateMeetingRoomHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateMeetingRoomShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateMeetingRoomShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateMeetingRoomShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateMeetingRoomShrinkHeaders) SetAccountContextShrink(v string) *UpdateMeetingRoomShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateMeetingRoomRequest struct {
	EnableCycleReservation *bool `json:"EnableCycleReservation,omitempty" xml:"EnableCycleReservation,omitempty"`
	// example:
	//
	// 0
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// xxxIsvRoomId
	IsvRoomId            *string                                       `json:"IsvRoomId,omitempty" xml:"IsvRoomId,omitempty"`
	ReservationAuthority *UpdateMeetingRoomRequestReservationAuthority `json:"ReservationAuthority,omitempty" xml:"ReservationAuthority,omitempty" type:"Struct"`
	// example:
	//
	// 100
	RoomCapacity *int32 `json:"RoomCapacity,omitempty" xml:"RoomCapacity,omitempty"`
	// example:
	//
	// 0ffbxxxxx
	RoomId       *string                               `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	RoomLabelIds []*int64                              `json:"RoomLabelIds,omitempty" xml:"RoomLabelIds,omitempty" type:"Repeated"`
	RoomLocation *UpdateMeetingRoomRequestRoomLocation `json:"RoomLocation,omitempty" xml:"RoomLocation,omitempty" type:"Struct"`
	RoomName     *string                               `json:"RoomName,omitempty" xml:"RoomName,omitempty"`
	// example:
	//
	// https://static.dingtalk.com/media/lADPxxxxx.jpg
	RoomPicture *string `json:"RoomPicture,omitempty" xml:"RoomPicture,omitempty"`
	// example:
	//
	// 1
	RoomStatus    *int32                                 `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
	TenantContext *UpdateMeetingRoomRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s UpdateMeetingRoomRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomRequest) SetEnableCycleReservation(v bool) *UpdateMeetingRoomRequest {
	s.EnableCycleReservation = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetGroupId(v int64) *UpdateMeetingRoomRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetIsvRoomId(v string) *UpdateMeetingRoomRequest {
	s.IsvRoomId = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetReservationAuthority(v *UpdateMeetingRoomRequestReservationAuthority) *UpdateMeetingRoomRequest {
	s.ReservationAuthority = v
	return s
}

func (s *UpdateMeetingRoomRequest) SetRoomCapacity(v int32) *UpdateMeetingRoomRequest {
	s.RoomCapacity = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetRoomId(v string) *UpdateMeetingRoomRequest {
	s.RoomId = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetRoomLabelIds(v []*int64) *UpdateMeetingRoomRequest {
	s.RoomLabelIds = v
	return s
}

func (s *UpdateMeetingRoomRequest) SetRoomLocation(v *UpdateMeetingRoomRequestRoomLocation) *UpdateMeetingRoomRequest {
	s.RoomLocation = v
	return s
}

func (s *UpdateMeetingRoomRequest) SetRoomName(v string) *UpdateMeetingRoomRequest {
	s.RoomName = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetRoomPicture(v string) *UpdateMeetingRoomRequest {
	s.RoomPicture = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetRoomStatus(v int32) *UpdateMeetingRoomRequest {
	s.RoomStatus = &v
	return s
}

func (s *UpdateMeetingRoomRequest) SetTenantContext(v *UpdateMeetingRoomRequestTenantContext) *UpdateMeetingRoomRequest {
	s.TenantContext = v
	return s
}

type UpdateMeetingRoomRequestReservationAuthority struct {
	AuthorizedMembers []*UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers `json:"AuthorizedMembers,omitempty" xml:"AuthorizedMembers,omitempty" type:"Repeated"`
}

func (s UpdateMeetingRoomRequestReservationAuthority) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomRequestReservationAuthority) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomRequestReservationAuthority) SetAuthorizedMembers(v []*UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers) *UpdateMeetingRoomRequestReservationAuthority {
	s.AuthorizedMembers = v
	return s
}

type UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers struct {
	MemberId   *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
}

func (s UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers) SetMemberId(v string) *UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers {
	s.MemberId = &v
	return s
}

func (s *UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers) SetMemberName(v string) *UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers {
	s.MemberName = &v
	return s
}

func (s *UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers) SetMemberType(v string) *UpdateMeetingRoomRequestReservationAuthorityAuthorizedMembers {
	s.MemberType = &v
	return s
}

type UpdateMeetingRoomRequestRoomLocation struct {
	Desc  *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateMeetingRoomRequestRoomLocation) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomRequestRoomLocation) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomRequestRoomLocation) SetDesc(v string) *UpdateMeetingRoomRequestRoomLocation {
	s.Desc = &v
	return s
}

func (s *UpdateMeetingRoomRequestRoomLocation) SetTitle(v string) *UpdateMeetingRoomRequestRoomLocation {
	s.Title = &v
	return s
}

type UpdateMeetingRoomRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateMeetingRoomRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomRequestTenantContext) SetTenantId(v string) *UpdateMeetingRoomRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateMeetingRoomShrinkRequest struct {
	EnableCycleReservation *bool `json:"EnableCycleReservation,omitempty" xml:"EnableCycleReservation,omitempty"`
	// example:
	//
	// 0
	GroupId *int64 `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// xxxIsvRoomId
	IsvRoomId                  *string `json:"IsvRoomId,omitempty" xml:"IsvRoomId,omitempty"`
	ReservationAuthorityShrink *string `json:"ReservationAuthority,omitempty" xml:"ReservationAuthority,omitempty"`
	// example:
	//
	// 100
	RoomCapacity *int32 `json:"RoomCapacity,omitempty" xml:"RoomCapacity,omitempty"`
	// example:
	//
	// 0ffbxxxxx
	RoomId             *string `json:"RoomId,omitempty" xml:"RoomId,omitempty"`
	RoomLabelIdsShrink *string `json:"RoomLabelIds,omitempty" xml:"RoomLabelIds,omitempty"`
	RoomLocationShrink *string `json:"RoomLocation,omitempty" xml:"RoomLocation,omitempty"`
	RoomName           *string `json:"RoomName,omitempty" xml:"RoomName,omitempty"`
	// example:
	//
	// https://static.dingtalk.com/media/lADPxxxxx.jpg
	RoomPicture *string `json:"RoomPicture,omitempty" xml:"RoomPicture,omitempty"`
	// example:
	//
	// 1
	RoomStatus          *int32  `json:"RoomStatus,omitempty" xml:"RoomStatus,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s UpdateMeetingRoomShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomShrinkRequest) SetEnableCycleReservation(v bool) *UpdateMeetingRoomShrinkRequest {
	s.EnableCycleReservation = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetGroupId(v int64) *UpdateMeetingRoomShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetIsvRoomId(v string) *UpdateMeetingRoomShrinkRequest {
	s.IsvRoomId = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetReservationAuthorityShrink(v string) *UpdateMeetingRoomShrinkRequest {
	s.ReservationAuthorityShrink = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetRoomCapacity(v int32) *UpdateMeetingRoomShrinkRequest {
	s.RoomCapacity = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetRoomId(v string) *UpdateMeetingRoomShrinkRequest {
	s.RoomId = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetRoomLabelIdsShrink(v string) *UpdateMeetingRoomShrinkRequest {
	s.RoomLabelIdsShrink = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetRoomLocationShrink(v string) *UpdateMeetingRoomShrinkRequest {
	s.RoomLocationShrink = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetRoomName(v string) *UpdateMeetingRoomShrinkRequest {
	s.RoomName = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetRoomPicture(v string) *UpdateMeetingRoomShrinkRequest {
	s.RoomPicture = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetRoomStatus(v int32) *UpdateMeetingRoomShrinkRequest {
	s.RoomStatus = &v
	return s
}

func (s *UpdateMeetingRoomShrinkRequest) SetTenantContextShrink(v string) *UpdateMeetingRoomShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type UpdateMeetingRoomResponseBody struct {
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s UpdateMeetingRoomResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomResponseBody) SetResult(v bool) *UpdateMeetingRoomResponseBody {
	s.Result = &v
	return s
}

func (s *UpdateMeetingRoomResponseBody) SetRequestId(v string) *UpdateMeetingRoomResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMeetingRoomResponseBody) SetVendorRequestId(v string) *UpdateMeetingRoomResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *UpdateMeetingRoomResponseBody) SetVendorType(v string) *UpdateMeetingRoomResponseBody {
	s.VendorType = &v
	return s
}

type UpdateMeetingRoomResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMeetingRoomResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMeetingRoomResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomResponse) SetHeaders(v map[string]*string) *UpdateMeetingRoomResponse {
	s.Headers = v
	return s
}

func (s *UpdateMeetingRoomResponse) SetStatusCode(v int32) *UpdateMeetingRoomResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMeetingRoomResponse) SetBody(v *UpdateMeetingRoomResponseBody) *UpdateMeetingRoomResponse {
	s.Body = v
	return s
}

type UpdateMeetingRoomGroupHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateMeetingRoomGroupHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateMeetingRoomGroupHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupHeaders) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupHeaders) SetCommonHeaders(v map[string]*string) *UpdateMeetingRoomGroupHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateMeetingRoomGroupHeaders) SetAccountContext(v *UpdateMeetingRoomGroupHeadersAccountContext) *UpdateMeetingRoomGroupHeaders {
	s.AccountContext = v
	return s
}

type UpdateMeetingRoomGroupHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateMeetingRoomGroupHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupHeadersAccountContext) SetAccountId(v string) *UpdateMeetingRoomGroupHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateMeetingRoomGroupShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateMeetingRoomGroupShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateMeetingRoomGroupShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateMeetingRoomGroupShrinkHeaders) SetAccountContextShrink(v string) *UpdateMeetingRoomGroupShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateMeetingRoomGroupRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 172
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 测试分组
	GroupName     *string                                     `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	TenantContext *UpdateMeetingRoomGroupRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s UpdateMeetingRoomGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupRequest) SetGroupId(v string) *UpdateMeetingRoomGroupRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateMeetingRoomGroupRequest) SetGroupName(v string) *UpdateMeetingRoomGroupRequest {
	s.GroupName = &v
	return s
}

func (s *UpdateMeetingRoomGroupRequest) SetTenantContext(v *UpdateMeetingRoomGroupRequestTenantContext) *UpdateMeetingRoomGroupRequest {
	s.TenantContext = v
	return s
}

type UpdateMeetingRoomGroupRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateMeetingRoomGroupRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupRequestTenantContext) SetTenantId(v string) *UpdateMeetingRoomGroupRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateMeetingRoomGroupShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 172
	GroupId *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	// example:
	//
	// 测试分组
	GroupName           *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s UpdateMeetingRoomGroupShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupShrinkRequest) SetGroupId(v string) *UpdateMeetingRoomGroupShrinkRequest {
	s.GroupId = &v
	return s
}

func (s *UpdateMeetingRoomGroupShrinkRequest) SetGroupName(v string) *UpdateMeetingRoomGroupShrinkRequest {
	s.GroupName = &v
	return s
}

func (s *UpdateMeetingRoomGroupShrinkRequest) SetTenantContextShrink(v string) *UpdateMeetingRoomGroupShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type UpdateMeetingRoomGroupResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateMeetingRoomGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupResponseBody) SetRequestId(v string) *UpdateMeetingRoomGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMeetingRoomGroupResponseBody) SetResult(v bool) *UpdateMeetingRoomGroupResponseBody {
	s.Result = &v
	return s
}

type UpdateMeetingRoomGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMeetingRoomGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMeetingRoomGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMeetingRoomGroupResponse) GoString() string {
	return s.String()
}

func (s *UpdateMeetingRoomGroupResponse) SetHeaders(v map[string]*string) *UpdateMeetingRoomGroupResponse {
	s.Headers = v
	return s
}

func (s *UpdateMeetingRoomGroupResponse) SetStatusCode(v int32) *UpdateMeetingRoomGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMeetingRoomGroupResponse) SetBody(v *UpdateMeetingRoomGroupResponseBody) *UpdateMeetingRoomGroupResponse {
	s.Body = v
	return s
}

type UpdateRangeHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateRangeHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateRangeHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeHeaders) GoString() string {
	return s.String()
}

func (s *UpdateRangeHeaders) SetCommonHeaders(v map[string]*string) *UpdateRangeHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateRangeHeaders) SetAccountContext(v *UpdateRangeHeadersAccountContext) *UpdateRangeHeaders {
	s.AccountContext = v
	return s
}

type UpdateRangeHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateRangeHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateRangeHeadersAccountContext) SetAccountId(v string) *UpdateRangeHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateRangeShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateRangeShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateRangeShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateRangeShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateRangeShrinkHeaders) SetAccountContextShrink(v string) *UpdateRangeShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateRangeRequest struct {
	// example:
	//
	// [["#ff0000","#ff0000","#ff0000"]]
	BackgroundColors [][]*string `json:"BackgroundColors,omitempty" xml:"BackgroundColors,omitempty" type:"Repeated"`
	// example:
	//
	// [["type": "path","link": "https://www.dingtalk.com","text": "test"]]
	Hyperlinks [][]*UpdateRangeRequestHyperlinks `json:"Hyperlinks,omitempty" xml:"Hyperlinks,omitempty" type:"Repeated"`
	// example:
	//
	// General
	NumberFormat *string `json:"NumberFormat,omitempty" xml:"NumberFormat,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId       *string                          `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContext *UpdateRangeRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// [["1","2","3"]]
	Values [][]*string `json:"Values,omitempty" xml:"Values,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s UpdateRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeRequest) GoString() string {
	return s.String()
}

func (s *UpdateRangeRequest) SetBackgroundColors(v [][]*string) *UpdateRangeRequest {
	s.BackgroundColors = v
	return s
}

func (s *UpdateRangeRequest) SetHyperlinks(v [][]*UpdateRangeRequestHyperlinks) *UpdateRangeRequest {
	s.Hyperlinks = v
	return s
}

func (s *UpdateRangeRequest) SetNumberFormat(v string) *UpdateRangeRequest {
	s.NumberFormat = &v
	return s
}

func (s *UpdateRangeRequest) SetRangeAddress(v string) *UpdateRangeRequest {
	s.RangeAddress = &v
	return s
}

func (s *UpdateRangeRequest) SetSheetId(v string) *UpdateRangeRequest {
	s.SheetId = &v
	return s
}

func (s *UpdateRangeRequest) SetTenantContext(v *UpdateRangeRequestTenantContext) *UpdateRangeRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateRangeRequest) SetValues(v [][]*string) *UpdateRangeRequest {
	s.Values = v
	return s
}

func (s *UpdateRangeRequest) SetWorkbookId(v string) *UpdateRangeRequest {
	s.WorkbookId = &v
	return s
}

type UpdateRangeRequestHyperlinks struct {
	// example:
	//
	// path
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// https://www.dingtalk.com
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	// example:
	//
	// test
	Text *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s UpdateRangeRequestHyperlinks) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeRequestHyperlinks) GoString() string {
	return s.String()
}

func (s *UpdateRangeRequestHyperlinks) SetType(v string) *UpdateRangeRequestHyperlinks {
	s.Type = &v
	return s
}

func (s *UpdateRangeRequestHyperlinks) SetLink(v string) *UpdateRangeRequestHyperlinks {
	s.Link = &v
	return s
}

func (s *UpdateRangeRequestHyperlinks) SetText(v string) *UpdateRangeRequestHyperlinks {
	s.Text = &v
	return s
}

type UpdateRangeRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateRangeRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateRangeRequestTenantContext) SetTenantId(v string) *UpdateRangeRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateRangeShrinkRequest struct {
	// example:
	//
	// [["#ff0000","#ff0000","#ff0000"]]
	BackgroundColorsShrink *string `json:"BackgroundColors,omitempty" xml:"BackgroundColors,omitempty"`
	// example:
	//
	// [["type": "path","link": "https://www.dingtalk.com","text": "test"]]
	HyperlinksShrink *string `json:"Hyperlinks,omitempty" xml:"Hyperlinks,omitempty"`
	// example:
	//
	// General
	NumberFormat *string `json:"NumberFormat,omitempty" xml:"NumberFormat,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// A3:C3
	RangeAddress *string `json:"RangeAddress,omitempty" xml:"RangeAddress,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Sheet1
	SheetId             *string `json:"SheetId,omitempty" xml:"SheetId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// [["1","2","3"]]
	ValuesShrink *string `json:"Values,omitempty" xml:"Values,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// stxxxx
	WorkbookId *string `json:"WorkbookId,omitempty" xml:"WorkbookId,omitempty"`
}

func (s UpdateRangeShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateRangeShrinkRequest) SetBackgroundColorsShrink(v string) *UpdateRangeShrinkRequest {
	s.BackgroundColorsShrink = &v
	return s
}

func (s *UpdateRangeShrinkRequest) SetHyperlinksShrink(v string) *UpdateRangeShrinkRequest {
	s.HyperlinksShrink = &v
	return s
}

func (s *UpdateRangeShrinkRequest) SetNumberFormat(v string) *UpdateRangeShrinkRequest {
	s.NumberFormat = &v
	return s
}

func (s *UpdateRangeShrinkRequest) SetRangeAddress(v string) *UpdateRangeShrinkRequest {
	s.RangeAddress = &v
	return s
}

func (s *UpdateRangeShrinkRequest) SetSheetId(v string) *UpdateRangeShrinkRequest {
	s.SheetId = &v
	return s
}

func (s *UpdateRangeShrinkRequest) SetTenantContextShrink(v string) *UpdateRangeShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateRangeShrinkRequest) SetValuesShrink(v string) *UpdateRangeShrinkRequest {
	s.ValuesShrink = &v
	return s
}

func (s *UpdateRangeShrinkRequest) SetWorkbookId(v string) *UpdateRangeShrinkRequest {
	s.WorkbookId = &v
	return s
}

type UpdateRangeResponseBody struct {
	// example:
	//
	// A1:B2
	A1Notation *string `json:"a1Notation,omitempty" xml:"a1Notation,omitempty"`
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s UpdateRangeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateRangeResponseBody) SetA1Notation(v string) *UpdateRangeResponseBody {
	s.A1Notation = &v
	return s
}

func (s *UpdateRangeResponseBody) SetRequestId(v string) *UpdateRangeResponseBody {
	s.RequestId = &v
	return s
}

type UpdateRangeResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateRangeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateRangeResponse) GoString() string {
	return s.String()
}

func (s *UpdateRangeResponse) SetHeaders(v map[string]*string) *UpdateRangeResponse {
	s.Headers = v
	return s
}

func (s *UpdateRangeResponse) SetStatusCode(v int32) *UpdateRangeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateRangeResponse) SetBody(v *UpdateRangeResponseBody) *UpdateRangeResponse {
	s.Body = v
	return s
}

type UpdateScheduleConfSettingsHeaders struct {
	CommonHeaders  map[string]*string                               `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateScheduleConfSettingsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateScheduleConfSettingsHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsHeaders) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsHeaders) SetCommonHeaders(v map[string]*string) *UpdateScheduleConfSettingsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateScheduleConfSettingsHeaders) SetAccountContext(v *UpdateScheduleConfSettingsHeadersAccountContext) *UpdateScheduleConfSettingsHeaders {
	s.AccountContext = v
	return s
}

type UpdateScheduleConfSettingsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateScheduleConfSettingsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsHeadersAccountContext) SetAccountId(v string) *UpdateScheduleConfSettingsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateScheduleConfSettingsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateScheduleConfSettingsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateScheduleConfSettingsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateScheduleConfSettingsShrinkHeaders) SetAccountContextShrink(v string) *UpdateScheduleConfSettingsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateScheduleConfSettingsRequest struct {
	ScheduleConfSettingModel *UpdateScheduleConfSettingsRequestScheduleConfSettingModel `json:"ScheduleConfSettingModel,omitempty" xml:"ScheduleConfSettingModel,omitempty" type:"Struct"`
	// example:
	//
	// f6fb627e-a7e8-403e-b1f8-26e85450f4a9
	ScheduleConferenceId *string                                         `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	TenantContext        *UpdateScheduleConfSettingsRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
}

func (s UpdateScheduleConfSettingsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsRequest) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsRequest) SetScheduleConfSettingModel(v *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) *UpdateScheduleConfSettingsRequest {
	s.ScheduleConfSettingModel = v
	return s
}

func (s *UpdateScheduleConfSettingsRequest) SetScheduleConferenceId(v string) *UpdateScheduleConfSettingsRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequest) SetTenantContext(v *UpdateScheduleConfSettingsRequestTenantContext) *UpdateScheduleConfSettingsRequest {
	s.TenantContext = v
	return s
}

type UpdateScheduleConfSettingsRequestScheduleConfSettingModel struct {
	CohostUserIds []*string `json:"CohostUserIds,omitempty" xml:"CohostUserIds,omitempty" type:"Repeated"`
	// example:
	//
	// ding********
	ConfAllowedCorpId *string `json:"ConfAllowedCorpId,omitempty" xml:"ConfAllowedCorpId,omitempty"`
	// example:
	//
	// 012345
	HostUserId *string `json:"HostUserId,omitempty" xml:"HostUserId,omitempty"`
	// example:
	//
	// 1
	LockRoom                    *int32                                                                                `json:"LockRoom,omitempty" xml:"LockRoom,omitempty"`
	MoziConfVirtualExtraSetting *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting `json:"MoziConfVirtualExtraSetting,omitempty" xml:"MoziConfVirtualExtraSetting,omitempty" type:"Struct"`
	// example:
	//
	// 1
	MuteOnJoin *int32 `json:"MuteOnJoin,omitempty" xml:"MuteOnJoin,omitempty"`
	// example:
	//
	// 1
	ScreenShareForbidden *int32 `json:"ScreenShareForbidden,omitempty" xml:"ScreenShareForbidden,omitempty"`
}

func (s UpdateScheduleConfSettingsRequestScheduleConfSettingModel) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsRequestScheduleConfSettingModel) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) SetCohostUserIds(v []*string) *UpdateScheduleConfSettingsRequestScheduleConfSettingModel {
	s.CohostUserIds = v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) SetConfAllowedCorpId(v string) *UpdateScheduleConfSettingsRequestScheduleConfSettingModel {
	s.ConfAllowedCorpId = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) SetHostUserId(v string) *UpdateScheduleConfSettingsRequestScheduleConfSettingModel {
	s.HostUserId = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) SetLockRoom(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModel {
	s.LockRoom = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) SetMoziConfVirtualExtraSetting(v *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) *UpdateScheduleConfSettingsRequestScheduleConfSettingModel {
	s.MoziConfVirtualExtraSetting = v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) SetMuteOnJoin(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModel {
	s.MuteOnJoin = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModel) SetScreenShareForbidden(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModel {
	s.ScreenShareForbidden = &v
	return s
}

type UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting struct {
	CloudRecordOwnerUserId *string `json:"CloudRecordOwnerUserId,omitempty" xml:"CloudRecordOwnerUserId,omitempty"`
	// example:
	//
	// 1
	EnableChat             *int32 `json:"EnableChat,omitempty" xml:"EnableChat,omitempty"`
	EnableWebAnonymousJoin *bool  `json:"EnableWebAnonymousJoin,omitempty" xml:"EnableWebAnonymousJoin,omitempty"`
	// example:
	//
	// 1
	JoinBeforeHost *int32 `json:"JoinBeforeHost,omitempty" xml:"JoinBeforeHost,omitempty"`
	// example:
	//
	// 1
	LockMediaStatusMicMute *int32 `json:"LockMediaStatusMicMute,omitempty" xml:"LockMediaStatusMicMute,omitempty"`
	// example:
	//
	// 1
	LockNick              *int32  `json:"LockNick,omitempty" xml:"LockNick,omitempty"`
	MinutesOwnerUserId    *string `json:"MinutesOwnerUserId,omitempty" xml:"MinutesOwnerUserId,omitempty"`
	PushAllMeetingRecords *bool   `json:"PushAllMeetingRecords,omitempty" xml:"PushAllMeetingRecords,omitempty"`
	PushCloudRecordCard   *bool   `json:"PushCloudRecordCard,omitempty" xml:"PushCloudRecordCard,omitempty"`
	PushMinutesCard       *bool   `json:"PushMinutesCard,omitempty" xml:"PushMinutesCard,omitempty"`
	// example:
	//
	// 1
	WaitingRoom *int32 `json:"WaitingRoom,omitempty" xml:"WaitingRoom,omitempty"`
}

func (s UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetCloudRecordOwnerUserId(v string) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.CloudRecordOwnerUserId = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetEnableChat(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.EnableChat = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetEnableWebAnonymousJoin(v bool) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.EnableWebAnonymousJoin = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetJoinBeforeHost(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.JoinBeforeHost = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetLockMediaStatusMicMute(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.LockMediaStatusMicMute = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetLockNick(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.LockNick = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetMinutesOwnerUserId(v string) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.MinutesOwnerUserId = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetPushAllMeetingRecords(v bool) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.PushAllMeetingRecords = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetPushCloudRecordCard(v bool) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.PushCloudRecordCard = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetPushMinutesCard(v bool) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.PushMinutesCard = &v
	return s
}

func (s *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting) SetWaitingRoom(v int32) *UpdateScheduleConfSettingsRequestScheduleConfSettingModelMoziConfVirtualExtraSetting {
	s.WaitingRoom = &v
	return s
}

type UpdateScheduleConfSettingsRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateScheduleConfSettingsRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsRequestTenantContext) SetTenantId(v string) *UpdateScheduleConfSettingsRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateScheduleConfSettingsShrinkRequest struct {
	ScheduleConfSettingModelShrink *string `json:"ScheduleConfSettingModel,omitempty" xml:"ScheduleConfSettingModel,omitempty"`
	// example:
	//
	// f6fb627e-a7e8-403e-b1f8-26e85450f4a9
	ScheduleConferenceId *string `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	TenantContextShrink  *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
}

func (s UpdateScheduleConfSettingsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsShrinkRequest) SetScheduleConfSettingModelShrink(v string) *UpdateScheduleConfSettingsShrinkRequest {
	s.ScheduleConfSettingModelShrink = &v
	return s
}

func (s *UpdateScheduleConfSettingsShrinkRequest) SetScheduleConferenceId(v string) *UpdateScheduleConfSettingsShrinkRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *UpdateScheduleConfSettingsShrinkRequest) SetTenantContextShrink(v string) *UpdateScheduleConfSettingsShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

type UpdateScheduleConfSettingsResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s UpdateScheduleConfSettingsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsResponseBody) SetRequestId(v string) *UpdateScheduleConfSettingsResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateScheduleConfSettingsResponseBody) SetSuccess(v bool) *UpdateScheduleConfSettingsResponseBody {
	s.Success = &v
	return s
}

func (s *UpdateScheduleConfSettingsResponseBody) SetVendorRequestId(v string) *UpdateScheduleConfSettingsResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *UpdateScheduleConfSettingsResponseBody) SetVendorType(v string) *UpdateScheduleConfSettingsResponseBody {
	s.VendorType = &v
	return s
}

type UpdateScheduleConfSettingsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateScheduleConfSettingsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateScheduleConfSettingsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConfSettingsResponse) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConfSettingsResponse) SetHeaders(v map[string]*string) *UpdateScheduleConfSettingsResponse {
	s.Headers = v
	return s
}

func (s *UpdateScheduleConfSettingsResponse) SetStatusCode(v int32) *UpdateScheduleConfSettingsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateScheduleConfSettingsResponse) SetBody(v *UpdateScheduleConfSettingsResponseBody) *UpdateScheduleConfSettingsResponse {
	s.Body = v
	return s
}

type UpdateScheduleConferenceHeaders struct {
	CommonHeaders  map[string]*string                             `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateScheduleConferenceHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateScheduleConferenceHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceHeaders) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceHeaders) SetCommonHeaders(v map[string]*string) *UpdateScheduleConferenceHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateScheduleConferenceHeaders) SetAccountContext(v *UpdateScheduleConferenceHeadersAccountContext) *UpdateScheduleConferenceHeaders {
	s.AccountContext = v
	return s
}

type UpdateScheduleConferenceHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateScheduleConferenceHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceHeadersAccountContext) SetAccountId(v string) *UpdateScheduleConferenceHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateScheduleConferenceShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateScheduleConferenceShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateScheduleConferenceShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateScheduleConferenceShrinkHeaders) SetAccountContextShrink(v string) *UpdateScheduleConferenceShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateScheduleConferenceRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1687928400000L
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1687924800000L
	StartTime     *int64                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContext *UpdateScheduleConferenceRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 预约会议标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateScheduleConferenceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceRequest) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceRequest) SetEndTime(v int64) *UpdateScheduleConferenceRequest {
	s.EndTime = &v
	return s
}

func (s *UpdateScheduleConferenceRequest) SetScheduleConferenceId(v string) *UpdateScheduleConferenceRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *UpdateScheduleConferenceRequest) SetStartTime(v int64) *UpdateScheduleConferenceRequest {
	s.StartTime = &v
	return s
}

func (s *UpdateScheduleConferenceRequest) SetTenantContext(v *UpdateScheduleConferenceRequestTenantContext) *UpdateScheduleConferenceRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateScheduleConferenceRequest) SetTitle(v string) *UpdateScheduleConferenceRequest {
	s.Title = &v
	return s
}

type UpdateScheduleConferenceRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateScheduleConferenceRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceRequestTenantContext) SetTenantId(v string) *UpdateScheduleConferenceRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateScheduleConferenceShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1687928400000L
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2a489xxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
	ScheduleConferenceId *string `json:"ScheduleConferenceId,omitempty" xml:"ScheduleConferenceId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1687924800000L
	StartTime           *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 预约会议标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateScheduleConferenceShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceShrinkRequest) SetEndTime(v int64) *UpdateScheduleConferenceShrinkRequest {
	s.EndTime = &v
	return s
}

func (s *UpdateScheduleConferenceShrinkRequest) SetScheduleConferenceId(v string) *UpdateScheduleConferenceShrinkRequest {
	s.ScheduleConferenceId = &v
	return s
}

func (s *UpdateScheduleConferenceShrinkRequest) SetStartTime(v int64) *UpdateScheduleConferenceShrinkRequest {
	s.StartTime = &v
	return s
}

func (s *UpdateScheduleConferenceShrinkRequest) SetTenantContextShrink(v string) *UpdateScheduleConferenceShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateScheduleConferenceShrinkRequest) SetTitle(v string) *UpdateScheduleConferenceShrinkRequest {
	s.Title = &v
	return s
}

type UpdateScheduleConferenceResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s UpdateScheduleConferenceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceResponseBody) SetRequestId(v string) *UpdateScheduleConferenceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateScheduleConferenceResponseBody) SetSuccess(v bool) *UpdateScheduleConferenceResponseBody {
	s.Success = &v
	return s
}

type UpdateScheduleConferenceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateScheduleConferenceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateScheduleConferenceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateScheduleConferenceResponse) GoString() string {
	return s.String()
}

func (s *UpdateScheduleConferenceResponse) SetHeaders(v map[string]*string) *UpdateScheduleConferenceResponse {
	s.Headers = v
	return s
}

func (s *UpdateScheduleConferenceResponse) SetStatusCode(v int32) *UpdateScheduleConferenceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateScheduleConferenceResponse) SetBody(v *UpdateScheduleConferenceResponseBody) *UpdateScheduleConferenceResponse {
	s.Body = v
	return s
}

type UpdateStatusHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateStatusHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateStatusHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusHeaders) GoString() string {
	return s.String()
}

func (s *UpdateStatusHeaders) SetCommonHeaders(v map[string]*string) *UpdateStatusHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateStatusHeaders) SetAccountContext(v *UpdateStatusHeadersAccountContext) *UpdateStatusHeaders {
	s.AccountContext = v
	return s
}

type UpdateStatusHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateStatusHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateStatusHeadersAccountContext) SetAccountId(v string) *UpdateStatusHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateStatusShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateStatusShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateStatusShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateStatusShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateStatusShrinkHeaders) SetAccountContextShrink(v string) *UpdateStatusShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateStatusRequest struct {
	// example:
	//
	// APP_PBKT0MFBEBTDO8T7SLVP
	AppType    *string  `json:"AppType,omitempty" xml:"AppType,omitempty"`
	ErrorLines []*int32 `json:"ErrorLines,omitempty" xml:"ErrorLines,omitempty" type:"Repeated"`
	// example:
	//
	// seq-123
	ImportSequence *string `json:"ImportSequence,omitempty" xml:"ImportSequence,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s UpdateStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateStatusRequest) SetAppType(v string) *UpdateStatusRequest {
	s.AppType = &v
	return s
}

func (s *UpdateStatusRequest) SetErrorLines(v []*int32) *UpdateStatusRequest {
	s.ErrorLines = v
	return s
}

func (s *UpdateStatusRequest) SetImportSequence(v string) *UpdateStatusRequest {
	s.ImportSequence = &v
	return s
}

func (s *UpdateStatusRequest) SetLanguage(v string) *UpdateStatusRequest {
	s.Language = &v
	return s
}

func (s *UpdateStatusRequest) SetStatus(v string) *UpdateStatusRequest {
	s.Status = &v
	return s
}

func (s *UpdateStatusRequest) SetSystemToken(v string) *UpdateStatusRequest {
	s.SystemToken = &v
	return s
}

type UpdateStatusShrinkRequest struct {
	// example:
	//
	// APP_PBKT0MFBEBTDO8T7SLVP
	AppType          *string `json:"AppType,omitempty" xml:"AppType,omitempty"`
	ErrorLinesShrink *string `json:"ErrorLines,omitempty" xml:"ErrorLines,omitempty"`
	// example:
	//
	// seq-123
	ImportSequence *string `json:"ImportSequence,omitempty" xml:"ImportSequence,omitempty"`
	// example:
	//
	// zh_CN
	Language *string `json:"Language,omitempty" xml:"Language,omitempty"`
	// example:
	//
	// running
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// hexxxx
	SystemToken *string `json:"SystemToken,omitempty" xml:"SystemToken,omitempty"`
}

func (s UpdateStatusShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateStatusShrinkRequest) SetAppType(v string) *UpdateStatusShrinkRequest {
	s.AppType = &v
	return s
}

func (s *UpdateStatusShrinkRequest) SetErrorLinesShrink(v string) *UpdateStatusShrinkRequest {
	s.ErrorLinesShrink = &v
	return s
}

func (s *UpdateStatusShrinkRequest) SetImportSequence(v string) *UpdateStatusShrinkRequest {
	s.ImportSequence = &v
	return s
}

func (s *UpdateStatusShrinkRequest) SetLanguage(v string) *UpdateStatusShrinkRequest {
	s.Language = &v
	return s
}

func (s *UpdateStatusShrinkRequest) SetStatus(v string) *UpdateStatusShrinkRequest {
	s.Status = &v
	return s
}

func (s *UpdateStatusShrinkRequest) SetSystemToken(v string) *UpdateStatusShrinkRequest {
	s.SystemToken = &v
	return s
}

type UpdateStatusResponseBody struct {
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s UpdateStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateStatusResponseBody) SetRequestId(v string) *UpdateStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateStatusResponseBody) SetVendorRequestId(v string) *UpdateStatusResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *UpdateStatusResponseBody) SetVendorType(v string) *UpdateStatusResponseBody {
	s.VendorType = &v
	return s
}

type UpdateStatusResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateStatusResponse) SetHeaders(v map[string]*string) *UpdateStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateStatusResponse) SetStatusCode(v int32) *UpdateStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateStatusResponse) SetBody(v *UpdateStatusResponseBody) *UpdateStatusResponse {
	s.Body = v
	return s
}

type UpdateSubscribedCalendarsHeaders struct {
	CommonHeaders  map[string]*string                              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateSubscribedCalendarsHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateSubscribedCalendarsHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsHeaders) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsHeaders) SetCommonHeaders(v map[string]*string) *UpdateSubscribedCalendarsHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateSubscribedCalendarsHeaders) SetAccountContext(v *UpdateSubscribedCalendarsHeadersAccountContext) *UpdateSubscribedCalendarsHeaders {
	s.AccountContext = v
	return s
}

type UpdateSubscribedCalendarsHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateSubscribedCalendarsHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsHeadersAccountContext) SetAccountId(v string) *UpdateSubscribedCalendarsHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateSubscribedCalendarsShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateSubscribedCalendarsShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateSubscribedCalendarsShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateSubscribedCalendarsShrinkHeaders) SetAccountContextShrink(v string) *UpdateSubscribedCalendarsShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateSubscribedCalendarsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv
	CalendarId     *string                                         `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	Description    *string                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	Managers       []*string                                       `json:"Managers,omitempty" xml:"Managers,omitempty" type:"Repeated"`
	Name           *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	SubscribeScope *UpdateSubscribedCalendarsRequestSubscribeScope `json:"SubscribeScope,omitempty" xml:"SubscribeScope,omitempty" type:"Struct"`
}

func (s UpdateSubscribedCalendarsRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsRequest) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsRequest) SetCalendarId(v string) *UpdateSubscribedCalendarsRequest {
	s.CalendarId = &v
	return s
}

func (s *UpdateSubscribedCalendarsRequest) SetDescription(v string) *UpdateSubscribedCalendarsRequest {
	s.Description = &v
	return s
}

func (s *UpdateSubscribedCalendarsRequest) SetManagers(v []*string) *UpdateSubscribedCalendarsRequest {
	s.Managers = v
	return s
}

func (s *UpdateSubscribedCalendarsRequest) SetName(v string) *UpdateSubscribedCalendarsRequest {
	s.Name = &v
	return s
}

func (s *UpdateSubscribedCalendarsRequest) SetSubscribeScope(v *UpdateSubscribedCalendarsRequestSubscribeScope) *UpdateSubscribedCalendarsRequest {
	s.SubscribeScope = v
	return s
}

type UpdateSubscribedCalendarsRequestSubscribeScope struct {
	UserIds []*string `json:"UserIds,omitempty" xml:"UserIds,omitempty" type:"Repeated"`
}

func (s UpdateSubscribedCalendarsRequestSubscribeScope) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsRequestSubscribeScope) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsRequestSubscribeScope) SetUserIds(v []*string) *UpdateSubscribedCalendarsRequestSubscribeScope {
	s.UserIds = v
	return s
}

type UpdateSubscribedCalendarsShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// M5MjkxNDUxQHVzZXJzLmRpbmd0YWxrLmNv
	CalendarId           *string `json:"CalendarId,omitempty" xml:"CalendarId,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ManagersShrink       *string `json:"Managers,omitempty" xml:"Managers,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SubscribeScopeShrink *string `json:"SubscribeScope,omitempty" xml:"SubscribeScope,omitempty"`
}

func (s UpdateSubscribedCalendarsShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsShrinkRequest) SetCalendarId(v string) *UpdateSubscribedCalendarsShrinkRequest {
	s.CalendarId = &v
	return s
}

func (s *UpdateSubscribedCalendarsShrinkRequest) SetDescription(v string) *UpdateSubscribedCalendarsShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateSubscribedCalendarsShrinkRequest) SetManagersShrink(v string) *UpdateSubscribedCalendarsShrinkRequest {
	s.ManagersShrink = &v
	return s
}

func (s *UpdateSubscribedCalendarsShrinkRequest) SetName(v string) *UpdateSubscribedCalendarsShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateSubscribedCalendarsShrinkRequest) SetSubscribeScopeShrink(v string) *UpdateSubscribedCalendarsShrinkRequest {
	s.SubscribeScopeShrink = &v
	return s
}

type UpdateSubscribedCalendarsResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateSubscribedCalendarsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsResponseBody) SetRequestId(v string) *UpdateSubscribedCalendarsResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSubscribedCalendarsResponseBody) SetResult(v bool) *UpdateSubscribedCalendarsResponseBody {
	s.Result = &v
	return s
}

type UpdateSubscribedCalendarsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSubscribedCalendarsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSubscribedCalendarsResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSubscribedCalendarsResponse) GoString() string {
	return s.String()
}

func (s *UpdateSubscribedCalendarsResponse) SetHeaders(v map[string]*string) *UpdateSubscribedCalendarsResponse {
	s.Headers = v
	return s
}

func (s *UpdateSubscribedCalendarsResponse) SetStatusCode(v int32) *UpdateSubscribedCalendarsResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSubscribedCalendarsResponse) SetBody(v *UpdateSubscribedCalendarsResponseBody) *UpdateSubscribedCalendarsResponse {
	s.Body = v
	return s
}

type UpdateTodoTaskHeaders struct {
	CommonHeaders  map[string]*string                   `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateTodoTaskHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateTodoTaskHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskHeaders) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskHeaders) SetCommonHeaders(v map[string]*string) *UpdateTodoTaskHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateTodoTaskHeaders) SetAccountContext(v *UpdateTodoTaskHeadersAccountContext) *UpdateTodoTaskHeaders {
	s.AccountContext = v
	return s
}

type UpdateTodoTaskHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateTodoTaskHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskHeadersAccountContext) SetAccountId(v string) *UpdateTodoTaskHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateTodoTaskShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateTodoTaskShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateTodoTaskShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateTodoTaskShrinkHeaders) SetAccountContextShrink(v string) *UpdateTodoTaskShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateTodoTaskRequest struct {
	TenantContext *UpdateTodoTaskRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// 应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// true
	Done *bool `json:"done,omitempty" xml:"done,omitempty"`
	// example:
	//
	// 1617675000000
	DueTime *int64 `json:"dueTime,omitempty" xml:"dueTime,omitempty"`
	// example:
	//
	// []
	ExecutorIds []*string `json:"executorIds,omitempty" xml:"executorIds,omitempty" type:"Repeated"`
	// example:
	//
	// []
	ParticipantIds []*string `json:"participantIds,omitempty" xml:"participantIds,omitempty" type:"Repeated"`
	// example:
	//
	// 更新钉钉待办
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// taskId
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s UpdateTodoTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskRequest) SetTenantContext(v *UpdateTodoTaskRequestTenantContext) *UpdateTodoTaskRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateTodoTaskRequest) SetDescription(v string) *UpdateTodoTaskRequest {
	s.Description = &v
	return s
}

func (s *UpdateTodoTaskRequest) SetDone(v bool) *UpdateTodoTaskRequest {
	s.Done = &v
	return s
}

func (s *UpdateTodoTaskRequest) SetDueTime(v int64) *UpdateTodoTaskRequest {
	s.DueTime = &v
	return s
}

func (s *UpdateTodoTaskRequest) SetExecutorIds(v []*string) *UpdateTodoTaskRequest {
	s.ExecutorIds = v
	return s
}

func (s *UpdateTodoTaskRequest) SetParticipantIds(v []*string) *UpdateTodoTaskRequest {
	s.ParticipantIds = v
	return s
}

func (s *UpdateTodoTaskRequest) SetSubject(v string) *UpdateTodoTaskRequest {
	s.Subject = &v
	return s
}

func (s *UpdateTodoTaskRequest) SetTaskId(v string) *UpdateTodoTaskRequest {
	s.TaskId = &v
	return s
}

type UpdateTodoTaskRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateTodoTaskRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskRequestTenantContext) SetTenantId(v string) *UpdateTodoTaskRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateTodoTaskShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// 应用可以调用该接口发起一个钉钉待办任务，该待办事项会出现在钉钉客户端“待办”页面，需要注意的是，通过开放接口发起的待办，目前仅支持直接跳转ISV应用详情页（ISV在调该接口时需传入自身应用详情页链接）。
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// example:
	//
	// true
	Done *bool `json:"done,omitempty" xml:"done,omitempty"`
	// example:
	//
	// 1617675000000
	DueTime *int64 `json:"dueTime,omitempty" xml:"dueTime,omitempty"`
	// example:
	//
	// []
	ExecutorIdsShrink *string `json:"executorIds,omitempty" xml:"executorIds,omitempty"`
	// example:
	//
	// []
	ParticipantIdsShrink *string `json:"participantIds,omitempty" xml:"participantIds,omitempty"`
	// example:
	//
	// 更新钉钉待办
	Subject *string `json:"subject,omitempty" xml:"subject,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// taskId
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s UpdateTodoTaskShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskShrinkRequest) SetTenantContextShrink(v string) *UpdateTodoTaskShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateTodoTaskShrinkRequest) SetDescription(v string) *UpdateTodoTaskShrinkRequest {
	s.Description = &v
	return s
}

func (s *UpdateTodoTaskShrinkRequest) SetDone(v bool) *UpdateTodoTaskShrinkRequest {
	s.Done = &v
	return s
}

func (s *UpdateTodoTaskShrinkRequest) SetDueTime(v int64) *UpdateTodoTaskShrinkRequest {
	s.DueTime = &v
	return s
}

func (s *UpdateTodoTaskShrinkRequest) SetExecutorIdsShrink(v string) *UpdateTodoTaskShrinkRequest {
	s.ExecutorIdsShrink = &v
	return s
}

func (s *UpdateTodoTaskShrinkRequest) SetParticipantIdsShrink(v string) *UpdateTodoTaskShrinkRequest {
	s.ParticipantIdsShrink = &v
	return s
}

func (s *UpdateTodoTaskShrinkRequest) SetSubject(v string) *UpdateTodoTaskShrinkRequest {
	s.Subject = &v
	return s
}

func (s *UpdateTodoTaskShrinkRequest) SetTaskId(v string) *UpdateTodoTaskShrinkRequest {
	s.TaskId = &v
	return s
}

type UpdateTodoTaskResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateTodoTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskResponseBody) SetRequestId(v string) *UpdateTodoTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTodoTaskResponseBody) SetResult(v bool) *UpdateTodoTaskResponseBody {
	s.Result = &v
	return s
}

type UpdateTodoTaskResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTodoTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTodoTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskResponse) SetHeaders(v map[string]*string) *UpdateTodoTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateTodoTaskResponse) SetStatusCode(v int32) *UpdateTodoTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTodoTaskResponse) SetBody(v *UpdateTodoTaskResponseBody) *UpdateTodoTaskResponse {
	s.Body = v
	return s
}

type UpdateTodoTaskExecutorStatusHeaders struct {
	CommonHeaders  map[string]*string                                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateTodoTaskExecutorStatusHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateTodoTaskExecutorStatusHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusHeaders) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusHeaders) SetCommonHeaders(v map[string]*string) *UpdateTodoTaskExecutorStatusHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateTodoTaskExecutorStatusHeaders) SetAccountContext(v *UpdateTodoTaskExecutorStatusHeadersAccountContext) *UpdateTodoTaskExecutorStatusHeaders {
	s.AccountContext = v
	return s
}

type UpdateTodoTaskExecutorStatusHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusHeadersAccountContext) SetAccountId(v string) *UpdateTodoTaskExecutorStatusHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateTodoTaskExecutorStatusShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateTodoTaskExecutorStatusShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateTodoTaskExecutorStatusShrinkHeaders) SetAccountContextShrink(v string) *UpdateTodoTaskExecutorStatusShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateTodoTaskExecutorStatusRequest struct {
	TenantContext      *UpdateTodoTaskExecutorStatusRequestTenantContext        `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	ExecutorStatusList []*UpdateTodoTaskExecutorStatusRequestExecutorStatusList `json:"executorStatusList,omitempty" xml:"executorStatusList,omitempty" type:"Repeated"`
	// example:
	//
	// xxxx
	OperatorId *string `json:"operatorId,omitempty" xml:"operatorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 15002141
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusRequest) SetTenantContext(v *UpdateTodoTaskExecutorStatusRequestTenantContext) *UpdateTodoTaskExecutorStatusRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateTodoTaskExecutorStatusRequest) SetExecutorStatusList(v []*UpdateTodoTaskExecutorStatusRequestExecutorStatusList) *UpdateTodoTaskExecutorStatusRequest {
	s.ExecutorStatusList = v
	return s
}

func (s *UpdateTodoTaskExecutorStatusRequest) SetOperatorId(v string) *UpdateTodoTaskExecutorStatusRequest {
	s.OperatorId = &v
	return s
}

func (s *UpdateTodoTaskExecutorStatusRequest) SetTaskId(v string) *UpdateTodoTaskExecutorStatusRequest {
	s.TaskId = &v
	return s
}

type UpdateTodoTaskExecutorStatusRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusRequestTenantContext) SetTenantId(v string) *UpdateTodoTaskExecutorStatusRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateTodoTaskExecutorStatusRequestExecutorStatusList struct {
	// example:
	//
	// userId
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// example:
	//
	// true
	IsDone *bool `json:"isDone,omitempty" xml:"isDone,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusRequestExecutorStatusList) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusRequestExecutorStatusList) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusRequestExecutorStatusList) SetId(v string) *UpdateTodoTaskExecutorStatusRequestExecutorStatusList {
	s.Id = &v
	return s
}

func (s *UpdateTodoTaskExecutorStatusRequestExecutorStatusList) SetIsDone(v bool) *UpdateTodoTaskExecutorStatusRequestExecutorStatusList {
	s.IsDone = &v
	return s
}

type UpdateTodoTaskExecutorStatusShrinkRequest struct {
	TenantContextShrink      *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	ExecutorStatusListShrink *string `json:"executorStatusList,omitempty" xml:"executorStatusList,omitempty"`
	// example:
	//
	// xxxx
	OperatorId *string `json:"operatorId,omitempty" xml:"operatorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 15002141
	TaskId *string `json:"taskId,omitempty" xml:"taskId,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusShrinkRequest) SetTenantContextShrink(v string) *UpdateTodoTaskExecutorStatusShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateTodoTaskExecutorStatusShrinkRequest) SetExecutorStatusListShrink(v string) *UpdateTodoTaskExecutorStatusShrinkRequest {
	s.ExecutorStatusListShrink = &v
	return s
}

func (s *UpdateTodoTaskExecutorStatusShrinkRequest) SetOperatorId(v string) *UpdateTodoTaskExecutorStatusShrinkRequest {
	s.OperatorId = &v
	return s
}

func (s *UpdateTodoTaskExecutorStatusShrinkRequest) SetTaskId(v string) *UpdateTodoTaskExecutorStatusShrinkRequest {
	s.TaskId = &v
	return s
}

type UpdateTodoTaskExecutorStatusResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"result,omitempty" xml:"result,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusResponseBody) SetRequestId(v string) *UpdateTodoTaskExecutorStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTodoTaskExecutorStatusResponseBody) SetResult(v bool) *UpdateTodoTaskExecutorStatusResponseBody {
	s.Result = &v
	return s
}

type UpdateTodoTaskExecutorStatusResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTodoTaskExecutorStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTodoTaskExecutorStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTodoTaskExecutorStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateTodoTaskExecutorStatusResponse) SetHeaders(v map[string]*string) *UpdateTodoTaskExecutorStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateTodoTaskExecutorStatusResponse) SetStatusCode(v int32) *UpdateTodoTaskExecutorStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTodoTaskExecutorStatusResponse) SetBody(v *UpdateTodoTaskExecutorStatusResponseBody) *UpdateTodoTaskExecutorStatusResponse {
	s.Body = v
	return s
}

type UpdateUserAvatarHeaders struct {
	CommonHeaders  map[string]*string                     `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateUserAvatarHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateUserAvatarHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserAvatarHeaders) GoString() string {
	return s.String()
}

func (s *UpdateUserAvatarHeaders) SetCommonHeaders(v map[string]*string) *UpdateUserAvatarHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateUserAvatarHeaders) SetAccountContext(v *UpdateUserAvatarHeadersAccountContext) *UpdateUserAvatarHeaders {
	s.AccountContext = v
	return s
}

type UpdateUserAvatarHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateUserAvatarHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserAvatarHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateUserAvatarHeadersAccountContext) SetAccountId(v string) *UpdateUserAvatarHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateUserAvatarShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateUserAvatarShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserAvatarShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateUserAvatarShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateUserAvatarShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateUserAvatarShrinkHeaders) SetAccountContextShrink(v string) *UpdateUserAvatarShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateUserAvatarRequest struct {
	// example:
	//
	// @lADPDfYH3A-xxxx
	AvatarMediaId *string `json:"AvatarMediaId,omitempty" xml:"AvatarMediaId,omitempty"`
}

func (s UpdateUserAvatarRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserAvatarRequest) GoString() string {
	return s.String()
}

func (s *UpdateUserAvatarRequest) SetAvatarMediaId(v string) *UpdateUserAvatarRequest {
	s.AvatarMediaId = &v
	return s
}

type UpdateUserAvatarResponseBody struct {
	// example:
	//
	// 0
	Errcode *string `json:"errcode,omitempty" xml:"errcode,omitempty"`
	Errmsg  *string `json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s UpdateUserAvatarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserAvatarResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateUserAvatarResponseBody) SetErrcode(v string) *UpdateUserAvatarResponseBody {
	s.Errcode = &v
	return s
}

func (s *UpdateUserAvatarResponseBody) SetErrmsg(v string) *UpdateUserAvatarResponseBody {
	s.Errmsg = &v
	return s
}

func (s *UpdateUserAvatarResponseBody) SetRequestId(v string) *UpdateUserAvatarResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateUserAvatarResponseBody) SetVendorRequestId(v string) *UpdateUserAvatarResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *UpdateUserAvatarResponseBody) SetVendorType(v string) *UpdateUserAvatarResponseBody {
	s.VendorType = &v
	return s
}

type UpdateUserAvatarResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateUserAvatarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateUserAvatarResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserAvatarResponse) GoString() string {
	return s.String()
}

func (s *UpdateUserAvatarResponse) SetHeaders(v map[string]*string) *UpdateUserAvatarResponse {
	s.Headers = v
	return s
}

func (s *UpdateUserAvatarResponse) SetStatusCode(v int32) *UpdateUserAvatarResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateUserAvatarResponse) SetBody(v *UpdateUserAvatarResponseBody) *UpdateUserAvatarResponse {
	s.Body = v
	return s
}

type UpdateVideoConferenceSettingHeaders struct {
	CommonHeaders  map[string]*string                                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateVideoConferenceSettingHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateVideoConferenceSettingHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingHeaders) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingHeaders) SetCommonHeaders(v map[string]*string) *UpdateVideoConferenceSettingHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateVideoConferenceSettingHeaders) SetAccountContext(v *UpdateVideoConferenceSettingHeadersAccountContext) *UpdateVideoConferenceSettingHeaders {
	s.AccountContext = v
	return s
}

type UpdateVideoConferenceSettingHeadersAccountContext struct {
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateVideoConferenceSettingHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingHeadersAccountContext) SetAccountId(v string) *UpdateVideoConferenceSettingHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateVideoConferenceSettingShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateVideoConferenceSettingShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateVideoConferenceSettingShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkHeaders) SetAccountContextShrink(v string) *UpdateVideoConferenceSettingShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateVideoConferenceSettingRequest struct {
	// example:
	//
	// true
	AllowUnmuteSelf *bool `json:"AllowUnmuteSelf,omitempty" xml:"AllowUnmuteSelf,omitempty"`
	// example:
	//
	// true
	AutoTransferHost *bool `json:"AutoTransferHost,omitempty" xml:"AutoTransferHost,omitempty"`
	// example:
	//
	// true
	ForbiddenShareScreen *bool `json:"ForbiddenShareScreen,omitempty" xml:"ForbiddenShareScreen,omitempty"`
	// example:
	//
	// true
	LockConference *bool `json:"LockConference,omitempty" xml:"LockConference,omitempty"`
	// example:
	//
	// true
	MuteAll *bool `json:"MuteAll,omitempty" xml:"MuteAll,omitempty"`
	// example:
	//
	// true
	OnlyInternalEmployeesJoin *bool                                             `json:"OnlyInternalEmployeesJoin,omitempty" xml:"OnlyInternalEmployeesJoin,omitempty"`
	TenantContext             *UpdateVideoConferenceSettingRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s UpdateVideoConferenceSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingRequest) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingRequest) SetAllowUnmuteSelf(v bool) *UpdateVideoConferenceSettingRequest {
	s.AllowUnmuteSelf = &v
	return s
}

func (s *UpdateVideoConferenceSettingRequest) SetAutoTransferHost(v bool) *UpdateVideoConferenceSettingRequest {
	s.AutoTransferHost = &v
	return s
}

func (s *UpdateVideoConferenceSettingRequest) SetForbiddenShareScreen(v bool) *UpdateVideoConferenceSettingRequest {
	s.ForbiddenShareScreen = &v
	return s
}

func (s *UpdateVideoConferenceSettingRequest) SetLockConference(v bool) *UpdateVideoConferenceSettingRequest {
	s.LockConference = &v
	return s
}

func (s *UpdateVideoConferenceSettingRequest) SetMuteAll(v bool) *UpdateVideoConferenceSettingRequest {
	s.MuteAll = &v
	return s
}

func (s *UpdateVideoConferenceSettingRequest) SetOnlyInternalEmployeesJoin(v bool) *UpdateVideoConferenceSettingRequest {
	s.OnlyInternalEmployeesJoin = &v
	return s
}

func (s *UpdateVideoConferenceSettingRequest) SetTenantContext(v *UpdateVideoConferenceSettingRequestTenantContext) *UpdateVideoConferenceSettingRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateVideoConferenceSettingRequest) SetConferenceId(v string) *UpdateVideoConferenceSettingRequest {
	s.ConferenceId = &v
	return s
}

type UpdateVideoConferenceSettingRequestTenantContext struct {
	// example:
	//
	// xxxxxx
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateVideoConferenceSettingRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingRequestTenantContext) SetTenantId(v string) *UpdateVideoConferenceSettingRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateVideoConferenceSettingShrinkRequest struct {
	// example:
	//
	// true
	AllowUnmuteSelf *bool `json:"AllowUnmuteSelf,omitempty" xml:"AllowUnmuteSelf,omitempty"`
	// example:
	//
	// true
	AutoTransferHost *bool `json:"AutoTransferHost,omitempty" xml:"AutoTransferHost,omitempty"`
	// example:
	//
	// true
	ForbiddenShareScreen *bool `json:"ForbiddenShareScreen,omitempty" xml:"ForbiddenShareScreen,omitempty"`
	// example:
	//
	// true
	LockConference *bool `json:"LockConference,omitempty" xml:"LockConference,omitempty"`
	// example:
	//
	// true
	MuteAll *bool `json:"MuteAll,omitempty" xml:"MuteAll,omitempty"`
	// example:
	//
	// true
	OnlyInternalEmployeesJoin *bool   `json:"OnlyInternalEmployeesJoin,omitempty" xml:"OnlyInternalEmployeesJoin,omitempty"`
	TenantContextShrink       *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 61289fxxx
	ConferenceId *string `json:"conferenceId,omitempty" xml:"conferenceId,omitempty"`
}

func (s UpdateVideoConferenceSettingShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetAllowUnmuteSelf(v bool) *UpdateVideoConferenceSettingShrinkRequest {
	s.AllowUnmuteSelf = &v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetAutoTransferHost(v bool) *UpdateVideoConferenceSettingShrinkRequest {
	s.AutoTransferHost = &v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetForbiddenShareScreen(v bool) *UpdateVideoConferenceSettingShrinkRequest {
	s.ForbiddenShareScreen = &v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetLockConference(v bool) *UpdateVideoConferenceSettingShrinkRequest {
	s.LockConference = &v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetMuteAll(v bool) *UpdateVideoConferenceSettingShrinkRequest {
	s.MuteAll = &v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetOnlyInternalEmployeesJoin(v bool) *UpdateVideoConferenceSettingShrinkRequest {
	s.OnlyInternalEmployeesJoin = &v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetTenantContextShrink(v string) *UpdateVideoConferenceSettingShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateVideoConferenceSettingShrinkRequest) SetConferenceId(v string) *UpdateVideoConferenceSettingShrinkRequest {
	s.ConferenceId = &v
	return s
}

type UpdateVideoConferenceSettingResponseBody struct {
	// example:
	//
	// success
	CaseResult *string `json:"caseResult,omitempty" xml:"caseResult,omitempty"`
	// example:
	//
	// 200
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	VendorRequestId *string `json:"vendorRequestId,omitempty" xml:"vendorRequestId,omitempty"`
	// example:
	//
	// dingtalk
	VendorType *string `json:"vendorType,omitempty" xml:"vendorType,omitempty"`
}

func (s UpdateVideoConferenceSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingResponseBody) SetCaseResult(v string) *UpdateVideoConferenceSettingResponseBody {
	s.CaseResult = &v
	return s
}

func (s *UpdateVideoConferenceSettingResponseBody) SetCode(v string) *UpdateVideoConferenceSettingResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateVideoConferenceSettingResponseBody) SetRequestId(v string) *UpdateVideoConferenceSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateVideoConferenceSettingResponseBody) SetVendorRequestId(v string) *UpdateVideoConferenceSettingResponseBody {
	s.VendorRequestId = &v
	return s
}

func (s *UpdateVideoConferenceSettingResponseBody) SetVendorType(v string) *UpdateVideoConferenceSettingResponseBody {
	s.VendorType = &v
	return s
}

type UpdateVideoConferenceSettingResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateVideoConferenceSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateVideoConferenceSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateVideoConferenceSettingResponse) GoString() string {
	return s.String()
}

func (s *UpdateVideoConferenceSettingResponse) SetHeaders(v map[string]*string) *UpdateVideoConferenceSettingResponse {
	s.Headers = v
	return s
}

func (s *UpdateVideoConferenceSettingResponse) SetStatusCode(v int32) *UpdateVideoConferenceSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateVideoConferenceSettingResponse) SetBody(v *UpdateVideoConferenceSettingResponseBody) *UpdateVideoConferenceSettingResponse {
	s.Body = v
	return s
}

type UpdateWorkspaceDocMembersHeaders struct {
	CommonHeaders  map[string]*string                              `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateWorkspaceDocMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateWorkspaceDocMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersHeaders) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersHeaders) SetCommonHeaders(v map[string]*string) *UpdateWorkspaceDocMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateWorkspaceDocMembersHeaders) SetAccountContext(v *UpdateWorkspaceDocMembersHeadersAccountContext) *UpdateWorkspaceDocMembersHeaders {
	s.AccountContext = v
	return s
}

type UpdateWorkspaceDocMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateWorkspaceDocMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersHeadersAccountContext) SetAccountId(v string) *UpdateWorkspaceDocMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateWorkspaceDocMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateWorkspaceDocMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateWorkspaceDocMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateWorkspaceDocMembersShrinkHeaders) SetAccountContextShrink(v string) *UpdateWorkspaceDocMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateWorkspaceDocMembersRequest struct {
	Members []*UpdateWorkspaceDocMembersRequestMembers `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	// This parameter is required.
	//
	// example:
	//
	// node_feb8fea0
	NodeId        *string                                        `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContext *UpdateWorkspaceDocMembersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// xb8bkxxxxxrXJNaL
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateWorkspaceDocMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersRequest) SetMembers(v []*UpdateWorkspaceDocMembersRequestMembers) *UpdateWorkspaceDocMembersRequest {
	s.Members = v
	return s
}

func (s *UpdateWorkspaceDocMembersRequest) SetNodeId(v string) *UpdateWorkspaceDocMembersRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateWorkspaceDocMembersRequest) SetTenantContext(v *UpdateWorkspaceDocMembersRequestTenantContext) *UpdateWorkspaceDocMembersRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateWorkspaceDocMembersRequest) SetWorkspaceId(v string) *UpdateWorkspaceDocMembersRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateWorkspaceDocMembersRequestMembers struct {
	// example:
	//
	// 012345
	MemberId *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// example:
	//
	// USER
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
	// example:
	//
	// ONLY_VIEWER
	RoleType *string `json:"RoleType,omitempty" xml:"RoleType,omitempty"`
}

func (s UpdateWorkspaceDocMembersRequestMembers) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersRequestMembers) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersRequestMembers) SetMemberId(v string) *UpdateWorkspaceDocMembersRequestMembers {
	s.MemberId = &v
	return s
}

func (s *UpdateWorkspaceDocMembersRequestMembers) SetMemberType(v string) *UpdateWorkspaceDocMembersRequestMembers {
	s.MemberType = &v
	return s
}

func (s *UpdateWorkspaceDocMembersRequestMembers) SetRoleType(v string) *UpdateWorkspaceDocMembersRequestMembers {
	s.RoleType = &v
	return s
}

type UpdateWorkspaceDocMembersRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateWorkspaceDocMembersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersRequestTenantContext) SetTenantId(v string) *UpdateWorkspaceDocMembersRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateWorkspaceDocMembersShrinkRequest struct {
	MembersShrink *string `json:"Members,omitempty" xml:"Members,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// node_feb8fea0
	NodeId              *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xb8bkxxxxxrXJNaL
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateWorkspaceDocMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersShrinkRequest) SetMembersShrink(v string) *UpdateWorkspaceDocMembersShrinkRequest {
	s.MembersShrink = &v
	return s
}

func (s *UpdateWorkspaceDocMembersShrinkRequest) SetNodeId(v string) *UpdateWorkspaceDocMembersShrinkRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateWorkspaceDocMembersShrinkRequest) SetTenantContextShrink(v string) *UpdateWorkspaceDocMembersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateWorkspaceDocMembersShrinkRequest) SetWorkspaceId(v string) *UpdateWorkspaceDocMembersShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateWorkspaceDocMembersResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s UpdateWorkspaceDocMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersResponseBody) SetRequestId(v string) *UpdateWorkspaceDocMembersResponseBody {
	s.RequestId = &v
	return s
}

type UpdateWorkspaceDocMembersResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWorkspaceDocMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWorkspaceDocMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceDocMembersResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceDocMembersResponse) SetHeaders(v map[string]*string) *UpdateWorkspaceDocMembersResponse {
	s.Headers = v
	return s
}

func (s *UpdateWorkspaceDocMembersResponse) SetStatusCode(v int32) *UpdateWorkspaceDocMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWorkspaceDocMembersResponse) SetBody(v *UpdateWorkspaceDocMembersResponseBody) *UpdateWorkspaceDocMembersResponse {
	s.Body = v
	return s
}

type UpdateWorkspaceMembersHeaders struct {
	CommonHeaders  map[string]*string                           `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UpdateWorkspaceMembersHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UpdateWorkspaceMembersHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersHeaders) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersHeaders) SetCommonHeaders(v map[string]*string) *UpdateWorkspaceMembersHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateWorkspaceMembersHeaders) SetAccountContext(v *UpdateWorkspaceMembersHeadersAccountContext) *UpdateWorkspaceMembersHeaders {
	s.AccountContext = v
	return s
}

type UpdateWorkspaceMembersHeadersAccountContext struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UpdateWorkspaceMembersHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersHeadersAccountContext) SetAccountId(v string) *UpdateWorkspaceMembersHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UpdateWorkspaceMembersShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UpdateWorkspaceMembersShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersShrinkHeaders) SetCommonHeaders(v map[string]*string) *UpdateWorkspaceMembersShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UpdateWorkspaceMembersShrinkHeaders) SetAccountContextShrink(v string) *UpdateWorkspaceMembersShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UpdateWorkspaceMembersRequest struct {
	// This parameter is required.
	Members       []*UpdateWorkspaceMembersRequestMembers     `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	TenantContext *UpdateWorkspaceMembersRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateWorkspaceMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersRequest) SetMembers(v []*UpdateWorkspaceMembersRequestMembers) *UpdateWorkspaceMembersRequest {
	s.Members = v
	return s
}

func (s *UpdateWorkspaceMembersRequest) SetTenantContext(v *UpdateWorkspaceMembersRequestTenantContext) *UpdateWorkspaceMembersRequest {
	s.TenantContext = v
	return s
}

func (s *UpdateWorkspaceMembersRequest) SetWorkspaceId(v string) *UpdateWorkspaceMembersRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateWorkspaceMembersRequestMembers struct {
	// This parameter is required.
	//
	// example:
	//
	// 012345
	MemberId *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// USER
	MemberType *string `json:"MemberType,omitempty" xml:"MemberType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ONLY_VIEWER
	RoleType *string `json:"RoleType,omitempty" xml:"RoleType,omitempty"`
}

func (s UpdateWorkspaceMembersRequestMembers) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersRequestMembers) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersRequestMembers) SetMemberId(v string) *UpdateWorkspaceMembersRequestMembers {
	s.MemberId = &v
	return s
}

func (s *UpdateWorkspaceMembersRequestMembers) SetMemberType(v string) *UpdateWorkspaceMembersRequestMembers {
	s.MemberType = &v
	return s
}

func (s *UpdateWorkspaceMembersRequestMembers) SetRoleType(v string) *UpdateWorkspaceMembersRequestMembers {
	s.RoleType = &v
	return s
}

type UpdateWorkspaceMembersRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UpdateWorkspaceMembersRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersRequestTenantContext) SetTenantId(v string) *UpdateWorkspaceMembersRequestTenantContext {
	s.TenantId = &v
	return s
}

type UpdateWorkspaceMembersShrinkRequest struct {
	// This parameter is required.
	MembersShrink       *string `json:"Members,omitempty" xml:"Members,omitempty"`
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123
	WorkspaceId *string `json:"WorkspaceId,omitempty" xml:"WorkspaceId,omitempty"`
}

func (s UpdateWorkspaceMembersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersShrinkRequest) SetMembersShrink(v string) *UpdateWorkspaceMembersShrinkRequest {
	s.MembersShrink = &v
	return s
}

func (s *UpdateWorkspaceMembersShrinkRequest) SetTenantContextShrink(v string) *UpdateWorkspaceMembersShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UpdateWorkspaceMembersShrinkRequest) SetWorkspaceId(v string) *UpdateWorkspaceMembersShrinkRequest {
	s.WorkspaceId = &v
	return s
}

type UpdateWorkspaceMembersResponseBody struct {
	// requestId
	//
	// example:
	//
	// 0FAAEC9C-C6C8-5C87-AF8E-1195889BBXXX
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s UpdateWorkspaceMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersResponseBody) SetRequestId(v string) *UpdateWorkspaceMembersResponseBody {
	s.RequestId = &v
	return s
}

type UpdateWorkspaceMembersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateWorkspaceMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateWorkspaceMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWorkspaceMembersResponse) GoString() string {
	return s.String()
}

func (s *UpdateWorkspaceMembersResponse) SetHeaders(v map[string]*string) *UpdateWorkspaceMembersResponse {
	s.Headers = v
	return s
}

func (s *UpdateWorkspaceMembersResponse) SetStatusCode(v int32) *UpdateWorkspaceMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateWorkspaceMembersResponse) SetBody(v *UpdateWorkspaceMembersResponseBody) *UpdateWorkspaceMembersResponse {
	s.Body = v
	return s
}

type UploadMediaHeaders struct {
	CommonHeaders  map[string]*string                `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *UploadMediaHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s UploadMediaHeaders) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaHeaders) GoString() string {
	return s.String()
}

func (s *UploadMediaHeaders) SetCommonHeaders(v map[string]*string) *UploadMediaHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UploadMediaHeaders) SetAccountContext(v *UploadMediaHeadersAccountContext) *UploadMediaHeaders {
	s.AccountContext = v
	return s
}

type UploadMediaHeadersAccountContext struct {
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s UploadMediaHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *UploadMediaHeadersAccountContext) SetAccountId(v string) *UploadMediaHeadersAccountContext {
	s.AccountId = &v
	return s
}

type UploadMediaShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s UploadMediaShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaShrinkHeaders) GoString() string {
	return s.String()
}

func (s *UploadMediaShrinkHeaders) SetCommonHeaders(v map[string]*string) *UploadMediaShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *UploadMediaShrinkHeaders) SetAccountContextShrink(v string) *UploadMediaShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type UploadMediaRequest struct {
	TenantContext *UploadMediaRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// example:
	//
	// test.jpg
	MediaName *string `json:"mediaName,omitempty" xml:"mediaName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// image
	MediaType *string `json:"mediaType,omitempty" xml:"mediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1234567
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://alicdn.com/xxx.jpg
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s UploadMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaRequest) GoString() string {
	return s.String()
}

func (s *UploadMediaRequest) SetTenantContext(v *UploadMediaRequestTenantContext) *UploadMediaRequest {
	s.TenantContext = v
	return s
}

func (s *UploadMediaRequest) SetMediaName(v string) *UploadMediaRequest {
	s.MediaName = &v
	return s
}

func (s *UploadMediaRequest) SetMediaType(v string) *UploadMediaRequest {
	s.MediaType = &v
	return s
}

func (s *UploadMediaRequest) SetOrgId(v int64) *UploadMediaRequest {
	s.OrgId = &v
	return s
}

func (s *UploadMediaRequest) SetUrl(v string) *UploadMediaRequest {
	s.Url = &v
	return s
}

type UploadMediaRequestTenantContext struct {
	// example:
	//
	// 1
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s UploadMediaRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaRequestTenantContext) GoString() string {
	return s.String()
}

func (s *UploadMediaRequestTenantContext) SetTenantId(v string) *UploadMediaRequestTenantContext {
	s.TenantId = &v
	return s
}

type UploadMediaShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// example:
	//
	// test.jpg
	MediaName *string `json:"mediaName,omitempty" xml:"mediaName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// image
	MediaType *string `json:"mediaType,omitempty" xml:"mediaType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1234567
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://alicdn.com/xxx.jpg
	Url *string `json:"url,omitempty" xml:"url,omitempty"`
}

func (s UploadMediaShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaShrinkRequest) GoString() string {
	return s.String()
}

func (s *UploadMediaShrinkRequest) SetTenantContextShrink(v string) *UploadMediaShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *UploadMediaShrinkRequest) SetMediaName(v string) *UploadMediaShrinkRequest {
	s.MediaName = &v
	return s
}

func (s *UploadMediaShrinkRequest) SetMediaType(v string) *UploadMediaShrinkRequest {
	s.MediaType = &v
	return s
}

func (s *UploadMediaShrinkRequest) SetOrgId(v int64) *UploadMediaShrinkRequest {
	s.OrgId = &v
	return s
}

func (s *UploadMediaShrinkRequest) SetUrl(v string) *UploadMediaShrinkRequest {
	s.Url = &v
	return s
}

type UploadMediaResponseBody struct {
	// example:
	//
	// abcd1234
	MediaId *string `json:"mediaId,omitempty" xml:"mediaId,omitempty"`
	// requestId
	//
	// example:
	//
	// abcd-1234-wxyz-9876
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
}

func (s UploadMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaResponseBody) GoString() string {
	return s.String()
}

func (s *UploadMediaResponseBody) SetMediaId(v string) *UploadMediaResponseBody {
	s.MediaId = &v
	return s
}

func (s *UploadMediaResponseBody) SetRequestId(v string) *UploadMediaResponseBody {
	s.RequestId = &v
	return s
}

type UploadMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaResponse) GoString() string {
	return s.String()
}

func (s *UploadMediaResponse) SetHeaders(v map[string]*string) *UploadMediaResponse {
	s.Headers = v
	return s
}

func (s *UploadMediaResponse) SetStatusCode(v int32) *UploadMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadMediaResponse) SetBody(v *UploadMediaResponseBody) *UploadMediaResponse {
	s.Body = v
	return s
}

type WearOrgHonorHeaders struct {
	CommonHeaders  map[string]*string                 `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContext *WearOrgHonorHeadersAccountContext `json:"AccountContext,omitempty" xml:"AccountContext,omitempty" type:"Struct"`
}

func (s WearOrgHonorHeaders) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorHeaders) GoString() string {
	return s.String()
}

func (s *WearOrgHonorHeaders) SetCommonHeaders(v map[string]*string) *WearOrgHonorHeaders {
	s.CommonHeaders = v
	return s
}

func (s *WearOrgHonorHeaders) SetAccountContext(v *WearOrgHonorHeadersAccountContext) *WearOrgHonorHeaders {
	s.AccountContext = v
	return s
}

type WearOrgHonorHeadersAccountContext struct {
	// example:
	//
	// 1915607600538524
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
}

func (s WearOrgHonorHeadersAccountContext) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorHeadersAccountContext) GoString() string {
	return s.String()
}

func (s *WearOrgHonorHeadersAccountContext) SetAccountId(v string) *WearOrgHonorHeadersAccountContext {
	s.AccountId = &v
	return s
}

type WearOrgHonorShrinkHeaders struct {
	CommonHeaders        map[string]*string `json:"commonHeaders,omitempty" xml:"commonHeaders,omitempty"`
	AccountContextShrink *string            `json:"AccountContext,omitempty" xml:"AccountContext,omitempty"`
}

func (s WearOrgHonorShrinkHeaders) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorShrinkHeaders) GoString() string {
	return s.String()
}

func (s *WearOrgHonorShrinkHeaders) SetCommonHeaders(v map[string]*string) *WearOrgHonorShrinkHeaders {
	s.CommonHeaders = v
	return s
}

func (s *WearOrgHonorShrinkHeaders) SetAccountContextShrink(v string) *WearOrgHonorShrinkHeaders {
	s.AccountContextShrink = &v
	return s
}

type WearOrgHonorRequest struct {
	TenantContext *WearOrgHonorRequestTenantContext `json:"TenantContext,omitempty" xml:"TenantContext,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 21659595
	HonorId *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// false
	Wear *bool `json:"wear,omitempty" xml:"wear,omitempty"`
}

func (s WearOrgHonorRequest) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorRequest) GoString() string {
	return s.String()
}

func (s *WearOrgHonorRequest) SetTenantContext(v *WearOrgHonorRequestTenantContext) *WearOrgHonorRequest {
	s.TenantContext = v
	return s
}

func (s *WearOrgHonorRequest) SetHonorId(v string) *WearOrgHonorRequest {
	s.HonorId = &v
	return s
}

func (s *WearOrgHonorRequest) SetOrgId(v int64) *WearOrgHonorRequest {
	s.OrgId = &v
	return s
}

func (s *WearOrgHonorRequest) SetUserId(v string) *WearOrgHonorRequest {
	s.UserId = &v
	return s
}

func (s *WearOrgHonorRequest) SetWear(v bool) *WearOrgHonorRequest {
	s.Wear = &v
	return s
}

type WearOrgHonorRequestTenantContext struct {
	// example:
	//
	// 306752103647458
	TenantId *string `json:"tenantId,omitempty" xml:"tenantId,omitempty"`
}

func (s WearOrgHonorRequestTenantContext) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorRequestTenantContext) GoString() string {
	return s.String()
}

func (s *WearOrgHonorRequestTenantContext) SetTenantId(v string) *WearOrgHonorRequestTenantContext {
	s.TenantId = &v
	return s
}

type WearOrgHonorShrinkRequest struct {
	TenantContextShrink *string `json:"TenantContext,omitempty" xml:"TenantContext,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 21659595
	HonorId *string `json:"honorId,omitempty" xml:"honorId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 123456
	OrgId *int64 `json:"orgId,omitempty" xml:"orgId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 363784
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// false
	Wear *bool `json:"wear,omitempty" xml:"wear,omitempty"`
}

func (s WearOrgHonorShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorShrinkRequest) GoString() string {
	return s.String()
}

func (s *WearOrgHonorShrinkRequest) SetTenantContextShrink(v string) *WearOrgHonorShrinkRequest {
	s.TenantContextShrink = &v
	return s
}

func (s *WearOrgHonorShrinkRequest) SetHonorId(v string) *WearOrgHonorShrinkRequest {
	s.HonorId = &v
	return s
}

func (s *WearOrgHonorShrinkRequest) SetOrgId(v int64) *WearOrgHonorShrinkRequest {
	s.OrgId = &v
	return s
}

func (s *WearOrgHonorShrinkRequest) SetUserId(v string) *WearOrgHonorShrinkRequest {
	s.UserId = &v
	return s
}

func (s *WearOrgHonorShrinkRequest) SetWear(v bool) *WearOrgHonorShrinkRequest {
	s.Wear = &v
	return s
}

type WearOrgHonorResponseBody struct {
	Content *WearOrgHonorResponseBodyContent `json:"content,omitempty" xml:"content,omitempty" type:"Struct"`
	// example:
	//
	// 0
	ErrorCode *string                `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	ErrorCtx  map[string]interface{} `json:"errorCtx,omitempty" xml:"errorCtx,omitempty"`
	ErrorMsg  *string                `json:"errorMsg,omitempty" xml:"errorMsg,omitempty"`
	// example:
	//
	// 200
	HttpStatusCode *int32 `json:"httpStatusCode,omitempty" xml:"httpStatusCode,omitempty"`
	// example:
	//
	// 32FFC91D-0A9F-585A-B84F-8A54C5187035
	RequestId *string `json:"requestId,omitempty" xml:"requestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s WearOrgHonorResponseBody) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorResponseBody) GoString() string {
	return s.String()
}

func (s *WearOrgHonorResponseBody) SetContent(v *WearOrgHonorResponseBodyContent) *WearOrgHonorResponseBody {
	s.Content = v
	return s
}

func (s *WearOrgHonorResponseBody) SetErrorCode(v string) *WearOrgHonorResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *WearOrgHonorResponseBody) SetErrorCtx(v map[string]interface{}) *WearOrgHonorResponseBody {
	s.ErrorCtx = v
	return s
}

func (s *WearOrgHonorResponseBody) SetErrorMsg(v string) *WearOrgHonorResponseBody {
	s.ErrorMsg = &v
	return s
}

func (s *WearOrgHonorResponseBody) SetHttpStatusCode(v int32) *WearOrgHonorResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *WearOrgHonorResponseBody) SetRequestId(v string) *WearOrgHonorResponseBody {
	s.RequestId = &v
	return s
}

func (s *WearOrgHonorResponseBody) SetSuccess(v bool) *WearOrgHonorResponseBody {
	s.Success = &v
	return s
}

type WearOrgHonorResponseBodyContent struct {
	// example:
	//
	// null
	Data interface{} `json:"data,omitempty" xml:"data,omitempty"`
}

func (s WearOrgHonorResponseBodyContent) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorResponseBodyContent) GoString() string {
	return s.String()
}

func (s *WearOrgHonorResponseBodyContent) SetData(v interface{}) *WearOrgHonorResponseBodyContent {
	s.Data = v
	return s
}

type WearOrgHonorResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *WearOrgHonorResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s WearOrgHonorResponse) String() string {
	return tea.Prettify(s)
}

func (s WearOrgHonorResponse) GoString() string {
	return s.String()
}

func (s *WearOrgHonorResponse) SetHeaders(v map[string]*string) *WearOrgHonorResponse {
	s.Headers = v
	return s
}

func (s *WearOrgHonorResponse) SetStatusCode(v int32) *WearOrgHonorResponse {
	s.StatusCode = &v
	return s
}

func (s *WearOrgHonorResponse) SetBody(v *WearOrgHonorResponseBody) *WearOrgHonorResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("")
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("aliding"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加日程参与者
//
// @param tmpReq - AddAttendeeRequest
//
// @param tmpHeader - AddAttendeeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddAttendeeResponse
func (client *Client) AddAttendeeWithOptions(tmpReq *AddAttendeeRequest, tmpHeader *AddAttendeeHeaders, runtime *util.RuntimeOptions) (_result *AddAttendeeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddAttendeeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &AddAttendeeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.AttendeesToAdd)) {
		request.AttendeesToAddShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AttendeesToAdd, tea.String("AttendeesToAdd"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttendeesToAddShrink)) {
		body["AttendeesToAdd"] = request.AttendeesToAddShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		body["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.ChatNotification)) {
		body["chatNotification"] = request.ChatNotification
	}

	if !tea.BoolValue(util.IsUnset(request.PushNotification)) {
		body["pushNotification"] = request.PushNotification
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAttendee"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/addAttendee"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAttendeeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加日程参与者
//
// @param request - AddAttendeeRequest
//
// @return AddAttendeeResponse
func (client *Client) AddAttendee(request *AddAttendeeRequest) (_result *AddAttendeeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddAttendeeHeaders{}
	_result = &AddAttendeeResponse{}
	_body, _err := client.AddAttendeeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新建钉盘空间
//
// @param tmpReq - AddDriveSpaceRequest
//
// @param tmpHeader - AddDriveSpaceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddDriveSpaceResponse
func (client *Client) AddDriveSpaceWithOptions(tmpReq *AddDriveSpaceRequest, tmpHeader *AddDriveSpaceHeaders, runtime *util.RuntimeOptions) (_result *AddDriveSpaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddDriveSpaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &AddDriveSpaceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddDriveSpace"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/addDriveSpace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddDriveSpaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新建钉盘空间
//
// @param request - AddDriveSpaceRequest
//
// @return AddDriveSpaceResponse
func (client *Client) AddDriveSpace(request *AddDriveSpaceRequest) (_result *AddDriveSpaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddDriveSpaceHeaders{}
	_result = &AddDriveSpaceResponse{}
	_body, _err := client.AddDriveSpaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 预定会议室
//
// @param tmpReq - AddMeetingRoomsRequest
//
// @param tmpHeader - AddMeetingRoomsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMeetingRoomsResponse
func (client *Client) AddMeetingRoomsWithOptions(tmpReq *AddMeetingRoomsRequest, tmpHeader *AddMeetingRoomsHeaders, runtime *util.RuntimeOptions) (_result *AddMeetingRoomsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddMeetingRoomsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &AddMeetingRoomsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MeetingRoomsToAdd)) {
		request.MeetingRoomsToAddShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MeetingRoomsToAdd, tea.String("MeetingRoomsToAdd"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		body["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.MeetingRoomsToAddShrink)) {
		body["MeetingRoomsToAdd"] = request.MeetingRoomsToAddShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMeetingRooms"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/addMeetingRooms"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMeetingRoomsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 预定会议室
//
// @param request - AddMeetingRoomsRequest
//
// @return AddMeetingRoomsResponse
func (client *Client) AddMeetingRooms(request *AddMeetingRoomsRequest) (_result *AddMeetingRoomsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddMeetingRoomsHeaders{}
	_result = &AddMeetingRoomsResponse{}
	_body, _err := client.AddMeetingRoomsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加闪记权限
//
// @param tmpReq - AddRecordPermissionRequest
//
// @param tmpHeader - AddRecordPermissionHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddRecordPermissionResponse
func (client *Client) AddRecordPermissionWithOptions(tmpReq *AddRecordPermissionRequest, tmpHeader *AddRecordPermissionHeaders, runtime *util.RuntimeOptions) (_result *AddRecordPermissionResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddRecordPermissionShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &AddRecordPermissionShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		body["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["ConferenceId"] = request.ConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddRecordPermission"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/addRecordPermission"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddRecordPermissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加闪记权限
//
// @param request - AddRecordPermissionRequest
//
// @return AddRecordPermissionResponse
func (client *Client) AddRecordPermission(request *AddRecordPermissionRequest) (_result *AddRecordPermissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddRecordPermissionHeaders{}
	_result = &AddRecordPermissionResponse{}
	_body, _err := client.AddRecordPermissionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新增群成员
//
// @param request - AddScenegroupMemberRequest
//
// @param tmpHeader - AddScenegroupMemberHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddScenegroupMemberResponse
func (client *Client) AddScenegroupMemberWithOptions(request *AddScenegroupMemberRequest, tmpHeader *AddScenegroupMemberHeaders, runtime *util.RuntimeOptions) (_result *AddScenegroupMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &AddScenegroupMemberShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OpenConversationId)) {
		body["OpenConversationId"] = request.OpenConversationId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		body["UserIds"] = request.UserIds
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddScenegroupMember"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/addScenegroupMember"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddScenegroupMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新增群成员
//
// @param request - AddScenegroupMemberRequest
//
// @return AddScenegroupMemberResponse
func (client *Client) AddScenegroupMember(request *AddScenegroupMemberRequest) (_result *AddScenegroupMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddScenegroupMemberHeaders{}
	_result = &AddScenegroupMemberResponse{}
	_body, _err := client.AddScenegroupMemberWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新建知识库
//
// @param tmpReq - AddWorkspaceRequest
//
// @param tmpHeader - AddWorkspaceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddWorkspaceResponse
func (client *Client) AddWorkspaceWithOptions(tmpReq *AddWorkspaceRequest, tmpHeader *AddWorkspaceHeaders, runtime *util.RuntimeOptions) (_result *AddWorkspaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddWorkspaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &AddWorkspaceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddWorkspace"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/addWorkspace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新建知识库
//
// @param request - AddWorkspaceRequest
//
// @return AddWorkspaceResponse
func (client *Client) AddWorkspace(request *AddWorkspaceRequest) (_result *AddWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddWorkspaceHeaders{}
	_result = &AddWorkspaceResponse{}
	_body, _err := client.AddWorkspaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加知识库文档成员
//
// @param tmpReq - AddWorkspaceDocMembersRequest
//
// @param tmpHeader - AddWorkspaceDocMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddWorkspaceDocMembersResponse
func (client *Client) AddWorkspaceDocMembersWithOptions(tmpReq *AddWorkspaceDocMembersRequest, tmpHeader *AddWorkspaceDocMembersHeaders, runtime *util.RuntimeOptions) (_result *AddWorkspaceDocMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddWorkspaceDocMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &AddWorkspaceDocMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Members)) {
		request.MembersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Members, tea.String("Members"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MembersShrink)) {
		body["Members"] = request.MembersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddWorkspaceDocMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/addWorkspaceDocMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddWorkspaceDocMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加知识库文档成员
//
// @param request - AddWorkspaceDocMembersRequest
//
// @return AddWorkspaceDocMembersResponse
func (client *Client) AddWorkspaceDocMembers(request *AddWorkspaceDocMembersRequest) (_result *AddWorkspaceDocMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddWorkspaceDocMembersHeaders{}
	_result = &AddWorkspaceDocMembersResponse{}
	_body, _err := client.AddWorkspaceDocMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加知识库成员
//
// @param tmpReq - AddWorkspaceMembersRequest
//
// @param tmpHeader - AddWorkspaceMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddWorkspaceMembersResponse
func (client *Client) AddWorkspaceMembersWithOptions(tmpReq *AddWorkspaceMembersRequest, tmpHeader *AddWorkspaceMembersHeaders, runtime *util.RuntimeOptions) (_result *AddWorkspaceMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &AddWorkspaceMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &AddWorkspaceMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Members)) {
		request.MembersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Members, tea.String("Members"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MembersShrink)) {
		body["Members"] = request.MembersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddWorkspaceMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/addWorkspaceMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddWorkspaceMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加知识库成员
//
// @param request - AddWorkspaceMembersRequest
//
// @return AddWorkspaceMembersResponse
func (client *Client) AddWorkspaceMembers(request *AddWorkspaceMembersRequest) (_result *AddWorkspaceMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &AddWorkspaceMembersHeaders{}
	_result = &AddWorkspaceMembersResponse{}
	_body, _err := client.AddWorkspaceMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量获取表单实例数据
//
// @param tmpReq - BatchGetFormDataByIdListRequest
//
// @param tmpHeader - BatchGetFormDataByIdListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchGetFormDataByIdListResponse
func (client *Client) BatchGetFormDataByIdListWithOptions(tmpReq *BatchGetFormDataByIdListRequest, tmpHeader *BatchGetFormDataByIdListHeaders, runtime *util.RuntimeOptions) (_result *BatchGetFormDataByIdListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchGetFormDataByIdListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &BatchGetFormDataByIdListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.FormInstanceIdList)) {
		request.FormInstanceIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FormInstanceIdList, tea.String("FormInstanceIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceIdListShrink)) {
		body["FormInstanceIdList"] = request.FormInstanceIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.NeedFormInstanceValue)) {
		body["NeedFormInstanceValue"] = request.NeedFormInstanceValue
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchGetFormDataByIdList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/batchGetFormDataByIdList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchGetFormDataByIdListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量获取表单实例数据
//
// @param request - BatchGetFormDataByIdListRequest
//
// @return BatchGetFormDataByIdListResponse
func (client *Client) BatchGetFormDataByIdList(request *BatchGetFormDataByIdListRequest) (_result *BatchGetFormDataByIdListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &BatchGetFormDataByIdListHeaders{}
	_result = &BatchGetFormDataByIdListResponse{}
	_body, _err := client.BatchGetFormDataByIdListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量删除表单实例
//
// @param tmpReq - BatchRemovalByFormInstanceIdListRequest
//
// @param tmpHeader - BatchRemovalByFormInstanceIdListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchRemovalByFormInstanceIdListResponse
func (client *Client) BatchRemovalByFormInstanceIdListWithOptions(tmpReq *BatchRemovalByFormInstanceIdListRequest, tmpHeader *BatchRemovalByFormInstanceIdListHeaders, runtime *util.RuntimeOptions) (_result *BatchRemovalByFormInstanceIdListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchRemovalByFormInstanceIdListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &BatchRemovalByFormInstanceIdListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.FormInstanceIdList)) {
		request.FormInstanceIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FormInstanceIdList, tea.String("FormInstanceIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.AsynchronousExecution)) {
		body["AsynchronousExecution"] = request.AsynchronousExecution
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteExpression)) {
		body["ExecuteExpression"] = request.ExecuteExpression
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceIdListShrink)) {
		body["FormInstanceIdList"] = request.FormInstanceIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchRemovalByFormInstanceIdList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/batchRemovalByFormInstanceIdList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchRemovalByFormInstanceIdListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量删除表单实例
//
// @param request - BatchRemovalByFormInstanceIdListRequest
//
// @return BatchRemovalByFormInstanceIdListResponse
func (client *Client) BatchRemovalByFormInstanceIdList(request *BatchRemovalByFormInstanceIdListRequest) (_result *BatchRemovalByFormInstanceIdListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &BatchRemovalByFormInstanceIdListHeaders{}
	_result = &BatchRemovalByFormInstanceIdListResponse{}
	_body, _err := client.BatchRemovalByFormInstanceIdListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量创建表单实例
//
// @param tmpReq - BatchSaveFormDataRequest
//
// @param tmpHeader - BatchSaveFormDataHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchSaveFormDataResponse
func (client *Client) BatchSaveFormDataWithOptions(tmpReq *BatchSaveFormDataRequest, tmpHeader *BatchSaveFormDataHeaders, runtime *util.RuntimeOptions) (_result *BatchSaveFormDataResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchSaveFormDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &BatchSaveFormDataShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.FormDataJsonList)) {
		request.FormDataJsonListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FormDataJsonList, tea.String("FormDataJsonList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.AsynchronousExecution)) {
		body["AsynchronousExecution"] = request.AsynchronousExecution
	}

	if !tea.BoolValue(util.IsUnset(request.FormDataJsonListShrink)) {
		body["FormDataJsonList"] = request.FormDataJsonListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.KeepRunningAfterException)) {
		body["KeepRunningAfterException"] = request.KeepRunningAfterException
	}

	if !tea.BoolValue(util.IsUnset(request.NoExecuteExpression)) {
		body["NoExecuteExpression"] = request.NoExecuteExpression
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchSaveFormData"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/batchSaveFormData"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchSaveFormDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量创建表单实例
//
// @param request - BatchSaveFormDataRequest
//
// @return BatchSaveFormDataResponse
func (client *Client) BatchSaveFormData(request *BatchSaveFormDataRequest) (_result *BatchSaveFormDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &BatchSaveFormDataHeaders{}
	_result = &BatchSaveFormDataResponse{}
	_body, _err := client.BatchSaveFormDataWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量更新表单实例内的组件值
//
// @param tmpReq - BatchUpdateFormDataByInstanceIdRequest
//
// @param tmpHeader - BatchUpdateFormDataByInstanceIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUpdateFormDataByInstanceIdResponse
func (client *Client) BatchUpdateFormDataByInstanceIdWithOptions(tmpReq *BatchUpdateFormDataByInstanceIdRequest, tmpHeader *BatchUpdateFormDataByInstanceIdHeaders, runtime *util.RuntimeOptions) (_result *BatchUpdateFormDataByInstanceIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchUpdateFormDataByInstanceIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &BatchUpdateFormDataByInstanceIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.FormInstanceIdList)) {
		request.FormInstanceIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FormInstanceIdList, tea.String("FormInstanceIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.AsynchronousExecution)) {
		body["AsynchronousExecution"] = request.AsynchronousExecution
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceIdListShrink)) {
		body["FormInstanceIdList"] = request.FormInstanceIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreEmpty)) {
		body["IgnoreEmpty"] = request.IgnoreEmpty
	}

	if !tea.BoolValue(util.IsUnset(request.NoExecuteExpression)) {
		body["NoExecuteExpression"] = request.NoExecuteExpression
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateFormDataJson)) {
		body["UpdateFormDataJson"] = request.UpdateFormDataJson
	}

	if !tea.BoolValue(util.IsUnset(request.UseLatestFormSchemaVersion)) {
		body["UseLatestFormSchemaVersion"] = request.UseLatestFormSchemaVersion
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUpdateFormDataByInstanceId"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/batchUpdateFormDataByInstanceId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUpdateFormDataByInstanceIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量更新表单实例内的组件值
//
// @param request - BatchUpdateFormDataByInstanceIdRequest
//
// @return BatchUpdateFormDataByInstanceIdResponse
func (client *Client) BatchUpdateFormDataByInstanceId(request *BatchUpdateFormDataByInstanceIdRequest) (_result *BatchUpdateFormDataByInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &BatchUpdateFormDataByInstanceIdHeaders{}
	_result = &BatchUpdateFormDataByInstanceIdResponse{}
	_body, _err := client.BatchUpdateFormDataByInstanceIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过表单实例数据批量更新表单实例
//
// @param tmpReq - BatchUpdateFormDataByInstanceMapRequest
//
// @param tmpHeader - BatchUpdateFormDataByInstanceMapHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchUpdateFormDataByInstanceMapResponse
func (client *Client) BatchUpdateFormDataByInstanceMapWithOptions(tmpReq *BatchUpdateFormDataByInstanceMapRequest, tmpHeader *BatchUpdateFormDataByInstanceMapHeaders, runtime *util.RuntimeOptions) (_result *BatchUpdateFormDataByInstanceMapResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchUpdateFormDataByInstanceMapShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &BatchUpdateFormDataByInstanceMapShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UpdateFormDataJsonMap)) {
		request.UpdateFormDataJsonMapShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UpdateFormDataJsonMap, tea.String("UpdateFormDataJsonMap"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.AsynchronousExecution)) {
		body["AsynchronousExecution"] = request.AsynchronousExecution
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoreEmpty)) {
		body["IgnoreEmpty"] = request.IgnoreEmpty
	}

	if !tea.BoolValue(util.IsUnset(request.NoExecuteExpression)) {
		body["NoExecuteExpression"] = request.NoExecuteExpression
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateFormDataJsonMapShrink)) {
		body["UpdateFormDataJsonMap"] = request.UpdateFormDataJsonMapShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UseLatestFormSchemaVersion)) {
		body["UseLatestFormSchemaVersion"] = request.UseLatestFormSchemaVersion
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchUpdateFormDataByInstanceMap"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/batchUpdateFormDataByInstanceMap"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchUpdateFormDataByInstanceMapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过表单实例数据批量更新表单实例
//
// @param request - BatchUpdateFormDataByInstanceMapRequest
//
// @return BatchUpdateFormDataByInstanceMapResponse
func (client *Client) BatchUpdateFormDataByInstanceMap(request *BatchUpdateFormDataByInstanceMapRequest) (_result *BatchUpdateFormDataByInstanceMapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &BatchUpdateFormDataByInstanceMapHeaders{}
	_result = &BatchUpdateFormDataByInstanceMapResponse{}
	_body, _err := client.BatchUpdateFormDataByInstanceMapWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消预约会议
//
// @param tmpReq - CancelScheduleConferenceRequest
//
// @param tmpHeader - CancelScheduleConferenceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelScheduleConferenceResponse
func (client *Client) CancelScheduleConferenceWithOptions(tmpReq *CancelScheduleConferenceRequest, tmpHeader *CancelScheduleConferenceHeaders, runtime *util.RuntimeOptions) (_result *CancelScheduleConferenceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CancelScheduleConferenceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CancelScheduleConferenceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ScheduleConferenceId)) {
		body["ScheduleConferenceId"] = request.ScheduleConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelScheduleConference"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/cancelScheduleConference"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelScheduleConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消预约会议
//
// @param request - CancelScheduleConferenceRequest
//
// @return CancelScheduleConferenceResponse
func (client *Client) CancelScheduleConference(request *CancelScheduleConferenceRequest) (_result *CancelScheduleConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CancelScheduleConferenceHeaders{}
	_result = &CancelScheduleConferenceResponse{}
	_body, _err := client.CancelScheduleConferenceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 校验阿里员工
//
// @param tmpReq - CheckAlibabaStaffRequest
//
// @param tmpHeader - CheckAlibabaStaffHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckAlibabaStaffResponse
func (client *Client) CheckAlibabaStaffWithOptions(tmpReq *CheckAlibabaStaffRequest, tmpHeader *CheckAlibabaStaffHeaders, runtime *util.RuntimeOptions) (_result *CheckAlibabaStaffResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CheckAlibabaStaffShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CheckAlibabaStaffShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Mobile)) {
		body["Mobile"] = request.Mobile
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckAlibabaStaff"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/checkAlibabaStaff"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckAlibabaStaffResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 校验阿里员工
//
// @param request - CheckAlibabaStaffRequest
//
// @return CheckAlibabaStaffResponse
func (client *Client) CheckAlibabaStaff(request *CheckAlibabaStaffRequest) (_result *CheckAlibabaStaffResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CheckAlibabaStaffHeaders{}
	_result = &CheckAlibabaStaffResponse{}
	_body, _err := client.CheckAlibabaStaffWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询用户是否为企业内部群成员
//
// @param request - CheckUserIsGroupMemberRequest
//
// @param tmpHeader - CheckUserIsGroupMemberHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckUserIsGroupMemberResponse
func (client *Client) CheckUserIsGroupMemberWithOptions(request *CheckUserIsGroupMemberRequest, tmpHeader *CheckUserIsGroupMemberHeaders, runtime *util.RuntimeOptions) (_result *CheckUserIsGroupMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &CheckUserIsGroupMemberShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OpenConversationId)) {
		body["OpenConversationId"] = request.OpenConversationId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckUserIsGroupMember"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/checkUserIsGroupMember"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckUserIsGroupMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询用户是否为企业内部群成员
//
// @param request - CheckUserIsGroupMemberRequest
//
// @return CheckUserIsGroupMemberResponse
func (client *Client) CheckUserIsGroupMember(request *CheckUserIsGroupMemberRequest) (_result *CheckUserIsGroupMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CheckUserIsGroupMemberHeaders{}
	_result = &CheckUserIsGroupMemberResponse{}
	_body, _err := client.CheckUserIsGroupMemberWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 清除单元格所有内容
//
// @param tmpReq - ClearRequest
//
// @param tmpHeader - ClearHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ClearResponse
func (client *Client) ClearWithOptions(tmpReq *ClearRequest, tmpHeader *ClearHeaders, runtime *util.RuntimeOptions) (_result *ClearResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ClearShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ClearShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RangeAddress)) {
		body["RangeAddress"] = request.RangeAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("Clear"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/clear"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClearResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 清除单元格所有内容
//
// @param request - ClearRequest
//
// @return ClearResponse
func (client *Client) Clear(request *ClearRequest) (_result *ClearResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ClearHeaders{}
	_result = &ClearResponse{}
	_body, _err := client.ClearWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 清除单元格数据
//
// @param tmpReq - ClearDataRequest
//
// @param tmpHeader - ClearDataHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ClearDataResponse
func (client *Client) ClearDataWithOptions(tmpReq *ClearDataRequest, tmpHeader *ClearDataHeaders, runtime *util.RuntimeOptions) (_result *ClearDataResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ClearDataShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ClearDataShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RangeAddress)) {
		body["RangeAddress"] = request.RangeAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ClearData"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/clearData"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ClearDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 清除单元格数据
//
// @param request - ClearDataRequest
//
// @return ClearDataResponse
func (client *Client) ClearData(request *ClearDataRequest) (_result *ClearDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ClearDataHeaders{}
	_result = &ClearDataResponse{}
	_body, _err := client.ClearDataWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 关闭视频会议
//
// @param tmpReq - CloseVideoConferenceRequest
//
// @param tmpHeader - CloseVideoConferenceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CloseVideoConferenceResponse
func (client *Client) CloseVideoConferenceWithOptions(tmpReq *CloseVideoConferenceRequest, tmpHeader *CloseVideoConferenceHeaders, runtime *util.RuntimeOptions) (_result *CloseVideoConferenceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CloseVideoConferenceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CloseVideoConferenceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CloseVideoConference"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/closeVideoConference"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CloseVideoConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 关闭视频会议
//
// @param request - CloseVideoConferenceRequest
//
// @return CloseVideoConferenceResponse
func (client *Client) CloseVideoConference(request *CloseVideoConferenceRequest) (_result *CloseVideoConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CloseVideoConferenceHeaders{}
	_result = &CloseVideoConferenceResponse{}
	_body, _err := client.CloseVideoConferenceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取日志评论列表
//
// @param tmpReq - CommentListReportRequest
//
// @param tmpHeader - CommentListReportHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CommentListReportResponse
func (client *Client) CommentListReportWithOptions(tmpReq *CommentListReportRequest, tmpHeader *CommentListReportHeaders, runtime *util.RuntimeOptions) (_result *CommentListReportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CommentListReportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CommentListReportShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		body["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.ReportId)) {
		body["ReportId"] = request.ReportId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CommentListReport"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/commentListReport"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CommentListReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取日志评论列表
//
// @param request - CommentListReportRequest
//
// @return CommentListReportResponse
func (client *Client) CommentListReport(request *CommentListReportRequest) (_result *CommentListReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CommentListReportHeaders{}
	_result = &CommentListReportResponse{}
	_body, _err := client.CommentListReportWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交文件
//
// @param tmpReq - CommitFileRequest
//
// @param tmpHeader - CommitFileHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CommitFileResponse
func (client *Client) CommitFileWithOptions(tmpReq *CommitFileRequest, tmpHeader *CommitFileHeaders, runtime *util.RuntimeOptions) (_result *CommitFileResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CommitFileShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CommitFileShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ParentDentryUuid)) {
		body["ParentDentryUuid"] = request.ParentDentryUuid
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UploadKey)) {
		body["UploadKey"] = request.UploadKey
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CommitFile"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/commitFile"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CommitFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交文件
//
// @param request - CommitFileRequest
//
// @return CommitFileResponse
func (client *Client) CommitFile(request *CommitFileRequest) (_result *CommitFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CommitFileHeaders{}
	_result = &CommitFileResponse{}
	_body, _err := client.CommitFileWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发布钉钉投放活动
//
// @param tmpReq - CreateDeliveryPlanRequest
//
// @param tmpHeader - CreateDeliveryPlanHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDeliveryPlanResponse
func (client *Client) CreateDeliveryPlanWithOptions(tmpReq *CreateDeliveryPlanRequest, tmpHeader *CreateDeliveryPlanHeaders, runtime *util.RuntimeOptions) (_result *CreateDeliveryPlanResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDeliveryPlanShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateDeliveryPlanShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Content)) {
		request.ContentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Content, tea.String("Content"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UserIdList)) {
		request.UserIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIdList, tea.String("UserIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentShrink)) {
		body["Content"] = request.ContentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResId)) {
		body["ResId"] = request.ResId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdListShrink)) {
		body["UserIdList"] = request.UserIdListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDeliveryPlan"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/watt/createDeliveryPlan"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDeliveryPlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发布钉钉投放活动
//
// @param request - CreateDeliveryPlanRequest
//
// @return CreateDeliveryPlanResponse
func (client *Client) CreateDeliveryPlan(request *CreateDeliveryPlanRequest) (_result *CreateDeliveryPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateDeliveryPlanHeaders{}
	_result = &CreateDeliveryPlanResponse{}
	_body, _err := client.CreateDeliveryPlanWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 委托权限创建钉钉个人待办
//
// @param tmpReq - CreateDingtalkPersonalTodoTaskRequest
//
// @param tmpHeader - CreateDingtalkPersonalTodoTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDingtalkPersonalTodoTaskResponse
func (client *Client) CreateDingtalkPersonalTodoTaskWithOptions(tmpReq *CreateDingtalkPersonalTodoTaskRequest, tmpHeader *CreateDingtalkPersonalTodoTaskHeaders, runtime *util.RuntimeOptions) (_result *CreateDingtalkPersonalTodoTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateDingtalkPersonalTodoTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateDingtalkPersonalTodoTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExecutorIds)) {
		request.ExecutorIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExecutorIds, tea.String("ExecutorIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.NotifyConfigs)) {
		request.NotifyConfigsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NotifyConfigs, tea.String("NotifyConfigs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ParticipantIds)) {
		request.ParticipantIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ParticipantIds, tea.String("ParticipantIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DueTime)) {
		body["DueTime"] = request.DueTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecutorIdsShrink)) {
		body["ExecutorIds"] = request.ExecutorIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyConfigsShrink)) {
		body["NotifyConfigs"] = request.NotifyConfigsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ParticipantIdsShrink)) {
		body["ParticipantIds"] = request.ParticipantIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		body["Subject"] = request.Subject
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserToken)) {
		body["UserToken"] = request.UserToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDingtalkPersonalTodoTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/task/createDingtalkPersonalTodoTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDingtalkPersonalTodoTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 委托权限创建钉钉个人待办
//
// @param request - CreateDingtalkPersonalTodoTaskRequest
//
// @return CreateDingtalkPersonalTodoTaskResponse
func (client *Client) CreateDingtalkPersonalTodoTask(request *CreateDingtalkPersonalTodoTaskRequest) (_result *CreateDingtalkPersonalTodoTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateDingtalkPersonalTodoTaskHeaders{}
	_result = &CreateDingtalkPersonalTodoTaskResponse{}
	_body, _err := client.CreateDingtalkPersonalTodoTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建日程
//
// @param tmpReq - CreateEventRequest
//
// @param tmpHeader - CreateEventHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEventResponse
func (client *Client) CreateEventWithOptions(tmpReq *CreateEventRequest, tmpHeader *CreateEventHeaders, runtime *util.RuntimeOptions) (_result *CreateEventResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateEventShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateEventShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Attendees)) {
		request.AttendeesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Attendees, tea.String("Attendees"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CardInstances)) {
		request.CardInstancesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CardInstances, tea.String("CardInstances"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.End)) {
		request.EndShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.End, tea.String("End"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Extra)) {
		request.ExtraShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extra, tea.String("Extra"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Location)) {
		request.LocationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Location, tea.String("Location"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OnlineMeetingInfo)) {
		request.OnlineMeetingInfoShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OnlineMeetingInfo, tea.String("OnlineMeetingInfo"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Recurrence)) {
		request.RecurrenceShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Recurrence, tea.String("Recurrence"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Reminders)) {
		request.RemindersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Reminders, tea.String("Reminders"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RichTextDescription)) {
		request.RichTextDescriptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RichTextDescription, tea.String("RichTextDescription"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UiConfigs)) {
		request.UiConfigsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UiConfigs, tea.String("UiConfigs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Start)) {
		request.StartShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Start, tea.String("start"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttendeesShrink)) {
		body["Attendees"] = request.AttendeesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CardInstancesShrink)) {
		body["CardInstances"] = request.CardInstancesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndShrink)) {
		body["End"] = request.EndShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraShrink)) {
		body["Extra"] = request.ExtraShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IsAllDay)) {
		body["IsAllDay"] = request.IsAllDay
	}

	if !tea.BoolValue(util.IsUnset(request.LocationShrink)) {
		body["Location"] = request.LocationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OnlineMeetingInfoShrink)) {
		body["OnlineMeetingInfo"] = request.OnlineMeetingInfoShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RecurrenceShrink)) {
		body["Recurrence"] = request.RecurrenceShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RemindersShrink)) {
		body["Reminders"] = request.RemindersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RichTextDescriptionShrink)) {
		body["RichTextDescription"] = request.RichTextDescriptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Summary)) {
		body["Summary"] = request.Summary
	}

	if !tea.BoolValue(util.IsUnset(request.UiConfigsShrink)) {
		body["UiConfigs"] = request.UiConfigsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["calendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.StartShrink)) {
		body["start"] = request.StartShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEvent"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/createEvent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建日程
//
// @param request - CreateEventRequest
//
// @return CreateEventResponse
func (client *Client) CreateEvent(request *CreateEventRequest) (_result *CreateEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateEventHeaders{}
	_result = &CreateEventResponse{}
	_body, _err := client.CreateEventWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建直播
//
// @param tmpReq - CreateLiveRequest
//
// @param tmpHeader - CreateLiveHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveResponse
func (client *Client) CreateLiveWithOptions(tmpReq *CreateLiveRequest, tmpHeader *CreateLiveHeaders, runtime *util.RuntimeOptions) (_result *CreateLiveResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateLiveShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		body["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Introduction)) {
		body["Introduction"] = request.Introduction
	}

	if !tea.BoolValue(util.IsUnset(request.PreEndTime)) {
		body["PreEndTime"] = request.PreEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PreStartTime)) {
		body["PreStartTime"] = request.PreStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.PublicType)) {
		body["PublicType"] = request.PublicType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLive"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/createLive"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建直播
//
// @param request - CreateLiveRequest
//
// @return CreateLiveResponse
func (client *Client) CreateLive(request *CreateLiveRequest) (_result *CreateLiveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateLiveHeaders{}
	_result = &CreateLiveResponse{}
	_body, _err := client.CreateLiveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建会议室
//
// @param tmpReq - CreateMeetingRoomRequest
//
// @param tmpHeader - CreateMeetingRoomHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMeetingRoomResponse
func (client *Client) CreateMeetingRoomWithOptions(tmpReq *CreateMeetingRoomRequest, tmpHeader *CreateMeetingRoomHeaders, runtime *util.RuntimeOptions) (_result *CreateMeetingRoomResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateMeetingRoomShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateMeetingRoomShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ReservationAuthority)) {
		request.ReservationAuthorityShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReservationAuthority, tea.String("ReservationAuthority"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RoomLabelIds)) {
		request.RoomLabelIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoomLabelIds, tea.String("RoomLabelIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RoomLocation)) {
		request.RoomLocationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoomLocation, tea.String("RoomLocation"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableCycleReservation)) {
		body["EnableCycleReservation"] = request.EnableCycleReservation
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvRoomId)) {
		body["IsvRoomId"] = request.IsvRoomId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservationAuthorityShrink)) {
		body["ReservationAuthority"] = request.ReservationAuthorityShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RoomCapacity)) {
		body["RoomCapacity"] = request.RoomCapacity
	}

	if !tea.BoolValue(util.IsUnset(request.RoomLabelIdsShrink)) {
		body["RoomLabelIds"] = request.RoomLabelIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RoomLocationShrink)) {
		body["RoomLocation"] = request.RoomLocationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RoomName)) {
		body["RoomName"] = request.RoomName
	}

	if !tea.BoolValue(util.IsUnset(request.RoomPicture)) {
		body["RoomPicture"] = request.RoomPicture
	}

	if !tea.BoolValue(util.IsUnset(request.RoomStatus)) {
		body["RoomStatus"] = request.RoomStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMeetingRoom"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/createMeetingRoom"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMeetingRoomResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建会议室
//
// @param request - CreateMeetingRoomRequest
//
// @return CreateMeetingRoomResponse
func (client *Client) CreateMeetingRoom(request *CreateMeetingRoomRequest) (_result *CreateMeetingRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateMeetingRoomHeaders{}
	_result = &CreateMeetingRoomResponse{}
	_body, _err := client.CreateMeetingRoomWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建会议室分组
//
// @param tmpReq - CreateMeetingRoomGroupRequest
//
// @param tmpHeader - CreateMeetingRoomGroupHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateMeetingRoomGroupResponse
func (client *Client) CreateMeetingRoomGroupWithOptions(tmpReq *CreateMeetingRoomGroupRequest, tmpHeader *CreateMeetingRoomGroupHeaders, runtime *util.RuntimeOptions) (_result *CreateMeetingRoomGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateMeetingRoomGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateMeetingRoomGroupShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ParentGroupId)) {
		body["ParentGroupId"] = request.ParentGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateMeetingRoomGroup"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/createMeetingRoomGroup"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateMeetingRoomGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建会议室分组
//
// @param request - CreateMeetingRoomGroupRequest
//
// @return CreateMeetingRoomGroupResponse
func (client *Client) CreateMeetingRoomGroup(request *CreateMeetingRoomGroupRequest) (_result *CreateMeetingRoomGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateMeetingRoomGroupHeaders{}
	_result = &CreateMeetingRoomGroupResponse{}
	_body, _err := client.CreateMeetingRoomGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 新增或更新表单实例
//
// @param request - CreateOrUpdateFormDataRequest
//
// @param tmpHeader - CreateOrUpdateFormDataHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrUpdateFormDataResponse
func (client *Client) CreateOrUpdateFormDataWithOptions(request *CreateOrUpdateFormDataRequest, tmpHeader *CreateOrUpdateFormDataHeaders, runtime *util.RuntimeOptions) (_result *CreateOrUpdateFormDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &CreateOrUpdateFormDataShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormDataJson)) {
		body["FormDataJson"] = request.FormDataJson
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.NoExecuteExpression)) {
		body["NoExecuteExpression"] = request.NoExecuteExpression
	}

	if !tea.BoolValue(util.IsUnset(request.SearchCondition)) {
		body["SearchCondition"] = request.SearchCondition
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrUpdateFormData"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/createOrUpdateFormData"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrUpdateFormDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 新增或更新表单实例
//
// @param request - CreateOrUpdateFormDataRequest
//
// @return CreateOrUpdateFormDataResponse
func (client *Client) CreateOrUpdateFormData(request *CreateOrUpdateFormDataRequest) (_result *CreateOrUpdateFormDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateOrUpdateFormDataHeaders{}
	_result = &CreateOrUpdateFormDataResponse{}
	_body, _err := client.CreateOrUpdateFormDataWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建荣誉勋章模板
//
// @param tmpReq - CreateOrgHonorTemplateRequest
//
// @param tmpHeader - CreateOrgHonorTemplateHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrgHonorTemplateResponse
func (client *Client) CreateOrgHonorTemplateWithOptions(tmpReq *CreateOrgHonorTemplateRequest, tmpHeader *CreateOrgHonorTemplateHeaders, runtime *util.RuntimeOptions) (_result *CreateOrgHonorTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateOrgHonorTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateOrgHonorTemplateShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.AvatarFrameMediaId)) {
		body["avatarFrameMediaId"] = request.AvatarFrameMediaId
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultBgColor)) {
		body["defaultBgColor"] = request.DefaultBgColor
	}

	if !tea.BoolValue(util.IsUnset(request.MedalDesc)) {
		body["medalDesc"] = request.MedalDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MedalMediaId)) {
		body["medalMediaId"] = request.MedalMediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MedalName)) {
		body["medalName"] = request.MedalName
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["orgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["userId"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrgHonorTemplate"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/honor/createOrgHonorTemplate"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrgHonorTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建荣誉勋章模板
//
// @param request - CreateOrgHonorTemplateRequest
//
// @return CreateOrgHonorTemplateResponse
func (client *Client) CreateOrgHonorTemplate(request *CreateOrgHonorTemplateRequest) (_result *CreateOrgHonorTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateOrgHonorTemplateHeaders{}
	_result = &CreateOrgHonorTemplateResponse{}
	_body, _err := client.CreateOrgHonorTemplateWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建钉钉个人待办任务
//
// @param tmpReq - CreatePersonalTodoTaskRequest
//
// @param tmpHeader - CreatePersonalTodoTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePersonalTodoTaskResponse
func (client *Client) CreatePersonalTodoTaskWithOptions(tmpReq *CreatePersonalTodoTaskRequest, tmpHeader *CreatePersonalTodoTaskHeaders, runtime *util.RuntimeOptions) (_result *CreatePersonalTodoTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreatePersonalTodoTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreatePersonalTodoTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExecutorIds)) {
		request.ExecutorIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExecutorIds, tea.String("ExecutorIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.NotifyConfigs)) {
		request.NotifyConfigsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NotifyConfigs, tea.String("NotifyConfigs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ParticipantIds)) {
		request.ParticipantIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ParticipantIds, tea.String("ParticipantIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DueTime)) {
		body["DueTime"] = request.DueTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecutorIdsShrink)) {
		body["ExecutorIds"] = request.ExecutorIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyConfigsShrink)) {
		body["NotifyConfigs"] = request.NotifyConfigsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ParticipantIdsShrink)) {
		body["ParticipantIds"] = request.ParticipantIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		body["Subject"] = request.Subject
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePersonalTodoTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/task/createPersonalTodoTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePersonalTodoTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建钉钉个人待办任务
//
// @param request - CreatePersonalTodoTaskRequest
//
// @return CreatePersonalTodoTaskResponse
func (client *Client) CreatePersonalTodoTask(request *CreatePersonalTodoTaskRequest) (_result *CreatePersonalTodoTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreatePersonalTodoTaskHeaders{}
	_result = &CreatePersonalTodoTaskResponse{}
	_body, _err := client.CreatePersonalTodoTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建日志
//
// @param tmpReq - CreateReportRequest
//
// @param tmpHeader - CreateReportHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateReportResponse
func (client *Client) CreateReportWithOptions(tmpReq *CreateReportRequest, tmpHeader *CreateReportHeaders, runtime *util.RuntimeOptions) (_result *CreateReportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateReportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateReportShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Contents)) {
		request.ContentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Contents, tea.String("Contents"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ToCids)) {
		request.ToCidsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ToCids, tea.String("ToCids"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ToUserids)) {
		request.ToUseridsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ToUserids, tea.String("ToUserids"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentsShrink)) {
		body["Contents"] = request.ContentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DdFrom)) {
		body["DdFrom"] = request.DdFrom
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ToChat)) {
		body["ToChat"] = request.ToChat
	}

	if !tea.BoolValue(util.IsUnset(request.ToCidsShrink)) {
		body["ToCids"] = request.ToCidsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ToUseridsShrink)) {
		body["ToUserids"] = request.ToUseridsShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateReport"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/createReport"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建日志
//
// @param request - CreateReportRequest
//
// @return CreateReportResponse
func (client *Client) CreateReport(request *CreateReportRequest) (_result *CreateReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateReportHeaders{}
	_result = &CreateReportResponse{}
	_body, _err := client.CreateReportWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建场景群
//
// @param request - CreateScenegroupRequest
//
// @param tmpHeader - CreateScenegroupHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateScenegroupResponse
func (client *Client) CreateScenegroupWithOptions(request *CreateScenegroupRequest, tmpHeader *CreateScenegroupHeaders, runtime *util.RuntimeOptions) (_result *CreateScenegroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &CreateScenegroupShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AddFriendForbidden)) {
		body["AddFriendForbidden"] = request.AddFriendForbidden
	}

	if !tea.BoolValue(util.IsUnset(request.AllMembersCanCreateCalendar)) {
		body["AllMembersCanCreateCalendar"] = request.AllMembersCanCreateCalendar
	}

	if !tea.BoolValue(util.IsUnset(request.AllMembersCanCreateMcsConf)) {
		body["AllMembersCanCreateMcsConf"] = request.AllMembersCanCreateMcsConf
	}

	if !tea.BoolValue(util.IsUnset(request.ChatBannedType)) {
		body["ChatBannedType"] = request.ChatBannedType
	}

	if !tea.BoolValue(util.IsUnset(request.GroupEmailDisabled)) {
		body["GroupEmailDisabled"] = request.GroupEmailDisabled
	}

	if !tea.BoolValue(util.IsUnset(request.GroupLiveSwitch)) {
		body["GroupLiveSwitch"] = request.GroupLiveSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.Icon)) {
		body["Icon"] = request.Icon
	}

	if !tea.BoolValue(util.IsUnset(request.ManagementType)) {
		body["ManagementType"] = request.ManagementType
	}

	if !tea.BoolValue(util.IsUnset(request.MembersToAdminChat)) {
		body["MembersToAdminChat"] = request.MembersToAdminChat
	}

	if !tea.BoolValue(util.IsUnset(request.MentionAllAuthority)) {
		body["MentionAllAuthority"] = request.MentionAllAuthority
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyAdminCanDing)) {
		body["OnlyAdminCanDing"] = request.OnlyAdminCanDing
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyAdminCanSetMsgTop)) {
		body["OnlyAdminCanSetMsgTop"] = request.OnlyAdminCanSetMsgTop
	}

	if !tea.BoolValue(util.IsUnset(request.Searchable)) {
		body["Searchable"] = request.Searchable
	}

	if !tea.BoolValue(util.IsUnset(request.ShowHistoryType)) {
		body["ShowHistoryType"] = request.ShowHistoryType
	}

	if !tea.BoolValue(util.IsUnset(request.SubadminIds)) {
		body["SubadminIds"] = request.SubadminIds
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		body["UserIds"] = request.UserIds
	}

	if !tea.BoolValue(util.IsUnset(request.Uuid)) {
		body["Uuid"] = request.Uuid
	}

	if !tea.BoolValue(util.IsUnset(request.ValidationType)) {
		body["ValidationType"] = request.ValidationType
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateScenegroup"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/createScenegroup"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateScenegroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建场景群
//
// @param request - CreateScenegroupRequest
//
// @return CreateScenegroupResponse
func (client *Client) CreateScenegroup(request *CreateScenegroupRequest) (_result *CreateScenegroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateScenegroupHeaders{}
	_result = &CreateScenegroupResponse{}
	_body, _err := client.CreateScenegroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建预约会议
//
// @param tmpReq - CreateScheduleConferenceRequest
//
// @param tmpHeader - CreateScheduleConferenceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateScheduleConferenceResponse
func (client *Client) CreateScheduleConferenceWithOptions(tmpReq *CreateScheduleConferenceRequest, tmpHeader *CreateScheduleConferenceHeaders, runtime *util.RuntimeOptions) (_result *CreateScheduleConferenceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateScheduleConferenceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateScheduleConferenceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateScheduleConference"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/createScheduleConference"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateScheduleConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建预约会议
//
// @param request - CreateScheduleConferenceRequest
//
// @return CreateScheduleConferenceResponse
func (client *Client) CreateScheduleConference(request *CreateScheduleConferenceRequest) (_result *CreateScheduleConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateScheduleConferenceHeaders{}
	_result = &CreateScheduleConferenceResponse{}
	_body, _err := client.CreateScheduleConferenceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发布钉钉搜索穹顶
//
// @param tmpReq - CreateSearchDomeRequest
//
// @param tmpHeader - CreateSearchDomeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSearchDomeResponse
func (client *Client) CreateSearchDomeWithOptions(tmpReq *CreateSearchDomeRequest, tmpHeader *CreateSearchDomeHeaders, runtime *util.RuntimeOptions) (_result *CreateSearchDomeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSearchDomeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateSearchDomeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UserIdList)) {
		request.UserIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIdList, tea.String("UserIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResId)) {
		body["ResId"] = request.ResId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdListShrink)) {
		body["UserIdList"] = request.UserIdListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSearchDome"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/watt/createSearchDome"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSearchDomeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发布钉钉搜索穹顶
//
// @param request - CreateSearchDomeRequest
//
// @return CreateSearchDomeResponse
func (client *Client) CreateSearchDome(request *CreateSearchDomeRequest) (_result *CreateSearchDomeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateSearchDomeHeaders{}
	_result = &CreateSearchDomeResponse{}
	_body, _err := client.CreateSearchDomeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发布钉钉搜索关键词
//
// @param tmpReq - CreateSearchKeywordRequest
//
// @param tmpHeader - CreateSearchKeywordHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSearchKeywordResponse
func (client *Client) CreateSearchKeywordWithOptions(tmpReq *CreateSearchKeywordRequest, tmpHeader *CreateSearchKeywordHeaders, runtime *util.RuntimeOptions) (_result *CreateSearchKeywordResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSearchKeywordShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateSearchKeywordShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UserIdList)) {
		request.UserIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIdList, tea.String("UserIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResId)) {
		body["ResId"] = request.ResId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdListShrink)) {
		body["UserIdList"] = request.UserIdListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSearchKeyword"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/watt/createSearchKeyword"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSearchKeywordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发布钉钉搜索关键词
//
// @param request - CreateSearchKeywordRequest
//
// @return CreateSearchKeywordResponse
func (client *Client) CreateSearchKeyword(request *CreateSearchKeywordRequest) (_result *CreateSearchKeywordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateSearchKeywordHeaders{}
	_result = &CreateSearchKeywordResponse{}
	_body, _err := client.CreateSearchKeywordWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建工作表
//
// @param tmpReq - CreateSheetRequest
//
// @param tmpHeader - CreateSheetHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSheetResponse
func (client *Client) CreateSheetWithOptions(tmpReq *CreateSheetRequest, tmpHeader *CreateSheetHeaders, runtime *util.RuntimeOptions) (_result *CreateSheetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSheetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateSheetShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSheet"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/createSheet"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSheetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建工作表
//
// @param request - CreateSheetRequest
//
// @return CreateSheetResponse
func (client *Client) CreateSheet(request *CreateSheetRequest) (_result *CreateSheetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateSheetHeaders{}
	_result = &CreateSheetResponse{}
	_body, _err := client.CreateSheetWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建订阅日历
//
// @param tmpReq - CreateSubscribedCalendarRequest
//
// @param tmpHeader - CreateSubscribedCalendarHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSubscribedCalendarResponse
func (client *Client) CreateSubscribedCalendarWithOptions(tmpReq *CreateSubscribedCalendarRequest, tmpHeader *CreateSubscribedCalendarHeaders, runtime *util.RuntimeOptions) (_result *CreateSubscribedCalendarResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateSubscribedCalendarShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateSubscribedCalendarShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Managers)) {
		request.ManagersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Managers, tea.String("Managers"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SubscribeScope)) {
		request.SubscribeScopeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SubscribeScope, tea.String("SubscribeScope"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ManagersShrink)) {
		body["Managers"] = request.ManagersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SubscribeScopeShrink)) {
		body["SubscribeScope"] = request.SubscribeScopeShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSubscribedCalendar"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/createSubscribedCalendar"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSubscribedCalendarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建订阅日历
//
// @param request - CreateSubscribedCalendarRequest
//
// @return CreateSubscribedCalendarResponse
func (client *Client) CreateSubscribedCalendar(request *CreateSubscribedCalendarRequest) (_result *CreateSubscribedCalendarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateSubscribedCalendarHeaders{}
	_result = &CreateSubscribedCalendarResponse{}
	_body, _err := client.CreateSubscribedCalendarWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建代办
//
// @param tmpReq - CreateTodoTaskRequest
//
// @param tmpHeader - CreateTodoTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTodoTaskResponse
func (client *Client) CreateTodoTaskWithOptions(tmpReq *CreateTodoTaskRequest, tmpHeader *CreateTodoTaskHeaders, runtime *util.RuntimeOptions) (_result *CreateTodoTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateTodoTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateTodoTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ContentFieldList)) {
		request.ContentFieldListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ContentFieldList, tea.String("contentFieldList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.DetailUrl)) {
		request.DetailUrlShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.DetailUrl, tea.String("detailUrl"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExecutorIds)) {
		request.ExecutorIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExecutorIds, tea.String("executorIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.NotifyConfigs)) {
		request.NotifyConfigsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NotifyConfigs, tea.String("notifyConfigs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ParticipantIds)) {
		request.ParticipantIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ParticipantIds, tea.String("participantIds"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OperatorId)) {
		query["operatorId"] = request.OperatorId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ContentFieldListShrink)) {
		body["contentFieldList"] = request.ContentFieldListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CreatorId)) {
		body["creatorId"] = request.CreatorId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DetailUrlShrink)) {
		body["detailUrl"] = request.DetailUrlShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DueTime)) {
		body["dueTime"] = request.DueTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecutorIdsShrink)) {
		body["executorIds"] = request.ExecutorIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IsOnlyShowExecutor)) {
		body["isOnlyShowExecutor"] = request.IsOnlyShowExecutor
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyConfigsShrink)) {
		body["notifyConfigs"] = request.NotifyConfigsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ParticipantIdsShrink)) {
		body["participantIds"] = request.ParticipantIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		body["priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.SourceId)) {
		body["sourceId"] = request.SourceId
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		body["subject"] = request.Subject
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTodoTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/task/createTodoTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTodoTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建代办
//
// @param request - CreateTodoTaskRequest
//
// @return CreateTodoTaskResponse
func (client *Client) CreateTodoTask(request *CreateTodoTaskRequest) (_result *CreateTodoTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateTodoTaskHeaders{}
	_result = &CreateTodoTaskResponse{}
	_body, _err := client.CreateTodoTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建视频会议
//
// @param tmpReq - CreateVideoConferenceRequest
//
// @param tmpHeader - CreateVideoConferenceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateVideoConferenceResponse
func (client *Client) CreateVideoConferenceWithOptions(tmpReq *CreateVideoConferenceRequest, tmpHeader *CreateVideoConferenceHeaders, runtime *util.RuntimeOptions) (_result *CreateVideoConferenceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateVideoConferenceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateVideoConferenceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.InviteUserIds)) {
		request.InviteUserIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InviteUserIds, tea.String("InviteUserIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfTitle)) {
		body["ConfTitle"] = request.ConfTitle
	}

	if !tea.BoolValue(util.IsUnset(request.InviteCaller)) {
		body["InviteCaller"] = request.InviteCaller
	}

	if !tea.BoolValue(util.IsUnset(request.InviteUserIdsShrink)) {
		body["InviteUserIds"] = request.InviteUserIdsShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateVideoConference"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/createVideoConference"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateVideoConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建视频会议
//
// @param request - CreateVideoConferenceRequest
//
// @return CreateVideoConferenceResponse
func (client *Client) CreateVideoConference(request *CreateVideoConferenceRequest) (_result *CreateVideoConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateVideoConferenceHeaders{}
	_result = &CreateVideoConferenceResponse{}
	_body, _err := client.CreateVideoConferenceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建知识库
//
// @param tmpReq - CreateWorkspaceRequest
//
// @param tmpHeader - CreateWorkspaceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkspaceResponse
func (client *Client) CreateWorkspaceWithOptions(tmpReq *CreateWorkspaceRequest, tmpHeader *CreateWorkspaceHeaders, runtime *util.RuntimeOptions) (_result *CreateWorkspaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateWorkspaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateWorkspaceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkspace"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/createWorkspace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建知识库
//
// @param request - CreateWorkspaceRequest
//
// @return CreateWorkspaceResponse
func (client *Client) CreateWorkspace(request *CreateWorkspaceRequest) (_result *CreateWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateWorkspaceHeaders{}
	_result = &CreateWorkspaceResponse{}
	_body, _err := client.CreateWorkspaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建知识库文档
//
// @param tmpReq - CreateWorkspaceDocRequest
//
// @param tmpHeader - CreateWorkspaceDocHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateWorkspaceDocResponse
func (client *Client) CreateWorkspaceDocWithOptions(tmpReq *CreateWorkspaceDocRequest, tmpHeader *CreateWorkspaceDocHeaders, runtime *util.RuntimeOptions) (_result *CreateWorkspaceDocResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateWorkspaceDocShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &CreateWorkspaceDocShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DocType)) {
		body["DocType"] = request.DocType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentNodeId)) {
		body["ParentNodeId"] = request.ParentNodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		body["TemplateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateWorkspaceDoc"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/createWorkspaceDoc"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateWorkspaceDocResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建知识库文档
//
// @param request - CreateWorkspaceDocRequest
//
// @return CreateWorkspaceDocResponse
func (client *Client) CreateWorkspaceDoc(request *CreateWorkspaceDocRequest) (_result *CreateWorkspaceDocResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &CreateWorkspaceDocHeaders{}
	_result = &CreateWorkspaceDocResponse{}
	_body, _err := client.CreateWorkspaceDocWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除指定列
//
// @param tmpReq - DeleteColumnsRequest
//
// @param tmpHeader - DeleteColumnsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteColumnsResponse
func (client *Client) DeleteColumnsWithOptions(tmpReq *DeleteColumnsRequest, tmpHeader *DeleteColumnsHeaders, runtime *util.RuntimeOptions) (_result *DeleteColumnsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteColumnsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteColumnsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Column)) {
		body["Column"] = request.Column
	}

	if !tea.BoolValue(util.IsUnset(request.ColumnCount)) {
		body["ColumnCount"] = request.ColumnCount
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteColumns"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/deleteColumns"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteColumnsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除指定列
//
// @param request - DeleteColumnsRequest
//
// @return DeleteColumnsResponse
func (client *Client) DeleteColumns(request *DeleteColumnsRequest) (_result *DeleteColumnsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteColumnsHeaders{}
	_result = &DeleteColumnsResponse{}
	_body, _err := client.DeleteColumnsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除钉盘空间
//
// @param tmpReq - DeleteDriveSpaceRequest
//
// @param tmpHeader - DeleteDriveSpaceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDriveSpaceResponse
func (client *Client) DeleteDriveSpaceWithOptions(tmpReq *DeleteDriveSpaceRequest, tmpHeader *DeleteDriveSpaceHeaders, runtime *util.RuntimeOptions) (_result *DeleteDriveSpaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteDriveSpaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteDriveSpaceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SpaceId)) {
		body["SpaceId"] = request.SpaceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDriveSpace"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/deleteDriveSpace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDriveSpaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除钉盘空间
//
// @param request - DeleteDriveSpaceRequest
//
// @return DeleteDriveSpaceResponse
func (client *Client) DeleteDriveSpace(request *DeleteDriveSpaceRequest) (_result *DeleteDriveSpaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteDriveSpaceHeaders{}
	_result = &DeleteDriveSpaceResponse{}
	_body, _err := client.DeleteDriveSpaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除日程
//
// @param request - DeleteEventRequest
//
// @param tmpHeader - DeleteEventHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEventResponse
func (client *Client) DeleteEventWithOptions(request *DeleteEventRequest, tmpHeader *DeleteEventHeaders, runtime *util.RuntimeOptions) (_result *DeleteEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &DeleteEventShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		body["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.PushNotification)) {
		body["pushNotification"] = request.PushNotification
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEvent"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/deleteEvent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除日程
//
// @param request - DeleteEventRequest
//
// @return DeleteEventResponse
func (client *Client) DeleteEvent(request *DeleteEventRequest) (_result *DeleteEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteEventHeaders{}
	_result = &DeleteEventResponse{}
	_body, _err := client.DeleteEventWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除表单数据
//
// @param request - DeleteFormDataRequest
//
// @param tmpHeader - DeleteFormDataHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteFormDataResponse
func (client *Client) DeleteFormDataWithOptions(request *DeleteFormDataRequest, tmpHeader *DeleteFormDataHeaders, runtime *util.RuntimeOptions) (_result *DeleteFormDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &DeleteFormDataShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceId)) {
		body["FormInstanceId"] = request.FormInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFormData"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/deleteFormData"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFormDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除表单数据
//
// @param request - DeleteFormDataRequest
//
// @return DeleteFormDataResponse
func (client *Client) DeleteFormData(request *DeleteFormDataRequest) (_result *DeleteFormDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteFormDataHeaders{}
	_result = &DeleteFormDataResponse{}
	_body, _err := client.DeleteFormDataWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteInstanceRequest
//
// @param tmpHeader - DeleteInstanceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteInstanceResponse
func (client *Client) DeleteInstanceWithOptions(request *DeleteInstanceRequest, tmpHeader *DeleteInstanceHeaders, runtime *util.RuntimeOptions) (_result *DeleteInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &DeleteInstanceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteInstance"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/deleteInstance"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteInstanceRequest
//
// @return DeleteInstanceResponse
func (client *Client) DeleteInstance(request *DeleteInstanceRequest) (_result *DeleteInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteInstanceHeaders{}
	_result = &DeleteInstanceResponse{}
	_body, _err := client.DeleteInstanceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除直播
//
// @param tmpReq - DeleteLiveRequest
//
// @param tmpHeader - DeleteLiveHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveResponse
func (client *Client) DeleteLiveWithOptions(tmpReq *DeleteLiveRequest, tmpHeader *DeleteLiveHeaders, runtime *util.RuntimeOptions) (_result *DeleteLiveResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteLiveShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteLiveShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LiveId)) {
		body["LiveId"] = request.LiveId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLive"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/deleteLive"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除直播
//
// @param request - DeleteLiveRequest
//
// @return DeleteLiveResponse
func (client *Client) DeleteLive(request *DeleteLiveRequest) (_result *DeleteLiveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteLiveHeaders{}
	_result = &DeleteLiveResponse{}
	_body, _err := client.DeleteLiveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除会议室
//
// @param tmpReq - DeleteMeetingRoomRequest
//
// @param tmpHeader - DeleteMeetingRoomHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMeetingRoomResponse
func (client *Client) DeleteMeetingRoomWithOptions(tmpReq *DeleteMeetingRoomRequest, tmpHeader *DeleteMeetingRoomHeaders, runtime *util.RuntimeOptions) (_result *DeleteMeetingRoomResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteMeetingRoomShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteMeetingRoomShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		body["RoomId"] = request.RoomId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMeetingRoom"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/deleteMeetingRoom"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMeetingRoomResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除会议室
//
// @param request - DeleteMeetingRoomRequest
//
// @return DeleteMeetingRoomResponse
func (client *Client) DeleteMeetingRoom(request *DeleteMeetingRoomRequest) (_result *DeleteMeetingRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteMeetingRoomHeaders{}
	_result = &DeleteMeetingRoomResponse{}
	_body, _err := client.DeleteMeetingRoomWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除会议室分组
//
// @param tmpReq - DeleteMeetingRoomGroupRequest
//
// @param tmpHeader - DeleteMeetingRoomGroupHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMeetingRoomGroupResponse
func (client *Client) DeleteMeetingRoomGroupWithOptions(tmpReq *DeleteMeetingRoomGroupRequest, tmpHeader *DeleteMeetingRoomGroupHeaders, runtime *util.RuntimeOptions) (_result *DeleteMeetingRoomGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteMeetingRoomGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteMeetingRoomGroupShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMeetingRoomGroup"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/deleteMeetingRoomGroup"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMeetingRoomGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除会议室分组
//
// @param request - DeleteMeetingRoomGroupRequest
//
// @return DeleteMeetingRoomGroupResponse
func (client *Client) DeleteMeetingRoomGroup(request *DeleteMeetingRoomGroupRequest) (_result *DeleteMeetingRoomGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteMeetingRoomGroupHeaders{}
	_result = &DeleteMeetingRoomGroupResponse{}
	_body, _err := client.DeleteMeetingRoomGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除指定行
//
// @param tmpReq - DeleteRowsRequest
//
// @param tmpHeader - DeleteRowsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteRowsResponse
func (client *Client) DeleteRowsWithOptions(tmpReq *DeleteRowsRequest, tmpHeader *DeleteRowsHeaders, runtime *util.RuntimeOptions) (_result *DeleteRowsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteRowsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteRowsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Row)) {
		body["Row"] = request.Row
	}

	if !tea.BoolValue(util.IsUnset(request.RowCount)) {
		body["RowCount"] = request.RowCount
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteRows"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/deleteRows"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteRowsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除指定行
//
// @param request - DeleteRowsRequest
//
// @return DeleteRowsResponse
func (client *Client) DeleteRows(request *DeleteRowsRequest) (_result *DeleteRowsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteRowsHeaders{}
	_result = &DeleteRowsResponse{}
	_body, _err := client.DeleteRowsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除群成员
//
// @param request - DeleteScenegroupMemberRequest
//
// @param tmpHeader - DeleteScenegroupMemberHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteScenegroupMemberResponse
func (client *Client) DeleteScenegroupMemberWithOptions(request *DeleteScenegroupMemberRequest, tmpHeader *DeleteScenegroupMemberHeaders, runtime *util.RuntimeOptions) (_result *DeleteScenegroupMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &DeleteScenegroupMemberShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OpenConversationId)) {
		body["OpenConversationId"] = request.OpenConversationId
	}

	if !tea.BoolValue(util.IsUnset(request.UserIds)) {
		body["UserIds"] = request.UserIds
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteScenegroupMember"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/deleteScenegroupMember"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteScenegroupMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除群成员
//
// @param request - DeleteScenegroupMemberRequest
//
// @return DeleteScenegroupMemberResponse
func (client *Client) DeleteScenegroupMember(request *DeleteScenegroupMemberRequest) (_result *DeleteScenegroupMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteScenegroupMemberHeaders{}
	_result = &DeleteScenegroupMemberResponse{}
	_body, _err := client.DeleteScenegroupMemberWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除一个工作表
//
// @param tmpReq - DeleteSheetRequest
//
// @param tmpHeader - DeleteSheetHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSheetResponse
func (client *Client) DeleteSheetWithOptions(tmpReq *DeleteSheetRequest, tmpHeader *DeleteSheetHeaders, runtime *util.RuntimeOptions) (_result *DeleteSheetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteSheetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteSheetShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSheet"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/deleteSheet"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSheetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除一个工作表
//
// @param request - DeleteSheetRequest
//
// @return DeleteSheetResponse
func (client *Client) DeleteSheet(request *DeleteSheetRequest) (_result *DeleteSheetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteSheetHeaders{}
	_result = &DeleteSheetResponse{}
	_body, _err := client.DeleteSheetWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除订阅日历
//
// @param request - DeleteSubscribedCalendarRequest
//
// @param tmpHeader - DeleteSubscribedCalendarHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSubscribedCalendarResponse
func (client *Client) DeleteSubscribedCalendarWithOptions(request *DeleteSubscribedCalendarRequest, tmpHeader *DeleteSubscribedCalendarHeaders, runtime *util.RuntimeOptions) (_result *DeleteSubscribedCalendarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &DeleteSubscribedCalendarShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSubscribedCalendar"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/deleteSubscribedCalendar"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSubscribedCalendarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除订阅日历
//
// @param request - DeleteSubscribedCalendarRequest
//
// @return DeleteSubscribedCalendarResponse
func (client *Client) DeleteSubscribedCalendar(request *DeleteSubscribedCalendarRequest) (_result *DeleteSubscribedCalendarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteSubscribedCalendarHeaders{}
	_result = &DeleteSubscribedCalendarResponse{}
	_body, _err := client.DeleteSubscribedCalendarWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除代办
//
// @param tmpReq - DeleteTodoTaskRequest
//
// @param tmpHeader - DeleteTodoTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTodoTaskResponse
func (client *Client) DeleteTodoTaskWithOptions(tmpReq *DeleteTodoTaskRequest, tmpHeader *DeleteTodoTaskHeaders, runtime *util.RuntimeOptions) (_result *DeleteTodoTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteTodoTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteTodoTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorId)) {
		body["operatorId"] = request.OperatorId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["taskId"] = request.TaskId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTodoTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/task/deleteTodoTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTodoTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除代办
//
// @param request - DeleteTodoTaskRequest
//
// @return DeleteTodoTaskResponse
func (client *Client) DeleteTodoTask(request *DeleteTodoTaskRequest) (_result *DeleteTodoTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteTodoTaskHeaders{}
	_result = &DeleteTodoTaskResponse{}
	_body, _err := client.DeleteTodoTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除知识库文档成员
//
// @param tmpReq - DeleteWorkspaceDocMembersRequest
//
// @param tmpHeader - DeleteWorkspaceDocMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWorkspaceDocMembersResponse
func (client *Client) DeleteWorkspaceDocMembersWithOptions(tmpReq *DeleteWorkspaceDocMembersRequest, tmpHeader *DeleteWorkspaceDocMembersHeaders, runtime *util.RuntimeOptions) (_result *DeleteWorkspaceDocMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteWorkspaceDocMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteWorkspaceDocMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Members)) {
		request.MembersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Members, tea.String("Members"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MembersShrink)) {
		body["Members"] = request.MembersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWorkspaceDocMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/deleteWorkspaceDocMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWorkspaceDocMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除知识库文档成员
//
// @param request - DeleteWorkspaceDocMembersRequest
//
// @return DeleteWorkspaceDocMembersResponse
func (client *Client) DeleteWorkspaceDocMembers(request *DeleteWorkspaceDocMembersRequest) (_result *DeleteWorkspaceDocMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteWorkspaceDocMembersHeaders{}
	_result = &DeleteWorkspaceDocMembersResponse{}
	_body, _err := client.DeleteWorkspaceDocMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除知识库成员
//
// @param tmpReq - DeleteWorkspaceMembersRequest
//
// @param tmpHeader - DeleteWorkspaceMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteWorkspaceMembersResponse
func (client *Client) DeleteWorkspaceMembersWithOptions(tmpReq *DeleteWorkspaceMembersRequest, tmpHeader *DeleteWorkspaceMembersHeaders, runtime *util.RuntimeOptions) (_result *DeleteWorkspaceMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteWorkspaceMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &DeleteWorkspaceMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Members)) {
		request.MembersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Members, tea.String("Members"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MembersShrink)) {
		body["Members"] = request.MembersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteWorkspaceMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/deleteWorkspaceMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteWorkspaceMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除知识库成员
//
// @param request - DeleteWorkspaceMembersRequest
//
// @return DeleteWorkspaceMembersResponse
func (client *Client) DeleteWorkspaceMembers(request *DeleteWorkspaceMembersRequest) (_result *DeleteWorkspaceMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &DeleteWorkspaceMembersHeaders{}
	_result = &DeleteWorkspaceMembersResponse{}
	_body, _err := client.DeleteWorkspaceMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量执行宜搭审批任务
//
// @param request - ExecuteBatchTaskRequest
//
// @param tmpHeader - ExecuteBatchTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecuteBatchTaskResponse
func (client *Client) ExecuteBatchTaskWithOptions(request *ExecuteBatchTaskRequest, tmpHeader *ExecuteBatchTaskHeaders, runtime *util.RuntimeOptions) (_result *ExecuteBatchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ExecuteBatchTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.OutResult)) {
		body["OutResult"] = request.OutResult
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.TaskInformationList)) {
		body["TaskInformationList"] = request.TaskInformationList
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecuteBatchTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/executeBatchTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecuteBatchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量执行宜搭审批任务
//
// @param request - ExecuteBatchTaskRequest
//
// @return ExecuteBatchTaskResponse
func (client *Client) ExecuteBatchTask(request *ExecuteBatchTaskRequest) (_result *ExecuteBatchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ExecuteBatchTaskHeaders{}
	_result = &ExecuteBatchTaskResponse{}
	_body, _err := client.ExecuteBatchTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 执行宜搭的审批任务
//
// @param request - ExecutePlatformTaskRequest
//
// @param tmpHeader - ExecutePlatformTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecutePlatformTaskResponse
func (client *Client) ExecutePlatformTaskWithOptions(request *ExecutePlatformTaskRequest, tmpHeader *ExecutePlatformTaskHeaders, runtime *util.RuntimeOptions) (_result *ExecutePlatformTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ExecutePlatformTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormDataJson)) {
		body["FormDataJson"] = request.FormDataJson
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.NoExecuteExpressions)) {
		body["NoExecuteExpressions"] = request.NoExecuteExpressions
	}

	if !tea.BoolValue(util.IsUnset(request.OutResult)) {
		body["OutResult"] = request.OutResult
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecutePlatformTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/executePlatformTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecutePlatformTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 执行宜搭的审批任务
//
// @param request - ExecutePlatformTaskRequest
//
// @return ExecutePlatformTaskResponse
func (client *Client) ExecutePlatformTask(request *ExecutePlatformTaskRequest) (_result *ExecutePlatformTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ExecutePlatformTaskHeaders{}
	_result = &ExecutePlatformTaskResponse{}
	_body, _err := client.ExecutePlatformTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 同意或拒绝宜搭审批任务(执行审批任务)
//
// @param request - ExecuteTaskRequest
//
// @param tmpHeader - ExecuteTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExecuteTaskResponse
func (client *Client) ExecuteTaskWithOptions(request *ExecuteTaskRequest, tmpHeader *ExecuteTaskHeaders, runtime *util.RuntimeOptions) (_result *ExecuteTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ExecuteTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.DigitalSignUrl)) {
		body["DigitalSignUrl"] = request.DigitalSignUrl
	}

	if !tea.BoolValue(util.IsUnset(request.FormDataJson)) {
		body["FormDataJson"] = request.FormDataJson
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.NoExecuteExpressions)) {
		body["NoExecuteExpressions"] = request.NoExecuteExpressions
	}

	if !tea.BoolValue(util.IsUnset(request.OutResult)) {
		body["OutResult"] = request.OutResult
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExecuteTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/executeTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExecuteTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 同意或拒绝宜搭审批任务(执行审批任务)
//
// @param request - ExecuteTaskRequest
//
// @return ExecuteTaskResponse
func (client *Client) ExecuteTask(request *ExecuteTaskRequest) (_result *ExecuteTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ExecuteTaskHeaders{}
	_result = &ExecuteTaskResponse{}
	_body, _err := client.ExecuteTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 群扩容
//
// @param tmpReq - ExpandGroupCapacityRequest
//
// @param tmpHeader - ExpandGroupCapacityHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ExpandGroupCapacityResponse
func (client *Client) ExpandGroupCapacityWithOptions(tmpReq *ExpandGroupCapacityRequest, tmpHeader *ExpandGroupCapacityHeaders, runtime *util.RuntimeOptions) (_result *ExpandGroupCapacityResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ExpandGroupCapacityShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ExpandGroupCapacityShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OpenConversationId)) {
		body["OpenConversationId"] = request.OpenConversationId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ExpandGroupCapacity"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/im/expandGroupCapacity"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ExpandGroupCapacityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 群扩容
//
// @param request - ExpandGroupCapacityRequest
//
// @return ExpandGroupCapacityResponse
func (client *Client) ExpandGroupCapacity(request *ExpandGroupCapacityRequest) (_result *ExpandGroupCapacityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ExpandGroupCapacityHeaders{}
	_result = &ExpandGroupCapacityResponse{}
	_body, _err := client.ExpandGroupCapacityWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流程设计的节点信息
//
// @param request - GetActivityListRequest
//
// @param tmpHeader - GetActivityListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetActivityListResponse
func (client *Client) GetActivityListWithOptions(request *GetActivityListRequest, tmpHeader *GetActivityListHeaders, runtime *util.RuntimeOptions) (_result *GetActivityListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetActivityListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCode)) {
		body["ProcessCode"] = request.ProcessCode
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetActivityList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getActivityList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetActivityListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流程设计的节点信息
//
// @param request - GetActivityListRequest
//
// @return GetActivityListResponse
func (client *Client) GetActivityList(request *GetActivityListRequest) (_result *GetActivityListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetActivityListHeaders{}
	_result = &GetActivityListResponse{}
	_body, _err := client.GetActivityListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取所有工作表
//
// @param tmpReq - GetAllSheetsRequest
//
// @param tmpHeader - GetAllSheetsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAllSheetsResponse
func (client *Client) GetAllSheetsWithOptions(tmpReq *GetAllSheetsRequest, tmpHeader *GetAllSheetsHeaders, runtime *util.RuntimeOptions) (_result *GetAllSheetsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetAllSheetsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetAllSheetsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAllSheets"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/getAllSheets"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAllSheetsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取所有工作表
//
// @param request - GetAllSheetsRequest
//
// @return GetAllSheetsResponse
func (client *Client) GetAllSheets(request *GetAllSheetsRequest) (_result *GetAllSheetsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetAllSheetsHeaders{}
	_result = &GetAllSheetsResponse{}
	_body, _err := client.GetAllSheetsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取群存储空间信息
//
// @param tmpReq - GetConversaionSpaceRequest
//
// @param tmpHeader - GetConversaionSpaceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetConversaionSpaceResponse
func (client *Client) GetConversaionSpaceWithOptions(tmpReq *GetConversaionSpaceRequest, tmpHeader *GetConversaionSpaceHeaders, runtime *util.RuntimeOptions) (_result *GetConversaionSpaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetConversaionSpaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetConversaionSpaceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OpenConversationId)) {
		body["OpenConversationId"] = request.OpenConversationId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetConversaionSpace"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/getConversaionSpace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetConversaionSpaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取群存储空间信息
//
// @param request - GetConversaionSpaceRequest
//
// @return GetConversaionSpaceResponse
func (client *Client) GetConversaionSpace(request *GetConversaionSpaceRequest) (_result *GetConversaionSpaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetConversaionSpaceHeaders{}
	_result = &GetConversaionSpaceResponse{}
	_body, _err := client.GetConversaionSpaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取组织内已完成的审批任务
//
// @param request - GetCorpAccomplishmentTasksRequest
//
// @param tmpHeader - GetCorpAccomplishmentTasksHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCorpAccomplishmentTasksResponse
func (client *Client) GetCorpAccomplishmentTasksWithOptions(request *GetCorpAccomplishmentTasksRequest, tmpHeader *GetCorpAccomplishmentTasksHeaders, runtime *util.RuntimeOptions) (_result *GetCorpAccomplishmentTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetCorpAccomplishmentTasksShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppTypes)) {
		body["AppTypes"] = request.AppTypes
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCodes)) {
		body["ProcessCodes"] = request.ProcessCodes
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCorpAccomplishmentTasks"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getCorpAccomplishmentTasks"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCorpAccomplishmentTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取组织内已完成的审批任务
//
// @param request - GetCorpAccomplishmentTasksRequest
//
// @return GetCorpAccomplishmentTasksResponse
func (client *Client) GetCorpAccomplishmentTasks(request *GetCorpAccomplishmentTasksRequest) (_result *GetCorpAccomplishmentTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetCorpAccomplishmentTasksHeaders{}
	_result = &GetCorpAccomplishmentTasksResponse{}
	_body, _err := client.GetCorpAccomplishmentTasksWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取任务列表（组织维度）
//
// @param request - GetCorpTasksRequest
//
// @param tmpHeader - GetCorpTasksHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCorpTasksResponse
func (client *Client) GetCorpTasksWithOptions(request *GetCorpTasksRequest, tmpHeader *GetCorpTasksHeaders, runtime *util.RuntimeOptions) (_result *GetCorpTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetCorpTasksShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppTypes)) {
		body["AppTypes"] = request.AppTypes
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCodes)) {
		body["ProcessCodes"] = request.ProcessCodes
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCorpTasks"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getCorpTasks"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCorpTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取任务列表（组织维度）
//
// @param request - GetCorpTasksRequest
//
// @return GetCorpTasksResponse
func (client *Client) GetCorpTasks(request *GetCorpTasksRequest) (_result *GetCorpTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetCorpTasksHeaders{}
	_result = &GetCorpTasksResponse{}
	_body, _err := client.GetCorpTasksWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 委托权限获取文档内容
//
// @param tmpReq - GetDocContentRequest
//
// @param tmpHeader - GetDocContentHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDocContentResponse
func (client *Client) GetDocContentWithOptions(tmpReq *GetDocContentRequest, tmpHeader *GetDocContentHeaders, runtime *util.RuntimeOptions) (_result *GetDocContentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetDocContentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetDocContentShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DentryUuid)) {
		body["DentryUuid"] = request.DentryUuid
	}

	if !tea.BoolValue(util.IsUnset(request.TargetFormat)) {
		body["TargetFormat"] = request.TargetFormat
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserToken)) {
		body["userToken"] = request.UserToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDocContent"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getDocContent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDocContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 委托权限获取文档内容
//
// @param request - GetDocContentRequest
//
// @return GetDocContentResponse
func (client *Client) GetDocContent(request *GetDocContentRequest) (_result *GetDocContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetDocContentHeaders{}
	_result = &GetDocContentResponse{}
	_body, _err := client.GetDocContentWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 委托权限获取文档内容taskId
//
// @param tmpReq - GetDocContentTakIdRequest
//
// @param tmpHeader - GetDocContentTakIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDocContentTakIdResponse
func (client *Client) GetDocContentTakIdWithOptions(tmpReq *GetDocContentTakIdRequest, tmpHeader *GetDocContentTakIdHeaders, runtime *util.RuntimeOptions) (_result *GetDocContentTakIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetDocContentTakIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetDocContentTakIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DentryUuid)) {
		body["DentryUuid"] = request.DentryUuid
	}

	if !tea.BoolValue(util.IsUnset(request.GenerateCp)) {
		body["GenerateCp"] = request.GenerateCp
	}

	if !tea.BoolValue(util.IsUnset(request.TargetFormat)) {
		body["TargetFormat"] = request.TargetFormat
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDocContentTakId"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getDocContentTakId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDocContentTakIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 委托权限获取文档内容taskId
//
// @param request - GetDocContentTakIdRequest
//
// @return GetDocContentTakIdResponse
func (client *Client) GetDocContentTakId(request *GetDocContentTakIdRequest) (_result *GetDocContentTakIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetDocContentTakIdHeaders{}
	_result = &GetDocContentTakIdResponse{}
	_body, _err := client.GetDocContentTakIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个日程详情
//
// @param request - GetEventRequest
//
// @param tmpHeader - GetEventHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEventResponse
func (client *Client) GetEventWithOptions(request *GetEventRequest, tmpHeader *GetEventHeaders, runtime *util.RuntimeOptions) (_result *GetEventResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetEventShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxAttendees)) {
		query["MaxAttendees"] = request.MaxAttendees
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		body["EventId"] = request.EventId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Query:   openapiutil.Query(query),
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEvent"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/getEvent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个日程详情
//
// @param request - GetEventRequest
//
// @return GetEventResponse
func (client *Client) GetEvent(request *GetEventRequest) (_result *GetEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetEventHeaders{}
	_result = &GetEventResponse{}
	_body, _err := client.GetEventWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取表单内的组件信息
//
// @param request - GetFieldDefByUuidRequest
//
// @param tmpHeader - GetFieldDefByUuidHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFieldDefByUuidResponse
func (client *Client) GetFieldDefByUuidWithOptions(request *GetFieldDefByUuidRequest, tmpHeader *GetFieldDefByUuidHeaders, runtime *util.RuntimeOptions) (_result *GetFieldDefByUuidResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetFieldDefByUuidShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFieldDefByUuid"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getFieldDefByUuid"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFieldDefByUuidResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取表单内的组件信息
//
// @param request - GetFieldDefByUuidRequest
//
// @return GetFieldDefByUuidResponse
func (client *Client) GetFieldDefByUuid(request *GetFieldDefByUuidRequest) (_result *GetFieldDefByUuidResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetFieldDefByUuidHeaders{}
	_result = &GetFieldDefByUuidResponse{}
	_body, _err := client.GetFieldDefByUuidWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文件下载信息
//
// @param tmpReq - GetFileDownloadInfoRequest
//
// @param tmpHeader - GetFileDownloadInfoHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileDownloadInfoResponse
func (client *Client) GetFileDownloadInfoWithOptions(tmpReq *GetFileDownloadInfoRequest, tmpHeader *GetFileDownloadInfoHeaders, runtime *util.RuntimeOptions) (_result *GetFileDownloadInfoResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetFileDownloadInfoShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetFileDownloadInfoShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DentryId)) {
		body["DentryId"] = request.DentryId
	}

	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceId)) {
		body["SpaceId"] = request.SpaceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileDownloadInfo"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/getFileDownloadInfo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileDownloadInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文件下载信息
//
// @param request - GetFileDownloadInfoRequest
//
// @return GetFileDownloadInfoResponse
func (client *Client) GetFileDownloadInfo(request *GetFileDownloadInfoRequest) (_result *GetFileDownloadInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetFileDownloadInfoHeaders{}
	_result = &GetFileDownloadInfoResponse{}
	_body, _err := client.GetFileDownloadInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文件上传信息
//
// @param tmpReq - GetFileUploadInfoRequest
//
// @param tmpHeader - GetFileUploadInfoHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFileUploadInfoResponse
func (client *Client) GetFileUploadInfoWithOptions(tmpReq *GetFileUploadInfoRequest, tmpHeader *GetFileUploadInfoHeaders, runtime *util.RuntimeOptions) (_result *GetFileUploadInfoResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetFileUploadInfoShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetFileUploadInfoShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ParentDentryUuid)) {
		body["ParentDentryUuid"] = request.ParentDentryUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Protocol)) {
		body["Protocol"] = request.Protocol
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFileUploadInfo"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/getFileUploadInfo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFileUploadInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文件上传信息
//
// @param request - GetFileUploadInfoRequest
//
// @return GetFileUploadInfoResponse
func (client *Client) GetFileUploadInfo(request *GetFileUploadInfoRequest) (_result *GetFileUploadInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetFileUploadInfoHeaders{}
	_result = &GetFileUploadInfoResponse{}
	_body, _err := client.GetFileUploadInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取表单组件定义列表
//
// @param request - GetFormComponentDefinitionListRequest
//
// @param tmpHeader - GetFormComponentDefinitionListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFormComponentDefinitionListResponse
func (client *Client) GetFormComponentDefinitionListWithOptions(request *GetFormComponentDefinitionListRequest, tmpHeader *GetFormComponentDefinitionListHeaders, runtime *util.RuntimeOptions) (_result *GetFormComponentDefinitionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetFormComponentDefinitionListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFormComponentDefinitionList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getFormComponentDefinitionList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFormComponentDefinitionListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取表单组件定义列表
//
// @param request - GetFormComponentDefinitionListRequest
//
// @return GetFormComponentDefinitionListResponse
func (client *Client) GetFormComponentDefinitionList(request *GetFormComponentDefinitionListRequest) (_result *GetFormComponentDefinitionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetFormComponentDefinitionListHeaders{}
	_result = &GetFormComponentDefinitionListResponse{}
	_body, _err := client.GetFormComponentDefinitionListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询表单数据
//
// @param request - GetFormDataByIDRequest
//
// @param tmpHeader - GetFormDataByIDHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFormDataByIDResponse
func (client *Client) GetFormDataByIDWithOptions(request *GetFormDataByIDRequest, tmpHeader *GetFormDataByIDHeaders, runtime *util.RuntimeOptions) (_result *GetFormDataByIDResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetFormDataByIDShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFormDataByID"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getFormDataByID"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFormDataByIDResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询表单数据
//
// @param request - GetFormDataByIDRequest
//
// @return GetFormDataByIDResponse
func (client *Client) GetFormDataByID(request *GetFormDataByIDRequest) (_result *GetFormDataByIDResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetFormDataByIDHeaders{}
	_result = &GetFormDataByIDResponse{}
	_body, _err := client.GetFormDataByIDWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取指定应用下的表单列表
//
// @param request - GetFormListInAppRequest
//
// @param tmpHeader - GetFormListInAppHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetFormListInAppResponse
func (client *Client) GetFormListInAppWithOptions(request *GetFormListInAppRequest, tmpHeader *GetFormListInAppHeaders, runtime *util.RuntimeOptions) (_result *GetFormListInAppResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetFormListInAppShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormTypes)) {
		body["FormTypes"] = request.FormTypes
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFormListInApp"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getFormListInApp"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFormListInAppResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取指定应用下的表单列表
//
// @param request - GetFormListInAppRequest
//
// @return GetFormListInAppResponse
func (client *Client) GetFormListInApp(request *GetFormListInAppRequest) (_result *GetFormListInAppResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetFormListInAppHeaders{}
	_result = &GetFormListInAppResponse{}
	_body, _err := client.GetFormListInAppWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询企业内部群成员
//
// @param request - GetInnerGroupMembersRequest
//
// @param tmpHeader - GetInnerGroupMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInnerGroupMembersResponse
func (client *Client) GetInnerGroupMembersWithOptions(request *GetInnerGroupMembersRequest, tmpHeader *GetInnerGroupMembersHeaders, runtime *util.RuntimeOptions) (_result *GetInnerGroupMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetInnerGroupMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OpenConversationId)) {
		body["OpenConversationId"] = request.OpenConversationId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInnerGroupMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/getInnerGroupMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInnerGroupMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询企业内部群成员
//
// @param request - GetInnerGroupMembersRequest
//
// @return GetInnerGroupMembersResponse
func (client *Client) GetInnerGroupMembers(request *GetInnerGroupMembersRequest) (_result *GetInnerGroupMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetInnerGroupMembersHeaders{}
	_result = &GetInnerGroupMembersResponse{}
	_body, _err := client.GetInnerGroupMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据流程实例ID获取流程实例
//
// @param request - GetInstanceByIdRequest
//
// @param tmpHeader - GetInstanceByIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceByIdResponse
func (client *Client) GetInstanceByIdWithOptions(request *GetInstanceByIdRequest, tmpHeader *GetInstanceByIdHeaders, runtime *util.RuntimeOptions) (_result *GetInstanceByIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetInstanceByIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceById"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getInstanceById"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceByIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据流程实例ID获取流程实例
//
// @param request - GetInstanceByIdRequest
//
// @return GetInstanceByIdResponse
func (client *Client) GetInstanceById(request *GetInstanceByIdRequest) (_result *GetInstanceByIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetInstanceByIdHeaders{}
	_result = &GetInstanceByIdResponse{}
	_body, _err := client.GetInstanceByIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取实例ID列表
//
// @param request - GetInstanceIdListRequest
//
// @param tmpHeader - GetInstanceIdListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstanceIdListResponse
func (client *Client) GetInstanceIdListWithOptions(request *GetInstanceIdListRequest, tmpHeader *GetInstanceIdListHeaders, runtime *util.RuntimeOptions) (_result *GetInstanceIdListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetInstanceIdListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.ApprovedResult)) {
		body["ApprovedResult"] = request.ApprovedResult
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceStatus)) {
		body["InstanceStatus"] = request.InstanceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedFromTimeGMT)) {
		body["ModifiedFromTimeGMT"] = request.ModifiedFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedToTimeGMT)) {
		body["ModifiedToTimeGMT"] = request.ModifiedToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.OriginatorId)) {
		body["OriginatorId"] = request.OriginatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchFieldJson)) {
		body["SearchFieldJson"] = request.SearchFieldJson
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceIdList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getInstanceIdList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceIdListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取实例ID列表
//
// @param request - GetInstanceIdListRequest
//
// @return GetInstanceIdListResponse
func (client *Client) GetInstanceIdList(request *GetInstanceIdListRequest) (_result *GetInstanceIdListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetInstanceIdListHeaders{}
	_result = &GetInstanceIdListResponse{}
	_body, _err := client.GetInstanceIdListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流程实例
//
// @param request - GetInstancesRequest
//
// @param tmpHeader - GetInstancesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstancesResponse
func (client *Client) GetInstancesWithOptions(request *GetInstancesRequest, tmpHeader *GetInstancesHeaders, runtime *util.RuntimeOptions) (_result *GetInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetInstancesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.ApprovedResult)) {
		body["ApprovedResult"] = request.ApprovedResult
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceStatus)) {
		body["InstanceStatus"] = request.InstanceStatus
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedFromTimeGMT)) {
		body["ModifiedFromTimeGMT"] = request.ModifiedFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedToTimeGMT)) {
		body["ModifiedToTimeGMT"] = request.ModifiedToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.OrderConfigJson)) {
		body["OrderConfigJson"] = request.OrderConfigJson
	}

	if !tea.BoolValue(util.IsUnset(request.OriginatorId)) {
		body["OriginatorId"] = request.OriginatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchFieldJson)) {
		body["SearchFieldJson"] = request.SearchFieldJson
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstances"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getInstances"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstancesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流程实例
//
// @param request - GetInstancesRequest
//
// @return GetInstancesResponse
func (client *Client) GetInstances(request *GetInstancesRequest) (_result *GetInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetInstancesHeaders{}
	_result = &GetInstancesResponse{}
	_body, _err := client.GetInstancesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
//
// @param request - GetInstancesByIdListRequest
//
// @param tmpHeader - GetInstancesByIdListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetInstancesByIdListResponse
func (client *Client) GetInstancesByIdListWithOptions(request *GetInstancesByIdListRequest, tmpHeader *GetInstancesByIdListHeaders, runtime *util.RuntimeOptions) (_result *GetInstancesByIdListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetInstancesByIdListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceIds)) {
		body["ProcessInstanceIds"] = request.ProcessInstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstancesByIdList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getInstancesByIdList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstancesByIdListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据实例 ID 列表批量获取流程实例详情(批量获取流程实例列表)
//
// @param request - GetInstancesByIdListRequest
//
// @return GetInstancesByIdListResponse
func (client *Client) GetInstancesByIdList(request *GetInstancesByIdListRequest) (_result *GetInstancesByIdListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetInstancesByIdListHeaders{}
	_result = &GetInstancesByIdListResponse{}
	_body, _err := client.GetInstancesByIdListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取直播的可下载回放地址
//
// @param tmpReq - GetLiveReplayUrlRequest
//
// @param tmpHeader - GetLiveReplayUrlHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveReplayUrlResponse
func (client *Client) GetLiveReplayUrlWithOptions(tmpReq *GetLiveReplayUrlRequest, tmpHeader *GetLiveReplayUrlHeaders, runtime *util.RuntimeOptions) (_result *GetLiveReplayUrlResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetLiveReplayUrlShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetLiveReplayUrlShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LiveId)) {
		body["LiveId"] = request.LiveId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveReplayUrl"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/getLiveReplayUrl"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveReplayUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取直播的可下载回放地址
//
// @param request - GetLiveReplayUrlRequest
//
// @return GetLiveReplayUrlResponse
func (client *Client) GetLiveReplayUrl(request *GetLiveReplayUrlRequest) (_result *GetLiveReplayUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetLiveReplayUrlHeaders{}
	_result = &GetLiveReplayUrlResponse{}
	_body, _err := client.GetLiveReplayUrlWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取组织内某人提交的任务
//
// @param request - GetMeCorpSubmissionRequest
//
// @param tmpHeader - GetMeCorpSubmissionHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMeCorpSubmissionResponse
func (client *Client) GetMeCorpSubmissionWithOptions(request *GetMeCorpSubmissionRequest, tmpHeader *GetMeCorpSubmissionHeaders, runtime *util.RuntimeOptions) (_result *GetMeCorpSubmissionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetMeCorpSubmissionShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppTypes)) {
		body["AppTypes"] = request.AppTypes
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCodes)) {
		body["ProcessCodes"] = request.ProcessCodes
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMeCorpSubmission"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getMeCorpSubmission"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMeCorpSubmissionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取组织内某人提交的任务
//
// @param request - GetMeCorpSubmissionRequest
//
// @return GetMeCorpSubmissionResponse
func (client *Client) GetMeCorpSubmission(request *GetMeCorpSubmissionRequest) (_result *GetMeCorpSubmissionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetMeCorpSubmissionHeaders{}
	_result = &GetMeCorpSubmissionResponse{}
	_body, _err := client.GetMeCorpSubmissionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取会议室忙闲信息
//
// @param tmpReq - GetMeetingRoomsScheduleRequest
//
// @param tmpHeader - GetMeetingRoomsScheduleHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMeetingRoomsScheduleResponse
func (client *Client) GetMeetingRoomsScheduleWithOptions(tmpReq *GetMeetingRoomsScheduleRequest, tmpHeader *GetMeetingRoomsScheduleHeaders, runtime *util.RuntimeOptions) (_result *GetMeetingRoomsScheduleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetMeetingRoomsScheduleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetMeetingRoomsScheduleShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RoomIds)) {
		request.RoomIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoomIds, tea.String("RoomIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RoomIdsShrink)) {
		body["RoomIds"] = request.RoomIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMeetingRoomsSchedule"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/getMeetingRoomsSchedule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMeetingRoomsScheduleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取会议室忙闲信息
//
// @param request - GetMeetingRoomsScheduleRequest
//
// @return GetMeetingRoomsScheduleResponse
func (client *Client) GetMeetingRoomsSchedule(request *GetMeetingRoomsScheduleRequest) (_result *GetMeetingRoomsScheduleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetMeetingRoomsScheduleHeaders{}
	_result = &GetMeetingRoomsScheduleResponse{}
	_body, _err := client.GetMeetingRoomsScheduleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取我的文档知识库信息
//
// @param tmpReq - GetMineWorkspaceRequest
//
// @param tmpHeader - GetMineWorkspaceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMineWorkspaceResponse
func (client *Client) GetMineWorkspaceWithOptions(tmpReq *GetMineWorkspaceRequest, tmpHeader *GetMineWorkspaceHeaders, runtime *util.RuntimeOptions) (_result *GetMineWorkspaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetMineWorkspaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetMineWorkspaceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Request)) {
		request.RequestShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Request, tea.String("Request"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RequestShrink)) {
		body["Request"] = request.RequestShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMineWorkspace"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getMineWorkspace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMineWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取我的文档知识库信息
//
// @param request - GetMineWorkspaceRequest
//
// @return GetMineWorkspaceResponse
func (client *Client) GetMineWorkspace(request *GetMineWorkspaceRequest) (_result *GetMineWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetMineWorkspaceHeaders{}
	_result = &GetMineWorkspaceResponse{}
	_body, _err := client.GetMineWorkspaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文件分片上传信息
//
// @param tmpReq - GetMultipartFileUploadInfosRequest
//
// @param tmpHeader - GetMultipartFileUploadInfosHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMultipartFileUploadInfosResponse
func (client *Client) GetMultipartFileUploadInfosWithOptions(tmpReq *GetMultipartFileUploadInfosRequest, tmpHeader *GetMultipartFileUploadInfosHeaders, runtime *util.RuntimeOptions) (_result *GetMultipartFileUploadInfosResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetMultipartFileUploadInfosShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetMultipartFileUploadInfosShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.PartNumbers)) {
		request.PartNumbersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PartNumbers, tea.String("PartNumbers"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.PartNumbersShrink)) {
		body["PartNumbers"] = request.PartNumbersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UploadKey)) {
		body["UploadKey"] = request.UploadKey
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMultipartFileUploadInfos"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/GetMultipartFileUploadInfos"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMultipartFileUploadInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文件分片上传信息
//
// @param request - GetMultipartFileUploadInfosRequest
//
// @return GetMultipartFileUploadInfosResponse
func (client *Client) GetMultipartFileUploadInfos(request *GetMultipartFileUploadInfosRequest) (_result *GetMultipartFileUploadInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetMultipartFileUploadInfosHeaders{}
	_result = &GetMultipartFileUploadInfosResponse{}
	_body, _err := client.GetMultipartFileUploadInfosWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询最近活跃的企业内部群列表
//
// @param tmpReq - GetNewestInnerGroupsRequest
//
// @param tmpHeader - GetNewestInnerGroupsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNewestInnerGroupsResponse
func (client *Client) GetNewestInnerGroupsWithOptions(tmpReq *GetNewestInnerGroupsRequest, tmpHeader *GetNewestInnerGroupsHeaders, runtime *util.RuntimeOptions) (_result *GetNewestInnerGroupsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetNewestInnerGroupsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetNewestInnerGroupsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Request)) {
		request.RequestShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Request, tea.String("Request"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RequestShrink)) {
		body["Request"] = request.RequestShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNewestInnerGroups"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/getNewestInnerGroups"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNewestInnerGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询最近活跃的企业内部群列表
//
// @param request - GetNewestInnerGroupsRequest
//
// @return GetNewestInnerGroupsResponse
func (client *Client) GetNewestInnerGroups(request *GetNewestInnerGroupsRequest) (_result *GetNewestInnerGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetNewestInnerGroupsHeaders{}
	_result = &GetNewestInnerGroupsResponse{}
	_body, _err := client.GetNewestInnerGroupsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取节点
//
// @param tmpReq - GetNodeRequest
//
// @param tmpHeader - GetNodeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNodeResponse
func (client *Client) GetNodeWithOptions(tmpReq *GetNodeRequest, tmpHeader *GetNodeHeaders, runtime *util.RuntimeOptions) (_result *GetNodeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetNodeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetNodeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WithPermissionRole)) {
		body["WithPermissionRole"] = request.WithPermissionRole
	}

	if !tea.BoolValue(util.IsUnset(request.WithStatisticalInfo)) {
		body["WithStatisticalInfo"] = request.WithStatisticalInfo
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNode"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getNode"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取节点
//
// @param request - GetNodeRequest
//
// @return GetNodeResponse
func (client *Client) GetNode(request *GetNodeRequest) (_result *GetNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetNodeHeaders{}
	_result = &GetNodeResponse{}
	_body, _err := client.GetNodeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过链接获取节点
//
// @param tmpReq - GetNodeByUrlRequest
//
// @param tmpHeader - GetNodeByUrlHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNodeByUrlResponse
func (client *Client) GetNodeByUrlWithOptions(tmpReq *GetNodeByUrlRequest, tmpHeader *GetNodeByUrlHeaders, runtime *util.RuntimeOptions) (_result *GetNodeByUrlResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetNodeByUrlShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetNodeByUrlShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["Url"] = request.Url
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNodeByUrl"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getNodeByUrl"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodeByUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过链接获取节点
//
// @param request - GetNodeByUrlRequest
//
// @return GetNodeByUrlResponse
func (client *Client) GetNodeByUrl(request *GetNodeByUrlRequest) (_result *GetNodeByUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetNodeByUrlHeaders{}
	_result = &GetNodeByUrlResponse{}
	_body, _err := client.GetNodeByUrlWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量获取节点
//
// @param tmpReq - GetNodesRequest
//
// @param tmpHeader - GetNodesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNodesResponse
func (client *Client) GetNodesWithOptions(tmpReq *GetNodesRequest, tmpHeader *GetNodesHeaders, runtime *util.RuntimeOptions) (_result *GetNodesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetNodesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetNodesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.NodeIds)) {
		request.NodeIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.NodeIds, tea.String("NodeIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeIdsShrink)) {
		body["NodeIds"] = request.NodeIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNodes"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getNodes"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量获取节点
//
// @param request - GetNodesRequest
//
// @return GetNodesResponse
func (client *Client) GetNodes(request *GetNodesRequest) (_result *GetNodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetNodesHeaders{}
	_result = &GetNodesResponse{}
	_body, _err := client.GetNodesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取发送给用户的通知
//
// @param request - GetNotifyMeRequest
//
// @param tmpHeader - GetNotifyMeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetNotifyMeResponse
func (client *Client) GetNotifyMeWithOptions(request *GetNotifyMeRequest, tmpHeader *GetNotifyMeHeaders, runtime *util.RuntimeOptions) (_result *GetNotifyMeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetNotifyMeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppTypes)) {
		body["AppTypes"] = request.AppTypes
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCreateFromTimeGMT)) {
		body["InstanceCreateFromTimeGMT"] = request.InstanceCreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceCreateToTimeGMT)) {
		body["InstanceCreateToTimeGMT"] = request.InstanceCreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCodes)) {
		body["ProcessCodes"] = request.ProcessCodes
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetNotifyMe"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getNotifyMe"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetNotifyMeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取发送给用户的通知
//
// @param request - GetNotifyMeRequest
//
// @return GetNotifyMeResponse
func (client *Client) GetNotifyMe(request *GetNotifyMeRequest) (_result *GetNotifyMeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetNotifyMeHeaders{}
	_result = &GetNotifyMeResponse{}
	_body, _err := client.GetNotifyMeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取宜搭附件临时免登地址
//
// @param request - GetOpenUrlRequest
//
// @param tmpHeader - GetOpenUrlHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOpenUrlResponse
func (client *Client) GetOpenUrlWithOptions(request *GetOpenUrlRequest, tmpHeader *GetOpenUrlHeaders, runtime *util.RuntimeOptions) (_result *GetOpenUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetOpenUrlShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FileUrl)) {
		body["FileUrl"] = request.FileUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		body["Timeout"] = request.Timeout
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOpenUrl"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getOpenUrl"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOpenUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取宜搭附件临时免登地址
//
// @param request - GetOpenUrlRequest
//
// @return GetOpenUrlResponse
func (client *Client) GetOpenUrl(request *GetOpenUrlRequest) (_result *GetOpenUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetOpenUrlHeaders{}
	_result = &GetOpenUrlResponse{}
	_body, _err := client.GetOpenUrlWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取审批记录
//
// @param request - GetOperationRecordsRequest
//
// @param tmpHeader - GetOperationRecordsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOperationRecordsResponse
func (client *Client) GetOperationRecordsWithOptions(request *GetOperationRecordsRequest, tmpHeader *GetOperationRecordsHeaders, runtime *util.RuntimeOptions) (_result *GetOperationRecordsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetOperationRecordsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOperationRecords"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getOperationRecords"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOperationRecordsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取审批记录
//
// @param request - GetOperationRecordsRequest
//
// @return GetOperationRecordsResponse
func (client *Client) GetOperationRecords(request *GetOperationRecordsRequest) (_result *GetOperationRecordsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetOperationRecordsHeaders{}
	_result = &GetOperationRecordsResponse{}
	_body, _err := client.GetOperationRecordsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取流程定义
//
// @param request - GetProcessDefinitionRequest
//
// @param tmpHeader - GetProcessDefinitionHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetProcessDefinitionResponse
func (client *Client) GetProcessDefinitionWithOptions(request *GetProcessDefinitionRequest, tmpHeader *GetProcessDefinitionHeaders, runtime *util.RuntimeOptions) (_result *GetProcessDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetProcessDefinitionShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.NameSpace)) {
		body["NameSpace"] = request.NameSpace
	}

	if !tea.BoolValue(util.IsUnset(request.OrderNumber)) {
		body["OrderNumber"] = request.OrderNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.SystemType)) {
		body["SystemType"] = request.SystemType
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetProcessDefinition"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getProcessDefinition"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetProcessDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取流程定义
//
// @param request - GetProcessDefinitionRequest
//
// @return GetProcessDefinitionResponse
func (client *Client) GetProcessDefinition(request *GetProcessDefinitionRequest) (_result *GetProcessDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetProcessDefinitionHeaders{}
	_result = &GetProcessDefinitionResponse{}
	_body, _err := client.GetProcessDefinitionWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取单元格区域
//
// @param tmpReq - GetRangeRequest
//
// @param tmpHeader - GetRangeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRangeResponse
func (client *Client) GetRangeWithOptions(tmpReq *GetRangeRequest, tmpHeader *GetRangeHeaders, runtime *util.RuntimeOptions) (_result *GetRangeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetRangeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetRangeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RangeAddress)) {
		body["RangeAddress"] = request.RangeAddress
	}

	if !tea.BoolValue(util.IsUnset(request.Select)) {
		body["Select"] = request.Select
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRange"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/getRange"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRangeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取单元格区域
//
// @param request - GetRangeRequest
//
// @return GetRangeResponse
func (client *Client) GetRange(request *GetRangeRequest) (_result *GetRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetRangeHeaders{}
	_result = &GetRangeResponse{}
	_body, _err := client.GetRangeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询用户有权限的知识库列表(旧)
//
// @param tmpReq - GetRelatedWorkspacesRequest
//
// @param tmpHeader - GetRelatedWorkspacesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRelatedWorkspacesResponse
func (client *Client) GetRelatedWorkspacesWithOptions(tmpReq *GetRelatedWorkspacesRequest, tmpHeader *GetRelatedWorkspacesHeaders, runtime *util.RuntimeOptions) (_result *GetRelatedWorkspacesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetRelatedWorkspacesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetRelatedWorkspacesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IncludeRecent)) {
		body["IncludeRecent"] = request.IncludeRecent
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRelatedWorkspaces"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/getRelatedWorkspaces"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRelatedWorkspacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询用户有权限的知识库列表(旧)
//
// @param request - GetRelatedWorkspacesRequest
//
// @return GetRelatedWorkspacesResponse
func (client *Client) GetRelatedWorkspaces(request *GetRelatedWorkspacesRequest) (_result *GetRelatedWorkspacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetRelatedWorkspacesHeaders{}
	_result = &GetRelatedWorkspacesResponse{}
	_body, _err := client.GetRelatedWorkspacesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取模板详情
//
// @param tmpReq - GetReportTemplateByNameRequest
//
// @param tmpHeader - GetReportTemplateByNameHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetReportTemplateByNameResponse
func (client *Client) GetReportTemplateByNameWithOptions(tmpReq *GetReportTemplateByNameRequest, tmpHeader *GetReportTemplateByNameHeaders, runtime *util.RuntimeOptions) (_result *GetReportTemplateByNameResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetReportTemplateByNameShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetReportTemplateByNameShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetReportTemplateByName"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/getReportTemplateByName"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetReportTemplateByNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取模板详情
//
// @param request - GetReportTemplateByNameRequest
//
// @return GetReportTemplateByNameResponse
func (client *Client) GetReportTemplateByName(request *GetReportTemplateByNameRequest) (_result *GetReportTemplateByNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetReportTemplateByNameHeaders{}
	_result = &GetReportTemplateByNameResponse{}
	_body, _err := client.GetReportTemplateByNameWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取员工有多少数量的日志（一个月内）是未读状态
//
// @param tmpReq - GetReportUnReadCountRequest
//
// @param tmpHeader - GetReportUnReadCountHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetReportUnReadCountResponse
func (client *Client) GetReportUnReadCountWithOptions(tmpReq *GetReportUnReadCountRequest, tmpHeader *GetReportUnReadCountHeaders, runtime *util.RuntimeOptions) (_result *GetReportUnReadCountResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetReportUnReadCountShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetReportUnReadCountShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Request)) {
		request.RequestShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Request, tea.String("Request"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RequestShrink)) {
		body["Request"] = request.RequestShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetReportUnReadCount"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/getReportUnReadCount"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetReportUnReadCountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取员工有多少数量的日志（一个月内）是未读状态
//
// @param request - GetReportUnReadCountRequest
//
// @return GetReportUnReadCountResponse
func (client *Client) GetReportUnReadCount(request *GetReportUnReadCountRequest) (_result *GetReportUnReadCountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetReportUnReadCountHeaders{}
	_result = &GetReportUnReadCountResponse{}
	_body, _err := client.GetReportUnReadCountWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询流程运行任务（VPC）
//
// @param request - GetRunningTasksRequest
//
// @param tmpHeader - GetRunningTasksHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetRunningTasksResponse
func (client *Client) GetRunningTasksWithOptions(request *GetRunningTasksRequest, tmpHeader *GetRunningTasksHeaders, runtime *util.RuntimeOptions) (_result *GetRunningTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetRunningTasksShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCodes)) {
		body["ProcessCodes"] = request.ProcessCodes
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRunningTasks"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getRunningTasks"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRunningTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询流程运行任务（VPC）
//
// @param request - GetRunningTasksRequest
//
// @return GetRunningTasksResponse
func (client *Client) GetRunningTasks(request *GetRunningTasksRequest) (_result *GetRunningTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetRunningTasksHeaders{}
	_result = &GetRunningTasksResponse{}
	_body, _err := client.GetRunningTasksWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户忙闲信息
//
// @param tmpReq - GetScheduleRequest
//
// @param tmpHeader - GetScheduleHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetScheduleResponse
func (client *Client) GetScheduleWithOptions(tmpReq *GetScheduleRequest, tmpHeader *GetScheduleHeaders, runtime *util.RuntimeOptions) (_result *GetScheduleResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetScheduleShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetScheduleShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.UserIds)) {
		request.UserIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.UserIds, tea.String("UserIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserIdsShrink)) {
		body["UserIds"] = request.UserIdsShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSchedule"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/getSchedule"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetScheduleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户忙闲信息
//
// @param request - GetScheduleRequest
//
// @return GetScheduleResponse
func (client *Client) GetSchedule(request *GetScheduleRequest) (_result *GetScheduleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetScheduleHeaders{}
	_result = &GetScheduleResponse{}
	_body, _err := client.GetScheduleWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作表
//
// @param tmpReq - GetSheetRequest
//
// @param tmpHeader - GetSheetHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSheetResponse
func (client *Client) GetSheetWithOptions(tmpReq *GetSheetRequest, tmpHeader *GetSheetHeaders, runtime *util.RuntimeOptions) (_result *GetSheetResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetSheetShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetSheetShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSheet"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/getSheet"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSheetResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作表
//
// @param request - GetSheetRequest
//
// @return GetSheetResponse
func (client *Client) GetSheet(request *GetSheetRequest) (_result *GetSheetResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetSheetHeaders{}
	_result = &GetSheetResponse{}
	_body, _err := client.GetSheetWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取表格文档内容jobId
//
// @param tmpReq - GetSheetContentJobIdRequest
//
// @param tmpHeader - GetSheetContentJobIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSheetContentJobIdResponse
func (client *Client) GetSheetContentJobIdWithOptions(tmpReq *GetSheetContentJobIdRequest, tmpHeader *GetSheetContentJobIdHeaders, runtime *util.RuntimeOptions) (_result *GetSheetContentJobIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetSheetContentJobIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetSheetContentJobIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DentryUuid)) {
		body["DentryUuid"] = request.DentryUuid
	}

	if !tea.BoolValue(util.IsUnset(request.ExportType)) {
		body["ExportType"] = request.ExportType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSheetContentJobId"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getSheetContentJobId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSheetContentJobIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取表格文档内容jobId
//
// @param request - GetSheetContentJobIdRequest
//
// @return GetSheetContentJobIdResponse
func (client *Client) GetSheetContentJobId(request *GetSheetContentJobIdRequest) (_result *GetSheetContentJobIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetSheetContentJobIdHeaders{}
	_result = &GetSheetContentJobIdResponse{}
	_body, _err := client.GetSheetContentJobIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询知识库下的目录结构
//
// @param tmpReq - GetSpaceDirectoriesRequest
//
// @param tmpHeader - GetSpaceDirectoriesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSpaceDirectoriesResponse
func (client *Client) GetSpaceDirectoriesWithOptions(tmpReq *GetSpaceDirectoriesRequest, tmpHeader *GetSpaceDirectoriesHeaders, runtime *util.RuntimeOptions) (_result *GetSpaceDirectoriesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetSpaceDirectoriesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetSpaceDirectoriesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DentryId)) {
		body["DentryId"] = request.DentryId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceId)) {
		body["SpaceId"] = request.SpaceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSpaceDirectories"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getSpaceDirectories"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSpaceDirectoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询知识库下的目录结构
//
// @param request - GetSpaceDirectoriesRequest
//
// @return GetSpaceDirectoriesResponse
func (client *Client) GetSpaceDirectories(request *GetSpaceDirectoriesRequest) (_result *GetSpaceDirectoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetSpaceDirectoriesHeaders{}
	_result = &GetSpaceDirectoriesResponse{}
	_body, _err := client.GetSpaceDirectoriesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个订阅日历详情
//
// @param request - GetSubscribedCalendarRequest
//
// @param tmpHeader - GetSubscribedCalendarHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSubscribedCalendarResponse
func (client *Client) GetSubscribedCalendarWithOptions(request *GetSubscribedCalendarRequest, tmpHeader *GetSubscribedCalendarHeaders, runtime *util.RuntimeOptions) (_result *GetSubscribedCalendarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetSubscribedCalendarShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSubscribedCalendar"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/getSubscribedCalendar"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSubscribedCalendarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个订阅日历详情
//
// @param request - GetSubscribedCalendarRequest
//
// @return GetSubscribedCalendarResponse
func (client *Client) GetSubscribedCalendar(request *GetSubscribedCalendarRequest) (_result *GetSubscribedCalendarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetSubscribedCalendarHeaders{}
	_result = &GetSubscribedCalendarResponse{}
	_body, _err := client.GetSubscribedCalendarWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询抄送我的任务列表（应用维度）
//
// @param request - GetTaskCopiesRequest
//
// @param tmpHeader - GetTaskCopiesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTaskCopiesResponse
func (client *Client) GetTaskCopiesWithOptions(request *GetTaskCopiesRequest, tmpHeader *GetTaskCopiesHeaders, runtime *util.RuntimeOptions) (_result *GetTaskCopiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &GetTaskCopiesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		body["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCodes)) {
		body["ProcessCodes"] = request.ProcessCodes
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTaskCopies"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/getTaskCopies"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTaskCopiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询抄送我的任务列表（应用维度）
//
// @param request - GetTaskCopiesRequest
//
// @return GetTaskCopiesResponse
func (client *Client) GetTaskCopies(request *GetTaskCopiesRequest) (_result *GetTaskCopiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetTaskCopiesHeaders{}
	_result = &GetTaskCopiesResponse{}
	_body, _err := client.GetTaskCopiesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户可见的日志模板
//
// @param tmpReq - GetTemplateListByUserIdRequest
//
// @param tmpHeader - GetTemplateListByUserIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplateListByUserIdResponse
func (client *Client) GetTemplateListByUserIdWithOptions(tmpReq *GetTemplateListByUserIdRequest, tmpHeader *GetTemplateListByUserIdHeaders, runtime *util.RuntimeOptions) (_result *GetTemplateListByUserIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetTemplateListByUserIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetTemplateListByUserIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		body["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplateListByUserId"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/getTemplateListByUserId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateListByUserIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户可见的日志模板
//
// @param request - GetTemplateListByUserIdRequest
//
// @return GetTemplateListByUserIdResponse
func (client *Client) GetTemplateListByUserId(request *GetTemplateListByUserIdRequest) (_result *GetTemplateListByUserIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetTemplateListByUserIdHeaders{}
	_result = &GetTemplateListByUserIdResponse{}
	_body, _err := client.GetTemplateListByUserIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取专属账号信息
//
// @param tmpReq - GetUserRequest
//
// @param tmpHeader - GetUserHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserResponse
func (client *Client) GetUserWithOptions(tmpReq *GetUserRequest, tmpHeader *GetUserHeaders, runtime *util.RuntimeOptions) (_result *GetUserResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetUserShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetUserShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["language"] = request.Language
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUser"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/getUser"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取专属账号信息
//
// @param request - GetUserRequest
//
// @return GetUserResponse
func (client *Client) GetUser(request *GetUserRequest) (_result *GetUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetUserHeaders{}
	_result = &GetUserResponse{}
	_body, _err := client.GetUserWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据unionId获取用户userId
//
// @param tmpReq - GetUserIdRequest
//
// @param tmpHeader - GetUserIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserIdResponse
func (client *Client) GetUserIdWithOptions(tmpReq *GetUserIdRequest, tmpHeader *GetUserIdHeaders, runtime *util.RuntimeOptions) (_result *GetUserIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetUserIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetUserIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UnionId)) {
		body["UnionId"] = request.UnionId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserId"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/getUserId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据unionId获取用户userId
//
// @param request - GetUserIdRequest
//
// @return GetUserIdResponse
func (client *Client) GetUserId(request *GetUserIdRequest) (_result *GetUserIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetUserIdHeaders{}
	_result = &GetUserIdResponse{}
	_body, _err := client.GetUserIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据orgId和staffId获取用户userId
//
// @param tmpReq - GetUserIdByOrgIdAndStaffIdRequest
//
// @param tmpHeader - GetUserIdByOrgIdAndStaffIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserIdByOrgIdAndStaffIdResponse
func (client *Client) GetUserIdByOrgIdAndStaffIdWithOptions(tmpReq *GetUserIdByOrgIdAndStaffIdRequest, tmpHeader *GetUserIdByOrgIdAndStaffIdHeaders, runtime *util.RuntimeOptions) (_result *GetUserIdByOrgIdAndStaffIdResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetUserIdByOrgIdAndStaffIdShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetUserIdByOrgIdAndStaffIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["OrgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserIdByOrgIdAndStaffId"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/getUserIdByOrgIdAndStaffId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserIdByOrgIdAndStaffIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据orgId和staffId获取用户userId
//
// @param request - GetUserIdByOrgIdAndStaffIdRequest
//
// @return GetUserIdByOrgIdAndStaffIdResponse
func (client *Client) GetUserIdByOrgIdAndStaffId(request *GetUserIdByOrgIdAndStaffIdRequest) (_result *GetUserIdByOrgIdAndStaffIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetUserIdByOrgIdAndStaffIdHeaders{}
	_result = &GetUserIdByOrgIdAndStaffIdResponse{}
	_body, _err := client.GetUserIdByOrgIdAndStaffIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户最新的有效的专属账号迁移方案
//
// @param tmpReq - GetUserLatestPlanRequest
//
// @param tmpHeader - GetUserLatestPlanHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUserLatestPlanResponse
func (client *Client) GetUserLatestPlanWithOptions(tmpReq *GetUserLatestPlanRequest, tmpHeader *GetUserLatestPlanHeaders, runtime *util.RuntimeOptions) (_result *GetUserLatestPlanResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetUserLatestPlanShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetUserLatestPlanShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUserLatestPlan"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/indepding/getUserLatestPlan"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUserLatestPlanResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户最新的有效的专属账号迁移方案
//
// @param request - GetUserLatestPlanRequest
//
// @return GetUserLatestPlanResponse
func (client *Client) GetUserLatestPlan(request *GetUserLatestPlanRequest) (_result *GetUserLatestPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetUserLatestPlanHeaders{}
	_result = &GetUserLatestPlanResponse{}
	_body, _err := client.GetUserLatestPlanWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取知识库
//
// @param tmpReq - GetWorkspaceRequest
//
// @param tmpHeader - GetWorkspaceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkspaceResponse
func (client *Client) GetWorkspaceWithOptions(tmpReq *GetWorkspaceRequest, tmpHeader *GetWorkspaceHeaders, runtime *util.RuntimeOptions) (_result *GetWorkspaceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetWorkspaceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetWorkspaceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WithPermissionRole)) {
		body["WithPermissionRole"] = request.WithPermissionRole
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkspace"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getWorkspace"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkspaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取知识库
//
// @param request - GetWorkspaceRequest
//
// @return GetWorkspaceResponse
func (client *Client) GetWorkspace(request *GetWorkspaceRequest) (_result *GetWorkspaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetWorkspaceHeaders{}
	_result = &GetWorkspaceResponse{}
	_body, _err := client.GetWorkspaceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量获取知识库
//
// @param tmpReq - GetWorkspacesRequest
//
// @param tmpHeader - GetWorkspacesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkspacesResponse
func (client *Client) GetWorkspacesWithOptions(tmpReq *GetWorkspacesRequest, tmpHeader *GetWorkspacesHeaders, runtime *util.RuntimeOptions) (_result *GetWorkspacesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GetWorkspacesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GetWorkspacesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.WorkspaceIds)) {
		request.WorkspaceIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.WorkspaceIds, tea.String("WorkspaceIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceIdsShrink)) {
		body["WorkspaceIds"] = request.WorkspaceIdsShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkspaces"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/getWorkspaces"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkspacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量获取知识库
//
// @param request - GetWorkspacesRequest
//
// @return GetWorkspacesResponse
func (client *Client) GetWorkspaces(request *GetWorkspacesRequest) (_result *GetWorkspacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GetWorkspacesHeaders{}
	_result = &GetWorkspacesResponse{}
	_body, _err := client.GetWorkspacesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 授予勋章
//
// @param tmpReq - GrantHonorRequest
//
// @param tmpHeader - GrantHonorHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GrantHonorResponse
func (client *Client) GrantHonorWithOptions(tmpReq *GrantHonorRequest, tmpHeader *GrantHonorHeaders, runtime *util.RuntimeOptions) (_result *GrantHonorResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &GrantHonorShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &GrantHonorShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OpenConversationIds)) {
		request.OpenConversationIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OpenConversationIds, tea.String("openConversationIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ReceiverUserIds)) {
		request.ReceiverUserIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReceiverUserIds, tea.String("receiverUserIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExpirationTime)) {
		body["expirationTime"] = request.ExpirationTime
	}

	if !tea.BoolValue(util.IsUnset(request.GrantReason)) {
		body["grantReason"] = request.GrantReason
	}

	if !tea.BoolValue(util.IsUnset(request.GranterName)) {
		body["granterName"] = request.GranterName
	}

	if !tea.BoolValue(util.IsUnset(request.HonorId)) {
		body["honorId"] = request.HonorId
	}

	if !tea.BoolValue(util.IsUnset(request.NoticeAnnouncer)) {
		body["noticeAnnouncer"] = request.NoticeAnnouncer
	}

	if !tea.BoolValue(util.IsUnset(request.NoticeSingle)) {
		body["noticeSingle"] = request.NoticeSingle
	}

	if !tea.BoolValue(util.IsUnset(request.OpenConversationIdsShrink)) {
		body["openConversationIds"] = request.OpenConversationIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["orgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.ReceiverUserIdsShrink)) {
		body["receiverUserIds"] = request.ReceiverUserIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.SenderUserId)) {
		body["senderUserId"] = request.SenderUserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GrantHonor"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/honor/grantHonor"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GrantHonorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 授予勋章
//
// @param request - GrantHonorRequest
//
// @return GrantHonorResponse
func (client *Client) GrantHonor(request *GrantHonorRequest) (_result *GrantHonorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &GrantHonorHeaders{}
	_result = &GrantHonorResponse{}
	_body, _err := client.GrantHonorWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 初始化文件分片上传
//
// @param tmpReq - InitMultipartFileUploadRequest
//
// @param tmpHeader - InitMultipartFileUploadHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InitMultipartFileUploadResponse
func (client *Client) InitMultipartFileUploadWithOptions(tmpReq *InitMultipartFileUploadRequest, tmpHeader *InitMultipartFileUploadHeaders, runtime *util.RuntimeOptions) (_result *InitMultipartFileUploadResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InitMultipartFileUploadShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &InitMultipartFileUploadShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Option)) {
		request.OptionShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Option, tea.String("Option"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OptionShrink)) {
		body["Option"] = request.OptionShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ParentDentryUuid)) {
		body["ParentDentryUuid"] = request.ParentDentryUuid
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InitMultipartFileUpload"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/initMultipartFileUpload"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InitMultipartFileUploadResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 初始化文件分片上传
//
// @param request - InitMultipartFileUploadRequest
//
// @return InitMultipartFileUploadResponse
func (client *Client) InitMultipartFileUpload(request *InitMultipartFileUploadRequest) (_result *InitMultipartFileUploadResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InitMultipartFileUploadHeaders{}
	_result = &InitMultipartFileUploadResponse{}
	_body, _err := client.InitMultipartFileUploadWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 在指定列左侧插入若干列
//
// @param tmpReq - InsertColumnsBeforeRequest
//
// @param tmpHeader - InsertColumnsBeforeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InsertColumnsBeforeResponse
func (client *Client) InsertColumnsBeforeWithOptions(tmpReq *InsertColumnsBeforeRequest, tmpHeader *InsertColumnsBeforeHeaders, runtime *util.RuntimeOptions) (_result *InsertColumnsBeforeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InsertColumnsBeforeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &InsertColumnsBeforeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Column)) {
		body["Column"] = request.Column
	}

	if !tea.BoolValue(util.IsUnset(request.ColumnCount)) {
		body["ColumnCount"] = request.ColumnCount
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertColumnsBefore"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/insertColumnsBefore"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertColumnsBeforeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 在指定列左侧插入若干列
//
// @param request - InsertColumnsBeforeRequest
//
// @return InsertColumnsBeforeResponse
func (client *Client) InsertColumnsBefore(request *InsertColumnsBeforeRequest) (_result *InsertColumnsBeforeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InsertColumnsBeforeHeaders{}
	_result = &InsertColumnsBeforeResponse{}
	_body, _err := client.InsertColumnsBeforeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 在指定行上方插入若干行
//
// @param tmpReq - InsertRowsBeforeRequest
//
// @param tmpHeader - InsertRowsBeforeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InsertRowsBeforeResponse
func (client *Client) InsertRowsBeforeWithOptions(tmpReq *InsertRowsBeforeRequest, tmpHeader *InsertRowsBeforeHeaders, runtime *util.RuntimeOptions) (_result *InsertRowsBeforeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InsertRowsBeforeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &InsertRowsBeforeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Row)) {
		body["Row"] = request.Row
	}

	if !tea.BoolValue(util.IsUnset(request.RowCount)) {
		body["RowCount"] = request.RowCount
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertRowsBefore"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/insertRowsBefore"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertRowsBeforeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 在指定行上方插入若干行
//
// @param request - InsertRowsBeforeRequest
//
// @return InsertRowsBeforeResponse
func (client *Client) InsertRowsBefore(request *InsertRowsBeforeRequest) (_result *InsertRowsBeforeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InsertRowsBeforeHeaders{}
	_result = &InsertRowsBeforeResponse{}
	_body, _err := client.InsertRowsBeforeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 邀请用户入会
//
// @param tmpReq - InviteUsersRequest
//
// @param tmpHeader - InviteUsersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InviteUsersResponse
func (client *Client) InviteUsersWithOptions(tmpReq *InviteUsersRequest, tmpHeader *InviteUsersHeaders, runtime *util.RuntimeOptions) (_result *InviteUsersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &InviteUsersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &InviteUsersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.InviteeList)) {
		request.InviteeListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InviteeList, tea.String("InviteeList"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.PhoneInviteeList)) {
		request.PhoneInviteeListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PhoneInviteeList, tea.String("phoneInviteeList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InviteeListShrink)) {
		body["InviteeList"] = request.InviteeListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneInviteeListShrink)) {
		body["phoneInviteeList"] = request.PhoneInviteeListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InviteUsers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/inviteUsers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InviteUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 邀请用户入会
//
// @param request - InviteUsersRequest
//
// @return InviteUsersResponse
func (client *Client) InviteUsers(request *InviteUsersRequest) (_result *InviteUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &InviteUsersHeaders{}
	_result = &InviteUsersResponse{}
	_body, _err := client.InviteUsersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询宜搭应用列表
//
// @param request - ListApplicationRequest
//
// @param tmpHeader - ListApplicationHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListApplicationResponse
func (client *Client) ListApplicationWithOptions(request *ListApplicationRequest, tmpHeader *ListApplicationHeaders, runtime *util.RuntimeOptions) (_result *ListApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ListApplicationShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppFilter)) {
		body["AppFilter"] = request.AppFilter
	}

	if !tea.BoolValue(util.IsUnset(request.AppNameSearchKeyword)) {
		body["AppNameSearchKeyword"] = request.AppNameSearchKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.CorpId)) {
		body["CorpId"] = request.CorpId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListApplication"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/listApplication"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询宜搭应用列表
//
// @param request - ListApplicationRequest
//
// @return ListApplicationResponse
func (client *Client) ListApplication(request *ListApplicationRequest) (_result *ListApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListApplicationHeaders{}
	_result = &ListApplicationResponse{}
	_body, _err := client.ListApplicationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询日历
//
// @param tmpReq - ListCalendarsRequest
//
// @param tmpHeader - ListCalendarsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCalendarsResponse
func (client *Client) ListCalendarsWithOptions(tmpReq *ListCalendarsRequest, tmpHeader *ListCalendarsHeaders, runtime *util.RuntimeOptions) (_result *ListCalendarsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListCalendarsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListCalendarsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Request)) {
		request.RequestShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Request, tea.String("Request"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RequestShrink)) {
		body["Request"] = request.RequestShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCalendars"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/listCalendars"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCalendarsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询日历
//
// @param request - ListCalendarsRequest
//
// @return ListCalendarsResponse
func (client *Client) ListCalendars(request *ListCalendarsRequest) (_result *ListCalendarsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListCalendarsHeaders{}
	_result = &ListCalendarsResponse{}
	_body, _err := client.ListCalendarsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取文件或文件夹列表
//
// @param tmpReq - ListDentriesRequest
//
// @param tmpHeader - ListDentriesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDentriesResponse
func (client *Client) ListDentriesWithOptions(tmpReq *ListDentriesRequest, tmpHeader *ListDentriesHeaders, runtime *util.RuntimeOptions) (_result *ListDentriesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDentriesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListDentriesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.Order)) {
		body["Order"] = request.Order
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		body["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		body["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceId)) {
		body["SpaceId"] = request.SpaceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WithThumbnail)) {
		body["WithThumbnail"] = request.WithThumbnail
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDentries"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/listDentries"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDentriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取文件或文件夹列表
//
// @param request - ListDentriesRequest
//
// @return ListDentriesResponse
func (client *Client) ListDentries(request *ListDentriesRequest) (_result *ListDentriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListDentriesHeaders{}
	_result = &ListDentriesResponse{}
	_body, _err := client.ListDentriesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取钉盘空间列表
//
// @param tmpReq - ListDriveSpacesRequest
//
// @param tmpHeader - ListDriveSpacesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDriveSpacesResponse
func (client *Client) ListDriveSpacesWithOptions(tmpReq *ListDriveSpacesRequest, tmpHeader *ListDriveSpacesHeaders, runtime *util.RuntimeOptions) (_result *ListDriveSpacesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListDriveSpacesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListDriveSpacesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceType)) {
		body["SpaceType"] = request.SpaceType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDriveSpaces"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/listDriveSpaces"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDriveSpacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取钉盘空间列表
//
// @param request - ListDriveSpacesRequest
//
// @return ListDriveSpacesResponse
func (client *Client) ListDriveSpaces(request *ListDriveSpacesRequest) (_result *ListDriveSpacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListDriveSpacesHeaders{}
	_result = &ListDriveSpacesResponse{}
	_body, _err := client.ListDriveSpacesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询日程列表
//
// @param request - ListEventsRequest
//
// @param tmpHeader - ListEventsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEventsResponse
func (client *Client) ListEventsWithOptions(request *ListEventsRequest, tmpHeader *ListEventsHeaders, runtime *util.RuntimeOptions) (_result *ListEventsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ListEventsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAttendees)) {
		body["MaxAttendees"] = request.MaxAttendees
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SeriesMasterId)) {
		body["SeriesMasterId"] = request.SeriesMasterId
	}

	if !tea.BoolValue(util.IsUnset(request.ShowDeleted)) {
		body["ShowDeleted"] = request.ShowDeleted
	}

	if !tea.BoolValue(util.IsUnset(request.SyncToken)) {
		body["SyncToken"] = request.SyncToken
	}

	if !tea.BoolValue(util.IsUnset(request.TimeMax)) {
		body["TimeMax"] = request.TimeMax
	}

	if !tea.BoolValue(util.IsUnset(request.TimeMin)) {
		body["TimeMin"] = request.TimeMin
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEvents"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/listEvents"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEventsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询日程列表
//
// @param request - ListEventsRequest
//
// @return ListEventsResponse
func (client *Client) ListEvents(request *ListEventsRequest) (_result *ListEventsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListEventsHeaders{}
	_result = &ListEventsResponse{}
	_body, _err := client.ListEventsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询日程视图
//
// @param request - ListEventsViewRequest
//
// @param tmpHeader - ListEventsViewHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListEventsViewResponse
func (client *Client) ListEventsViewWithOptions(request *ListEventsViewRequest, tmpHeader *ListEventsViewHeaders, runtime *util.RuntimeOptions) (_result *ListEventsViewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ListEventsViewShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxAttendees)) {
		body["MaxAttendees"] = request.MaxAttendees
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.TimeMax)) {
		body["TimeMax"] = request.TimeMax
	}

	if !tea.BoolValue(util.IsUnset(request.TimeMin)) {
		body["TimeMin"] = request.TimeMin
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEventsView"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/listEventsView"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEventsViewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询日程视图
//
// @param request - ListEventsViewRequest
//
// @return ListEventsViewResponse
func (client *Client) ListEventsView(request *ListEventsViewRequest) (_result *ListEventsViewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListEventsViewHeaders{}
	_result = &ListEventsViewResponse{}
	_body, _err := client.ListEventsViewWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量查询宜搭表单实例的评论
//
// @param tmpReq - ListFormRemarksRequest
//
// @param tmpHeader - ListFormRemarksHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListFormRemarksResponse
func (client *Client) ListFormRemarksWithOptions(tmpReq *ListFormRemarksRequest, tmpHeader *ListFormRemarksHeaders, runtime *util.RuntimeOptions) (_result *ListFormRemarksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListFormRemarksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListFormRemarksShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.FormInstanceIdList)) {
		request.FormInstanceIdListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.FormInstanceIdList, tea.String("FormInstanceIdList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceIdListShrink)) {
		body["FormInstanceIdList"] = request.FormInstanceIdListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFormRemarks"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/listFormRemarks"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFormRemarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量查询宜搭表单实例的评论
//
// @param request - ListFormRemarksRequest
//
// @return ListFormRemarksResponse
func (client *Client) ListFormRemarks(request *ListFormRemarksRequest) (_result *ListFormRemarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListFormRemarksHeaders{}
	_result = &ListFormRemarksResponse{}
	_body, _err := client.ListFormRemarksWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取应用下的页面列表
//
// @param request - ListNavigationByFormTypeRequest
//
// @param tmpHeader - ListNavigationByFormTypeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNavigationByFormTypeResponse
func (client *Client) ListNavigationByFormTypeWithOptions(request *ListNavigationByFormTypeRequest, tmpHeader *ListNavigationByFormTypeHeaders, runtime *util.RuntimeOptions) (_result *ListNavigationByFormTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ListNavigationByFormTypeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormType)) {
		body["FormType"] = request.FormType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNavigationByFormType"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/listNavigationByFormType"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNavigationByFormTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取应用下的页面列表
//
// @param request - ListNavigationByFormTypeRequest
//
// @return ListNavigationByFormTypeResponse
func (client *Client) ListNavigationByFormType(request *ListNavigationByFormTypeRequest) (_result *ListNavigationByFormTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListNavigationByFormTypeHeaders{}
	_result = &ListNavigationByFormTypeResponse{}
	_body, _err := client.ListNavigationByFormTypeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取节点列表
//
// @param tmpReq - ListNodesRequest
//
// @param tmpHeader - ListNodesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListNodesResponse
func (client *Client) ListNodesWithOptions(tmpReq *ListNodesRequest, tmpHeader *ListNodesHeaders, runtime *util.RuntimeOptions) (_result *ListNodesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListNodesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListNodesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ParentNodeId)) {
		body["ParentNodeId"] = request.ParentNodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WithPermissionRole)) {
		body["WithPermissionRole"] = request.WithPermissionRole
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListNodes"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/listNodes"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListNodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取节点列表
//
// @param request - ListNodesRequest
//
// @return ListNodesResponse
func (client *Client) ListNodes(request *ListNodesRequest) (_result *ListNodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListNodesHeaders{}
	_result = &ListNodesResponse{}
	_body, _err := client.ListNodesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户发出的日志列表
//
// @param tmpReq - ListReportRequest
//
// @param tmpHeader - ListReportHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListReportResponse
func (client *Client) ListReportWithOptions(tmpReq *ListReportRequest, tmpHeader *ListReportHeaders, runtime *util.RuntimeOptions) (_result *ListReportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListReportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListReportShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cursor)) {
		body["Cursor"] = request.Cursor
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedEndTime)) {
		body["ModifiedEndTime"] = request.ModifiedEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedStartTime)) {
		body["ModifiedStartTime"] = request.ModifiedStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListReport"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/listReport"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户发出的日志列表
//
// @param request - ListReportRequest
//
// @return ListReportResponse
func (client *Client) ListReport(request *ListReportRequest) (_result *ListReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListReportHeaders{}
	_result = &ListReportResponse{}
	_body, _err := client.ListReportWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取子表组件数据
//
// @param request - ListTableDataByFormInstanceIdTableIdRequest
//
// @param tmpHeader - ListTableDataByFormInstanceIdTableIdHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTableDataByFormInstanceIdTableIdResponse
func (client *Client) ListTableDataByFormInstanceIdTableIdWithOptions(request *ListTableDataByFormInstanceIdTableIdRequest, tmpHeader *ListTableDataByFormInstanceIdTableIdHeaders, runtime *util.RuntimeOptions) (_result *ListTableDataByFormInstanceIdTableIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &ListTableDataByFormInstanceIdTableIdShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceId)) {
		body["FormInstanceId"] = request.FormInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.TableFieldId)) {
		body["TableFieldId"] = request.TableFieldId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTableDataByFormInstanceIdTableId"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/listTableDataByFormInstanceIdTableId"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTableDataByFormInstanceIdTableIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取子表组件数据
//
// @param request - ListTableDataByFormInstanceIdTableIdRequest
//
// @return ListTableDataByFormInstanceIdTableIdResponse
func (client *Client) ListTableDataByFormInstanceIdTableId(request *ListTableDataByFormInstanceIdTableIdRequest) (_result *ListTableDataByFormInstanceIdTableIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListTableDataByFormInstanceIdTableIdHeaders{}
	_result = &ListTableDataByFormInstanceIdTableIdResponse{}
	_body, _err := client.ListTableDataByFormInstanceIdTableIdWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取知识小组列表
//
// @param tmpReq - ListTeamsRequest
//
// @param tmpHeader - ListTeamsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTeamsResponse
func (client *Client) ListTeamsWithOptions(tmpReq *ListTeamsRequest, tmpHeader *ListTeamsHeaders, runtime *util.RuntimeOptions) (_result *ListTeamsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListTeamsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListTeamsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTeams"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/listTeams"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTeamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取知识小组列表
//
// @param request - ListTeamsRequest
//
// @return ListTeamsResponse
func (client *Client) ListTeams(request *ListTeamsRequest) (_result *ListTeamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListTeamsHeaders{}
	_result = &ListTeamsResponse{}
	_body, _err := client.ListTeamsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询文档模板
//
// @param tmpReq - ListTemplateRequest
//
// @param tmpHeader - ListTemplateHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTemplateResponse
func (client *Client) ListTemplateWithOptions(tmpReq *ListTemplateRequest, tmpHeader *ListTemplateHeaders, runtime *util.RuntimeOptions) (_result *ListTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListTemplateShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		body["TemplateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTemplate"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/listTemplate"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询文档模板
//
// @param request - ListTemplateRequest
//
// @return ListTemplateResponse
func (client *Client) ListTemplate(request *ListTemplateRequest) (_result *ListTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListTemplateHeaders{}
	_result = &ListTemplateResponse{}
	_body, _err := client.ListTemplateWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取知识库列表
//
// @param tmpReq - ListWorkspacesRequest
//
// @param tmpHeader - ListWorkspacesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListWorkspacesResponse
func (client *Client) ListWorkspacesWithOptions(tmpReq *ListWorkspacesRequest, tmpHeader *ListWorkspacesHeaders, runtime *util.RuntimeOptions) (_result *ListWorkspacesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ListWorkspacesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ListWorkspacesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		body["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.TeamId)) {
		body["TeamId"] = request.TeamId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WithPermissionRole)) {
		body["WithPermissionRole"] = request.WithPermissionRole
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ListWorkspaces"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/listWorkspaces"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListWorkspacesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取知识库列表
//
// @param request - ListWorkspacesRequest
//
// @return ListWorkspacesResponse
func (client *Client) ListWorkspaces(request *ListWorkspacesRequest) (_result *ListWorkspacesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ListWorkspacesHeaders{}
	_result = &ListWorkspacesResponse{}
	_body, _err := client.ListWorkspacesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改日程
//
// @param tmpReq - PatchEventRequest
//
// @param tmpHeader - PatchEventHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return PatchEventResponse
func (client *Client) PatchEventWithOptions(tmpReq *PatchEventRequest, tmpHeader *PatchEventHeaders, runtime *util.RuntimeOptions) (_result *PatchEventResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &PatchEventShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &PatchEventShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Attendees)) {
		request.AttendeesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Attendees, tea.String("Attendees"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.CardInstances)) {
		request.CardInstancesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CardInstances, tea.String("CardInstances"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.End)) {
		request.EndShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.End, tea.String("End"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Extra)) {
		request.ExtraShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Extra, tea.String("Extra"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Location)) {
		request.LocationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Location, tea.String("Location"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Recurrence)) {
		request.RecurrenceShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Recurrence, tea.String("Recurrence"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Reminders)) {
		request.RemindersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Reminders, tea.String("Reminders"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Start)) {
		request.StartShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Start, tea.String("Start"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttendeesShrink)) {
		body["Attendees"] = request.AttendeesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.CardInstancesShrink)) {
		body["CardInstances"] = request.CardInstancesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndShrink)) {
		body["End"] = request.EndShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		body["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraShrink)) {
		body["Extra"] = request.ExtraShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IsAllDay)) {
		body["IsAllDay"] = request.IsAllDay
	}

	if !tea.BoolValue(util.IsUnset(request.LocationShrink)) {
		body["Location"] = request.LocationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RecurrenceShrink)) {
		body["Recurrence"] = request.RecurrenceShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RemindersShrink)) {
		body["Reminders"] = request.RemindersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StartShrink)) {
		body["Start"] = request.StartShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Summary)) {
		body["Summary"] = request.Summary
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("PatchEvent"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/patchEvent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &PatchEventResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改日程
//
// @param request - PatchEventRequest
//
// @return PatchEventResponse
func (client *Client) PatchEvent(request *PatchEventRequest) (_result *PatchEventResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &PatchEventHeaders{}
	_result = &PatchEventResponse{}
	_body, _err := client.PatchEventWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议录制中的文本信息
//
// @param tmpReq - QueryCloudRecordTextRequest
//
// @param tmpHeader - QueryCloudRecordTextHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCloudRecordTextResponse
func (client *Client) QueryCloudRecordTextWithOptions(tmpReq *QueryCloudRecordTextRequest, tmpHeader *QueryCloudRecordTextHeaders, runtime *util.RuntimeOptions) (_result *QueryCloudRecordTextResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryCloudRecordTextShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryCloudRecordTextShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		body["Direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCloudRecordText"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryCloudRecordText"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCloudRecordTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议录制中的文本信息
//
// @param request - QueryCloudRecordTextRequest
//
// @return QueryCloudRecordTextResponse
func (client *Client) QueryCloudRecordText(request *QueryCloudRecordTextRequest) (_result *QueryCloudRecordTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryCloudRecordTextHeaders{}
	_result = &QueryCloudRecordTextResponse{}
	_body, _err := client.QueryCloudRecordTextWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议录制的详情信息
//
// @param tmpReq - QueryCloudRecordVideoRequest
//
// @param tmpHeader - QueryCloudRecordVideoHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCloudRecordVideoResponse
func (client *Client) QueryCloudRecordVideoWithOptions(tmpReq *QueryCloudRecordVideoRequest, tmpHeader *QueryCloudRecordVideoHeaders, runtime *util.RuntimeOptions) (_result *QueryCloudRecordVideoResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryCloudRecordVideoShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryCloudRecordVideoShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCloudRecordVideo"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryCloudRecordVideo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCloudRecordVideoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议录制的详情信息
//
// @param request - QueryCloudRecordVideoRequest
//
// @return QueryCloudRecordVideoResponse
func (client *Client) QueryCloudRecordVideo(request *QueryCloudRecordVideoRequest) (_result *QueryCloudRecordVideoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryCloudRecordVideoHeaders{}
	_result = &QueryCloudRecordVideoResponse{}
	_body, _err := client.QueryCloudRecordVideoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议录制中的视频信息
//
// @param tmpReq - QueryCloudRecordVideoPlayInfoRequest
//
// @param tmpHeader - QueryCloudRecordVideoPlayInfoHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryCloudRecordVideoPlayInfoResponse
func (client *Client) QueryCloudRecordVideoPlayInfoWithOptions(tmpReq *QueryCloudRecordVideoPlayInfoRequest, tmpHeader *QueryCloudRecordVideoPlayInfoHeaders, runtime *util.RuntimeOptions) (_result *QueryCloudRecordVideoPlayInfoResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryCloudRecordVideoPlayInfoShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryCloudRecordVideoPlayInfoShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["ConferenceId"] = request.ConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		body["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		body["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCloudRecordVideoPlayInfo"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryCloudRecordVideoPlayInfo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCloudRecordVideoPlayInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议录制中的视频信息
//
// @param request - QueryCloudRecordVideoPlayInfoRequest
//
// @return QueryCloudRecordVideoPlayInfoResponse
func (client *Client) QueryCloudRecordVideoPlayInfo(request *QueryCloudRecordVideoPlayInfoRequest) (_result *QueryCloudRecordVideoPlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryCloudRecordVideoPlayInfoHeaders{}
	_result = &QueryCloudRecordVideoPlayInfoResponse{}
	_body, _err := client.QueryCloudRecordVideoPlayInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询视频会议信息
//
// @param request - QueryConferenceInfoRequest
//
// @param tmpHeader - QueryConferenceInfoHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryConferenceInfoResponse
func (client *Client) QueryConferenceInfoWithOptions(request *QueryConferenceInfoRequest, tmpHeader *QueryConferenceInfoHeaders, runtime *util.RuntimeOptions) (_result *QueryConferenceInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &QueryConferenceInfoShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryConferenceInfo"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryConferenceInfo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryConferenceInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询视频会议信息
//
// @param request - QueryConferenceInfoRequest
//
// @return QueryConferenceInfoResponse
func (client *Client) QueryConferenceInfo(request *QueryConferenceInfoRequest) (_result *QueryConferenceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryConferenceInfoHeaders{}
	_result = &QueryConferenceInfoResponse{}
	_body, _err := client.QueryConferenceInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询视频会议成员
//
// @param tmpReq - QueryConferenceMembersRequest
//
// @param tmpHeader - QueryConferenceMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryConferenceMembersResponse
func (client *Client) QueryConferenceMembersWithOptions(tmpReq *QueryConferenceMembersRequest, tmpHeader *QueryConferenceMembersHeaders, runtime *util.RuntimeOptions) (_result *QueryConferenceMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryConferenceMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryConferenceMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryConferenceMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryConferenceMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryConferenceMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询视频会议成员
//
// @param request - QueryConferenceMembersRequest
//
// @return QueryConferenceMembersResponse
func (client *Client) QueryConferenceMembers(request *QueryConferenceMembersRequest) (_result *QueryConferenceMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryConferenceMembersHeaders{}
	_result = &QueryConferenceMembersResponse{}
	_body, _err := client.QueryConferenceMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询知识库节点信息
//
// @param tmpReq - QueryDentryRequest
//
// @param tmpHeader - QueryDentryHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDentryResponse
func (client *Client) QueryDentryWithOptions(tmpReq *QueryDentryRequest, tmpHeader *QueryDentryHeaders, runtime *util.RuntimeOptions) (_result *QueryDentryResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryDentryShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryDentryShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DentryId)) {
		body["DentryId"] = request.DentryId
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeSpace)) {
		body["IncludeSpace"] = request.IncludeSpace
	}

	if !tea.BoolValue(util.IsUnset(request.SpaceId)) {
		body["SpaceId"] = request.SpaceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDentry"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v2/documents/queryDentry"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDentryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询知识库节点信息
//
// @param request - QueryDentryRequest
//
// @return QueryDentryResponse
func (client *Client) QueryDentry(request *QueryDentryRequest) (_result *QueryDentryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryDentryHeaders{}
	_result = &QueryDentryResponse{}
	_body, _err := client.QueryDentryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播信息
//
// @param tmpReq - QueryLiveInfoRequest
//
// @param tmpHeader - QueryLiveInfoHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryLiveInfoResponse
func (client *Client) QueryLiveInfoWithOptions(tmpReq *QueryLiveInfoRequest, tmpHeader *QueryLiveInfoHeaders, runtime *util.RuntimeOptions) (_result *QueryLiveInfoResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryLiveInfoShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryLiveInfoShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LiveId)) {
		body["LiveId"] = request.LiveId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryLiveInfo"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryLiveInfo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryLiveInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播信息
//
// @param request - QueryLiveInfoRequest
//
// @return QueryLiveInfoResponse
func (client *Client) QueryLiveInfo(request *QueryLiveInfoRequest) (_result *QueryLiveInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryLiveInfoHeaders{}
	_result = &QueryLiveInfoResponse{}
	_body, _err := client.QueryLiveInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播的观看数据
//
// @param tmpReq - QueryLiveWatchDetailRequest
//
// @param tmpHeader - QueryLiveWatchDetailHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryLiveWatchDetailResponse
func (client *Client) QueryLiveWatchDetailWithOptions(tmpReq *QueryLiveWatchDetailRequest, tmpHeader *QueryLiveWatchDetailHeaders, runtime *util.RuntimeOptions) (_result *QueryLiveWatchDetailResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryLiveWatchDetailShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryLiveWatchDetailShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LiveId)) {
		body["LiveId"] = request.LiveId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryLiveWatchDetail"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryLiveWatchDetail"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryLiveWatchDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播的观看数据
//
// @param request - QueryLiveWatchDetailRequest
//
// @return QueryLiveWatchDetailResponse
func (client *Client) QueryLiveWatchDetail(request *QueryLiveWatchDetailRequest) (_result *QueryLiveWatchDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryLiveWatchDetailHeaders{}
	_result = &QueryLiveWatchDetailResponse{}
	_body, _err := client.QueryLiveWatchDetailWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播观看人员信息
//
// @param tmpReq - QueryLiveWatchUserListRequest
//
// @param tmpHeader - QueryLiveWatchUserListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryLiveWatchUserListResponse
func (client *Client) QueryLiveWatchUserListWithOptions(tmpReq *QueryLiveWatchUserListRequest, tmpHeader *QueryLiveWatchUserListHeaders, runtime *util.RuntimeOptions) (_result *QueryLiveWatchUserListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryLiveWatchUserListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryLiveWatchUserListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.LiveId)) {
		body["LiveId"] = request.LiveId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryLiveWatchUserList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryLiveWatchUserList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryLiveWatchUserListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播观看人员信息
//
// @param request - QueryLiveWatchUserListRequest
//
// @return QueryLiveWatchUserListResponse
func (client *Client) QueryLiveWatchUserList(request *QueryLiveWatchUserListRequest) (_result *QueryLiveWatchUserListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryLiveWatchUserListHeaders{}
	_result = &QueryLiveWatchUserListResponse{}
	_body, _err := client.QueryLiveWatchUserListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议室详情
//
// @param tmpReq - QueryMeetingRoomRequest
//
// @param tmpHeader - QueryMeetingRoomHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMeetingRoomResponse
func (client *Client) QueryMeetingRoomWithOptions(tmpReq *QueryMeetingRoomRequest, tmpHeader *QueryMeetingRoomHeaders, runtime *util.RuntimeOptions) (_result *QueryMeetingRoomResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryMeetingRoomShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryMeetingRoomShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		body["RoomId"] = request.RoomId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMeetingRoom"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryMeetingRoom"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMeetingRoomResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议室详情
//
// @param request - QueryMeetingRoomRequest
//
// @return QueryMeetingRoomResponse
func (client *Client) QueryMeetingRoom(request *QueryMeetingRoomRequest) (_result *QueryMeetingRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryMeetingRoomHeaders{}
	_result = &QueryMeetingRoomResponse{}
	_body, _err := client.QueryMeetingRoomWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议室分组信息
//
// @param tmpReq - QueryMeetingRoomGroupRequest
//
// @param tmpHeader - QueryMeetingRoomGroupHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMeetingRoomGroupResponse
func (client *Client) QueryMeetingRoomGroupWithOptions(tmpReq *QueryMeetingRoomGroupRequest, tmpHeader *QueryMeetingRoomGroupHeaders, runtime *util.RuntimeOptions) (_result *QueryMeetingRoomGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryMeetingRoomGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryMeetingRoomGroupShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMeetingRoomGroup"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryMeetingRoomGroup"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMeetingRoomGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议室分组信息
//
// @param request - QueryMeetingRoomGroupRequest
//
// @return QueryMeetingRoomGroupResponse
func (client *Client) QueryMeetingRoomGroup(request *QueryMeetingRoomGroupRequest) (_result *QueryMeetingRoomGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryMeetingRoomGroupHeaders{}
	_result = &QueryMeetingRoomGroupResponse{}
	_body, _err := client.QueryMeetingRoomGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议室分组列表
//
// @param tmpReq - QueryMeetingRoomGroupListRequest
//
// @param tmpHeader - QueryMeetingRoomGroupListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMeetingRoomGroupListResponse
func (client *Client) QueryMeetingRoomGroupListWithOptions(tmpReq *QueryMeetingRoomGroupListRequest, tmpHeader *QueryMeetingRoomGroupListHeaders, runtime *util.RuntimeOptions) (_result *QueryMeetingRoomGroupListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryMeetingRoomGroupListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryMeetingRoomGroupListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Request)) {
		request.RequestShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Request, tea.String("Request"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RequestShrink)) {
		body["Request"] = request.RequestShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMeetingRoomGroupList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryMeetingRoomGroupList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMeetingRoomGroupListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议室分组列表
//
// @param request - QueryMeetingRoomGroupListRequest
//
// @return QueryMeetingRoomGroupListResponse
func (client *Client) QueryMeetingRoomGroupList(request *QueryMeetingRoomGroupListRequest) (_result *QueryMeetingRoomGroupListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryMeetingRoomGroupListHeaders{}
	_result = &QueryMeetingRoomGroupListResponse{}
	_body, _err := client.QueryMeetingRoomGroupListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议室列表
//
// @param tmpReq - QueryMeetingRoomListRequest
//
// @param tmpHeader - QueryMeetingRoomListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMeetingRoomListResponse
func (client *Client) QueryMeetingRoomListWithOptions(tmpReq *QueryMeetingRoomListRequest, tmpHeader *QueryMeetingRoomListHeaders, runtime *util.RuntimeOptions) (_result *QueryMeetingRoomListResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryMeetingRoomListShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryMeetingRoomListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMeetingRoomList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryMeetingRoomList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMeetingRoomListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议室列表
//
// @param request - QueryMeetingRoomListRequest
//
// @return QueryMeetingRoomListResponse
func (client *Client) QueryMeetingRoomList(request *QueryMeetingRoomListRequest) (_result *QueryMeetingRoomListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryMeetingRoomListHeaders{}
	_result = &QueryMeetingRoomListResponse{}
	_body, _err := client.QueryMeetingRoomListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询闪记录音
//
// @param tmpReq - QueryMinutesRequest
//
// @param tmpHeader - QueryMinutesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMinutesResponse
func (client *Client) QueryMinutesWithOptions(tmpReq *QueryMinutesRequest, tmpHeader *QueryMinutesHeaders, runtime *util.RuntimeOptions) (_result *QueryMinutesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryMinutesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryMinutesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMinutes"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryMinutes"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMinutesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询闪记录音
//
// @param request - QueryMinutesRequest
//
// @return QueryMinutesResponse
func (client *Client) QueryMinutes(request *QueryMinutesRequest) (_result *QueryMinutesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryMinutesHeaders{}
	_result = &QueryMinutesResponse{}
	_body, _err := client.QueryMinutesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议闪记智能纪要
//
// @param tmpReq - QueryMinutesSummaryRequest
//
// @param tmpHeader - QueryMinutesSummaryHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMinutesSummaryResponse
func (client *Client) QueryMinutesSummaryWithOptions(tmpReq *QueryMinutesSummaryRequest, tmpHeader *QueryMinutesSummaryHeaders, runtime *util.RuntimeOptions) (_result *QueryMinutesSummaryResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryMinutesSummaryShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryMinutesSummaryShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SummaryTypeList)) {
		request.SummaryTypeListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SummaryTypeList, tea.String("summaryTypeList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.SummaryTypeListShrink)) {
		body["summaryTypeList"] = request.SummaryTypeListShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMinutesSummary"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryMinutesSummary"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMinutesSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议闪记智能纪要
//
// @param request - QueryMinutesSummaryRequest
//
// @return QueryMinutesSummaryResponse
func (client *Client) QueryMinutesSummary(request *QueryMinutesSummaryRequest) (_result *QueryMinutesSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryMinutesSummaryHeaders{}
	_result = &QueryMinutesSummaryResponse{}
	_body, _err := client.QueryMinutesSummaryWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询会议闪记的文本信息
//
// @param tmpReq - QueryMinutesTextRequest
//
// @param tmpHeader - QueryMinutesTextHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMinutesTextResponse
func (client *Client) QueryMinutesTextWithOptions(tmpReq *QueryMinutesTextRequest, tmpHeader *QueryMinutesTextHeaders, runtime *util.RuntimeOptions) (_result *QueryMinutesTextResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryMinutesTextShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryMinutesTextShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.Direction)) {
		body["direction"] = request.Direction
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMinutesText"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryMinutesText"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMinutesTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询会议闪记的文本信息
//
// @param request - QueryMinutesTextRequest
//
// @return QueryMinutesTextResponse
func (client *Client) QueryMinutesText(request *QueryMinutesTextRequest) (_result *QueryMinutesTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryMinutesTextHeaders{}
	_result = &QueryMinutesTextResponse{}
	_body, _err := client.QueryMinutesTextWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询企业荣誉
//
// @param tmpReq - QueryOrgHonorsRequest
//
// @param tmpHeader - QueryOrgHonorsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryOrgHonorsResponse
func (client *Client) QueryOrgHonorsWithOptions(tmpReq *QueryOrgHonorsRequest, tmpHeader *QueryOrgHonorsHeaders, runtime *util.RuntimeOptions) (_result *QueryOrgHonorsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryOrgHonorsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryOrgHonorsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["orgId"] = request.OrgId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOrgHonors"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/honor/queryOrgHonors"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOrgHonorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询企业荣誉
//
// @param request - QueryOrgHonorsRequest
//
// @return QueryOrgHonorsResponse
func (client *Client) QueryOrgHonors(request *QueryOrgHonorsRequest) (_result *QueryOrgHonorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryOrgHonorsHeaders{}
	_result = &QueryOrgHonorsResponse{}
	_body, _err := client.QueryOrgHonorsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询企业代办
//
// @param tmpReq - QueryOrgTodoTasksRequest
//
// @param tmpHeader - QueryOrgTodoTasksHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryOrgTodoTasksResponse
func (client *Client) QueryOrgTodoTasksWithOptions(tmpReq *QueryOrgTodoTasksRequest, tmpHeader *QueryOrgTodoTasksHeaders, runtime *util.RuntimeOptions) (_result *QueryOrgTodoTasksResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryOrgTodoTasksShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryOrgTodoTasksShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.IsDone)) {
		body["isDone"] = request.IsDone
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOrgTodoTasks"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/task/queryOrgTodoTasks"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOrgTodoTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询企业代办
//
// @param request - QueryOrgTodoTasksRequest
//
// @return QueryOrgTodoTasksResponse
func (client *Client) QueryOrgTodoTasks(request *QueryOrgTodoTasksRequest) (_result *QueryOrgTodoTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryOrgTodoTasksHeaders{}
	_result = &QueryOrgTodoTasksResponse{}
	_body, _err := client.QueryOrgTodoTasksWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询闪记的链接，可通过链接查看闪记内容
//
// @param tmpReq - QueryRecordMinutesUrlRequest
//
// @param tmpHeader - QueryRecordMinutesUrlHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryRecordMinutesUrlResponse
func (client *Client) QueryRecordMinutesUrlWithOptions(tmpReq *QueryRecordMinutesUrlRequest, tmpHeader *QueryRecordMinutesUrlHeaders, runtime *util.RuntimeOptions) (_result *QueryRecordMinutesUrlResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryRecordMinutesUrlShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryRecordMinutesUrlShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizType)) {
		body["BizType"] = request.BizType
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["ConferenceId"] = request.ConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryRecordMinutesUrl"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryRecordMinutesUrl"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryRecordMinutesUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询闪记的链接，可通过链接查看闪记内容
//
// @param request - QueryRecordMinutesUrlRequest
//
// @return QueryRecordMinutesUrlResponse
func (client *Client) QueryRecordMinutesUrl(request *QueryRecordMinutesUrlRequest) (_result *QueryRecordMinutesUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryRecordMinutesUrlHeaders{}
	_result = &QueryRecordMinutesUrlResponse{}
	_body, _err := client.QueryRecordMinutesUrlWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取日志详情
//
// @param tmpReq - QueryReportDetailRequest
//
// @param tmpHeader - QueryReportDetailHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryReportDetailResponse
func (client *Client) QueryReportDetailWithOptions(tmpReq *QueryReportDetailRequest, tmpHeader *QueryReportDetailHeaders, runtime *util.RuntimeOptions) (_result *QueryReportDetailResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryReportDetailShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryReportDetailShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReportId)) {
		body["ReportId"] = request.ReportId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryReportDetail"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/queryReportDetail"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryReportDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取日志详情
//
// @param request - QueryReportDetailRequest
//
// @return QueryReportDetailResponse
func (client *Client) QueryReportDetail(request *QueryReportDetailRequest) (_result *QueryReportDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryReportDetailHeaders{}
	_result = &QueryReportDetailResponse{}
	_body, _err := client.QueryReportDetailWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询预约会议
//
// @param tmpReq - QueryScheduleConferenceRequest
//
// @param tmpHeader - QueryScheduleConferenceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryScheduleConferenceResponse
func (client *Client) QueryScheduleConferenceWithOptions(tmpReq *QueryScheduleConferenceRequest, tmpHeader *QueryScheduleConferenceHeaders, runtime *util.RuntimeOptions) (_result *QueryScheduleConferenceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryScheduleConferenceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryScheduleConferenceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConferenceId)) {
		body["scheduleConferenceId"] = request.ScheduleConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryScheduleConference"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryScheduleConference"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryScheduleConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询预约会议
//
// @param request - QueryScheduleConferenceRequest
//
// @return QueryScheduleConferenceResponse
func (client *Client) QueryScheduleConference(request *QueryScheduleConferenceRequest) (_result *QueryScheduleConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryScheduleConferenceHeaders{}
	_result = &QueryScheduleConferenceResponse{}
	_body, _err := client.QueryScheduleConferenceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询预约会议历史会议信息
//
// @param tmpReq - QueryScheduleConferenceInfoRequest
//
// @param tmpHeader - QueryScheduleConferenceInfoHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryScheduleConferenceInfoResponse
func (client *Client) QueryScheduleConferenceInfoWithOptions(tmpReq *QueryScheduleConferenceInfoRequest, tmpHeader *QueryScheduleConferenceInfoHeaders, runtime *util.RuntimeOptions) (_result *QueryScheduleConferenceInfoResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryScheduleConferenceInfoShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryScheduleConferenceInfoShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConferenceId)) {
		body["ScheduleConferenceId"] = request.ScheduleConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryScheduleConferenceInfo"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/queryScheduleConferenceInfo"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryScheduleConferenceInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询预约会议历史会议信息
//
// @param request - QueryScheduleConferenceInfoRequest
//
// @return QueryScheduleConferenceInfoResponse
func (client *Client) QueryScheduleConferenceInfo(request *QueryScheduleConferenceInfoRequest) (_result *QueryScheduleConferenceInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryScheduleConferenceInfoHeaders{}
	_result = &QueryScheduleConferenceInfoResponse{}
	_body, _err := client.QueryScheduleConferenceInfoWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询员工勋章列表
//
// @param tmpReq - QueryUserHonorsRequest
//
// @param tmpHeader - QueryUserHonorsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryUserHonorsResponse
func (client *Client) QueryUserHonorsWithOptions(tmpReq *QueryUserHonorsRequest, tmpHeader *QueryUserHonorsHeaders, runtime *util.RuntimeOptions) (_result *QueryUserHonorsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &QueryUserHonorsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &QueryUserHonorsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["maxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		body["nextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["orgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["userId"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryUserHonors"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/honor/queryUserHonors"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryUserHonorsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询员工勋章列表
//
// @param request - QueryUserHonorsRequest
//
// @return QueryUserHonorsResponse
func (client *Client) QueryUserHonors(request *QueryUserHonorsRequest) (_result *QueryUserHonorsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &QueryUserHonorsHeaders{}
	_result = &QueryUserHonorsResponse{}
	_body, _err := client.QueryUserHonorsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 收回勋章
//
// @param tmpReq - RecallHonorRequest
//
// @param tmpHeader - RecallHonorHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RecallHonorResponse
func (client *Client) RecallHonorWithOptions(tmpReq *RecallHonorRequest, tmpHeader *RecallHonorHeaders, runtime *util.RuntimeOptions) (_result *RecallHonorResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RecallHonorShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &RecallHonorShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.HonorId)) {
		body["honorId"] = request.HonorId
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["orgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["userId"] = request.UserId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RecallHonor"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/honor/recallHonor"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RecallHonorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 收回勋章
//
// @param request - RecallHonorRequest
//
// @return RecallHonorResponse
func (client *Client) RecallHonor(request *RecallHonorRequest) (_result *RecallHonorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &RecallHonorHeaders{}
	_result = &RecallHonorResponse{}
	_body, _err := client.RecallHonorWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取日志接收人员列表
//
// @param tmpReq - ReceiverListReportRequest
//
// @param tmpHeader - ReceiverListReportHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ReceiverListReportResponse
func (client *Client) ReceiverListReportWithOptions(tmpReq *ReceiverListReportRequest, tmpHeader *ReceiverListReportHeaders, runtime *util.RuntimeOptions) (_result *ReceiverListReportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &ReceiverListReportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &ReceiverListReportShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		body["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.ReportId)) {
		body["ReportId"] = request.ReportId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ReceiverListReport"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/receiverListReport"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReceiverListReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取日志接收人员列表
//
// @param request - ReceiverListReportRequest
//
// @return ReceiverListReportResponse
func (client *Client) ReceiverListReport(request *ReceiverListReportRequest) (_result *ReceiverListReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &ReceiverListReportHeaders{}
	_result = &ReceiverListReportResponse{}
	_body, _err := client.ReceiverListReportWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 转交任务
//
// @param request - RedirectTaskRequest
//
// @param tmpHeader - RedirectTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RedirectTaskResponse
func (client *Client) RedirectTaskWithOptions(request *RedirectTaskRequest, tmpHeader *RedirectTaskHeaders, runtime *util.RuntimeOptions) (_result *RedirectTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &RedirectTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.ByManager)) {
		body["ByManager"] = request.ByManager
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.NowActionExecutorId)) {
		body["NowActionExecutorId"] = request.NowActionExecutorId
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Remark)) {
		body["Remark"] = request.Remark
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RedirectTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/redirectTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RedirectTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 转交任务
//
// @param request - RedirectTaskRequest
//
// @return RedirectTaskResponse
func (client *Client) RedirectTask(request *RedirectTaskRequest) (_result *RedirectTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &RedirectTaskHeaders{}
	_result = &RedirectTaskResponse{}
	_body, _err := client.RedirectTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除日程参与者
//
// @param tmpReq - RemoveAttendeeRequest
//
// @param tmpHeader - RemoveAttendeeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveAttendeeResponse
func (client *Client) RemoveAttendeeWithOptions(tmpReq *RemoveAttendeeRequest, tmpHeader *RemoveAttendeeHeaders, runtime *util.RuntimeOptions) (_result *RemoveAttendeeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveAttendeeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &RemoveAttendeeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.AttendeesToRemove)) {
		request.AttendeesToRemoveShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.AttendeesToRemove, tea.String("AttendeesToRemove"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AttendeesToRemoveShrink)) {
		body["AttendeesToRemove"] = request.AttendeesToRemoveShrink
	}

	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		body["EventId"] = request.EventId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveAttendee"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/removeAttendee"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveAttendeeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除日程参与者
//
// @param request - RemoveAttendeeRequest
//
// @return RemoveAttendeeResponse
func (client *Client) RemoveAttendee(request *RemoveAttendeeRequest) (_result *RemoveAttendeeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &RemoveAttendeeHeaders{}
	_result = &RemoveAttendeeResponse{}
	_body, _err := client.RemoveAttendeeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消预定会议室
//
// @param tmpReq - RemoveMeetingRoomsRequest
//
// @param tmpHeader - RemoveMeetingRoomsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RemoveMeetingRoomsResponse
func (client *Client) RemoveMeetingRoomsWithOptions(tmpReq *RemoveMeetingRoomsRequest, tmpHeader *RemoveMeetingRoomsHeaders, runtime *util.RuntimeOptions) (_result *RemoveMeetingRoomsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RemoveMeetingRoomsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &RemoveMeetingRoomsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.MeetingRoomsToRemove)) {
		request.MeetingRoomsToRemoveShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.MeetingRoomsToRemove, tea.String("MeetingRoomsToRemove"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.EventId)) {
		body["EventId"] = request.EventId
	}

	if !tea.BoolValue(util.IsUnset(request.MeetingRoomsToRemoveShrink)) {
		body["MeetingRoomsToRemove"] = request.MeetingRoomsToRemoveShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveMeetingRooms"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/removeMeetingRooms"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveMeetingRoomsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消预定会议室
//
// @param request - RemoveMeetingRoomsRequest
//
// @return RemoveMeetingRoomsResponse
func (client *Client) RemoveMeetingRooms(request *RemoveMeetingRoomsRequest) (_result *RemoveMeetingRoomsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &RemoveMeetingRoomsHeaders{}
	_result = &RemoveMeetingRoomsResponse{}
	_body, _err := client.RemoveMeetingRoomsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 保存日志内容
//
// @param tmpReq - SaveContentRequest
//
// @param tmpHeader - SaveContentHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveContentResponse
func (client *Client) SaveContentWithOptions(tmpReq *SaveContentRequest, tmpHeader *SaveContentHeaders, runtime *util.RuntimeOptions) (_result *SaveContentResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SaveContentShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SaveContentShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Contents)) {
		request.ContentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Contents, tea.String("Contents"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentsShrink)) {
		body["Contents"] = request.ContentsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DdFrom)) {
		body["DdFrom"] = request.DdFrom
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveContent"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/saveContent"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 保存日志内容
//
// @param request - SaveContentRequest
//
// @return SaveContentResponse
func (client *Client) SaveContent(request *SaveContentRequest) (_result *SaveContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SaveContentHeaders{}
	_result = &SaveContentResponse{}
	_body, _err := client.SaveContentWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 保存表单数据
//
// @param request - SaveFormDataRequest
//
// @param tmpHeader - SaveFormDataHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveFormDataResponse
func (client *Client) SaveFormDataWithOptions(request *SaveFormDataRequest, tmpHeader *SaveFormDataHeaders, runtime *util.RuntimeOptions) (_result *SaveFormDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SaveFormDataShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormDataJson)) {
		body["FormDataJson"] = request.FormDataJson
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveFormData"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/saveFormData"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveFormDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 保存表单数据
//
// @param request - SaveFormDataRequest
//
// @return SaveFormDataResponse
func (client *Client) SaveFormData(request *SaveFormDataRequest) (_result *SaveFormDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SaveFormDataHeaders{}
	_result = &SaveFormDataResponse{}
	_body, _err := client.SaveFormDataWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交表单或流程实例下的评论
//
// @param request - SaveFormRemarkRequest
//
// @param tmpHeader - SaveFormRemarkHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SaveFormRemarkResponse
func (client *Client) SaveFormRemarkWithOptions(request *SaveFormRemarkRequest, tmpHeader *SaveFormRemarkHeaders, runtime *util.RuntimeOptions) (_result *SaveFormRemarkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SaveFormRemarkShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.AtUserId)) {
		body["AtUserId"] = request.AtUserId
	}

	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceId)) {
		body["FormInstanceId"] = request.FormInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ReplyId)) {
		body["ReplyId"] = request.ReplyId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SaveFormRemark"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/saveFormRemark"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SaveFormRemarkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交表单或流程实例下的评论
//
// @param request - SaveFormRemarkRequest
//
// @return SaveFormRemarkResponse
func (client *Client) SaveFormRemark(request *SaveFormRemarkRequest) (_result *SaveFormRemarkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SaveFormRemarkHeaders{}
	_result = &SaveFormRemarkResponse{}
	_body, _err := client.SaveFormRemarkWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取员工组件的值
//
// @param request - SearchEmployeeFieldValuesRequest
//
// @param tmpHeader - SearchEmployeeFieldValuesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchEmployeeFieldValuesResponse
func (client *Client) SearchEmployeeFieldValuesWithOptions(request *SearchEmployeeFieldValuesRequest, tmpHeader *SearchEmployeeFieldValuesHeaders, runtime *util.RuntimeOptions) (_result *SearchEmployeeFieldValuesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SearchEmployeeFieldValuesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedFromTimeGMT)) {
		body["ModifiedFromTimeGMT"] = request.ModifiedFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedToTimeGMT)) {
		body["ModifiedToTimeGMT"] = request.ModifiedToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.OriginatorId)) {
		body["OriginatorId"] = request.OriginatorId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchFieldJson)) {
		body["SearchFieldJson"] = request.SearchFieldJson
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.TargetFieldJson)) {
		body["TargetFieldJson"] = request.TargetFieldJson
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchEmployeeFieldValues"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/searchEmployeeFieldValues"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchEmployeeFieldValuesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取员工组件的值
//
// @param request - SearchEmployeeFieldValuesRequest
//
// @return SearchEmployeeFieldValuesResponse
func (client *Client) SearchEmployeeFieldValues(request *SearchEmployeeFieldValuesRequest) (_result *SearchEmployeeFieldValuesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SearchEmployeeFieldValuesHeaders{}
	_result = &SearchEmployeeFieldValuesResponse{}
	_body, _err := client.SearchEmployeeFieldValuesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取多个表单实例ID
//
// @param request - SearchFormDataIdListRequest
//
// @param tmpHeader - SearchFormDataIdListHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchFormDataIdListResponse
func (client *Client) SearchFormDataIdListWithOptions(request *SearchFormDataIdListRequest, tmpHeader *SearchFormDataIdListHeaders, runtime *util.RuntimeOptions) (_result *SearchFormDataIdListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SearchFormDataIdListShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedFromTimeGMT)) {
		body["ModifiedFromTimeGMT"] = request.ModifiedFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedToTimeGMT)) {
		body["ModifiedToTimeGMT"] = request.ModifiedToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.OriginatorId)) {
		body["OriginatorId"] = request.OriginatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchFieldJson)) {
		body["SearchFieldJson"] = request.SearchFieldJson
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchFormDataIdList"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/searchFormDataIdList"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchFormDataIdListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取多个表单实例ID
//
// @param request - SearchFormDataIdListRequest
//
// @return SearchFormDataIdListResponse
func (client *Client) SearchFormDataIdList(request *SearchFormDataIdListRequest) (_result *SearchFormDataIdListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SearchFormDataIdListHeaders{}
	_result = &SearchFormDataIdListResponse{}
	_body, _err := client.SearchFormDataIdListWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过高级查询条件获取表单实例数据（包括子表单组件数据）
//
// @param request - SearchFormDataSecondGenerationRequest
//
// @param tmpHeader - SearchFormDataSecondGenerationHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchFormDataSecondGenerationResponse
func (client *Client) SearchFormDataSecondGenerationWithOptions(request *SearchFormDataSecondGenerationRequest, tmpHeader *SearchFormDataSecondGenerationHeaders, runtime *util.RuntimeOptions) (_result *SearchFormDataSecondGenerationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SearchFormDataSecondGenerationShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedFromTimeGMT)) {
		body["ModifiedFromTimeGMT"] = request.ModifiedFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedToTimeGMT)) {
		body["ModifiedToTimeGMT"] = request.ModifiedToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.OrderConfigJson)) {
		body["OrderConfigJson"] = request.OrderConfigJson
	}

	if !tea.BoolValue(util.IsUnset(request.OriginatorId)) {
		body["OriginatorId"] = request.OriginatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchCondition)) {
		body["SearchCondition"] = request.SearchCondition
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchFormDataSecondGeneration"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/searchFormDataSecondGeneration"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchFormDataSecondGenerationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过高级查询条件获取表单实例数据（包括子表单组件数据）
//
// @param request - SearchFormDataSecondGenerationRequest
//
// @return SearchFormDataSecondGenerationResponse
func (client *Client) SearchFormDataSecondGeneration(request *SearchFormDataSecondGenerationRequest) (_result *SearchFormDataSecondGenerationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SearchFormDataSecondGenerationHeaders{}
	_result = &SearchFormDataSecondGenerationResponse{}
	_body, _err := client.SearchFormDataSecondGenerationWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
//
// @param request - SearchFormDataSecondGenerationNoTableFieldRequest
//
// @param tmpHeader - SearchFormDataSecondGenerationNoTableFieldHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchFormDataSecondGenerationNoTableFieldResponse
func (client *Client) SearchFormDataSecondGenerationNoTableFieldWithOptions(request *SearchFormDataSecondGenerationNoTableFieldRequest, tmpHeader *SearchFormDataSecondGenerationNoTableFieldHeaders, runtime *util.RuntimeOptions) (_result *SearchFormDataSecondGenerationNoTableFieldResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SearchFormDataSecondGenerationNoTableFieldShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedFromTimeGMT)) {
		body["ModifiedFromTimeGMT"] = request.ModifiedFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedToTimeGMT)) {
		body["ModifiedToTimeGMT"] = request.ModifiedToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.OrderConfigJson)) {
		body["OrderConfigJson"] = request.OrderConfigJson
	}

	if !tea.BoolValue(util.IsUnset(request.OriginatorId)) {
		body["OriginatorId"] = request.OriginatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchCondition)) {
		body["SearchCondition"] = request.SearchCondition
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchFormDataSecondGenerationNoTableField"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/searchFormDataSecondGenerationNoTableField"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchFormDataSecondGenerationNoTableFieldResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过高级查询条件获取表单实例数据（不包括子表单组件数据）
//
// @param request - SearchFormDataSecondGenerationNoTableFieldRequest
//
// @return SearchFormDataSecondGenerationNoTableFieldResponse
func (client *Client) SearchFormDataSecondGenerationNoTableField(request *SearchFormDataSecondGenerationNoTableFieldRequest) (_result *SearchFormDataSecondGenerationNoTableFieldResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SearchFormDataSecondGenerationNoTableFieldHeaders{}
	_result = &SearchFormDataSecondGenerationNoTableFieldResponse{}
	_body, _err := client.SearchFormDataSecondGenerationNoTableFieldWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询表单实例数据
//
// @param request - SearchFormDatasRequest
//
// @param tmpHeader - SearchFormDatasHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchFormDatasResponse
func (client *Client) SearchFormDatasWithOptions(request *SearchFormDatasRequest, tmpHeader *SearchFormDatasHeaders, runtime *util.RuntimeOptions) (_result *SearchFormDatasResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SearchFormDatasShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.CreateFromTimeGMT)) {
		body["CreateFromTimeGMT"] = request.CreateFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CreateToTimeGMT)) {
		body["CreateToTimeGMT"] = request.CreateToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentPage)) {
		body["CurrentPage"] = request.CurrentPage
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicOrder)) {
		body["DynamicOrder"] = request.DynamicOrder
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedFromTimeGMT)) {
		body["ModifiedFromTimeGMT"] = request.ModifiedFromTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.ModifiedToTimeGMT)) {
		body["ModifiedToTimeGMT"] = request.ModifiedToTimeGMT
	}

	if !tea.BoolValue(util.IsUnset(request.OriginatorId)) {
		body["OriginatorId"] = request.OriginatorId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchFieldJson)) {
		body["SearchFieldJson"] = request.SearchFieldJson
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchFormDatas"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/searchFormDatas"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchFormDatasResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询表单实例数据
//
// @param request - SearchFormDatasRequest
//
// @return SearchFormDatasResponse
func (client *Client) SearchFormDatas(request *SearchFormDatasRequest) (_result *SearchFormDatasResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SearchFormDatasHeaders{}
	_result = &SearchFormDatasResponse{}
	_body, _err := client.SearchFormDatasWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 根据关键词搜索企业内部群
//
// @param request - SearchInnerGroupsRequest
//
// @param tmpHeader - SearchInnerGroupsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchInnerGroupsResponse
func (client *Client) SearchInnerGroupsWithOptions(request *SearchInnerGroupsRequest, tmpHeader *SearchInnerGroupsHeaders, runtime *util.RuntimeOptions) (_result *SearchInnerGroupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SearchInnerGroupsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		body["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.SearchKey)) {
		body["SearchKey"] = request.SearchKey
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchInnerGroups"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/im/searchInnerGroups"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchInnerGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 根据关键词搜索企业内部群
//
// @param request - SearchInnerGroupsRequest
//
// @return SearchInnerGroupsResponse
func (client *Client) SearchInnerGroups(request *SearchInnerGroupsRequest) (_result *SearchInnerGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SearchInnerGroupsHeaders{}
	_result = &SearchInnerGroupsResponse{}
	_body, _err := client.SearchInnerGroupsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送钉钉Banner通知
//
// @param tmpReq - SendBannerRequest
//
// @param tmpHeader - SendBannerHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendBannerResponse
func (client *Client) SendBannerWithOptions(tmpReq *SendBannerRequest, tmpHeader *SendBannerHeaders, runtime *util.RuntimeOptions) (_result *SendBannerResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SendBannerShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SendBannerShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Content)) {
		request.ContentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Content, tea.String("Content"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentShrink)) {
		body["Content"] = request.ContentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendBanner"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/watt/sendBanner"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendBannerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送钉钉Banner通知
//
// @param request - SendBannerRequest
//
// @return SendBannerResponse
func (client *Client) SendBanner(request *SendBannerRequest) (_result *SendBannerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SendBannerHeaders{}
	_result = &SendBannerResponse{}
	_body, _err := client.SendBannerWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送钉钉封屏弹窗
//
// @param tmpReq - SendPopupRequest
//
// @param tmpHeader - SendPopupHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendPopupResponse
func (client *Client) SendPopupWithOptions(tmpReq *SendPopupRequest, tmpHeader *SendPopupHeaders, runtime *util.RuntimeOptions) (_result *SendPopupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SendPopupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SendPopupShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Content)) {
		request.ContentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Content, tea.String("Content"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentShrink)) {
		body["Content"] = request.ContentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendPopup"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/watt/sendPopup"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendPopupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送钉钉封屏弹窗
//
// @param request - SendPopupRequest
//
// @return SendPopupResponse
func (client *Client) SendPopup(request *SendPopupRequest) (_result *SendPopupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SendPopupHeaders{}
	_result = &SendPopupResponse{}
	_body, _err := client.SendPopupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送钉钉搜索底纹
//
// @param tmpReq - SendSearchShadeRequest
//
// @param tmpHeader - SendSearchShadeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendSearchShadeResponse
func (client *Client) SendSearchShadeWithOptions(tmpReq *SendSearchShadeRequest, tmpHeader *SendSearchShadeHeaders, runtime *util.RuntimeOptions) (_result *SendSearchShadeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SendSearchShadeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SendSearchShadeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Content)) {
		request.ContentShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Content, tea.String("Content"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentShrink)) {
		body["Content"] = request.ContentShrink
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendSearchShade"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/watt/sendSearchShade"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendSearchShadeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送钉钉搜索底纹
//
// @param request - SendSearchShadeRequest
//
// @return SendSearchShadeResponse
func (client *Client) SendSearchShade(request *SendSearchShadeRequest) (_result *SendSearchShadeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SendSearchShadeHeaders{}
	_result = &SendSearchShadeResponse{}
	_body, _err := client.SendSearchShadeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 指定列隐藏
//
// @param tmpReq - SetColumnsVisibilityRequest
//
// @param tmpHeader - SetColumnsVisibilityHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetColumnsVisibilityResponse
func (client *Client) SetColumnsVisibilityWithOptions(tmpReq *SetColumnsVisibilityRequest, tmpHeader *SetColumnsVisibilityHeaders, runtime *util.RuntimeOptions) (_result *SetColumnsVisibilityResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetColumnsVisibilityShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SetColumnsVisibilityShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Column)) {
		body["Column"] = request.Column
	}

	if !tea.BoolValue(util.IsUnset(request.ColumnCount)) {
		body["ColumnCount"] = request.ColumnCount
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		body["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SetColumnsVisibility"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/setColumnsVisibility"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetColumnsVisibilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 指定列隐藏
//
// @param request - SetColumnsVisibilityRequest
//
// @return SetColumnsVisibilityResponse
func (client *Client) SetColumnsVisibility(request *SetColumnsVisibilityRequest) (_result *SetColumnsVisibilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SetColumnsVisibilityHeaders{}
	_result = &SetColumnsVisibilityResponse{}
	_body, _err := client.SetColumnsVisibilityWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 指定行隐藏
//
// @param tmpReq - SetRowsVisibilityRequest
//
// @param tmpHeader - SetRowsVisibilityHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetRowsVisibilityResponse
func (client *Client) SetRowsVisibilityWithOptions(tmpReq *SetRowsVisibilityRequest, tmpHeader *SetRowsVisibilityHeaders, runtime *util.RuntimeOptions) (_result *SetRowsVisibilityResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SetRowsVisibilityShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SetRowsVisibilityShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Row)) {
		body["Row"] = request.Row
	}

	if !tea.BoolValue(util.IsUnset(request.RowCount)) {
		body["RowCount"] = request.RowCount
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Visibility)) {
		body["Visibility"] = request.Visibility
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SetRowsVisibility"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/setRowsVisibility"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetRowsVisibilityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 指定行隐藏
//
// @param request - SetRowsVisibilityRequest
//
// @return SetRowsVisibilityResponse
func (client *Client) SetRowsVisibility(request *SetRowsVisibilityRequest) (_result *SetRowsVisibilityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SetRowsVisibilityHeaders{}
	_result = &SetRowsVisibilityResponse{}
	_body, _err := client.SetRowsVisibilityWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户发送日志的概要信息
//
// @param tmpReq - SimpleListReportRequest
//
// @param tmpHeader - SimpleListReportHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SimpleListReportResponse
func (client *Client) SimpleListReportWithOptions(tmpReq *SimpleListReportRequest, tmpHeader *SimpleListReportHeaders, runtime *util.RuntimeOptions) (_result *SimpleListReportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SimpleListReportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SimpleListReportShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Cursor)) {
		body["Cursor"] = request.Cursor
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SimpleListReport"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/simpleListReport"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SimpleListReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户发送日志的概要信息
//
// @param request - SimpleListReportRequest
//
// @return SimpleListReportResponse
func (client *Client) SimpleListReport(request *SimpleListReportRequest) (_result *SimpleListReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SimpleListReportHeaders{}
	_result = &SimpleListReportResponse{}
	_body, _err := client.SimpleListReportWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开启视频会议云录制
//
// @param tmpReq - StartCloudRecordRequest
//
// @param tmpHeader - StartCloudRecordHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartCloudRecordResponse
func (client *Client) StartCloudRecordWithOptions(tmpReq *StartCloudRecordRequest, tmpHeader *StartCloudRecordHeaders, runtime *util.RuntimeOptions) (_result *StartCloudRecordResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartCloudRecordShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &StartCloudRecordShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		body["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.SmallWindowPosition)) {
		body["SmallWindowPosition"] = request.SmallWindowPosition
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartCloudRecord"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/startCloudRecord"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartCloudRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开启视频会议云录制
//
// @param request - StartCloudRecordRequest
//
// @return StartCloudRecordResponse
func (client *Client) StartCloudRecord(request *StartCloudRecordRequest) (_result *StartCloudRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &StartCloudRecordHeaders{}
	_result = &StartCloudRecordResponse{}
	_body, _err := client.StartCloudRecordWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发起宜搭审批流程
//
// @param request - StartInstanceRequest
//
// @param tmpHeader - StartInstanceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartInstanceResponse
func (client *Client) StartInstanceWithOptions(request *StartInstanceRequest, tmpHeader *StartInstanceHeaders, runtime *util.RuntimeOptions) (_result *StartInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &StartInstanceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.DepartmentId)) {
		body["DepartmentId"] = request.DepartmentId
	}

	if !tea.BoolValue(util.IsUnset(request.FormDataJson)) {
		body["FormDataJson"] = request.FormDataJson
	}

	if !tea.BoolValue(util.IsUnset(request.FormUuid)) {
		body["FormUuid"] = request.FormUuid
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessCode)) {
		body["ProcessCode"] = request.ProcessCode
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessData)) {
		body["ProcessData"] = request.ProcessData
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartInstance"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/startInstance"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发起宜搭审批流程
//
// @param request - StartInstanceRequest
//
// @return StartInstanceResponse
func (client *Client) StartInstance(request *StartInstanceRequest) (_result *StartInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &StartInstanceHeaders{}
	_result = &StartInstanceResponse{}
	_body, _err := client.StartInstanceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 开启闪记
//
// @param tmpReq - StartMinutesRequest
//
// @param tmpHeader - StartMinutesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartMinutesResponse
func (client *Client) StartMinutesWithOptions(tmpReq *StartMinutesRequest, tmpHeader *StartMinutesHeaders, runtime *util.RuntimeOptions) (_result *StartMinutesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StartMinutesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &StartMinutesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerUserId)) {
		body["ownerUserId"] = request.OwnerUserId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordAudio)) {
		body["recordAudio"] = request.RecordAudio
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartMinutes"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/startMinutes"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartMinutesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 开启闪记
//
// @param request - StartMinutesRequest
//
// @return StartMinutesResponse
func (client *Client) StartMinutes(request *StartMinutesRequest) (_result *StartMinutesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &StartMinutesHeaders{}
	_result = &StartMinutesResponse{}
	_body, _err := client.StartMinutesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取日志相关人员列表
//
// @param tmpReq - StatisticsListByTypeReportRequest
//
// @param tmpHeader - StatisticsListByTypeReportHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StatisticsListByTypeReportResponse
func (client *Client) StatisticsListByTypeReportWithOptions(tmpReq *StatisticsListByTypeReportRequest, tmpHeader *StatisticsListByTypeReportHeaders, runtime *util.RuntimeOptions) (_result *StatisticsListByTypeReportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StatisticsListByTypeReportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &StatisticsListByTypeReportShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		body["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.ReportId)) {
		body["ReportId"] = request.ReportId
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StatisticsListByTypeReport"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/statisticsListByTypeReport"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StatisticsListByTypeReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取日志相关人员列表
//
// @param request - StatisticsListByTypeReportRequest
//
// @return StatisticsListByTypeReportResponse
func (client *Client) StatisticsListByTypeReport(request *StatisticsListByTypeReportRequest) (_result *StatisticsListByTypeReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &StatisticsListByTypeReportHeaders{}
	_result = &StatisticsListByTypeReportResponse{}
	_body, _err := client.StatisticsListByTypeReportWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取日志统计数据
//
// @param tmpReq - StatisticsReportRequest
//
// @param tmpHeader - StatisticsReportHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StatisticsReportResponse
func (client *Client) StatisticsReportWithOptions(tmpReq *StatisticsReportRequest, tmpHeader *StatisticsReportHeaders, runtime *util.RuntimeOptions) (_result *StatisticsReportResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StatisticsReportShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &StatisticsReportShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ReportId)) {
		body["ReportId"] = request.ReportId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StatisticsReport"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/log/statisticsReport"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StatisticsReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取日志统计数据
//
// @param request - StatisticsReportRequest
//
// @return StatisticsReportResponse
func (client *Client) StatisticsReport(request *StatisticsReportRequest) (_result *StatisticsReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &StatisticsReportHeaders{}
	_result = &StatisticsReportResponse{}
	_body, _err := client.StatisticsReportWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 停止视频会议云录制
//
// @param tmpReq - StopCloudRecordRequest
//
// @param tmpHeader - StopCloudRecordHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopCloudRecordResponse
func (client *Client) StopCloudRecordWithOptions(tmpReq *StopCloudRecordRequest, tmpHeader *StopCloudRecordHeaders, runtime *util.RuntimeOptions) (_result *StopCloudRecordResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StopCloudRecordShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &StopCloudRecordShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopCloudRecord"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/stopCloudRecord"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopCloudRecordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 停止视频会议云录制
//
// @param request - StopCloudRecordRequest
//
// @return StopCloudRecordResponse
func (client *Client) StopCloudRecord(request *StopCloudRecordRequest) (_result *StopCloudRecordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &StopCloudRecordHeaders{}
	_result = &StopCloudRecordResponse{}
	_body, _err := client.StopCloudRecordWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 暂停闪记
//
// @param tmpReq - StopMinutesRequest
//
// @param tmpHeader - StopMinutesHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StopMinutesResponse
func (client *Client) StopMinutesWithOptions(tmpReq *StopMinutesRequest, tmpHeader *StopMinutesHeaders, runtime *util.RuntimeOptions) (_result *StopMinutesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &StopMinutesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &StopMinutesShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StopMinutes"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/stopMinutes"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopMinutesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 暂停闪记
//
// @param request - StopMinutesRequest
//
// @return StopMinutesResponse
func (client *Client) StopMinutes(request *StopMinutesRequest) (_result *StopMinutesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &StopMinutesHeaders{}
	_result = &StopMinutesResponse{}
	_body, _err := client.StopMinutesWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 订阅公共日历
//
// @param request - SubscribeCalendarRequest
//
// @param tmpHeader - SubscribeCalendarHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubscribeCalendarResponse
func (client *Client) SubscribeCalendarWithOptions(request *SubscribeCalendarRequest, tmpHeader *SubscribeCalendarHeaders, runtime *util.RuntimeOptions) (_result *SubscribeCalendarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &SubscribeCalendarShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubscribeCalendar"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/subscribeCalendar"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubscribeCalendarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 订阅公共日历
//
// @param request - SubscribeCalendarRequest
//
// @return SubscribeCalendarResponse
func (client *Client) SubscribeCalendar(request *SubscribeCalendarRequest) (_result *SubscribeCalendarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SubscribeCalendarHeaders{}
	_result = &SubscribeCalendarResponse{}
	_body, _err := client.SubscribeCalendarWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 同步钉钉账号类型
//
// @param tmpReq - SyncDingTypeRequest
//
// @param tmpHeader - SyncDingTypeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SyncDingTypeResponse
func (client *Client) SyncDingTypeWithOptions(tmpReq *SyncDingTypeRequest, tmpHeader *SyncDingTypeHeaders, runtime *util.RuntimeOptions) (_result *SyncDingTypeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SyncDingTypeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &SyncDingTypeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DingType)) {
		body["DingType"] = request.DingType
	}

	if !tea.BoolValue(util.IsUnset(request.IsDimission)) {
		body["IsDimission"] = request.IsDimission
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		body["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkNo)) {
		body["WorkNo"] = request.WorkNo
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncDingType"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/indepding/syncDingType"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncDingTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 同步钉钉账号类型
//
// @param request - SyncDingTypeRequest
//
// @return SyncDingTypeResponse
func (client *Client) SyncDingType(request *SyncDingTypeRequest) (_result *SyncDingTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &SyncDingTypeHeaders{}
	_result = &SyncDingTypeResponse{}
	_body, _err := client.SyncDingTypeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 终止流程实例
//
// @param request - TerminateInstanceRequest
//
// @param tmpHeader - TerminateInstanceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TerminateInstanceResponse
func (client *Client) TerminateInstanceWithOptions(request *TerminateInstanceRequest, tmpHeader *TerminateInstanceHeaders, runtime *util.RuntimeOptions) (_result *TerminateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &TerminateInstanceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("TerminateInstance"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/terminateInstance"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TerminateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 终止流程实例
//
// @param request - TerminateInstanceRequest
//
// @return TerminateInstanceResponse
func (client *Client) TerminateInstance(request *TerminateInstanceRequest) (_result *TerminateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &TerminateInstanceHeaders{}
	_result = &TerminateInstanceResponse{}
	_body, _err := client.TerminateInstanceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消订阅公共日历
//
// @param request - UnsubscribeCalendarRequest
//
// @param tmpHeader - UnsubscribeCalendarHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnsubscribeCalendarResponse
func (client *Client) UnsubscribeCalendarWithOptions(request *UnsubscribeCalendarRequest, tmpHeader *UnsubscribeCalendarHeaders, runtime *util.RuntimeOptions) (_result *UnsubscribeCalendarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &UnsubscribeCalendarShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UnsubscribeCalendar"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/unsubscribeCalendar"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnsubscribeCalendarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消订阅公共日历
//
// @param request - UnsubscribeCalendarRequest
//
// @return UnsubscribeCalendarResponse
func (client *Client) UnsubscribeCalendar(request *UnsubscribeCalendarRequest) (_result *UnsubscribeCalendarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UnsubscribeCalendarHeaders{}
	_result = &UnsubscribeCalendarResponse{}
	_body, _err := client.UnsubscribeCalendarWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新表单数据
//
// @param request - UpdateFormDataRequest
//
// @param tmpHeader - UpdateFormDataHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateFormDataResponse
func (client *Client) UpdateFormDataWithOptions(request *UpdateFormDataRequest, tmpHeader *UpdateFormDataHeaders, runtime *util.RuntimeOptions) (_result *UpdateFormDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &UpdateFormDataShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.FormInstanceId)) {
		body["FormInstanceId"] = request.FormInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateFormDataJson)) {
		body["UpdateFormDataJson"] = request.UpdateFormDataJson
	}

	if !tea.BoolValue(util.IsUnset(request.UseLatestVersion)) {
		body["UseLatestVersion"] = request.UseLatestVersion
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateFormData"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/updateFormData"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateFormDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新表单数据
//
// @param request - UpdateFormDataRequest
//
// @return UpdateFormDataResponse
func (client *Client) UpdateFormData(request *UpdateFormDataRequest) (_result *UpdateFormDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateFormDataHeaders{}
	_result = &UpdateFormDataResponse{}
	_body, _err := client.UpdateFormDataWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新流程实例
//
// @param request - UpdateInstanceRequest
//
// @param tmpHeader - UpdateInstanceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateInstanceResponse
func (client *Client) UpdateInstanceWithOptions(request *UpdateInstanceRequest, tmpHeader *UpdateInstanceHeaders, runtime *util.RuntimeOptions) (_result *UpdateInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &UpdateInstanceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.ProcessInstanceId)) {
		body["ProcessInstanceId"] = request.ProcessInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	if !tea.BoolValue(util.IsUnset(request.UpdateFormDataJson)) {
		body["UpdateFormDataJson"] = request.UpdateFormDataJson
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateInstance"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/updateInstance"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新流程实例
//
// @param request - UpdateInstanceRequest
//
// @return UpdateInstanceResponse
func (client *Client) UpdateInstance(request *UpdateInstanceRequest) (_result *UpdateInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateInstanceHeaders{}
	_result = &UpdateInstanceResponse{}
	_body, _err := client.UpdateInstanceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改直播属性信息
//
// @param tmpReq - UpdateLiveRequest
//
// @param tmpHeader - UpdateLiveHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveResponse
func (client *Client) UpdateLiveWithOptions(tmpReq *UpdateLiveRequest, tmpHeader *UpdateLiveHeaders, runtime *util.RuntimeOptions) (_result *UpdateLiveResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateLiveShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		body["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Introduction)) {
		body["Introduction"] = request.Introduction
	}

	if !tea.BoolValue(util.IsUnset(request.LiveId)) {
		body["LiveId"] = request.LiveId
	}

	if !tea.BoolValue(util.IsUnset(request.PreEndTime)) {
		body["PreEndTime"] = request.PreEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PreStartTime)) {
		body["PreStartTime"] = request.PreStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLive"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/updateLive"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改直播属性信息
//
// @param request - UpdateLiveRequest
//
// @return UpdateLiveResponse
func (client *Client) UpdateLive(request *UpdateLiveRequest) (_result *UpdateLiveResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateLiveHeaders{}
	_result = &UpdateLiveResponse{}
	_body, _err := client.UpdateLiveWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新会议室信息
//
// @param tmpReq - UpdateMeetingRoomRequest
//
// @param tmpHeader - UpdateMeetingRoomHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMeetingRoomResponse
func (client *Client) UpdateMeetingRoomWithOptions(tmpReq *UpdateMeetingRoomRequest, tmpHeader *UpdateMeetingRoomHeaders, runtime *util.RuntimeOptions) (_result *UpdateMeetingRoomResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMeetingRoomShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateMeetingRoomShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ReservationAuthority)) {
		request.ReservationAuthorityShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ReservationAuthority, tea.String("ReservationAuthority"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RoomLabelIds)) {
		request.RoomLabelIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoomLabelIds, tea.String("RoomLabelIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.RoomLocation)) {
		request.RoomLocationShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RoomLocation, tea.String("RoomLocation"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EnableCycleReservation)) {
		body["EnableCycleReservation"] = request.EnableCycleReservation
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.IsvRoomId)) {
		body["IsvRoomId"] = request.IsvRoomId
	}

	if !tea.BoolValue(util.IsUnset(request.ReservationAuthorityShrink)) {
		body["ReservationAuthority"] = request.ReservationAuthorityShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RoomCapacity)) {
		body["RoomCapacity"] = request.RoomCapacity
	}

	if !tea.BoolValue(util.IsUnset(request.RoomId)) {
		body["RoomId"] = request.RoomId
	}

	if !tea.BoolValue(util.IsUnset(request.RoomLabelIdsShrink)) {
		body["RoomLabelIds"] = request.RoomLabelIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RoomLocationShrink)) {
		body["RoomLocation"] = request.RoomLocationShrink
	}

	if !tea.BoolValue(util.IsUnset(request.RoomName)) {
		body["RoomName"] = request.RoomName
	}

	if !tea.BoolValue(util.IsUnset(request.RoomPicture)) {
		body["RoomPicture"] = request.RoomPicture
	}

	if !tea.BoolValue(util.IsUnset(request.RoomStatus)) {
		body["RoomStatus"] = request.RoomStatus
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMeetingRoom"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/updateMeetingRoom"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMeetingRoomResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新会议室信息
//
// @param request - UpdateMeetingRoomRequest
//
// @return UpdateMeetingRoomResponse
func (client *Client) UpdateMeetingRoom(request *UpdateMeetingRoomRequest) (_result *UpdateMeetingRoomResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateMeetingRoomHeaders{}
	_result = &UpdateMeetingRoomResponse{}
	_body, _err := client.UpdateMeetingRoomWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新会议室分组信息
//
// @param tmpReq - UpdateMeetingRoomGroupRequest
//
// @param tmpHeader - UpdateMeetingRoomGroupHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMeetingRoomGroupResponse
func (client *Client) UpdateMeetingRoomGroupWithOptions(tmpReq *UpdateMeetingRoomGroupRequest, tmpHeader *UpdateMeetingRoomGroupHeaders, runtime *util.RuntimeOptions) (_result *UpdateMeetingRoomGroupResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateMeetingRoomGroupShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateMeetingRoomGroupShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		body["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.GroupName)) {
		body["GroupName"] = request.GroupName
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMeetingRoomGroup"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/updateMeetingRoomGroup"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMeetingRoomGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新会议室分组信息
//
// @param request - UpdateMeetingRoomGroupRequest
//
// @return UpdateMeetingRoomGroupResponse
func (client *Client) UpdateMeetingRoomGroup(request *UpdateMeetingRoomGroupRequest) (_result *UpdateMeetingRoomGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateMeetingRoomGroupHeaders{}
	_result = &UpdateMeetingRoomGroupResponse{}
	_body, _err := client.UpdateMeetingRoomGroupWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新单元格区域
//
// @param tmpReq - UpdateRangeRequest
//
// @param tmpHeader - UpdateRangeHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateRangeResponse
func (client *Client) UpdateRangeWithOptions(tmpReq *UpdateRangeRequest, tmpHeader *UpdateRangeHeaders, runtime *util.RuntimeOptions) (_result *UpdateRangeResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateRangeShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateRangeShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.BackgroundColors)) {
		request.BackgroundColorsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.BackgroundColors, tea.String("BackgroundColors"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Hyperlinks)) {
		request.HyperlinksShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Hyperlinks, tea.String("Hyperlinks"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Values)) {
		request.ValuesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Values, tea.String("Values"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackgroundColorsShrink)) {
		body["BackgroundColors"] = request.BackgroundColorsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.HyperlinksShrink)) {
		body["Hyperlinks"] = request.HyperlinksShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NumberFormat)) {
		body["NumberFormat"] = request.NumberFormat
	}

	if !tea.BoolValue(util.IsUnset(request.RangeAddress)) {
		body["RangeAddress"] = request.RangeAddress
	}

	if !tea.BoolValue(util.IsUnset(request.SheetId)) {
		body["SheetId"] = request.SheetId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ValuesShrink)) {
		body["Values"] = request.ValuesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkbookId)) {
		body["WorkbookId"] = request.WorkbookId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateRange"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/updateRange"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateRangeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新单元格区域
//
// @param request - UpdateRangeRequest
//
// @return UpdateRangeResponse
func (client *Client) UpdateRange(request *UpdateRangeRequest) (_result *UpdateRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateRangeHeaders{}
	_result = &UpdateRangeResponse{}
	_body, _err := client.UpdateRangeWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新预约会议设置
//
// @param tmpReq - UpdateScheduleConfSettingsRequest
//
// @param tmpHeader - UpdateScheduleConfSettingsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateScheduleConfSettingsResponse
func (client *Client) UpdateScheduleConfSettingsWithOptions(tmpReq *UpdateScheduleConfSettingsRequest, tmpHeader *UpdateScheduleConfSettingsHeaders, runtime *util.RuntimeOptions) (_result *UpdateScheduleConfSettingsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateScheduleConfSettingsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateScheduleConfSettingsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfSettingModel)) {
		request.ScheduleConfSettingModelShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfSettingModel, tea.String("ScheduleConfSettingModel"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ScheduleConfSettingModelShrink)) {
		body["ScheduleConfSettingModel"] = request.ScheduleConfSettingModelShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConferenceId)) {
		body["ScheduleConferenceId"] = request.ScheduleConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateScheduleConfSettings"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/updateScheduleConfSettings"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateScheduleConfSettingsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新预约会议设置
//
// @param request - UpdateScheduleConfSettingsRequest
//
// @return UpdateScheduleConfSettingsResponse
func (client *Client) UpdateScheduleConfSettings(request *UpdateScheduleConfSettingsRequest) (_result *UpdateScheduleConfSettingsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateScheduleConfSettingsHeaders{}
	_result = &UpdateScheduleConfSettingsResponse{}
	_body, _err := client.UpdateScheduleConfSettingsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新预约会议
//
// @param tmpReq - UpdateScheduleConferenceRequest
//
// @param tmpHeader - UpdateScheduleConferenceHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateScheduleConferenceResponse
func (client *Client) UpdateScheduleConferenceWithOptions(tmpReq *UpdateScheduleConferenceRequest, tmpHeader *UpdateScheduleConferenceHeaders, runtime *util.RuntimeOptions) (_result *UpdateScheduleConferenceResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateScheduleConferenceShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateScheduleConferenceShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConferenceId)) {
		body["ScheduleConferenceId"] = request.ScheduleConferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		body["Title"] = request.Title
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateScheduleConference"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/updateScheduleConference"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateScheduleConferenceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新预约会议
//
// @param request - UpdateScheduleConferenceRequest
//
// @return UpdateScheduleConferenceResponse
func (client *Client) UpdateScheduleConference(request *UpdateScheduleConferenceRequest) (_result *UpdateScheduleConferenceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateScheduleConferenceHeaders{}
	_result = &UpdateScheduleConferenceResponse{}
	_body, _err := client.UpdateScheduleConferenceWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新状态
//
// @param tmpReq - UpdateStatusRequest
//
// @param tmpHeader - UpdateStatusHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateStatusResponse
func (client *Client) UpdateStatusWithOptions(tmpReq *UpdateStatusRequest, tmpHeader *UpdateStatusHeaders, runtime *util.RuntimeOptions) (_result *UpdateStatusResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateStatusShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ErrorLines)) {
		request.ErrorLinesShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ErrorLines, tea.String("ErrorLines"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppType)) {
		body["AppType"] = request.AppType
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorLinesShrink)) {
		body["ErrorLines"] = request.ErrorLinesShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ImportSequence)) {
		body["ImportSequence"] = request.ImportSequence
	}

	if !tea.BoolValue(util.IsUnset(request.Language)) {
		body["Language"] = request.Language
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.SystemToken)) {
		body["SystemToken"] = request.SystemToken
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateStatus"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/yida/updateStatus"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新状态
//
// @param request - UpdateStatusRequest
//
// @return UpdateStatusResponse
func (client *Client) UpdateStatus(request *UpdateStatusRequest) (_result *UpdateStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateStatusHeaders{}
	_result = &UpdateStatusResponse{}
	_body, _err := client.UpdateStatusWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新订阅日历
//
// @param tmpReq - UpdateSubscribedCalendarsRequest
//
// @param tmpHeader - UpdateSubscribedCalendarsHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSubscribedCalendarsResponse
func (client *Client) UpdateSubscribedCalendarsWithOptions(tmpReq *UpdateSubscribedCalendarsRequest, tmpHeader *UpdateSubscribedCalendarsHeaders, runtime *util.RuntimeOptions) (_result *UpdateSubscribedCalendarsResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateSubscribedCalendarsShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateSubscribedCalendarsShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Managers)) {
		request.ManagersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Managers, tea.String("Managers"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.SubscribeScope)) {
		request.SubscribeScopeShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SubscribeScope, tea.String("SubscribeScope"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CalendarId)) {
		body["CalendarId"] = request.CalendarId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ManagersShrink)) {
		body["Managers"] = request.ManagersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.SubscribeScopeShrink)) {
		body["SubscribeScope"] = request.SubscribeScopeShrink
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSubscribedCalendars"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/calendar/updateSubscribedCalendars"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSubscribedCalendarsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新订阅日历
//
// @param request - UpdateSubscribedCalendarsRequest
//
// @return UpdateSubscribedCalendarsResponse
func (client *Client) UpdateSubscribedCalendars(request *UpdateSubscribedCalendarsRequest) (_result *UpdateSubscribedCalendarsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateSubscribedCalendarsHeaders{}
	_result = &UpdateSubscribedCalendarsResponse{}
	_body, _err := client.UpdateSubscribedCalendarsWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新代办
//
// @param tmpReq - UpdateTodoTaskRequest
//
// @param tmpHeader - UpdateTodoTaskHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTodoTaskResponse
func (client *Client) UpdateTodoTaskWithOptions(tmpReq *UpdateTodoTaskRequest, tmpHeader *UpdateTodoTaskHeaders, runtime *util.RuntimeOptions) (_result *UpdateTodoTaskResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateTodoTaskShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateTodoTaskShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExecutorIds)) {
		request.ExecutorIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExecutorIds, tea.String("executorIds"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ParticipantIds)) {
		request.ParticipantIdsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ParticipantIds, tea.String("participantIds"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Done)) {
		body["done"] = request.Done
	}

	if !tea.BoolValue(util.IsUnset(request.DueTime)) {
		body["dueTime"] = request.DueTime
	}

	if !tea.BoolValue(util.IsUnset(request.ExecutorIdsShrink)) {
		body["executorIds"] = request.ExecutorIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ParticipantIdsShrink)) {
		body["participantIds"] = request.ParticipantIdsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Subject)) {
		body["subject"] = request.Subject
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["taskId"] = request.TaskId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTodoTask"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/task/updateTodoTask"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTodoTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新代办
//
// @param request - UpdateTodoTaskRequest
//
// @return UpdateTodoTaskResponse
func (client *Client) UpdateTodoTask(request *UpdateTodoTaskRequest) (_result *UpdateTodoTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateTodoTaskHeaders{}
	_result = &UpdateTodoTaskResponse{}
	_body, _err := client.UpdateTodoTaskWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新代办执行者状态
//
// @param tmpReq - UpdateTodoTaskExecutorStatusRequest
//
// @param tmpHeader - UpdateTodoTaskExecutorStatusHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTodoTaskExecutorStatusResponse
func (client *Client) UpdateTodoTaskExecutorStatusWithOptions(tmpReq *UpdateTodoTaskExecutorStatusRequest, tmpHeader *UpdateTodoTaskExecutorStatusHeaders, runtime *util.RuntimeOptions) (_result *UpdateTodoTaskExecutorStatusResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateTodoTaskExecutorStatusShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateTodoTaskExecutorStatusShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ExecutorStatusList)) {
		request.ExecutorStatusListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ExecutorStatusList, tea.String("executorStatusList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ExecutorStatusListShrink)) {
		body["executorStatusList"] = request.ExecutorStatusListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OperatorId)) {
		body["operatorId"] = request.OperatorId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["taskId"] = request.TaskId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTodoTaskExecutorStatus"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/task/updateTodoTaskExecutorStatus"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTodoTaskExecutorStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新代办执行者状态
//
// @param request - UpdateTodoTaskExecutorStatusRequest
//
// @return UpdateTodoTaskExecutorStatusResponse
func (client *Client) UpdateTodoTaskExecutorStatus(request *UpdateTodoTaskExecutorStatusRequest) (_result *UpdateTodoTaskExecutorStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateTodoTaskExecutorStatusHeaders{}
	_result = &UpdateTodoTaskExecutorStatusResponse{}
	_body, _err := client.UpdateTodoTaskExecutorStatusWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新企业账号用户头像
//
// @param request - UpdateUserAvatarRequest
//
// @param tmpHeader - UpdateUserAvatarHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateUserAvatarResponse
func (client *Client) UpdateUserAvatarWithOptions(request *UpdateUserAvatarRequest, tmpHeader *UpdateUserAvatarHeaders, runtime *util.RuntimeOptions) (_result *UpdateUserAvatarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	headers := &UpdateUserAvatarShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarMediaId)) {
		body["AvatarMediaId"] = request.AvatarMediaId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateUserAvatar"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/contact/updateUserAvatar"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateUserAvatarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新企业账号用户头像
//
// @param request - UpdateUserAvatarRequest
//
// @return UpdateUserAvatarResponse
func (client *Client) UpdateUserAvatar(request *UpdateUserAvatarRequest) (_result *UpdateUserAvatarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateUserAvatarHeaders{}
	_result = &UpdateUserAvatarResponse{}
	_body, _err := client.UpdateUserAvatarWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置正在进行中的视频会议属性
//
// @param tmpReq - UpdateVideoConferenceSettingRequest
//
// @param tmpHeader - UpdateVideoConferenceSettingHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateVideoConferenceSettingResponse
func (client *Client) UpdateVideoConferenceSettingWithOptions(tmpReq *UpdateVideoConferenceSettingRequest, tmpHeader *UpdateVideoConferenceSettingHeaders, runtime *util.RuntimeOptions) (_result *UpdateVideoConferenceSettingResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateVideoConferenceSettingShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateVideoConferenceSettingShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AllowUnmuteSelf)) {
		body["AllowUnmuteSelf"] = request.AllowUnmuteSelf
	}

	if !tea.BoolValue(util.IsUnset(request.AutoTransferHost)) {
		body["AutoTransferHost"] = request.AutoTransferHost
	}

	if !tea.BoolValue(util.IsUnset(request.ForbiddenShareScreen)) {
		body["ForbiddenShareScreen"] = request.ForbiddenShareScreen
	}

	if !tea.BoolValue(util.IsUnset(request.LockConference)) {
		body["LockConference"] = request.LockConference
	}

	if !tea.BoolValue(util.IsUnset(request.MuteAll)) {
		body["MuteAll"] = request.MuteAll
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyInternalEmployeesJoin)) {
		body["OnlyInternalEmployeesJoin"] = request.OnlyInternalEmployeesJoin
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ConferenceId)) {
		body["conferenceId"] = request.ConferenceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateVideoConferenceSetting"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/ysp/updateVideoConferenceSetting"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateVideoConferenceSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置正在进行中的视频会议属性
//
// @param request - UpdateVideoConferenceSettingRequest
//
// @return UpdateVideoConferenceSettingResponse
func (client *Client) UpdateVideoConferenceSetting(request *UpdateVideoConferenceSettingRequest) (_result *UpdateVideoConferenceSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateVideoConferenceSettingHeaders{}
	_result = &UpdateVideoConferenceSettingResponse{}
	_body, _err := client.UpdateVideoConferenceSettingWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改知识库文档成员权限
//
// @param tmpReq - UpdateWorkspaceDocMembersRequest
//
// @param tmpHeader - UpdateWorkspaceDocMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWorkspaceDocMembersResponse
func (client *Client) UpdateWorkspaceDocMembersWithOptions(tmpReq *UpdateWorkspaceDocMembersRequest, tmpHeader *UpdateWorkspaceDocMembersHeaders, runtime *util.RuntimeOptions) (_result *UpdateWorkspaceDocMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateWorkspaceDocMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateWorkspaceDocMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Members)) {
		request.MembersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Members, tea.String("Members"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MembersShrink)) {
		body["Members"] = request.MembersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWorkspaceDocMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/updateWorkspaceDocMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWorkspaceDocMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改知识库文档成员权限
//
// @param request - UpdateWorkspaceDocMembersRequest
//
// @return UpdateWorkspaceDocMembersResponse
func (client *Client) UpdateWorkspaceDocMembers(request *UpdateWorkspaceDocMembersRequest) (_result *UpdateWorkspaceDocMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateWorkspaceDocMembersHeaders{}
	_result = &UpdateWorkspaceDocMembersResponse{}
	_body, _err := client.UpdateWorkspaceDocMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新知识库成员权限
//
// @param tmpReq - UpdateWorkspaceMembersRequest
//
// @param tmpHeader - UpdateWorkspaceMembersHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateWorkspaceMembersResponse
func (client *Client) UpdateWorkspaceMembersWithOptions(tmpReq *UpdateWorkspaceMembersRequest, tmpHeader *UpdateWorkspaceMembersHeaders, runtime *util.RuntimeOptions) (_result *UpdateWorkspaceMembersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateWorkspaceMembersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UpdateWorkspaceMembersShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Members)) {
		request.MembersShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Members, tea.String("Members"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MembersShrink)) {
		body["Members"] = request.MembersShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.WorkspaceId)) {
		body["WorkspaceId"] = request.WorkspaceId
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateWorkspaceMembers"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/dingtalk/v1/documents/updateWorkspaceMembers"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateWorkspaceMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新知识库成员权限
//
// @param request - UpdateWorkspaceMembersRequest
//
// @return UpdateWorkspaceMembersResponse
func (client *Client) UpdateWorkspaceMembers(request *UpdateWorkspaceMembersRequest) (_result *UpdateWorkspaceMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UpdateWorkspaceMembersHeaders{}
	_result = &UpdateWorkspaceMembersResponse{}
	_body, _err := client.UpdateWorkspaceMembersWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 上传媒体<br/>
//
// @param tmpReq - UploadMediaRequest
//
// @param tmpHeader - UploadMediaHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadMediaResponse
func (client *Client) UploadMediaWithOptions(tmpReq *UploadMediaRequest, tmpHeader *UploadMediaHeaders, runtime *util.RuntimeOptions) (_result *UploadMediaResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UploadMediaShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &UploadMediaShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.MediaName)) {
		body["mediaName"] = request.MediaName
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		body["mediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["orgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.Url)) {
		body["url"] = request.Url
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadMedia"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/documents/uploadMedia"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 上传媒体<br/>
//
// @param request - UploadMediaRequest
//
// @return UploadMediaResponse
func (client *Client) UploadMedia(request *UploadMediaRequest) (_result *UploadMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &UploadMediaHeaders{}
	_result = &UploadMediaResponse{}
	_body, _err := client.UploadMediaWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 穿戴勋章
//
// @param tmpReq - WearOrgHonorRequest
//
// @param tmpHeader - WearOrgHonorHeaders
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return WearOrgHonorResponse
func (client *Client) WearOrgHonorWithOptions(tmpReq *WearOrgHonorRequest, tmpHeader *WearOrgHonorHeaders, runtime *util.RuntimeOptions) (_result *WearOrgHonorResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &WearOrgHonorShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	headers := &WearOrgHonorShrinkHeaders{}
	openapiutil.Convert(tmpHeader, headers)
	if !tea.BoolValue(util.IsUnset(tmpHeader.AccountContext)) {
		headers.AccountContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpHeader.AccountContext, tea.String("AccountContext"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TenantContext)) {
		request.TenantContextShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TenantContext, tea.String("TenantContext"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TenantContextShrink)) {
		body["TenantContext"] = request.TenantContextShrink
	}

	if !tea.BoolValue(util.IsUnset(request.HonorId)) {
		body["honorId"] = request.HonorId
	}

	if !tea.BoolValue(util.IsUnset(request.OrgId)) {
		body["orgId"] = request.OrgId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["userId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Wear)) {
		body["wear"] = request.Wear
	}

	realHeaders := make(map[string]*string)
	if !tea.BoolValue(util.IsUnset(headers.CommonHeaders)) {
		realHeaders = headers.CommonHeaders
	}

	if !tea.BoolValue(util.IsUnset(headers.AccountContextShrink)) {
		realHeaders["AccountContext"] = util.ToJSONString(headers.AccountContextShrink)
	}

	req := &openapi.OpenApiRequest{
		Headers: realHeaders,
		Body:    openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("WearOrgHonor"),
		Version:     tea.String("2023-04-26"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/aliding/v1/honor/wearOrgHonor"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("ROA"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &WearOrgHonorResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 穿戴勋章
//
// @param request - WearOrgHonorRequest
//
// @return WearOrgHonorResponse
func (client *Client) WearOrgHonor(request *WearOrgHonorRequest) (_result *WearOrgHonorResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	headers := &WearOrgHonorHeaders{}
	_result = &WearOrgHonorResponse{}
	_body, _err := client.WearOrgHonorWithOptions(request, headers, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
