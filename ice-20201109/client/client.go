// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddCategoryRequest struct {
	// This parameter is required.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// example:
	//
	// 5
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryRequest) GoString() string {
	return s.String()
}

func (s *AddCategoryRequest) SetCateName(v string) *AddCategoryRequest {
	s.CateName = &v
	return s
}

func (s *AddCategoryRequest) SetParentId(v int64) *AddCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *AddCategoryRequest) SetType(v string) *AddCategoryRequest {
	s.Type = &v
	return s
}

type AddCategoryResponseBody struct {
	Category *AddCategoryResponseBodyCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBody) SetCategory(v *AddCategoryResponseBodyCategory) *AddCategoryResponseBody {
	s.Category = v
	return s
}

func (s *AddCategoryResponseBody) SetRequestId(v string) *AddCategoryResponseBody {
	s.RequestId = &v
	return s
}

type AddCategoryResponseBodyCategory struct {
	// example:
	//
	// 45
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// -1
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddCategoryResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBodyCategory) SetCateId(v int64) *AddCategoryResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetCateName(v string) *AddCategoryResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetLevel(v int64) *AddCategoryResponseBodyCategory {
	s.Level = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetParentId(v int64) *AddCategoryResponseBodyCategory {
	s.ParentId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetType(v string) *AddCategoryResponseBodyCategory {
	s.Type = &v
	return s
}

type AddCategoryResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponse) GoString() string {
	return s.String()
}

func (s *AddCategoryResponse) SetHeaders(v map[string]*string) *AddCategoryResponse {
	s.Headers = v
	return s
}

func (s *AddCategoryResponse) SetStatusCode(v int32) *AddCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCategoryResponse) SetBody(v *AddCategoryResponseBody) *AddCategoryResponse {
	s.Body = v
	return s
}

type AddEditingProjectMaterialsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// {"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}
	MaterialMaps *string `json:"MaterialMaps,omitempty" xml:"MaterialMaps,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *****b2101cb318c*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s AddEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsRequest) SetMaterialMaps(v string) *AddEditingProjectMaterialsRequest {
	s.MaterialMaps = &v
	return s
}

func (s *AddEditingProjectMaterialsRequest) SetProjectId(v string) *AddEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type AddEditingProjectMaterialsResponseBody struct {
	LiveMaterials []*AddEditingProjectMaterialsResponseBodyLiveMaterials `json:"LiveMaterials,omitempty" xml:"LiveMaterials,omitempty" type:"Repeated"`
	MediaInfos    []*AddEditingProjectMaterialsResponseBodyMediaInfos    `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// example:
	//
	// *****67ae06542b9b93e0d1c387*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// *****9b145c5cafc2e057304fcd*****
	ProjectMaterials []*string `json:"ProjectMaterials,omitempty" xml:"ProjectMaterials,omitempty" type:"Repeated"`
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBody) SetLiveMaterials(v []*AddEditingProjectMaterialsResponseBodyLiveMaterials) *AddEditingProjectMaterialsResponseBody {
	s.LiveMaterials = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetMediaInfos(v []*AddEditingProjectMaterialsResponseBodyMediaInfos) *AddEditingProjectMaterialsResponseBody {
	s.MediaInfos = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetProjectId(v string) *AddEditingProjectMaterialsResponseBody {
	s.ProjectId = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetProjectMaterials(v []*string) *AddEditingProjectMaterialsResponseBody {
	s.ProjectMaterials = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetRequestId(v string) *AddEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyLiveMaterials struct {
	// example:
	//
	// testrecord
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// test.alivecdn.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// rtmp://test.alivecdn.com/testrecord/teststream
	LiveUrl *string `json:"LiveUrl,omitempty" xml:"LiveUrl,omitempty"`
	// example:
	//
	// teststream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyLiveMaterials) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyLiveMaterials) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetAppName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.AppName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetDomainName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.DomainName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetLiveUrl(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.LiveUrl = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetStreamName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.StreamName = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList   []*AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	MediaBasicInfo *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// *****5cb2e35433198daae94a72*****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetFileInfoList(v []*AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetMediaBasicInfo(v *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetMediaId(v string) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList struct {
	FileBasicInfo *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 216.206667
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// audio
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-23T03:32:59Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-23T03:32:59Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// example:
	//
	// sample_description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// *****5cb2e35433198daae94a72*****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// sample_tag
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// Video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-23T03:32:59Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// null
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// http://outin-example.oss-cn-shanghai.aliyuncs.com/test.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// default_title_2020-12-23T03:32:59Z
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type AddEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *AddEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *AddEditingProjectMaterialsResponse) SetStatusCode(v int32) *AddEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddEditingProjectMaterialsResponse) SetBody(v *AddEditingProjectMaterialsResponseBody) *AddEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type AddFavoritePublicMediaRequest struct {
	// example:
	//
	// icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s AddFavoritePublicMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaRequest) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaRequest) SetMediaIds(v string) *AddFavoritePublicMediaRequest {
	s.MediaIds = &v
	return s
}

type AddFavoritePublicMediaResponseBody struct {
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddFavoritePublicMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaResponseBody) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaResponseBody) SetIgnoredList(v []*string) *AddFavoritePublicMediaResponseBody {
	s.IgnoredList = v
	return s
}

func (s *AddFavoritePublicMediaResponseBody) SetRequestId(v string) *AddFavoritePublicMediaResponseBody {
	s.RequestId = &v
	return s
}

type AddFavoritePublicMediaResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddFavoritePublicMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddFavoritePublicMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaResponse) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaResponse) SetHeaders(v map[string]*string) *AddFavoritePublicMediaResponse {
	s.Headers = v
	return s
}

func (s *AddFavoritePublicMediaResponse) SetStatusCode(v int32) *AddFavoritePublicMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *AddFavoritePublicMediaResponse) SetBody(v *AddFavoritePublicMediaResponseBody) *AddFavoritePublicMediaResponse {
	s.Body = v
	return s
}

type AddMediaMarksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 53afdf003a2171ed9c6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// This parameter is required.
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
}

func (s AddMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *AddMediaMarksRequest) SetMediaId(v string) *AddMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *AddMediaMarksRequest) SetMediaMarks(v string) *AddMediaMarksRequest {
	s.MediaMarks = &v
	return s
}

type AddMediaMarksResponseBody struct {
	// example:
	//
	// 53afdf003a******6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
	// example:
	//
	// 771A1414-27BF-53E6-AB73-EFCB*****ACF
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaMarksResponseBody) SetMediaId(v string) *AddMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *AddMediaMarksResponseBody) SetMediaMarkIds(v string) *AddMediaMarksResponseBody {
	s.MediaMarkIds = &v
	return s
}

func (s *AddMediaMarksResponseBody) SetRequestId(v string) *AddMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type AddMediaMarksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *AddMediaMarksResponse) SetHeaders(v map[string]*string) *AddMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *AddMediaMarksResponse) SetStatusCode(v int32) *AddMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *AddMediaMarksResponse) SetBody(v *AddMediaMarksResponseBody) *AddMediaMarksResponse {
	s.Body = v
	return s
}

type AddTemplateRequest struct {
	// example:
	//
	// 参见Timeline模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// example:
	//
	// {"video":["1805a0c6ca544fb395a06ca683619655"]}
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// example:
	//
	// OpenAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddTemplateRequest) SetConfig(v string) *AddTemplateRequest {
	s.Config = &v
	return s
}

func (s *AddTemplateRequest) SetCoverUrl(v string) *AddTemplateRequest {
	s.CoverUrl = &v
	return s
}

func (s *AddTemplateRequest) SetName(v string) *AddTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddTemplateRequest) SetPreviewMedia(v string) *AddTemplateRequest {
	s.PreviewMedia = &v
	return s
}

func (s *AddTemplateRequest) SetRelatedMediaids(v string) *AddTemplateRequest {
	s.RelatedMediaids = &v
	return s
}

func (s *AddTemplateRequest) SetSource(v string) *AddTemplateRequest {
	s.Source = &v
	return s
}

func (s *AddTemplateRequest) SetStatus(v string) *AddTemplateRequest {
	s.Status = &v
	return s
}

func (s *AddTemplateRequest) SetType(v string) *AddTemplateRequest {
	s.Type = &v
	return s
}

type AddTemplateResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *AddTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBody) SetRequestId(v string) *AddTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTemplateResponseBody) SetTemplate(v *AddTemplateResponseBodyTemplate) *AddTemplateResponseBody {
	s.Template = v
	return s
}

type AddTemplateResponseBodyTemplate struct {
	// example:
	//
	// 参见Timeline模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplate) SetConfig(v string) *AddTemplateResponseBodyTemplate {
	s.Config = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetCoverUrl(v string) *AddTemplateResponseBodyTemplate {
	s.CoverUrl = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetCreateSource(v string) *AddTemplateResponseBodyTemplate {
	s.CreateSource = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetModifiedSource(v string) *AddTemplateResponseBodyTemplate {
	s.ModifiedSource = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetName(v string) *AddTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetPreviewMedia(v string) *AddTemplateResponseBodyTemplate {
	s.PreviewMedia = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetStatus(v string) *AddTemplateResponseBodyTemplate {
	s.Status = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetTemplateId(v string) *AddTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetType(v string) *AddTemplateResponseBodyTemplate {
	s.Type = &v
	return s
}

type AddTemplateResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddTemplateResponse) SetHeaders(v map[string]*string) *AddTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddTemplateResponse) SetStatusCode(v int32) *AddTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTemplateResponse) SetBody(v *AddTemplateResponseBody) *AddTemplateResponse {
	s.Body = v
	return s
}

type AlterSearchIndexRequest struct {
	// example:
	//
	// {}
	IndexConfig *string `json:"IndexConfig,omitempty" xml:"IndexConfig,omitempty"`
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s AlterSearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s AlterSearchIndexRequest) GoString() string {
	return s.String()
}

func (s *AlterSearchIndexRequest) SetIndexConfig(v string) *AlterSearchIndexRequest {
	s.IndexConfig = &v
	return s
}

func (s *AlterSearchIndexRequest) SetIndexStatus(v string) *AlterSearchIndexRequest {
	s.IndexStatus = &v
	return s
}

func (s *AlterSearchIndexRequest) SetIndexType(v string) *AlterSearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *AlterSearchIndexRequest) SetSearchLibName(v string) *AlterSearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type AlterSearchIndexResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AlterSearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AlterSearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *AlterSearchIndexResponseBody) SetCode(v string) *AlterSearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *AlterSearchIndexResponseBody) SetRequestId(v string) *AlterSearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *AlterSearchIndexResponseBody) SetSuccess(v string) *AlterSearchIndexResponseBody {
	s.Success = &v
	return s
}

type AlterSearchIndexResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AlterSearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AlterSearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s AlterSearchIndexResponse) GoString() string {
	return s.String()
}

func (s *AlterSearchIndexResponse) SetHeaders(v map[string]*string) *AlterSearchIndexResponse {
	s.Headers = v
	return s
}

func (s *AlterSearchIndexResponse) SetStatusCode(v int32) *AlterSearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *AlterSearchIndexResponse) SetBody(v *AlterSearchIndexResponseBody) *AlterSearchIndexResponse {
	s.Body = v
	return s
}

type BatchGetMediaInfosRequest struct {
	// example:
	//
	// FileInfo,DynamicMetaData
	AdditionType *string `json:"AdditionType,omitempty" xml:"AdditionType,omitempty"`
	// example:
	//
	// ******b48fb04483915d4f2cd8******,******c48fb37407365d4f2cd8******
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s BatchGetMediaInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosRequest) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosRequest) SetAdditionType(v string) *BatchGetMediaInfosRequest {
	s.AdditionType = &v
	return s
}

func (s *BatchGetMediaInfosRequest) SetMediaIds(v string) *BatchGetMediaInfosRequest {
	s.MediaIds = &v
	return s
}

type BatchGetMediaInfosResponseBody struct {
	MediaInfos []*BatchGetMediaInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchGetMediaInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBody) SetMediaInfos(v []*BatchGetMediaInfosResponseBodyMediaInfos) *BatchGetMediaInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *BatchGetMediaInfosResponseBody) SetRequestId(v string) *BatchGetMediaInfosResponseBody {
	s.RequestId = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList   []*BatchGetMediaInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	MediaBasicInfo *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// ******c48fb37407365d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetFileInfoList(v []*BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetMediaId(v string) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosFileInfoList struct {
	FileBasicInfo *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 200
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	Category     *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	//
	// example:
	//
	// ******c48fb37407365d4f2cd8******
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:12Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// example:
	//
	// userDataTest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type BatchGetMediaInfosResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchGetMediaInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchGetMediaInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponse) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponse) SetHeaders(v map[string]*string) *BatchGetMediaInfosResponse {
	s.Headers = v
	return s
}

func (s *BatchGetMediaInfosResponse) SetStatusCode(v int32) *BatchGetMediaInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchGetMediaInfosResponse) SetBody(v *BatchGetMediaInfosResponseBody) *BatchGetMediaInfosResponse {
	s.Body = v
	return s
}

type CancelDNAJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CancelDNAJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelDNAJobRequest) GoString() string {
	return s.String()
}

func (s *CancelDNAJobRequest) SetJobId(v string) *CancelDNAJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelDNAJobRequest) SetOwnerAccount(v string) *CancelDNAJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CancelDNAJobRequest) SetOwnerId(v int64) *CancelDNAJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelDNAJobRequest) SetResourceOwnerAccount(v string) *CancelDNAJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelDNAJobRequest) SetResourceOwnerId(v int64) *CancelDNAJobRequest {
	s.ResourceOwnerId = &v
	return s
}

type CancelDNAJobResponseBody struct {
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelDNAJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelDNAJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelDNAJobResponseBody) SetJobId(v string) *CancelDNAJobResponseBody {
	s.JobId = &v
	return s
}

func (s *CancelDNAJobResponseBody) SetRequestId(v string) *CancelDNAJobResponseBody {
	s.RequestId = &v
	return s
}

type CancelDNAJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelDNAJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelDNAJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelDNAJobResponse) GoString() string {
	return s.String()
}

func (s *CancelDNAJobResponse) SetHeaders(v map[string]*string) *CancelDNAJobResponse {
	s.Headers = v
	return s
}

func (s *CancelDNAJobResponse) SetStatusCode(v int32) *CancelDNAJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelDNAJobResponse) SetBody(v *CancelDNAJobResponseBody) *CancelDNAJobResponse {
	s.Body = v
	return s
}

type CancelFavoritePublicMediaRequest struct {
	// example:
	//
	// icepublic-****7213c6050cbc66750b469701****,icepublic-****0b4697017213c6050cbc6675****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s CancelFavoritePublicMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaRequest) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaRequest) SetMediaIds(v string) *CancelFavoritePublicMediaRequest {
	s.MediaIds = &v
	return s
}

type CancelFavoritePublicMediaResponseBody struct {
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelFavoritePublicMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaResponseBody) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaResponseBody) SetIgnoredList(v []*string) *CancelFavoritePublicMediaResponseBody {
	s.IgnoredList = v
	return s
}

func (s *CancelFavoritePublicMediaResponseBody) SetRequestId(v string) *CancelFavoritePublicMediaResponseBody {
	s.RequestId = &v
	return s
}

type CancelFavoritePublicMediaResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CancelFavoritePublicMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CancelFavoritePublicMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaResponse) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaResponse) SetHeaders(v map[string]*string) *CancelFavoritePublicMediaResponse {
	s.Headers = v
	return s
}

func (s *CancelFavoritePublicMediaResponse) SetStatusCode(v int32) *CancelFavoritePublicMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelFavoritePublicMediaResponse) SetBody(v *CancelFavoritePublicMediaResponseBody) *CancelFavoritePublicMediaResponse {
	s.Body = v
	return s
}

type CreateAuditRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// [
	//
	//       {
	//
	//             "MediaId": "93ab850b4f*****b54b6e91d24d81d4",
	//
	//             "Status": "Normal"
	//
	//       },
	//
	//       {
	//
	//             "MediaId": "f867fbfb58*****8bbab65c4480ae1d",
	//
	//             "Status": "Blocked",
	//
	//             "Reason": "xxxx",
	//
	//             "Comment": "xxxx"
	//
	//       }
	//
	// ]
	AuditContent *string `json:"AuditContent,omitempty" xml:"AuditContent,omitempty"`
}

func (s CreateAuditRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditRequest) GoString() string {
	return s.String()
}

func (s *CreateAuditRequest) SetAuditContent(v string) *CreateAuditRequest {
	s.AuditContent = &v
	return s
}

type CreateAuditResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAuditResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAuditResponseBody) SetRequestId(v string) *CreateAuditResponseBody {
	s.RequestId = &v
	return s
}

type CreateAuditResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAuditResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAuditResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditResponse) GoString() string {
	return s.String()
}

func (s *CreateAuditResponse) SetHeaders(v map[string]*string) *CreateAuditResponse {
	s.Headers = v
	return s
}

func (s *CreateAuditResponse) SetStatusCode(v int32) *CreateAuditResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAuditResponse) SetBody(v *CreateAuditResponseBody) *CreateAuditResponse {
	s.Body = v
	return s
}

type CreateAvatarTrainingJobRequest struct {
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// This parameter is required.
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// example:
	//
	// True
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Video *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s CreateAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobRequest) SetAvatarDescription(v string) *CreateAvatarTrainingJobRequest {
	s.AvatarDescription = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetAvatarName(v string) *CreateAvatarTrainingJobRequest {
	s.AvatarName = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetAvatarType(v string) *CreateAvatarTrainingJobRequest {
	s.AvatarType = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetPortrait(v string) *CreateAvatarTrainingJobRequest {
	s.Portrait = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetThumbnail(v string) *CreateAvatarTrainingJobRequest {
	s.Thumbnail = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetTransparent(v bool) *CreateAvatarTrainingJobRequest {
	s.Transparent = &v
	return s
}

func (s *CreateAvatarTrainingJobRequest) SetVideo(v string) *CreateAvatarTrainingJobRequest {
	s.Video = &v
	return s
}

type CreateAvatarTrainingJobResponseBody struct {
	Data *CreateAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobResponseBody) SetData(v *CreateAvatarTrainingJobResponseBodyData) *CreateAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *CreateAvatarTrainingJobResponseBody) SetRequestId(v string) *CreateAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAvatarTrainingJobResponseBody) SetSuccess(v bool) *CreateAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type CreateAvatarTrainingJobResponseBodyData struct {
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CreateAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobResponseBodyData) SetJobId(v string) *CreateAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type CreateAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *CreateAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *CreateAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *CreateAvatarTrainingJobResponse) SetStatusCode(v int32) *CreateAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAvatarTrainingJobResponse) SetBody(v *CreateAvatarTrainingJobResponseBody) *CreateAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type CreateCustomTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test-template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"Container":{"Format":"flv"},"Video":{},"Audio":{}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateRequest) SetName(v string) *CreateCustomTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetSubtype(v int32) *CreateCustomTemplateRequest {
	s.Subtype = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetTemplateConfig(v string) *CreateCustomTemplateRequest {
	s.TemplateConfig = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetType(v int32) *CreateCustomTemplateRequest {
	s.Type = &v
	return s
}

type CreateCustomTemplateResponseBody struct {
	CustomTemplate *CreateCustomTemplateResponseBodyCustomTemplate `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponseBody) SetCustomTemplate(v *CreateCustomTemplateResponseBodyCustomTemplate) *CreateCustomTemplateResponseBody {
	s.CustomTemplate = v
	return s
}

func (s *CreateCustomTemplateResponseBody) SetRequestId(v string) *CreateCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateCustomTemplateResponseBodyCustomTemplate struct {
	// example:
	//
	// 2022-04-19T02:04:31Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// example:
	//
	// 2022-04-19T02:04:31Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Remux
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// {"Container":{"Format":"flv"},"Video":{},"Audio":{}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// test-template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s CreateCustomTemplateResponseBodyCustomTemplate) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponseBodyCustomTemplate) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetCreateTime(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.CreateTime = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetIsDefault(v bool) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.IsDefault = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetModifiedTime(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetStatus(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Status = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetSubtype(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Subtype = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateConfig(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateId(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateId = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateName(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateName = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetType(v int32) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Type = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTypeName(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TypeName = &v
	return s
}

type CreateCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponse) SetHeaders(v map[string]*string) *CreateCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomTemplateResponse) SetStatusCode(v int32) *CreateCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomTemplateResponse) SetBody(v *CreateCustomTemplateResponseBody) *CreateCustomTemplateResponse {
	s.Body = v
	return s
}

type CreateCustomizedVoiceJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// story
	Scenario  *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId   *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s CreateCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobRequest) SetGender(v string) *CreateCustomizedVoiceJobRequest {
	s.Gender = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetScenario(v string) *CreateCustomizedVoiceJobRequest {
	s.Scenario = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetVoiceDesc(v string) *CreateCustomizedVoiceJobRequest {
	s.VoiceDesc = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetVoiceId(v string) *CreateCustomizedVoiceJobRequest {
	s.VoiceId = &v
	return s
}

func (s *CreateCustomizedVoiceJobRequest) SetVoiceName(v string) *CreateCustomizedVoiceJobRequest {
	s.VoiceName = &v
	return s
}

type CreateCustomizedVoiceJobResponseBody struct {
	Data *CreateCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobResponseBody) SetData(v *CreateCustomizedVoiceJobResponseBodyData) *CreateCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *CreateCustomizedVoiceJobResponseBody) SetRequestId(v string) *CreateCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCustomizedVoiceJobResponseBody) SetSuccess(v bool) *CreateCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type CreateCustomizedVoiceJobResponseBodyData struct {
	// example:
	//
	// ****29faef8144638ba42eb8e037****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s CreateCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobResponseBodyData) SetJobId(v string) *CreateCustomizedVoiceJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *CreateCustomizedVoiceJobResponseBodyData) SetVoiceId(v string) *CreateCustomizedVoiceJobResponseBodyData {
	s.VoiceId = &v
	return s
}

type CreateCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *CreateCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomizedVoiceJobResponse) SetStatusCode(v int32) *CreateCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomizedVoiceJobResponse) SetBody(v *CreateCustomizedVoiceJobResponseBody) *CreateCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type CreateDNADBRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Video
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example name
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateDNADBRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBRequest) GoString() string {
	return s.String()
}

func (s *CreateDNADBRequest) SetDescription(v string) *CreateDNADBRequest {
	s.Description = &v
	return s
}

func (s *CreateDNADBRequest) SetModel(v string) *CreateDNADBRequest {
	s.Model = &v
	return s
}

func (s *CreateDNADBRequest) SetName(v string) *CreateDNADBRequest {
	s.Name = &v
	return s
}

func (s *CreateDNADBRequest) SetOwnerAccount(v string) *CreateDNADBRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateDNADBRequest) SetOwnerId(v int64) *CreateDNADBRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateDNADBRequest) SetResourceOwnerAccount(v string) *CreateDNADBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateDNADBRequest) SetResourceOwnerId(v int64) *CreateDNADBRequest {
	s.ResourceOwnerId = &v
	return s
}

type CreateDNADBResponseBody struct {
	DBInfo *CreateDNADBResponseBodyDBInfo `json:"DBInfo,omitempty" xml:"DBInfo,omitempty" type:"Struct"`
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateDNADBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDNADBResponseBody) SetDBInfo(v *CreateDNADBResponseBodyDBInfo) *CreateDNADBResponseBody {
	s.DBInfo = v
	return s
}

func (s *CreateDNADBResponseBody) SetRequestId(v string) *CreateDNADBResponseBody {
	s.RequestId = &v
	return s
}

type CreateDNADBResponseBodyDBInfo struct {
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	DBId        *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Video
	Model *string `json:"Model,omitempty" xml:"Model,omitempty"`
	// example:
	//
	// example name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// offline
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreateDNADBResponseBodyDBInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBResponseBodyDBInfo) GoString() string {
	return s.String()
}

func (s *CreateDNADBResponseBodyDBInfo) SetDBId(v string) *CreateDNADBResponseBodyDBInfo {
	s.DBId = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetDescription(v string) *CreateDNADBResponseBodyDBInfo {
	s.Description = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetModel(v string) *CreateDNADBResponseBodyDBInfo {
	s.Model = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetName(v string) *CreateDNADBResponseBodyDBInfo {
	s.Name = &v
	return s
}

func (s *CreateDNADBResponseBodyDBInfo) SetStatus(v string) *CreateDNADBResponseBodyDBInfo {
	s.Status = &v
	return s
}

type CreateDNADBResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateDNADBResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateDNADBResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDNADBResponse) GoString() string {
	return s.String()
}

func (s *CreateDNADBResponse) SetHeaders(v map[string]*string) *CreateDNADBResponse {
	s.Headers = v
	return s
}

func (s *CreateDNADBResponse) SetStatusCode(v int32) *CreateDNADBResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDNADBResponse) SetBody(v *CreateDNADBResponseBody) *CreateDNADBResponse {
	s.Body = v
	return s
}

type CreateEditingProjectRequest struct {
	// example:
	//
	// { "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	ClipsParam     *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// https://example.com/example.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// {"video":"*****2e057304fcd9b145c5cafc*****", "image":"****8021a8d493da643c8acd98*****,*****cb6307a4edea614d8b3f3c*****", "liveStream": "[{\\"appName\\":\\"testrecord\\",\\"domainName\\":\\"test.alivecdn.com\\",\\"liveUrl\\":\\"rtmp://test.alivecdn.com/testrecord/teststream\\",\\"streamName\\":\\"teststream\\"}]", "editingProject": "*****9b145c5cafc2e057304fcd*****"}
	MaterialMaps *string `json:"MaterialMaps,omitempty" xml:"MaterialMaps,omitempty"`
	// example:
	//
	// LiveEditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// example
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectRequest) SetBusinessConfig(v string) *CreateEditingProjectRequest {
	s.BusinessConfig = &v
	return s
}

func (s *CreateEditingProjectRequest) SetClipsParam(v string) *CreateEditingProjectRequest {
	s.ClipsParam = &v
	return s
}

func (s *CreateEditingProjectRequest) SetCoverURL(v string) *CreateEditingProjectRequest {
	s.CoverURL = &v
	return s
}

func (s *CreateEditingProjectRequest) SetDescription(v string) *CreateEditingProjectRequest {
	s.Description = &v
	return s
}

func (s *CreateEditingProjectRequest) SetMaterialMaps(v string) *CreateEditingProjectRequest {
	s.MaterialMaps = &v
	return s
}

func (s *CreateEditingProjectRequest) SetProjectType(v string) *CreateEditingProjectRequest {
	s.ProjectType = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTemplateId(v string) *CreateEditingProjectRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTemplateType(v string) *CreateEditingProjectRequest {
	s.TemplateType = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTimeline(v string) *CreateEditingProjectRequest {
	s.Timeline = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTitle(v string) *CreateEditingProjectRequest {
	s.Title = &v
	return s
}

type CreateEditingProjectResponseBody struct {
	Project *CreateEditingProjectResponseBodyProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Struct"`
	// Id of the request
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponseBody) SetProject(v *CreateEditingProjectResponseBodyProject) *CreateEditingProjectResponseBody {
	s.Project = v
	return s
}

func (s *CreateEditingProjectResponseBody) SetRequestId(v string) *CreateEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type CreateEditingProjectResponseBodyProject struct {
	// example:
	//
	// { "OutputMediaConfig" :    { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path"   }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	ClipsParam     *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// WebSDK
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:07Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// example_description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 3.4200000
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// WebSDK
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// ****01bf24bf41c78b2754cb3187****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// LiveEditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// example:
	//
	// 2
	Status *int64 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Editing
	StatusName *string `json:"StatusName,omitempty" xml:"StatusName,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// example:
	//
	// example_title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateEditingProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponseBodyProject) SetBusinessConfig(v string) *CreateEditingProjectResponseBodyProject {
	s.BusinessConfig = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetBusinessStatus(v string) *CreateEditingProjectResponseBodyProject {
	s.BusinessStatus = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetClipsParam(v string) *CreateEditingProjectResponseBodyProject {
	s.ClipsParam = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCoverURL(v string) *CreateEditingProjectResponseBodyProject {
	s.CoverURL = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCreateSource(v string) *CreateEditingProjectResponseBodyProject {
	s.CreateSource = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCreateTime(v string) *CreateEditingProjectResponseBodyProject {
	s.CreateTime = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetDescription(v string) *CreateEditingProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetDuration(v float32) *CreateEditingProjectResponseBodyProject {
	s.Duration = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetModifiedSource(v string) *CreateEditingProjectResponseBodyProject {
	s.ModifiedSource = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetModifiedTime(v string) *CreateEditingProjectResponseBodyProject {
	s.ModifiedTime = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetProjectId(v string) *CreateEditingProjectResponseBodyProject {
	s.ProjectId = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetProjectType(v string) *CreateEditingProjectResponseBodyProject {
	s.ProjectType = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetStatus(v int64) *CreateEditingProjectResponseBodyProject {
	s.Status = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetStatusName(v string) *CreateEditingProjectResponseBodyProject {
	s.StatusName = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTemplateId(v string) *CreateEditingProjectResponseBodyProject {
	s.TemplateId = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTemplateType(v string) *CreateEditingProjectResponseBodyProject {
	s.TemplateType = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTimeline(v string) *CreateEditingProjectResponseBodyProject {
	s.Timeline = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTitle(v string) *CreateEditingProjectResponseBodyProject {
	s.Title = &v
	return s
}

type CreateEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponse) SetHeaders(v map[string]*string) *CreateEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateEditingProjectResponse) SetStatusCode(v int32) *CreateEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEditingProjectResponse) SetBody(v *CreateEditingProjectResponseBody) *CreateEditingProjectResponse {
	s.Body = v
	return s
}

type CreateLiveRecordTemplateRequest struct {
	// 代表资源名称的资源属性字段
	//
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	//
	// This parameter is required.
	RecordFormat []*CreateLiveRecordTemplateRequestRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s CreateLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateRequest) SetName(v string) *CreateLiveRecordTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveRecordTemplateRequest) SetRecordFormat(v []*CreateLiveRecordTemplateRequestRecordFormat) *CreateLiveRecordTemplateRequest {
	s.RecordFormat = v
	return s
}

type CreateLiveRecordTemplateRequestRecordFormat struct {
	// example:
	//
	// 3600
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// 格式
	//
	// This parameter is required.
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// 切片时长
	//
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// 切片Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s CreateLiveRecordTemplateRequestRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateRequestRecordFormat) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetCycleDuration(v int32) *CreateLiveRecordTemplateRequestRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetFormat(v string) *CreateLiveRecordTemplateRequestRecordFormat {
	s.Format = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetOssObjectPrefix(v string) *CreateLiveRecordTemplateRequestRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetSliceDuration(v int32) *CreateLiveRecordTemplateRequestRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetSliceOssObjectPrefix(v string) *CreateLiveRecordTemplateRequestRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type CreateLiveRecordTemplateShrinkRequest struct {
	// 代表资源名称的资源属性字段
	//
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	//
	// This parameter is required.
	RecordFormatShrink *string `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty"`
}

func (s CreateLiveRecordTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateShrinkRequest) SetName(v string) *CreateLiveRecordTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveRecordTemplateShrinkRequest) SetRecordFormatShrink(v string) *CreateLiveRecordTemplateShrinkRequest {
	s.RecordFormatShrink = &v
	return s
}

type CreateLiveRecordTemplateResponseBody struct {
	// example:
	//
	// 0622C702-41BE-467E-AF2E-883D4517962E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 代表资源一级ID的资源属性字段
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateResponseBody) SetRequestId(v string) *CreateLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveRecordTemplateResponseBody) SetTemplateId(v string) *CreateLiveRecordTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateLiveRecordTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveRecordTemplateResponse) SetStatusCode(v int32) *CreateLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveRecordTemplateResponse) SetBody(v *CreateLiveRecordTemplateResponseBody) *CreateLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type CreateLiveSnapshotTemplateRequest struct {
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	// This parameter is required.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s CreateLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveSnapshotTemplateRequest) SetOverwriteFormat(v string) *CreateLiveSnapshotTemplateRequest {
	s.OverwriteFormat = &v
	return s
}

func (s *CreateLiveSnapshotTemplateRequest) SetSequenceFormat(v string) *CreateLiveSnapshotTemplateRequest {
	s.SequenceFormat = &v
	return s
}

func (s *CreateLiveSnapshotTemplateRequest) SetTemplateName(v string) *CreateLiveSnapshotTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateLiveSnapshotTemplateRequest) SetTimeInterval(v int32) *CreateLiveSnapshotTemplateRequest {
	s.TimeInterval = &v
	return s
}

type CreateLiveSnapshotTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveSnapshotTemplateResponseBody) SetRequestId(v string) *CreateLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveSnapshotTemplateResponseBody) SetTemplateId(v string) *CreateLiveSnapshotTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveSnapshotTemplateResponse) SetStatusCode(v int32) *CreateLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveSnapshotTemplateResponse) SetBody(v *CreateLiveSnapshotTemplateResponseBody) *CreateLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type CreateLiveTranscodeTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// my template
	Name           *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfig *CreateLiveTranscodeTemplateRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequest) SetName(v string) *CreateLiveTranscodeTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequest) SetTemplateConfig(v *CreateLiveTranscodeTemplateRequestTemplateConfig) *CreateLiveTranscodeTemplateRequest {
	s.TemplateConfig = v
	return s
}

func (s *CreateLiveTranscodeTemplateRequest) SetType(v string) *CreateLiveTranscodeTemplateRequest {
	s.Type = &v
	return s
}

type CreateLiveTranscodeTemplateRequestTemplateConfig struct {
	AudioParams *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	VideoParams *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfig) SetAudioParams(v *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) *CreateLiveTranscodeTemplateRequestTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfig) SetVideoParams(v *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) *CreateLiveTranscodeTemplateRequestTemplateConfig {
	s.VideoParams = v
	return s
}

type CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams struct {
	// example:
	//
	// 100
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aaclow
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetBitrate(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetChannels(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetCodec(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetProfile(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetSamplerate(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams struct {
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetBitrate(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetCodec(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetFps(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetGop(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetHeight(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetProfile(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetWidth(v string) *CreateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type CreateLiveTranscodeTemplateShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// my template
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateLiveTranscodeTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateShrinkRequest) SetName(v string) *CreateLiveTranscodeTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *CreateLiveTranscodeTemplateShrinkRequest) SetTemplateConfigShrink(v string) *CreateLiveTranscodeTemplateShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *CreateLiveTranscodeTemplateShrinkRequest) SetType(v string) *CreateLiveTranscodeTemplateShrinkRequest {
	s.Type = &v
	return s
}

type CreateLiveTranscodeTemplateResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateResponseBody) SetRequestId(v string) *CreateLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveTranscodeTemplateResponseBody) SetTemplateId(v string) *CreateLiveTranscodeTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveTranscodeTemplateResponse) SetStatusCode(v int32) *CreateLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveTranscodeTemplateResponse) SetBody(v *CreateLiveTranscodeTemplateResponseBody) *CreateLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type CreatePipelineRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
}

func (s CreatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRequest) GoString() string {
	return s.String()
}

func (s *CreatePipelineRequest) SetName(v string) *CreatePipelineRequest {
	s.Name = &v
	return s
}

func (s *CreatePipelineRequest) SetPriority(v int32) *CreatePipelineRequest {
	s.Priority = &v
	return s
}

func (s *CreatePipelineRequest) SetSpeed(v string) *CreatePipelineRequest {
	s.Speed = &v
	return s
}

type CreatePipelineResponseBody struct {
	Pipeline *CreatePipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponseBody) SetPipeline(v *CreatePipelineResponseBodyPipeline) *CreatePipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *CreatePipelineResponseBody) SetRequestId(v string) *CreatePipelineResponseBody {
	s.RequestId = &v
	return s
}

type CreatePipelineResponseBodyPipeline struct {
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreatePipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponseBodyPipeline) SetCreateTime(v string) *CreatePipelineResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetModifiedTime(v string) *CreatePipelineResponseBodyPipeline {
	s.ModifiedTime = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetName(v string) *CreatePipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetPipelineId(v string) *CreatePipelineResponseBodyPipeline {
	s.PipelineId = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetPriority(v int32) *CreatePipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetSpeed(v string) *CreatePipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetStatus(v string) *CreatePipelineResponseBodyPipeline {
	s.Status = &v
	return s
}

type CreatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponse) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponse) SetHeaders(v map[string]*string) *CreatePipelineResponse {
	s.Headers = v
	return s
}

func (s *CreatePipelineResponse) SetStatusCode(v int32) *CreatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePipelineResponse) SetBody(v *CreatePipelineResponseBody) *CreatePipelineResponse {
	s.Body = v
	return s
}

type CreateSearchIndexRequest struct {
	// example:
	//
	// {}
	IndexConfig *string `json:"IndexConfig,omitempty" xml:"IndexConfig,omitempty"`
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s CreateSearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchIndexRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchIndexRequest) SetIndexConfig(v string) *CreateSearchIndexRequest {
	s.IndexConfig = &v
	return s
}

func (s *CreateSearchIndexRequest) SetIndexStatus(v string) *CreateSearchIndexRequest {
	s.IndexStatus = &v
	return s
}

func (s *CreateSearchIndexRequest) SetIndexType(v string) *CreateSearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *CreateSearchIndexRequest) SetSearchLibName(v string) *CreateSearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type CreateSearchIndexResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSearchIndexResponseBody) SetCode(v string) *CreateSearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSearchIndexResponseBody) SetRequestId(v string) *CreateSearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSearchIndexResponseBody) SetSuccess(v string) *CreateSearchIndexResponseBody {
	s.Success = &v
	return s
}

type CreateSearchIndexResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchIndexResponse) GoString() string {
	return s.String()
}

func (s *CreateSearchIndexResponse) SetHeaders(v map[string]*string) *CreateSearchIndexResponse {
	s.Headers = v
	return s
}

func (s *CreateSearchIndexResponse) SetStatusCode(v int32) *CreateSearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSearchIndexResponse) SetBody(v *CreateSearchIndexResponseBody) *CreateSearchIndexResponse {
	s.Body = v
	return s
}

type CreateSearchLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s CreateSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchLibRequest) GoString() string {
	return s.String()
}

func (s *CreateSearchLibRequest) SetSearchLibName(v string) *CreateSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type CreateSearchLibResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	Success       *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSearchLibResponseBody) SetCode(v string) *CreateSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *CreateSearchLibResponseBody) SetRequestId(v string) *CreateSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSearchLibResponseBody) SetSearchLibName(v string) *CreateSearchLibResponseBody {
	s.SearchLibName = &v
	return s
}

func (s *CreateSearchLibResponseBody) SetSuccess(v string) *CreateSearchLibResponseBody {
	s.Success = &v
	return s
}

type CreateSearchLibResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSearchLibResponse) GoString() string {
	return s.String()
}

func (s *CreateSearchLibResponse) SetHeaders(v map[string]*string) *CreateSearchLibResponse {
	s.Headers = v
	return s
}

func (s *CreateSearchLibResponse) SetStatusCode(v int32) *CreateSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSearchLibResponse) SetBody(v *CreateSearchLibResponseBody) *CreateSearchLibResponse {
	s.Body = v
	return s
}

type CreateUploadMediaRequest struct {
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// 9e177cac2fb44f8b8c67b199fcc7bffd
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// example:
	//
	// {\\"Type\\":\\"video\\",\\"Name\\":\\"test.mp4\\",\\"Size\\":108078336,\\"Ext\\":\\"mp4\\"}
	FileInfo *string `json:"FileInfo,omitempty" xml:"FileInfo,omitempty"`
	// example:
	//
	// {\\"Title\\": \\"UploadTest\\", \\"Description\\": \\"UploadImageTest\\", \\"Tags\\": \\"tag1,tag2\\",\\"BusinessType\\":\\"cover\\"}
	MediaMetaData *string `json:"MediaMetaData,omitempty" xml:"MediaMetaData,omitempty"`
	// example:
	//
	// {\\"ProcessType\\":\\"Workflow\\",\\"ProcessID\\":\\"74ba870f1a4873a3ba238e0bf6fa9***\\"}
	PostProcessConfig *string `json:"PostProcessConfig,omitempty" xml:"PostProcessConfig,omitempty"`
	// example:
	//
	// {\\"StorageType\\":\\"oss\\",\\"StorageLocation\\":\\"outin-***.oss-cn-shanghai.aliyuncs.com\\"}
	UploadTargetConfig *string `json:"UploadTargetConfig,omitempty" xml:"UploadTargetConfig,omitempty"`
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"*****","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s CreateUploadMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaRequest) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaRequest) SetAppId(v string) *CreateUploadMediaRequest {
	s.AppId = &v
	return s
}

func (s *CreateUploadMediaRequest) SetEntityId(v string) *CreateUploadMediaRequest {
	s.EntityId = &v
	return s
}

func (s *CreateUploadMediaRequest) SetFileInfo(v string) *CreateUploadMediaRequest {
	s.FileInfo = &v
	return s
}

func (s *CreateUploadMediaRequest) SetMediaMetaData(v string) *CreateUploadMediaRequest {
	s.MediaMetaData = &v
	return s
}

func (s *CreateUploadMediaRequest) SetPostProcessConfig(v string) *CreateUploadMediaRequest {
	s.PostProcessConfig = &v
	return s
}

func (s *CreateUploadMediaRequest) SetUploadTargetConfig(v string) *CreateUploadMediaRequest {
	s.UploadTargetConfig = &v
	return s
}

func (s *CreateUploadMediaRequest) SetUserData(v string) *CreateUploadMediaRequest {
	s.UserData = &v
	return s
}

type CreateUploadMediaResponseBody struct {
	// example:
	//
	// http://outin-***.oss-cn-north-2-gov-1.aliyuncs.com/sv/40360f05-181f63c3110-0004-cd8e-27f-de3c9.mp4
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// https://xxq-live-playback.oss-cn-shanghai.aliyuncs.com/capture/5d96d2b4-111b-4e5d-a0e5-20f44405bb55.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	// example:
	//
	// eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***
	UploadAuth *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s CreateUploadMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaResponseBody) SetFileURL(v string) *CreateUploadMediaResponseBody {
	s.FileURL = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetMediaId(v string) *CreateUploadMediaResponseBody {
	s.MediaId = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetMediaURL(v string) *CreateUploadMediaResponseBody {
	s.MediaURL = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetRequestId(v string) *CreateUploadMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetUploadAddress(v string) *CreateUploadMediaResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetUploadAuth(v string) *CreateUploadMediaResponseBody {
	s.UploadAuth = &v
	return s
}

type CreateUploadMediaResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUploadMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUploadMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaResponse) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaResponse) SetHeaders(v map[string]*string) *CreateUploadMediaResponse {
	s.Headers = v
	return s
}

func (s *CreateUploadMediaResponse) SetStatusCode(v int32) *CreateUploadMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUploadMediaResponse) SetBody(v *CreateUploadMediaResponseBody) *CreateUploadMediaResponse {
	s.Body = v
	return s
}

type CreateUploadStreamRequest struct {
	// example:
	//
	// HD
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// example:
	//
	// MP4
	FileExtension *string `json:"FileExtension,omitempty" xml:"FileExtension,omitempty"`
	// example:
	//
	// HDR10
	HDRType *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://aliyundoc.com"}, "Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s CreateUploadStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamRequest) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamRequest) SetDefinition(v string) *CreateUploadStreamRequest {
	s.Definition = &v
	return s
}

func (s *CreateUploadStreamRequest) SetFileExtension(v string) *CreateUploadStreamRequest {
	s.FileExtension = &v
	return s
}

func (s *CreateUploadStreamRequest) SetHDRType(v string) *CreateUploadStreamRequest {
	s.HDRType = &v
	return s
}

func (s *CreateUploadStreamRequest) SetMediaId(v string) *CreateUploadStreamRequest {
	s.MediaId = &v
	return s
}

func (s *CreateUploadStreamRequest) SetUserData(v string) *CreateUploadStreamRequest {
	s.UserData = &v
	return s
}

type CreateUploadStreamResponseBody struct {
	// example:
	//
	// http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	// example:
	//
	// eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***
	UploadAuth *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s CreateUploadStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamResponseBody) SetFileURL(v string) *CreateUploadStreamResponseBody {
	s.FileURL = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetMediaId(v string) *CreateUploadStreamResponseBody {
	s.MediaId = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetRequestId(v string) *CreateUploadStreamResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetUploadAddress(v string) *CreateUploadStreamResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetUploadAuth(v string) *CreateUploadStreamResponseBody {
	s.UploadAuth = &v
	return s
}

type CreateUploadStreamResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateUploadStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateUploadStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamResponse) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamResponse) SetHeaders(v map[string]*string) *CreateUploadStreamResponse {
	s.Headers = v
	return s
}

func (s *CreateUploadStreamResponse) SetStatusCode(v int32) *CreateUploadStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUploadStreamResponse) SetBody(v *CreateUploadStreamResponseBody) *CreateUploadStreamResponse {
	s.Body = v
	return s
}

type DecryptKMSDataKeyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****
	CiphertextBlob *string `json:"CiphertextBlob,omitempty" xml:"CiphertextBlob,omitempty"`
}

func (s DecryptKMSDataKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyRequest) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyRequest) SetCiphertextBlob(v string) *DecryptKMSDataKeyRequest {
	s.CiphertextBlob = &v
	return s
}

type DecryptKMSDataKeyResponseBody struct {
	DataKey *DecryptKMSDataKeyResponseBodyDataKey `json:"DataKey,omitempty" xml:"DataKey,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DecryptKMSDataKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyResponseBody) SetDataKey(v *DecryptKMSDataKeyResponseBodyDataKey) *DecryptKMSDataKeyResponseBody {
	s.DataKey = v
	return s
}

func (s *DecryptKMSDataKeyResponseBody) SetRequestId(v string) *DecryptKMSDataKeyResponseBody {
	s.RequestId = &v
	return s
}

type DecryptKMSDataKeyResponseBodyDataKey struct {
	// example:
	//
	// 202b9877-5a25-46e3-a763-e20791b5****
	KeyId *string `json:"KeyId,omitempty" xml:"KeyId,omitempty"`
	// example:
	//
	// tRYXuCwgja12xxO1N/gZERDDCLw9doZEQiPDk/Bv****
	Plaintext *string `json:"Plaintext,omitempty" xml:"Plaintext,omitempty"`
}

func (s DecryptKMSDataKeyResponseBodyDataKey) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyResponseBodyDataKey) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyResponseBodyDataKey) SetKeyId(v string) *DecryptKMSDataKeyResponseBodyDataKey {
	s.KeyId = &v
	return s
}

func (s *DecryptKMSDataKeyResponseBodyDataKey) SetPlaintext(v string) *DecryptKMSDataKeyResponseBodyDataKey {
	s.Plaintext = &v
	return s
}

type DecryptKMSDataKeyResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DecryptKMSDataKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DecryptKMSDataKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DecryptKMSDataKeyResponse) GoString() string {
	return s.String()
}

func (s *DecryptKMSDataKeyResponse) SetHeaders(v map[string]*string) *DecryptKMSDataKeyResponse {
	s.Headers = v
	return s
}

func (s *DecryptKMSDataKeyResponse) SetStatusCode(v int32) *DecryptKMSDataKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *DecryptKMSDataKeyResponse) SetBody(v *DecryptKMSDataKeyResponseBody) *DecryptKMSDataKeyResponse {
	s.Body = v
	return s
}

type DeleteAvatarTrainingJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobRequest) SetJobId(v string) *DeleteAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

type DeleteAvatarTrainingJobResponseBody struct {
	Data *DeleteAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobResponseBody) SetData(v *DeleteAvatarTrainingJobResponseBodyData) *DeleteAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *DeleteAvatarTrainingJobResponseBody) SetRequestId(v string) *DeleteAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAvatarTrainingJobResponseBody) SetSuccess(v bool) *DeleteAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type DeleteAvatarTrainingJobResponseBodyData struct {
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobResponseBodyData) SetJobId(v string) *DeleteAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type DeleteAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *DeleteAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteAvatarTrainingJobResponse) SetStatusCode(v int32) *DeleteAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAvatarTrainingJobResponse) SetBody(v *DeleteAvatarTrainingJobResponseBody) *DeleteAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type DeleteCategoryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 46
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
}

func (s DeleteCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteCategoryRequest) SetCateId(v int64) *DeleteCategoryRequest {
	s.CateId = &v
	return s
}

type DeleteCategoryResponseBody struct {
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponseBody) SetRequestId(v string) *DeleteCategoryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCategoryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponse) SetHeaders(v map[string]*string) *DeleteCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteCategoryResponse) SetStatusCode(v int32) *DeleteCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCategoryResponse) SetBody(v *DeleteCategoryResponseBody) *DeleteCategoryResponse {
	s.Body = v
	return s
}

type DeleteCustomTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateRequest) SetTemplateId(v string) *DeleteCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteCustomTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponseBody) SetRequestId(v string) *DeleteCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomTemplateResponseBody) SetSuccess(v bool) *DeleteCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponse) SetHeaders(v map[string]*string) *DeleteCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomTemplateResponse) SetStatusCode(v int32) *DeleteCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomTemplateResponse) SetBody(v *DeleteCustomTemplateResponseBody) *DeleteCustomTemplateResponse {
	s.Body = v
	return s
}

type DeleteCustomizedVoiceJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomizedVoiceJobRequest) SetJobId(v string) *DeleteCustomizedVoiceJobRequest {
	s.JobId = &v
	return s
}

type DeleteCustomizedVoiceJobResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomizedVoiceJobResponseBody) SetRequestId(v string) *DeleteCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomizedVoiceJobResponseBody) SetSuccess(v bool) *DeleteCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *DeleteCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomizedVoiceJobResponse) SetStatusCode(v int32) *DeleteCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomizedVoiceJobResponse) SetBody(v *DeleteCustomizedVoiceJobResponseBody) *DeleteCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type DeleteDNADBRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// fb712a6890464059b1b2ea7c8647****
	DBId                 *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteDNADBRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNADBRequest) GoString() string {
	return s.String()
}

func (s *DeleteDNADBRequest) SetDBId(v string) *DeleteDNADBRequest {
	s.DBId = &v
	return s
}

func (s *DeleteDNADBRequest) SetOwnerAccount(v string) *DeleteDNADBRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDNADBRequest) SetOwnerId(v int64) *DeleteDNADBRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDNADBRequest) SetResourceOwnerAccount(v string) *DeleteDNADBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDNADBRequest) SetResourceOwnerId(v int64) *DeleteDNADBRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteDNADBResponseBody struct {
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDNADBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNADBResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDNADBResponseBody) SetRequestId(v string) *DeleteDNADBResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDNADBResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDNADBResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDNADBResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNADBResponse) GoString() string {
	return s.String()
}

func (s *DeleteDNADBResponse) SetHeaders(v map[string]*string) *DeleteDNADBResponse {
	s.Headers = v
	return s
}

func (s *DeleteDNADBResponse) SetStatusCode(v int32) *DeleteDNADBResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDNADBResponse) SetBody(v *DeleteDNADBResponseBody) *DeleteDNADBResponse {
	s.Body = v
	return s
}

type DeleteDNAFilesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// fb712a6890464059b1b2ea7c8647****
	DBId         *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 41e6536e4f2250e2e9bf26cdea19****
	PrimaryKeys          *string `json:"PrimaryKeys,omitempty" xml:"PrimaryKeys,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteDNAFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNAFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteDNAFilesRequest) SetDBId(v string) *DeleteDNAFilesRequest {
	s.DBId = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetOwnerAccount(v string) *DeleteDNAFilesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetOwnerId(v int64) *DeleteDNAFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetPrimaryKeys(v string) *DeleteDNAFilesRequest {
	s.PrimaryKeys = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetResourceOwnerAccount(v string) *DeleteDNAFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteDNAFilesRequest) SetResourceOwnerId(v int64) *DeleteDNAFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteDNAFilesResponseBody struct {
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteDNAFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNAFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteDNAFilesResponseBody) SetRequestId(v string) *DeleteDNAFilesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteDNAFilesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteDNAFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteDNAFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteDNAFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteDNAFilesResponse) SetHeaders(v map[string]*string) *DeleteDNAFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteDNAFilesResponse) SetStatusCode(v int32) *DeleteDNAFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteDNAFilesResponse) SetBody(v *DeleteDNAFilesResponseBody) *DeleteDNAFilesResponse {
	s.Body = v
	return s
}

type DeleteEditingProjectMaterialsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// *****cbd721b418a89a7dafb1dc*****,*****86f5d534c95997c55c96f*****
	MaterialIds *string `json:"MaterialIds,omitempty" xml:"MaterialIds,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// video
	MaterialType *string `json:"MaterialType,omitempty" xml:"MaterialType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// *****fb2101cb318*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsRequest) SetMaterialIds(v string) *DeleteEditingProjectMaterialsRequest {
	s.MaterialIds = &v
	return s
}

func (s *DeleteEditingProjectMaterialsRequest) SetMaterialType(v string) *DeleteEditingProjectMaterialsRequest {
	s.MaterialType = &v
	return s
}

func (s *DeleteEditingProjectMaterialsRequest) SetProjectId(v string) *DeleteEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type DeleteEditingProjectMaterialsResponseBody struct {
	// example:
	//
	// ******36-3C1E-4417-BDB2-1E034F******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsResponseBody) SetRequestId(v string) *DeleteEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *DeleteEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *DeleteEditingProjectMaterialsResponse) SetStatusCode(v int32) *DeleteEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEditingProjectMaterialsResponse) SetBody(v *DeleteEditingProjectMaterialsResponseBody) *DeleteEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type DeleteEditingProjectsRequest struct {
	// example:
	//
	// ****fb2101bf24bf41cb318787dc****,****87dcfb2101bf24bf41cb3187****
	ProjectIds *string `json:"ProjectIds,omitempty" xml:"ProjectIds,omitempty"`
}

func (s DeleteEditingProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsRequest) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsRequest) SetProjectIds(v string) *DeleteEditingProjectsRequest {
	s.ProjectIds = &v
	return s
}

type DeleteEditingProjectsResponseBody struct {
	// example:
	//
	// ****25818875-5F78-4AF6-D7393642CA58****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEditingProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsResponseBody) SetRequestId(v string) *DeleteEditingProjectsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEditingProjectsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteEditingProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteEditingProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsResponse) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsResponse) SetHeaders(v map[string]*string) *DeleteEditingProjectsResponse {
	s.Headers = v
	return s
}

func (s *DeleteEditingProjectsResponse) SetStatusCode(v int32) *DeleteEditingProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEditingProjectsResponse) SetBody(v *DeleteEditingProjectsResponseBody) *DeleteEditingProjectsResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordFilesRequest struct {
	// This parameter is required.
	RecordIds []*string `json:"RecordIds,omitempty" xml:"RecordIds,omitempty" type:"Repeated"`
	// example:
	//
	// true
	RemoveFile *bool `json:"RemoveFile,omitempty" xml:"RemoveFile,omitempty"`
}

func (s DeleteLiveRecordFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesRequest) SetRecordIds(v []*string) *DeleteLiveRecordFilesRequest {
	s.RecordIds = v
	return s
}

func (s *DeleteLiveRecordFilesRequest) SetRemoveFile(v bool) *DeleteLiveRecordFilesRequest {
	s.RemoveFile = &v
	return s
}

type DeleteLiveRecordFilesResponseBody struct {
	DeleteFileInfoList []*DeleteLiveRecordFilesResponseBodyDeleteFileInfoList `json:"DeleteFileInfoList,omitempty" xml:"DeleteFileInfoList,omitempty" type:"Repeated"`
	// example:
	//
	// OK
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 13cbb83e-043c-4728-ac35-*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesResponseBody) SetDeleteFileInfoList(v []*DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) *DeleteLiveRecordFilesResponseBody {
	s.DeleteFileInfoList = v
	return s
}

func (s *DeleteLiveRecordFilesResponseBody) SetMessage(v string) *DeleteLiveRecordFilesResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteLiveRecordFilesResponseBody) SetRequestId(v string) *DeleteLiveRecordFilesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordFilesResponseBodyDeleteFileInfoList struct {
	// example:
	//
	// OK
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// OK
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 13cbb83e-043c-4728-ac35-*****
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
}

func (s DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) SetCode(v string) *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList {
	s.Code = &v
	return s
}

func (s *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) SetMessage(v string) *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList {
	s.Message = &v
	return s
}

func (s *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList) SetRecordId(v string) *DeleteLiveRecordFilesResponseBodyDeleteFileInfoList {
	s.RecordId = &v
	return s
}

type DeleteLiveRecordFilesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveRecordFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveRecordFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordFilesResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordFilesResponse) SetStatusCode(v int32) *DeleteLiveRecordFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRecordFilesResponse) SetBody(v *DeleteLiveRecordFilesResponseBody) *DeleteLiveRecordFilesResponse {
	s.Body = v
	return s
}

type DeleteLiveRecordTemplateRequest struct {
	// 代表资源一级ID的资源属性字段
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordTemplateRequest) SetTemplateId(v string) *DeleteLiveRecordTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveRecordTemplateResponseBody struct {
	// example:
	//
	// 3E5330CF-B4C8-5BEF-AA6B-8E70BD20FAEE
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordTemplateResponseBody) SetRequestId(v string) *DeleteLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveRecordTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *DeleteLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveRecordTemplateResponse) SetStatusCode(v int32) *DeleteLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveRecordTemplateResponse) SetBody(v *DeleteLiveRecordTemplateResponseBody) *DeleteLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type DeleteLiveSnapshotFilesRequest struct {
	// This parameter is required.
	CreateTimestampList []*int64 `json:"CreateTimestampList,omitempty" xml:"CreateTimestampList,omitempty" type:"Repeated"`
	// example:
	//
	// true
	DeleteOriginalFile *bool `json:"DeleteOriginalFile,omitempty" xml:"DeleteOriginalFile,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteLiveSnapshotFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesRequest) SetCreateTimestampList(v []*int64) *DeleteLiveSnapshotFilesRequest {
	s.CreateTimestampList = v
	return s
}

func (s *DeleteLiveSnapshotFilesRequest) SetDeleteOriginalFile(v bool) *DeleteLiveSnapshotFilesRequest {
	s.DeleteOriginalFile = &v
	return s
}

func (s *DeleteLiveSnapshotFilesRequest) SetJobId(v string) *DeleteLiveSnapshotFilesRequest {
	s.JobId = &v
	return s
}

type DeleteLiveSnapshotFilesShrinkRequest struct {
	// This parameter is required.
	CreateTimestampListShrink *string `json:"CreateTimestampList,omitempty" xml:"CreateTimestampList,omitempty"`
	// example:
	//
	// true
	DeleteOriginalFile *bool `json:"DeleteOriginalFile,omitempty" xml:"DeleteOriginalFile,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteLiveSnapshotFilesShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesShrinkRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesShrinkRequest) SetCreateTimestampListShrink(v string) *DeleteLiveSnapshotFilesShrinkRequest {
	s.CreateTimestampListShrink = &v
	return s
}

func (s *DeleteLiveSnapshotFilesShrinkRequest) SetDeleteOriginalFile(v bool) *DeleteLiveSnapshotFilesShrinkRequest {
	s.DeleteOriginalFile = &v
	return s
}

func (s *DeleteLiveSnapshotFilesShrinkRequest) SetJobId(v string) *DeleteLiveSnapshotFilesShrinkRequest {
	s.JobId = &v
	return s
}

type DeleteLiveSnapshotFilesResponseBody struct {
	DeleteFileResultList []*DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList `json:"DeleteFileResultList,omitempty" xml:"DeleteFileResultList,omitempty" type:"Repeated"`
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSnapshotFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesResponseBody) SetDeleteFileResultList(v []*DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) *DeleteLiveSnapshotFilesResponseBody {
	s.DeleteFileResultList = v
	return s
}

func (s *DeleteLiveSnapshotFilesResponseBody) SetRequestId(v string) *DeleteLiveSnapshotFilesResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList struct {
	// example:
	//
	// 1660638613798
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// example:
	//
	// OK
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) SetCreateTimestamp(v int64) *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList {
	s.CreateTimestamp = &v
	return s
}

func (s *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList) SetResult(v string) *DeleteLiveSnapshotFilesResponseBodyDeleteFileResultList {
	s.Result = &v
	return s
}

type DeleteLiveSnapshotFilesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveSnapshotFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveSnapshotFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotFilesResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotFilesResponse) SetHeaders(v map[string]*string) *DeleteLiveSnapshotFilesResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSnapshotFilesResponse) SetStatusCode(v int32) *DeleteLiveSnapshotFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveSnapshotFilesResponse) SetBody(v *DeleteLiveSnapshotFilesResponseBody) *DeleteLiveSnapshotFilesResponse {
	s.Body = v
	return s
}

type DeleteLiveSnapshotTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotTemplateRequest) SetTemplateId(v string) *DeleteLiveSnapshotTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveSnapshotTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotTemplateResponseBody) SetRequestId(v string) *DeleteLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *DeleteLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveSnapshotTemplateResponse) SetStatusCode(v int32) *DeleteLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveSnapshotTemplateResponse) SetBody(v *DeleteLiveSnapshotTemplateResponseBody) *DeleteLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type DeleteLiveTranscodeJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobRequest) SetJobId(v string) *DeleteLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

type DeleteLiveTranscodeJobResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobResponseBody) SetRequestId(v string) *DeleteLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *DeleteLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveTranscodeJobResponse) SetStatusCode(v int32) *DeleteLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveTranscodeJobResponse) SetBody(v *DeleteLiveTranscodeJobResponseBody) *DeleteLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type DeleteLiveTranscodeTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateRequest) SetTemplateId(v string) *DeleteLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveTranscodeTemplateResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateResponseBody) SetRequestId(v string) *DeleteLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *DeleteLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveTranscodeTemplateResponse) SetStatusCode(v int32) *DeleteLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveTranscodeTemplateResponse) SetBody(v *DeleteLiveTranscodeTemplateResponseBody) *DeleteLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type DeleteMediaFromSearchLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// {}
	MsgBody *string `json:"MsgBody,omitempty" xml:"MsgBody,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s DeleteMediaFromSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaFromSearchLibRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaFromSearchLibRequest) SetMediaId(v string) *DeleteMediaFromSearchLibRequest {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaFromSearchLibRequest) SetMsgBody(v string) *DeleteMediaFromSearchLibRequest {
	s.MsgBody = &v
	return s
}

func (s *DeleteMediaFromSearchLibRequest) SetSearchLibName(v string) *DeleteMediaFromSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type DeleteMediaFromSearchLibResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteMediaFromSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaFromSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaFromSearchLibResponseBody) SetCode(v string) *DeleteMediaFromSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponseBody) SetMediaId(v string) *DeleteMediaFromSearchLibResponseBody {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponseBody) SetRequestId(v string) *DeleteMediaFromSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponseBody) SetSuccess(v string) *DeleteMediaFromSearchLibResponseBody {
	s.Success = &v
	return s
}

type DeleteMediaFromSearchLibResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaFromSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaFromSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaFromSearchLibResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaFromSearchLibResponse) SetHeaders(v map[string]*string) *DeleteMediaFromSearchLibResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaFromSearchLibResponse) SetStatusCode(v int32) *DeleteMediaFromSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaFromSearchLibResponse) SetBody(v *DeleteMediaFromSearchLibResponseBody) *DeleteMediaFromSearchLibResponse {
	s.Body = v
	return s
}

type DeleteMediaInfosRequest struct {
	// example:
	//
	// false
	DeletePhysicalFiles *bool   `json:"DeletePhysicalFiles,omitempty" xml:"DeletePhysicalFiles,omitempty"`
	InputURLs           *string `json:"InputURLs,omitempty" xml:"InputURLs,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s DeleteMediaInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosRequest) SetDeletePhysicalFiles(v bool) *DeleteMediaInfosRequest {
	s.DeletePhysicalFiles = &v
	return s
}

func (s *DeleteMediaInfosRequest) SetInputURLs(v string) *DeleteMediaInfosRequest {
	s.InputURLs = &v
	return s
}

func (s *DeleteMediaInfosRequest) SetMediaIds(v string) *DeleteMediaInfosRequest {
	s.MediaIds = &v
	return s
}

type DeleteMediaInfosResponseBody struct {
	ForbiddenList []*string `json:"ForbiddenList,omitempty" xml:"ForbiddenList,omitempty" type:"Repeated"`
	IgnoredList   []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// example:
	//
	// 0622C702-41BE-467E-AF2E-883D4517962E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosResponseBody) SetForbiddenList(v []*string) *DeleteMediaInfosResponseBody {
	s.ForbiddenList = v
	return s
}

func (s *DeleteMediaInfosResponseBody) SetIgnoredList(v []*string) *DeleteMediaInfosResponseBody {
	s.IgnoredList = v
	return s
}

func (s *DeleteMediaInfosResponseBody) SetRequestId(v string) *DeleteMediaInfosResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaInfosResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosResponse) SetHeaders(v map[string]*string) *DeleteMediaInfosResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaInfosResponse) SetStatusCode(v int32) *DeleteMediaInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaInfosResponse) SetBody(v *DeleteMediaInfosResponseBody) *DeleteMediaInfosResponse {
	s.Body = v
	return s
}

type DeleteMediaMarksRequest struct {
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
}

func (s DeleteMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaMarksRequest) SetMediaId(v string) *DeleteMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaMarksRequest) SetMediaMarkIds(v string) *DeleteMediaMarksRequest {
	s.MediaMarkIds = &v
	return s
}

type DeleteMediaMarksResponseBody struct {
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaMarksResponseBody) SetMediaId(v string) *DeleteMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaMarksResponseBody) SetMediaMarkIds(v string) *DeleteMediaMarksResponseBody {
	s.MediaMarkIds = &v
	return s
}

func (s *DeleteMediaMarksResponseBody) SetRequestId(v string) *DeleteMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaMarksResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaMarksResponse) SetHeaders(v map[string]*string) *DeleteMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaMarksResponse) SetStatusCode(v int32) *DeleteMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaMarksResponse) SetBody(v *DeleteMediaMarksResponseBody) *DeleteMediaMarksResponse {
	s.Body = v
	return s
}

type DeletePipelineRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s DeletePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRequest) GoString() string {
	return s.String()
}

func (s *DeletePipelineRequest) SetPipelineId(v string) *DeletePipelineRequest {
	s.PipelineId = &v
	return s
}

type DeletePipelineResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeletePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponseBody) SetRequestId(v string) *DeletePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePipelineResponseBody) SetSuccess(v bool) *DeletePipelineResponseBody {
	s.Success = &v
	return s
}

type DeletePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponse) SetHeaders(v map[string]*string) *DeletePipelineResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineResponse) SetStatusCode(v int32) *DeletePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePipelineResponse) SetBody(v *DeletePipelineResponseBody) *DeletePipelineResponse {
	s.Body = v
	return s
}

type DeletePlayInfoRequest struct {
	// example:
	//
	// false
	DeletePhysicalFiles *bool `json:"DeletePhysicalFiles,omitempty" xml:"DeletePhysicalFiles,omitempty"`
	// example:
	//
	// https://ice-test001.oss-cn-shanghai.aliyuncs.com/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/%E5%B0%8F%E7%8C%AA%E4%BD%A9%E5%A5%87640*360.mp4
	FileURLs *string `json:"FileURLs,omitempty" xml:"FileURLs,omitempty"`
	// example:
	//
	// 1d3518e0027d71ed80cd909598416303
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s DeletePlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoRequest) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoRequest) SetDeletePhysicalFiles(v bool) *DeletePlayInfoRequest {
	s.DeletePhysicalFiles = &v
	return s
}

func (s *DeletePlayInfoRequest) SetFileURLs(v string) *DeletePlayInfoRequest {
	s.FileURLs = &v
	return s
}

func (s *DeletePlayInfoRequest) SetMediaId(v string) *DeletePlayInfoRequest {
	s.MediaId = &v
	return s
}

type DeletePlayInfoResponseBody struct {
	ForbiddenList []*string `json:"ForbiddenList,omitempty" xml:"ForbiddenList,omitempty" type:"Repeated"`
	IgnoredList   []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoResponseBody) SetForbiddenList(v []*string) *DeletePlayInfoResponseBody {
	s.ForbiddenList = v
	return s
}

func (s *DeletePlayInfoResponseBody) SetIgnoredList(v []*string) *DeletePlayInfoResponseBody {
	s.IgnoredList = v
	return s
}

func (s *DeletePlayInfoResponseBody) SetRequestId(v string) *DeletePlayInfoResponseBody {
	s.RequestId = &v
	return s
}

type DeletePlayInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeletePlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeletePlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoResponse) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoResponse) SetHeaders(v map[string]*string) *DeletePlayInfoResponse {
	s.Headers = v
	return s
}

func (s *DeletePlayInfoResponse) SetStatusCode(v int32) *DeletePlayInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePlayInfoResponse) SetBody(v *DeletePlayInfoResponseBody) *DeletePlayInfoResponse {
	s.Body = v
	return s
}

type DeleteSmartJobRequest struct {
	// example:
	//
	// ******b48fb04483915d4f2cd8******,******042d5e4db6866f6289d1******
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteSmartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobRequest) SetJobId(v string) *DeleteSmartJobRequest {
	s.JobId = &v
	return s
}

type DeleteSmartJobResponseBody struct {
	// RequestId
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSmartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobResponseBody) SetRequestId(v string) *DeleteSmartJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSmartJobResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteSmartJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteSmartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobResponse) SetHeaders(v map[string]*string) *DeleteSmartJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmartJobResponse) SetStatusCode(v int32) *DeleteSmartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSmartJobResponse) SetBody(v *DeleteSmartJobResponseBody) *DeleteSmartJobResponse {
	s.Body = v
	return s
}

type DeleteTemplateRequest struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****,****20b48fb04483915d4f2cd8ac****
	TemplateIds *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
}

func (s DeleteTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteTemplateRequest) SetTemplateIds(v string) *DeleteTemplateRequest {
	s.TemplateIds = &v
	return s
}

type DeleteTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponseBody) SetRequestId(v string) *DeleteTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponse) SetHeaders(v map[string]*string) *DeleteTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteTemplateResponse) SetStatusCode(v int32) *DeleteTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTemplateResponse) SetBody(v *DeleteTemplateResponseBody) *DeleteTemplateResponse {
	s.Body = v
	return s
}

type DescribeMeterImsEditUsageRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 86400
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsEditUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageRequest) SetEndTs(v int64) *DescribeMeterImsEditUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsEditUsageRequest) SetInterval(v int64) *DescribeMeterImsEditUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsEditUsageRequest) SetRegion(v string) *DescribeMeterImsEditUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsEditUsageRequest) SetStartTs(v int64) *DescribeMeterImsEditUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsEditUsageResponseBody struct {
	Data []*DescribeMeterImsEditUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 7F3AE2C6-5CC6-5712-BAC5-5A735A157687
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsEditUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageResponseBody) SetData(v []*DescribeMeterImsEditUsageResponseBodyData) *DescribeMeterImsEditUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsEditUsageResponseBody) SetRequestId(v string) *DescribeMeterImsEditUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsEditUsageResponseBodyData struct {
	// example:
	//
	// 1.23
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1080P
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 1656950400
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterImsEditUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsEditUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsEditUsageResponseBodyData) SetProfile(v string) *DescribeMeterImsEditUsageResponseBodyData {
	s.Profile = &v
	return s
}

func (s *DescribeMeterImsEditUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsEditUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterImsEditUsageResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsEditUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsEditUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsEditUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsEditUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsEditUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsEditUsageResponse) SetStatusCode(v int32) *DescribeMeterImsEditUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsEditUsageResponse) SetBody(v *DescribeMeterImsEditUsageResponseBody) *DescribeMeterImsEditUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3600
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// cn-shanghai
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetEndTs(v int64) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetInterval(v string) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetRegionId(v string) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageRequest) SetStartTs(v int64) *DescribeMeterImsMediaConvertUHDUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageResponseBody struct {
	Data []*DescribeMeterImsMediaConvertUHDUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBody) SetData(v []*DescribeMeterImsMediaConvertUHDUsageResponseBodyData) *DescribeMeterImsMediaConvertUHDUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBody) SetRequestId(v string) *DescribeMeterImsMediaConvertUHDUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageResponseBodyData struct {
	// example:
	//
	// 308028
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// SuperResolution.Standard.1080P
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// example:
	//
	// 1656950400
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsMediaConvertUHDUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBodyData) SetSpecification(v string) *DescribeMeterImsMediaConvertUHDUsageResponseBodyData {
	s.Specification = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsMediaConvertUHDUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterImsMediaConvertUHDUsageResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsMediaConvertUHDUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsMediaConvertUHDUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUHDUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsMediaConvertUHDUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponse) SetStatusCode(v int32) *DescribeMeterImsMediaConvertUHDUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUHDUsageResponse) SetBody(v *DescribeMeterImsMediaConvertUHDUsageResponseBody) *DescribeMeterImsMediaConvertUHDUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsMediaConvertUsageRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 86400
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetEndTs(v int64) *DescribeMeterImsMediaConvertUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetInterval(v int64) *DescribeMeterImsMediaConvertUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetRegion(v string) *DescribeMeterImsMediaConvertUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageRequest) SetStartTs(v int64) *DescribeMeterImsMediaConvertUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsMediaConvertUsageResponseBody struct {
	Data []*DescribeMeterImsMediaConvertUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// FBBB5210-2B78-58FB-A6FE-9DD887BB2C61
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageResponseBody) SetData(v []*DescribeMeterImsMediaConvertUsageResponseBodyData) *DescribeMeterImsMediaConvertUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponseBody) SetRequestId(v string) *DescribeMeterImsMediaConvertUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsMediaConvertUsageResponseBodyData struct {
	// example:
	//
	// 20
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// H264.HD
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	// example:
	//
	// 1656950400
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsMediaConvertUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponseBodyData) SetSpecification(v string) *DescribeMeterImsMediaConvertUsageResponseBodyData {
	s.Specification = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsMediaConvertUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterImsMediaConvertUsageResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsMediaConvertUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsMediaConvertUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMediaConvertUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMediaConvertUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsMediaConvertUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponse) SetStatusCode(v int32) *DescribeMeterImsMediaConvertUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsMediaConvertUsageResponse) SetBody(v *DescribeMeterImsMediaConvertUsageResponseBody) *DescribeMeterImsMediaConvertUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsMpsAiUsageRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 86400
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetEndTs(v int64) *DescribeMeterImsMpsAiUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetInterval(v int64) *DescribeMeterImsMpsAiUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetRegion(v string) *DescribeMeterImsMpsAiUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageRequest) SetStartTs(v int64) *DescribeMeterImsMpsAiUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsMpsAiUsageResponseBody struct {
	Data []*DescribeMeterImsMpsAiUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// 0622C702-41BE-467E-AF2E-883D4517962E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageResponseBody) SetData(v []*DescribeMeterImsMpsAiUsageResponseBodyData) *DescribeMeterImsMpsAiUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponseBody) SetRequestId(v string) *DescribeMeterImsMpsAiUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsMpsAiUsageResponseBodyData struct {
	// example:
	//
	// 644
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1656950400
	Time *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageResponseBodyData) SetDuration(v int64) *DescribeMeterImsMpsAiUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponseBodyData) SetTime(v int64) *DescribeMeterImsMpsAiUsageResponseBodyData {
	s.Time = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponseBodyData) SetType(v string) *DescribeMeterImsMpsAiUsageResponseBodyData {
	s.Type = &v
	return s
}

type DescribeMeterImsMpsAiUsageResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsMpsAiUsageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsMpsAiUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsMpsAiUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsMpsAiUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterImsMpsAiUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponse) SetStatusCode(v int32) *DescribeMeterImsMpsAiUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsMpsAiUsageResponse) SetBody(v *DescribeMeterImsMpsAiUsageResponseBody) *DescribeMeterImsMpsAiUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterImsSummaryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1656995036
	EndTs *int64 `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1654403036
	StartTs *int64 `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterImsSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryRequest) SetEndTs(v int64) *DescribeMeterImsSummaryRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterImsSummaryRequest) SetRegion(v string) *DescribeMeterImsSummaryRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterImsSummaryRequest) SetStartTs(v int64) *DescribeMeterImsSummaryRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterImsSummaryResponseBody struct {
	Data []*DescribeMeterImsSummaryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterImsSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryResponseBody) SetData(v []*DescribeMeterImsSummaryResponseBodyData) *DescribeMeterImsSummaryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterImsSummaryResponseBody) SetRequestId(v string) *DescribeMeterImsSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterImsSummaryResponseBodyData struct {
	// example:
	//
	// 8722
	EditingDuration    *string `json:"EditingDuration,omitempty" xml:"EditingDuration,omitempty"`
	LiveEditDuration   *string `json:"LiveEditDuration,omitempty" xml:"LiveEditDuration,omitempty"`
	LiveRecordDuration *string `json:"LiveRecordDuration,omitempty" xml:"LiveRecordDuration,omitempty"`
	LiveSnapshotCount  *string `json:"LiveSnapshotCount,omitempty" xml:"LiveSnapshotCount,omitempty"`
	// example:
	//
	// 12356
	LiveTranscodeDuration *int64 `json:"LiveTranscodeDuration,omitempty" xml:"LiveTranscodeDuration,omitempty"`
	// example:
	//
	// 0
	MpsAiDuration *int64 `json:"MpsAiDuration,omitempty" xml:"MpsAiDuration,omitempty"`
	// example:
	//
	// 17337
	MpsTranscodeDuration *int64 `json:"MpsTranscodeDuration,omitempty" xml:"MpsTranscodeDuration,omitempty"`
	// example:
	//
	// 300
	MpsTranscodeUHDDuration *int64 `json:"MpsTranscodeUHDDuration,omitempty" xml:"MpsTranscodeUHDDuration,omitempty"`
}

func (s DescribeMeterImsSummaryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetEditingDuration(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.EditingDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveEditDuration(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveEditDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveRecordDuration(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveRecordDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveSnapshotCount(v string) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveSnapshotCount = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetLiveTranscodeDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.LiveTranscodeDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetMpsAiDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.MpsAiDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetMpsTranscodeDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.MpsTranscodeDuration = &v
	return s
}

func (s *DescribeMeterImsSummaryResponseBodyData) SetMpsTranscodeUHDDuration(v int64) *DescribeMeterImsSummaryResponseBodyData {
	s.MpsTranscodeUHDDuration = &v
	return s
}

type DescribeMeterImsSummaryResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMeterImsSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMeterImsSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterImsSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterImsSummaryResponse) SetHeaders(v map[string]*string) *DescribeMeterImsSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterImsSummaryResponse) SetStatusCode(v int32) *DescribeMeterImsSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterImsSummaryResponse) SetBody(v *DescribeMeterImsSummaryResponseBody) *DescribeMeterImsSummaryResponse {
	s.Body = v
	return s
}

type DescribePlayListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1676170500011
	BeginTs *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1682474405173
	EndTs *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	// example:
	//
	// FirstFrameDuration
	OrderName *string `json:"OrderName,omitempty" xml:"OrderName,omitempty"`
	// example:
	//
	// DESC
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// vod
	PlayType *string `json:"PlayType,omitempty" xml:"PlayType,omitempty"`
	// example:
	//
	// complete
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 0bc5e70516766285805381012d271e
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribePlayListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListRequest) GoString() string {
	return s.String()
}

func (s *DescribePlayListRequest) SetBeginTs(v string) *DescribePlayListRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePlayListRequest) SetEndTs(v string) *DescribePlayListRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePlayListRequest) SetOrderName(v string) *DescribePlayListRequest {
	s.OrderName = &v
	return s
}

func (s *DescribePlayListRequest) SetOrderType(v string) *DescribePlayListRequest {
	s.OrderType = &v
	return s
}

func (s *DescribePlayListRequest) SetPageNo(v int32) *DescribePlayListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribePlayListRequest) SetPageSize(v int32) *DescribePlayListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePlayListRequest) SetPlayType(v string) *DescribePlayListRequest {
	s.PlayType = &v
	return s
}

func (s *DescribePlayListRequest) SetStatus(v string) *DescribePlayListRequest {
	s.Status = &v
	return s
}

func (s *DescribePlayListRequest) SetTraceId(v string) *DescribePlayListRequest {
	s.TraceId = &v
	return s
}

type DescribePlayListResponseBody struct {
	// example:
	//
	// 1
	PageNum *int64 `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	// example:
	//
	// 10
	PageSize *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PlayList []*DescribePlayListResponseBodyPlayList `json:"PlayList,omitempty" xml:"PlayList,omitempty" type:"Repeated"`
	// Id
	//
	// example:
	//
	// B960580D-26FA-5547-8AFC-3CDC812DBF27
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 49
	TotalNum *int64 `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
}

func (s DescribePlayListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePlayListResponseBody) SetPageNum(v int64) *DescribePlayListResponseBody {
	s.PageNum = &v
	return s
}

func (s *DescribePlayListResponseBody) SetPageSize(v int64) *DescribePlayListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePlayListResponseBody) SetPlayList(v []*DescribePlayListResponseBodyPlayList) *DescribePlayListResponseBody {
	s.PlayList = v
	return s
}

func (s *DescribePlayListResponseBody) SetRequestId(v string) *DescribePlayListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePlayListResponseBody) SetTotalNum(v int64) *DescribePlayListResponseBody {
	s.TotalNum = &v
	return s
}

type DescribePlayListResponseBodyPlayList struct {
	// example:
	//
	// 200
	FirstFrameDuration *string `json:"FirstFrameDuration,omitempty" xml:"FirstFrameDuration,omitempty"`
	// example:
	//
	// 1000
	PlayDuration *string `json:"PlayDuration,omitempty" xml:"PlayDuration,omitempty"`
	// example:
	//
	// 1675922209572
	PlayTs *string `json:"PlayTs,omitempty" xml:"PlayTs,omitempty"`
	// example:
	//
	// vod
	PlayType *string `json:"PlayType,omitempty" xml:"PlayType,omitempty"`
	// example:
	//
	// 91488be2-8381-40c9-8494-e8afe22c4a2d
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// example:
	//
	// complete
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 20
	StuckDuration *string `json:"StuckDuration,omitempty" xml:"StuckDuration,omitempty"`
	// example:
	//
	// 0b736abf16724820210842673d9543
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	// example:
	//
	// 2000
	VideoDuration *string `json:"VideoDuration,omitempty" xml:"VideoDuration,omitempty"`
	// example:
	//
	// 250314203f0171eebff17035d0b20102
	VideoId *string `json:"VideoId,omitempty" xml:"VideoId,omitempty"`
}

func (s DescribePlayListResponseBodyPlayList) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListResponseBodyPlayList) GoString() string {
	return s.String()
}

func (s *DescribePlayListResponseBodyPlayList) SetFirstFrameDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.FirstFrameDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetPlayDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.PlayDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetPlayTs(v string) *DescribePlayListResponseBodyPlayList {
	s.PlayTs = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetPlayType(v string) *DescribePlayListResponseBodyPlayList {
	s.PlayType = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetSessionId(v string) *DescribePlayListResponseBodyPlayList {
	s.SessionId = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetStatus(v string) *DescribePlayListResponseBodyPlayList {
	s.Status = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetStuckDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.StuckDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetTraceId(v string) *DescribePlayListResponseBodyPlayList {
	s.TraceId = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetVideoDuration(v string) *DescribePlayListResponseBodyPlayList {
	s.VideoDuration = &v
	return s
}

func (s *DescribePlayListResponseBodyPlayList) SetVideoId(v string) *DescribePlayListResponseBodyPlayList {
	s.VideoId = &v
	return s
}

type DescribePlayListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePlayListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePlayListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayListResponse) GoString() string {
	return s.String()
}

func (s *DescribePlayListResponse) SetHeaders(v map[string]*string) *DescribePlayListResponse {
	s.Headers = v
	return s
}

func (s *DescribePlayListResponse) SetStatusCode(v int32) *DescribePlayListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePlayListResponse) SetBody(v *DescribePlayListResponseBody) *DescribePlayListResponse {
	s.Body = v
	return s
}

type DetectAudioForCustomizedVoiceJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 1
	AudioRecordId *int32 `json:"AudioRecordId,omitempty" xml:"AudioRecordId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/record1.wav
	RecordUrl *string `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobRequest) SetAudioRecordId(v int32) *DetectAudioForCustomizedVoiceJobRequest {
	s.AudioRecordId = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobRequest) SetRecordUrl(v string) *DetectAudioForCustomizedVoiceJobRequest {
	s.RecordUrl = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobRequest) SetVoiceId(v string) *DetectAudioForCustomizedVoiceJobRequest {
	s.VoiceId = &v
	return s
}

type DetectAudioForCustomizedVoiceJobResponseBody struct {
	Data *DetectAudioForCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobResponseBody) SetData(v *DetectAudioForCustomizedVoiceJobResponseBodyData) *DetectAudioForCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponseBody) SetRequestId(v string) *DetectAudioForCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponseBody) SetSuccess(v bool) *DetectAudioForCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type DetectAudioForCustomizedVoiceJobResponseBodyData struct {
	// example:
	//
	// false
	Pass   *bool   `json:"Pass,omitempty" xml:"Pass,omitempty"`
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobResponseBodyData) SetPass(v bool) *DetectAudioForCustomizedVoiceJobResponseBodyData {
	s.Pass = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponseBodyData) SetReason(v string) *DetectAudioForCustomizedVoiceJobResponseBodyData {
	s.Reason = &v
	return s
}

type DetectAudioForCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DetectAudioForCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DetectAudioForCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DetectAudioForCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *DetectAudioForCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *DetectAudioForCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponse) SetStatusCode(v int32) *DetectAudioForCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DetectAudioForCustomizedVoiceJobResponse) SetBody(v *DetectAudioForCustomizedVoiceJobResponseBody) *DetectAudioForCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type DropSearchIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s DropSearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s DropSearchIndexRequest) GoString() string {
	return s.String()
}

func (s *DropSearchIndexRequest) SetIndexType(v string) *DropSearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *DropSearchIndexRequest) SetSearchLibName(v string) *DropSearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type DropSearchIndexResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DropSearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DropSearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *DropSearchIndexResponseBody) SetCode(v string) *DropSearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *DropSearchIndexResponseBody) SetRequestId(v string) *DropSearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *DropSearchIndexResponseBody) SetSuccess(v string) *DropSearchIndexResponseBody {
	s.Success = &v
	return s
}

type DropSearchIndexResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DropSearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DropSearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s DropSearchIndexResponse) GoString() string {
	return s.String()
}

func (s *DropSearchIndexResponse) SetHeaders(v map[string]*string) *DropSearchIndexResponse {
	s.Headers = v
	return s
}

func (s *DropSearchIndexResponse) SetStatusCode(v int32) *DropSearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *DropSearchIndexResponse) SetBody(v *DropSearchIndexResponseBody) *DropSearchIndexResponse {
	s.Body = v
	return s
}

type DropSearchLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s DropSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s DropSearchLibRequest) GoString() string {
	return s.String()
}

func (s *DropSearchLibRequest) SetSearchLibName(v string) *DropSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type DropSearchLibResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DropSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DropSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *DropSearchLibResponseBody) SetCode(v string) *DropSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *DropSearchLibResponseBody) SetRequestId(v string) *DropSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *DropSearchLibResponseBody) SetSuccess(v string) *DropSearchLibResponseBody {
	s.Success = &v
	return s
}

type DropSearchLibResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DropSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DropSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s DropSearchLibResponse) GoString() string {
	return s.String()
}

func (s *DropSearchLibResponse) SetHeaders(v map[string]*string) *DropSearchLibResponse {
	s.Headers = v
	return s
}

func (s *DropSearchLibResponse) SetStatusCode(v int32) *DropSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *DropSearchLibResponse) SetBody(v *DropSearchLibResponseBody) *DropSearchLibResponse {
	s.Body = v
	return s
}

type GenerateKMSDataKeyResponseBody struct {
	DataKey *GenerateKMSDataKeyResponseBodyDataKey `json:"DataKey,omitempty" xml:"DataKey,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GenerateKMSDataKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GenerateKMSDataKeyResponseBody) GoString() string {
	return s.String()
}

func (s *GenerateKMSDataKeyResponseBody) SetDataKey(v *GenerateKMSDataKeyResponseBodyDataKey) *GenerateKMSDataKeyResponseBody {
	s.DataKey = v
	return s
}

func (s *GenerateKMSDataKeyResponseBody) SetRequestId(v string) *GenerateKMSDataKeyResponseBody {
	s.RequestId = &v
	return s
}

type GenerateKMSDataKeyResponseBodyDataKey struct {
	// example:
	//
	// ODZhOWVmZDktM2QxNi00ODk0LWJkNGYtMWZjNDNmM2YyYWJmS7FmDBBQ0BkKsQrtRnidtPwirmDcS0ZuJCU41xxAAWk4Z8qsADfbV0b+i6kQmlvj79dJdGOvtX69Uycs901qOjop4bTS****
	CiphertextBlob *string `json:"CiphertextBlob,omitempty" xml:"CiphertextBlob,omitempty"`
	// example:
	//
	// 7906979c-8e06-46a2-be2d-68e3ccbc****
	KeyId *string `json:"KeyId,omitempty" xml:"KeyId,omitempty"`
	// example:
	//
	// QmFzZTY0IGVuY29kZWQgcGxhaW50****
	Plaintext *string `json:"Plaintext,omitempty" xml:"Plaintext,omitempty"`
}

func (s GenerateKMSDataKeyResponseBodyDataKey) String() string {
	return tea.Prettify(s)
}

func (s GenerateKMSDataKeyResponseBodyDataKey) GoString() string {
	return s.String()
}

func (s *GenerateKMSDataKeyResponseBodyDataKey) SetCiphertextBlob(v string) *GenerateKMSDataKeyResponseBodyDataKey {
	s.CiphertextBlob = &v
	return s
}

func (s *GenerateKMSDataKeyResponseBodyDataKey) SetKeyId(v string) *GenerateKMSDataKeyResponseBodyDataKey {
	s.KeyId = &v
	return s
}

func (s *GenerateKMSDataKeyResponseBodyDataKey) SetPlaintext(v string) *GenerateKMSDataKeyResponseBodyDataKey {
	s.Plaintext = &v
	return s
}

type GenerateKMSDataKeyResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GenerateKMSDataKeyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GenerateKMSDataKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s GenerateKMSDataKeyResponse) GoString() string {
	return s.String()
}

func (s *GenerateKMSDataKeyResponse) SetHeaders(v map[string]*string) *GenerateKMSDataKeyResponse {
	s.Headers = v
	return s
}

func (s *GenerateKMSDataKeyResponse) SetStatusCode(v int32) *GenerateKMSDataKeyResponse {
	s.StatusCode = &v
	return s
}

func (s *GenerateKMSDataKeyResponse) SetBody(v *GenerateKMSDataKeyResponseBody) *GenerateKMSDataKeyResponse {
	s.Body = v
	return s
}

type GetAvatarRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Avatar-XXXX
	AvatarId *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
}

func (s GetAvatarRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarRequest) GoString() string {
	return s.String()
}

func (s *GetAvatarRequest) SetAvatarId(v string) *GetAvatarRequest {
	s.AvatarId = &v
	return s
}

type GetAvatarResponseBody struct {
	Data *GetAvatarResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAvatarResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponseBody) GoString() string {
	return s.String()
}

func (s *GetAvatarResponseBody) SetData(v *GetAvatarResponseBodyData) *GetAvatarResponseBody {
	s.Data = v
	return s
}

func (s *GetAvatarResponseBody) SetRequestId(v string) *GetAvatarResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAvatarResponseBody) SetSuccess(v bool) *GetAvatarResponseBody {
	s.Success = &v
	return s
}

type GetAvatarResponseBodyData struct {
	Avatar *GetAvatarResponseBodyDataAvatar `json:"Avatar,omitempty" xml:"Avatar,omitempty" type:"Struct"`
}

func (s GetAvatarResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAvatarResponseBodyData) SetAvatar(v *GetAvatarResponseBodyDataAvatar) *GetAvatarResponseBodyData {
	s.Avatar = v
	return s
}

type GetAvatarResponseBodyDataAvatar struct {
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// example:
	//
	// Avatar-XXXX
	AvatarId   *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	Height     *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// example:
	//
	// true
	Transparent *bool  `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	Width       *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetAvatarResponseBodyDataAvatar) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponseBodyDataAvatar) GoString() string {
	return s.String()
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarDescription(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarDescription = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarId(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarId = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarName(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarName = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetAvatarType(v string) *GetAvatarResponseBodyDataAvatar {
	s.AvatarType = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetHeight(v int32) *GetAvatarResponseBodyDataAvatar {
	s.Height = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetPortrait(v string) *GetAvatarResponseBodyDataAvatar {
	s.Portrait = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetThumbnail(v string) *GetAvatarResponseBodyDataAvatar {
	s.Thumbnail = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetTransparent(v bool) *GetAvatarResponseBodyDataAvatar {
	s.Transparent = &v
	return s
}

func (s *GetAvatarResponseBodyDataAvatar) SetWidth(v int32) *GetAvatarResponseBodyDataAvatar {
	s.Width = &v
	return s
}

type GetAvatarResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAvatarResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAvatarResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarResponse) GoString() string {
	return s.String()
}

func (s *GetAvatarResponse) SetHeaders(v map[string]*string) *GetAvatarResponse {
	s.Headers = v
	return s
}

func (s *GetAvatarResponse) SetStatusCode(v int32) *GetAvatarResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAvatarResponse) SetBody(v *GetAvatarResponseBody) *GetAvatarResponse {
	s.Body = v
	return s
}

type GetAvatarTrainingJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobRequest) SetJobId(v string) *GetAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

type GetAvatarTrainingJobResponseBody struct {
	Data *GetAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponseBody) SetData(v *GetAvatarTrainingJobResponseBodyData) *GetAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *GetAvatarTrainingJobResponseBody) SetRequestId(v string) *GetAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBody) SetSuccess(v bool) *GetAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type GetAvatarTrainingJobResponseBodyData struct {
	AvatarTrainingJob *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob `json:"AvatarTrainingJob,omitempty" xml:"AvatarTrainingJob,omitempty" type:"Struct"`
}

func (s GetAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponseBodyData) SetAvatarTrainingJob(v *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) *GetAvatarTrainingJobResponseBodyData {
	s.AvatarTrainingJob = v
	return s
}

type GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob struct {
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// example:
	//
	// Avatar-XXXX
	AvatarId   *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:40Z
	FirstTrainingTime *string `json:"FirstTrainingTime,omitempty" xml:"FirstTrainingTime,omitempty"`
	// example:
	//
	// ****55d86f7f4587943ce7734d6b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:40Z
	LastTrainingTime *string `json:"LastTrainingTime,omitempty" xml:"LastTrainingTime,omitempty"`
	Message          *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// example:
	//
	// true
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Video *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarDescription(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarDescription = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarId(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarId = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarName(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarName = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetAvatarType(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.AvatarType = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetFirstTrainingTime(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.FirstTrainingTime = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetJobId(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.JobId = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetLastTrainingTime(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.LastTrainingTime = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetMessage(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Message = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetPortrait(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Portrait = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetStatus(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Status = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetThumbnail(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Thumbnail = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetTransparent(v bool) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Transparent = &v
	return s
}

func (s *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob) SetVideo(v string) *GetAvatarTrainingJobResponseBodyDataAvatarTrainingJob {
	s.Video = &v
	return s
}

type GetAvatarTrainingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *GetAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *GetAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *GetAvatarTrainingJobResponse) SetStatusCode(v int32) *GetAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAvatarTrainingJobResponse) SetBody(v *GetAvatarTrainingJobResponseBody) *GetAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type GetBatchMediaProducingJobRequest struct {
	// example:
	//
	// ****b4549d46c88681030f6e****
	JobId            *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Signature        *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
	SignatureMehtod  *string `json:"SignatureMehtod,omitempty" xml:"SignatureMehtod,omitempty"`
	SignatureNonce   *string `json:"SignatureNonce,omitempty" xml:"SignatureNonce,omitempty"`
	SignatureType    *string `json:"SignatureType,omitempty" xml:"SignatureType,omitempty"`
	SignatureVersion *string `json:"SignatureVersion,omitempty" xml:"SignatureVersion,omitempty"`
}

func (s GetBatchMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobRequest) SetJobId(v string) *GetBatchMediaProducingJobRequest {
	s.JobId = &v
	return s
}

func (s *GetBatchMediaProducingJobRequest) SetSignature(v string) *GetBatchMediaProducingJobRequest {
	s.Signature = &v
	return s
}

func (s *GetBatchMediaProducingJobRequest) SetSignatureMehtod(v string) *GetBatchMediaProducingJobRequest {
	s.SignatureMehtod = &v
	return s
}

func (s *GetBatchMediaProducingJobRequest) SetSignatureNonce(v string) *GetBatchMediaProducingJobRequest {
	s.SignatureNonce = &v
	return s
}

func (s *GetBatchMediaProducingJobRequest) SetSignatureType(v string) *GetBatchMediaProducingJobRequest {
	s.SignatureType = &v
	return s
}

func (s *GetBatchMediaProducingJobRequest) SetSignatureVersion(v string) *GetBatchMediaProducingJobRequest {
	s.SignatureVersion = &v
	return s
}

type GetBatchMediaProducingJobResponseBody struct {
	EditingBatchJob *GetBatchMediaProducingJobResponseBodyEditingBatchJob `json:"EditingBatchJob,omitempty" xml:"EditingBatchJob,omitempty" type:"Struct"`
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetBatchMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponseBody) SetEditingBatchJob(v *GetBatchMediaProducingJobResponseBodyEditingBatchJob) *GetBatchMediaProducingJobResponseBody {
	s.EditingBatchJob = v
	return s
}

func (s *GetBatchMediaProducingJobResponseBody) SetRequestId(v string) *GetBatchMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetBatchMediaProducingJobResponseBodyEditingBatchJob struct {
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// {
	//
	//   "MediaConfig": {
	//
	//       "Volume": 0
	//
	//   },
	//
	//   "SpeechConfig": {
	//
	//       "Volume": 1
	//
	//   },
	//
	//  "BackgroundMusicConfig": {
	//
	//       "Volume": 0.3
	//
	//   }
	//
	// }
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// example:
	//
	// {
	//
	// 	"ErrorCode": "InvalidMaterial.NotFound",
	//
	// 	"ErrorMessage": "The specified clips id not found:[\\"****30d0b5e871eebb2ff7f6c75a****\\"]"
	//
	// }
	Extend      *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// example:
	//
	// ****b6b2750d4308892ac3330238****
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobType      *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 20,
	//
	//   "MaxDuration": 15,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920,
	//
	//   "Video": {"Crf": 27}
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// example:
	//
	// Finished
	Status     *string                                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	SubJobList []*GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList `json:"SubJobList,omitempty" xml:"SubJobList,omitempty" type:"Repeated"`
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJob) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJob) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetCompleteTime(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.CompleteTime = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetCreateTime(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.CreateTime = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetEditingConfig(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.EditingConfig = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetExtend(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.Extend = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetInputConfig(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.InputConfig = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetJobId(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.JobId = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetJobType(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.JobType = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetModifiedTime(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetOutputConfig(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.OutputConfig = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetStatus(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.Status = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetSubJobList(v []*GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.SubJobList = v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJob) SetUserData(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJob {
	s.UserData = &v
	return s
}

type GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList struct {
	// example:
	//
	// InvalidMaterial.NotFound
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// The specified clips id not found:["****30d0b5e871eebb2ff7f6c75a****"]
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// ****8e81933d44e3ae69e2f81485****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****1470b11171ee9d19e7e6c66a****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// http:/xxx.oss-cn-shanghai.aliyuncs.com/xxx_0.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetErrorCode(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.ErrorCode = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetErrorMessage(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.ErrorMessage = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetJobId(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.JobId = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetMediaId(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.MediaId = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetMediaURL(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.MediaURL = &v
	return s
}

func (s *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList) SetStatus(v string) *GetBatchMediaProducingJobResponseBodyEditingBatchJobSubJobList {
	s.Status = &v
	return s
}

type GetBatchMediaProducingJobResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBatchMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBatchMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBatchMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *GetBatchMediaProducingJobResponse) SetHeaders(v map[string]*string) *GetBatchMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *GetBatchMediaProducingJobResponse) SetStatusCode(v int32) *GetBatchMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBatchMediaProducingJobResponse) SetBody(v *GetBatchMediaProducingJobResponseBody) *GetBatchMediaProducingJobResponse {
	s.Body = v
	return s
}

type GetCategoriesRequest struct {
	// example:
	//
	// 33
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesRequest) GoString() string {
	return s.String()
}

func (s *GetCategoriesRequest) SetCateId(v int64) *GetCategoriesRequest {
	s.CateId = &v
	return s
}

func (s *GetCategoriesRequest) SetPageNo(v int64) *GetCategoriesRequest {
	s.PageNo = &v
	return s
}

func (s *GetCategoriesRequest) SetPageSize(v int64) *GetCategoriesRequest {
	s.PageSize = &v
	return s
}

func (s *GetCategoriesRequest) SetSortBy(v string) *GetCategoriesRequest {
	s.SortBy = &v
	return s
}

func (s *GetCategoriesRequest) SetType(v string) *GetCategoriesRequest {
	s.Type = &v
	return s
}

type GetCategoriesResponseBody struct {
	Category *GetCategoriesResponseBodyCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubCategories *GetCategoriesResponseBodySubCategories `json:"SubCategories,omitempty" xml:"SubCategories,omitempty" type:"Struct"`
	// example:
	//
	// 100
	SubTotal *int64 `json:"SubTotal,omitempty" xml:"SubTotal,omitempty"`
}

func (s GetCategoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBody) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBody) SetCategory(v *GetCategoriesResponseBodyCategory) *GetCategoriesResponseBody {
	s.Category = v
	return s
}

func (s *GetCategoriesResponseBody) SetRequestId(v string) *GetCategoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCategoriesResponseBody) SetSubCategories(v *GetCategoriesResponseBodySubCategories) *GetCategoriesResponseBody {
	s.SubCategories = v
	return s
}

func (s *GetCategoriesResponseBody) SetSubTotal(v int64) *GetCategoriesResponseBody {
	s.SubTotal = &v
	return s
}

type GetCategoriesResponseBodyCategory struct {
	// example:
	//
	// 46
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// example:
	//
	// 0
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// -1
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodyCategory) SetCateId(v int64) *GetCategoriesResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetCateName(v string) *GetCategoriesResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetLevel(v int64) *GetCategoriesResponseBodyCategory {
	s.Level = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetParentId(v int64) *GetCategoriesResponseBodyCategory {
	s.ParentId = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetType(v string) *GetCategoriesResponseBodyCategory {
	s.Type = &v
	return s
}

type GetCategoriesResponseBodySubCategories struct {
	Category []*GetCategoriesResponseBodySubCategoriesCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s GetCategoriesResponseBodySubCategories) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodySubCategories) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodySubCategories) SetCategory(v []*GetCategoriesResponseBodySubCategoriesCategory) *GetCategoriesResponseBodySubCategories {
	s.Category = v
	return s
}

type GetCategoriesResponseBodySubCategoriesCategory struct {
	// example:
	//
	// 129
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// example:
	//
	// 1
	Level *int64 `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 46
	ParentId *int64 `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	// example:
	//
	// 100
	SubTotal *int64 `json:"SubTotal,omitempty" xml:"SubTotal,omitempty"`
	// example:
	//
	// default
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesResponseBodySubCategoriesCategory) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodySubCategoriesCategory) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetCateId(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.CateId = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetCateName(v string) *GetCategoriesResponseBodySubCategoriesCategory {
	s.CateName = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetLevel(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.Level = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetParentId(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.ParentId = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetSubTotal(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.SubTotal = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetType(v string) *GetCategoriesResponseBodySubCategoriesCategory {
	s.Type = &v
	return s
}

type GetCategoriesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCategoriesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponse) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponse) SetHeaders(v map[string]*string) *GetCategoriesResponse {
	s.Headers = v
	return s
}

func (s *GetCategoriesResponse) SetStatusCode(v int32) *GetCategoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCategoriesResponse) SetBody(v *GetCategoriesResponseBody) *GetCategoriesResponse {
	s.Body = v
	return s
}

type GetContentAnalyzeConfigResponseBody struct {
	ContentAnalyzeConfig *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig `json:"ContentAnalyzeConfig,omitempty" xml:"ContentAnalyzeConfig,omitempty" type:"Struct"`
	// example:
	//
	// 31FEC819-2344-5771-9366-9172DB0D26C9
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetContentAnalyzeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetContentAnalyzeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetContentAnalyzeConfigResponseBody) SetContentAnalyzeConfig(v *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) *GetContentAnalyzeConfigResponseBody {
	s.ContentAnalyzeConfig = v
	return s
}

func (s *GetContentAnalyzeConfigResponseBody) SetRequestId(v string) *GetContentAnalyzeConfigResponseBody {
	s.RequestId = &v
	return s
}

type GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig struct {
	// example:
	//
	// true
	Auto *bool `json:"Auto,omitempty" xml:"Auto,omitempty"`
	// example:
	//
	// TEXT,FACE
	SaveType *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	// example:
	//
	// S00000101-100070
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) String() string {
	return tea.Prettify(s)
}

func (s GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) GoString() string {
	return s.String()
}

func (s *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) SetAuto(v bool) *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig {
	s.Auto = &v
	return s
}

func (s *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) SetSaveType(v string) *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig {
	s.SaveType = &v
	return s
}

func (s *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig) SetTemplateId(v string) *GetContentAnalyzeConfigResponseBodyContentAnalyzeConfig {
	s.TemplateId = &v
	return s
}

type GetContentAnalyzeConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetContentAnalyzeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetContentAnalyzeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetContentAnalyzeConfigResponse) GoString() string {
	return s.String()
}

func (s *GetContentAnalyzeConfigResponse) SetHeaders(v map[string]*string) *GetContentAnalyzeConfigResponse {
	s.Headers = v
	return s
}

func (s *GetContentAnalyzeConfigResponse) SetStatusCode(v int32) *GetContentAnalyzeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetContentAnalyzeConfigResponse) SetBody(v *GetContentAnalyzeConfigResponseBody) *GetContentAnalyzeConfigResponse {
	s.Body = v
	return s
}

type GetCustomTemplateRequest struct {
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateRequest) SetSubtype(v int32) *GetCustomTemplateRequest {
	s.Subtype = &v
	return s
}

func (s *GetCustomTemplateRequest) SetTemplateId(v string) *GetCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *GetCustomTemplateRequest) SetType(v int32) *GetCustomTemplateRequest {
	s.Type = &v
	return s
}

type GetCustomTemplateResponseBody struct {
	CustomTemplate *GetCustomTemplateResponseBodyCustomTemplate `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBody) SetCustomTemplate(v *GetCustomTemplateResponseBodyCustomTemplate) *GetCustomTemplateResponseBody {
	s.CustomTemplate = v
	return s
}

func (s *GetCustomTemplateResponseBody) SetRequestId(v string) *GetCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type GetCustomTemplateResponseBodyCustomTemplate struct {
	// example:
	//
	// 2022-01-01T10:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// example:
	//
	// 2022-01-01T11:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// Normal
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// example:
	//
	// {"Type":"Normal","FrameType":"normal","Time":0,"Count":10}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// 测试转码模板
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 2
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// SnapshotTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s GetCustomTemplateResponseBodyCustomTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBodyCustomTemplate) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetCreateTime(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.CreateTime = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetIsDefault(v bool) *GetCustomTemplateResponseBodyCustomTemplate {
	s.IsDefault = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetModifiedTime(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetStatus(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Status = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetSubtype(v int32) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Subtype = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetSubtypeName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.SubtypeName = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateConfig(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateId(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateName = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetType(v int32) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Type = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTypeName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TypeName = &v
	return s
}

type GetCustomTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponse) SetHeaders(v map[string]*string) *GetCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetCustomTemplateResponse) SetStatusCode(v int32) *GetCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomTemplateResponse) SetBody(v *GetCustomTemplateResponseBody) *GetCustomTemplateResponse {
	s.Body = v
	return s
}

type GetCustomizedVoiceRequest struct {
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s GetCustomizedVoiceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceRequest) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceRequest) SetVoiceId(v string) *GetCustomizedVoiceRequest {
	s.VoiceId = &v
	return s
}

type GetCustomizedVoiceResponseBody struct {
	Data *GetCustomizedVoiceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomizedVoiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponseBody) SetData(v *GetCustomizedVoiceResponseBodyData) *GetCustomizedVoiceResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomizedVoiceResponseBody) SetRequestId(v string) *GetCustomizedVoiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomizedVoiceResponseBody) SetSuccess(v bool) *GetCustomizedVoiceResponseBody {
	s.Success = &v
	return s
}

type GetCustomizedVoiceResponseBodyData struct {
	CustomizedVoice *GetCustomizedVoiceResponseBodyDataCustomizedVoice `json:"CustomizedVoice,omitempty" xml:"CustomizedVoice,omitempty" type:"Struct"`
}

func (s GetCustomizedVoiceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponseBodyData) SetCustomizedVoice(v *GetCustomizedVoiceResponseBodyDataCustomizedVoice) *GetCustomizedVoiceResponseBodyData {
	s.CustomizedVoice = v
	return s
}

type GetCustomizedVoiceResponseBodyDataCustomizedVoice struct {
	// example:
	//
	// ****42d3c312402982be65975f5b****
	DemoAudioMediaId *string `json:"DemoAudioMediaId,omitempty" xml:"DemoAudioMediaId,omitempty"`
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// example:
	//
	// interaction
	Scenario  *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// example:
	//
	// xiaozhuan
	VoiceId   *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s GetCustomizedVoiceResponseBodyDataCustomizedVoice) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponseBodyDataCustomizedVoice) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetDemoAudioMediaId(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.DemoAudioMediaId = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetGender(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.Gender = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetScenario(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.Scenario = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetVoiceDesc(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.VoiceDesc = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetVoiceId(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.VoiceId = &v
	return s
}

func (s *GetCustomizedVoiceResponseBodyDataCustomizedVoice) SetVoiceName(v string) *GetCustomizedVoiceResponseBodyDataCustomizedVoice {
	s.VoiceName = &v
	return s
}

type GetCustomizedVoiceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomizedVoiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomizedVoiceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceResponse) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceResponse) SetHeaders(v map[string]*string) *GetCustomizedVoiceResponse {
	s.Headers = v
	return s
}

func (s *GetCustomizedVoiceResponse) SetStatusCode(v int32) *GetCustomizedVoiceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomizedVoiceResponse) SetBody(v *GetCustomizedVoiceResponseBody) *GetCustomizedVoiceResponse {
	s.Body = v
	return s
}

type GetCustomizedVoiceJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobRequest) SetJobId(v string) *GetCustomizedVoiceJobRequest {
	s.JobId = &v
	return s
}

type GetCustomizedVoiceJobResponseBody struct {
	Data *GetCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponseBody) SetData(v *GetCustomizedVoiceJobResponseBodyData) *GetCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *GetCustomizedVoiceJobResponseBody) SetRequestId(v string) *GetCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBody) SetSuccess(v bool) *GetCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type GetCustomizedVoiceJobResponseBodyData struct {
	CustomizedVoiceJob *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob `json:"CustomizedVoiceJob,omitempty" xml:"CustomizedVoiceJob,omitempty" type:"Struct"`
}

func (s GetCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponseBodyData) SetCustomizedVoiceJob(v *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) *GetCustomizedVoiceJobResponseBodyData {
	s.CustomizedVoiceJob = v
	return s
}

type GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob struct {
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Gender     *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	JobId    *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Message  *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// example:
	//
	// Fail
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// example:
	//
	// xiaozhuan
	VoiceId   *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetCreateTime(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.CreateTime = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetGender(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Gender = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetJobId(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.JobId = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetMessage(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Message = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetScenario(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Scenario = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetStatus(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Status = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetType(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.Type = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetVoiceDesc(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.VoiceDesc = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetVoiceId(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.VoiceId = &v
	return s
}

func (s *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob) SetVoiceName(v string) *GetCustomizedVoiceJobResponseBodyDataCustomizedVoiceJob {
	s.VoiceName = &v
	return s
}

type GetCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *GetCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *GetCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *GetCustomizedVoiceJobResponse) SetStatusCode(v int32) *GetCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomizedVoiceJobResponse) SetBody(v *GetCustomizedVoiceJobResponseBody) *GetCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type GetDefaultStorageLocationResponseBody struct {
	// example:
	//
	// oss-test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// ice/dir
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// user_oss_bucket
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetDefaultStorageLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultStorageLocationResponseBody) GoString() string {
	return s.String()
}

func (s *GetDefaultStorageLocationResponseBody) SetBucket(v string) *GetDefaultStorageLocationResponseBody {
	s.Bucket = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetPath(v string) *GetDefaultStorageLocationResponseBody {
	s.Path = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetRequestId(v string) *GetDefaultStorageLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetStatus(v string) *GetDefaultStorageLocationResponseBody {
	s.Status = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetStorageType(v string) *GetDefaultStorageLocationResponseBody {
	s.StorageType = &v
	return s
}

type GetDefaultStorageLocationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDefaultStorageLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDefaultStorageLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultStorageLocationResponse) GoString() string {
	return s.String()
}

func (s *GetDefaultStorageLocationResponse) SetHeaders(v map[string]*string) *GetDefaultStorageLocationResponse {
	s.Headers = v
	return s
}

func (s *GetDefaultStorageLocationResponse) SetStatusCode(v int32) *GetDefaultStorageLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDefaultStorageLocationResponse) SetBody(v *GetDefaultStorageLocationResponseBody) *GetDefaultStorageLocationResponse {
	s.Body = v
	return s
}

type GetDemonstrationForCustomizedVoiceJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// story
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobRequest) SetScenario(v string) *GetDemonstrationForCustomizedVoiceJobRequest {
	s.Scenario = &v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponseBody struct {
	Data *GetDemonstrationForCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBody) SetData(v *GetDemonstrationForCustomizedVoiceJobResponseBodyData) *GetDemonstrationForCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBody) SetRequestId(v string) *GetDemonstrationForCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBody) SetSuccess(v bool) *GetDemonstrationForCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponseBodyData struct {
	DemonstrationList []*GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList `json:"DemonstrationList,omitempty" xml:"DemonstrationList,omitempty" type:"Repeated"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyData) SetDemonstrationList(v []*GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) *GetDemonstrationForCustomizedVoiceJobResponseBodyData {
	s.DemonstrationList = v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList struct {
	// example:
	//
	// 2
	AudioId *int32 `json:"AudioId,omitempty" xml:"AudioId,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/1.wav
	DemoAudio *string `json:"DemoAudio,omitempty" xml:"DemoAudio,omitempty"`
	Text      *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) SetAudioId(v int32) *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList {
	s.AudioId = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) SetDemoAudio(v string) *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList {
	s.DemoAudio = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList) SetText(v string) *GetDemonstrationForCustomizedVoiceJobResponseBodyDataDemonstrationList {
	s.Text = &v
	return s
}

type GetDemonstrationForCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDemonstrationForCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDemonstrationForCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDemonstrationForCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *GetDemonstrationForCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *GetDemonstrationForCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponse) SetStatusCode(v int32) *GetDemonstrationForCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDemonstrationForCustomizedVoiceJobResponse) SetBody(v *GetDemonstrationForCustomizedVoiceJobResponseBody) *GetDemonstrationForCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type GetDynamicImageJobRequest struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetDynamicImageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobRequest) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobRequest) SetJobId(v string) *GetDynamicImageJobRequest {
	s.JobId = &v
	return s
}

type GetDynamicImageJobResponseBody struct {
	DynamicImageJob *GetDynamicImageJobResponseBodyDynamicImageJob `json:"DynamicImageJob,omitempty" xml:"DynamicImageJob,omitempty" type:"Struct"`
	// example:
	//
	// ******36-3C1E-4417-BDB2-1E034F******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDynamicImageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBody) SetDynamicImageJob(v *GetDynamicImageJobResponseBodyDynamicImageJob) *GetDynamicImageJobResponseBody {
	s.DynamicImageJob = v
	return s
}

func (s *GetDynamicImageJobResponseBody) SetRequestId(v string) *GetDynamicImageJobResponseBody {
	s.RequestId = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJob struct {
	// example:
	//
	// ResourceNotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string                                             `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *GetDynamicImageJobResponseBodyDynamicImageJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// The specified resource for "CustomTemplate" could not be found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// SampleJob
	Name   *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Output *GetDynamicImageJobResponseBodyDynamicImageJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/output.gif
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// {"Format":"gif","Fps":5,"Height":1080,"Width":1920}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// {"sampleParam": "sampleValue"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJob) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJob) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetCode(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Code = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetCreateTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.CreateTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetFinishTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.FinishTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetInput(v *GetDynamicImageJobResponseBodyDynamicImageJobInput) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Input = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetJobId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.JobId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetMessage(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Message = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetModifiedTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetName(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Name = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetOutput(v *GetDynamicImageJobResponseBodyDynamicImageJobOutput) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Output = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetOutputUrl(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.OutputUrl = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetPipelineId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.PipelineId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetStatus(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Status = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetSubmitTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.SubmitTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTemplateConfig(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TemplateConfig = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTemplateId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TemplateId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTriggerSource(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TriggerSource = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetUserData(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.UserData = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobInput struct {
	// example:
	//
	// oss://test-bucket/sample-input.mp4
	Media   *string                                                    `json:"Media,omitempty" xml:"Media,omitempty"`
	OssFile *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInput) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetMedia(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.Media = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetOssFile(v *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.OssFile = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetType(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.Type = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile struct {
	// OSS Bucket
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Location
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// OSS Object
	//
	// example:
	//
	// sample-input.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetBucket(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetLocation(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Location = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetObject(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Object = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobOutput struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	Media   *string                                                     `json:"Media,omitempty" xml:"Media,omitempty"`
	OssFile *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutput) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetMedia(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.Media = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetOssFile(v *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.OssFile = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetType(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.Type = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile struct {
	// OSS Bucket
	//
	// example:
	//
	// sample-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Location
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// OSS Object
	//
	// example:
	//
	// path/to/object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetBucket(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetLocation(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Location = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetObject(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Object = &v
	return s
}

type GetDynamicImageJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetDynamicImageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetDynamicImageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponse) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponse) SetHeaders(v map[string]*string) *GetDynamicImageJobResponse {
	s.Headers = v
	return s
}

func (s *GetDynamicImageJobResponse) SetStatusCode(v int32) *GetDynamicImageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDynamicImageJobResponse) SetBody(v *GetDynamicImageJobResponseBody) *GetDynamicImageJobResponse {
	s.Body = v
	return s
}

type GetEditingProjectRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****fb2101bf24b2754cb318787dc****
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RequestSource *string `json:"RequestSource,omitempty" xml:"RequestSource,omitempty"`
}

func (s GetEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *GetEditingProjectRequest) SetProjectId(v string) *GetEditingProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectRequest) SetRequestSource(v string) *GetEditingProjectRequest {
	s.RequestSource = &v
	return s
}

type GetEditingProjectResponseBody struct {
	Project *GetEditingProjectResponseBodyProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Struct"`
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponseBody) SetProject(v *GetEditingProjectResponseBodyProject) *GetEditingProjectResponseBody {
	s.Project = v
	return s
}

func (s *GetEditingProjectResponseBody) SetRequestId(v string) *GetEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type GetEditingProjectResponseBodyProject struct {
	// example:
	//
	// { "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	ClipsParam     *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// oss://example-bucket/example.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// 2020-12-20T12:00:00Z
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 24.120000
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// example:
	//
	// 2020-12-20T13:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// ****fb2101bf24b2754cb318787dc****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// example:
	//
	// Editing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****9b4d7cf14dc7b83b0e801cbe****"},{"MediaId":"****1656bca4474999c961a6d2a2****"}]}]}
	Timeline                    *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	TimelineConvertErrorMessage *string `json:"TimelineConvertErrorMessage,omitempty" xml:"TimelineConvertErrorMessage,omitempty"`
	TimelineConvertStatus       *string `json:"TimelineConvertStatus,omitempty" xml:"TimelineConvertStatus,omitempty"`
	Title                       *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetEditingProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponseBodyProject) SetBusinessConfig(v string) *GetEditingProjectResponseBodyProject {
	s.BusinessConfig = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetBusinessStatus(v string) *GetEditingProjectResponseBodyProject {
	s.BusinessStatus = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetClipsParam(v string) *GetEditingProjectResponseBodyProject {
	s.ClipsParam = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCoverURL(v string) *GetEditingProjectResponseBodyProject {
	s.CoverURL = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCreateSource(v string) *GetEditingProjectResponseBodyProject {
	s.CreateSource = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCreateTime(v string) *GetEditingProjectResponseBodyProject {
	s.CreateTime = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetDescription(v string) *GetEditingProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetDuration(v int64) *GetEditingProjectResponseBodyProject {
	s.Duration = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetModifiedSource(v string) *GetEditingProjectResponseBodyProject {
	s.ModifiedSource = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetModifiedTime(v string) *GetEditingProjectResponseBodyProject {
	s.ModifiedTime = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetProjectId(v string) *GetEditingProjectResponseBodyProject {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetProjectType(v string) *GetEditingProjectResponseBodyProject {
	s.ProjectType = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetStatus(v string) *GetEditingProjectResponseBodyProject {
	s.Status = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTemplateId(v string) *GetEditingProjectResponseBodyProject {
	s.TemplateId = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTemplateType(v string) *GetEditingProjectResponseBodyProject {
	s.TemplateType = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTimeline(v string) *GetEditingProjectResponseBodyProject {
	s.Timeline = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTimelineConvertErrorMessage(v string) *GetEditingProjectResponseBodyProject {
	s.TimelineConvertErrorMessage = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTimelineConvertStatus(v string) *GetEditingProjectResponseBodyProject {
	s.TimelineConvertStatus = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTitle(v string) *GetEditingProjectResponseBodyProject {
	s.Title = &v
	return s
}

type GetEditingProjectResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponse) SetHeaders(v map[string]*string) *GetEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *GetEditingProjectResponse) SetStatusCode(v int32) *GetEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEditingProjectResponse) SetBody(v *GetEditingProjectResponseBody) *GetEditingProjectResponse {
	s.Body = v
	return s
}

type GetEditingProjectMaterialsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// *****fb2101cb318*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsRequest) SetProjectId(v string) *GetEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type GetEditingProjectMaterialsResponseBody struct {
	LiveMaterials []*GetEditingProjectMaterialsResponseBodyLiveMaterials `json:"LiveMaterials,omitempty" xml:"LiveMaterials,omitempty" type:"Repeated"`
	MediaInfos    []*GetEditingProjectMaterialsResponseBodyMediaInfos    `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// example:
	//
	// *****67ae06542b9b93e0d1c387*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// *****9b145c5cafc2e057304fcd*****
	ProjectMaterials []*string `json:"ProjectMaterials,omitempty" xml:"ProjectMaterials,omitempty" type:"Repeated"`
	// example:
	//
	// ******89-C21D-4B78-AE24-3788B8******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBody) SetLiveMaterials(v []*GetEditingProjectMaterialsResponseBodyLiveMaterials) *GetEditingProjectMaterialsResponseBody {
	s.LiveMaterials = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetMediaInfos(v []*GetEditingProjectMaterialsResponseBodyMediaInfos) *GetEditingProjectMaterialsResponseBody {
	s.MediaInfos = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetProjectId(v string) *GetEditingProjectMaterialsResponseBody {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetProjectMaterials(v []*string) *GetEditingProjectMaterialsResponseBody {
	s.ProjectMaterials = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetRequestId(v string) *GetEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyLiveMaterials struct {
	// example:
	//
	// testrecord
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// test.alivecdn.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// rtmp://test.alivecdn.com/testrecord/teststream
	LiveUrl *string `json:"LiveUrl,omitempty" xml:"LiveUrl,omitempty"`
	// example:
	//
	// testrecord
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyLiveMaterials) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyLiveMaterials) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetAppName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.AppName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetDomainName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.DomainName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetLiveUrl(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.LiveUrl = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetStreamName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.StreamName = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// *****64623a94eca8516569c8fe*****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetFileInfoList(v []*GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetMediaBasicInfo(v *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetMediaId(v string) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList struct {
	FileBasicInfo *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 216.206667
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// video
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://sample-bucket.oss-cn-shanghai.aliyuncs.com/sample-corver.jpg?Expires=1628670610&OSSAccessKeyId=AK&Signature=signature
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:08Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// example:
	//
	// sample_description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/file.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	//
	// example:
	//
	// *****64623a94eca8516569c8f*****
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:08Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// null
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// null
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// file.mp4
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *GetEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *GetEditingProjectMaterialsResponse) SetStatusCode(v int32) *GetEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEditingProjectMaterialsResponse) SetBody(v *GetEditingProjectMaterialsResponseBody) *GetEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type GetEventCallbackResponseBody struct {
	// example:
	//
	// TestKey001
	AuthKey *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	// example:
	//
	// on
	AuthSwitch *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	// example:
	//
	// ice-callback-queue
	CallbackQueueName *string `json:"CallbackQueueName,omitempty" xml:"CallbackQueueName,omitempty"`
	// example:
	//
	// HTTP
	CallbackType *string `json:"CallbackType,omitempty" xml:"CallbackType,omitempty"`
	// example:
	//
	// http://xxx.yyy/callback
	CallbackURL *string `json:"CallbackURL,omitempty" xml:"CallbackURL,omitempty"`
	// example:
	//
	// ProduceMediaComplete,TranscodeComplete
	EventTypeList *string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEventCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventCallbackResponseBody) SetAuthKey(v string) *GetEventCallbackResponseBody {
	s.AuthKey = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetAuthSwitch(v string) *GetEventCallbackResponseBody {
	s.AuthSwitch = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackQueueName(v string) *GetEventCallbackResponseBody {
	s.CallbackQueueName = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackType(v string) *GetEventCallbackResponseBody {
	s.CallbackType = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackURL(v string) *GetEventCallbackResponseBody {
	s.CallbackURL = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetEventTypeList(v string) *GetEventCallbackResponseBody {
	s.EventTypeList = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetRequestId(v string) *GetEventCallbackResponseBody {
	s.RequestId = &v
	return s
}

type GetEventCallbackResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetEventCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetEventCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventCallbackResponse) GoString() string {
	return s.String()
}

func (s *GetEventCallbackResponse) SetHeaders(v map[string]*string) *GetEventCallbackResponse {
	s.Headers = v
	return s
}

func (s *GetEventCallbackResponse) SetStatusCode(v int32) *GetEventCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventCallbackResponse) SetBody(v *GetEventCallbackResponseBody) *GetEventCallbackResponse {
	s.Body = v
	return s
}

type GetLiveEditingIndexFileRequest struct {
	// example:
	//
	// testrecord
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// test.alivecdn.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// *****cb6307a4edea614d8b3f3c*****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// teststream
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetLiveEditingIndexFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileRequest) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileRequest) SetAppName(v string) *GetLiveEditingIndexFileRequest {
	s.AppName = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetDomainName(v string) *GetLiveEditingIndexFileRequest {
	s.DomainName = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetProjectId(v string) *GetLiveEditingIndexFileRequest {
	s.ProjectId = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetStreamName(v string) *GetLiveEditingIndexFileRequest {
	s.StreamName = &v
	return s
}

type GetLiveEditingIndexFileResponseBody struct {
	IndexFile *string `json:"IndexFile,omitempty" xml:"IndexFile,omitempty"`
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveEditingIndexFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileResponseBody) SetIndexFile(v string) *GetLiveEditingIndexFileResponseBody {
	s.IndexFile = &v
	return s
}

func (s *GetLiveEditingIndexFileResponseBody) SetRequestId(v string) *GetLiveEditingIndexFileResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveEditingIndexFileResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveEditingIndexFileResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveEditingIndexFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileResponse) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileResponse) SetHeaders(v map[string]*string) *GetLiveEditingIndexFileResponse {
	s.Headers = v
	return s
}

func (s *GetLiveEditingIndexFileResponse) SetStatusCode(v int32) *GetLiveEditingIndexFileResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveEditingIndexFileResponse) SetBody(v *GetLiveEditingIndexFileResponseBody) *GetLiveEditingIndexFileResponse {
	s.Body = v
	return s
}

type GetLiveEditingJobRequest struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveEditingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobRequest) SetJobId(v string) *GetLiveEditingJobRequest {
	s.JobId = &v
	return s
}

type GetLiveEditingJobResponseBody struct {
	LiveEditingJob *GetLiveEditingJobResponseBodyLiveEditingJob `json:"LiveEditingJob,omitempty" xml:"LiveEditingJob,omitempty" type:"Struct"`
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveEditingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBody) SetLiveEditingJob(v *GetLiveEditingJobResponseBodyLiveEditingJob) *GetLiveEditingJobResponseBody {
	s.LiveEditingJob = v
	return s
}

func (s *GetLiveEditingJobResponseBody) SetRequestId(v string) *GetLiveEditingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJob struct {
	// example:
	//
	// [{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" }]
	Clips *string `json:"Clips,omitempty" xml:"Clips,omitempty"`
	// example:
	//
	// InvalidParameter
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:52Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:40Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId            *string                                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	LiveStreamConfig *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig `json:"LiveStreamConfig,omitempty" xml:"LiveStreamConfig,omitempty" type:"Struct"`
	// example:
	//
	// ****0cc6ba49eab379332c5b****
	MediaId            *string                                                        `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaProduceConfig *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig `json:"MediaProduceConfig,omitempty" xml:"MediaProduceConfig,omitempty" type:"Struct"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// example:
	//
	// The specific parameter LiveStreamConfig is not valid.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:49Z
	ModifiedTime      *string                                                       `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	OutputMediaConfig *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty" type:"Struct"`
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// {"key": "value\\"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJob) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetClips(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Clips = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCode(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Code = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCompleteTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.CompleteTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCreationTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.CreationTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetJobId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.JobId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetLiveStreamConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.LiveStreamConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaProduceConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaProduceConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaURL(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaURL = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMessage(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Message = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetModifiedTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetOutputMediaConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.OutputMediaConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetProjectId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.ProjectId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetStatus(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Status = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetUserData(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.UserData = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig struct {
	// example:
	//
	// app
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// example:
	//
	// domain.com
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// streamName
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetAppName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.AppName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetDomainName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.DomainName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetStreamName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.StreamName = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig struct {
	// example:
	//
	// Accurate
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) SetMode(v string) *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig {
	s.Mode = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig struct {
	// example:
	//
	// 1000
	Bitrate *int64 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// test.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 480
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// https://testice-testbucket.oss-cn-shanghai.aliyuncs.com/test.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// example:
	//
	// outin-xxxxxx.oss-cn-shanghai.aliyuncs.com
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	// example:
	//
	// VOD_NO_TRANSCODE
	VodTemplateGroupId *string `json:"VodTemplateGroupId,omitempty" xml:"VodTemplateGroupId,omitempty"`
	// example:
	//
	// 640
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetBitrate(v int64) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Bitrate = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetFileName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.FileName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetHeight(v int32) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Height = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetMediaURL(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.MediaURL = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetStorageLocation(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.StorageLocation = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetVodTemplateGroupId(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.VodTemplateGroupId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetWidth(v int32) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Width = &v
	return s
}

type GetLiveEditingJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveEditingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveEditingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponse) SetHeaders(v map[string]*string) *GetLiveEditingJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveEditingJobResponse) SetStatusCode(v int32) *GetLiveEditingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveEditingJobResponse) SetBody(v *GetLiveEditingJobResponseBody) *GetLiveEditingJobResponse {
	s.Body = v
	return s
}

type GetLiveRecordJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveRecordJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobRequest) SetJobId(v string) *GetLiveRecordJobRequest {
	s.JobId = &v
	return s
}

type GetLiveRecordJobResponseBody struct {
	// 录制任务
	RecordJob *GetLiveRecordJobResponseBodyRecordJob `json:"RecordJob,omitempty" xml:"RecordJob,omitempty" type:"Struct"`
	// example:
	//
	// B57A046C-CE33-5FBB-B57A-D2B89ACF6907
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveRecordJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBody) SetRecordJob(v *GetLiveRecordJobResponseBodyRecordJob) *GetLiveRecordJobResponseBody {
	s.RecordJob = v
	return s
}

func (s *GetLiveRecordJobResponseBody) SetRequestId(v string) *GetLiveRecordJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveRecordJobResponseBodyRecordJob struct {
	// 代表创建时间的资源属性字段
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 代表资源名称的资源属性字段
	//
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 代表资源名称的资源属性字段
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 回调地址
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl    *string                                            `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	RecordOutput *GetLiveRecordJobResponseBodyRecordJobRecordOutput `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty" type:"Struct"`
	// 代表资源名称的资源属性字段
	//
	// example:
	//
	// paused
	Status      *string                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInput *GetLiveRecordJobResponseBodyRecordJobStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// 录制模板ID
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 录制模板ID
	//
	// example:
	//
	// test template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s GetLiveRecordJobResponseBodyRecordJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBodyRecordJob) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetCreateTime(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.CreateTime = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetJobId(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.JobId = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetName(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.Name = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetNotifyUrl(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.NotifyUrl = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetRecordOutput(v *GetLiveRecordJobResponseBodyRecordJobRecordOutput) *GetLiveRecordJobResponseBodyRecordJob {
	s.RecordOutput = v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetStatus(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.Status = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetStreamInput(v *GetLiveRecordJobResponseBodyRecordJobStreamInput) *GetLiveRecordJobResponseBodyRecordJob {
	s.StreamInput = v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetTemplateId(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.TemplateId = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJob) SetTemplateName(v string) *GetLiveRecordJobResponseBodyRecordJob {
	s.TemplateName = &v
	return s
}

type GetLiveRecordJobResponseBodyRecordJobRecordOutput struct {
	// example:
	//
	// imsbucket1
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// example:
	//
	// oss
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveRecordJobResponseBodyRecordJobRecordOutput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBodyRecordJobRecordOutput) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBodyRecordJobRecordOutput) SetBucket(v string) *GetLiveRecordJobResponseBodyRecordJobRecordOutput {
	s.Bucket = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJobRecordOutput) SetEndpoint(v string) *GetLiveRecordJobResponseBodyRecordJobRecordOutput {
	s.Endpoint = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJobRecordOutput) SetType(v string) *GetLiveRecordJobResponseBodyRecordJobRecordOutput {
	s.Type = &v
	return s
}

type GetLiveRecordJobResponseBodyRecordJobStreamInput struct {
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://example.com/app/stream
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetLiveRecordJobResponseBodyRecordJobStreamInput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponseBodyRecordJobStreamInput) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponseBodyRecordJobStreamInput) SetType(v string) *GetLiveRecordJobResponseBodyRecordJobStreamInput {
	s.Type = &v
	return s
}

func (s *GetLiveRecordJobResponseBodyRecordJobStreamInput) SetUrl(v string) *GetLiveRecordJobResponseBodyRecordJobStreamInput {
	s.Url = &v
	return s
}

type GetLiveRecordJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveRecordJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveRecordJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveRecordJobResponse) SetHeaders(v map[string]*string) *GetLiveRecordJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveRecordJobResponse) SetStatusCode(v int32) *GetLiveRecordJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveRecordJobResponse) SetBody(v *GetLiveRecordJobResponseBody) *GetLiveRecordJobResponse {
	s.Body = v
	return s
}

type GetLiveRecordTemplateRequest struct {
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateRequest) SetJobId(v string) *GetLiveRecordTemplateRequest {
	s.JobId = &v
	return s
}

func (s *GetLiveRecordTemplateRequest) SetTemplateId(v string) *GetLiveRecordTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetLiveRecordTemplateResponseBody struct {
	// 录制模板
	RecordTemplate *GetLiveRecordTemplateResponseBodyRecordTemplate `json:"RecordTemplate,omitempty" xml:"RecordTemplate,omitempty" type:"Struct"`
	// example:
	//
	// C892855F-95DF-50D6-A28C-279ABDB76810
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponseBody) SetRecordTemplate(v *GetLiveRecordTemplateResponseBodyRecordTemplate) *GetLiveRecordTemplateResponseBody {
	s.RecordTemplate = v
	return s
}

func (s *GetLiveRecordTemplateResponseBody) SetRequestId(v string) *GetLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveRecordTemplateResponseBodyRecordTemplate struct {
	// 代表创建时间的资源属性字段
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 代表创建时间的资源属性字段
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// 代表资源名称的资源属性字段
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	RecordFormatList []*GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList `json:"RecordFormatList,omitempty" xml:"RecordFormatList,omitempty" type:"Repeated"`
	// 代表资源一级ID的资源属性字段
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 代表资源名称的资源属性字段
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplate) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetCreateTime(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.CreateTime = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetLastModified(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.LastModified = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetName(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.Name = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetRecordFormatList(v []*GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.RecordFormatList = v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetTemplateId(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplate) SetType(v string) *GetLiveRecordTemplateResponseBodyRecordTemplate {
	s.Type = &v
	return s
}

type GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList struct {
	// example:
	//
	// 7200
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// 格式
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{Sequence}{EscapedStartTime}{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// 切片Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetCycleDuration(v int32) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.CycleDuration = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetFormat(v string) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.Format = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetOssObjectPrefix(v string) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.OssObjectPrefix = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetSliceDuration(v int32) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.SliceDuration = &v
	return s
}

func (s *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList) SetSliceOssObjectPrefix(v string) *GetLiveRecordTemplateResponseBodyRecordTemplateRecordFormatList {
	s.SliceOssObjectPrefix = &v
	return s
}

type GetLiveRecordTemplateResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *GetLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetLiveRecordTemplateResponse) SetStatusCode(v int32) *GetLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveRecordTemplateResponse) SetBody(v *GetLiveRecordTemplateResponseBody) *GetLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type GetLiveSnapshotJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobRequest) SetJobId(v string) *GetLiveSnapshotJobRequest {
	s.JobId = &v
	return s
}

type GetLiveSnapshotJobResponseBody struct {
	// example:
	//
	// http://www.aliyun.com/snapshot/callback
	CallbackUrl *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	// example:
	//
	// 2022-02-02T22:22:22Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId   *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// example:
	//
	// 2022-02-02T22:22:22Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string                                       `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	SnapshotOutput *GetLiveSnapshotJobResponseBodySnapshotOutput `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty" type:"Struct"`
	// example:
	//
	// started
	Status      *string                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInput *GetLiveSnapshotJobResponseBodyStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s GetLiveSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponseBody) SetCallbackUrl(v string) *GetLiveSnapshotJobResponseBody {
	s.CallbackUrl = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetCreateTime(v string) *GetLiveSnapshotJobResponseBody {
	s.CreateTime = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetJobId(v string) *GetLiveSnapshotJobResponseBody {
	s.JobId = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetJobName(v string) *GetLiveSnapshotJobResponseBody {
	s.JobName = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetLastModified(v string) *GetLiveSnapshotJobResponseBody {
	s.LastModified = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetOverwriteFormat(v string) *GetLiveSnapshotJobResponseBody {
	s.OverwriteFormat = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetRequestId(v string) *GetLiveSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetSequenceFormat(v string) *GetLiveSnapshotJobResponseBody {
	s.SequenceFormat = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetSnapshotOutput(v *GetLiveSnapshotJobResponseBodySnapshotOutput) *GetLiveSnapshotJobResponseBody {
	s.SnapshotOutput = v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetStatus(v string) *GetLiveSnapshotJobResponseBody {
	s.Status = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetStreamInput(v *GetLiveSnapshotJobResponseBodyStreamInput) *GetLiveSnapshotJobResponseBody {
	s.StreamInput = v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetTemplateId(v string) *GetLiveSnapshotJobResponseBody {
	s.TemplateId = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetTemplateName(v string) *GetLiveSnapshotJobResponseBody {
	s.TemplateName = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBody) SetTimeInterval(v int32) *GetLiveSnapshotJobResponseBody {
	s.TimeInterval = &v
	return s
}

type GetLiveSnapshotJobResponseBodySnapshotOutput struct {
	// example:
	//
	// testbucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// example:
	//
	// oss
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetLiveSnapshotJobResponseBodySnapshotOutput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponseBodySnapshotOutput) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponseBodySnapshotOutput) SetBucket(v string) *GetLiveSnapshotJobResponseBodySnapshotOutput {
	s.Bucket = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBodySnapshotOutput) SetEndpoint(v string) *GetLiveSnapshotJobResponseBodySnapshotOutput {
	s.Endpoint = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBodySnapshotOutput) SetStorageType(v string) *GetLiveSnapshotJobResponseBodySnapshotOutput {
	s.StorageType = &v
	return s
}

type GetLiveSnapshotJobResponseBodyStreamInput struct {
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://www.aliyun.com/stream
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetLiveSnapshotJobResponseBodyStreamInput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponseBodyStreamInput) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponseBodyStreamInput) SetType(v string) *GetLiveSnapshotJobResponseBodyStreamInput {
	s.Type = &v
	return s
}

func (s *GetLiveSnapshotJobResponseBodyStreamInput) SetUrl(v string) *GetLiveSnapshotJobResponseBodyStreamInput {
	s.Url = &v
	return s
}

type GetLiveSnapshotJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotJobResponse) SetHeaders(v map[string]*string) *GetLiveSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveSnapshotJobResponse) SetStatusCode(v int32) *GetLiveSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveSnapshotJobResponse) SetBody(v *GetLiveSnapshotJobResponseBody) *GetLiveSnapshotJobResponse {
	s.Body = v
	return s
}

type GetLiveSnapshotTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotTemplateRequest) SetTemplateId(v string) *GetLiveSnapshotTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetLiveSnapshotTemplateResponseBody struct {
	// example:
	//
	// 2022-02-02T22:22:22Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-02-02T22:22:22Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotTemplateResponseBody) SetCreateTime(v string) *GetLiveSnapshotTemplateResponseBody {
	s.CreateTime = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetLastModified(v string) *GetLiveSnapshotTemplateResponseBody {
	s.LastModified = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetOverwriteFormat(v string) *GetLiveSnapshotTemplateResponseBody {
	s.OverwriteFormat = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetRequestId(v string) *GetLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetSequenceFormat(v string) *GetLiveSnapshotTemplateResponseBody {
	s.SequenceFormat = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetTemplateId(v string) *GetLiveSnapshotTemplateResponseBody {
	s.TemplateId = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetTemplateName(v string) *GetLiveSnapshotTemplateResponseBody {
	s.TemplateName = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetTimeInterval(v int32) *GetLiveSnapshotTemplateResponseBody {
	s.TimeInterval = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponseBody) SetType(v string) *GetLiveSnapshotTemplateResponseBody {
	s.Type = &v
	return s
}

type GetLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *GetLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetLiveSnapshotTemplateResponse) SetStatusCode(v int32) *GetLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveSnapshotTemplateResponse) SetBody(v *GetLiveSnapshotTemplateResponseBody) *GetLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type GetLiveTranscodeJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobRequest) SetJobId(v string) *GetLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

type GetLiveTranscodeJobResponseBody struct {
	Job *GetLiveTranscodeJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBody) SetJob(v *GetLiveTranscodeJobResponseBodyJob) *GetLiveTranscodeJobResponseBody {
	s.Job = v
	return s
}

func (s *GetLiveTranscodeJobResponseBody) SetRequestId(v string) *GetLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJob struct {
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// task1
	Name         *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputStream *GetLiveTranscodeJobResponseBodyJobOutputStream `json:"OutputStream,omitempty" xml:"OutputStream,omitempty" type:"Struct"`
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// example:
	//
	// 1
	Status      *int32                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInput *GetLiveTranscodeJobResponseBodyJobStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// example:
	//
	// b6491d5b3e514b7d895d14b5453ea119
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// basic
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// normal
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetCreateTime(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetJobId(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetName(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.Name = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetOutputStream(v *GetLiveTranscodeJobResponseBodyJobOutputStream) *GetLiveTranscodeJobResponseBodyJob {
	s.OutputStream = v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStartMode(v int32) *GetLiveTranscodeJobResponseBodyJob {
	s.StartMode = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStatus(v int32) *GetLiveTranscodeJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStreamInput(v *GetLiveTranscodeJobResponseBodyJobStreamInput) *GetLiveTranscodeJobResponseBodyJob {
	s.StreamInput = v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateId(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateId = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateName(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateName = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateType(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateType = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJobOutputStream struct {
	StreamInfos []*GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStream) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStream) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStream) SetStreamInfos(v []*GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) *GetLiveTranscodeJobResponseBodyJobOutputStream {
	s.StreamInfos = v
	return s
}

type GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos struct {
	// example:
	//
	// rtmp://mydomain/app/mytranscode1
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) SetOutputUrl(v string) *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos {
	s.OutputUrl = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) SetType(v string) *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos {
	s.Type = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJobStreamInput struct {
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJobStreamInput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobStreamInput) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobStreamInput) SetInputUrl(v string) *GetLiveTranscodeJobResponseBodyJobStreamInput {
	s.InputUrl = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJobStreamInput) SetType(v string) *GetLiveTranscodeJobResponseBodyJobStreamInput {
	s.Type = &v
	return s
}

type GetLiveTranscodeJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *GetLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveTranscodeJobResponse) SetStatusCode(v int32) *GetLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveTranscodeJobResponse) SetBody(v *GetLiveTranscodeJobResponseBody) *GetLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type GetLiveTranscodeTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateRequest) SetTemplateId(v string) *GetLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetLiveTranscodeTemplateResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId       *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateContent *GetLiveTranscodeTemplateResponseBodyTemplateContent `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty" type:"Struct"`
}

func (s GetLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBody) SetRequestId(v string) *GetLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBody) SetTemplateContent(v *GetLiveTranscodeTemplateResponseBodyTemplateContent) *GetLiveTranscodeTemplateResponseBody {
	s.TemplateContent = v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContent struct {
	// example:
	//
	// customized
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 2022-07-25T06:15:14Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// my-template
	Name           *string                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfig *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// example:
	//
	// bcfa57950bc649b2abfb476ecd36ea4f
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContent) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContent) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetCategory(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Category = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetCreateTime(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.CreateTime = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetName(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Name = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetTemplateConfig(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.TemplateConfig = v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetTemplateId(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.TemplateId = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetType(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Type = &v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig struct {
	AudioParams *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	VideoParams *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) SetAudioParams(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) SetVideoParams(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig {
	s.VideoParams = v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams struct {
	// example:
	//
	// 1000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 1
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetBitrate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetChannels(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetCodec(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetProfile(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetSamplerate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams struct {
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 30
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetBitrate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetCodec(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetFps(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetGop(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetHeight(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetProfile(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetWidth(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type GetLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *GetLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetLiveTranscodeTemplateResponse) SetStatusCode(v int32) *GetLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponse) SetBody(v *GetLiveTranscodeTemplateResponseBody) *GetLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type GetMediaInfoRequest struct {
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cdn
	OutputType         *string `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
	ReturnDetailedInfo *string `json:"ReturnDetailedInfo,omitempty" xml:"ReturnDetailedInfo,omitempty"`
}

func (s GetMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMediaInfoRequest) SetInputURL(v string) *GetMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *GetMediaInfoRequest) SetMediaId(v string) *GetMediaInfoRequest {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoRequest) SetOutputType(v string) *GetMediaInfoRequest {
	s.OutputType = &v
	return s
}

func (s *GetMediaInfoRequest) SetReturnDetailedInfo(v string) *GetMediaInfoRequest {
	s.ReturnDetailedInfo = &v
	return s
}

type GetMediaInfoResponseBody struct {
	MediaInfo *GetMediaInfoResponseBodyMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// example:
	//
	// 2FDE2411-DB8D-4A9A-875B-275798F14A5E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBody) SetMediaInfo(v *GetMediaInfoResponseBodyMediaInfo) *GetMediaInfoResponseBody {
	s.MediaInfo = v
	return s
}

func (s *GetMediaInfoResponseBody) SetRequestId(v string) *GetMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfo struct {
	AiRoughData  *GetMediaInfoResponseBodyMediaInfoAiRoughData    `json:"AiRoughData,omitempty" xml:"AiRoughData,omitempty" type:"Struct"`
	FileInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetAiRoughData(v *GetMediaInfoResponseBodyMediaInfoAiRoughData) *GetMediaInfoResponseBodyMediaInfo {
	s.AiRoughData = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetFileInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoList) *GetMediaInfoResponseBodyMediaInfo {
	s.FileInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetMediaBasicInfo(v *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) *GetMediaInfoResponseBodyMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetMediaId(v string) *GetMediaInfoResponseBodyMediaInfo {
	s.MediaId = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoAiRoughData struct {
	AiCategory *string `json:"AiCategory,omitempty" xml:"AiCategory,omitempty"`
	// example:
	//
	// ****483915d4f2cd8ac20b48fb04****
	AiJobId *string `json:"AiJobId,omitempty" xml:"AiJobId,omitempty"`
	// example:
	//
	// https://sample-bucket.cn-shanghai.aliyuncs.com/result.json
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// TEXT
	SaveType            *string                                                          `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	StandardSmartTagJob *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob `json:"StandardSmartTagJob,omitempty" xml:"StandardSmartTagJob,omitempty" type:"Struct"`
	// example:
	//
	// Analyzing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughData) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughData) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetAiCategory(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.AiCategory = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetAiJobId(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.AiJobId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetResult(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.Result = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetSaveType(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.SaveType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetStandardSmartTagJob(v *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.StandardSmartTagJob = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughData) SetStatus(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughData {
	s.Status = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob struct {
	AiJobId   *string                                                                   `json:"AiJobId,omitempty" xml:"AiJobId,omitempty"`
	ResultUrl *string                                                                   `json:"ResultUrl,omitempty" xml:"ResultUrl,omitempty"`
	Results   []*GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Repeated"`
	Status    *string                                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetAiJobId(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.AiJobId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetResultUrl(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.ResultUrl = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetResults(v []*GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.Results = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob) SetStatus(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJob {
	s.Status = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults struct {
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) SetData(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults {
	s.Data = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults) SetType(v string) *GetMediaInfoResponseBodyMediaInfoAiRoughDataStandardSmartTagJobResults {
	s.Type = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoList struct {
	AudioStreamInfoList    []*GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList    `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo          *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo            `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	SubtitleStreamInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList `json:"SubtitleStreamInfoList,omitempty" xml:"SubtitleStreamInfoList,omitempty" type:"Repeated"`
	VideoStreamInfoList    []*GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList    `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetAudioStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetFileBasicInfo(v *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.FileBasicInfo = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetSubtitleStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.SubtitleStreamInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetVideoStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.VideoStreamInfoList = v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList struct {
	// example:
	//
	// 127.794
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x6134706d
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// mp4a
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/24000
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 16.200998
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 8
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 10
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 0.000000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/44100
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannelLayout(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannels(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetFps(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetNumFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetProfile(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleFmt(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleRate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo struct {
	// example:
	//
	// 1132.68
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 216.206667
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 30611502
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetCreateTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileSize(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileStatus(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileType(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileUrl(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFormatName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetHeight(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetModifiedTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetRegion(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetWidth(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList struct {
	// example:
	//
	// SubRip Text
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// srt
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// unicode
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// unicode
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 29.97
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 0
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 30
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList struct {
	// example:
	//
	// 24.0
	AvgFPS *string `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	// example:
	//
	// 1001.594
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x0000
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [0][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/48
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 0:1
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 216.206706
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 24.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 30
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 5184
	NbFrames *string `json:"Nb_frames,omitempty" xml:"Nb_frames,omitempty"`
	// example:
	//
	// 5184
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 0:1
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 0.081706
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/12288
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetAvgFPS(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.AvgFPS = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDar(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetFps(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHasBFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHeight(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLevel(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNbFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NbFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNumFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetPixFmt(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetProfile(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetRotate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetSar(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Timebase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetWidth(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoMediaBasicInfo struct {
	// example:
	//
	// ICE
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// 3048
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// example:
	//
	// cateName
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:15Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 123-1234
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	Snapshots   *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// general
	UploadSource *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// example:
	//
	// userDataTest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBiz(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBusinessType(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCateId(v int64) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCateName(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CateName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCategory(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCoverURL(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCreateTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDeletedTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDescription(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetInputURL(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaId(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaTags(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaType(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetModifiedTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetReferenceId(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ReferenceId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSnapshots(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSource(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSpriteImages(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetStatus(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetTitle(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUploadSource(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUserData(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetMediaInfoResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponse) SetHeaders(v map[string]*string) *GetMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMediaInfoResponse) SetStatusCode(v int32) *GetMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaInfoResponse) SetBody(v *GetMediaInfoResponseBody) *GetMediaInfoResponse {
	s.Body = v
	return s
}

type GetMediaInfoJobRequest struct {
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobRequest) SetJobId(v string) *GetMediaInfoJobRequest {
	s.JobId = &v
	return s
}

type GetMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *GetMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBody) SetMediaInfoJob(v *GetMediaInfoJobResponseBodyMediaInfoJob) *GetMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *GetMediaInfoJobResponseBody) SetRequestId(v string) *GetMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJob struct {
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                       `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *GetMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId             *string                                                   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaInfoProperty *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId      *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Init
	Status           *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *GetMediaInfoJobResponseBodyMediaInfoJobInput) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *GetMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *GetMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	AudioStreamInfoList []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo       *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo         `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	VideoStreamInfoList []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// us
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// e520090207114cc7a392d44f0b211574
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type GetMediaInfoJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponse) SetHeaders(v map[string]*string) *GetMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *GetMediaInfoJobResponse) SetStatusCode(v int32) *GetMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaInfoJobResponse) SetBody(v *GetMediaInfoJobResponseBody) *GetMediaInfoJobResponse {
	s.Body = v
	return s
}

type GetMediaMarksRequest struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
}

func (s GetMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *GetMediaMarksRequest) SetMediaId(v string) *GetMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *GetMediaMarksRequest) SetMediaMarkIds(v string) *GetMediaMarksRequest {
	s.MediaMarkIds = &v
	return s
}

type GetMediaMarksResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId    *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaMarksResponseBody) SetMediaId(v string) *GetMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *GetMediaMarksResponseBody) SetMediaMarks(v string) *GetMediaMarksResponseBody {
	s.MediaMarks = &v
	return s
}

func (s *GetMediaMarksResponseBody) SetRequestId(v string) *GetMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaMarksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *GetMediaMarksResponse) SetHeaders(v map[string]*string) *GetMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *GetMediaMarksResponse) SetStatusCode(v int32) *GetMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaMarksResponse) SetBody(v *GetMediaMarksResponseBody) *GetMediaMarksResponse {
	s.Body = v
	return s
}

type GetMediaProducingJobRequest struct {
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobRequest) SetJobId(v string) *GetMediaProducingJobRequest {
	s.JobId = &v
	return s
}

type GetMediaProducingJobResponseBody struct {
	MediaProducingJob *GetMediaProducingJobResponseBodyMediaProducingJob `json:"MediaProducingJob,omitempty" xml:"MediaProducingJob,omitempty" type:"Struct"`
	// example:
	//
	// ****83B7-7F87-4792-BFE9-63CD2137****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponseBody) SetMediaProducingJob(v *GetMediaProducingJobResponseBodyMediaProducingJob) *GetMediaProducingJobResponseBody {
	s.MediaProducingJob = v
	return s
}

func (s *GetMediaProducingJobResponseBody) SetRequestId(v string) *GetMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaProducingJobResponseBodyMediaProducingJob struct {
	// example:
	//
	// {"VideoArray":["****05512043f49f697f7425****","****05512043f49f697f7425****","****05512043f49f697f7425****"]}
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// ExceededMaximumValue
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:52Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:40Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 30.500000
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****0cc6ba49eab379332c5b****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// example:
	//
	// The specified "Width_Height" has exceeded maximum value.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:49Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// Failed
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SubJobMaterials *string `json:"SubJobMaterials,omitempty" xml:"SubJobMaterials,omitempty"`
	// example:
	//
	// ****6e76134d739cc3e85d3e****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// ****332c5b0cc6ba49eab379****
	VodMediaId *string `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s GetMediaProducingJobResponseBodyMediaProducingJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponseBodyMediaProducingJob) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetClipsParam(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ClipsParam = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCode(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Code = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCompleteTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.CompleteTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCreateTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.CreateTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetDuration(v float32) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Duration = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetJobId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.JobId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMediaId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.MediaId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMediaURL(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.MediaURL = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMessage(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Message = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetModifiedTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetProjectId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ProjectId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetStatus(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Status = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetSubJobMaterials(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.SubJobMaterials = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetTemplateId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.TemplateId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetTimeline(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Timeline = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetUserData(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.UserData = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetVodMediaId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.VodMediaId = &v
	return s
}

type GetMediaProducingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponse) SetHeaders(v map[string]*string) *GetMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *GetMediaProducingJobResponse) SetStatusCode(v int32) *GetMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaProducingJobResponse) SetBody(v *GetMediaProducingJobResponseBody) *GetMediaProducingJobResponse {
	s.Body = v
	return s
}

type GetPackageJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetPackageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobRequest) GoString() string {
	return s.String()
}

func (s *GetPackageJobRequest) SetJobId(v string) *GetPackageJobRequest {
	s.JobId = &v
	return s
}

type GetPackageJobResponseBody struct {
	PackageJob *GetPackageJobResponseBodyPackageJob `json:"PackageJob,omitempty" xml:"PackageJob,omitempty" type:"Struct"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPackageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBody) SetPackageJob(v *GetPackageJobResponseBodyPackageJob) *GetPackageJobResponseBody {
	s.PackageJob = v
	return s
}

func (s *GetPackageJobResponseBody) SetRequestId(v string) *GetPackageJobResponseBody {
	s.RequestId = &v
	return s
}

type GetPackageJobResponseBodyPackageJob struct {
	// example:
	//
	// InvalidParameter
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 2022-09-08T11:34:05Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-09-08T11:44:05Z
	FinishTime *string                                      `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Inputs     []*GetPackageJobResponseBodyPackageJobInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Resource content bad.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2022-09-08T11:44:05Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// job-name
	Name   *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Output *GetPackageJobResponseBodyPackageJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/output.m3u8
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// 36f3fee40aa047c0b067d0fb85edc12b
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-09-08T11:34:05Z
	SubmitTime    *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetPackageJobResponseBodyPackageJob) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJob) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJob) SetCode(v string) *GetPackageJobResponseBodyPackageJob {
	s.Code = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetCreateTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.CreateTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetFinishTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.FinishTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetInputs(v []*GetPackageJobResponseBodyPackageJobInputs) *GetPackageJobResponseBodyPackageJob {
	s.Inputs = v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetJobId(v string) *GetPackageJobResponseBodyPackageJob {
	s.JobId = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetMessage(v string) *GetPackageJobResponseBodyPackageJob {
	s.Message = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetModifiedTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetName(v string) *GetPackageJobResponseBodyPackageJob {
	s.Name = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetOutput(v *GetPackageJobResponseBodyPackageJobOutput) *GetPackageJobResponseBodyPackageJob {
	s.Output = v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetOutputUrl(v string) *GetPackageJobResponseBodyPackageJob {
	s.OutputUrl = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetPipelineId(v string) *GetPackageJobResponseBodyPackageJob {
	s.PipelineId = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetPriority(v int32) *GetPackageJobResponseBodyPackageJob {
	s.Priority = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetStatus(v string) *GetPackageJobResponseBodyPackageJob {
	s.Status = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetSubmitTime(v string) *GetPackageJobResponseBodyPackageJob {
	s.SubmitTime = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetTriggerSource(v string) *GetPackageJobResponseBodyPackageJob {
	s.TriggerSource = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJob) SetUserData(v string) *GetPackageJobResponseBodyPackageJob {
	s.UserData = &v
	return s
}

type GetPackageJobResponseBodyPackageJobInputs struct {
	Input *GetPackageJobResponseBodyPackageJobInputsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s GetPackageJobResponseBodyPackageJobInputs) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJobInputs) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJobInputs) SetInput(v *GetPackageJobResponseBodyPackageJobInputsInput) *GetPackageJobResponseBodyPackageJobInputs {
	s.Input = v
	return s
}

type GetPackageJobResponseBodyPackageJobInputsInput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPackageJobResponseBodyPackageJobInputsInput) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJobInputsInput) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJobInputsInput) SetMedia(v string) *GetPackageJobResponseBodyPackageJobInputsInput {
	s.Media = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJobInputsInput) SetType(v string) *GetPackageJobResponseBodyPackageJobInputsInput {
	s.Type = &v
	return s
}

type GetPackageJobResponseBodyPackageJobOutput struct {
	// example:
	//
	// oss://bucket/path/to/video.m3u8
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPackageJobResponseBodyPackageJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponseBodyPackageJobOutput) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponseBodyPackageJobOutput) SetMedia(v string) *GetPackageJobResponseBodyPackageJobOutput {
	s.Media = &v
	return s
}

func (s *GetPackageJobResponseBodyPackageJobOutput) SetType(v string) *GetPackageJobResponseBodyPackageJobOutput {
	s.Type = &v
	return s
}

type GetPackageJobResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPackageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPackageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPackageJobResponse) GoString() string {
	return s.String()
}

func (s *GetPackageJobResponse) SetHeaders(v map[string]*string) *GetPackageJobResponse {
	s.Headers = v
	return s
}

func (s *GetPackageJobResponse) SetStatusCode(v int32) *GetPackageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPackageJobResponse) SetBody(v *GetPackageJobResponseBody) *GetPackageJobResponse {
	s.Body = v
	return s
}

type GetPipelineRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s GetPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRequest) GoString() string {
	return s.String()
}

func (s *GetPipelineRequest) SetPipelineId(v string) *GetPipelineRequest {
	s.PipelineId = &v
	return s
}

type GetPipelineResponseBody struct {
	Pipeline *GetPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBody) SetPipeline(v *GetPipelineResponseBodyPipeline) *GetPipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *GetPipelineResponseBody) SetRequestId(v string) *GetPipelineResponseBody {
	s.RequestId = &v
	return s
}

type GetPipelineResponseBodyPipeline struct {
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipeline) SetCreateTime(v string) *GetPipelineResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetModifiedTime(v string) *GetPipelineResponseBodyPipeline {
	s.ModifiedTime = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetName(v string) *GetPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetPipelineId(v string) *GetPipelineResponseBodyPipeline {
	s.PipelineId = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetPriority(v int32) *GetPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetSpeed(v string) *GetPipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetStatus(v string) *GetPipelineResponseBodyPipeline {
	s.Status = &v
	return s
}

type GetPipelineResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineResponse) SetHeaders(v map[string]*string) *GetPipelineResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineResponse) SetStatusCode(v int32) *GetPipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineResponse) SetBody(v *GetPipelineResponseBody) *GetPipelineResponse {
	s.Body = v
	return s
}

type GetPlayInfoRequest struct {
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// 86434e152b7d4f20be480574439fe***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoRequest) GoString() string {
	return s.String()
}

func (s *GetPlayInfoRequest) SetInputURL(v string) *GetPlayInfoRequest {
	s.InputURL = &v
	return s
}

func (s *GetPlayInfoRequest) SetMediaId(v string) *GetPlayInfoRequest {
	s.MediaId = &v
	return s
}

type GetPlayInfoResponseBody struct {
	MediaBase    *GetPlayInfoResponseBodyMediaBase      `json:"MediaBase,omitempty" xml:"MediaBase,omitempty" type:"Struct"`
	PlayInfoList []*GetPlayInfoResponseBodyPlayInfoList `json:"PlayInfoList,omitempty" xml:"PlayInfoList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBody) SetMediaBase(v *GetPlayInfoResponseBodyMediaBase) *GetPlayInfoResponseBody {
	s.MediaBase = v
	return s
}

func (s *GetPlayInfoResponseBody) SetPlayInfoList(v []*GetPlayInfoResponseBodyPlayInfoList) *GetPlayInfoResponseBody {
	s.PlayInfoList = v
	return s
}

func (s *GetPlayInfoResponseBody) SetRequestId(v string) *GetPlayInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetPlayInfoResponseBodyMediaBase struct {
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// example:
	//
	// https://***.oss-cn-shanghai.aliyuncs.com/cover/281c64d6-b5fb-4c57-97cd-84da56a8b151_large_cover_url.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2021-09-22T10:07:31+08:00
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 2eea77a61c7b4ddd95bec34a6f65b***
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// testTitle
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetPlayInfoResponseBodyMediaBase) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBodyMediaBase) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCateId(v int64) *GetPlayInfoResponseBodyMediaBase {
	s.CateId = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCoverURL(v string) *GetPlayInfoResponseBodyMediaBase {
	s.CoverURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCreationTime(v string) *GetPlayInfoResponseBodyMediaBase {
	s.CreationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetDescription(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Description = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaId(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaId = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaTags(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaTags = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaType(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaType = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetStatus(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Status = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetTitle(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Title = &v
	return s
}

type GetPlayInfoResponseBodyPlayInfoList struct {
	// example:
	//
	// 8
	BitDepth *int32 `json:"BitDepth,omitempty" xml:"BitDepth,omitempty"`
	// example:
	//
	// 20
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2022-05-10T02:28:49Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// HD
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// example:
	//
	// 9.0464
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 0
	Encrypt *int64 `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	// example:
	//
	// AliyunVoDEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// example:
	//
	// http://outin-***.oss-cn-shanghai.aliyuncs.com/sv/43a68ee9-181809b6aba/43a68ee9-181809b6aba.mpeg
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// HDR
	HDRType *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	// example:
	//
	// 1080
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 36c9d38e70bf43ed9f7f8f48d6356***
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 2022-05-13T11:39:41.714+08:00
	ModificationTime *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	// example:
	//
	// 0
	NarrowBandType *string `json:"NarrowBandType,omitempty" xml:"NarrowBandType,omitempty"`
	// example:
	//
	// https://***.aliyuncdn.com/sv/756bee1-17f980f0945/756bee1-17f980f0945.mp4
	PlayURL *string `json:"PlayURL,omitempty" xml:"PlayURL,omitempty"`
	// example:
	//
	// 418112
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// "{\\"ims.audioServiceType\\": \\"AudioEnhancement\\"}"
	StreamTags *string `json:"StreamTags,omitempty" xml:"StreamTags,omitempty"`
	// example:
	//
	// video
	StreamType *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	// example:
	//
	// Normal
	TransTemplateType *string `json:"TransTemplateType,omitempty" xml:"TransTemplateType,omitempty"`
	// example:
	//
	// 5bed88672b1e2520ead228935ed51***
	WatermarkId *string `json:"WatermarkId,omitempty" xml:"WatermarkId,omitempty"`
	// example:
	//
	// 1024
	Width *int64 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPlayInfoResponseBodyPlayInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBodyPlayInfoList) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetBitDepth(v int32) *GetPlayInfoResponseBodyPlayInfoList {
	s.BitDepth = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetBitrate(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetCreationTime(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.CreationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetDefinition(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Definition = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetDuration(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Duration = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetEncrypt(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Encrypt = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetEncryptType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.EncryptType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFileURL(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.FileURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFormat(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Format = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFps(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Fps = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetHDRType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.HDRType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetHeight(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Height = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetJobId(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.JobId = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetModificationTime(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.ModificationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetNarrowBandType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.NarrowBandType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetPlayURL(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.PlayURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetSize(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Size = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStatus(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Status = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStreamTags(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.StreamTags = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStreamType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.StreamType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetTransTemplateType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.TransTemplateType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetWatermarkId(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.WatermarkId = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetWidth(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Width = &v
	return s
}

type GetPlayInfoResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponse) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponse) SetHeaders(v map[string]*string) *GetPlayInfoResponse {
	s.Headers = v
	return s
}

func (s *GetPlayInfoResponse) SetStatusCode(v int32) *GetPlayInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPlayInfoResponse) SetBody(v *GetPlayInfoResponseBody) *GetPlayInfoResponse {
	s.Body = v
	return s
}

type GetPublicMediaInfoRequest struct {
	// example:
	//
	// icepublic-****14e501538aeef0a3140176f6****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPublicMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoRequest) SetMediaId(v string) *GetPublicMediaInfoRequest {
	s.MediaId = &v
	return s
}

type GetPublicMediaInfoResponseBody struct {
	MediaInfo *GetPublicMediaInfoResponseBodyMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// RequestId
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPublicMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBody) SetMediaInfo(v *GetPublicMediaInfoResponseBodyMediaInfo) *GetPublicMediaInfoResponseBody {
	s.MediaInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBody) SetRequestId(v string) *GetPublicMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfo struct {
	DynamicMetaData *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData `json:"DynamicMetaData,omitempty" xml:"DynamicMetaData,omitempty" type:"Struct"`
	// FileInfos
	FileInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// icepublic-****14e501538aeef0a3140176f6****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetDynamicMetaData(v *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.DynamicMetaData = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetFileInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.FileInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetMediaBasicInfo(v *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetMediaId(v string) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.MediaId = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData struct {
	// example:
	//
	// {"AuditionUrl": "http://example-bucket.cdn.domain.com/example.mp4", "AuditionCount": 3}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) SetData(v string) *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData {
	s.Data = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) SetType(v string) *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData {
	s.Type = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoList struct {
	AudioStreamInfoList    []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList    `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo          *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo            `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	SubtitleStreamInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList `json:"SubtitleStreamInfoList,omitempty" xml:"SubtitleStreamInfoList,omitempty" type:"Repeated"`
	VideoStreamInfoList    []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList    `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetAudioStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetFileBasicInfo(v *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.FileBasicInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetSubtitleStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.SubtitleStreamInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetVideoStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.VideoStreamInfoList = v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList struct {
	// example:
	//
	// 192.0
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x6134706d
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// mp4a
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 16.2
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 10
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 162
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 0.000000
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/44100
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannelLayout(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannels(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetFps(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetNumFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetProfile(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleFmt(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleRate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo struct {
	// example:
	//
	// 192.0
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 16.2
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 27007
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.cdn.domain.com/example.mp4
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mp4
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 0
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 0
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileSize(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileStatus(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileType(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileUrl(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFormatName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetHeight(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetRegion(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetWidth(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList struct {
	// example:
	//
	// SubRip Text
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// srt
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// unicode
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// unicode
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 29.97
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 1
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 0
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 30
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Timebase = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList struct {
	// example:
	//
	// 24.0
	AvgFPS *string `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	// example:
	//
	// 1001.594
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x0000
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [0][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/48
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 0:1
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 216.206706
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 24.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	// example:
	//
	// 540
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// und
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 30
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 5184
	NbFrames *string `json:"Nb_frames,omitempty" xml:"Nb_frames,omitempty"`
	// example:
	//
	// 5184
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 0:1
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 0.081706
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/12288
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	// example:
	//
	// 960
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetAvgFPS(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.AvgFPS = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDar(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetFps(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHasBFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHeight(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLevel(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNbFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NbFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNumFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetPixFmt(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetProfile(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetRotate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetSar(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Timebase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetWidth(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// category
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:08Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:15Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// MediaId
	//
	// example:
	//
	// icepublic-****14e501538aeef0a3140176f6****
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {"key":"value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBusinessType(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCategory(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCoverURL(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCreateTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDeletedTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDescription(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaId(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaTags(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaType(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetModifiedTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSource(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSpriteImages(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetStatus(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetTitle(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUserData(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetPublicMediaInfoResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetPublicMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetPublicMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponse) SetHeaders(v map[string]*string) *GetPublicMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *GetPublicMediaInfoResponse) SetStatusCode(v int32) *GetPublicMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPublicMediaInfoResponse) SetBody(v *GetPublicMediaInfoResponseBody) *GetPublicMediaInfoResponse {
	s.Body = v
	return s
}

type GetSmartHandleJobRequest struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetSmartHandleJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobRequest) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobRequest) SetJobId(v string) *GetSmartHandleJobRequest {
	s.JobId = &v
	return s
}

type GetSmartHandleJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId     *string                                 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobResult *GetSmartHandleJobResponseBodyJobResult `json:"JobResult,omitempty" xml:"JobResult,omitempty" type:"Struct"`
	// example:
	//
	// {}
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartJobInfo *GetSmartHandleJobResponseBodySmartJobInfo `json:"SmartJobInfo,omitempty" xml:"SmartJobInfo,omitempty" type:"Struct"`
	// example:
	//
	// Finished
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetSmartHandleJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBody) SetJobId(v string) *GetSmartHandleJobResponseBody {
	s.JobId = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetJobResult(v *GetSmartHandleJobResponseBodyJobResult) *GetSmartHandleJobResponseBody {
	s.JobResult = v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetOutput(v string) *GetSmartHandleJobResponseBody {
	s.Output = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetRequestId(v string) *GetSmartHandleJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetSmartJobInfo(v *GetSmartHandleJobResponseBodySmartJobInfo) *GetSmartHandleJobResponseBody {
	s.SmartJobInfo = v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetState(v string) *GetSmartHandleJobResponseBody {
	s.State = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetUserData(v string) *GetSmartHandleJobResponseBody {
	s.UserData = &v
	return s
}

type GetSmartHandleJobResponseBodyJobResult struct {
	// 智能分析结果
	//
	// example:
	//
	// 拆条或智能标签信息
	AiResult *string `json:"AiResult,omitempty" xml:"AiResult,omitempty"`
	// 媒资Id
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Usage   *string `json:"Usage,omitempty" xml:"Usage,omitempty"`
}

func (s GetSmartHandleJobResponseBodyJobResult) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodyJobResult) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodyJobResult) SetAiResult(v string) *GetSmartHandleJobResponseBodyJobResult {
	s.AiResult = &v
	return s
}

func (s *GetSmartHandleJobResponseBodyJobResult) SetMediaId(v string) *GetSmartHandleJobResponseBodyJobResult {
	s.MediaId = &v
	return s
}

func (s *GetSmartHandleJobResponseBodyJobResult) SetUsage(v string) *GetSmartHandleJobResponseBodyJobResult {
	s.Usage = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfo struct {
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 测试描述
	Description *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	InputConfig *GetSmartHandleJobResponseBodySmartJobInfoInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	// example:
	//
	// ASR
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string                                                `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	OutputConfig *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// userid。
	//
	// example:
	//
	// 1974526429******
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfo) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetCreateTime(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.CreateTime = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetDescription(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.Description = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetInputConfig(v *GetSmartHandleJobResponseBodySmartJobInfoInputConfig) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.InputConfig = v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetJobType(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.JobType = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetModifiedTime(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetOutputConfig(v *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.OutputConfig = v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetTitle(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.Title = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetUserId(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.UserId = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfoInputConfig struct {
	// example:
	//
	// oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ******11-DB8D-4A9A-875B-275798******
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfoInputConfig) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfoInputConfig) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoInputConfig) SetInputFile(v string) *GetSmartHandleJobResponseBodySmartJobInfoInputConfig {
	s.InputFile = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfoOutputConfig struct {
	// OSS Bucket
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Object
	//
	// example:
	//
	// test-object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) SetBucket(v string) *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig {
	s.Bucket = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) SetObject(v string) *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig {
	s.Object = &v
	return s
}

type GetSmartHandleJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSmartHandleJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSmartHandleJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponse) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponse) SetHeaders(v map[string]*string) *GetSmartHandleJobResponse {
	s.Headers = v
	return s
}

func (s *GetSmartHandleJobResponse) SetStatusCode(v int32) *GetSmartHandleJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSmartHandleJobResponse) SetBody(v *GetSmartHandleJobResponseBody) *GetSmartHandleJobResponse {
	s.Body = v
	return s
}

type GetSnapshotJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobRequest) SetJobId(v string) *GetSnapshotJobRequest {
	s.JobId = &v
	return s
}

type GetSnapshotJobResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotJob *GetSnapshotJobResponseBodySnapshotJob `json:"SnapshotJob,omitempty" xml:"SnapshotJob,omitempty" type:"Struct"`
}

func (s GetSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBody) SetRequestId(v string) *GetSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSnapshotJobResponseBody) SetSnapshotJob(v *GetSnapshotJobResponseBodySnapshotJob) *GetSnapshotJobResponseBody {
	s.SnapshotJob = v
	return s
}

type GetSnapshotJobResponseBodySnapshotJob struct {
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// example:
	//
	// ResourceNotFound
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 8
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string                                     `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *GetSnapshotJobResponseBodySnapshotJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// The specified resource for "Pipeline" could not be found.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string                                      `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Name         *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Output       *GetSnapshotJobResponseBodySnapshotJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// {"Type":"Normal","FrameType":"normal","Time":0,"Count":10}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// Sprite
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// {"test parameter": "test value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJob) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJob) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetAsync(v bool) *GetSnapshotJobResponseBodySnapshotJob {
	s.Async = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCode(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Code = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCount(v int32) *GetSnapshotJobResponseBodySnapshotJob {
	s.Count = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCreateTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.CreateTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetFinishTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.FinishTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetInput(v *GetSnapshotJobResponseBodySnapshotJobInput) *GetSnapshotJobResponseBodySnapshotJob {
	s.Input = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetJobId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.JobId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetMessage(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Message = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetModifiedTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetName(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Name = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetOutput(v *GetSnapshotJobResponseBodySnapshotJobOutput) *GetSnapshotJobResponseBodySnapshotJob {
	s.Output = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetPipelineId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.PipelineId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetStatus(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Status = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetSubmitTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.SubmitTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTemplateConfig(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TemplateConfig = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTemplateId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TemplateId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTriggerSource(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TriggerSource = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetType(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Type = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetUserData(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.UserData = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobInput struct {
	// example:
	//
	// oss://test-bucket/object.mp4
	Media   *string                                            `json:"Media,omitempty" xml:"Media,omitempty"`
	OssFile *GetSnapshotJobResponseBodySnapshotJobInputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobInput) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetMedia(v string) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.Media = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetOssFile(v *GetSnapshotJobResponseBodySnapshotJobInputOssFile) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.OssFile = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetType(v string) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.Type = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobInputOssFile struct {
	// OSS Bucket
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Location
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// OSS Object
	//
	// example:
	//
	// object.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobInputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobInputOssFile) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetBucket(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetLocation(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Location = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetObject(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Object = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobOutput struct {
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg
	Media   *string                                             `json:"Media,omitempty" xml:"Media,omitempty"`
	OssFile *GetSnapshotJobResponseBodySnapshotJobOutputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobOutput) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetMedia(v string) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.Media = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetOssFile(v *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.OssFile = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetType(v string) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.Type = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobOutputOssFile struct {
	// OSS Bucket
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Location
	//
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// OSS Object
	//
	// example:
	//
	// output-{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobOutputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobOutputOssFile) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetBucket(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetLocation(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Location = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetObject(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Object = &v
	return s
}

type GetSnapshotJobResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponse) SetHeaders(v map[string]*string) *GetSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *GetSnapshotJobResponse) SetStatusCode(v int32) *GetSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSnapshotJobResponse) SetBody(v *GetSnapshotJobResponseBody) *GetSnapshotJobResponse {
	s.Body = v
	return s
}

type GetSnapshotUrlsRequest struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Asc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 3600
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetSnapshotUrlsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsRequest) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsRequest) SetJobId(v string) *GetSnapshotUrlsRequest {
	s.JobId = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetOrderBy(v string) *GetSnapshotUrlsRequest {
	s.OrderBy = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetPageNumber(v int32) *GetSnapshotUrlsRequest {
	s.PageNumber = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetPageSize(v int32) *GetSnapshotUrlsRequest {
	s.PageSize = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetTimeout(v int64) *GetSnapshotUrlsRequest {
	s.Timeout = &v
	return s
}

type GetSnapshotUrlsResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId    *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotUrls []*string `json:"SnapshotUrls,omitempty" xml:"SnapshotUrls,omitempty" type:"Repeated"`
	// example:
	//
	// 30
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/ouoput.vtt
	WebVTTUrl *string `json:"WebVTTUrl,omitempty" xml:"WebVTTUrl,omitempty"`
}

func (s GetSnapshotUrlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsResponseBody) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsResponseBody) SetRequestId(v string) *GetSnapshotUrlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetSnapshotUrls(v []*string) *GetSnapshotUrlsResponseBody {
	s.SnapshotUrls = v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetTotal(v int32) *GetSnapshotUrlsResponseBody {
	s.Total = &v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetWebVTTUrl(v string) *GetSnapshotUrlsResponseBody {
	s.WebVTTUrl = &v
	return s
}

type GetSnapshotUrlsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSnapshotUrlsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSnapshotUrlsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsResponse) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsResponse) SetHeaders(v map[string]*string) *GetSnapshotUrlsResponse {
	s.Headers = v
	return s
}

func (s *GetSnapshotUrlsResponse) SetStatusCode(v int32) *GetSnapshotUrlsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSnapshotUrlsResponse) SetBody(v *GetSnapshotUrlsResponseBody) *GetSnapshotUrlsResponse {
	s.Body = v
	return s
}

type GetSystemTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetSystemTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateRequest) SetTemplateId(v string) *GetSystemTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetSystemTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId      *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SystemTemplate *GetSystemTemplateResponseBodySystemTemplate `json:"SystemTemplate,omitempty" xml:"SystemTemplate,omitempty" type:"Struct"`
}

func (s GetSystemTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponseBody) SetRequestId(v string) *GetSystemTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSystemTemplateResponseBody) SetSystemTemplate(v *GetSystemTemplateResponseBodySystemTemplate) *GetSystemTemplateResponseBody {
	s.SystemTemplate = v
	return s
}

type GetSystemTemplateResponseBodySystemTemplate struct {
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// Normal
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// example:
	//
	// {"Container":{"Format":"m3u8"},"TransConfig":{"TransMode":"onepass"},"Video":{"Codec":"H.264","Maxrate":8000,"Preset":"medium","PixFmt":"yuv420p","Width":2048,"Bitrate":3500},"Audio":{"Codec":"aac","Bitrate":160,"Samplerate":44100,"Channels":2}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// M3U8-2K
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s GetSystemTemplateResponseBodySystemTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponseBodySystemTemplate) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetStatus(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.Status = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetSubtype(v int32) *GetSystemTemplateResponseBodySystemTemplate {
	s.Subtype = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetSubtypeName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.SubtypeName = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateConfig(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateId(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateName = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetType(v int32) *GetSystemTemplateResponseBodySystemTemplate {
	s.Type = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTypeName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TypeName = &v
	return s
}

type GetSystemTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetSystemTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetSystemTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponse) SetHeaders(v map[string]*string) *GetSystemTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetSystemTemplateResponse) SetStatusCode(v int32) *GetSystemTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSystemTemplateResponse) SetBody(v *GetSystemTemplateResponseBody) *GetSystemTemplateResponse {
	s.Body = v
	return s
}

type GetTemplateRequest struct {
	// example:
	//
	// 0
	RelatedMediaidFlag *string `json:"RelatedMediaidFlag,omitempty" xml:"RelatedMediaidFlag,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateRequest) SetRelatedMediaidFlag(v string) *GetTemplateRequest {
	s.RelatedMediaidFlag = &v
	return s
}

func (s *GetTemplateRequest) SetTemplateId(v string) *GetTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *GetTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s GetTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateResponseBody) SetRequestId(v string) *GetTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTemplateResponseBody) SetTemplate(v *GetTemplateResponseBodyTemplate) *GetTemplateResponseBody {
	s.Template = v
	return s
}

type GetTemplateResponseBodyTemplate struct {
	// example:
	//
	// {"Media1":"mediaId","Text1":"text"}
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// 参考Timeline模板配置详解
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// example:
	//
	// Normal
	PreviewMediaStatus *string `json:"PreviewMediaStatus,omitempty" xml:"PreviewMediaStatus,omitempty"`
	// example:
	//
	// {"video":["******c04f1d4a06996144cc1a******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *GetTemplateResponseBodyTemplate) SetClipsParam(v string) *GetTemplateResponseBodyTemplate {
	s.ClipsParam = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetConfig(v string) *GetTemplateResponseBodyTemplate {
	s.Config = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCoverURL(v string) *GetTemplateResponseBodyTemplate {
	s.CoverURL = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCreateSource(v string) *GetTemplateResponseBodyTemplate {
	s.CreateSource = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCreationTime(v string) *GetTemplateResponseBodyTemplate {
	s.CreationTime = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetModifiedSource(v string) *GetTemplateResponseBodyTemplate {
	s.ModifiedSource = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetModifiedTime(v string) *GetTemplateResponseBodyTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetName(v string) *GetTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetPreviewMedia(v string) *GetTemplateResponseBodyTemplate {
	s.PreviewMedia = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetPreviewMediaStatus(v string) *GetTemplateResponseBodyTemplate {
	s.PreviewMediaStatus = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetRelatedMediaids(v string) *GetTemplateResponseBodyTemplate {
	s.RelatedMediaids = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetStatus(v string) *GetTemplateResponseBodyTemplate {
	s.Status = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetTemplateId(v string) *GetTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetType(v string) *GetTemplateResponseBodyTemplate {
	s.Type = &v
	return s
}

type GetTemplateResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateResponse) SetHeaders(v map[string]*string) *GetTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateResponse) SetStatusCode(v int32) *GetTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateResponse) SetBody(v *GetTemplateResponseBody) *GetTemplateResponse {
	s.Body = v
	return s
}

type GetTemplateMaterialsRequest struct {
	// example:
	//
	// ["music.mp3","config.json","assets/1.jpg"]
	FileList *string `json:"FileList,omitempty" xml:"FileList,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsRequest) SetFileList(v string) *GetTemplateMaterialsRequest {
	s.FileList = &v
	return s
}

func (s *GetTemplateMaterialsRequest) SetTemplateId(v string) *GetTemplateMaterialsRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateMaterialsResponseBody struct {
	// example:
	//
	// {"music.mp3":"https://bucket.oss-cn-shanghai.aliyuncs.com/music.mp3?sign=xxx","config.json":"https://bucket.oss-cn-shanghai.aliyuncs.com/config.json?sign=xxx","assets/1.jpg":"https://bucket.oss-cn-shanghai.aliyuncs.com/assets/1.jpg?sign=xxx"}
	MaterialUrls *string `json:"MaterialUrls,omitempty" xml:"MaterialUrls,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTemplateMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsResponseBody) SetMaterialUrls(v string) *GetTemplateMaterialsResponseBody {
	s.MaterialUrls = &v
	return s
}

func (s *GetTemplateMaterialsResponseBody) SetRequestId(v string) *GetTemplateMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type GetTemplateMaterialsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplateMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplateMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsResponse) SetHeaders(v map[string]*string) *GetTemplateMaterialsResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateMaterialsResponse) SetStatusCode(v int32) *GetTemplateMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateMaterialsResponse) SetBody(v *GetTemplateMaterialsResponseBody) *GetTemplateMaterialsResponse {
	s.Body = v
	return s
}

type GetTemplateParamsRequest struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateParamsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsRequest) SetTemplateId(v string) *GetTemplateParamsRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateParamsResponseBody struct {
	ParamList []*GetTemplateParamsResponseBodyParamList `json:"ParamList,omitempty" xml:"ParamList,omitempty" type:"Repeated"`
	// Id of the request
	//
	// example:
	//
	// ****2876-6263-4B75-8F2C-CD0F7FCF****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ******419c8741c1b4325f035b******
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateParamsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsResponseBody) SetParamList(v []*GetTemplateParamsResponseBodyParamList) *GetTemplateParamsResponseBody {
	s.ParamList = v
	return s
}

func (s *GetTemplateParamsResponseBody) SetRequestId(v string) *GetTemplateParamsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTemplateParamsResponseBody) SetTemplateId(v string) *GetTemplateParamsResponseBody {
	s.TemplateId = &v
	return s
}

type GetTemplateParamsResponseBodyParamList struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// https://ice-materials-***.alicdn.com/***/********20221****.jpg
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// video1
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// https://ice-materials-***.alicdn.com/***/********2022111618012453120c2a81*******.mp4
	MediaUrl *string `json:"MediaUrl,omitempty" xml:"MediaUrl,omitempty"`
	// example:
	//
	// Image
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTemplateParamsResponseBodyParamList) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsResponseBodyParamList) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsResponseBodyParamList) SetContent(v string) *GetTemplateParamsResponseBodyParamList {
	s.Content = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetCoverUrl(v string) *GetTemplateParamsResponseBodyParamList {
	s.CoverUrl = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetKey(v string) *GetTemplateParamsResponseBodyParamList {
	s.Key = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetMediaUrl(v string) *GetTemplateParamsResponseBodyParamList {
	s.MediaUrl = &v
	return s
}

func (s *GetTemplateParamsResponseBodyParamList) SetType(v string) *GetTemplateParamsResponseBodyParamList {
	s.Type = &v
	return s
}

type GetTemplateParamsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplateParamsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplateParamsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateParamsResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateParamsResponse) SetHeaders(v map[string]*string) *GetTemplateParamsResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateParamsResponse) SetStatusCode(v int32) *GetTemplateParamsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateParamsResponse) SetBody(v *GetTemplateParamsResponseBody) *GetTemplateParamsResponse {
	s.Body = v
	return s
}

type GetTranscodeJobRequest struct {
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
}

func (s GetTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobRequest) SetParentJobId(v string) *GetTranscodeJobRequest {
	s.ParentJobId = &v
	return s
}

type GetTranscodeJobResponseBody struct {
	// example:
	//
	// 9EDC30DC-0050-5459-B788-F761B2BE359B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// TranscodeParentJobWithSubJobDTO
	TranscodeParentJob *GetTranscodeJobResponseBodyTranscodeParentJob `json:"TranscodeParentJob,omitempty" xml:"TranscodeParentJob,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBody) SetRequestId(v string) *GetTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBody) SetTranscodeParentJob(v *GetTranscodeJobResponseBodyTranscodeParentJob) *GetTranscodeJobResponseBody {
	s.TranscodeParentJob = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJob struct {
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                                    `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// example:
	//
	// transcode-job
	Name        *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// example:
	//
	// 0
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId      *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime       *string                                                          `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	TranscodeJobList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList `json:"TranscodeJobList,omitempty" xml:"TranscodeJobList,omitempty" type:"Repeated"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJob) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJob) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetCreateTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.CreateTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetFinishTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.FinishTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetInputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.InputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetJobCount(v int32) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.JobCount = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetName(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Name = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetOutputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.OutputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetParentJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.ParentJobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetPercent(v int32) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Percent = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetRequestId(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetScheduleConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.ScheduleConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Status = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetSubmitTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.SubmitTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetTranscodeJobList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.TranscodeJobList = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetTriggerSource(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.TriggerSource = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetUserData(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.UserData = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobInputGroup struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup struct {
	Output        *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput        `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ProcessConfig *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetOutput(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.Output = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetProcessConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.ProcessConfig = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media     *string `json:"Media,omitempty" xml:"Media,omitempty"`
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetOutputUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.OutputUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig struct {
	CombineConfigs  []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs  `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	Encryption      *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption        `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	ImageWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	Subtitles       []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles       `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	TextWatermarks  []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks  `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	Transcode       *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode         `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetCombineConfigs(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetEncryption(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetImageWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetSubtitles(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTextWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTranscode(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs struct {
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption struct {
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetCipherText(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetEncryptType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetKeyServiceType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// example:
	//
	// 10
	Dy   *string                                                                                                  `json:"Dy,omitempty" xml:"Dy,omitempty"`
	File *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// TopLeft
	ReferPos *string                                                                                                      `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Timeline *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// example:
	//
	// UTF-8
	CharEnc *string                                                                                            `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	File    *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams struct {
	Audio       *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	MuxConfig   *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TransConfig *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetTransConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string                                                                                                   `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	Segment *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPipelineId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPriority(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.Priority = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList struct {
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                                                    `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 7d6a7e0d4db2457a8d45ff5d43e1bf0a
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0
	JobIndex *int32 `json:"JobIndex,omitempty" xml:"JobIndex,omitempty"`
	// example:
	//
	// transcode-job
	Name        *string                                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	OutFileMeta *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta `json:"OutFileMeta,omitempty" xml:"OutFileMeta,omitempty" type:"Struct"`
	Output      *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput      `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId   *string                                                                     `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	ProcessConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId      *string                                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetCreateTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.CreateTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetFinishTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.FinishTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetInputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.InputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobIndex(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobIndex = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Name = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutFileMeta(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.OutFileMeta = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutput(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Output = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetParentJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ParentJobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetProcessConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ProcessConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetRequestId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetScheduleConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ScheduleConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Status = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitResultJson(v map[string]interface{}) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitResultJson = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetUserData(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.UserData = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup struct {
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetInputUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.InputUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta struct {
	AudioStreamInfoList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo       *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo         `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	VideoStreamInfoList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetAudioStreamInfoList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetFileBasicInfo(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.FileBasicInfo = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetVideoStreamInfoList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.VideoStreamInfoList = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList struct {
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannelLayout(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecLongName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTag(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTagString(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetLang(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleRate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetStartTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetTimebase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo struct {
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 486c2890096871edba6f81848c016303
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileSize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFormatName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetMediaId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetRegion(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList struct {
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetAvgFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetBitRate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecLongName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTag(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTagString(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDar(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHasBFrames(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLang(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLevel(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetNumFrames(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetRotate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetSar(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetStartTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media     *string `json:"Media,omitempty" xml:"Media,omitempty"`
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetOutputUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.OutputUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig struct {
	CombineConfigs  []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs  `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	Encryption      *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption        `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	ImageWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	IsInheritTags   *bool                                                                                        `json:"IsInheritTags,omitempty" xml:"IsInheritTags,omitempty"`
	Subtitles       []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles       `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	TextWatermarks  []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks  `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	Transcode       *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode         `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetCombineConfigs(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetEncryption(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Encryption = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetImageWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetIsInheritTags(v bool) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.IsInheritTags = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetSubtitles(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Subtitles = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTextWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTranscode(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Transcode = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs struct {
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetAudioIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetDuration(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetStart(v float64) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetVideoIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption struct {
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetCipherText(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetDecryptKeyUri(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetEncryptType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetKeyServiceType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams struct {
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// example:
	//
	// 10
	Dy   *string                                                                                                       `json:"Dy,omitempty" xml:"Dy,omitempty"`
	File *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// TopLeft
	ReferPos *string                                                                                                           `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Timeline *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams struct {
	// example:
	//
	// UTF-8
	CharEnc *string                                                                                                 `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	File    *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams struct {
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode struct {
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams struct {
	Audio       *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	MuxConfig   *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Tags        map[string]*string                                                                                             `json:"Tags,omitempty" xml:"Tags,omitempty"`
	TransConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetAudio(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetContainer(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetTags(v map[string]*string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Tags = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetTransConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetVideo(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio struct {
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string                                                                                                        `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer struct {
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	Segment *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo struct {
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPipelineId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPriority(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.Priority = &v
	return s
}

type GetTranscodeJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponse) SetHeaders(v map[string]*string) *GetTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *GetTranscodeJobResponse) SetStatusCode(v int32) *GetTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTranscodeJobResponse) SetBody(v *GetTranscodeJobResponseBody) *GetTranscodeJobResponse {
	s.Body = v
	return s
}

type GetUrlUploadInfosRequest struct {
	// example:
	//
	// df2ac80b481346daa1db6a7c40edc7f8
	JobIds *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	// example:
	//
	// https://media.w3.org/2010/05/sintel/trailer.mp4
	UploadURLs *string `json:"UploadURLs,omitempty" xml:"UploadURLs,omitempty"`
}

func (s GetUrlUploadInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosRequest) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosRequest) SetJobIds(v string) *GetUrlUploadInfosRequest {
	s.JobIds = &v
	return s
}

func (s *GetUrlUploadInfosRequest) SetUploadURLs(v string) *GetUrlUploadInfosRequest {
	s.UploadURLs = &v
	return s
}

type GetUrlUploadInfosResponseBody struct {
	NonExists []*string `json:"NonExists,omitempty" xml:"NonExists,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId         *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	URLUploadInfoList []*GetUrlUploadInfosResponseBodyURLUploadInfoList `json:"URLUploadInfoList,omitempty" xml:"URLUploadInfoList,omitempty" type:"Repeated"`
}

func (s GetUrlUploadInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponseBody) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponseBody) SetNonExists(v []*string) *GetUrlUploadInfosResponseBody {
	s.NonExists = v
	return s
}

func (s *GetUrlUploadInfosResponseBody) SetRequestId(v string) *GetUrlUploadInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBody) SetURLUploadInfoList(v []*GetUrlUploadInfosResponseBodyURLUploadInfoList) *GetUrlUploadInfosResponseBody {
	s.URLUploadInfoList = v
	return s
}

type GetUrlUploadInfosResponseBodyURLUploadInfoList struct {
	// example:
	//
	// 2021-11-26 21:47:37
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// example:
	//
	// 2021-11-07T10:03:37Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// 200
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// Success
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 64610
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// 3829500c0fef429fa4ec1680b122d***
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 5014ca70f08171ecbf940764a0fd6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// http://****.mp4
	UploadURL *string `json:"UploadURL,omitempty" xml:"UploadURL,omitempty"`
	// example:
	//
	// {"MessageCallback":"{"CallbackURL":"http://example.aliyundoc.com"}", "Extend":"{"localId":"***", "test":"www"}"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetUrlUploadInfosResponseBodyURLUploadInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponseBodyURLUploadInfoList) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetCompleteTime(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.CompleteTime = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetCreationTime(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.CreationTime = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetErrorCode(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.ErrorCode = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetErrorMessage(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.ErrorMessage = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetFileSize(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.FileSize = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetJobId(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.JobId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetMediaId(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.MediaId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetStatus(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.Status = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetUploadURL(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.UploadURL = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetUserData(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.UserData = &v
	return s
}

type GetUrlUploadInfosResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetUrlUploadInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetUrlUploadInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponse) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponse) SetHeaders(v map[string]*string) *GetUrlUploadInfosResponse {
	s.Headers = v
	return s
}

func (s *GetUrlUploadInfosResponse) SetStatusCode(v int32) *GetUrlUploadInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUrlUploadInfosResponse) SetBody(v *GetUrlUploadInfosResponseBody) *GetUrlUploadInfosResponse {
	s.Body = v
	return s
}

type GetVideoListRequest struct {
	// example:
	//
	// 781111
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// example:
	//
	// 2017-01-11T12:59:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CreationTime:Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Uploading,Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetVideoListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListRequest) GoString() string {
	return s.String()
}

func (s *GetVideoListRequest) SetCateId(v int64) *GetVideoListRequest {
	s.CateId = &v
	return s
}

func (s *GetVideoListRequest) SetEndTime(v string) *GetVideoListRequest {
	s.EndTime = &v
	return s
}

func (s *GetVideoListRequest) SetPageNo(v int32) *GetVideoListRequest {
	s.PageNo = &v
	return s
}

func (s *GetVideoListRequest) SetPageSize(v int32) *GetVideoListRequest {
	s.PageSize = &v
	return s
}

func (s *GetVideoListRequest) SetSortBy(v string) *GetVideoListRequest {
	s.SortBy = &v
	return s
}

func (s *GetVideoListRequest) SetStartTime(v string) *GetVideoListRequest {
	s.StartTime = &v
	return s
}

func (s *GetVideoListRequest) SetStatus(v string) *GetVideoListRequest {
	s.Status = &v
	return s
}

type GetVideoListResponseBody struct {
	// example:
	//
	// 200
	Code      *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaList []*GetVideoListResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// Id of the request。
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 163
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetVideoListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListResponseBody) GoString() string {
	return s.String()
}

func (s *GetVideoListResponseBody) SetCode(v string) *GetVideoListResponseBody {
	s.Code = &v
	return s
}

func (s *GetVideoListResponseBody) SetMediaList(v []*GetVideoListResponseBodyMediaList) *GetVideoListResponseBody {
	s.MediaList = v
	return s
}

func (s *GetVideoListResponseBody) SetRequestId(v string) *GetVideoListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetVideoListResponseBody) SetSuccess(v string) *GetVideoListResponseBody {
	s.Success = &v
	return s
}

func (s *GetVideoListResponseBody) SetTotal(v int64) *GetVideoListResponseBody {
	s.Total = &v
	return s
}

type GetVideoListResponseBodyMediaList struct {
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// 3679
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// example:
	//
	// http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 2017-11-14T09:15:50Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 135.6
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1c6ce34007d571ed94667630a6bc****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 2017-11-14T09:16:50Z
	ModificationTime *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	// example:
	//
	// 10897890
	Size      *int64    `json:"Size,omitempty" xml:"Size,omitempty"`
	Snapshots []*string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// out-****.oss-cn-shanghai.aliyuncs.com
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	Tags            *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Title           *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetVideoListResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *GetVideoListResponseBodyMediaList) SetAppId(v string) *GetVideoListResponseBodyMediaList {
	s.AppId = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCateId(v int64) *GetVideoListResponseBodyMediaList {
	s.CateId = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCateName(v string) *GetVideoListResponseBodyMediaList {
	s.CateName = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCoverUrl(v string) *GetVideoListResponseBodyMediaList {
	s.CoverUrl = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetCreationTime(v string) *GetVideoListResponseBodyMediaList {
	s.CreationTime = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetDescription(v string) *GetVideoListResponseBodyMediaList {
	s.Description = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetDuration(v float32) *GetVideoListResponseBodyMediaList {
	s.Duration = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetMediaId(v string) *GetVideoListResponseBodyMediaList {
	s.MediaId = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetModificationTime(v string) *GetVideoListResponseBodyMediaList {
	s.ModificationTime = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetSize(v int64) *GetVideoListResponseBodyMediaList {
	s.Size = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetSnapshots(v []*string) *GetVideoListResponseBodyMediaList {
	s.Snapshots = v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetStatus(v string) *GetVideoListResponseBodyMediaList {
	s.Status = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetStorageLocation(v string) *GetVideoListResponseBodyMediaList {
	s.StorageLocation = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetTags(v string) *GetVideoListResponseBodyMediaList {
	s.Tags = &v
	return s
}

func (s *GetVideoListResponseBodyMediaList) SetTitle(v string) *GetVideoListResponseBodyMediaList {
	s.Title = &v
	return s
}

type GetVideoListResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetVideoListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetVideoListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetVideoListResponse) GoString() string {
	return s.String()
}

func (s *GetVideoListResponse) SetHeaders(v map[string]*string) *GetVideoListResponse {
	s.Headers = v
	return s
}

func (s *GetVideoListResponse) SetStatusCode(v int32) *GetVideoListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetVideoListResponse) SetBody(v *GetVideoListResponseBody) *GetVideoListResponse {
	s.Body = v
	return s
}

type GetWorkflowTaskRequest struct {
	// example:
	//
	// ******4215e042b3966ca5441e******
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetWorkflowTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskRequest) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskRequest) SetTaskId(v string) *GetWorkflowTaskRequest {
	s.TaskId = &v
	return s
}

type GetWorkflowTaskResponseBody struct {
	// Id of the request
	//
	// example:
	//
	// ******0C-7870-15FE-B96F-8880BB******
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WorkflowTask *GetWorkflowTaskResponseBodyWorkflowTask `json:"WorkflowTask,omitempty" xml:"WorkflowTask,omitempty" type:"Struct"`
}

func (s GetWorkflowTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponseBody) SetRequestId(v string) *GetWorkflowTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetWorkflowTaskResponseBody) SetWorkflowTask(v *GetWorkflowTaskResponseBodyWorkflowTask) *GetWorkflowTaskResponseBody {
	s.WorkflowTask = v
	return s
}

type GetWorkflowTaskResponseBodyWorkflowTask struct {
	ActivityResults *string `json:"ActivityResults,omitempty" xml:"ActivityResults,omitempty"`
	// example:
	//
	// 2023-01-04T02:05:17Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2023-01-04T02:06:19Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// example:
	//
	// Succeed
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ******4215e042b3966ca5441e******
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// example:
	//
	// {
	//
	//       "Type": "Media",
	//
	//       "Media": "******30706071edbfe290b488******"
	//
	// }
	TaskInput *string `json:"TaskInput,omitempty" xml:"TaskInput,omitempty"`
	// example:
	//
	// {"NotifyAddress":"http://xx.xx.xxx"}
	UserData *string                                          `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Workflow *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow `json:"Workflow,omitempty" xml:"Workflow,omitempty" type:"Struct"`
}

func (s GetWorkflowTaskResponseBodyWorkflowTask) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponseBodyWorkflowTask) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetActivityResults(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.ActivityResults = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetCreateTime(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetFinishTime(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.FinishTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetStatus(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.Status = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetTaskId(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.TaskId = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetTaskInput(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.TaskInput = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetUserData(v string) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.UserData = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTask) SetWorkflow(v *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) *GetWorkflowTaskResponseBodyWorkflowTask {
	s.Workflow = v
	return s
}

type GetWorkflowTaskResponseBodyWorkflowTaskWorkflow struct {
	// example:
	//
	// 2022-11-27T10:02:12Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-11-29T02:06:19Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Common
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// ******63dca94c609de02ac0d1******
	WorkflowId *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetCreateTime(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.CreateTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetModifiedTime(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.ModifiedTime = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetName(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.Name = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetStatus(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.Status = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetType(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.Type = &v
	return s
}

func (s *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow) SetWorkflowId(v string) *GetWorkflowTaskResponseBodyWorkflowTaskWorkflow {
	s.WorkflowId = &v
	return s
}

type GetWorkflowTaskResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetWorkflowTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetWorkflowTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetWorkflowTaskResponse) GoString() string {
	return s.String()
}

func (s *GetWorkflowTaskResponse) SetHeaders(v map[string]*string) *GetWorkflowTaskResponse {
	s.Headers = v
	return s
}

func (s *GetWorkflowTaskResponse) SetStatusCode(v int32) *GetWorkflowTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetWorkflowTaskResponse) SetBody(v *GetWorkflowTaskResponseBody) *GetWorkflowTaskResponse {
	s.Body = v
	return s
}

type InsertMediaToSearchLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// http://example-test-****.mp4
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// {}
	MsgBody *string `json:"MsgBody,omitempty" xml:"MsgBody,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s InsertMediaToSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s InsertMediaToSearchLibRequest) GoString() string {
	return s.String()
}

func (s *InsertMediaToSearchLibRequest) SetInput(v string) *InsertMediaToSearchLibRequest {
	s.Input = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetMediaId(v string) *InsertMediaToSearchLibRequest {
	s.MediaId = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetMediaType(v string) *InsertMediaToSearchLibRequest {
	s.MediaType = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetMsgBody(v string) *InsertMediaToSearchLibRequest {
	s.MsgBody = &v
	return s
}

func (s *InsertMediaToSearchLibRequest) SetSearchLibName(v string) *InsertMediaToSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type InsertMediaToSearchLibResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InsertMediaToSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InsertMediaToSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *InsertMediaToSearchLibResponseBody) SetCode(v string) *InsertMediaToSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *InsertMediaToSearchLibResponseBody) SetMediaId(v string) *InsertMediaToSearchLibResponseBody {
	s.MediaId = &v
	return s
}

func (s *InsertMediaToSearchLibResponseBody) SetRequestId(v string) *InsertMediaToSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *InsertMediaToSearchLibResponseBody) SetSuccess(v string) *InsertMediaToSearchLibResponseBody {
	s.Success = &v
	return s
}

type InsertMediaToSearchLibResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InsertMediaToSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InsertMediaToSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s InsertMediaToSearchLibResponse) GoString() string {
	return s.String()
}

func (s *InsertMediaToSearchLibResponse) SetHeaders(v map[string]*string) *InsertMediaToSearchLibResponse {
	s.Headers = v
	return s
}

func (s *InsertMediaToSearchLibResponse) SetStatusCode(v int32) *InsertMediaToSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *InsertMediaToSearchLibResponse) SetBody(v *InsertMediaToSearchLibResponseBody) *InsertMediaToSearchLibResponse {
	s.Body = v
	return s
}

type ListAllPublicMediaTagsRequest struct {
	// example:
	//
	// "sticker"
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// Copyright_Music
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
}

func (s ListAllPublicMediaTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsRequest) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsRequest) SetBusinessType(v string) *ListAllPublicMediaTagsRequest {
	s.BusinessType = &v
	return s
}

func (s *ListAllPublicMediaTagsRequest) SetEntityId(v string) *ListAllPublicMediaTagsRequest {
	s.EntityId = &v
	return s
}

type ListAllPublicMediaTagsResponseBody struct {
	MediaTagList []*ListAllPublicMediaTagsResponseBodyMediaTagList `json:"MediaTagList,omitempty" xml:"MediaTagList,omitempty" type:"Repeated"`
	// example:
	//
	// B45F83B7-7F87-4792-BFE9-63CD2137CAF0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAllPublicMediaTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBody) SetMediaTagList(v []*ListAllPublicMediaTagsResponseBodyMediaTagList) *ListAllPublicMediaTagsResponseBody {
	s.MediaTagList = v
	return s
}

func (s *ListAllPublicMediaTagsResponseBody) SetRequestId(v string) *ListAllPublicMediaTagsResponseBody {
	s.RequestId = &v
	return s
}

type ListAllPublicMediaTagsResponseBodyMediaTagList struct {
	// example:
	//
	// sticker-gif
	MediaTagId *string `json:"MediaTagId,omitempty" xml:"MediaTagId,omitempty"`
	// example:
	//
	// Gif
	MediaTagNameChinese *string                                                  `json:"MediaTagNameChinese,omitempty" xml:"MediaTagNameChinese,omitempty"`
	MediaTagNameEnglish *string                                                  `json:"MediaTagNameEnglish,omitempty" xml:"MediaTagNameEnglish,omitempty"`
	Options             []*ListAllPublicMediaTagsResponseBodyMediaTagListOptions `json:"Options,omitempty" xml:"Options,omitempty" type:"Repeated"`
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagList) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagList) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagId(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagId = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagNameChinese(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagNameChinese = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagNameEnglish(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagNameEnglish = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetOptions(v []*ListAllPublicMediaTagsResponseBodyMediaTagListOptions) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.Options = v
	return s
}

type ListAllPublicMediaTagsResponseBodyMediaTagListOptions struct {
	OptionChineseName *string `json:"OptionChineseName,omitempty" xml:"OptionChineseName,omitempty"`
	// example:
	//
	// Angry
	OptionEnglishName *string `json:"OptionEnglishName,omitempty" xml:"OptionEnglishName,omitempty"`
	// example:
	//
	// Angry
	OptionId *string `json:"OptionId,omitempty" xml:"OptionId,omitempty"`
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagListOptions) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagListOptions) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionChineseName(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionChineseName = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionEnglishName(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionEnglishName = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionId(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionId = &v
	return s
}

type ListAllPublicMediaTagsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAllPublicMediaTagsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAllPublicMediaTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponse) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponse) SetHeaders(v map[string]*string) *ListAllPublicMediaTagsResponse {
	s.Headers = v
	return s
}

func (s *ListAllPublicMediaTagsResponse) SetStatusCode(v int32) *ListAllPublicMediaTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllPublicMediaTagsResponse) SetBody(v *ListAllPublicMediaTagsResponseBody) *ListAllPublicMediaTagsResponse {
	s.Body = v
	return s
}

type ListAvatarTrainingJobsRequest struct {
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAvatarTrainingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsRequest) SetPageNo(v int32) *ListAvatarTrainingJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListAvatarTrainingJobsRequest) SetPageSize(v int32) *ListAvatarTrainingJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListAvatarTrainingJobsRequest) SetStatus(v string) *ListAvatarTrainingJobsRequest {
	s.Status = &v
	return s
}

type ListAvatarTrainingJobsResponseBody struct {
	Data *ListAvatarTrainingJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAvatarTrainingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponseBody) SetData(v *ListAvatarTrainingJobsResponseBodyData) *ListAvatarTrainingJobsResponseBody {
	s.Data = v
	return s
}

func (s *ListAvatarTrainingJobsResponseBody) SetRequestId(v string) *ListAvatarTrainingJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBody) SetSuccess(v bool) *ListAvatarTrainingJobsResponseBody {
	s.Success = &v
	return s
}

type ListAvatarTrainingJobsResponseBodyData struct {
	AvatarTrainingJobList []*ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList `json:"AvatarTrainingJobList,omitempty" xml:"AvatarTrainingJobList,omitempty" type:"Repeated"`
	// example:
	//
	// 3
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAvatarTrainingJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponseBodyData) SetAvatarTrainingJobList(v []*ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) *ListAvatarTrainingJobsResponseBodyData {
	s.AvatarTrainingJobList = v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyData) SetTotalCount(v int64) *ListAvatarTrainingJobsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList struct {
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// example:
	//
	// Avatar-XXX
	AvatarId   *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:40Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:40Z
	FirstTrainingTime *string `json:"FirstTrainingTime,omitempty" xml:"FirstTrainingTime,omitempty"`
	// example:
	//
	// *****aded114489ea02e0addf93*****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 2020-12-23T13:33:40Z
	LastTrainingTime *string `json:"LastTrainingTime,omitempty" xml:"LastTrainingTime,omitempty"`
	Message          *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// *****aded114489ea02e0addf93*****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarDescription(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarDescription = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarId(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarId = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarName(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarName = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetAvatarType(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.AvatarType = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetCreateTime(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.CreateTime = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetFirstTrainingTime(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.FirstTrainingTime = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetJobId(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.JobId = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetLastTrainingTime(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.LastTrainingTime = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetMessage(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.Message = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetPortrait(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.Portrait = &v
	return s
}

func (s *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList) SetStatus(v string) *ListAvatarTrainingJobsResponseBodyDataAvatarTrainingJobList {
	s.Status = &v
	return s
}

type ListAvatarTrainingJobsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAvatarTrainingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAvatarTrainingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarTrainingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListAvatarTrainingJobsResponse) SetHeaders(v map[string]*string) *ListAvatarTrainingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListAvatarTrainingJobsResponse) SetStatusCode(v int32) *ListAvatarTrainingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAvatarTrainingJobsResponse) SetBody(v *ListAvatarTrainingJobsResponseBody) *ListAvatarTrainingJobsResponse {
	s.Body = v
	return s
}

type ListAvatarsRequest struct {
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListAvatarsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsRequest) GoString() string {
	return s.String()
}

func (s *ListAvatarsRequest) SetAvatarType(v string) *ListAvatarsRequest {
	s.AvatarType = &v
	return s
}

func (s *ListAvatarsRequest) SetPageNo(v int32) *ListAvatarsRequest {
	s.PageNo = &v
	return s
}

func (s *ListAvatarsRequest) SetPageSize(v int32) *ListAvatarsRequest {
	s.PageSize = &v
	return s
}

type ListAvatarsResponseBody struct {
	Data *ListAvatarsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListAvatarsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponseBody) SetData(v *ListAvatarsResponseBodyData) *ListAvatarsResponseBody {
	s.Data = v
	return s
}

func (s *ListAvatarsResponseBody) SetRequestId(v string) *ListAvatarsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAvatarsResponseBody) SetSuccess(v bool) *ListAvatarsResponseBody {
	s.Success = &v
	return s
}

type ListAvatarsResponseBodyData struct {
	AvatarList []*ListAvatarsResponseBodyDataAvatarList `json:"AvatarList,omitempty" xml:"AvatarList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListAvatarsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponseBodyData) SetAvatarList(v []*ListAvatarsResponseBodyDataAvatarList) *ListAvatarsResponseBodyData {
	s.AvatarList = v
	return s
}

func (s *ListAvatarsResponseBodyData) SetTotalCount(v int64) *ListAvatarsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListAvatarsResponseBodyDataAvatarList struct {
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	// example:
	//
	// Avatar-XXX
	AvatarId   *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// example:
	//
	// 2DAvatar
	AvatarType *string `json:"AvatarType,omitempty" xml:"AvatarType,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail   *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	Transparent *bool   `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
}

func (s ListAvatarsResponseBodyDataAvatarList) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponseBodyDataAvatarList) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarDescription(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarDescription = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarId(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarId = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarName(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarName = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetAvatarType(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.AvatarType = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetPortrait(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.Portrait = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetThumbnail(v string) *ListAvatarsResponseBodyDataAvatarList {
	s.Thumbnail = &v
	return s
}

func (s *ListAvatarsResponseBodyDataAvatarList) SetTransparent(v bool) *ListAvatarsResponseBodyDataAvatarList {
	s.Transparent = &v
	return s
}

type ListAvatarsResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListAvatarsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListAvatarsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAvatarsResponse) GoString() string {
	return s.String()
}

func (s *ListAvatarsResponse) SetHeaders(v map[string]*string) *ListAvatarsResponse {
	s.Headers = v
	return s
}

func (s *ListAvatarsResponse) SetStatusCode(v int32) *ListAvatarsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAvatarsResponse) SetBody(v *ListAvatarsResponseBody) *ListAvatarsResponse {
	s.Body = v
	return s
}

type ListBatchMediaProducingJobsRequest struct {
	// example:
	//
	// 2023-06-05T15:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Script
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// mRZkKAovub0xWVfH14he4Q==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 2022-02-02T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Finished
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListBatchMediaProducingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsRequest) SetEndTime(v string) *ListBatchMediaProducingJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetJobId(v string) *ListBatchMediaProducingJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetJobType(v string) *ListBatchMediaProducingJobsRequest {
	s.JobType = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetMaxResults(v int32) *ListBatchMediaProducingJobsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetNextToken(v string) *ListBatchMediaProducingJobsRequest {
	s.NextToken = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetSortBy(v string) *ListBatchMediaProducingJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetStartTime(v string) *ListBatchMediaProducingJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsRequest) SetStatus(v string) *ListBatchMediaProducingJobsRequest {
	s.Status = &v
	return s
}

type ListBatchMediaProducingJobsResponseBody struct {
	EditingBatchJobList []*ListBatchMediaProducingJobsResponseBodyEditingBatchJobList `json:"EditingBatchJobList,omitempty" xml:"EditingBatchJobList,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListBatchMediaProducingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsResponseBody) SetEditingBatchJobList(v []*ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) *ListBatchMediaProducingJobsResponseBody {
	s.EditingBatchJobList = v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBody) SetMaxResults(v int32) *ListBatchMediaProducingJobsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBody) SetNextToken(v string) *ListBatchMediaProducingJobsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBody) SetRequestId(v string) *ListBatchMediaProducingJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListBatchMediaProducingJobsResponseBodyEditingBatchJobList struct {
	// example:
	//
	// 2023-06-09T06:38:09Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// example:
	//
	// 2023-06-09T06:36:48Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// {
	//
	//   "MediaConfig": {
	//
	//       "Volume": 0
	//
	//   },
	//
	//   "SpeechConfig": {
	//
	//       "Volume": 1
	//
	//   },
	//
	//  "BackgroundMusicConfig": {
	//
	//       "Volume": 0.3
	//
	//   }
	//
	// }
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	Extend        *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	InputConfig   *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// example:
	//
	// ******7ecbee4c6d9b8474498e******
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Script
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// example:
	//
	// 2023-06-09T06:37:58Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 20,
	//
	//   "MaxDuration": 15,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920,
	//
	//   "Video": {"Crf": 27}
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// example:
	//
	// Finished
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetCompleteTime(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.CompleteTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetCreateTime(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.CreateTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetEditingConfig(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.EditingConfig = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetExtend(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.Extend = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetInputConfig(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.InputConfig = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetJobId(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.JobId = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetJobType(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.JobType = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetModifiedTime(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.ModifiedTime = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetOutputConfig(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.OutputConfig = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetStatus(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.Status = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList) SetUserData(v string) *ListBatchMediaProducingJobsResponseBodyEditingBatchJobList {
	s.UserData = &v
	return s
}

type ListBatchMediaProducingJobsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListBatchMediaProducingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListBatchMediaProducingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBatchMediaProducingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListBatchMediaProducingJobsResponse) SetHeaders(v map[string]*string) *ListBatchMediaProducingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListBatchMediaProducingJobsResponse) SetStatusCode(v int32) *ListBatchMediaProducingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListBatchMediaProducingJobsResponse) SetBody(v *ListBatchMediaProducingJobsResponseBody) *ListBatchMediaProducingJobsResponse {
	s.Body = v
	return s
}

type ListCustomTemplatesRequest struct {
	// example:
	//
	// test-template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCustomTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesRequest) SetName(v string) *ListCustomTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetOrderBy(v string) *ListCustomTemplatesRequest {
	s.OrderBy = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetPageNumber(v int32) *ListCustomTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetPageSize(v int32) *ListCustomTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetSubtype(v string) *ListCustomTemplatesRequest {
	s.Subtype = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetTemplateId(v string) *ListCustomTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetType(v string) *ListCustomTemplatesRequest {
	s.Type = &v
	return s
}

type ListCustomTemplatesResponseBody struct {
	CustomTemplateList []*ListCustomTemplatesResponseBodyCustomTemplateList `json:"CustomTemplateList,omitempty" xml:"CustomTemplateList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 20
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListCustomTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBody) SetCustomTemplateList(v []*ListCustomTemplatesResponseBodyCustomTemplateList) *ListCustomTemplatesResponseBody {
	s.CustomTemplateList = v
	return s
}

func (s *ListCustomTemplatesResponseBody) SetRequestId(v string) *ListCustomTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomTemplatesResponseBody) SetTotal(v int32) *ListCustomTemplatesResponseBody {
	s.Total = &v
	return s
}

type ListCustomTemplatesResponseBodyCustomTemplateList struct {
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// true
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// AudioTranscode
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// example:
	//
	// {"Container":{"Format":"mp3"},"Audio":{"Codec":"mp3","Bitrate":"64","Samplerate":"22050","Channels":"2"}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// test-template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s ListCustomTemplatesResponseBodyCustomTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBodyCustomTemplateList) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetCreateTime(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetIsDefault(v bool) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.IsDefault = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetModifiedTime(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.ModifiedTime = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetStatus(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Status = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetSubtype(v int32) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Subtype = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetSubtypeName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.SubtypeName = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateConfig(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateConfig = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateId(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetType(v int32) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Type = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTypeName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TypeName = &v
	return s
}

type ListCustomTemplatesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponse) SetHeaders(v map[string]*string) *ListCustomTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListCustomTemplatesResponse) SetStatusCode(v int32) *ListCustomTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomTemplatesResponse) SetBody(v *ListCustomTemplatesResponseBody) *ListCustomTemplatesResponse {
	s.Body = v
	return s
}

type ListCustomizedVoiceJobsRequest struct {
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCustomizedVoiceJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsRequest) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsRequest) SetPageNo(v int32) *ListCustomizedVoiceJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListCustomizedVoiceJobsRequest) SetPageSize(v int32) *ListCustomizedVoiceJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomizedVoiceJobsRequest) SetType(v string) *ListCustomizedVoiceJobsRequest {
	s.Type = &v
	return s
}

type ListCustomizedVoiceJobsResponseBody struct {
	Data *ListCustomizedVoiceJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCustomizedVoiceJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponseBody) SetData(v *ListCustomizedVoiceJobsResponseBodyData) *ListCustomizedVoiceJobsResponseBody {
	s.Data = v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBody) SetRequestId(v string) *ListCustomizedVoiceJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBody) SetSuccess(v bool) *ListCustomizedVoiceJobsResponseBody {
	s.Success = &v
	return s
}

type ListCustomizedVoiceJobsResponseBodyData struct {
	CustomizedVoiceJobList []*ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList `json:"CustomizedVoiceJobList,omitempty" xml:"CustomizedVoiceJobList,omitempty" type:"Repeated"`
	// example:
	//
	// 271
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomizedVoiceJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponseBodyData) SetCustomizedVoiceJobList(v []*ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) *ListCustomizedVoiceJobsResponseBodyData {
	s.CustomizedVoiceJobList = v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyData) SetTotalCount(v int32) *ListCustomizedVoiceJobsResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList struct {
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// female
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// example:
	//
	// 2022-06-27T02:42:28Z
	GmtCreate *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// example:
	//
	// 2245ab99a7fd4116a4fd3f499b7a56c5
	JobId   *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// story
	Scenario *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	// example:
	//
	// Success
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// example:
	//
	// xiaozhuan
	VoiceId   *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetCreateTime(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.CreateTime = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetGender(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Gender = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetGmtCreate(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.GmtCreate = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetJobId(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.JobId = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetMessage(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Message = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetScenario(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Scenario = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetStatus(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Status = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetType(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.Type = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetVoiceDesc(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.VoiceDesc = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetVoiceId(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.VoiceId = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList) SetVoiceName(v string) *ListCustomizedVoiceJobsResponseBodyDataCustomizedVoiceJobList {
	s.VoiceName = &v
	return s
}

type ListCustomizedVoiceJobsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomizedVoiceJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomizedVoiceJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoiceJobsResponse) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoiceJobsResponse) SetHeaders(v map[string]*string) *ListCustomizedVoiceJobsResponse {
	s.Headers = v
	return s
}

func (s *ListCustomizedVoiceJobsResponse) SetStatusCode(v int32) *ListCustomizedVoiceJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomizedVoiceJobsResponse) SetBody(v *ListCustomizedVoiceJobsResponseBody) *ListCustomizedVoiceJobsResponse {
	s.Body = v
	return s
}

type ListCustomizedVoicesRequest struct {
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCustomizedVoicesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesRequest) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesRequest) SetPageNo(v int32) *ListCustomizedVoicesRequest {
	s.PageNo = &v
	return s
}

func (s *ListCustomizedVoicesRequest) SetPageSize(v int32) *ListCustomizedVoicesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomizedVoicesRequest) SetType(v string) *ListCustomizedVoicesRequest {
	s.Type = &v
	return s
}

type ListCustomizedVoicesResponseBody struct {
	Data *ListCustomizedVoicesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListCustomizedVoicesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponseBody) SetData(v *ListCustomizedVoicesResponseBodyData) *ListCustomizedVoicesResponseBody {
	s.Data = v
	return s
}

func (s *ListCustomizedVoicesResponseBody) SetRequestId(v string) *ListCustomizedVoicesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomizedVoicesResponseBody) SetSuccess(v bool) *ListCustomizedVoicesResponseBody {
	s.Success = &v
	return s
}

type ListCustomizedVoicesResponseBodyData struct {
	CustomizedVoiceList []*ListCustomizedVoicesResponseBodyDataCustomizedVoiceList `json:"CustomizedVoiceList,omitempty" xml:"CustomizedVoiceList,omitempty" type:"Repeated"`
	// example:
	//
	// 41
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListCustomizedVoicesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponseBodyData) SetCustomizedVoiceList(v []*ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) *ListCustomizedVoicesResponseBodyData {
	s.CustomizedVoiceList = v
	return s
}

func (s *ListCustomizedVoicesResponseBodyData) SetTotalCount(v int32) *ListCustomizedVoicesResponseBodyData {
	s.TotalCount = &v
	return s
}

type ListCustomizedVoicesResponseBodyDataCustomizedVoiceList struct {
	// example:
	//
	// ****4d5e829d498aaf966b119348****
	DemoAudioMediaId *string `json:"DemoAudioMediaId,omitempty" xml:"DemoAudioMediaId,omitempty"`
	// example:
	//
	// male
	Gender *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	// example:
	//
	// story
	Scenario  *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	VoiceDesc *string `json:"VoiceDesc,omitempty" xml:"VoiceDesc,omitempty"`
	// example:
	//
	// xiaozhuan
	VoiceId   *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetDemoAudioMediaId(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.DemoAudioMediaId = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetGender(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.Gender = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetScenario(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.Scenario = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetType(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.Type = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetVoiceDesc(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.VoiceDesc = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetVoiceId(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.VoiceId = &v
	return s
}

func (s *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList) SetVoiceName(v string) *ListCustomizedVoicesResponseBodyDataCustomizedVoiceList {
	s.VoiceName = &v
	return s
}

type ListCustomizedVoicesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListCustomizedVoicesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListCustomizedVoicesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomizedVoicesResponse) GoString() string {
	return s.String()
}

func (s *ListCustomizedVoicesResponse) SetHeaders(v map[string]*string) *ListCustomizedVoicesResponse {
	s.Headers = v
	return s
}

func (s *ListCustomizedVoicesResponse) SetStatusCode(v int32) *ListCustomizedVoicesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomizedVoicesResponse) SetBody(v *ListCustomizedVoicesResponseBody) *ListCustomizedVoicesResponse {
	s.Body = v
	return s
}

type ListDNADBRequest struct {
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****,78dc866518b843259669df58ed30****
	DBIds                *string `json:"DBIds,omitempty" xml:"DBIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListDNADBRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBRequest) GoString() string {
	return s.String()
}

func (s *ListDNADBRequest) SetDBIds(v string) *ListDNADBRequest {
	s.DBIds = &v
	return s
}

func (s *ListDNADBRequest) SetOwnerAccount(v string) *ListDNADBRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListDNADBRequest) SetOwnerId(v int64) *ListDNADBRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDNADBRequest) SetResourceOwnerAccount(v string) *ListDNADBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListDNADBRequest) SetResourceOwnerId(v int64) *ListDNADBRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListDNADBResponseBody struct {
	DBList []*ListDNADBResponseBodyDBList `json:"DBList,omitempty" xml:"DBList,omitempty" type:"Repeated"`
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDNADBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBResponseBody) GoString() string {
	return s.String()
}

func (s *ListDNADBResponseBody) SetDBList(v []*ListDNADBResponseBodyDBList) *ListDNADBResponseBody {
	s.DBList = v
	return s
}

func (s *ListDNADBResponseBody) SetRequestId(v string) *ListDNADBResponseBody {
	s.RequestId = &v
	return s
}

type ListDNADBResponseBodyDBList struct {
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	DBId        *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Video
	Model *int32 `json:"Model,omitempty" xml:"Model,omitempty"`
	// example:
	//
	// example-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDNADBResponseBodyDBList) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBResponseBodyDBList) GoString() string {
	return s.String()
}

func (s *ListDNADBResponseBodyDBList) SetDBId(v string) *ListDNADBResponseBodyDBList {
	s.DBId = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetDescription(v string) *ListDNADBResponseBodyDBList {
	s.Description = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetModel(v int32) *ListDNADBResponseBodyDBList {
	s.Model = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetName(v string) *ListDNADBResponseBodyDBList {
	s.Name = &v
	return s
}

func (s *ListDNADBResponseBodyDBList) SetStatus(v string) *ListDNADBResponseBodyDBList {
	s.Status = &v
	return s
}

type ListDNADBResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDNADBResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDNADBResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDNADBResponse) GoString() string {
	return s.String()
}

func (s *ListDNADBResponse) SetHeaders(v map[string]*string) *ListDNADBResponse {
	s.Headers = v
	return s
}

func (s *ListDNADBResponse) SetStatusCode(v int32) *ListDNADBResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDNADBResponse) SetBody(v *ListDNADBResponseBody) *ListDNADBResponse {
	s.Body = v
	return s
}

type ListDNAFilesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 10
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListDNAFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesRequest) GoString() string {
	return s.String()
}

func (s *ListDNAFilesRequest) SetDBId(v string) *ListDNAFilesRequest {
	s.DBId = &v
	return s
}

func (s *ListDNAFilesRequest) SetNextPageToken(v string) *ListDNAFilesRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListDNAFilesRequest) SetOwnerAccount(v string) *ListDNAFilesRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListDNAFilesRequest) SetOwnerId(v int64) *ListDNAFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListDNAFilesRequest) SetPageSize(v int32) *ListDNAFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListDNAFilesRequest) SetResourceOwnerAccount(v string) *ListDNAFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListDNAFilesRequest) SetResourceOwnerId(v int64) *ListDNAFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListDNAFilesResponseBody struct {
	FileList []*ListDNAFilesResponseBodyFileList `json:"FileList,omitempty" xml:"FileList,omitempty" type:"Repeated"`
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// 2AE89FA5-E620-56C7-9B80-75D09757385A
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDNAFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponseBody) SetFileList(v []*ListDNAFilesResponseBodyFileList) *ListDNAFilesResponseBody {
	s.FileList = v
	return s
}

func (s *ListDNAFilesResponseBody) SetNextPageToken(v string) *ListDNAFilesResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListDNAFilesResponseBody) SetRequestId(v string) *ListDNAFilesResponseBody {
	s.RequestId = &v
	return s
}

type ListDNAFilesResponseBodyFileList struct {
	InputFile *ListDNAFilesResponseBodyFileListInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	PrimaryKey *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
}

func (s ListDNAFilesResponseBodyFileList) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponseBodyFileList) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponseBodyFileList) SetInputFile(v *ListDNAFilesResponseBodyFileListInputFile) *ListDNAFilesResponseBodyFileList {
	s.InputFile = v
	return s
}

func (s *ListDNAFilesResponseBodyFileList) SetPrimaryKey(v string) *ListDNAFilesResponseBodyFileList {
	s.PrimaryKey = &v
	return s
}

type ListDNAFilesResponseBodyFileListInputFile struct {
	// example:
	//
	// example-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-beijing
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// example-****.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListDNAFilesResponseBodyFileListInputFile) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponseBodyFileListInputFile) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponseBodyFileListInputFile) SetBucket(v string) *ListDNAFilesResponseBodyFileListInputFile {
	s.Bucket = &v
	return s
}

func (s *ListDNAFilesResponseBodyFileListInputFile) SetLocation(v string) *ListDNAFilesResponseBodyFileListInputFile {
	s.Location = &v
	return s
}

func (s *ListDNAFilesResponseBodyFileListInputFile) SetObject(v string) *ListDNAFilesResponseBodyFileListInputFile {
	s.Object = &v
	return s
}

type ListDNAFilesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDNAFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDNAFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDNAFilesResponse) GoString() string {
	return s.String()
}

func (s *ListDNAFilesResponse) SetHeaders(v map[string]*string) *ListDNAFilesResponse {
	s.Headers = v
	return s
}

func (s *ListDNAFilesResponse) SetStatusCode(v int32) *ListDNAFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDNAFilesResponse) SetBody(v *ListDNAFilesResponseBody) *ListDNAFilesResponse {
	s.Body = v
	return s
}

type ListDynamicImageJobsRequest struct {
	// example:
	//
	// 2022-07-14T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// cdb3e74639973036bc84
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2022-07-12T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDynamicImageJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsRequest) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsRequest) SetEndOfCreateTime(v string) *ListDynamicImageJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetJobId(v string) *ListDynamicImageJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetNextPageToken(v string) *ListDynamicImageJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetOrderBy(v string) *ListDynamicImageJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetPageSize(v int32) *ListDynamicImageJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetStartOfCreateTime(v string) *ListDynamicImageJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetStatus(v string) *ListDynamicImageJobsRequest {
	s.Status = &v
	return s
}

type ListDynamicImageJobsResponseBody struct {
	Jobs []*ListDynamicImageJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDynamicImageJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBody) SetJobs(v []*ListDynamicImageJobsResponseBodyJobs) *ListDynamicImageJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListDynamicImageJobsResponseBody) SetNextPageToken(v string) *ListDynamicImageJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListDynamicImageJobsResponseBody) SetRequestId(v string) *ListDynamicImageJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobs struct {
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string                                    `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *ListDynamicImageJobsResponseBodyJobsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// SampleJob
	Name   *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Output *ListDynamicImageJobsResponseBodyJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetCreateTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetFinishTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetInput(v *ListDynamicImageJobsResponseBodyJobsInput) *ListDynamicImageJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetJobId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetModifiedTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetName(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetOutput(v *ListDynamicImageJobsResponseBodyJobsOutput) *ListDynamicImageJobsResponseBodyJobs {
	s.Output = v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetPipelineId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.PipelineId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetStatus(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetSubmitTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetTemplateId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.TemplateId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetTriggerSource(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobsInput struct {
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobsInput) SetMedia(v string) *ListDynamicImageJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobsInput) SetType(v string) *ListDynamicImageJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobsOutput struct {
	// example:
	//
	// ****cdb3e74639973036bc84****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobsOutput) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobsOutput) SetMedia(v string) *ListDynamicImageJobsResponseBodyJobsOutput {
	s.Media = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobsOutput) SetType(v string) *ListDynamicImageJobsResponseBodyJobsOutput {
	s.Type = &v
	return s
}

type ListDynamicImageJobsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListDynamicImageJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListDynamicImageJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponse) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponse) SetHeaders(v map[string]*string) *ListDynamicImageJobsResponse {
	s.Headers = v
	return s
}

func (s *ListDynamicImageJobsResponse) SetStatusCode(v int32) *ListDynamicImageJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDynamicImageJobsResponse) SetBody(v *ListDynamicImageJobsResponseBody) *ListDynamicImageJobsResponse {
	s.Body = v
	return s
}

type ListLiveRecordFilesRequest struct {
	// example:
	//
	// 2017-12-22T08:00:00Z
	EndTime *string   `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	JobIds  []*string `json:"JobIds,omitempty" xml:"JobIds,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// m3u8
	RecordFormat *string `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty"`
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 2017-12-21T08:00:01Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLiveRecordFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesRequest) SetEndTime(v string) *ListLiveRecordFilesRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetJobIds(v []*string) *ListLiveRecordFilesRequest {
	s.JobIds = v
	return s
}

func (s *ListLiveRecordFilesRequest) SetPageNo(v int32) *ListLiveRecordFilesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetPageSize(v int32) *ListLiveRecordFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetRecordFormat(v string) *ListLiveRecordFilesRequest {
	s.RecordFormat = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetSortBy(v string) *ListLiveRecordFilesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordFilesRequest) SetStartTime(v string) *ListLiveRecordFilesRequest {
	s.StartTime = &v
	return s
}

type ListLiveRecordFilesResponseBody struct {
	Files []*ListLiveRecordFilesResponseBodyFiles `json:"Files,omitempty" xml:"Files,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// DE24625C-7C0F-4020-8448-****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 100
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveRecordFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesResponseBody) SetFiles(v []*ListLiveRecordFilesResponseBodyFiles) *ListLiveRecordFilesResponseBody {
	s.Files = v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetPageNo(v int64) *ListLiveRecordFilesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetPageSize(v string) *ListLiveRecordFilesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetRequestId(v string) *ListLiveRecordFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetSortBy(v string) *ListLiveRecordFilesResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordFilesResponseBody) SetTotalCount(v string) *ListLiveRecordFilesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveRecordFilesResponseBodyFiles struct {
	// example:
	//
	// 2016-05-27T09:40:56Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 100.0
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2015-12-01T07:36:10Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// example:
	//
	// 640
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// c4d7f0a4-b506-43f9-8de3-07732c3f****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// LiveRecordJob***
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// example:
	//
	// c4d7f0a4-b506-43f9-8de3-07732c3f****
	RecordId *string `json:"RecordId,omitempty" xml:"RecordId,omitempty"`
	// example:
	//
	// { "Type": "oss", "Endpoint":"oss-cn-shanghai.aliyuncs.com", "Bucket": "test-bucket" }
	RecordOutput *string `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty"`
	// example:
	//
	// http://****/atestObject****.m3u8
	RecordUrl *string `json:"RecordUrl,omitempty" xml:"RecordUrl,omitempty"`
	// example:
	//
	// 2015-12-01T07:36:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// LiveStream***
	StreamUrl *string `json:"StreamUrl,omitempty" xml:"StreamUrl,omitempty"`
	// example:
	//
	// 480
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListLiveRecordFilesResponseBodyFiles) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesResponseBodyFiles) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetCreateTime(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.CreateTime = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetDuration(v float32) *ListLiveRecordFilesResponseBodyFiles {
	s.Duration = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetEndTime(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.EndTime = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetFormat(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.Format = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetHeight(v int32) *ListLiveRecordFilesResponseBodyFiles {
	s.Height = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetJobId(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.JobId = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetJobName(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.JobName = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetRecordId(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.RecordId = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetRecordOutput(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.RecordOutput = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetRecordUrl(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.RecordUrl = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetStartTime(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.StartTime = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetStreamUrl(v string) *ListLiveRecordFilesResponseBodyFiles {
	s.StreamUrl = &v
	return s
}

func (s *ListLiveRecordFilesResponseBodyFiles) SetWidth(v int32) *ListLiveRecordFilesResponseBodyFiles {
	s.Width = &v
	return s
}

type ListLiveRecordFilesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveRecordFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveRecordFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordFilesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRecordFilesResponse) SetHeaders(v map[string]*string) *ListLiveRecordFilesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRecordFilesResponse) SetStatusCode(v int32) *ListLiveRecordFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRecordFilesResponse) SetBody(v *ListLiveRecordFilesResponseBody) *ListLiveRecordFilesResponse {
	s.Body = v
	return s
}

type ListLiveRecordJobsRequest struct {
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-11T08:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-15T08:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// started
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListLiveRecordJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsRequest) SetEndTime(v string) *ListLiveRecordJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetKeyword(v string) *ListLiveRecordJobsRequest {
	s.Keyword = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetPageNo(v int64) *ListLiveRecordJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetPageSize(v int64) *ListLiveRecordJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetSortBy(v string) *ListLiveRecordJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetStartTime(v string) *ListLiveRecordJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListLiveRecordJobsRequest) SetStatus(v string) *ListLiveRecordJobsRequest {
	s.Status = &v
	return s
}

type ListLiveRecordJobsResponseBody struct {
	LiveRecordJobs []*ListLiveRecordJobsResponseBodyLiveRecordJobs `json:"LiveRecordJobs,omitempty" xml:"LiveRecordJobs,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// A27DFFA4-F272-5563-8363-CB0BC42740BA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 180
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveRecordJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBody) SetLiveRecordJobs(v []*ListLiveRecordJobsResponseBodyLiveRecordJobs) *ListLiveRecordJobsResponseBody {
	s.LiveRecordJobs = v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetPageNo(v int64) *ListLiveRecordJobsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetPageSize(v int64) *ListLiveRecordJobsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetRequestId(v string) *ListLiveRecordJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetSortBy(v string) *ListLiveRecordJobsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordJobsResponseBody) SetTotalCount(v int64) *ListLiveRecordJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveRecordJobsResponseBodyLiveRecordJobs struct {
	// 代表创建时间的资源属性字段
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 代表资源名称的资源属性字段
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 回调地址
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl    *string                                                   `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	RecordOutput *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty" type:"Struct"`
	// example:
	//
	// paused
	Status      *string                                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInput *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// 录制模板ID
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// test template
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobs) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobs) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetCreateTime(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.CreateTime = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetJobId(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.JobId = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetName(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.Name = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetNotifyUrl(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.NotifyUrl = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetRecordOutput(v *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.RecordOutput = v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetStatus(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.Status = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetStreamInput(v *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.StreamInput = v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetTemplateId(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.TemplateId = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobs) SetTemplateName(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobs {
	s.TemplateName = &v
	return s
}

type ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput struct {
	// example:
	//
	// imsbucket1
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-hangzhou.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// example:
	//
	// oss
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) SetBucket(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput {
	s.Bucket = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) SetEndpoint(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput {
	s.Endpoint = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput) SetType(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsRecordOutput {
	s.Type = &v
	return s
}

type ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput struct {
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://example-live.com/live/stream1
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) SetType(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput {
	s.Type = &v
	return s
}

func (s *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput) SetUrl(v string) *ListLiveRecordJobsResponseBodyLiveRecordJobsStreamInput {
	s.Url = &v
	return s
}

type ListLiveRecordJobsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveRecordJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveRecordJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordJobsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRecordJobsResponse) SetHeaders(v map[string]*string) *ListLiveRecordJobsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRecordJobsResponse) SetStatusCode(v int32) *ListLiveRecordJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRecordJobsResponse) SetBody(v *ListLiveRecordJobsResponseBody) *ListLiveRecordJobsResponse {
	s.Body = v
	return s
}

type ListLiveRecordTemplatesRequest struct {
	// example:
	//
	// test template
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// desc
	SortBy      *string   `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TemplateIds []*string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty" type:"Repeated"`
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesRequest) SetKeyword(v string) *ListLiveRecordTemplatesRequest {
	s.Keyword = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetPageNo(v int64) *ListLiveRecordTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetPageSize(v int64) *ListLiveRecordTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetSortBy(v string) *ListLiveRecordTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetTemplateIds(v []*string) *ListLiveRecordTemplatesRequest {
	s.TemplateIds = v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetType(v string) *ListLiveRecordTemplatesRequest {
	s.Type = &v
	return s
}

type ListLiveRecordTemplatesResponseBody struct {
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize           *int64                                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RecordTemplateList []*ListLiveRecordTemplatesResponseBodyRecordTemplateList `json:"RecordTemplateList,omitempty" xml:"RecordTemplateList,omitempty" type:"Repeated"`
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 5
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBody) SetPageNo(v int64) *ListLiveRecordTemplatesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetPageSize(v int64) *ListLiveRecordTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetRecordTemplateList(v []*ListLiveRecordTemplatesResponseBodyRecordTemplateList) *ListLiveRecordTemplatesResponseBody {
	s.RecordTemplateList = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetRequestId(v string) *ListLiveRecordTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetSortBy(v string) *ListLiveRecordTemplatesResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetTotalCount(v int64) *ListLiveRecordTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveRecordTemplatesResponseBodyRecordTemplateList struct {
	// 代表创建时间的资源属性字段
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 最后修改时间
	//
	// Use the UTC time format: yyyy-MM-ddTHH:mmZ
	//
	// example:
	//
	// 2022-07-20T03:26:36Z
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// 代表资源名称的资源属性字段
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	RecordFormatList []*ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList `json:"RecordFormatList,omitempty" xml:"RecordFormatList,omitempty" type:"Repeated"`
	// 代表资源一级ID的资源属性字段
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 代表资源名称的资源属性字段
	//
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateList) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetCreateTime(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetLastModified(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.LastModified = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetName(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.Name = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetRecordFormatList(v []*ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.RecordFormatList = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetTemplateId(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetType(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.Type = &v
	return s
}

type ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList struct {
	// example:
	//
	// 21600
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// 格式
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// 切片时长
	//
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// 切片Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetCycleDuration(v int32) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.CycleDuration = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetFormat(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.Format = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetOssObjectPrefix(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.OssObjectPrefix = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetSliceDuration(v int32) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.SliceDuration = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetSliceOssObjectPrefix(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.SliceOssObjectPrefix = &v
	return s
}

type ListLiveRecordTemplatesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveRecordTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveRecordTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveRecordTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRecordTemplatesResponse) SetStatusCode(v int32) *ListLiveRecordTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRecordTemplatesResponse) SetBody(v *ListLiveRecordTemplatesResponseBody) *ListLiveRecordTemplatesResponse {
	s.Body = v
	return s
}

type ListLiveSnapshotFilesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2022-02-02T23:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 10
	Limit *int32 `json:"Limit,omitempty" xml:"Limit,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2022-02-02T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s ListLiveSnapshotFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesRequest) SetEndTime(v string) *ListLiveSnapshotFilesRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetJobId(v string) *ListLiveSnapshotFilesRequest {
	s.JobId = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetLimit(v int32) *ListLiveSnapshotFilesRequest {
	s.Limit = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetSortBy(v string) *ListLiveSnapshotFilesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotFilesRequest) SetStartTime(v string) *ListLiveSnapshotFilesRequest {
	s.StartTime = &v
	return s
}

type ListLiveSnapshotFilesResponseBody struct {
	FileList []*ListLiveSnapshotFilesResponseBodyFileList `json:"FileList,omitempty" xml:"FileList,omitempty" type:"Repeated"`
	// example:
	//
	// 2022-02-02T22:22:22Z
	NextStartTime *string `json:"NextStartTime,omitempty" xml:"NextStartTime,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListLiveSnapshotFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesResponseBody) SetFileList(v []*ListLiveSnapshotFilesResponseBodyFileList) *ListLiveSnapshotFilesResponseBody {
	s.FileList = v
	return s
}

func (s *ListLiveSnapshotFilesResponseBody) SetNextStartTime(v string) *ListLiveSnapshotFilesResponseBody {
	s.NextStartTime = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBody) SetRequestId(v string) *ListLiveSnapshotFilesResponseBody {
	s.RequestId = &v
	return s
}

type ListLiveSnapshotFilesResponseBodyFileList struct {
	// example:
	//
	// 2022-02-02T22:22:22Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1619503516000
	CreateTimestamp *int64 `json:"CreateTimestamp,omitempty" xml:"CreateTimestamp,omitempty"`
	// example:
	//
	// true
	IsOverlay *bool `json:"IsOverlay,omitempty" xml:"IsOverlay,omitempty"`
	// OSS bucket。
	//
	// example:
	//
	// testbucket
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	OssEndpoint *string `json:"OssEndpoint,omitempty" xml:"OssEndpoint,omitempty"`
	// example:
	//
	// snapshot/****a046-263c-3560-978a-fb287782****/1660638613798.jpg
	OssObject *string `json:"OssObject,omitempty" xml:"OssObject,omitempty"`
}

func (s ListLiveSnapshotFilesResponseBodyFileList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesResponseBodyFileList) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetCreateTime(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetCreateTimestamp(v int64) *ListLiveSnapshotFilesResponseBodyFileList {
	s.CreateTimestamp = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetIsOverlay(v bool) *ListLiveSnapshotFilesResponseBodyFileList {
	s.IsOverlay = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetOssBucket(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.OssBucket = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetOssEndpoint(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.OssEndpoint = &v
	return s
}

func (s *ListLiveSnapshotFilesResponseBodyFileList) SetOssObject(v string) *ListLiveSnapshotFilesResponseBodyFileList {
	s.OssObject = &v
	return s
}

type ListLiveSnapshotFilesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveSnapshotFilesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveSnapshotFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotFilesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotFilesResponse) SetHeaders(v map[string]*string) *ListLiveSnapshotFilesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveSnapshotFilesResponse) SetStatusCode(v int32) *ListLiveSnapshotFilesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveSnapshotFilesResponse) SetBody(v *ListLiveSnapshotFilesResponseBody) *ListLiveSnapshotFilesResponse {
	s.Body = v
	return s
}

type ListLiveSnapshotJobsRequest struct {
	// example:
	//
	// 2022-02-02T23:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 2022-02-02T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListLiveSnapshotJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsRequest) SetEndTime(v string) *ListLiveSnapshotJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetPageNo(v int32) *ListLiveSnapshotJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetPageSize(v int32) *ListLiveSnapshotJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetSearchKeyWord(v string) *ListLiveSnapshotJobsRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetSortBy(v string) *ListLiveSnapshotJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetStartTime(v string) *ListLiveSnapshotJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListLiveSnapshotJobsRequest) SetStatus(v string) *ListLiveSnapshotJobsRequest {
	s.Status = &v
	return s
}

type ListLiveSnapshotJobsResponseBody struct {
	JobList []*ListLiveSnapshotJobsResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveSnapshotJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponseBody) SetJobList(v []*ListLiveSnapshotJobsResponseBodyJobList) *ListLiveSnapshotJobsResponseBody {
	s.JobList = v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetPageNo(v int32) *ListLiveSnapshotJobsResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetPageSize(v int32) *ListLiveSnapshotJobsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetRequestId(v string) *ListLiveSnapshotJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetSortBy(v string) *ListLiveSnapshotJobsResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBody) SetTotalCount(v int64) *ListLiveSnapshotJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveSnapshotJobsResponseBodyJobList struct {
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId          *string                                                `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName        *string                                                `json:"JobName,omitempty" xml:"JobName,omitempty"`
	SnapshotOutput *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty" type:"Struct"`
	// example:
	//
	// started
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s ListLiveSnapshotJobsResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetCreateTime(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetJobId(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.JobId = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetJobName(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.JobName = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetSnapshotOutput(v *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) *ListLiveSnapshotJobsResponseBodyJobList {
	s.SnapshotOutput = v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetStatus(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.Status = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetTemplateId(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetTemplateName(v string) *ListLiveSnapshotJobsResponseBodyJobList {
	s.TemplateName = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobList) SetTimeInterval(v int32) *ListLiveSnapshotJobsResponseBodyJobList {
	s.TimeInterval = &v
	return s
}

type ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput struct {
	// example:
	//
	// testbucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// example:
	//
	// oss
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) SetBucket(v string) *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput {
	s.Bucket = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) SetEndpoint(v string) *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput {
	s.Endpoint = &v
	return s
}

func (s *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput) SetStorageType(v string) *ListLiveSnapshotJobsResponseBodyJobListSnapshotOutput {
	s.StorageType = &v
	return s
}

type ListLiveSnapshotJobsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveSnapshotJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveSnapshotJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotJobsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotJobsResponse) SetHeaders(v map[string]*string) *ListLiveSnapshotJobsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveSnapshotJobsResponse) SetStatusCode(v int32) *ListLiveSnapshotJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveSnapshotJobsResponse) SetBody(v *ListLiveSnapshotJobsResponseBody) *ListLiveSnapshotJobsResponse {
	s.Body = v
	return s
}

type ListLiveSnapshotTemplatesRequest struct {
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	SearchKeyWord *string `json:"SearchKeyWord,omitempty" xml:"SearchKeyWord,omitempty"`
	// example:
	//
	// desc
	SortBy      *string   `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TemplateIds []*string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty" type:"Repeated"`
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveSnapshotTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesRequest) SetPageNo(v int32) *ListLiveSnapshotTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetPageSize(v int32) *ListLiveSnapshotTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetSearchKeyWord(v string) *ListLiveSnapshotTemplatesRequest {
	s.SearchKeyWord = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetSortBy(v string) *ListLiveSnapshotTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetTemplateIds(v []*string) *ListLiveSnapshotTemplatesRequest {
	s.TemplateIds = v
	return s
}

func (s *ListLiveSnapshotTemplatesRequest) SetType(v string) *ListLiveSnapshotTemplatesRequest {
	s.Type = &v
	return s
}

type ListLiveSnapshotTemplatesResponseBody struct {
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// desc
	SortBy       *string                                              `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TemplateList []*ListLiveSnapshotTemplatesResponseBodyTemplateList `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveSnapshotTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetPageNo(v int32) *ListLiveSnapshotTemplatesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetPageSize(v int32) *ListLiveSnapshotTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetRequestId(v string) *ListLiveSnapshotTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetSortBy(v string) *ListLiveSnapshotTemplatesResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetTemplateList(v []*ListLiveSnapshotTemplatesResponseBodyTemplateList) *ListLiveSnapshotTemplatesResponseBody {
	s.TemplateList = v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBody) SetTotalCount(v int64) *ListLiveSnapshotTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveSnapshotTemplatesResponseBodyTemplateList struct {
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 10
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	// example:
	//
	// custom
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveSnapshotTemplatesResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetCreateTime(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetTemplateId(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetTemplateName(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetTimeInterval(v int32) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.TimeInterval = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponseBodyTemplateList) SetType(v string) *ListLiveSnapshotTemplatesResponseBodyTemplateList {
	s.Type = &v
	return s
}

type ListLiveSnapshotTemplatesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveSnapshotTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveSnapshotTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveSnapshotTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveSnapshotTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveSnapshotTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveSnapshotTemplatesResponse) SetStatusCode(v int32) *ListLiveSnapshotTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveSnapshotTemplatesResponse) SetBody(v *ListLiveSnapshotTemplatesResponseBody) *ListLiveSnapshotTemplatesResponse {
	s.Body = v
	return s
}

type ListLiveTranscodeJobsRequest struct {
	// example:
	//
	// 24ecbb5c-4f98-4194-9400-f17102e27fc5
	KeyWord *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// example:
	//
	// 1
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsRequest) SetKeyWord(v string) *ListLiveTranscodeJobsRequest {
	s.KeyWord = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetPageNo(v int32) *ListLiveTranscodeJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetPageSize(v int32) *ListLiveTranscodeJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetSortBy(v string) *ListLiveTranscodeJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetStartMode(v int32) *ListLiveTranscodeJobsRequest {
	s.StartMode = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetStatus(v int32) *ListLiveTranscodeJobsRequest {
	s.Status = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetType(v string) *ListLiveTranscodeJobsRequest {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponseBody struct {
	JobList []*ListLiveTranscodeJobsResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Repeated"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBody) SetJobList(v []*ListLiveTranscodeJobsResponseBodyJobList) *ListLiveTranscodeJobsResponseBody {
	s.JobList = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBody) SetRequestId(v string) *ListLiveTranscodeJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBody) SetTotalCount(v int32) *ListLiveTranscodeJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobList struct {
	// example:
	//
	// 2022-07-20T02:48:58Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// mytask
	Name         *string                                               `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputStream *ListLiveTranscodeJobsResponseBodyJobListOutputStream `json:"OutputStream,omitempty" xml:"OutputStream,omitempty" type:"Struct"`
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// example:
	//
	// 1
	Status      *int32                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInput *ListLiveTranscodeJobsResponseBodyJobListStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// normal
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetCreateTime(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetJobId(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.JobId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetName(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.Name = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetOutputStream(v *ListLiveTranscodeJobsResponseBodyJobListOutputStream) *ListLiveTranscodeJobsResponseBodyJobList {
	s.OutputStream = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStartMode(v int32) *ListLiveTranscodeJobsResponseBodyJobList {
	s.StartMode = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStatus(v int32) *ListLiveTranscodeJobsResponseBodyJobList {
	s.Status = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStreamInput(v *ListLiveTranscodeJobsResponseBodyJobListStreamInput) *ListLiveTranscodeJobsResponseBodyJobList {
	s.StreamInput = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateId(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateName(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateName = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateType(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateType = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListOutputStream struct {
	StreamInfos []*ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStream) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStream) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStream) SetStreamInfos(v []*ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) *ListLiveTranscodeJobsResponseBodyJobListOutputStream {
	s.StreamInfos = v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos struct {
	// example:
	//
	// rtmp://mydomain/app/mytranscode1
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) SetOutputUrl(v string) *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos {
	s.OutputUrl = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) SetType(v string) *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListStreamInput struct {
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListStreamInput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListStreamInput) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListStreamInput) SetInputUrl(v string) *ListLiveTranscodeJobsResponseBodyJobListStreamInput {
	s.InputUrl = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobListStreamInput) SetType(v string) *ListLiveTranscodeJobsResponseBodyJobListStreamInput {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveTranscodeJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveTranscodeJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponse) SetHeaders(v map[string]*string) *ListLiveTranscodeJobsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveTranscodeJobsResponse) SetStatusCode(v int32) *ListLiveTranscodeJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveTranscodeJobsResponse) SetBody(v *ListLiveTranscodeJobsResponseBody) *ListLiveTranscodeJobsResponse {
	s.Body = v
	return s
}

type ListLiveTranscodeTemplatesRequest struct {
	// example:
	//
	// customized
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// my_template
	KeyWord *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// H.264
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
}

func (s ListLiveTranscodeTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesRequest) SetCategory(v string) *ListLiveTranscodeTemplatesRequest {
	s.Category = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetKeyWord(v string) *ListLiveTranscodeTemplatesRequest {
	s.KeyWord = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetPageNo(v int32) *ListLiveTranscodeTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetPageSize(v int32) *ListLiveTranscodeTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetSortBy(v string) *ListLiveTranscodeTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetType(v string) *ListLiveTranscodeTemplatesRequest {
	s.Type = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetVideoCodec(v string) *ListLiveTranscodeTemplatesRequest {
	s.VideoCodec = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId           *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateContentList []*ListLiveTranscodeTemplatesResponseBodyTemplateContentList `json:"TemplateContentList,omitempty" xml:"TemplateContentList,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetRequestId(v string) *ListLiveTranscodeTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetTemplateContentList(v []*ListLiveTranscodeTemplatesResponseBodyTemplateContentList) *ListLiveTranscodeTemplatesResponseBody {
	s.TemplateContentList = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetTotalCount(v int32) *ListLiveTranscodeTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentList struct {
	// example:
	//
	// system
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 2022-07-20T03:26:36Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// my_template
	Name           *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfig *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// example:
	//
	// 9b1571b513cb44f7a1ba6ae561ff46f7
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// normal
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentList) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetCategory(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Category = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetCreateTime(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetName(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Name = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetTemplateConfig(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.TemplateConfig = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetTemplateId(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetType(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Type = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig struct {
	AudioParams *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	VideoParams *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) SetAudioParams(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) SetVideoParams(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig {
	s.VideoParams = v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams struct {
	// example:
	//
	// 1000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetBitrate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetChannels(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetCodec(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetProfile(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetSamplerate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams struct {
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 30
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 1280
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 3
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 720
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetBitrate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetCodec(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetFps(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetGop(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetHeight(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetProfile(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetWidth(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type ListLiveTranscodeTemplatesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListLiveTranscodeTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveTranscodeTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponse) SetStatusCode(v int32) *ListLiveTranscodeTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponse) SetBody(v *ListLiveTranscodeTemplatesResponseBody) *ListLiveTranscodeTemplatesResponse {
	s.Body = v
	return s
}

type ListMediaBasicInfosRequest struct {
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// 2020-12-20T13:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// true
	IncludeFileBasicInfo *bool `json:"IncludeFileBasicInfo,omitempty" xml:"IncludeFileBasicInfo,omitempty"`
	// example:
	//
	// 5
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// pSa1SQ0wCe5pzVrQ6mWZEw==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// 2020-12-20T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaBasicInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosRequest) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosRequest) SetBusinessType(v string) *ListMediaBasicInfosRequest {
	s.BusinessType = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetEndTime(v string) *ListMediaBasicInfosRequest {
	s.EndTime = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetIncludeFileBasicInfo(v bool) *ListMediaBasicInfosRequest {
	s.IncludeFileBasicInfo = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMaxResults(v int32) *ListMediaBasicInfosRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMediaId(v string) *ListMediaBasicInfosRequest {
	s.MediaId = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMediaType(v string) *ListMediaBasicInfosRequest {
	s.MediaType = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetNextToken(v string) *ListMediaBasicInfosRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetSortBy(v string) *ListMediaBasicInfosRequest {
	s.SortBy = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetSource(v string) *ListMediaBasicInfosRequest {
	s.Source = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetStartTime(v string) *ListMediaBasicInfosRequest {
	s.StartTime = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetStatus(v string) *ListMediaBasicInfosRequest {
	s.Status = &v
	return s
}

type ListMediaBasicInfosResponseBody struct {
	// example:
	//
	// 2
	MaxResults *int32                                       `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	MediaInfos []*ListMediaBasicInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// ******B7-7F87-4792-BFE9-63CD21******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 4
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMediaBasicInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBody) SetMaxResults(v int32) *ListMediaBasicInfosResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetMediaInfos(v []*ListMediaBasicInfosResponseBodyMediaInfos) *ListMediaBasicInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetNextToken(v string) *ListMediaBasicInfosResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetRequestId(v string) *ListMediaBasicInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetTotalCount(v int64) *ListMediaBasicInfosResponseBody {
	s.TotalCount = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*ListMediaBasicInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetFileInfoList(v []*ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetMediaId(v string) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosFileInfoList struct {
	FileBasicInfo *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// example:
	//
	// 1912.13
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:04Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 60.00000
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 14340962
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example2.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetCreateTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetModifiedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo struct {
	// example:
	//
	// ICE
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// 3049
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:04Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:07Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// tags,tags2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:07Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 123-123
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// example:
	//
	// general
	UploadSource *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBiz(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCateId(v int64) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetReferenceId(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ReferenceId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUploadSource(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type ListMediaBasicInfosResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaBasicInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaBasicInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponse) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponse) SetHeaders(v map[string]*string) *ListMediaBasicInfosResponse {
	s.Headers = v
	return s
}

func (s *ListMediaBasicInfosResponse) SetStatusCode(v int32) *ListMediaBasicInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaBasicInfosResponse) SetBody(v *ListMediaBasicInfosResponseBody) *ListMediaBasicInfosResponse {
	s.Body = v
	return s
}

type ListMediaInfoJobsRequest struct {
	// example:
	//
	// 2022-07-15T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb11cbe
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2022-07-01T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaInfoJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsRequest) SetEndOfCreateTime(v string) *ListMediaInfoJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetJobId(v string) *ListMediaInfoJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetNextPageToken(v string) *ListMediaInfoJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetOrderBy(v string) *ListMediaInfoJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetPageSize(v int32) *ListMediaInfoJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetStartOfCreateTime(v string) *ListMediaInfoJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetStatus(v string) *ListMediaInfoJobsRequest {
	s.Status = &v
	return s
}

type ListMediaInfoJobsResponseBody struct {
	Jobs []*ListMediaInfoJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// example:
	//
	// 019daf5780f74831b0e1a767c9f1c178
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaInfoJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBody) SetJobs(v []*ListMediaInfoJobsResponseBodyJobs) *ListMediaInfoJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListMediaInfoJobsResponseBody) SetNextPageToken(v string) *ListMediaInfoJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaInfoJobsResponseBody) SetRequestId(v string) *ListMediaInfoJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobs struct {
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                 `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *ListMediaInfoJobsResponseBodyJobsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId             *string                                             `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaInfoProperty *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *ListMediaInfoJobsResponseBodyJobsScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Init
	Status           *string                `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetAsync(v bool) *ListMediaInfoJobsResponseBodyJobs {
	s.Async = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetFinishTime(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetInput(v *ListMediaInfoJobsResponseBodyJobsInput) *ListMediaInfoJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetJobId(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetMediaInfoProperty(v *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) *ListMediaInfoJobsResponseBodyJobs {
	s.MediaInfoProperty = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetName(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetRequestId(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.RequestId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetScheduleConfig(v *ListMediaInfoJobsResponseBodyJobsScheduleConfig) *ListMediaInfoJobsResponseBodyJobs {
	s.ScheduleConfig = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetStatus(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetSubmitResultJson(v map[string]interface{}) *ListMediaInfoJobsResponseBodyJobs {
	s.SubmitResultJson = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetSubmitTime(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetTriggerSource(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetUserData(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.UserData = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsInput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsInput) SetMedia(v string) *ListMediaInfoJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsInput) SetType(v string) *ListMediaInfoJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoProperty struct {
	AudioStreamInfoList []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo       *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo         `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	VideoStreamInfoList []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetAudioStreamInfoList(v []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetFileBasicInfo(v *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetVideoStreamInfoList(v []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList struct {
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo struct {
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 4765337007f571edbfdf81848c016303
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileType(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetHeight(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetRegion(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetWidth(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList struct {
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsScheduleConfig) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsScheduleConfig) SetPipelineId(v string) *ListMediaInfoJobsResponseBodyJobsScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsScheduleConfig) SetPriority(v int32) *ListMediaInfoJobsResponseBodyJobsScheduleConfig {
	s.Priority = &v
	return s
}

type ListMediaInfoJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaInfoJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaInfoJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponse) SetHeaders(v map[string]*string) *ListMediaInfoJobsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaInfoJobsResponse) SetStatusCode(v int32) *ListMediaInfoJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaInfoJobsResponse) SetBody(v *ListMediaInfoJobsResponseBody) *ListMediaInfoJobsResponse {
	s.Body = v
	return s
}

type ListMediaMarksRequest struct {
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
}

func (s ListMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *ListMediaMarksRequest) SetMediaId(v string) *ListMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *ListMediaMarksRequest) SetMediaMarkIds(v string) *ListMediaMarksRequest {
	s.MediaMarkIds = &v
	return s
}

type ListMediaMarksResponseBody struct {
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId    *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaMarksResponseBody) SetMediaId(v string) *ListMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *ListMediaMarksResponseBody) SetMediaMarks(v string) *ListMediaMarksResponseBody {
	s.MediaMarks = &v
	return s
}

func (s *ListMediaMarksResponseBody) SetRequestId(v string) *ListMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaMarksResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *ListMediaMarksResponse) SetHeaders(v map[string]*string) *ListMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *ListMediaMarksResponse) SetStatusCode(v int32) *ListMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaMarksResponse) SetBody(v *ListMediaMarksResponseBody) *ListMediaMarksResponse {
	s.Body = v
	return s
}

type ListMediaProducingJobsRequest struct {
	// example:
	//
	// 2022-02-02T23:59:59Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// EditingJob
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// ******8750b54e3c976a47da6f******
	MasterJobId *string `json:"MasterJobId,omitempty" xml:"MasterJobId,omitempty"`
	// example:
	//
	// 100
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaProducingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsRequest) SetEndTime(v string) *ListMediaProducingJobsRequest {
	s.EndTime = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetJobType(v string) *ListMediaProducingJobsRequest {
	s.JobType = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetKeyword(v string) *ListMediaProducingJobsRequest {
	s.Keyword = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetMasterJobId(v string) *ListMediaProducingJobsRequest {
	s.MasterJobId = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetMaxResults(v int32) *ListMediaProducingJobsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetNextToken(v string) *ListMediaProducingJobsRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetSortBy(v string) *ListMediaProducingJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetStartTime(v string) *ListMediaProducingJobsRequest {
	s.StartTime = &v
	return s
}

func (s *ListMediaProducingJobsRequest) SetStatus(v string) *ListMediaProducingJobsRequest {
	s.Status = &v
	return s
}

type ListMediaProducingJobsResponseBody struct {
	// example:
	//
	// 100
	MaxResults            *string                                                    `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	MediaProducingJobList []*ListMediaProducingJobsResponseBodyMediaProducingJobList `json:"MediaProducingJobList,omitempty" xml:"MediaProducingJobList,omitempty" type:"Repeated"`
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaProducingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsResponseBody) SetMaxResults(v string) *ListMediaProducingJobsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaProducingJobsResponseBody) SetMediaProducingJobList(v []*ListMediaProducingJobsResponseBodyMediaProducingJobList) *ListMediaProducingJobsResponseBody {
	s.MediaProducingJobList = v
	return s
}

func (s *ListMediaProducingJobsResponseBody) SetNextToken(v string) *ListMediaProducingJobsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaProducingJobsResponseBody) SetRequestId(v string) *ListMediaProducingJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaProducingJobsResponseBodyMediaProducingJobList struct {
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// Success
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 2022-03-21T16:40:30Z
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// example:
	//
	// 2022-03-21T16:40:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 15.5
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// ******8750b54e3c976a47da6f******
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0ce4ea70f52471edab61f7e7d6786302
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// http://your-bucket.oss-cn-shanghai.aliyuncs.com/your-video.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	Message  *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2022-03-21T16:41:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// ******faa3b542f5a6135217e3******
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// Sucess
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// cb786a39c5d44cecb23d8c864facffc1
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	UserData   *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaProducingJobsResponseBodyMediaProducingJobList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsResponseBodyMediaProducingJobList) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetClipsParam(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.ClipsParam = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetCode(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Code = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetCompleteTime(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.CompleteTime = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetCreateTime(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.CreateTime = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetDuration(v float32) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Duration = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetJobId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.JobId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetMediaId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.MediaId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetMediaURL(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.MediaURL = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetMessage(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Message = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetModifiedTime(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetProjectId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.ProjectId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetStatus(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.Status = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetTemplateId(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.TemplateId = &v
	return s
}

func (s *ListMediaProducingJobsResponseBodyMediaProducingJobList) SetUserData(v string) *ListMediaProducingJobsResponseBodyMediaProducingJobList {
	s.UserData = &v
	return s
}

type ListMediaProducingJobsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListMediaProducingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListMediaProducingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaProducingJobsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaProducingJobsResponse) SetHeaders(v map[string]*string) *ListMediaProducingJobsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaProducingJobsResponse) SetStatusCode(v int32) *ListMediaProducingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaProducingJobsResponse) SetBody(v *ListMediaProducingJobsResponseBody) *ListMediaProducingJobsResponse {
	s.Body = v
	return s
}

type ListPackageJobsRequest struct {
	// example:
	//
	// 2022-07-15T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb11cbe
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2022-07-01T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPackageJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsRequest) GoString() string {
	return s.String()
}

func (s *ListPackageJobsRequest) SetEndOfCreateTime(v string) *ListPackageJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListPackageJobsRequest) SetJobId(v string) *ListPackageJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListPackageJobsRequest) SetNextPageToken(v string) *ListPackageJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListPackageJobsRequest) SetOrderBy(v string) *ListPackageJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListPackageJobsRequest) SetPageSize(v int32) *ListPackageJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListPackageJobsRequest) SetStartOfCreateTime(v string) *ListPackageJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListPackageJobsRequest) SetStatus(v string) *ListPackageJobsRequest {
	s.Status = &v
	return s
}

type ListPackageJobsResponseBody struct {
	PackageJobList *ListPackageJobsResponseBodyPackageJobList `json:"PackageJobList,omitempty" xml:"PackageJobList,omitempty" type:"Struct"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPackageJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBody) SetPackageJobList(v *ListPackageJobsResponseBodyPackageJobList) *ListPackageJobsResponseBody {
	s.PackageJobList = v
	return s
}

func (s *ListPackageJobsResponseBody) SetRequestId(v string) *ListPackageJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListPackageJobsResponseBodyPackageJobList struct {
	// example:
	//
	// 019daf5780f74831b0e1a767c9f1c178
	NextPageToken *string                                                 `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	PackageJobs   []*ListPackageJobsResponseBodyPackageJobListPackageJobs `json:"PackageJobs,omitempty" xml:"PackageJobs,omitempty" type:"Repeated"`
}

func (s ListPackageJobsResponseBodyPackageJobList) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobList) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobList) SetNextPageToken(v string) *ListPackageJobsResponseBodyPackageJobList {
	s.NextPageToken = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobList) SetPackageJobs(v []*ListPackageJobsResponseBodyPackageJobListPackageJobs) *ListPackageJobsResponseBodyPackageJobList {
	s.PackageJobs = v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobs struct {
	// example:
	//
	// InvalidParameter
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 2022-07-07T14:00:32Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-07T15:00:32Z
	FinishTime *string                                                       `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Inputs     []*ListPackageJobsResponseBodyPackageJobListPackageJobsInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb11cbe
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Resource content bad.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 2022-07-07T15:00:32Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// job-name
	Name   *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Output *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// 5b40833e4c3e4d4e95a866abb9a42510
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-07-07T14:00:32Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobs) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobs) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetCode(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Code = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetCreateTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.CreateTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetFinishTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.FinishTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetInputs(v []*ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Inputs = v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetJobId(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.JobId = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetMessage(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Message = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetModifiedTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetName(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Name = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetOutput(v *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Output = v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetPipelineId(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.PipelineId = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetPriority(v int32) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Priority = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetStatus(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.Status = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetSubmitTime(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetTriggerSource(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobs) SetUserData(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobs {
	s.UserData = &v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobsInputs struct {
	Input *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsInputs) SetInput(v *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) *ListPackageJobsResponseBodyPackageJobListPackageJobsInputs {
	s.Input = v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) SetMedia(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput {
	s.Media = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput) SetType(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsInputsInput {
	s.Type = &v
	return s
}

type ListPackageJobsResponseBodyPackageJobListPackageJobsOutput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) SetMedia(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput {
	s.Media = &v
	return s
}

func (s *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput) SetType(v string) *ListPackageJobsResponseBodyPackageJobListPackageJobsOutput {
	s.Type = &v
	return s
}

type ListPackageJobsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPackageJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPackageJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPackageJobsResponse) GoString() string {
	return s.String()
}

func (s *ListPackageJobsResponse) SetHeaders(v map[string]*string) *ListPackageJobsResponse {
	s.Headers = v
	return s
}

func (s *ListPackageJobsResponse) SetStatusCode(v int32) *ListPackageJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPackageJobsResponse) SetBody(v *ListPackageJobsResponseBody) *ListPackageJobsResponse {
	s.Body = v
	return s
}

type ListPipelinesRequest struct {
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
}

func (s ListPipelinesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesRequest) GoString() string {
	return s.String()
}

func (s *ListPipelinesRequest) SetSpeed(v string) *ListPipelinesRequest {
	s.Speed = &v
	return s
}

type ListPipelinesResponseBody struct {
	PipelineList []*ListPipelinesResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPipelinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBody) SetPipelineList(v []*ListPipelinesResponseBodyPipelineList) *ListPipelinesResponseBody {
	s.PipelineList = v
	return s
}

func (s *ListPipelinesResponseBody) SetRequestId(v string) *ListPipelinesResponseBody {
	s.RequestId = &v
	return s
}

type ListPipelinesResponseBodyPipelineList struct {
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// example:
	//
	// Standard
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// example:
	//
	// Active
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPipelinesResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBodyPipelineList) SetCreateTime(v string) *ListPipelinesResponseBodyPipelineList {
	s.CreateTime = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetModifiedTime(v string) *ListPipelinesResponseBodyPipelineList {
	s.ModifiedTime = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetName(v string) *ListPipelinesResponseBodyPipelineList {
	s.Name = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetPipelineId(v string) *ListPipelinesResponseBodyPipelineList {
	s.PipelineId = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetPriority(v int32) *ListPipelinesResponseBodyPipelineList {
	s.Priority = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetSpeed(v string) *ListPipelinesResponseBodyPipelineList {
	s.Speed = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetStatus(v string) *ListPipelinesResponseBodyPipelineList {
	s.Status = &v
	return s
}

type ListPipelinesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPipelinesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPipelinesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponse) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponse) SetHeaders(v map[string]*string) *ListPipelinesResponse {
	s.Headers = v
	return s
}

func (s *ListPipelinesResponse) SetStatusCode(v int32) *ListPipelinesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelinesResponse) SetBody(v *ListPipelinesResponseBody) *ListPipelinesResponse {
	s.Body = v
	return s
}

type ListPublicMediaBasicInfosRequest struct {
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// true
	IncludeFileBasicInfo *bool `json:"IncludeFileBasicInfo,omitempty" xml:"IncludeFileBasicInfo,omitempty"`
	// example:
	//
	// 5
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// ticker-atmosphere
	MediaTagId *string `json:"MediaTagId,omitempty" xml:"MediaTagId,omitempty"`
	// example:
	//
	// pSa1SQ0wCe5pzVrQ6mWZEw==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListPublicMediaBasicInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosRequest) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosRequest) SetBusinessType(v string) *ListPublicMediaBasicInfosRequest {
	s.BusinessType = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetIncludeFileBasicInfo(v bool) *ListPublicMediaBasicInfosRequest {
	s.IncludeFileBasicInfo = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetMaxResults(v int32) *ListPublicMediaBasicInfosRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetMediaTagId(v string) *ListPublicMediaBasicInfosRequest {
	s.MediaTagId = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetNextToken(v string) *ListPublicMediaBasicInfosRequest {
	s.NextToken = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetPageNo(v int32) *ListPublicMediaBasicInfosRequest {
	s.PageNo = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetPageSize(v int32) *ListPublicMediaBasicInfosRequest {
	s.PageSize = &v
	return s
}

type ListPublicMediaBasicInfosResponseBody struct {
	// example:
	//
	// 2
	MaxResults *int32                                             `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	MediaInfos []*ListPublicMediaBasicInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 8EqYpQbZ6Eh7+Zz8DxVYoQ==
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// ******B7-7F87-4792-BFE9-63CD21******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 2
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBody) SetMaxResults(v int32) *ListPublicMediaBasicInfosResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetMediaInfos(v []*ListPublicMediaBasicInfosResponseBodyMediaInfos) *ListPublicMediaBasicInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetNextToken(v string) *ListPublicMediaBasicInfosResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetRequestId(v string) *ListPublicMediaBasicInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetTotalCount(v int64) *ListPublicMediaBasicInfosResponseBody {
	s.TotalCount = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetFileInfoList(v []*ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetMediaId(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList struct {
	FileBasicInfo *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// example:
	//
	// 270112.12
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 10.040000
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// example.mp4
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 338990717
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// video
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:04Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:04Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// sticker-daily
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2021-01-08T16:52:04Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// null
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type ListPublicMediaBasicInfosResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListPublicMediaBasicInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListPublicMediaBasicInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponse) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponse) SetHeaders(v map[string]*string) *ListPublicMediaBasicInfosResponse {
	s.Headers = v
	return s
}

func (s *ListPublicMediaBasicInfosResponse) SetStatusCode(v int32) *ListPublicMediaBasicInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponse) SetBody(v *ListPublicMediaBasicInfosResponseBody) *ListPublicMediaBasicInfosResponse {
	s.Body = v
	return s
}

type ListSmartJobsRequest struct {
	// example:
	//
	// Finished
	JobState *string `json:"JobState,omitempty" xml:"JobState,omitempty"`
	// example:
	//
	// ASR
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// example:
	//
	// 10
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// ****73f33c91-d59383e8280b****
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListSmartJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsRequest) GoString() string {
	return s.String()
}

func (s *ListSmartJobsRequest) SetJobState(v string) *ListSmartJobsRequest {
	s.JobState = &v
	return s
}

func (s *ListSmartJobsRequest) SetJobType(v string) *ListSmartJobsRequest {
	s.JobType = &v
	return s
}

func (s *ListSmartJobsRequest) SetMaxResults(v int64) *ListSmartJobsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListSmartJobsRequest) SetNextToken(v string) *ListSmartJobsRequest {
	s.NextToken = &v
	return s
}

func (s *ListSmartJobsRequest) SetPageNo(v int64) *ListSmartJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListSmartJobsRequest) SetPageSize(v int64) *ListSmartJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSmartJobsRequest) SetSortBy(v string) *ListSmartJobsRequest {
	s.SortBy = &v
	return s
}

type ListSmartJobsResponseBody struct {
	// example:
	//
	// 10
	MaxResults *string `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// CBB6BC61D08
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// example:
	//
	// ****9262E3DA-07FA-4862-FCBB6BC61D08*****
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartJobList []*ListSmartJobsResponseBodySmartJobList `json:"SmartJobList,omitempty" xml:"SmartJobList,omitempty" type:"Repeated"`
	// example:
	//
	// 110
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSmartJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBody) SetMaxResults(v string) *ListSmartJobsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetNextToken(v string) *ListSmartJobsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetRequestId(v string) *ListSmartJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetSmartJobList(v []*ListSmartJobsResponseBodySmartJobList) *ListSmartJobsResponseBody {
	s.SmartJobList = v
	return s
}

func (s *ListSmartJobsResponseBody) SetTotalCount(v string) *ListSmartJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListSmartJobsResponseBodySmartJobList struct {
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 测试描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// {"AudioConfig":{},"InputConfig":""}
	EditingConfig *string                                           `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	InputConfig   *ListSmartJobsResponseBodySmartJobListInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// Finished
	JobState *string `json:"JobState,omitempty" xml:"JobState,omitempty"`
	// example:
	//
	// ASR
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string                                            `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	OutputConfig *ListSmartJobsResponseBodySmartJobListOutputConfig `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// 1084506228******
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobList) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobList) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobList) SetCreateTime(v string) *ListSmartJobsResponseBodySmartJobList {
	s.CreateTime = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetDescription(v string) *ListSmartJobsResponseBodySmartJobList {
	s.Description = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetEditingConfig(v string) *ListSmartJobsResponseBodySmartJobList {
	s.EditingConfig = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetInputConfig(v *ListSmartJobsResponseBodySmartJobListInputConfig) *ListSmartJobsResponseBodySmartJobList {
	s.InputConfig = v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobId(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobId = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobState(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobState = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobType(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobType = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetModifiedTime(v string) *ListSmartJobsResponseBodySmartJobList {
	s.ModifiedTime = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetOutputConfig(v *ListSmartJobsResponseBodySmartJobListOutputConfig) *ListSmartJobsResponseBodySmartJobList {
	s.OutputConfig = v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetTitle(v string) *ListSmartJobsResponseBodySmartJobList {
	s.Title = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetUserData(v string) *ListSmartJobsResponseBodySmartJobList {
	s.UserData = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetUserId(v int64) *ListSmartJobsResponseBodySmartJobList {
	s.UserId = &v
	return s
}

type ListSmartJobsResponseBodySmartJobListInputConfig struct {
	// example:
	//
	// oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
	// example:
	//
	// 测试关键词
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobListInputConfig) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobListInputConfig) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobListInputConfig) SetInputFile(v string) *ListSmartJobsResponseBodySmartJobListInputConfig {
	s.InputFile = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobListInputConfig) SetKeyword(v string) *ListSmartJobsResponseBodySmartJobListInputConfig {
	s.Keyword = &v
	return s
}

type ListSmartJobsResponseBodySmartJobListOutputConfig struct {
	// OSS Bucket
	//
	// example:
	//
	// test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Object
	//
	// example:
	//
	// test-object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobListOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobListOutputConfig) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobListOutputConfig) SetBucket(v string) *ListSmartJobsResponseBodySmartJobListOutputConfig {
	s.Bucket = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobListOutputConfig) SetObject(v string) *ListSmartJobsResponseBodySmartJobListOutputConfig {
	s.Object = &v
	return s
}

type ListSmartJobsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSmartJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSmartJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponse) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponse) SetHeaders(v map[string]*string) *ListSmartJobsResponse {
	s.Headers = v
	return s
}

func (s *ListSmartJobsResponse) SetStatusCode(v int32) *ListSmartJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartJobsResponse) SetBody(v *ListSmartJobsResponseBody) *ListSmartJobsResponse {
	s.Body = v
	return s
}

type ListSmartSysAvatarModelsRequest struct {
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize   *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SdkVersion *string `json:"SdkVersion,omitempty" xml:"SdkVersion,omitempty"`
}

func (s ListSmartSysAvatarModelsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsRequest) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsRequest) SetPageNo(v int64) *ListSmartSysAvatarModelsRequest {
	s.PageNo = &v
	return s
}

func (s *ListSmartSysAvatarModelsRequest) SetPageSize(v int64) *ListSmartSysAvatarModelsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSmartSysAvatarModelsRequest) SetSdkVersion(v string) *ListSmartSysAvatarModelsRequest {
	s.SdkVersion = &v
	return s
}

type ListSmartSysAvatarModelsResponseBody struct {
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId               *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartSysAvatarModelList []*ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList `json:"SmartSysAvatarModelList,omitempty" xml:"SmartSysAvatarModelList,omitempty" type:"Repeated"`
	// example:
	//
	// 4
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSmartSysAvatarModelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsResponseBody) SetRequestId(v string) *ListSmartSysAvatarModelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBody) SetSmartSysAvatarModelList(v []*ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) *ListSmartSysAvatarModelsResponseBody {
	s.SmartSysAvatarModelList = v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBody) SetTotalCount(v int32) *ListSmartSysAvatarModelsResponseBody {
	s.TotalCount = &v
	return s
}

type ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList struct {
	// example:
	//
	// yunqiao
	AvatarId   *string `json:"AvatarId,omitempty" xml:"AvatarId,omitempty"`
	AvatarName *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	Bitrate    *int32  `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// http://ice-pub-media.myalicdn.com/smart/avatarModel/coverDemo/yunqiao.mp4
	CoverUrl   *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	Height     *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	OutputMask *bool   `json:"OutputMask,omitempty" xml:"OutputMask,omitempty"`
	// example:
	//
	// http://ice-pub-media.myalicdn.com/smart/avatarModel/videoDemo/yunqiao.mp4
	VideoUrl *string `json:"VideoUrl,omitempty" xml:"VideoUrl,omitempty"`
	Width    *int32  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetAvatarId(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.AvatarId = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetAvatarName(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.AvatarName = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetBitrate(v int32) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.Bitrate = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetCoverUrl(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.CoverUrl = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetHeight(v int32) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.Height = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetOutputMask(v bool) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.OutputMask = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetVideoUrl(v string) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.VideoUrl = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList) SetWidth(v int32) *ListSmartSysAvatarModelsResponseBodySmartSysAvatarModelList {
	s.Width = &v
	return s
}

type ListSmartSysAvatarModelsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSmartSysAvatarModelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSmartSysAvatarModelsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartSysAvatarModelsResponse) GoString() string {
	return s.String()
}

func (s *ListSmartSysAvatarModelsResponse) SetHeaders(v map[string]*string) *ListSmartSysAvatarModelsResponse {
	s.Headers = v
	return s
}

func (s *ListSmartSysAvatarModelsResponse) SetStatusCode(v int32) *ListSmartSysAvatarModelsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartSysAvatarModelsResponse) SetBody(v *ListSmartSysAvatarModelsResponseBody) *ListSmartSysAvatarModelsResponse {
	s.Body = v
	return s
}

type ListSmartVoiceGroupsResponseBody struct {
	// Id of the request
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VoiceGroups []*ListSmartVoiceGroupsResponseBodyVoiceGroups `json:"VoiceGroups,omitempty" xml:"VoiceGroups,omitempty" type:"Repeated"`
}

func (s ListSmartVoiceGroupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponseBody) SetRequestId(v string) *ListSmartVoiceGroupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBody) SetVoiceGroups(v []*ListSmartVoiceGroupsResponseBodyVoiceGroups) *ListSmartVoiceGroupsResponseBody {
	s.VoiceGroups = v
	return s
}

type ListSmartVoiceGroupsResponseBodyVoiceGroups struct {
	Type      *string                                                 `json:"Type,omitempty" xml:"Type,omitempty"`
	VoiceList []*ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList `json:"VoiceList,omitempty" xml:"VoiceList,omitempty" type:"Repeated"`
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroups) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroups) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroups) SetType(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroups {
	s.Type = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroups) SetVoiceList(v []*ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) *ListSmartVoiceGroupsResponseBodyVoiceGroups {
	s.VoiceList = v
	return s
}

type ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList struct {
	Desc   *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Remark *string `json:"Remark,omitempty" xml:"Remark,omitempty"`
	Tag    *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	// example:
	//
	// zhitian
	Voice *string `json:"Voice,omitempty" xml:"Voice,omitempty"`
	// example:
	//
	// Female
	VoiceType *string `json:"VoiceType,omitempty" xml:"VoiceType,omitempty"`
	// example:
	//
	// https://***.com/zhiqing.mp3
	VoiceUrl *string `json:"VoiceUrl,omitempty" xml:"VoiceUrl,omitempty"`
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetDesc(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Desc = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetName(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Name = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetRemark(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Remark = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetTag(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Tag = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetVoice(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.Voice = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetVoiceType(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.VoiceType = &v
	return s
}

func (s *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList) SetVoiceUrl(v string) *ListSmartVoiceGroupsResponseBodyVoiceGroupsVoiceList {
	s.VoiceUrl = &v
	return s
}

type ListSmartVoiceGroupsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSmartVoiceGroupsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSmartVoiceGroupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartVoiceGroupsResponse) GoString() string {
	return s.String()
}

func (s *ListSmartVoiceGroupsResponse) SetHeaders(v map[string]*string) *ListSmartVoiceGroupsResponse {
	s.Headers = v
	return s
}

func (s *ListSmartVoiceGroupsResponse) SetStatusCode(v int32) *ListSmartVoiceGroupsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartVoiceGroupsResponse) SetBody(v *ListSmartVoiceGroupsResponseBody) *ListSmartVoiceGroupsResponse {
	s.Body = v
	return s
}

type ListSnapshotJobsRequest struct {
	// example:
	//
	// 2022-07-14T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 2022-07-12T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSnapshotJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsRequest) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsRequest) SetEndOfCreateTime(v string) *ListSnapshotJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetJobId(v string) *ListSnapshotJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetNextPageToken(v string) *ListSnapshotJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetOrderBy(v string) *ListSnapshotJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetPageSize(v int32) *ListSnapshotJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetStartOfCreateTime(v string) *ListSnapshotJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetStatus(v string) *ListSnapshotJobsRequest {
	s.Status = &v
	return s
}

type ListSnapshotJobsResponseBody struct {
	Jobs []*ListSnapshotJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSnapshotJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBody) SetJobs(v []*ListSnapshotJobsResponseBodyJobs) *ListSnapshotJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListSnapshotJobsResponseBody) SetNextPageToken(v string) *ListSnapshotJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListSnapshotJobsResponseBody) SetRequestId(v string) *ListSnapshotJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListSnapshotJobsResponseBodyJobs struct {
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// example:
	//
	// 10
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	FinishTime *string                                `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *ListSnapshotJobsResponseBodyJobsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 2022-07-12T16:30:54Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// SampleJob
	Name   *string                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Output *ListSnapshotJobsResponseBodyJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-07-12T16:17:54Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// Sprite
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobs) SetAsync(v bool) *ListSnapshotJobsResponseBodyJobs {
	s.Async = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetCount(v int32) *ListSnapshotJobsResponseBodyJobs {
	s.Count = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetCreateTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetFinishTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetInput(v *ListSnapshotJobsResponseBodyJobsInput) *ListSnapshotJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetJobId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetModifiedTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetName(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetOutput(v *ListSnapshotJobsResponseBodyJobsOutput) *ListSnapshotJobsResponseBodyJobs {
	s.Output = v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetPipelineId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.PipelineId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetStatus(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetSubmitTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetTemplateId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.TemplateId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetTriggerSource(v string) *ListSnapshotJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetType(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponseBodyJobsInput struct {
	// example:
	//
	// oss://bucket/object.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobsInput) SetMedia(v string) *ListSnapshotJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobsInput) SetType(v string) *ListSnapshotJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponseBodyJobsOutput struct {
	// example:
	//
	// http://test-bucket.oss-cn-shanghai.aliyuncs.com/output-{Count}.jpg
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobsOutput) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobsOutput) SetMedia(v string) *ListSnapshotJobsResponseBodyJobsOutput {
	s.Media = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobsOutput) SetType(v string) *ListSnapshotJobsResponseBodyJobsOutput {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSnapshotJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSnapshotJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponse) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponse) SetHeaders(v map[string]*string) *ListSnapshotJobsResponse {
	s.Headers = v
	return s
}

func (s *ListSnapshotJobsResponse) SetStatusCode(v int32) *ListSnapshotJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSnapshotJobsResponse) SetBody(v *ListSnapshotJobsResponseBody) *ListSnapshotJobsResponse {
	s.Body = v
	return s
}

type ListSystemTemplatesRequest struct {
	// example:
	//
	// SampleTemplate
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 1,2
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSystemTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesRequest) SetName(v string) *ListSystemTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetPageNumber(v int32) *ListSystemTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetPageSize(v int32) *ListSystemTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetStatus(v string) *ListSystemTemplatesRequest {
	s.Status = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetSubtype(v string) *ListSystemTemplatesRequest {
	s.Subtype = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetTemplateId(v string) *ListSystemTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetType(v string) *ListSystemTemplatesRequest {
	s.Type = &v
	return s
}

type ListSystemTemplatesResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId          *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SystemTemplateList []*ListSystemTemplatesResponseBodySystemTemplateList `json:"SystemTemplateList,omitempty" xml:"SystemTemplateList,omitempty" type:"Repeated"`
	// example:
	//
	// 20
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListSystemTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponseBody) SetRequestId(v string) *ListSystemTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSystemTemplatesResponseBody) SetSystemTemplateList(v []*ListSystemTemplatesResponseBodySystemTemplateList) *ListSystemTemplatesResponseBody {
	s.SystemTemplateList = v
	return s
}

func (s *ListSystemTemplatesResponseBody) SetTotal(v int32) *ListSystemTemplatesResponseBody {
	s.Total = &v
	return s
}

type ListSystemTemplatesResponseBodySystemTemplateList struct {
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 1
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// example:
	//
	// Remux
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// example:
	//
	// {"Container":{"Format":"flv"},"Video":{},"Audio":{}}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// S00000001-000000
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// FLV-COPY
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// TranscodeTemplate
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s ListSystemTemplatesResponseBodySystemTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponseBodySystemTemplateList) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetStatus(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Status = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetSubtype(v int32) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Subtype = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetSubtypeName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.SubtypeName = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateConfig(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateConfig = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateId(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetType(v int32) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Type = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTypeName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TypeName = &v
	return s
}

type ListSystemTemplatesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListSystemTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListSystemTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponse) SetHeaders(v map[string]*string) *ListSystemTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListSystemTemplatesResponse) SetStatusCode(v int32) *ListSystemTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSystemTemplatesResponse) SetBody(v *ListSystemTemplatesResponseBody) *ListSystemTemplatesResponse {
	s.Body = v
	return s
}

type ListTemplatesRequest struct {
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// CreationTime:Desc
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListTemplatesRequest) SetCreateSource(v string) *ListTemplatesRequest {
	s.CreateSource = &v
	return s
}

func (s *ListTemplatesRequest) SetKeyword(v string) *ListTemplatesRequest {
	s.Keyword = &v
	return s
}

func (s *ListTemplatesRequest) SetPageNo(v int64) *ListTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListTemplatesRequest) SetPageSize(v int64) *ListTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTemplatesRequest) SetSortType(v string) *ListTemplatesRequest {
	s.SortType = &v
	return s
}

func (s *ListTemplatesRequest) SetStatus(v string) *ListTemplatesRequest {
	s.Status = &v
	return s
}

func (s *ListTemplatesRequest) SetType(v string) *ListTemplatesRequest {
	s.Type = &v
	return s
}

type ListTemplatesResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Templates []*ListTemplatesResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Repeated"`
	// example:
	//
	// 100
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponseBody) SetRequestId(v string) *ListTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTemplatesResponseBody) SetTemplates(v []*ListTemplatesResponseBodyTemplates) *ListTemplatesResponseBody {
	s.Templates = v
	return s
}

func (s *ListTemplatesResponseBody) SetTotalCount(v int32) *ListTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListTemplatesResponseBodyTemplates struct {
	// ClipsParam
	//
	// example:
	//
	// {"Media1":"mediaId","Text1":"text"}
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// 参考Timeline模板配置详解
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// OpenAPI
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// example:
	//
	// 2020-12-26T04:11:10Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// example:
	//
	// Normal
	PreviewMediaStatus *string `json:"PreviewMediaStatus,omitempty" xml:"PreviewMediaStatus,omitempty"`
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTemplatesResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponseBodyTemplates) SetClipsParam(v string) *ListTemplatesResponseBodyTemplates {
	s.ClipsParam = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetConfig(v string) *ListTemplatesResponseBodyTemplates {
	s.Config = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCoverURL(v string) *ListTemplatesResponseBodyTemplates {
	s.CoverURL = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCreateSource(v string) *ListTemplatesResponseBodyTemplates {
	s.CreateSource = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCreationTime(v string) *ListTemplatesResponseBodyTemplates {
	s.CreationTime = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetModifiedSource(v string) *ListTemplatesResponseBodyTemplates {
	s.ModifiedSource = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetModifiedTime(v string) *ListTemplatesResponseBodyTemplates {
	s.ModifiedTime = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetName(v string) *ListTemplatesResponseBodyTemplates {
	s.Name = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetPreviewMedia(v string) *ListTemplatesResponseBodyTemplates {
	s.PreviewMedia = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetPreviewMediaStatus(v string) *ListTemplatesResponseBodyTemplates {
	s.PreviewMediaStatus = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetStatus(v string) *ListTemplatesResponseBodyTemplates {
	s.Status = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetTemplateId(v string) *ListTemplatesResponseBodyTemplates {
	s.TemplateId = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetType(v string) *ListTemplatesResponseBodyTemplates {
	s.Type = &v
	return s
}

type ListTemplatesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponse) SetHeaders(v map[string]*string) *ListTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListTemplatesResponse) SetStatusCode(v int32) *ListTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTemplatesResponse) SetBody(v *ListTemplatesResponseBody) *ListTemplatesResponse {
	s.Body = v
	return s
}

type ListTranscodeJobsRequest struct {
	// example:
	//
	// 2022-07-15T00:00:00Z
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// CreateTimeDesc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// 7b38a5d86f1e47838927b6e7ccb11cbe
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// example:
	//
	// 2022-07-01T00:00:00Z
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTranscodeJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsRequest) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsRequest) SetEndOfCreateTime(v string) *ListTranscodeJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetNextPageToken(v string) *ListTranscodeJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetOrderBy(v string) *ListTranscodeJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetPageSize(v int32) *ListTranscodeJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetParentJobId(v string) *ListTranscodeJobsRequest {
	s.ParentJobId = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetStartOfCreateTime(v string) *ListTranscodeJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetStatus(v string) *ListTranscodeJobsRequest {
	s.Status = &v
	return s
}

type ListTranscodeJobsResponseBody struct {
	Jobs []*ListTranscodeJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	// example:
	//
	// 019daf5780f74831b0e1a767c9f1c178
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTranscodeJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBody) SetJobs(v []*ListTranscodeJobsResponseBodyJobs) *ListTranscodeJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListTranscodeJobsResponseBody) SetNextPageToken(v string) *ListTranscodeJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListTranscodeJobsResponseBody) SetRequestId(v string) *ListTranscodeJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobs struct {
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                        `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InputGroup []*ListTranscodeJobsResponseBodyJobsInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// example:
	//
	// transcode-job
	Name        *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputGroup []*ListTranscodeJobsResponseBodyJobsOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// example:
	//
	// 0
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *ListTranscodeJobsResponseBodyJobsScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobs) SetCreateTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetFinishTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetInputGroup(v []*ListTranscodeJobsResponseBodyJobsInputGroup) *ListTranscodeJobsResponseBodyJobs {
	s.InputGroup = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetJobCount(v int32) *ListTranscodeJobsResponseBodyJobs {
	s.JobCount = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetName(v string) *ListTranscodeJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetOutputGroup(v []*ListTranscodeJobsResponseBodyJobsOutputGroup) *ListTranscodeJobsResponseBodyJobs {
	s.OutputGroup = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetParentJobId(v string) *ListTranscodeJobsResponseBodyJobs {
	s.ParentJobId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetPercent(v int32) *ListTranscodeJobsResponseBodyJobs {
	s.Percent = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetRequestId(v string) *ListTranscodeJobsResponseBodyJobs {
	s.RequestId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetScheduleConfig(v *ListTranscodeJobsResponseBodyJobsScheduleConfig) *ListTranscodeJobsResponseBodyJobs {
	s.ScheduleConfig = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetStatus(v string) *ListTranscodeJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetSubmitTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetTriggerSource(v string) *ListTranscodeJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetUserData(v string) *ListTranscodeJobsResponseBodyJobs {
	s.UserData = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsInputGroup struct {
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsInputGroup) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsInputGroup) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetInputUrl(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.InputUrl = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetType(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroup struct {
	Output        *ListTranscodeJobsResponseBodyJobsOutputGroupOutput        `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ProcessConfig *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroup) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroup) SetOutput(v *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) *ListTranscodeJobsResponseBodyJobsOutputGroup {
	s.Output = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroup) SetProcessConfig(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) *ListTranscodeJobsResponseBodyJobsOutputGroup {
	s.ProcessConfig = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupOutput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media     *string `json:"Media,omitempty" xml:"Media,omitempty"`
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetOutputUrl(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.OutputUrl = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig struct {
	CombineConfigs  []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs  `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	Encryption      *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption        `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	ImageWatermarks []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	IsInheritTags   *bool                                                                       `json:"IsInheritTags,omitempty" xml:"IsInheritTags,omitempty"`
	Subtitles       []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles       `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	TextWatermarks  []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks  `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	Transcode       *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode         `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetCombineConfigs(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetEncryption(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetImageWatermarks(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetIsInheritTags(v bool) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.IsInheritTags = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetSubtitles(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetTextWatermarks(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetTranscode(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs struct {
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption struct {
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) SetCipherText(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption) SetEncryptType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks struct {
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// example:
	//
	// 10
	Dy   *string                                                                                      `json:"Dy,omitempty" xml:"Dy,omitempty"`
	File *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// TopLeft
	ReferPos *string                                                                                          `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Timeline *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles struct {
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// example:
	//
	// UTF-8
	CharEnc *string                                                                                `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	File    *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks struct {
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode struct {
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams struct {
	Audio     *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio     `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	MuxConfig *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Tags      map[string]*string                                                                          `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Video     *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo     `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetTags(v map[string]*string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Tags = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string                                                                                       `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	Segment *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsScheduleConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsScheduleConfig) SetPipelineId(v string) *ListTranscodeJobsResponseBodyJobsScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsScheduleConfig) SetPriority(v int32) *ListTranscodeJobsResponseBodyJobsScheduleConfig {
	s.Priority = &v
	return s
}

type ListTranscodeJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTranscodeJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTranscodeJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponse) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponse) SetHeaders(v map[string]*string) *ListTranscodeJobsResponse {
	s.Headers = v
	return s
}

func (s *ListTranscodeJobsResponse) SetStatusCode(v int32) *ListTranscodeJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTranscodeJobsResponse) SetBody(v *ListTranscodeJobsResponseBody) *ListTranscodeJobsResponse {
	s.Body = v
	return s
}

type QueryDNAJobListRequest struct {
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryDNAJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListRequest) SetJobIds(v string) *QueryDNAJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryDNAJobListRequest) SetOwnerAccount(v string) *QueryDNAJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryDNAJobListRequest) SetOwnerId(v int64) *QueryDNAJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryDNAJobListRequest) SetResourceOwnerAccount(v string) *QueryDNAJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryDNAJobListRequest) SetResourceOwnerId(v int64) *QueryDNAJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryDNAJobListResponseBody struct {
	JobList []*QueryDNAJobListResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Repeated"`
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryDNAJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponseBody) SetJobList(v []*QueryDNAJobListResponseBodyJobList) *QueryDNAJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryDNAJobListResponseBody) SetRequestId(v string) *QueryDNAJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryDNAJobListResponseBodyJobList struct {
	// example:
	//
	// "InvalidParameter.ResourceNotFound"
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// {"SaveType": "save","MediaType"":"video"}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// example:
	//
	// 2022-12-28T03:21:37Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// example:
	//
	// http://test_bucket.oss-cn-shanghai.aliyuncs.com/fingerprint/video/search_result/5/5.txt
	DNAResult *string `json:"DNAResult,omitempty" xml:"DNAResult,omitempty"`
	// example:
	//
	// 2022-12-28T03:21:44Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// example:
	//
	// 88c6ca184c0e47098a5b665e2a12****
	Id    *string                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	Input *QueryDNAJobListResponseBodyJobListInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// "The resource operated \\"a887d0b***d805ef6f7f6786302\\" cannot be found"
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// 3ca84a39a9024f19853b21be9cf9****
	PrimaryKey *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	// example:
	//
	// Queuing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// testdna
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryDNAJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponseBodyJobList) SetCode(v string) *QueryDNAJobListResponseBodyJobList {
	s.Code = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetConfig(v string) *QueryDNAJobListResponseBodyJobList {
	s.Config = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetCreationTime(v string) *QueryDNAJobListResponseBodyJobList {
	s.CreationTime = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetDBId(v string) *QueryDNAJobListResponseBodyJobList {
	s.DBId = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetDNAResult(v string) *QueryDNAJobListResponseBodyJobList {
	s.DNAResult = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetFinishTime(v string) *QueryDNAJobListResponseBodyJobList {
	s.FinishTime = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetId(v string) *QueryDNAJobListResponseBodyJobList {
	s.Id = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetInput(v *QueryDNAJobListResponseBodyJobListInput) *QueryDNAJobListResponseBodyJobList {
	s.Input = v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetMessage(v string) *QueryDNAJobListResponseBodyJobList {
	s.Message = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetPrimaryKey(v string) *QueryDNAJobListResponseBodyJobList {
	s.PrimaryKey = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetStatus(v string) *QueryDNAJobListResponseBodyJobList {
	s.Status = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobList) SetUserData(v string) *QueryDNAJobListResponseBodyJobList {
	s.UserData = &v
	return s
}

type QueryDNAJobListResponseBodyJobListInput struct {
	// example:
	//
	// 1b1b9cd148034739af413150fded****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryDNAJobListResponseBodyJobListInput) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponseBodyJobListInput) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponseBodyJobListInput) SetMedia(v string) *QueryDNAJobListResponseBodyJobListInput {
	s.Media = &v
	return s
}

func (s *QueryDNAJobListResponseBodyJobListInput) SetType(v string) *QueryDNAJobListResponseBodyJobListInput {
	s.Type = &v
	return s
}

type QueryDNAJobListResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryDNAJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryDNAJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryDNAJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryDNAJobListResponse) SetHeaders(v map[string]*string) *QueryDNAJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryDNAJobListResponse) SetStatusCode(v int32) *QueryDNAJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryDNAJobListResponse) SetBody(v *QueryDNAJobListResponseBody) *QueryDNAJobListResponse {
	s.Body = v
	return s
}

type QueryIProductionJobRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobRequest) SetClientToken(v string) *QueryIProductionJobRequest {
	s.ClientToken = &v
	return s
}

func (s *QueryIProductionJobRequest) SetJobId(v string) *QueryIProductionJobRequest {
	s.JobId = &v
	return s
}

type QueryIProductionJobResponseBody struct {
	// example:
	//
	// 2022-07-07T07:16:11Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2021-11-26T14:50:25Z
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// example:
	//
	// Cover
	FunctionName *string                               `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	Input        *QueryIProductionJobResponseBodyInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// {"Model":"gif"}
	JobParams   *string                                `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	Name        *string                                `json:"Name,omitempty" xml:"Name,omitempty"`
	Output      *QueryIProductionJobResponseBodyOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	OutputFiles []*string                              `json:"OutputFiles,omitempty" xml:"OutputFiles,omitempty" type:"Repeated"`
	OutputUrls  []*string                              `json:"OutputUrls,omitempty" xml:"OutputUrls,omitempty" type:"Repeated"`
	RequestId   *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// {}
	Result         *string                                        `json:"Result,omitempty" xml:"Result,omitempty"`
	ScheduleConfig *QueryIProductionJobResponseBodyScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// {"test":1}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBody) SetCreateTime(v string) *QueryIProductionJobResponseBody {
	s.CreateTime = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetFinishTime(v string) *QueryIProductionJobResponseBody {
	s.FinishTime = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetFunctionName(v string) *QueryIProductionJobResponseBody {
	s.FunctionName = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetInput(v *QueryIProductionJobResponseBodyInput) *QueryIProductionJobResponseBody {
	s.Input = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobId(v string) *QueryIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobParams(v string) *QueryIProductionJobResponseBody {
	s.JobParams = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetName(v string) *QueryIProductionJobResponseBody {
	s.Name = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutput(v *QueryIProductionJobResponseBodyOutput) *QueryIProductionJobResponseBody {
	s.Output = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutputFiles(v []*string) *QueryIProductionJobResponseBody {
	s.OutputFiles = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutputUrls(v []*string) *QueryIProductionJobResponseBody {
	s.OutputUrls = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetRequestId(v string) *QueryIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetResult(v string) *QueryIProductionJobResponseBody {
	s.Result = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetScheduleConfig(v *QueryIProductionJobResponseBodyScheduleConfig) *QueryIProductionJobResponseBody {
	s.ScheduleConfig = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetStatus(v string) *QueryIProductionJobResponseBody {
	s.Status = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetTemplateId(v string) *QueryIProductionJobResponseBody {
	s.TemplateId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetUserData(v string) *QueryIProductionJobResponseBody {
	s.UserData = &v
	return s
}

type QueryIProductionJobResponseBodyInput struct {
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryIProductionJobResponseBodyInput) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyInput) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyInput) SetMedia(v string) *QueryIProductionJobResponseBodyInput {
	s.Media = &v
	return s
}

func (s *QueryIProductionJobResponseBodyInput) SetType(v string) *QueryIProductionJobResponseBodyInput {
	s.Type = &v
	return s
}

type QueryIProductionJobResponseBodyOutput struct {
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryIProductionJobResponseBodyOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyOutput) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyOutput) SetMedia(v string) *QueryIProductionJobResponseBodyOutput {
	s.Media = &v
	return s
}

func (s *QueryIProductionJobResponseBodyOutput) SetType(v string) *QueryIProductionJobResponseBodyOutput {
	s.Type = &v
	return s
}

type QueryIProductionJobResponseBodyScheduleConfig struct {
	// example:
	//
	// a54fdc9c9aab413caef0d1150f565e86
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s QueryIProductionJobResponseBodyScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyScheduleConfig) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyScheduleConfig) SetPipelineId(v string) *QueryIProductionJobResponseBodyScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *QueryIProductionJobResponseBodyScheduleConfig) SetPriority(v int32) *QueryIProductionJobResponseBodyScheduleConfig {
	s.Priority = &v
	return s
}

type QueryIProductionJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponse) SetHeaders(v map[string]*string) *QueryIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *QueryIProductionJobResponse) SetStatusCode(v int32) *QueryIProductionJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIProductionJobResponse) SetBody(v *QueryIProductionJobResponseBody) *QueryIProductionJobResponse {
	s.Body = v
	return s
}

type QueryMediaCensorJobDetailRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 30
	MaximumPageSize *int64 `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	// example:
	//
	// ae0fd49c0840e14daf0d66a75b83****
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMediaCensorJobDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailRequest) SetJobId(v string) *QueryMediaCensorJobDetailRequest {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetMaximumPageSize(v int64) *QueryMediaCensorJobDetailRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetNextPageToken(v string) *QueryMediaCensorJobDetailRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMediaCensorJobDetailResponseBody struct {
	MediaCensorJobDetail *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail `json:"MediaCensorJobDetail,omitempty" xml:"MediaCensorJobDetail,omitempty" type:"Struct"`
	// example:
	//
	// B42299E6-F71F-465F-8FE9-4FC2E3D3C2CA
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBody) SetMediaCensorJobDetail(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) *QueryMediaCensorJobDetailResponseBody {
	s.MediaCensorJobDetail = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBody) SetRequestId(v string) *QueryMediaCensorJobDetailResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail struct {
	BarrageCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty" type:"Struct"`
	// example:
	//
	// InvalidParameter.ResourceNotFound
	Code                    *string                                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	CoverImageCensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults `json:"CoverImageCensorResults,omitempty" xml:"CoverImageCensorResults,omitempty" type:"Struct"`
	// example:
	//
	// 2018-09-13T16:32:24Z
	CreationTime     *string                                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DescCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty" type:"Struct"`
	// example:
	//
	// 2018-09-13T16:38:24Z
	FinishTime *string                                                         `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// f8f166eea7a44e9bb0a4aecf9543****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// The resource operated cannot be found
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// c5b30b7c0d0e4a0abde1d5f9e751****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// Success
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// block
	Suggestion        *string                                                                     `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TitleCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty" type:"Struct"`
	// example:
	//
	// example userdata ****
	UserData           *string                                                                      `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VensorCensorResult *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult `json:"VensorCensorResult,omitempty" xml:"VensorCensorResult,omitempty" type:"Struct"`
	VideoCensorConfig  *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig  `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetBarrageCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.BarrageCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCode(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Code = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCoverImageCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CoverImageCensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCreationTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetDescCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.DescCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetFinishTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetInput(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Input = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetJobId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetMessage(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Message = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetPipelineId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetState(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetTitleCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.TitleCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetUserData(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.UserData = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVensorCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VensorCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVideoCensorConfig(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VideoCensorConfig = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult struct {
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 99.91
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults struct {
	CoverImageCensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult `json:"CoverImageCensorResult,omitempty" xml:"CoverImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) SetCoverImageCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults {
	s.CoverImageCensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult struct {
	// example:
	//
	// bucket-out-test-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// test/ai/censor/v2/vme-****.jpg
	Object  *string                                                                                                        `json:"Object,omitempty" xml:"Object,omitempty"`
	Results *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Results = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults struct {
	Result []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) SetResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults {
	s.Result = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult struct {
	// example:
	//
	// Normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// Antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult struct {
	// example:
	//
	// terrorism
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// review
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput struct {
	// example:
	//
	// bucket-test-in-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// test/ai/censor/test-****.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Object = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult struct {
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 99.91
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult struct {
	CensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// example:
	//
	// ea04afcca7cd4e80b9ece8fbb251****
	NextPageToken  *string                                                                                    `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	VideoTimelines *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines `json:"VideoTimelines,omitempty" xml:"VideoTimelines,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetNextPageToken(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetVideoTimelines(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.VideoTimelines = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult struct {
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// terrorism
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// review
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines struct {
	VideoTimeline []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline `json:"VideoTimeline,omitempty" xml:"VideoTimeline,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) SetVideoTimeline(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines {
	s.VideoTimeline = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline struct {
	CensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
	// example:
	//
	// 00:02:59.999
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetTimestamp(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Timestamp = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult struct {
	// example:
	//
	// flood
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 99.99
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// porn
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig struct {
	// example:
	//
	// common
	BizType    *string                                                                               `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OutputFile *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	// example:
	//
	// true
	VideoCensor *string `json:"VideoCensor,omitempty" xml:"VideoCensor,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetBizType(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.BizType = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetOutputFile(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetVideoCensor(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.VideoCensor = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile struct {
	// example:
	//
	// test-bucket-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Object = &v
	return s
}

type QueryMediaCensorJobDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaCensorJobDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaCensorJobDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponse) SetHeaders(v map[string]*string) *QueryMediaCensorJobDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaCensorJobDetailResponse) SetStatusCode(v int32) *QueryMediaCensorJobDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponse) SetBody(v *QueryMediaCensorJobDetailResponseBody) *QueryMediaCensorJobDetailResponse {
	s.Body = v
	return s
}

type QueryMediaCensorJobListRequest struct {
	// example:
	//
	// 2022-02-14T02:16:07Z
	EndOfJobCreatedTimeRange *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	// example:
	//
	// fa9c34be3bcf42919ac4d1775239****,78dc866518b843259669df58ed30****
	JobIds *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	// example:
	//
	// 20
	MaximumPageSize *int64 `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	// example:
	//
	// 79aff3eee82242e092899db5f669
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount  *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// c5b30b7c0d0e4a0abde1d5f9e751****
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// example:
	//
	// 2021-12-22T03:48:05Z
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	// example:
	//
	// All
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s QueryMediaCensorJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QueryMediaCensorJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetJobIds(v string) *QueryMediaCensorJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetMaximumPageSize(v int64) *QueryMediaCensorJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetNextPageToken(v string) *QueryMediaCensorJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetOwnerAccount(v string) *QueryMediaCensorJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetOwnerId(v int64) *QueryMediaCensorJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetPipelineId(v string) *QueryMediaCensorJobListRequest {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetResourceOwnerAccount(v string) *QueryMediaCensorJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetResourceOwnerId(v int64) *QueryMediaCensorJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QueryMediaCensorJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetState(v string) *QueryMediaCensorJobListRequest {
	s.State = &v
	return s
}

type QueryMediaCensorJobListResponseBody struct {
	MediaCensorJobList *QueryMediaCensorJobListResponseBodyMediaCensorJobList `json:"MediaCensorJobList,omitempty" xml:"MediaCensorJobList,omitempty" type:"Struct"`
	// example:
	//
	// 9b1a42bc6e8d46e6a1383b7e7f01****
	NextPageToken *string                                         `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NonExistIds   *QueryMediaCensorJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
	// example:
	//
	// D1D5C080-8E2F-5030-8AB4-13092F17631B
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaCensorJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBody) SetMediaCensorJobList(v *QueryMediaCensorJobListResponseBodyMediaCensorJobList) *QueryMediaCensorJobListResponseBody {
	s.MediaCensorJobList = v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetNextPageToken(v string) *QueryMediaCensorJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetNonExistIds(v *QueryMediaCensorJobListResponseBodyNonExistIds) *QueryMediaCensorJobListResponseBody {
	s.NonExistIds = v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetRequestId(v string) *QueryMediaCensorJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobList struct {
	MediaCensorJob []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob `json:"MediaCensorJob,omitempty" xml:"MediaCensorJob,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobList) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobList) SetMediaCensorJob(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) *QueryMediaCensorJobListResponseBodyMediaCensorJobList {
	s.MediaCensorJob = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob struct {
	BarrageCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty" type:"Struct"`
	// example:
	//
	// InvalidParameter.ResourceNotFound
	Code                    *string                                                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	CoverImageCensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults `json:"CoverImageCensorResults,omitempty" xml:"CoverImageCensorResults,omitempty" type:"Struct"`
	// example:
	//
	// 2021-11-04T07:25:48Z
	CreationTime     *string                                                                              `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DescCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty" type:"Struct"`
	// example:
	//
	// 2021-11-04T07:25:50Z
	FinishTime *string                                                                   `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// f8f166eea7a44e9bb0a4aecf9543
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// The resource operated cannot be found
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// c5b30b7c0d0e4a0abde1d5f9e751****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// Success
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// pass
	Suggestion        *string                                                                               `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TitleCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty" type:"Struct"`
	// example:
	//
	// example userdata ****
	UserData           *string                                                                                `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VensorCensorResult *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult `json:"VensorCensorResult,omitempty" xml:"VensorCensorResult,omitempty" type:"Struct"`
	VideoCensorConfig  *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig  `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetBarrageCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.BarrageCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCode(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Code = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCoverImageCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.CoverImageCensorResults = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCreationTime(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetDescCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.DescCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetFinishTime(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetInput(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Input = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetJobId(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetMessage(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Message = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetPipelineId(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetState(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetTitleCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.TitleCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetUserData(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.UserData = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetVensorCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.VensorCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetVideoCensorConfig(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.VideoCensorConfig = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult struct {
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 99.91
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults struct {
	CoverImageCensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult `json:"CoverImageCensorResult,omitempty" xml:"CoverImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) SetCoverImageCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults {
	s.CoverImageCensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult struct {
	// example:
	//
	// example-Bucket-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// test/ai/censor/v2/vme-****.jpg
	Object  *string                                                                                                                  `json:"Object,omitempty" xml:"Object,omitempty"`
	Results *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Results = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults struct {
	Result []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) SetResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults {
	s.Result = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult struct {
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// live
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult struct {
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput struct {
	// example:
	//
	// bucket-test-in-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// test/ai/censor/test-****.mp4
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Object = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult struct {
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// antispam
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult struct {
	CensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// example:
	//
	// ea04afcca7cd4e80b9ece8fbb251
	NextPageToken  *string                                                                                              `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	VideoTimelines *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines `json:"VideoTimelines,omitempty" xml:"VideoTimelines,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetNextPageToken(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetVideoTimelines(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.VideoTimelines = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults struct {
	CensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) SetCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult struct {
	// example:
	//
	// meaningless
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// ad
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// pass
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines struct {
	VideoTimeline []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline `json:"VideoTimeline,omitempty" xml:"VideoTimeline,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) SetVideoTimeline(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines {
	s.VideoTimeline = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline struct {
	CensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
	// example:
	//
	// 00:02:59.999
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetTimestamp(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.Timestamp = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults struct {
	CensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) SetCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult struct {
	// example:
	//
	// normal
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	// example:
	//
	// 100
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// example:
	//
	// porn
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	// example:
	//
	// block
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig struct {
	// example:
	//
	// common
	BizType    *string                                                                                         `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OutputFile *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	// example:
	//
	// true
	VideoCensor *string `json:"VideoCensor,omitempty" xml:"VideoCensor,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetBizType(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.BizType = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetOutputFile(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetVideoCensor(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.VideoCensor = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile struct {
	// example:
	//
	// test-bucket-****
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-shanghai
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// example:
	//
	// output{Count}.jpg
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Object = &v
	return s
}

type QueryMediaCensorJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryMediaCensorJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryMediaCensorJobListResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaCensorJobListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaCensorJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponse) SetHeaders(v map[string]*string) *QueryMediaCensorJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaCensorJobListResponse) SetStatusCode(v int32) *QueryMediaCensorJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaCensorJobListResponse) SetBody(v *QueryMediaCensorJobListResponseBody) *QueryMediaCensorJobListResponse {
	s.Body = v
	return s
}

type QueryMediaIndexJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// c2e77390f75271ec802f0674a2ce6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s QueryMediaIndexJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobRequest) SetMediaId(v string) *QueryMediaIndexJobRequest {
	s.MediaId = &v
	return s
}

func (s *QueryMediaIndexJobRequest) SetSearchLibName(v string) *QueryMediaIndexJobRequest {
	s.SearchLibName = &v
	return s
}

type QueryMediaIndexJobResponseBody struct {
	// example:
	//
	// 200
	Code             *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	IndexJobInfoList []*QueryMediaIndexJobResponseBodyIndexJobInfoList `json:"IndexJobInfoList,omitempty" xml:"IndexJobInfoList,omitempty" type:"Repeated"`
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryMediaIndexJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobResponseBody) SetCode(v string) *QueryMediaIndexJobResponseBody {
	s.Code = &v
	return s
}

func (s *QueryMediaIndexJobResponseBody) SetIndexJobInfoList(v []*QueryMediaIndexJobResponseBodyIndexJobInfoList) *QueryMediaIndexJobResponseBody {
	s.IndexJobInfoList = v
	return s
}

func (s *QueryMediaIndexJobResponseBody) SetRequestId(v string) *QueryMediaIndexJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMediaIndexJobResponseBody) SetSuccess(v string) *QueryMediaIndexJobResponseBody {
	s.Success = &v
	return s
}

type QueryMediaIndexJobResponseBodyIndexJobInfoList struct {
	// example:
	//
	// 2023-11-21 11:33:51
	GmtFinish *string `json:"GmtFinish,omitempty" xml:"GmtFinish,omitempty"`
	// example:
	//
	// 2023-11-21 11:33:50
	GmtSubmit *string `json:"GmtSubmit,omitempty" xml:"GmtSubmit,omitempty"`
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s QueryMediaIndexJobResponseBodyIndexJobInfoList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobResponseBodyIndexJobInfoList) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetGmtFinish(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.GmtFinish = &v
	return s
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetGmtSubmit(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.GmtSubmit = &v
	return s
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetIndexType(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.IndexType = &v
	return s
}

func (s *QueryMediaIndexJobResponseBodyIndexJobInfoList) SetStatus(v string) *QueryMediaIndexJobResponseBodyIndexJobInfoList {
	s.Status = &v
	return s
}

type QueryMediaIndexJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMediaIndexJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMediaIndexJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaIndexJobResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaIndexJobResponse) SetHeaders(v map[string]*string) *QueryMediaIndexJobResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaIndexJobResponse) SetStatusCode(v int32) *QueryMediaIndexJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaIndexJobResponse) SetBody(v *QueryMediaIndexJobResponseBody) *QueryMediaIndexJobResponse {
	s.Body = v
	return s
}

type QuerySearchIndexRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// mm
	IndexType *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s QuerySearchIndexRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchIndexRequest) GoString() string {
	return s.String()
}

func (s *QuerySearchIndexRequest) SetIndexType(v string) *QuerySearchIndexRequest {
	s.IndexType = &v
	return s
}

func (s *QuerySearchIndexRequest) SetSearchLibName(v string) *QuerySearchIndexRequest {
	s.SearchLibName = &v
	return s
}

type QuerySearchIndexResponseBody struct {
	Code        *string `json:"Code,omitempty" xml:"Code,omitempty"`
	IndexStatus *string `json:"IndexStatus,omitempty" xml:"IndexStatus,omitempty"`
	// example:
	//
	// mm
	IndexType  *string `json:"IndexType,omitempty" xml:"IndexType,omitempty"`
	MediaTotal *string `json:"MediaTotal,omitempty" xml:"MediaTotal,omitempty"`
	// Id of the request
	//
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	Success       *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySearchIndexResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchIndexResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySearchIndexResponseBody) SetCode(v string) *QuerySearchIndexResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetIndexStatus(v string) *QuerySearchIndexResponseBody {
	s.IndexStatus = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetIndexType(v string) *QuerySearchIndexResponseBody {
	s.IndexType = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetMediaTotal(v string) *QuerySearchIndexResponseBody {
	s.MediaTotal = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetRequestId(v string) *QuerySearchIndexResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetSearchLibName(v string) *QuerySearchIndexResponseBody {
	s.SearchLibName = &v
	return s
}

func (s *QuerySearchIndexResponseBody) SetSuccess(v string) *QuerySearchIndexResponseBody {
	s.Success = &v
	return s
}

type QuerySearchIndexResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySearchIndexResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySearchIndexResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchIndexResponse) GoString() string {
	return s.String()
}

func (s *QuerySearchIndexResponse) SetHeaders(v map[string]*string) *QuerySearchIndexResponse {
	s.Headers = v
	return s
}

func (s *QuerySearchIndexResponse) SetStatusCode(v int32) *QuerySearchIndexResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySearchIndexResponse) SetBody(v *QuerySearchIndexResponseBody) *QuerySearchIndexResponse {
	s.Body = v
	return s
}

type QuerySearchLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s QuerySearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchLibRequest) GoString() string {
	return s.String()
}

func (s *QuerySearchLibRequest) SetSearchLibName(v string) *QuerySearchLibRequest {
	s.SearchLibName = &v
	return s
}

type QuerySearchLibResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// example:
	//
	// normal
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QuerySearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySearchLibResponseBody) SetCode(v string) *QuerySearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetRequestId(v string) *QuerySearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetSearchLibName(v string) *QuerySearchLibResponseBody {
	s.SearchLibName = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetStatus(v string) *QuerySearchLibResponseBody {
	s.Status = &v
	return s
}

func (s *QuerySearchLibResponseBody) SetSuccess(v string) *QuerySearchLibResponseBody {
	s.Success = &v
	return s
}

type QuerySearchLibResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySearchLibResponse) GoString() string {
	return s.String()
}

func (s *QuerySearchLibResponse) SetHeaders(v map[string]*string) *QuerySearchLibResponse {
	s.Headers = v
	return s
}

func (s *QuerySearchLibResponse) SetStatusCode(v int32) *QuerySearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySearchLibResponse) SetBody(v *QuerySearchLibResponseBody) *QuerySearchLibResponse {
	s.Body = v
	return s
}

type QuerySmarttagJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 88c6ca184c0e47098a5b665e2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// {"labelResultType":"auto"}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
}

func (s QuerySmarttagJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobRequest) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobRequest) SetJobId(v string) *QuerySmarttagJobRequest {
	s.JobId = &v
	return s
}

func (s *QuerySmarttagJobRequest) SetParams(v string) *QuerySmarttagJobRequest {
	s.Params = &v
	return s
}

type QuerySmarttagJobResponseBody struct {
	// example:
	//
	// Success
	JobStatus *string `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Results   *QuerySmarttagJobResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
	// example:
	//
	// {"userId":"123432412831"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QuerySmarttagJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBody) SetJobStatus(v string) *QuerySmarttagJobResponseBody {
	s.JobStatus = &v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetRequestId(v string) *QuerySmarttagJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetResults(v *QuerySmarttagJobResponseBodyResults) *QuerySmarttagJobResponseBody {
	s.Results = v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetUserData(v string) *QuerySmarttagJobResponseBody {
	s.UserData = &v
	return s
}

type QuerySmarttagJobResponseBodyResults struct {
	Result []*QuerySmarttagJobResponseBodyResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QuerySmarttagJobResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBodyResults) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBodyResults) SetResult(v []*QuerySmarttagJobResponseBodyResultsResult) *QuerySmarttagJobResponseBodyResults {
	s.Result = v
	return s
}

type QuerySmarttagJobResponseBodyResultsResult struct {
	// example:
	//
	// {"title":"example-title-****"}
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// Meta
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QuerySmarttagJobResponseBodyResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBodyResultsResult) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBodyResultsResult) SetData(v string) *QuerySmarttagJobResponseBodyResultsResult {
	s.Data = &v
	return s
}

func (s *QuerySmarttagJobResponseBodyResultsResult) SetType(v string) *QuerySmarttagJobResponseBodyResultsResult {
	s.Type = &v
	return s
}

type QuerySmarttagJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QuerySmarttagJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QuerySmarttagJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponse) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponse) SetHeaders(v map[string]*string) *QuerySmarttagJobResponse {
	s.Headers = v
	return s
}

func (s *QuerySmarttagJobResponse) SetStatusCode(v int32) *QuerySmarttagJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QuerySmarttagJobResponse) SetBody(v *QuerySmarttagJobResponseBody) *QuerySmarttagJobResponse {
	s.Body = v
	return s
}

type RefreshUploadMediaRequest struct {
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s RefreshUploadMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaRequest) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaRequest) SetMediaId(v string) *RefreshUploadMediaRequest {
	s.MediaId = &v
	return s
}

type RefreshUploadMediaResponseBody struct {
	// example:
	//
	// c2e77390f75271ec802f0674a2ce6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// eyJFbmRwb2ludCI6Imh0dHBzOi8vb3NzLWNuLXNoYW5naGFpLmFsaXl1bmNzLmNvbSIsIkJ1Y2tldCI6InN6aGQtdmlkZW8iLCJGaWxlTmFtZSI6InZvZC0yOTYzMWEvc3YvNTBmYTJlODQtMTgxMjdhZGRiMTcvNTBmYTJlODQtMTgxMjdhZGRiM***
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	// example:
	//
	// eyJBY2Nlc3NLZXlJZCI6IkxUQUk0Rm53bTk1dHdxQjMxR3IzSE5hRCIsIkFjY2Vzc0tleVNlY3JldCI6Ik9lWllKR0dTMTlkNkZaM1E3UVpJQmdmSVdnM3BPaiIsIkV4cGlyYXRpb24iOiI***
	UploadAuth *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s RefreshUploadMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaResponseBody) SetMediaId(v string) *RefreshUploadMediaResponseBody {
	s.MediaId = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetRequestId(v string) *RefreshUploadMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetUploadAddress(v string) *RefreshUploadMediaResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetUploadAuth(v string) *RefreshUploadMediaResponseBody {
	s.UploadAuth = &v
	return s
}

type RefreshUploadMediaResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RefreshUploadMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RefreshUploadMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaResponse) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaResponse) SetHeaders(v map[string]*string) *RefreshUploadMediaResponse {
	s.Headers = v
	return s
}

func (s *RefreshUploadMediaResponse) SetStatusCode(v int32) *RefreshUploadMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *RefreshUploadMediaResponse) SetBody(v *RefreshUploadMediaResponseBody) *RefreshUploadMediaResponse {
	s.Body = v
	return s
}

type RegisterMediaInfoRequest struct {
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// 3048
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// example:
	//
	// ****0311a423d11a5f7dee713535****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// defaultDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// tag1,tag2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// true
	Overwrite *bool `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// example:
	//
	// 123-123
	ReferenceId        *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	RegisterConfig     *string `json:"RegisterConfig,omitempty" xml:"RegisterConfig,omitempty"`
	SmartTagTemplateId *string `json:"SmartTagTemplateId,omitempty" xml:"SmartTagTemplateId,omitempty"`
	// example:
	//
	// defaultTitle
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// ******b4fb044839815d4f2cd8******
	WorkflowId *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s RegisterMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoRequest) SetBusinessType(v string) *RegisterMediaInfoRequest {
	s.BusinessType = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetCateId(v int64) *RegisterMediaInfoRequest {
	s.CateId = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetClientToken(v string) *RegisterMediaInfoRequest {
	s.ClientToken = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetCoverURL(v string) *RegisterMediaInfoRequest {
	s.CoverURL = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetDescription(v string) *RegisterMediaInfoRequest {
	s.Description = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetInputURL(v string) *RegisterMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetMediaTags(v string) *RegisterMediaInfoRequest {
	s.MediaTags = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetMediaType(v string) *RegisterMediaInfoRequest {
	s.MediaType = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetOverwrite(v bool) *RegisterMediaInfoRequest {
	s.Overwrite = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetReferenceId(v string) *RegisterMediaInfoRequest {
	s.ReferenceId = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetRegisterConfig(v string) *RegisterMediaInfoRequest {
	s.RegisterConfig = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetSmartTagTemplateId(v string) *RegisterMediaInfoRequest {
	s.SmartTagTemplateId = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetTitle(v string) *RegisterMediaInfoRequest {
	s.Title = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetUserData(v string) *RegisterMediaInfoRequest {
	s.UserData = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetWorkflowId(v string) *RegisterMediaInfoRequest {
	s.WorkflowId = &v
	return s
}

type RegisterMediaInfoResponseBody struct {
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******5A-CAAC-4850-A3AF-B74606******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoResponseBody) SetMediaId(v string) *RegisterMediaInfoResponseBody {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaInfoResponseBody) SetRequestId(v string) *RegisterMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type RegisterMediaInfoResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RegisterMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RegisterMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoResponse) SetHeaders(v map[string]*string) *RegisterMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaInfoResponse) SetStatusCode(v int32) *RegisterMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterMediaInfoResponse) SetBody(v *RegisterMediaInfoResponseBody) *RegisterMediaInfoResponse {
	s.Body = v
	return s
}

type RegisterMediaStreamRequest struct {
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// 5e778ec0027b71ed80a8909598506***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s RegisterMediaStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamRequest) SetInputURL(v string) *RegisterMediaStreamRequest {
	s.InputURL = &v
	return s
}

func (s *RegisterMediaStreamRequest) SetMediaId(v string) *RegisterMediaStreamRequest {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaStreamRequest) SetUserData(v string) *RegisterMediaStreamRequest {
	s.UserData = &v
	return s
}

type RegisterMediaStreamResponseBody struct {
	// example:
	//
	// 5e778ec0027b71ed80a8909598506302
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterMediaStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamResponseBody) SetMediaId(v string) *RegisterMediaStreamResponseBody {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaStreamResponseBody) SetRequestId(v string) *RegisterMediaStreamResponseBody {
	s.RequestId = &v
	return s
}

type RegisterMediaStreamResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RegisterMediaStreamResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RegisterMediaStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamResponse) SetHeaders(v map[string]*string) *RegisterMediaStreamResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaStreamResponse) SetStatusCode(v int32) *RegisterMediaStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterMediaStreamResponse) SetBody(v *RegisterMediaStreamResponseBody) *RegisterMediaStreamResponse {
	s.Body = v
	return s
}

type SearchEditingProjectRequest struct {
	// example:
	//
	// WebSDK
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 1
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// Producing
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s SearchEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectRequest) SetCreateSource(v string) *SearchEditingProjectRequest {
	s.CreateSource = &v
	return s
}

func (s *SearchEditingProjectRequest) SetEndTime(v string) *SearchEditingProjectRequest {
	s.EndTime = &v
	return s
}

func (s *SearchEditingProjectRequest) SetPageNo(v int64) *SearchEditingProjectRequest {
	s.PageNo = &v
	return s
}

func (s *SearchEditingProjectRequest) SetPageSize(v int64) *SearchEditingProjectRequest {
	s.PageSize = &v
	return s
}

func (s *SearchEditingProjectRequest) SetProjectType(v string) *SearchEditingProjectRequest {
	s.ProjectType = &v
	return s
}

func (s *SearchEditingProjectRequest) SetSortBy(v string) *SearchEditingProjectRequest {
	s.SortBy = &v
	return s
}

func (s *SearchEditingProjectRequest) SetStartTime(v string) *SearchEditingProjectRequest {
	s.StartTime = &v
	return s
}

func (s *SearchEditingProjectRequest) SetStatus(v string) *SearchEditingProjectRequest {
	s.Status = &v
	return s
}

func (s *SearchEditingProjectRequest) SetTemplateType(v string) *SearchEditingProjectRequest {
	s.TemplateType = &v
	return s
}

type SearchEditingProjectResponseBody struct {
	// example:
	//
	// 10
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// example:
	//
	// null
	NextToken   *string                                        `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ProjectList []*SearchEditingProjectResponseBodyProjectList `json:"ProjectList,omitempty" xml:"ProjectList,omitempty" type:"Repeated"`
	// example:
	//
	// ****9262E3DA-07FA-4862-FCBB6BC61D08*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 110
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponseBody) SetMaxResults(v int64) *SearchEditingProjectResponseBody {
	s.MaxResults = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetNextToken(v string) *SearchEditingProjectResponseBody {
	s.NextToken = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetProjectList(v []*SearchEditingProjectResponseBodyProjectList) *SearchEditingProjectResponseBody {
	s.ProjectList = v
	return s
}

func (s *SearchEditingProjectResponseBody) SetRequestId(v string) *SearchEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetTotalCount(v int64) *SearchEditingProjectResponseBody {
	s.TotalCount = &v
	return s
}

type SearchEditingProjectResponseBodyProjectList struct {
	// example:
	//
	// { "OutputMediaConfig" : { "StorageLocation": "test-bucket.oss-cn-shanghai.aliyuncs.com", "Path": "test-path" }, "OutputMediaTarget": "oss-object", "ReservationTime": "2021-06-21T08:05:00Z" }
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example-cover.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// OpenAPI
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// sample description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 30.100000
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// InvalidParameter
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// "EventTime":"2021-08-12T10:04:15Z","ErrorCode":"InvalidParameter","ErrorMessage":"The specified parameter \\"LiveStreamConfig\\" is not valid. specified parameter example is not valid.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// example:
	//
	// 2017-01-11T12:00:00Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// EditingProject
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// example:
	//
	// PRODUCE_FAILED
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// Timeline
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// example:
	//
	// {"VideoTracks":[{"VideoTrackClips":[{"MediaId":"****4d7cf14dc7b83b0e801c****"},{"MediaId":"****4d7cf14dc7b83b0e801c****"}]}]}
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// example:
	//
	// title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SearchEditingProjectResponseBodyProjectList) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponseBodyProjectList) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponseBodyProjectList) SetBusinessConfig(v string) *SearchEditingProjectResponseBodyProjectList {
	s.BusinessConfig = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetBusinessStatus(v string) *SearchEditingProjectResponseBodyProjectList {
	s.BusinessStatus = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCoverURL(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CoverURL = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCreateSource(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CreateSource = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCreateTime(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CreateTime = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetDescription(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Description = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetDuration(v int64) *SearchEditingProjectResponseBodyProjectList {
	s.Duration = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetErrorCode(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ErrorCode = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetErrorMessage(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ErrorMessage = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetModifiedSource(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ModifiedSource = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetModifiedTime(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ModifiedTime = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetProjectId(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ProjectId = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetProjectType(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ProjectType = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetStatus(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Status = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTemplateType(v string) *SearchEditingProjectResponseBodyProjectList {
	s.TemplateType = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTimeline(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Timeline = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTitle(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Title = &v
	return s
}

type SearchEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponse) SetHeaders(v map[string]*string) *SearchEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *SearchEditingProjectResponse) SetStatusCode(v int32) *SearchEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchEditingProjectResponse) SetBody(v *SearchEditingProjectResponseBody) *SearchEditingProjectResponse {
	s.Body = v
	return s
}

type SearchMediaRequest struct {
	// example:
	//
	// 2d3bf1e35a1e42b5ab338d701efa7603
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Match    *string `json:"Match,omitempty" xml:"Match,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ScrollToken   *string `json:"ScrollToken,omitempty" xml:"ScrollToken,omitempty"`
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// example:
	//
	// utcCreate:Desc, utcModified:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s SearchMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaRequest) SetEntityId(v string) *SearchMediaRequest {
	s.EntityId = &v
	return s
}

func (s *SearchMediaRequest) SetMatch(v string) *SearchMediaRequest {
	s.Match = &v
	return s
}

func (s *SearchMediaRequest) SetPageNo(v int32) *SearchMediaRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaRequest) SetPageSize(v int32) *SearchMediaRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaRequest) SetScrollToken(v string) *SearchMediaRequest {
	s.ScrollToken = &v
	return s
}

func (s *SearchMediaRequest) SetSearchLibName(v string) *SearchMediaRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaRequest) SetSortBy(v string) *SearchMediaRequest {
	s.SortBy = &v
	return s
}

type SearchMediaResponseBody struct {
	// example:
	//
	// 200
	Code          *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaInfoList []*SearchMediaResponseBodyMediaInfoList `json:"MediaInfoList,omitempty" xml:"MediaInfoList,omitempty" type:"Repeated"`
	// example:
	//
	// 6F61C357-ACC0-57FB-876E-D58795335E59
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScrollToken *string `json:"ScrollToken,omitempty" xml:"ScrollToken,omitempty"`
	// example:
	//
	// True
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 163
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBody) SetCode(v string) *SearchMediaResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaResponseBody) SetMediaInfoList(v []*SearchMediaResponseBodyMediaInfoList) *SearchMediaResponseBody {
	s.MediaInfoList = v
	return s
}

func (s *SearchMediaResponseBody) SetRequestId(v string) *SearchMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaResponseBody) SetScrollToken(v string) *SearchMediaResponseBody {
	s.ScrollToken = &v
	return s
}

func (s *SearchMediaResponseBody) SetSuccess(v string) *SearchMediaResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaResponseBody) SetTotal(v int64) *SearchMediaResponseBody {
	s.Total = &v
	return s
}

type SearchMediaResponseBodyMediaInfoList struct {
	AiData      *SearchMediaResponseBodyMediaInfoListAiData      `json:"AiData,omitempty" xml:"AiData,omitempty" type:"Struct"`
	AiRoughData *SearchMediaResponseBodyMediaInfoListAiRoughData `json:"AiRoughData,omitempty" xml:"AiRoughData,omitempty" type:"Struct"`
	// FileInfos。
	FileInfoList   []*SearchMediaResponseBodyMediaInfoListFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	MediaBasicInfo *SearchMediaResponseBodyMediaInfoListMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// 3b187b3620c8490886cfc2a9578c3ce6
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoList) SetAiData(v *SearchMediaResponseBodyMediaInfoListAiData) *SearchMediaResponseBodyMediaInfoList {
	s.AiData = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetAiRoughData(v *SearchMediaResponseBodyMediaInfoListAiRoughData) *SearchMediaResponseBodyMediaInfoList {
	s.AiRoughData = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetFileInfoList(v []*SearchMediaResponseBodyMediaInfoListFileInfoList) *SearchMediaResponseBodyMediaInfoList {
	s.FileInfoList = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetMediaBasicInfo(v *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) *SearchMediaResponseBodyMediaInfoList {
	s.MediaBasicInfo = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetMediaId(v string) *SearchMediaResponseBodyMediaInfoList {
	s.MediaId = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiData struct {
	AiLabelInfo []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo `json:"AiLabelInfo,omitempty" xml:"AiLabelInfo,omitempty" type:"Repeated"`
	AsrInfo     []*SearchMediaResponseBodyMediaInfoListAiDataAsrInfo     `json:"AsrInfo,omitempty" xml:"AsrInfo,omitempty" type:"Repeated"`
	OcrInfo     []*SearchMediaResponseBodyMediaInfoListAiDataOcrInfo     `json:"OcrInfo,omitempty" xml:"OcrInfo,omitempty" type:"Repeated"`
}

func (s SearchMediaResponseBodyMediaInfoListAiData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiData) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiData) SetAiLabelInfo(v []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) *SearchMediaResponseBodyMediaInfoListAiData {
	s.AiLabelInfo = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiData) SetAsrInfo(v []*SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) *SearchMediaResponseBodyMediaInfoListAiData {
	s.AsrInfo = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiData) SetOcrInfo(v []*SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) *SearchMediaResponseBodyMediaInfoListAiData {
	s.OcrInfo = v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	FaceId *string `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
	// example:
	//
	// 10310250338
	LabelId     *string                                                             `json:"LabelId,omitempty" xml:"LabelId,omitempty"`
	LabelName   *string                                                             `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
	LabelType   *string                                                             `json:"LabelType,omitempty" xml:"LabelType,omitempty"`
	Occurrences []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences `json:"Occurrences,omitempty" xml:"Occurrences,omitempty" type:"Repeated"`
	// example:
	//
	// vision
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetCategory(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.Category = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetFaceId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.FaceId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetLabelId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.LabelId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetLabelName(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.LabelName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetLabelType(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.LabelType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetOccurrences(v []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.Occurrences = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo) SetSource(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfo {
	s.Source = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 10310250338
	FinegrainId   *string `json:"FinegrainId,omitempty" xml:"FinegrainId,omitempty"`
	FinegrainName *string `json:"FinegrainName,omitempty" xml:"FinegrainName,omitempty"`
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 99C64F6287
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// example:
	//
	// 0.75287705
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// 85010D1
	TableBatchSeqId *string `json:"TableBatchSeqId,omitempty" xml:"TableBatchSeqId,omitempty"`
	// example:
	//
	// 2.5
	To     *float64                                                                  `json:"To,omitempty" xml:"To,omitempty"`
	Tracks []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks `json:"Tracks,omitempty" xml:"Tracks,omitempty" type:"Repeated"`
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	ClipId *string `json:"clipId,omitempty" xml:"clipId,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetContent(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Content = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetFinegrainId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.FinegrainId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetFinegrainName(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.FinegrainName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetFrom(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.From = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetImage(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Image = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetScore(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Score = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetTableBatchSeqId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.TableBatchSeqId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetTo(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.To = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetTracks(v []*SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.Tracks = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences) SetClipId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrences {
	s.ClipId = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks struct {
	// example:
	//
	// 468.0;67.0;615.0;267.0
	Position *string `json:"Position,omitempty" xml:"Position,omitempty"`
	// example:
	//
	// 50.2
	Size *float64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) SetPosition(v string) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks {
	s.Position = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) SetSize(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks {
	s.Size = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks) SetTimestamp(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAiLabelInfoOccurrencesTracks {
	s.Timestamp = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataAsrInfo struct {
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	ClipId  *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetClipId(v string) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetContent(v string) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetFrom(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetTimestamp(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo) SetTo(v float64) *SearchMediaResponseBodyMediaInfoListAiDataAsrInfo {
	s.To = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiDataOcrInfo struct {
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB2B9F
	ClipId  *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetClipId(v string) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetContent(v string) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetFrom(v float64) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetTimestamp(v float64) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo) SetTo(v float64) *SearchMediaResponseBodyMediaInfoListAiDataOcrInfo {
	s.To = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListAiRoughData struct {
	// 电视剧
	//
	// example:
	//
	// 视频AI分类
	AiCategory *string `json:"AiCategory,omitempty" xml:"AiCategory,omitempty"`
	// example:
	//
	// cd35b0b0025f71edbfcb472190a9xxxx
	AiJobId *string `json:"AiJobId,omitempty" xml:"AiJobId,omitempty"`
	// example:
	//
	// http://xxxx.json
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// TEXT
	SaveType *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	// example:
	//
	// SaveSuccess
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListAiRoughData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListAiRoughData) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetAiCategory(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.AiCategory = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetAiJobId(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.AiJobId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetResult(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.Result = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetSaveType(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.SaveType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListAiRoughData) SetStatus(v string) *SearchMediaResponseBodyMediaInfoListAiRoughData {
	s.Status = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListFileInfoList struct {
	FileBasicInfo *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoList) SetFileBasicInfo(v *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) *SearchMediaResponseBodyMediaInfoListFileInfoList {
	s.FileBasicInfo = v
	return s
}

type SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo struct {
	// example:
	//
	// 1912.13
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2022-05-30T02:02:17Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 60.00000
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 164265080291300080527050.wav
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 324784
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// https://outin-d3f4681ddfd911ec99a600163e1403e7.oss-cn-shanghai.aliyuncs.com/sv/23d5cdd1-18180984899/23d5cdd1-18180984899.mp4
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// mov,mp4,m4a,3gp,3g2,mj2
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 480
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2021-12-10T12:19Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// cn-beijing
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetBitrate(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetCreateTime(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetDuration(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileName(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileSize(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileStatus(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileType(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileUrl(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFormatName(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetHeight(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetModifiedTime(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetRegion(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetWidth(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListMediaBasicInfo struct {
	// example:
	//
	// IMS
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// example:
	//
	// opening
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// 44
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// example:
	//
	// image
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// https://dtlive-bj.oss-cn-beijing.aliyuncs.com/cover/e694372e-4f5b-4821-ae09-efd064f27b63_large_cover_url.jpg
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-01T19:48Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-01T19:48Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// oss://clipres/longvideo/material/voice/prod/20220418/07d7c799f6054dc3bbef250854cf84981650248140427
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// 132bd600fc3c71ec99476732a78f6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// tags,tags2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-01T19:48Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// 123-123
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"3","iceJobId":"******f48f0e4154976b2b8c45******","location":"oss-cn-beijing","snapshotRegular":"example.jpg","templateId":"******e6a6440b29eb60bd7c******"}]
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Title  *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// Init
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// example:
	//
	// general
	UploadSource *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetBiz(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetBusinessType(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCateId(v int64) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCateName(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CateName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCategory(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCoverURL(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCreateTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetDeletedTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetDescription(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetInputURL(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaId(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaTags(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaType(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetModifiedTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetReferenceId(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.ReferenceId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSnapshots(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSource(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSpriteImages(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetStatus(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetTitle(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetTranscodeStatus(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetUploadSource(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetUserData(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.UserData = &v
	return s
}

type SearchMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaResponse) SetHeaders(v map[string]*string) *SearchMediaResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaResponse) SetStatusCode(v int32) *SearchMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaResponse) SetBody(v *SearchMediaResponseBody) *SearchMediaResponse {
	s.Body = v
	return s
}

type SearchMediaByAILabelRequest struct {
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// Ocr
	MultimodalSearchType *string `json:"MultimodalSearchType,omitempty" xml:"MultimodalSearchType,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	// example:
	//
	// CreationTime:Desc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// example:
	//
	// true
	SpecificSearch *bool   `json:"SpecificSearch,omitempty" xml:"SpecificSearch,omitempty"`
	Text           *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SearchMediaByAILabelRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelRequest) SetMediaId(v string) *SearchMediaByAILabelRequest {
	s.MediaId = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetMediaType(v string) *SearchMediaByAILabelRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetMultimodalSearchType(v string) *SearchMediaByAILabelRequest {
	s.MultimodalSearchType = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetPageNo(v int32) *SearchMediaByAILabelRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetPageSize(v int32) *SearchMediaByAILabelRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetSearchLibName(v string) *SearchMediaByAILabelRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetSortBy(v string) *SearchMediaByAILabelRequest {
	s.SortBy = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetSpecificSearch(v bool) *SearchMediaByAILabelRequest {
	s.SpecificSearch = &v
	return s
}

func (s *SearchMediaByAILabelRequest) SetText(v string) *SearchMediaByAILabelRequest {
	s.Text = &v
	return s
}

type SearchMediaByAILabelResponseBody struct {
	// example:
	//
	// 200
	Code      *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaList []*SearchMediaByAILabelResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 30
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByAILabelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBody) SetCode(v string) *SearchMediaByAILabelResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetMediaList(v []*SearchMediaByAILabelResponseBodyMediaList) *SearchMediaByAILabelResponseBody {
	s.MediaList = v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetRequestId(v string) *SearchMediaByAILabelResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetSuccess(v string) *SearchMediaByAILabelResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByAILabelResponseBody) SetTotal(v int64) *SearchMediaByAILabelResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaList struct {
	AiData *SearchMediaByAILabelResponseBodyMediaListAiData `json:"AiData,omitempty" xml:"AiData,omitempty" type:"Struct"`
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// http://example.aliyundoc.com/snapshot/****.jpg?auth_key=1498476426-0-0-f00b9455c49a423ce69cf4e27333****
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 2017-11-14T09:15:50Z
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 12.2
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1c6ce34007d571ed94667630a6bc****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 2017-11-14T09:15:50Z
	ModificationTime *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	// example:
	//
	// 10897890
	Size      *int64    `json:"Size,omitempty" xml:"Size,omitempty"`
	Snapshots []*string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty" type:"Repeated"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// out-****.oss-cn-shanghai.aliyuncs.com
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	Tags            *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	Title           *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetAiData(v *SearchMediaByAILabelResponseBodyMediaListAiData) *SearchMediaByAILabelResponseBodyMediaList {
	s.AiData = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetAppId(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.AppId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetCoverUrl(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.CoverUrl = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetCreationTime(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.CreationTime = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetDescription(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Description = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetDuration(v float32) *SearchMediaByAILabelResponseBodyMediaList {
	s.Duration = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetMediaId(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.MediaId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetModificationTime(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.ModificationTime = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetSize(v int64) *SearchMediaByAILabelResponseBodyMediaList {
	s.Size = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetSnapshots(v []*string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Snapshots = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetStatus(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Status = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetStorageLocation(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.StorageLocation = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetTags(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Tags = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaList) SetTitle(v string) *SearchMediaByAILabelResponseBodyMediaList {
	s.Title = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiData struct {
	AiLabelInfo []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo `json:"AiLabelInfo,omitempty" xml:"AiLabelInfo,omitempty" type:"Repeated"`
	AsrInfo     []*SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo     `json:"AsrInfo,omitempty" xml:"AsrInfo,omitempty" type:"Repeated"`
	OcrInfo     []*SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo     `json:"OcrInfo,omitempty" xml:"OcrInfo,omitempty" type:"Repeated"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiData) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiData) SetAiLabelInfo(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) *SearchMediaByAILabelResponseBodyMediaListAiData {
	s.AiLabelInfo = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiData) SetAsrInfo(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) *SearchMediaByAILabelResponseBodyMediaListAiData {
	s.AsrInfo = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiData) SetOcrInfo(v []*SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) *SearchMediaByAILabelResponseBodyMediaListAiData {
	s.OcrInfo = v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB****
	FaceId *string `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
	// example:
	//
	// 103102503**
	LabelId     *string                                                                  `json:"LabelId,omitempty" xml:"LabelId,omitempty"`
	LabelName   *string                                                                  `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
	LabelType   *string                                                                  `json:"LabelType,omitempty" xml:"LabelType,omitempty"`
	Occurrences []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences `json:"Occurrences,omitempty" xml:"Occurrences,omitempty" type:"Repeated"`
	// example:
	//
	// vision
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetCategory(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.Category = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetFaceId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.FaceId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetLabelId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.LabelId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetLabelName(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.LabelName = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetLabelType(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.LabelType = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetOccurrences(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.Occurrences = v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo) SetSource(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfo {
	s.Source = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences struct {
	// example:
	//
	// 158730355E4B82257D8AA1583A58****
	ClipId  *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 103102503**
	FinegrainId   *string `json:"FinegrainId,omitempty" xml:"FinegrainId,omitempty"`
	FinegrainName *string `json:"FinegrainName,omitempty" xml:"FinegrainName,omitempty"`
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// https://service-****-public.oss-cn-hangzhou.aliyuncs.com/1563457****438522/service-image/f788974f-9595-43b2-a478-7c7a1afb****.jpg
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
	// example:
	//
	// 0.75287705
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// 85010D1**
	TableBatchSeqId *string `json:"TableBatchSeqId,omitempty" xml:"TableBatchSeqId,omitempty"`
	// example:
	//
	// 2.5
	To     *float64                                                                       `json:"To,omitempty" xml:"To,omitempty"`
	Tracks []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks `json:"Tracks,omitempty" xml:"Tracks,omitempty" type:"Repeated"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetClipId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.ClipId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetContent(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Content = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetFinegrainId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.FinegrainId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetFinegrainName(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.FinegrainName = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetFrom(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.From = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetImage(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Image = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetScore(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Score = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetTableBatchSeqId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.TableBatchSeqId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetTo(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.To = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences) SetTracks(v []*SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrences {
	s.Tracks = v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks struct {
	// example:
	//
	// 468.0;67.0;615.0;267.0
	Position *string `json:"Position,omitempty" xml:"Position,omitempty"`
	// example:
	//
	// 50
	Size *float64 `json:"Size,omitempty" xml:"Size,omitempty"`
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) SetPosition(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks {
	s.Position = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) SetSize(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks {
	s.Size = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks) SetTimestamp(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAiLabelInfoOccurrencesTracks {
	s.Timestamp = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo struct {
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB****
	ClipId  *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetClipId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetContent(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetFrom(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetTimestamp(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo) SetTo(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataAsrInfo {
	s.To = &v
	return s
}

type SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo struct {
	// example:
	//
	// 5FE19530C7A422197535FE74F5DB****
	ClipId  *string `json:"ClipId,omitempty" xml:"ClipId,omitempty"`
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.4
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 1.4
	Timestamp *float64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// example:
	//
	// 2.5
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetClipId(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.ClipId = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetContent(v string) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.Content = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetFrom(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetTimestamp(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.Timestamp = &v
	return s
}

func (s *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo) SetTo(v float64) *SearchMediaByAILabelResponseBodyMediaListAiDataOcrInfo {
	s.To = &v
	return s
}

type SearchMediaByAILabelResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByAILabelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByAILabelResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByAILabelResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByAILabelResponse) SetHeaders(v map[string]*string) *SearchMediaByAILabelResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByAILabelResponse) SetStatusCode(v int32) *SearchMediaByAILabelResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByAILabelResponse) SetBody(v *SearchMediaByAILabelResponseBody) *SearchMediaByAILabelResponse {
	s.Body = v
	return s
}

type SearchMediaByFaceRequest struct {
	// example:
	//
	// 2d3bf1e35a1e42b5ab338d701efa****
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// zxtest-huangxuan-2023-3-7-V1
	FaceSearchToken *string `json:"FaceSearchToken,omitempty" xml:"FaceSearchToken,omitempty"`
	MediaType       *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://****.oss-cn-shanghai.aliyuncs.com/input/huangxuan****.jpg
	PersonImageUrl *string `json:"PersonImageUrl,omitempty" xml:"PersonImageUrl,omitempty"`
	SearchLibName  *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s SearchMediaByFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceRequest) SetEntityId(v string) *SearchMediaByFaceRequest {
	s.EntityId = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetFaceSearchToken(v string) *SearchMediaByFaceRequest {
	s.FaceSearchToken = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetMediaType(v string) *SearchMediaByFaceRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetPageNo(v int32) *SearchMediaByFaceRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetPageSize(v int32) *SearchMediaByFaceRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetPersonImageUrl(v string) *SearchMediaByFaceRequest {
	s.PersonImageUrl = &v
	return s
}

func (s *SearchMediaByFaceRequest) SetSearchLibName(v string) *SearchMediaByFaceRequest {
	s.SearchLibName = &v
	return s
}

type SearchMediaByFaceResponseBody struct {
	// example:
	//
	// 200
	Code          *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaInfoList []*SearchMediaByFaceResponseBodyMediaInfoList `json:"MediaInfoList,omitempty" xml:"MediaInfoList,omitempty" type:"Repeated"`
	// example:
	//
	// 7CA7D615-CFB1-5437-9A12-2D185C3EE6CB
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 163
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByFaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceResponseBody) SetCode(v string) *SearchMediaByFaceResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetMediaInfoList(v []*SearchMediaByFaceResponseBodyMediaInfoList) *SearchMediaByFaceResponseBody {
	s.MediaInfoList = v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetRequestId(v string) *SearchMediaByFaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetSuccess(v string) *SearchMediaByFaceResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByFaceResponseBody) SetTotal(v int64) *SearchMediaByFaceResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByFaceResponseBodyMediaInfoList struct {
	// example:
	//
	// 3b187b3620c8490886cfc2a9578c****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaByFaceResponseBodyMediaInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceResponseBodyMediaInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceResponseBodyMediaInfoList) SetMediaId(v string) *SearchMediaByFaceResponseBodyMediaInfoList {
	s.MediaId = &v
	return s
}

type SearchMediaByFaceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByFaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByFaceResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByFaceResponse) SetHeaders(v map[string]*string) *SearchMediaByFaceResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByFaceResponse) SetStatusCode(v int32) *SearchMediaByFaceResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByFaceResponse) SetBody(v *SearchMediaByFaceResponseBody) *SearchMediaByFaceResponse {
	s.Body = v
	return s
}

type SearchMediaByHybridRequest struct {
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 20
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// test-1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	Text          *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SearchMediaByHybridRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridRequest) SetMediaId(v string) *SearchMediaByHybridRequest {
	s.MediaId = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetMediaType(v string) *SearchMediaByHybridRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetPageNo(v int32) *SearchMediaByHybridRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetPageSize(v int32) *SearchMediaByHybridRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetSearchLibName(v string) *SearchMediaByHybridRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaByHybridRequest) SetText(v string) *SearchMediaByHybridRequest {
	s.Text = &v
	return s
}

type SearchMediaByHybridResponseBody struct {
	// example:
	//
	// 200
	Code      *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaList []*SearchMediaByHybridResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 30
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByHybridResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponseBody) SetCode(v string) *SearchMediaByHybridResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetMediaList(v []*SearchMediaByHybridResponseBodyMediaList) *SearchMediaByHybridResponseBody {
	s.MediaList = v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetRequestId(v string) *SearchMediaByHybridResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetSuccess(v string) *SearchMediaByHybridResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByHybridResponseBody) SetTotal(v int64) *SearchMediaByHybridResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByHybridResponseBodyMediaList struct {
	ClipInfo []*SearchMediaByHybridResponseBodyMediaListClipInfo `json:"ClipInfo,omitempty" xml:"ClipInfo,omitempty" type:"Repeated"`
	// example:
	//
	// a18936e0e28771edb59ae6f6f47a****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaByHybridResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponseBodyMediaList) SetClipInfo(v []*SearchMediaByHybridResponseBodyMediaListClipInfo) *SearchMediaByHybridResponseBodyMediaList {
	s.ClipInfo = v
	return s
}

func (s *SearchMediaByHybridResponseBodyMediaList) SetMediaId(v string) *SearchMediaByHybridResponseBodyMediaList {
	s.MediaId = &v
	return s
}

type SearchMediaByHybridResponseBodyMediaListClipInfo struct {
	// example:
	//
	// 2
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 0.99
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// 4
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByHybridResponseBodyMediaListClipInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponseBodyMediaListClipInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponseBodyMediaListClipInfo) SetFrom(v float64) *SearchMediaByHybridResponseBodyMediaListClipInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByHybridResponseBodyMediaListClipInfo) SetScore(v float64) *SearchMediaByHybridResponseBodyMediaListClipInfo {
	s.Score = &v
	return s
}

func (s *SearchMediaByHybridResponseBodyMediaListClipInfo) SetTo(v float64) *SearchMediaByHybridResponseBodyMediaListClipInfo {
	s.To = &v
	return s
}

type SearchMediaByHybridResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByHybridResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByHybridResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByHybridResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByHybridResponse) SetHeaders(v map[string]*string) *SearchMediaByHybridResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByHybridResponse) SetStatusCode(v int32) *SearchMediaByHybridResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByHybridResponse) SetBody(v *SearchMediaByHybridResponseBody) *SearchMediaByHybridResponse {
	s.Body = v
	return s
}

type SearchMediaByMultimodalRequest struct {
	// example:
	//
	// video
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// test-1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
	Text          *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s SearchMediaByMultimodalRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalRequest) SetMediaType(v string) *SearchMediaByMultimodalRequest {
	s.MediaType = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetPageNo(v int32) *SearchMediaByMultimodalRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetPageSize(v int32) *SearchMediaByMultimodalRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetSearchLibName(v string) *SearchMediaByMultimodalRequest {
	s.SearchLibName = &v
	return s
}

func (s *SearchMediaByMultimodalRequest) SetText(v string) *SearchMediaByMultimodalRequest {
	s.Text = &v
	return s
}

type SearchMediaByMultimodalResponseBody struct {
	// example:
	//
	// 200
	Code      *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaList []*SearchMediaByMultimodalResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Repeated"`
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 20
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaByMultimodalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponseBody) SetCode(v string) *SearchMediaByMultimodalResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetMediaList(v []*SearchMediaByMultimodalResponseBodyMediaList) *SearchMediaByMultimodalResponseBody {
	s.MediaList = v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetRequestId(v string) *SearchMediaByMultimodalResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetSuccess(v string) *SearchMediaByMultimodalResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBody) SetTotal(v int64) *SearchMediaByMultimodalResponseBody {
	s.Total = &v
	return s
}

type SearchMediaByMultimodalResponseBodyMediaList struct {
	ClipInfo []*SearchMediaByMultimodalResponseBodyMediaListClipInfo `json:"ClipInfo,omitempty" xml:"ClipInfo,omitempty" type:"Repeated"`
	// example:
	//
	// a18936e0e28771edb59ae6f6f47a****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaByMultimodalResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponseBodyMediaList) SetClipInfo(v []*SearchMediaByMultimodalResponseBodyMediaListClipInfo) *SearchMediaByMultimodalResponseBodyMediaList {
	s.ClipInfo = v
	return s
}

func (s *SearchMediaByMultimodalResponseBodyMediaList) SetMediaId(v string) *SearchMediaByMultimodalResponseBodyMediaList {
	s.MediaId = &v
	return s
}

type SearchMediaByMultimodalResponseBodyMediaListClipInfo struct {
	// example:
	//
	// 2
	From *float64 `json:"From,omitempty" xml:"From,omitempty"`
	// example:
	//
	// 1.2
	Score *float64 `json:"Score,omitempty" xml:"Score,omitempty"`
	// example:
	//
	// 4
	To *float64 `json:"To,omitempty" xml:"To,omitempty"`
}

func (s SearchMediaByMultimodalResponseBodyMediaListClipInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponseBodyMediaListClipInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponseBodyMediaListClipInfo) SetFrom(v float64) *SearchMediaByMultimodalResponseBodyMediaListClipInfo {
	s.From = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBodyMediaListClipInfo) SetScore(v float64) *SearchMediaByMultimodalResponseBodyMediaListClipInfo {
	s.Score = &v
	return s
}

func (s *SearchMediaByMultimodalResponseBodyMediaListClipInfo) SetTo(v float64) *SearchMediaByMultimodalResponseBodyMediaListClipInfo {
	s.To = &v
	return s
}

type SearchMediaByMultimodalResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaByMultimodalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaByMultimodalResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaByMultimodalResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaByMultimodalResponse) SetHeaders(v map[string]*string) *SearchMediaByMultimodalResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaByMultimodalResponse) SetStatusCode(v int32) *SearchMediaByMultimodalResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaByMultimodalResponse) SetBody(v *SearchMediaByMultimodalResponseBody) *SearchMediaByMultimodalResponse {
	s.Body = v
	return s
}

type SearchMediaClipByFaceRequest struct {
	// example:
	//
	// 2d3bf1e35a1e42b5ab338d701efa****
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// zxtest-huangxuan-2023-3-7-V1
	FaceSearchToken *string `json:"FaceSearchToken,omitempty" xml:"FaceSearchToken,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3b187b3620c8490886cfc2a9578c****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize      *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s SearchMediaClipByFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceRequest) SetEntityId(v string) *SearchMediaClipByFaceRequest {
	s.EntityId = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetFaceSearchToken(v string) *SearchMediaClipByFaceRequest {
	s.FaceSearchToken = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetMediaId(v string) *SearchMediaClipByFaceRequest {
	s.MediaId = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetPageNo(v int32) *SearchMediaClipByFaceRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetPageSize(v int32) *SearchMediaClipByFaceRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaClipByFaceRequest) SetSearchLibName(v string) *SearchMediaClipByFaceRequest {
	s.SearchLibName = &v
	return s
}

type SearchMediaClipByFaceResponseBody struct {
	// example:
	//
	// 200
	Code          *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaClipList []*SearchMediaClipByFaceResponseBodyMediaClipList `json:"MediaClipList,omitempty" xml:"MediaClipList,omitempty" type:"Repeated"`
	// example:
	//
	// E44FFACD-9E90-555A-A09A-6FD3B7335E39
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// example:
	//
	// 5
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaClipByFaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBody) SetCode(v string) *SearchMediaClipByFaceResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetMediaClipList(v []*SearchMediaClipByFaceResponseBodyMediaClipList) *SearchMediaClipByFaceResponseBody {
	s.MediaClipList = v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetRequestId(v string) *SearchMediaClipByFaceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetSuccess(v string) *SearchMediaClipByFaceResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBody) SetTotal(v int64) *SearchMediaClipByFaceResponseBody {
	s.Total = &v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipList struct {
	// example:
	//
	// celebrity
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// 1031025****
	EntityId         *string                                                           `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	LabelName        *string                                                           `json:"LabelName,omitempty" xml:"LabelName,omitempty"`
	OccurrencesInfos []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos `json:"OccurrencesInfos,omitempty" xml:"OccurrencesInfos,omitempty" type:"Repeated"`
	// example:
	//
	// 0.99041677
	Score *float32 `json:"Score,omitempty" xml:"Score,omitempty"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipList) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetCategory(v string) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.Category = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetEntityId(v string) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.EntityId = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetLabelName(v string) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.LabelName = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetOccurrencesInfos(v []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.OccurrencesInfos = v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipList) SetScore(v float32) *SearchMediaClipByFaceResponseBodyMediaClipList {
	s.Score = &v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos struct {
	// example:
	//
	// 69.06635
	EndTime *float32 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 61.066353
	StartTime *float32                                                                   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TrackData []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData `json:"TrackData,omitempty" xml:"TrackData,omitempty" type:"Repeated"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) SetEndTime(v float32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos {
	s.EndTime = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) SetStartTime(v float32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos {
	s.StartTime = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos) SetTrackData(v []*SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfos {
	s.TrackData = v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData struct {
	BoxPosition *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition `json:"BoxPosition,omitempty" xml:"BoxPosition,omitempty" type:"Struct"`
	// example:
	//
	// 62.03302
	Timestamp *float32 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) SetBoxPosition(v *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData {
	s.BoxPosition = v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData) SetTimestamp(v float32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackData {
	s.Timestamp = &v
	return s
}

type SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition struct {
	// example:
	//
	// 168
	H *int32 `json:"H,omitempty" xml:"H,omitempty"`
	// example:
	//
	// 128
	W *int32 `json:"W,omitempty" xml:"W,omitempty"`
	// example:
	//
	// 517
	X *int32 `json:"X,omitempty" xml:"X,omitempty"`
	// example:
	//
	// 409
	Y *int32 `json:"Y,omitempty" xml:"Y,omitempty"`
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetH(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.H = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetW(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.W = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetX(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.X = &v
	return s
}

func (s *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition) SetY(v int32) *SearchMediaClipByFaceResponseBodyMediaClipListOccurrencesInfosTrackDataBoxPosition {
	s.Y = &v
	return s
}

type SearchMediaClipByFaceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchMediaClipByFaceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchMediaClipByFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaClipByFaceResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaClipByFaceResponse) SetHeaders(v map[string]*string) *SearchMediaClipByFaceResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaClipByFaceResponse) SetStatusCode(v int32) *SearchMediaClipByFaceResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaClipByFaceResponse) SetBody(v *SearchMediaClipByFaceResponseBody) *SearchMediaClipByFaceResponse {
	s.Body = v
	return s
}

type SearchPublicMediaInfoRequest struct {
	// example:
	//
	// true
	Authorized *bool `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	// example:
	//
	// "ApprovalStatus=\\"Available\\"&amp;MaterialBags=\\"boutiquemusic\\"&amp;Mood=\\"Nervous\\""
	DynamicMetaDataMatchFields *string `json:"DynamicMetaDataMatchFields,omitempty" xml:"DynamicMetaDataMatchFields,omitempty"`
	// example:
	//
	// Copyright_Music
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// example:
	//
	// true
	Favorite *bool `json:"Favorite,omitempty" xml:"Favorite,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****,****15d4a4b0448391508f2cb486****
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	// example:
	//
	// 1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// example:
	//
	// 10
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// example:
	//
	// UsageCount:Desc,UnitPrice:Asc
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s SearchPublicMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoRequest) SetAuthorized(v bool) *SearchPublicMediaInfoRequest {
	s.Authorized = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetDynamicMetaDataMatchFields(v string) *SearchPublicMediaInfoRequest {
	s.DynamicMetaDataMatchFields = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetEntityId(v string) *SearchPublicMediaInfoRequest {
	s.EntityId = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetFavorite(v bool) *SearchPublicMediaInfoRequest {
	s.Favorite = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetMediaIds(v string) *SearchPublicMediaInfoRequest {
	s.MediaIds = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetPageNo(v int32) *SearchPublicMediaInfoRequest {
	s.PageNo = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetPageSize(v int32) *SearchPublicMediaInfoRequest {
	s.PageSize = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetSortBy(v string) *SearchPublicMediaInfoRequest {
	s.SortBy = &v
	return s
}

type SearchPublicMediaInfoResponseBody struct {
	PublicMediaInfos []*SearchPublicMediaInfoResponseBodyPublicMediaInfos `json:"PublicMediaInfos,omitempty" xml:"PublicMediaInfos,omitempty" type:"Repeated"`
	// example:
	//
	// ****3CFB-2767-54FD-B311-BD15A4C1****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// 100
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchPublicMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBody) SetPublicMediaInfos(v []*SearchPublicMediaInfoResponseBodyPublicMediaInfos) *SearchPublicMediaInfoResponseBody {
	s.PublicMediaInfos = v
	return s
}

func (s *SearchPublicMediaInfoResponseBody) SetRequestId(v string) *SearchPublicMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBody) SetTotalCount(v int64) *SearchPublicMediaInfoResponseBody {
	s.TotalCount = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfos struct {
	// example:
	//
	// true
	Authorized *bool `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	// example:
	//
	// true
	Favorite  *bool                                                       `json:"Favorite,omitempty" xml:"Favorite,omitempty"`
	MediaInfo *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// example:
	//
	// 100
	RemainingAuthTime *string `json:"RemainingAuthTime,omitempty" xml:"RemainingAuthTime,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfos) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetAuthorized(v bool) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.Authorized = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetFavorite(v bool) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.Favorite = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetMediaInfo(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.MediaInfo = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetRemainingAuthTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.RemainingAuthTime = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo struct {
	DynamicMetaData *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData `json:"DynamicMetaData,omitempty" xml:"DynamicMetaData,omitempty" type:"Struct"`
	// BasicInfo
	MediaBasicInfo *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// example:
	//
	// icepublic-****87b921bb4a55908a72a0537e****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetDynamicMetaData(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.DynamicMetaData = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetMediaBasicInfo(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetMediaId(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.MediaId = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData struct {
	// example:
	//
	// "{\\"AuditionUrl\\": \\"http://xxx\\", \\"AuditionCount\\": 3...}"
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// example:
	//
	// system
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) SetData(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData {
	s.Data = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) SetType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData {
	s.Type = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo struct {
	// example:
	//
	// general
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// category
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png?Expires=<ExpireTime>&OSSAccessKeyId=<OSSAccessKeyId>&Signature=<Signature>&security-token=<SecurityToken>
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// 2020-12-26T06:04:49Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2020-12-29T06:04:49Z
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// MediaId
	//
	// example:
	//
	// icepublic-****87b921bb4a55908a72a0537e****
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// audio
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// example:
	//
	// 2020-12-26T06:04:50Z
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// example:
	//
	// oss
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// [{"bucket":"example-bucket","count":"32","iceJobId":"******83ec44d58b2069def2e******","location":"oss-cn-shanghai","snapshotRegular":"example/example-{Count}.jpg","spriteRegular":"example/example-{TileCount}.jpg","templateId":"******e438b14ff39293eaec25******","tileCount":"1"}]
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// example:
	//
	// Normal
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// title
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// userDataTest
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetBusinessType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCategory(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCoverURL(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCreateTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetDeletedTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetDescription(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaId(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaTags(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetModifiedTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetSource(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetSpriteImages(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetStatus(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetTitle(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetUserData(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type SearchPublicMediaInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SearchPublicMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SearchPublicMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponse) SetHeaders(v map[string]*string) *SearchPublicMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *SearchPublicMediaInfoResponse) SetStatusCode(v int32) *SearchPublicMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchPublicMediaInfoResponse) SetBody(v *SearchPublicMediaInfoResponseBody) *SearchPublicMediaInfoResponse {
	s.Body = v
	return s
}

type SendLiveSnapshotJobCommandRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// start
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SendLiveSnapshotJobCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s SendLiveSnapshotJobCommandRequest) GoString() string {
	return s.String()
}

func (s *SendLiveSnapshotJobCommandRequest) SetCommand(v string) *SendLiveSnapshotJobCommandRequest {
	s.Command = &v
	return s
}

func (s *SendLiveSnapshotJobCommandRequest) SetJobId(v string) *SendLiveSnapshotJobCommandRequest {
	s.JobId = &v
	return s
}

type SendLiveSnapshotJobCommandResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendLiveSnapshotJobCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendLiveSnapshotJobCommandResponseBody) GoString() string {
	return s.String()
}

func (s *SendLiveSnapshotJobCommandResponseBody) SetRequestId(v string) *SendLiveSnapshotJobCommandResponseBody {
	s.RequestId = &v
	return s
}

type SendLiveSnapshotJobCommandResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendLiveSnapshotJobCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendLiveSnapshotJobCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s SendLiveSnapshotJobCommandResponse) GoString() string {
	return s.String()
}

func (s *SendLiveSnapshotJobCommandResponse) SetHeaders(v map[string]*string) *SendLiveSnapshotJobCommandResponse {
	s.Headers = v
	return s
}

func (s *SendLiveSnapshotJobCommandResponse) SetStatusCode(v int32) *SendLiveSnapshotJobCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *SendLiveSnapshotJobCommandResponse) SetBody(v *SendLiveSnapshotJobCommandResponseBody) *SendLiveSnapshotJobCommandResponse {
	s.Body = v
	return s
}

type SendLiveTranscodeJobCommandRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// stop
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SendLiveTranscodeJobCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandRequest) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandRequest) SetCommand(v string) *SendLiveTranscodeJobCommandRequest {
	s.Command = &v
	return s
}

func (s *SendLiveTranscodeJobCommandRequest) SetJobId(v string) *SendLiveTranscodeJobCommandRequest {
	s.JobId = &v
	return s
}

type SendLiveTranscodeJobCommandResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendLiveTranscodeJobCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandResponseBody) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandResponseBody) SetRequestId(v string) *SendLiveTranscodeJobCommandResponseBody {
	s.RequestId = &v
	return s
}

type SendLiveTranscodeJobCommandResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SendLiveTranscodeJobCommandResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SendLiveTranscodeJobCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandResponse) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandResponse) SetHeaders(v map[string]*string) *SendLiveTranscodeJobCommandResponse {
	s.Headers = v
	return s
}

func (s *SendLiveTranscodeJobCommandResponse) SetStatusCode(v int32) *SendLiveTranscodeJobCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *SendLiveTranscodeJobCommandResponse) SetBody(v *SendLiveTranscodeJobCommandResponseBody) *SendLiveTranscodeJobCommandResponse {
	s.Body = v
	return s
}

type SetContentAnalyzeConfigRequest struct {
	// example:
	//
	// true
	Auto *bool `json:"Auto,omitempty" xml:"Auto,omitempty"`
	// example:
	//
	// TEXT,FACE
	SaveType *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	// example:
	//
	// S00000101-100070
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SetContentAnalyzeConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetContentAnalyzeConfigRequest) GoString() string {
	return s.String()
}

func (s *SetContentAnalyzeConfigRequest) SetAuto(v bool) *SetContentAnalyzeConfigRequest {
	s.Auto = &v
	return s
}

func (s *SetContentAnalyzeConfigRequest) SetSaveType(v string) *SetContentAnalyzeConfigRequest {
	s.SaveType = &v
	return s
}

func (s *SetContentAnalyzeConfigRequest) SetTemplateId(v string) *SetContentAnalyzeConfigRequest {
	s.TemplateId = &v
	return s
}

type SetContentAnalyzeConfigResponseBody struct {
	// example:
	//
	// 953CFD27-4A2C-54AD-857F-B79EF3A338E0
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetContentAnalyzeConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetContentAnalyzeConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetContentAnalyzeConfigResponseBody) SetRequestId(v string) *SetContentAnalyzeConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetContentAnalyzeConfigResponseBody) SetSuccess(v bool) *SetContentAnalyzeConfigResponseBody {
	s.Success = &v
	return s
}

type SetContentAnalyzeConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetContentAnalyzeConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetContentAnalyzeConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetContentAnalyzeConfigResponse) GoString() string {
	return s.String()
}

func (s *SetContentAnalyzeConfigResponse) SetHeaders(v map[string]*string) *SetContentAnalyzeConfigResponse {
	s.Headers = v
	return s
}

func (s *SetContentAnalyzeConfigResponse) SetStatusCode(v int32) *SetContentAnalyzeConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetContentAnalyzeConfigResponse) SetBody(v *SetContentAnalyzeConfigResponseBody) *SetContentAnalyzeConfigResponse {
	s.Body = v
	return s
}

type SetDefaultCustomTemplateRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SetDefaultCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateRequest) SetTemplateId(v string) *SetDefaultCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type SetDefaultCustomTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetDefaultCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateResponseBody) SetRequestId(v string) *SetDefaultCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDefaultCustomTemplateResponseBody) SetSuccess(v bool) *SetDefaultCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type SetDefaultCustomTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDefaultCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDefaultCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateResponse) SetHeaders(v map[string]*string) *SetDefaultCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *SetDefaultCustomTemplateResponse) SetStatusCode(v int32) *SetDefaultCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDefaultCustomTemplateResponse) SetBody(v *SetDefaultCustomTemplateResponseBody) *SetDefaultCustomTemplateResponse {
	s.Body = v
	return s
}

type SetDefaultStorageLocationRequest struct {
	// example:
	//
	// oss-test-bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// ims/dir
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// user_oss_bucket
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s SetDefaultStorageLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationRequest) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationRequest) SetBucket(v string) *SetDefaultStorageLocationRequest {
	s.Bucket = &v
	return s
}

func (s *SetDefaultStorageLocationRequest) SetPath(v string) *SetDefaultStorageLocationRequest {
	s.Path = &v
	return s
}

func (s *SetDefaultStorageLocationRequest) SetStorageType(v string) *SetDefaultStorageLocationRequest {
	s.StorageType = &v
	return s
}

type SetDefaultStorageLocationResponseBody struct {
	// example:
	//
	// ******5A-CAAC-4850-A3AF-B74606******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetDefaultStorageLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationResponseBody) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationResponseBody) SetRequestId(v string) *SetDefaultStorageLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDefaultStorageLocationResponseBody) SetSuccess(v bool) *SetDefaultStorageLocationResponseBody {
	s.Success = &v
	return s
}

type SetDefaultStorageLocationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetDefaultStorageLocationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetDefaultStorageLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationResponse) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationResponse) SetHeaders(v map[string]*string) *SetDefaultStorageLocationResponse {
	s.Headers = v
	return s
}

func (s *SetDefaultStorageLocationResponse) SetStatusCode(v int32) *SetDefaultStorageLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDefaultStorageLocationResponse) SetBody(v *SetDefaultStorageLocationResponseBody) *SetDefaultStorageLocationResponse {
	s.Body = v
	return s
}

type SetEventCallbackRequest struct {
	// example:
	//
	// TestKey001
	AuthKey *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	// example:
	//
	// on
	AuthSwitch *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	// example:
	//
	// ice-callback-queue
	CallbackQueueName *string `json:"CallbackQueueName,omitempty" xml:"CallbackQueueName,omitempty"`
	// example:
	//
	// HTTP
	CallbackType *string `json:"CallbackType,omitempty" xml:"CallbackType,omitempty"`
	// example:
	//
	// http://xxx.yyy/callback
	CallbackURL *string `json:"CallbackURL,omitempty" xml:"CallbackURL,omitempty"`
	// example:
	//
	// ProduceMediaComplete
	EventTypeList *string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty"`
}

func (s SetEventCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackRequest) GoString() string {
	return s.String()
}

func (s *SetEventCallbackRequest) SetAuthKey(v string) *SetEventCallbackRequest {
	s.AuthKey = &v
	return s
}

func (s *SetEventCallbackRequest) SetAuthSwitch(v string) *SetEventCallbackRequest {
	s.AuthSwitch = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackQueueName(v string) *SetEventCallbackRequest {
	s.CallbackQueueName = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackType(v string) *SetEventCallbackRequest {
	s.CallbackType = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackURL(v string) *SetEventCallbackRequest {
	s.CallbackURL = &v
	return s
}

func (s *SetEventCallbackRequest) SetEventTypeList(v string) *SetEventCallbackRequest {
	s.EventTypeList = &v
	return s
}

type SetEventCallbackResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetEventCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *SetEventCallbackResponseBody) SetRequestId(v string) *SetEventCallbackResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetEventCallbackResponseBody) SetSuccess(v bool) *SetEventCallbackResponseBody {
	s.Success = &v
	return s
}

type SetEventCallbackResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SetEventCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SetEventCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackResponse) GoString() string {
	return s.String()
}

func (s *SetEventCallbackResponse) SetHeaders(v map[string]*string) *SetEventCallbackResponse {
	s.Headers = v
	return s
}

func (s *SetEventCallbackResponse) SetStatusCode(v int32) *SetEventCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *SetEventCallbackResponse) SetBody(v *SetEventCallbackResponseBody) *SetEventCallbackResponse {
	s.Body = v
	return s
}

type StartWorkflowRequest struct {
	// example:
	//
	// {
	//
	//       "Type": "Media",
	//
	//       "Media": "******30706071edbfe290b488******"
	//
	// }
	TaskInput *string `json:"TaskInput,omitempty" xml:"TaskInput,omitempty"`
	UserData  *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// example:
	//
	// ******f0e54971ecbffd472190******
	WorkflowId *string `json:"WorkflowId,omitempty" xml:"WorkflowId,omitempty"`
}

func (s StartWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowRequest) GoString() string {
	return s.String()
}

func (s *StartWorkflowRequest) SetTaskInput(v string) *StartWorkflowRequest {
	s.TaskInput = &v
	return s
}

func (s *StartWorkflowRequest) SetUserData(v string) *StartWorkflowRequest {
	s.UserData = &v
	return s
}

func (s *StartWorkflowRequest) SetWorkflowId(v string) *StartWorkflowRequest {
	s.WorkflowId = &v
	return s
}

type StartWorkflowResponseBody struct {
	// example:
	//
	// ******42-E8E1-4FBB-8E52-F4225C******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ******22dad741d086a50325f9******
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s StartWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *StartWorkflowResponseBody) SetRequestId(v string) *StartWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartWorkflowResponseBody) SetTaskId(v string) *StartWorkflowResponseBody {
	s.TaskId = &v
	return s
}

type StartWorkflowResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s StartWorkflowResponse) GoString() string {
	return s.String()
}

func (s *StartWorkflowResponse) SetHeaders(v map[string]*string) *StartWorkflowResponse {
	s.Headers = v
	return s
}

func (s *StartWorkflowResponse) SetStatusCode(v int32) *StartWorkflowResponse {
	s.StatusCode = &v
	return s
}

func (s *StartWorkflowResponse) SetBody(v *StartWorkflowResponseBody) *StartWorkflowResponse {
	s.Body = v
	return s
}

type SubmitASRJobRequest struct {
	// example:
	//
	// 测试描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 00:00:10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// oss://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4 或 ****20b48fb04483915d4f2cd8ac****
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
	// example:
	//
	// 00:00:00
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitASRJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitASRJobRequest) SetDescription(v string) *SubmitASRJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitASRJobRequest) SetDuration(v string) *SubmitASRJobRequest {
	s.Duration = &v
	return s
}

func (s *SubmitASRJobRequest) SetInputFile(v string) *SubmitASRJobRequest {
	s.InputFile = &v
	return s
}

func (s *SubmitASRJobRequest) SetStartTime(v string) *SubmitASRJobRequest {
	s.StartTime = &v
	return s
}

func (s *SubmitASRJobRequest) SetTitle(v string) *SubmitASRJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitASRJobRequest) SetUserData(v string) *SubmitASRJobRequest {
	s.UserData = &v
	return s
}

type SubmitASRJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Finished
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitASRJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitASRJobResponseBody) SetJobId(v string) *SubmitASRJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitASRJobResponseBody) SetRequestId(v string) *SubmitASRJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitASRJobResponseBody) SetState(v string) *SubmitASRJobResponseBody {
	s.State = &v
	return s
}

type SubmitASRJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitASRJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitASRJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitASRJobResponse) SetHeaders(v map[string]*string) *SubmitASRJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitASRJobResponse) SetStatusCode(v int32) *SubmitASRJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitASRJobResponse) SetBody(v *SubmitASRJobResponseBody) *SubmitASRJobResponse {
	s.Body = v
	return s
}

type SubmitAudioProduceJobRequest struct {
	// example:
	//
	// 任务描述  长度不超过1024字节  UTF8编码
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"voice":"Siqi","format":"MP3","volume":50}
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 测试文本
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"bucket":"bucket","object":"objeck"}
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// example:
	//
	// true
	Overwrite *bool `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// example:
	//
	// 任务标题。若不提供，根据日期自动生成默认title  长度不超过128字节  UTF8编码
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAudioProduceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobRequest) SetDescription(v string) *SubmitAudioProduceJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetEditingConfig(v string) *SubmitAudioProduceJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetInputConfig(v string) *SubmitAudioProduceJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetOutputConfig(v string) *SubmitAudioProduceJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetOverwrite(v bool) *SubmitAudioProduceJobRequest {
	s.Overwrite = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetTitle(v string) *SubmitAudioProduceJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetUserData(v string) *SubmitAudioProduceJobRequest {
	s.UserData = &v
	return s
}

type SubmitAudioProduceJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****2bcbfcfa30fccb36f72dca22****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Created
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitAudioProduceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobResponseBody) SetJobId(v string) *SubmitAudioProduceJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetMediaId(v string) *SubmitAudioProduceJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetRequestId(v string) *SubmitAudioProduceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetState(v string) *SubmitAudioProduceJobResponseBody {
	s.State = &v
	return s
}

type SubmitAudioProduceJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAudioProduceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAudioProduceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobResponse) SetHeaders(v map[string]*string) *SubmitAudioProduceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAudioProduceJobResponse) SetStatusCode(v int32) *SubmitAudioProduceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAudioProduceJobResponse) SetBody(v *SubmitAudioProduceJobResponseBody) *SubmitAudioProduceJobResponse {
	s.Body = v
	return s
}

type SubmitAvatarTrainingJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobRequest) SetJobId(v string) *SubmitAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

type SubmitAvatarTrainingJobResponseBody struct {
	Data *SubmitAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// *****ACB-44F2-5F2D-88D7-1283E70*****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobResponseBody) SetData(v *SubmitAvatarTrainingJobResponseBodyData) *SubmitAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitAvatarTrainingJobResponseBody) SetRequestId(v string) *SubmitAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAvatarTrainingJobResponseBody) SetSuccess(v bool) *SubmitAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type SubmitAvatarTrainingJobResponseBodyData struct {
	// example:
	//
	// ****29faef8144638ba42eb8e037****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobResponseBodyData) SetJobId(v string) *SubmitAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *SubmitAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAvatarTrainingJobResponse) SetStatusCode(v int32) *SubmitAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAvatarTrainingJobResponse) SetBody(v *SubmitAvatarTrainingJobResponseBody) *SubmitAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type SubmitAvatarVideoJobRequest struct {
	// example:
	//
	// 测试描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// {"AvatarId":"yunqiao"}
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	InputConfig   *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// example:
	//
	// {"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/xxx.mp4","Width":1920,"Height":1080}
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// example:
	//
	// 测试标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {"user":"data","env":"prod"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAvatarVideoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarVideoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAvatarVideoJobRequest) SetDescription(v string) *SubmitAvatarVideoJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetEditingConfig(v string) *SubmitAvatarVideoJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetInputConfig(v string) *SubmitAvatarVideoJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetOutputConfig(v string) *SubmitAvatarVideoJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetTitle(v string) *SubmitAvatarVideoJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitAvatarVideoJobRequest) SetUserData(v string) *SubmitAvatarVideoJobRequest {
	s.UserData = &v
	return s
}

type SubmitAvatarVideoJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******70dcc471edaf00e6f6f4******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitAvatarVideoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarVideoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAvatarVideoJobResponseBody) SetJobId(v string) *SubmitAvatarVideoJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitAvatarVideoJobResponseBody) SetMediaId(v string) *SubmitAvatarVideoJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitAvatarVideoJobResponseBody) SetRequestId(v string) *SubmitAvatarVideoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitAvatarVideoJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitAvatarVideoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitAvatarVideoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAvatarVideoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAvatarVideoJobResponse) SetHeaders(v map[string]*string) *SubmitAvatarVideoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAvatarVideoJobResponse) SetStatusCode(v int32) *SubmitAvatarVideoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAvatarVideoJobResponse) SetBody(v *SubmitAvatarVideoJobResponseBody) *SubmitAvatarVideoJobResponse {
	s.Body = v
	return s
}

type SubmitBatchMediaProducingJobRequest struct {
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// example:
	//
	// {
	//
	//   "MediaConfig": {
	//
	//       "Volume": 0
	//
	//   },
	//
	//   "SpeechConfig": {
	//
	//       "Volume": 1
	//
	//   },
	//
	//  "BackgroundMusicConfig": {
	//
	//       "Volume": 0.3
	//
	//   }
	//
	// }
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	InputConfig   *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// example:
	//
	// {
	//
	//   "MediaURL": "http://xxx.oss-cn-shanghai.aliyuncs.com/xxx_{index}.mp4",
	//
	//   "Count": 20,
	//
	//   "MaxDuration": 15,
	//
	//   "Width": 1080,
	//
	//   "Height": 1920,
	//
	//   "Video": {"Crf": 27}
	//
	// }
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitBatchMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobRequest) SetClientToken(v string) *SubmitBatchMediaProducingJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetEditingConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetInputConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetOutputConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetUserData(v string) *SubmitBatchMediaProducingJobRequest {
	s.UserData = &v
	return s
}

type SubmitBatchMediaProducingJobResponseBody struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitBatchMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobResponseBody) SetJobId(v string) *SubmitBatchMediaProducingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitBatchMediaProducingJobResponseBody) SetRequestId(v string) *SubmitBatchMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitBatchMediaProducingJobResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitBatchMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitBatchMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobResponse) SetHeaders(v map[string]*string) *SubmitBatchMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitBatchMediaProducingJobResponse) SetStatusCode(v int32) *SubmitBatchMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitBatchMediaProducingJobResponse) SetBody(v *SubmitBatchMediaProducingJobResponseBody) *SubmitBatchMediaProducingJobResponse {
	s.Body = v
	return s
}

type SubmitCustomizedVoiceJobRequest struct {
	// example:
	//
	// https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.MP3
	DemoAudioMediaURL *string `json:"DemoAudioMediaURL,omitempty" xml:"DemoAudioMediaURL,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s SubmitCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobRequest) SetDemoAudioMediaURL(v string) *SubmitCustomizedVoiceJobRequest {
	s.DemoAudioMediaURL = &v
	return s
}

func (s *SubmitCustomizedVoiceJobRequest) SetVoiceId(v string) *SubmitCustomizedVoiceJobRequest {
	s.VoiceId = &v
	return s
}

type SubmitCustomizedVoiceJobResponseBody struct {
	Data *SubmitCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobResponseBody) SetData(v *SubmitCustomizedVoiceJobResponseBodyData) *SubmitCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitCustomizedVoiceJobResponseBody) SetRequestId(v string) *SubmitCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCustomizedVoiceJobResponseBody) SetSuccess(v bool) *SubmitCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type SubmitCustomizedVoiceJobResponseBodyData struct {
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s SubmitCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobResponseBodyData) SetJobId(v string) *SubmitCustomizedVoiceJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *SubmitCustomizedVoiceJobResponseBodyData) SetVoiceId(v string) *SubmitCustomizedVoiceJobResponseBodyData {
	s.VoiceId = &v
	return s
}

type SubmitCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *SubmitCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitCustomizedVoiceJobResponse) SetStatusCode(v int32) *SubmitCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitCustomizedVoiceJobResponse) SetBody(v *SubmitCustomizedVoiceJobResponseBody) *SubmitCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type SubmitDNAJobRequest struct {
	// example:
	//
	// {"SaveType": "save","MediaType"":"video"}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// This parameter is required.
	Input        *SubmitDNAJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	OwnerAccount *string                   `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64                    `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 5246b8d12a62433ab77845074039****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3ca84a39a9024f19853b21be9cf9****
	PrimaryKey           *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// example:
	//
	// S00000101-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDNAJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobRequest) SetConfig(v string) *SubmitDNAJobRequest {
	s.Config = &v
	return s
}

func (s *SubmitDNAJobRequest) SetDBId(v string) *SubmitDNAJobRequest {
	s.DBId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetInput(v *SubmitDNAJobRequestInput) *SubmitDNAJobRequest {
	s.Input = v
	return s
}

func (s *SubmitDNAJobRequest) SetOwnerAccount(v string) *SubmitDNAJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitDNAJobRequest) SetOwnerId(v int64) *SubmitDNAJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetPipelineId(v string) *SubmitDNAJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetPrimaryKey(v string) *SubmitDNAJobRequest {
	s.PrimaryKey = &v
	return s
}

func (s *SubmitDNAJobRequest) SetResourceOwnerAccount(v string) *SubmitDNAJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitDNAJobRequest) SetResourceOwnerId(v int64) *SubmitDNAJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetTemplateId(v string) *SubmitDNAJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitDNAJobRequest) SetUserData(v string) *SubmitDNAJobRequest {
	s.UserData = &v
	return s
}

type SubmitDNAJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// 1b1b9cd148034739af413150fded****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDNAJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobRequestInput) SetMedia(v string) *SubmitDNAJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitDNAJobRequestInput) SetType(v string) *SubmitDNAJobRequestInput {
	s.Type = &v
	return s
}

type SubmitDNAJobShrinkRequest struct {
	// example:
	//
	// {"SaveType": "save","MediaType"":"video"}
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 2288c6ca184c0e47098a5b665e2a12****
	DBId *string `json:"DBId,omitempty" xml:"DBId,omitempty"`
	// This parameter is required.
	InputShrink  *string `json:"Input,omitempty" xml:"Input,omitempty"`
	OwnerAccount *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId      *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// example:
	//
	// 5246b8d12a62433ab77845074039****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 3ca84a39a9024f19853b21be9cf9****
	PrimaryKey           *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	// example:
	//
	// S00000101-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDNAJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobShrinkRequest) SetConfig(v string) *SubmitDNAJobShrinkRequest {
	s.Config = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetDBId(v string) *SubmitDNAJobShrinkRequest {
	s.DBId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetInputShrink(v string) *SubmitDNAJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetOwnerAccount(v string) *SubmitDNAJobShrinkRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetOwnerId(v int64) *SubmitDNAJobShrinkRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetPipelineId(v string) *SubmitDNAJobShrinkRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetPrimaryKey(v string) *SubmitDNAJobShrinkRequest {
	s.PrimaryKey = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetResourceOwnerAccount(v string) *SubmitDNAJobShrinkRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetResourceOwnerId(v int64) *SubmitDNAJobShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetTemplateId(v string) *SubmitDNAJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitDNAJobShrinkRequest) SetUserData(v string) *SubmitDNAJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitDNAJobResponseBody struct {
	// example:
	//
	// 88c6ca184c0e47098a5b665e2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDNAJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobResponseBody) SetJobId(v string) *SubmitDNAJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDNAJobResponseBody) SetRequestId(v string) *SubmitDNAJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDNAJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitDNAJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitDNAJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDNAJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDNAJobResponse) SetHeaders(v map[string]*string) *SubmitDNAJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDNAJobResponse) SetStatusCode(v int32) *SubmitDNAJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDNAJobResponse) SetBody(v *SubmitDNAJobResponseBody) *SubmitDNAJobResponse {
	s.Body = v
	return s
}

type SubmitDynamicChartJobRequest struct {
	// example:
	//
	// {"FontFile":"Microsoft YaHei","XAxisFontSize":"30","YAxisFontSize":"30","XAxisFontInterval":"30","AxisColor":"30"}
	AxisParams *string `json:"AxisParams,omitempty" xml:"AxisParams,omitempty"`
	// example:
	//
	// {"Color":"#000000","ImageUrl":"http://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.jpg"}
	Background *string `json:"Background,omitempty" xml:"Background,omitempty"`
	// example:
	//
	// {"Style":"Normal","TitleStartTime":"3000","ChartStartTime":"3000","VideoDuration":"15000"}
	ChartConfig *string `json:"ChartConfig,omitempty" xml:"ChartConfig,omitempty"`
	ChartTitle  *string `json:"ChartTitle,omitempty" xml:"ChartTitle,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Line
	ChartType   *string `json:"ChartType,omitempty" xml:"ChartType,omitempty"`
	DataSource  *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"XlsFile":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.xls"}
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"MediaURL":"https://your-bucket.oss-cn-shanghai.aliyuncs.com/obj.mp4","Bitrate":2000,"Width":800,"Height":680}
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	Subtitle     *string `json:"Subtitle,omitempty" xml:"Subtitle,omitempty"`
	Title        *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Unit         *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// example:
	//
	// {"user":"data"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicChartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobRequest) SetAxisParams(v string) *SubmitDynamicChartJobRequest {
	s.AxisParams = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetBackground(v string) *SubmitDynamicChartJobRequest {
	s.Background = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartConfig(v string) *SubmitDynamicChartJobRequest {
	s.ChartConfig = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartTitle(v string) *SubmitDynamicChartJobRequest {
	s.ChartTitle = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartType(v string) *SubmitDynamicChartJobRequest {
	s.ChartType = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetDataSource(v string) *SubmitDynamicChartJobRequest {
	s.DataSource = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetDescription(v string) *SubmitDynamicChartJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetInput(v string) *SubmitDynamicChartJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetOutputConfig(v string) *SubmitDynamicChartJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetSubtitle(v string) *SubmitDynamicChartJobRequest {
	s.Subtitle = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetTitle(v string) *SubmitDynamicChartJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetUnit(v string) *SubmitDynamicChartJobRequest {
	s.Unit = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetUserData(v string) *SubmitDynamicChartJobRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicChartJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDynamicChartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobResponseBody) SetJobId(v string) *SubmitDynamicChartJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDynamicChartJobResponseBody) SetRequestId(v string) *SubmitDynamicChartJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDynamicChartJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitDynamicChartJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitDynamicChartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobResponse) SetHeaders(v map[string]*string) *SubmitDynamicChartJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDynamicChartJobResponse) SetStatusCode(v int32) *SubmitDynamicChartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDynamicChartJobResponse) SetBody(v *SubmitDynamicChartJobResponseBody) *SubmitDynamicChartJobResponse {
	s.Body = v
	return s
}

type SubmitDynamicImageJobRequest struct {
	// This parameter is required.
	Input *SubmitDynamicImageJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	Output         *SubmitDynamicImageJobRequestOutput         `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ScheduleConfig *SubmitDynamicImageJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// This parameter is required.
	TemplateConfig *SubmitDynamicImageJobRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// example:
	//
	// {"SampleKey": "SampleValue"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicImageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequest) SetInput(v *SubmitDynamicImageJobRequestInput) *SubmitDynamicImageJobRequest {
	s.Input = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetName(v string) *SubmitDynamicImageJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetOutput(v *SubmitDynamicImageJobRequestOutput) *SubmitDynamicImageJobRequest {
	s.Output = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetScheduleConfig(v *SubmitDynamicImageJobRequestScheduleConfig) *SubmitDynamicImageJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetTemplateConfig(v *SubmitDynamicImageJobRequestTemplateConfig) *SubmitDynamicImageJobRequest {
	s.TemplateConfig = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetUserData(v string) *SubmitDynamicImageJobRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicImageJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDynamicImageJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestInput) SetMedia(v string) *SubmitDynamicImageJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitDynamicImageJobRequestInput) SetType(v string) *SubmitDynamicImageJobRequestInput {
	s.Type = &v
	return s
}

type SubmitDynamicImageJobRequestOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDynamicImageJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestOutput) SetMedia(v string) *SubmitDynamicImageJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitDynamicImageJobRequestOutput) SetType(v string) *SubmitDynamicImageJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitDynamicImageJobRequestScheduleConfig struct {
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitDynamicImageJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestScheduleConfig) SetPipelineId(v string) *SubmitDynamicImageJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitDynamicImageJobRequestScheduleConfig) SetPriority(v int32) *SubmitDynamicImageJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfig struct {
	OverwriteParams *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfig) SetOverwriteParams(v *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) *SubmitDynamicImageJobRequestTemplateConfig {
	s.OverwriteParams = v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfig) SetTemplateId(v string) *SubmitDynamicImageJobRequestTemplateConfig {
	s.TemplateId = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfigOverwriteParams struct {
	// example:
	//
	// gif
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// example:
	//
	// 15
	Fps *int32 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 720
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// false
	LongShortMode *bool `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// example:
	//
	// progressive
	ScanMode *string                                                            `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	TimeSpan *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
	// example:
	//
	// 1024
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetFormat(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Format = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetFps(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Fps = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetHeight(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetLongShortMode(v bool) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.LongShortMode = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetScanMode(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.ScanMode = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetTimeSpan(v *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.TimeSpan = v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetWidth(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Width = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	End      *string `json:"End,omitempty" xml:"End,omitempty"`
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetDuration(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.Duration = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetEnd(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.End = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetSeek(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.Seek = &v
	return s
}

type SubmitDynamicImageJobShrinkRequest struct {
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OutputShrink         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// This parameter is required.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"SampleKey": "SampleValue"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicImageJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobShrinkRequest) SetInputShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetName(v string) *SubmitDynamicImageJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetOutputShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetTemplateConfigShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetUserData(v string) *SubmitDynamicImageJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicImageJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDynamicImageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobResponseBody) SetJobId(v string) *SubmitDynamicImageJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDynamicImageJobResponseBody) SetRequestId(v string) *SubmitDynamicImageJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDynamicImageJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitDynamicImageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitDynamicImageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobResponse) SetHeaders(v map[string]*string) *SubmitDynamicImageJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDynamicImageJobResponse) SetStatusCode(v int32) *SubmitDynamicImageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDynamicImageJobResponse) SetBody(v *SubmitDynamicImageJobResponseBody) *SubmitDynamicImageJobResponse {
	s.Body = v
	return s
}

type SubmitIProductionJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Cover
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// This parameter is required.
	Input *SubmitIProductionJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// {"Model":"gif"}
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	Output         *SubmitIProductionJobRequestOutput         `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ScheduleConfig *SubmitIProductionJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// {"test":1}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequest) SetFunctionName(v string) *SubmitIProductionJobRequest {
	s.FunctionName = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetInput(v *SubmitIProductionJobRequestInput) *SubmitIProductionJobRequest {
	s.Input = v
	return s
}

func (s *SubmitIProductionJobRequest) SetJobParams(v string) *SubmitIProductionJobRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetName(v string) *SubmitIProductionJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetOutput(v *SubmitIProductionJobRequestOutput) *SubmitIProductionJobRequest {
	s.Output = v
	return s
}

func (s *SubmitIProductionJobRequest) SetScheduleConfig(v *SubmitIProductionJobRequestScheduleConfig) *SubmitIProductionJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitIProductionJobRequest) SetTemplateId(v string) *SubmitIProductionJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetUserData(v string) *SubmitIProductionJobRequest {
	s.UserData = &v
	return s
}

type SubmitIProductionJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitIProductionJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestInput) SetMedia(v string) *SubmitIProductionJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitIProductionJobRequestInput) SetType(v string) *SubmitIProductionJobRequestInput {
	s.Type = &v
	return s
}

type SubmitIProductionJobRequestOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitIProductionJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestOutput) SetMedia(v string) *SubmitIProductionJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitIProductionJobRequestOutput) SetType(v string) *SubmitIProductionJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitIProductionJobRequestScheduleConfig struct {
	// example:
	//
	// 5246b8d12a62433ab77845074039c3dc
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitIProductionJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestScheduleConfig) SetPipelineId(v string) *SubmitIProductionJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitIProductionJobRequestScheduleConfig) SetPriority(v int32) *SubmitIProductionJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitIProductionJobShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Cover
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// {"Model":"gif"}
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OutputShrink         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// {"test":1}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitIProductionJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobShrinkRequest) SetFunctionName(v string) *SubmitIProductionJobShrinkRequest {
	s.FunctionName = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetInputShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetJobParams(v string) *SubmitIProductionJobShrinkRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetName(v string) *SubmitIProductionJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetOutputShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetTemplateId(v string) *SubmitIProductionJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetUserData(v string) *SubmitIProductionJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitIProductionJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// C1849434-FC47-5DC1-92B6-F7EAAFE3851E
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponseBody) SetJobId(v string) *SubmitIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitIProductionJobResponseBody) SetRequestId(v string) *SubmitIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitIProductionJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponse) SetHeaders(v map[string]*string) *SubmitIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitIProductionJobResponse) SetStatusCode(v int32) *SubmitIProductionJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitIProductionJobResponse) SetBody(v *SubmitIProductionJobResponseBody) *SubmitIProductionJobResponse {
	s.Body = v
	return s
}

type SubmitLiveEditingJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// [{\\"StartTime\\": \\" 2021-06-21T08:01:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:03:00Z\\" ,  "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"},  {\\"StartTime\\": \\" 2021-06-21T08:05:00Z\\",  \\"EndTime\\": \\" 2021-06-21T08:09:00Z\\" }]
	Clips *string `json:"Clips,omitempty" xml:"Clips,omitempty"`
	// example:
	//
	// { "AppName": "app", "DomainName": "domain.com", "StreamName": "stream"  }
	LiveStreamConfig *string `json:"LiveStreamConfig,omitempty" xml:"LiveStreamConfig,omitempty"`
	// example:
	//
	// { "Mode": "AccurateFast"}
	MediaProduceConfig *string `json:"MediaProduceConfig,omitempty" xml:"MediaProduceConfig,omitempty"`
	OutputMediaConfig  *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	OutputMediaTarget  *string `json:"OutputMediaTarget,omitempty" xml:"OutputMediaTarget,omitempty"`
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// {"key": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitLiveEditingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobRequest) SetClips(v string) *SubmitLiveEditingJobRequest {
	s.Clips = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetLiveStreamConfig(v string) *SubmitLiveEditingJobRequest {
	s.LiveStreamConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetMediaProduceConfig(v string) *SubmitLiveEditingJobRequest {
	s.MediaProduceConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetOutputMediaConfig(v string) *SubmitLiveEditingJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetOutputMediaTarget(v string) *SubmitLiveEditingJobRequest {
	s.OutputMediaTarget = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetProjectId(v string) *SubmitLiveEditingJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetUserData(v string) *SubmitLiveEditingJobRequest {
	s.UserData = &v
	return s
}

type SubmitLiveEditingJobResponseBody struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// http://test-bucket.cn-shanghai.aliyuncs.com/test.mp4
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// example:
	//
	// ****fddd7748b58bf1d47e95****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ****d7578s4h75ci945c14b****
	VodMediaId *string `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s SubmitLiveEditingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobResponseBody) SetJobId(v string) *SubmitLiveEditingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetMediaId(v string) *SubmitLiveEditingJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetMediaURL(v string) *SubmitLiveEditingJobResponseBody {
	s.MediaURL = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetProjectId(v string) *SubmitLiveEditingJobResponseBody {
	s.ProjectId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetRequestId(v string) *SubmitLiveEditingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetVodMediaId(v string) *SubmitLiveEditingJobResponseBody {
	s.VodMediaId = &v
	return s
}

type SubmitLiveEditingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveEditingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveEditingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobResponse) SetHeaders(v map[string]*string) *SubmitLiveEditingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveEditingJobResponse) SetStatusCode(v int32) *SubmitLiveEditingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveEditingJobResponse) SetBody(v *SubmitLiveEditingJobResponseBody) *SubmitLiveEditingJobResponse {
	s.Body = v
	return s
}

type SubmitLiveRecordJobRequest struct {
	// 代表资源名称的资源属性字段
	//
	// This parameter is required.
	//
	// example:
	//
	// live stream record 1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 回调地址
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// This parameter is required.
	RecordOutput *SubmitLiveRecordJobRequestRecordOutput `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty" type:"Struct"`
	// This parameter is required.
	StreamInput *SubmitLiveRecordJobRequestStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// 录制模板ID
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveRecordJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobRequest) SetName(v string) *SubmitLiveRecordJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetNotifyUrl(v string) *SubmitLiveRecordJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetRecordOutput(v *SubmitLiveRecordJobRequestRecordOutput) *SubmitLiveRecordJobRequest {
	s.RecordOutput = v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetStreamInput(v *SubmitLiveRecordJobRequestStreamInput) *SubmitLiveRecordJobRequest {
	s.StreamInput = v
	return s
}

func (s *SubmitLiveRecordJobRequest) SetTemplateId(v string) *SubmitLiveRecordJobRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveRecordJobRequestRecordOutput struct {
	// example:
	//
	// imsbucket1
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// example:
	//
	// oss-cn-hangzhou.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// oss
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitLiveRecordJobRequestRecordOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobRequestRecordOutput) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobRequestRecordOutput) SetBucket(v string) *SubmitLiveRecordJobRequestRecordOutput {
	s.Bucket = &v
	return s
}

func (s *SubmitLiveRecordJobRequestRecordOutput) SetEndpoint(v string) *SubmitLiveRecordJobRequestRecordOutput {
	s.Endpoint = &v
	return s
}

func (s *SubmitLiveRecordJobRequestRecordOutput) SetType(v string) *SubmitLiveRecordJobRequestRecordOutput {
	s.Type = &v
	return s
}

type SubmitLiveRecordJobRequestStreamInput struct {
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// rtmp://example.com/live/stream1
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SubmitLiveRecordJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobRequestStreamInput) SetType(v string) *SubmitLiveRecordJobRequestStreamInput {
	s.Type = &v
	return s
}

func (s *SubmitLiveRecordJobRequestStreamInput) SetUrl(v string) *SubmitLiveRecordJobRequestStreamInput {
	s.Url = &v
	return s
}

type SubmitLiveRecordJobShrinkRequest struct {
	// 代表资源名称的资源属性字段
	//
	// This parameter is required.
	//
	// example:
	//
	// live stream record 1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 回调地址
	//
	// example:
	//
	// https://example.com/imsnotify
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// This parameter is required.
	RecordOutputShrink *string `json:"RecordOutput,omitempty" xml:"RecordOutput,omitempty"`
	// This parameter is required.
	StreamInputShrink *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	// 录制模板ID
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveRecordJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobShrinkRequest) SetName(v string) *SubmitLiveRecordJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetNotifyUrl(v string) *SubmitLiveRecordJobShrinkRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetRecordOutputShrink(v string) *SubmitLiveRecordJobShrinkRequest {
	s.RecordOutputShrink = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetStreamInputShrink(v string) *SubmitLiveRecordJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *SubmitLiveRecordJobShrinkRequest) SetTemplateId(v string) *SubmitLiveRecordJobShrinkRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveRecordJobResponseBody struct {
	// example:
	//
	// ab0e3e76-1e9d-11ed-ba64-0c42a1b73d66
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// BEA98A0C-7870-15FE-B96F-8880BB600A2C
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitLiveRecordJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobResponseBody) SetJobId(v string) *SubmitLiveRecordJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveRecordJobResponseBody) SetRequestId(v string) *SubmitLiveRecordJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitLiveRecordJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveRecordJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveRecordJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveRecordJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveRecordJobResponse) SetHeaders(v map[string]*string) *SubmitLiveRecordJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveRecordJobResponse) SetStatusCode(v int32) *SubmitLiveRecordJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveRecordJobResponse) SetBody(v *SubmitLiveRecordJobResponseBody) *SubmitLiveRecordJobResponse {
	s.Body = v
	return s
}

type SubmitLiveSnapshotJobRequest struct {
	// example:
	//
	// http://www.aliyun.com/snapshot/callback
	CallbackUrl *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	// This parameter is required.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// This parameter is required.
	SnapshotOutput *SubmitLiveSnapshotJobRequestSnapshotOutput `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty" type:"Struct"`
	// This parameter is required.
	StreamInput *SubmitLiveSnapshotJobRequestStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobRequest) SetCallbackUrl(v string) *SubmitLiveSnapshotJobRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetJobName(v string) *SubmitLiveSnapshotJobRequest {
	s.JobName = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetSnapshotOutput(v *SubmitLiveSnapshotJobRequestSnapshotOutput) *SubmitLiveSnapshotJobRequest {
	s.SnapshotOutput = v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetStreamInput(v *SubmitLiveSnapshotJobRequestStreamInput) *SubmitLiveSnapshotJobRequest {
	s.StreamInput = v
	return s
}

func (s *SubmitLiveSnapshotJobRequest) SetTemplateId(v string) *SubmitLiveSnapshotJobRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveSnapshotJobRequestSnapshotOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// testbucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// oss-cn-shanghai.aliyuncs.com
	Endpoint *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// oss
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s SubmitLiveSnapshotJobRequestSnapshotOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobRequestSnapshotOutput) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobRequestSnapshotOutput) SetBucket(v string) *SubmitLiveSnapshotJobRequestSnapshotOutput {
	s.Bucket = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequestSnapshotOutput) SetEndpoint(v string) *SubmitLiveSnapshotJobRequestSnapshotOutput {
	s.Endpoint = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequestSnapshotOutput) SetStorageType(v string) *SubmitLiveSnapshotJobRequestSnapshotOutput {
	s.StorageType = &v
	return s
}

type SubmitLiveSnapshotJobRequestStreamInput struct {
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rtmp://www.aliyun.com/stream
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s SubmitLiveSnapshotJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobRequestStreamInput) SetType(v string) *SubmitLiveSnapshotJobRequestStreamInput {
	s.Type = &v
	return s
}

func (s *SubmitLiveSnapshotJobRequestStreamInput) SetUrl(v string) *SubmitLiveSnapshotJobRequestStreamInput {
	s.Url = &v
	return s
}

type SubmitLiveSnapshotJobShrinkRequest struct {
	// example:
	//
	// http://www.aliyun.com/snapshot/callback
	CallbackUrl *string `json:"CallbackUrl,omitempty" xml:"CallbackUrl,omitempty"`
	// This parameter is required.
	JobName *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	// This parameter is required.
	SnapshotOutputShrink *string `json:"SnapshotOutput,omitempty" xml:"SnapshotOutput,omitempty"`
	// This parameter is required.
	StreamInputShrink *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitLiveSnapshotJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetCallbackUrl(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.CallbackUrl = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetJobName(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.JobName = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetSnapshotOutputShrink(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.SnapshotOutputShrink = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetStreamInputShrink(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *SubmitLiveSnapshotJobShrinkRequest) SetTemplateId(v string) *SubmitLiveSnapshotJobShrinkRequest {
	s.TemplateId = &v
	return s
}

type SubmitLiveSnapshotJobResponseBody struct {
	// example:
	//
	// ****a046-263c-3560-978a-fb287666****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitLiveSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobResponseBody) SetJobId(v string) *SubmitLiveSnapshotJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveSnapshotJobResponseBody) SetRequestId(v string) *SubmitLiveSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitLiveSnapshotJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveSnapshotJobResponse) SetHeaders(v map[string]*string) *SubmitLiveSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveSnapshotJobResponse) SetStatusCode(v int32) *SubmitLiveSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveSnapshotJobResponse) SetBody(v *SubmitLiveSnapshotJobResponseBody) *SubmitLiveSnapshotJobResponse {
	s.Body = v
	return s
}

type SubmitLiveTranscodeJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// task1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// This parameter is required.
	StreamInput *SubmitLiveTranscodeJobRequestStreamInput `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId  *string                                   `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TimedConfig *SubmitLiveTranscodeJobRequestTimedConfig `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty" type:"Struct"`
	// This parameter is required.
	TranscodeOutput *SubmitLiveTranscodeJobRequestTranscodeOutput `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty" type:"Struct"`
}

func (s SubmitLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequest) SetName(v string) *SubmitLiveTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetStartMode(v int32) *SubmitLiveTranscodeJobRequest {
	s.StartMode = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetStreamInput(v *SubmitLiveTranscodeJobRequestStreamInput) *SubmitLiveTranscodeJobRequest {
	s.StreamInput = v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetTemplateId(v string) *SubmitLiveTranscodeJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetTimedConfig(v *SubmitLiveTranscodeJobRequestTimedConfig) *SubmitLiveTranscodeJobRequest {
	s.TimedConfig = v
	return s
}

func (s *SubmitLiveTranscodeJobRequest) SetTranscodeOutput(v *SubmitLiveTranscodeJobRequestTranscodeOutput) *SubmitLiveTranscodeJobRequest {
	s.TranscodeOutput = v
	return s
}

type SubmitLiveTranscodeJobRequestStreamInput struct {
	// This parameter is required.
	//
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitLiveTranscodeJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequestStreamInput) SetInputUrl(v string) *SubmitLiveTranscodeJobRequestStreamInput {
	s.InputUrl = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequestStreamInput) SetType(v string) *SubmitLiveTranscodeJobRequestStreamInput {
	s.Type = &v
	return s
}

type SubmitLiveTranscodeJobRequestTimedConfig struct {
	// example:
	//
	// 2022-07-20T08:20:32Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 2022-02-21T00:00:00Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s SubmitLiveTranscodeJobRequestTimedConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequestTimedConfig) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequestTimedConfig) SetEndTime(v string) *SubmitLiveTranscodeJobRequestTimedConfig {
	s.EndTime = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequestTimedConfig) SetStartTime(v string) *SubmitLiveTranscodeJobRequestTimedConfig {
	s.StartTime = &v
	return s
}

type SubmitLiveTranscodeJobRequestTranscodeOutput struct {
	// example:
	//
	// mydomain
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// LiveCenter
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitLiveTranscodeJobRequestTranscodeOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobRequestTranscodeOutput) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobRequestTranscodeOutput) SetDomainName(v string) *SubmitLiveTranscodeJobRequestTranscodeOutput {
	s.DomainName = &v
	return s
}

func (s *SubmitLiveTranscodeJobRequestTranscodeOutput) SetType(v string) *SubmitLiveTranscodeJobRequestTranscodeOutput {
	s.Type = &v
	return s
}

type SubmitLiveTranscodeJobShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// task1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0
	StartMode *int32 `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	// This parameter is required.
	StreamInputShrink *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId        *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TimedConfigShrink *string `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty"`
	// This parameter is required.
	TranscodeOutputShrink *string `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty"`
}

func (s SubmitLiveTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetName(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetStartMode(v int32) *SubmitLiveTranscodeJobShrinkRequest {
	s.StartMode = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetStreamInputShrink(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetTemplateId(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetTimedConfigShrink(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.TimedConfigShrink = &v
	return s
}

func (s *SubmitLiveTranscodeJobShrinkRequest) SetTranscodeOutputShrink(v string) *SubmitLiveTranscodeJobShrinkRequest {
	s.TranscodeOutputShrink = &v
	return s
}

type SubmitLiveTranscodeJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobResponseBody) SetJobId(v string) *SubmitLiveTranscodeJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveTranscodeJobResponseBody) SetRequestId(v string) *SubmitLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *SubmitLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveTranscodeJobResponse) SetStatusCode(v int32) *SubmitLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveTranscodeJobResponse) SetBody(v *SubmitLiveTranscodeJobResponseBody) *SubmitLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type SubmitMediaCensorJobRequest struct {
	// example:
	//
	// hello world
	Barrages *string `json:"Barrages,omitempty" xml:"Barrages,omitempty"`
	// example:
	//
	// [{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]
	CoverImages *string `json:"CoverImages,omitempty" xml:"CoverImages,omitempty"`
	// example:
	//
	// example description
	Description *string                           `json:"Description,omitempty" xml:"Description,omitempty"`
	Input       *SubmitMediaCensorJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// example:
	//
	// oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg
	Output         *string                                    `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfig *SubmitMediaCensorJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// Hello World
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// UserDatatestid-001-****
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaCensorJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequest) SetBarrages(v string) *SubmitMediaCensorJobRequest {
	s.Barrages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetCoverImages(v string) *SubmitMediaCensorJobRequest {
	s.CoverImages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetDescription(v string) *SubmitMediaCensorJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetInput(v *SubmitMediaCensorJobRequestInput) *SubmitMediaCensorJobRequest {
	s.Input = v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetNotifyUrl(v string) *SubmitMediaCensorJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetOutput(v string) *SubmitMediaCensorJobRequest {
	s.Output = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetScheduleConfig(v *SubmitMediaCensorJobRequestScheduleConfig) *SubmitMediaCensorJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetTemplateId(v string) *SubmitMediaCensorJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetTitle(v string) *SubmitMediaCensorJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetUserData(v string) *SubmitMediaCensorJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaCensorJobRequestInput struct {
	// example:
	//
	// 1b1b9cd148034739af413150fded****
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaCensorJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequestInput) SetMedia(v string) *SubmitMediaCensorJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaCensorJobRequestInput) SetType(v string) *SubmitMediaCensorJobRequestInput {
	s.Type = &v
	return s
}

type SubmitMediaCensorJobRequestScheduleConfig struct {
	// example:
	//
	// 5246b8d12a62433ab77845074039****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaCensorJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequestScheduleConfig) SetPipelineId(v string) *SubmitMediaCensorJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaCensorJobRequestScheduleConfig) SetPriority(v int32) *SubmitMediaCensorJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaCensorJobShrinkRequest struct {
	// example:
	//
	// hello world
	Barrages *string `json:"Barrages,omitempty" xml:"Barrages,omitempty"`
	// example:
	//
	// [{"Bucket":"example-bucket-****","Location":"oss-cn-shanghai","Object":"example-****.jpeg","RoleArn":"acs:ram::1997018457688683:role/AliyunICEDefaultRole"}]
	CoverImages *string `json:"CoverImages,omitempty" xml:"CoverImages,omitempty"`
	// example:
	//
	// example description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// mns://125340688170****.oss-cn-shanghai.aliyuncs.com/queues/example-pipeline
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// example:
	//
	// oss://sashimi-cn-shanghai/censor/snapshot-{Count}.jpg
	Output               *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// example:
	//
	// S00000001-100060
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// Hello World
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// UserDatatestid-001-****
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaCensorJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobShrinkRequest) SetBarrages(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Barrages = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetCoverImages(v string) *SubmitMediaCensorJobShrinkRequest {
	s.CoverImages = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetDescription(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetInputShrink(v string) *SubmitMediaCensorJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetNotifyUrl(v string) *SubmitMediaCensorJobShrinkRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetOutput(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Output = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitMediaCensorJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetTemplateId(v string) *SubmitMediaCensorJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetTitle(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Title = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetUserData(v string) *SubmitMediaCensorJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitMediaCensorJobResponseBody struct {
	// example:
	//
	// 88c6ca184c0e47098a5b665e2****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 25818875-5F78-4A13-BEF6-D7393642CA58
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaCensorJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponseBody) SetJobId(v string) *SubmitMediaCensorJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitMediaCensorJobResponseBody) SetRequestId(v string) *SubmitMediaCensorJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaCensorJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaCensorJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaCensorJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponse) SetHeaders(v map[string]*string) *SubmitMediaCensorJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaCensorJobResponse) SetStatusCode(v int32) *SubmitMediaCensorJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaCensorJobResponse) SetBody(v *SubmitMediaCensorJobResponseBody) *SubmitMediaCensorJobResponse {
	s.Body = v
	return s
}

type SubmitMediaInfoJobRequest struct {
	// This parameter is required.
	Input *SubmitMediaInfoJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// job-name
	Name           *string                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	ScheduleConfig *SubmitMediaInfoJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequest) SetInput(v *SubmitMediaInfoJobRequestInput) *SubmitMediaInfoJobRequest {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetName(v string) *SubmitMediaInfoJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetScheduleConfig(v *SubmitMediaInfoJobRequestScheduleConfig) *SubmitMediaInfoJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetUserData(v string) *SubmitMediaInfoJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaInfoJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequestInput) SetMedia(v string) *SubmitMediaInfoJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaInfoJobRequestInput) SetType(v string) *SubmitMediaInfoJobRequestInput {
	s.Type = &v
	return s
}

type SubmitMediaInfoJobRequestScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaInfoJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequestScheduleConfig) SetPipelineId(v string) *SubmitMediaInfoJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobRequestScheduleConfig) SetPriority(v int32) *SubmitMediaInfoJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaInfoJobShrinkRequest struct {
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// job-name
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobShrinkRequest) SetInputShrink(v string) *SubmitMediaInfoJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetName(v string) *SubmitMediaInfoJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitMediaInfoJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetUserData(v string) *SubmitMediaInfoJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *SubmitMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitMediaInfoJobResponseBodyMediaInfoJob) *SubmitMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitMediaInfoJobResponseBody) SetRequestId(v string) *SubmitMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJob struct {
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                          `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *SubmitMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId             *string                                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaInfoProperty *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId      *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	AudioStreamInfoList []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo       *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo         `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	VideoStreamInfoList []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// us
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2b36bd19c13f4145b094c0cad80dbce5
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaInfoJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetStatusCode(v int32) *SubmitMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetBody(v *SubmitMediaInfoJobResponseBody) *SubmitMediaInfoJobResponse {
	s.Body = v
	return s
}

type SubmitMediaProducingJobRequest struct {
	// example:
	//
	// ****12e8864746a0a398****
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ClipsParam           *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	EditingProduceConfig *string `json:"EditingProduceConfig,omitempty" xml:"EditingProduceConfig,omitempty"`
	// example:
	//
	// {
	//
	//       "Title":"test-title",
	//
	//       "Tags":"test-tags1,tags2"
	//
	// }
	MediaMetadata *string `json:"MediaMetadata,omitempty" xml:"MediaMetadata,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {"MediaURL":"https://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4"}
	OutputMediaConfig *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	// example:
	//
	// oss-object
	OutputMediaTarget *string `json:"OutputMediaTarget,omitempty" xml:"OutputMediaTarget,omitempty"`
	// example:
	//
	// xxxxxfb2101cb318xxxxx
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectMetadata *string `json:"ProjectMetadata,omitempty" xml:"ProjectMetadata,omitempty"`
	// example:
	//
	// OPENAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Timeline   *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	UserData   *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobRequest) SetClientToken(v string) *SubmitMediaProducingJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetClipsParam(v string) *SubmitMediaProducingJobRequest {
	s.ClipsParam = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetEditingProduceConfig(v string) *SubmitMediaProducingJobRequest {
	s.EditingProduceConfig = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetMediaMetadata(v string) *SubmitMediaProducingJobRequest {
	s.MediaMetadata = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetOutputMediaConfig(v string) *SubmitMediaProducingJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetOutputMediaTarget(v string) *SubmitMediaProducingJobRequest {
	s.OutputMediaTarget = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetProjectId(v string) *SubmitMediaProducingJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetProjectMetadata(v string) *SubmitMediaProducingJobRequest {
	s.ProjectMetadata = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetSource(v string) *SubmitMediaProducingJobRequest {
	s.Source = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetTemplateId(v string) *SubmitMediaProducingJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetTimeline(v string) *SubmitMediaProducingJobRequest {
	s.Timeline = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetUserData(v string) *SubmitMediaProducingJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaProducingJobResponseBody struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****c469e944b5a856828dc2****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ****b4549d46c88681030f6e****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// ****36-3C1E-4417-BDB2-1E034F****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// ****d8s4h75ci975745c14b****
	VodMediaId *string `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s SubmitMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobResponseBody) SetJobId(v string) *SubmitMediaProducingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetMediaId(v string) *SubmitMediaProducingJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetProjectId(v string) *SubmitMediaProducingJobResponseBody {
	s.ProjectId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetRequestId(v string) *SubmitMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetVodMediaId(v string) *SubmitMediaProducingJobResponseBody {
	s.VodMediaId = &v
	return s
}

type SubmitMediaProducingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobResponse) SetHeaders(v map[string]*string) *SubmitMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaProducingJobResponse) SetStatusCode(v int32) *SubmitMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaProducingJobResponse) SetBody(v *SubmitMediaProducingJobResponseBody) *SubmitMediaProducingJobResponse {
	s.Body = v
	return s
}

type SubmitPackageJobRequest struct {
	// This parameter is required.
	Inputs []*SubmitPackageJobRequestInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	Output         *SubmitPackageJobRequestOutput         `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ScheduleConfig *SubmitPackageJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitPackageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequest) SetInputs(v []*SubmitPackageJobRequestInputs) *SubmitPackageJobRequest {
	s.Inputs = v
	return s
}

func (s *SubmitPackageJobRequest) SetName(v string) *SubmitPackageJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitPackageJobRequest) SetOutput(v *SubmitPackageJobRequestOutput) *SubmitPackageJobRequest {
	s.Output = v
	return s
}

func (s *SubmitPackageJobRequest) SetScheduleConfig(v *SubmitPackageJobRequestScheduleConfig) *SubmitPackageJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitPackageJobRequest) SetUserData(v string) *SubmitPackageJobRequest {
	s.UserData = &v
	return s
}

type SubmitPackageJobRequestInputs struct {
	// This parameter is required.
	Input *SubmitPackageJobRequestInputsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitPackageJobRequestInputs) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestInputs) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestInputs) SetInput(v *SubmitPackageJobRequestInputsInput) *SubmitPackageJobRequestInputs {
	s.Input = v
	return s
}

type SubmitPackageJobRequestInputsInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitPackageJobRequestInputsInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestInputsInput) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestInputsInput) SetMedia(v string) *SubmitPackageJobRequestInputsInput {
	s.Media = &v
	return s
}

func (s *SubmitPackageJobRequestInputsInput) SetType(v string) *SubmitPackageJobRequestInputsInput {
	s.Type = &v
	return s
}

type SubmitPackageJobRequestOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitPackageJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestOutput) SetMedia(v string) *SubmitPackageJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitPackageJobRequestOutput) SetType(v string) *SubmitPackageJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitPackageJobRequestScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitPackageJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobRequestScheduleConfig) SetPipelineId(v string) *SubmitPackageJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitPackageJobRequestScheduleConfig) SetPriority(v int32) *SubmitPackageJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitPackageJobShrinkRequest struct {
	// This parameter is required.
	InputsShrink *string `json:"Inputs,omitempty" xml:"Inputs,omitempty"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OutputShrink         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// example:
	//
	// {"param": "value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitPackageJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobShrinkRequest) SetInputsShrink(v string) *SubmitPackageJobShrinkRequest {
	s.InputsShrink = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetName(v string) *SubmitPackageJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetOutputShrink(v string) *SubmitPackageJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitPackageJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitPackageJobShrinkRequest) SetUserData(v string) *SubmitPackageJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitPackageJobResponseBody struct {
	// example:
	//
	// 2d705f385b704ee5b*******a36d93e0
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitPackageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobResponseBody) SetJobId(v string) *SubmitPackageJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitPackageJobResponseBody) SetRequestId(v string) *SubmitPackageJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitPackageJobResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitPackageJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitPackageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitPackageJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitPackageJobResponse) SetHeaders(v map[string]*string) *SubmitPackageJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitPackageJobResponse) SetStatusCode(v int32) *SubmitPackageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitPackageJobResponse) SetBody(v *SubmitPackageJobResponseBody) *SubmitPackageJobResponse {
	s.Body = v
	return s
}

type SubmitSmarttagJobRequest struct {
	// example:
	//
	// example content ****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// http://123.com/testVideo.mp4
	ContentAddr *string `json:"ContentAddr,omitempty" xml:"ContentAddr,omitempty"`
	// example:
	//
	// application/zip
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// input
	Input *SubmitSmarttagJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// https://example.com/endpoint/aliyun/ai?id=76401125000***
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// example:
	//
	// {"needAsrData":true, "needOcrData":false}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// scheduleConfig
	ScheduleConfig *SubmitSmarttagJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// 39f8e0bc005e4f309379701645f4
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// example-title-****
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {“a”:"test"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSmarttagJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobRequest) SetContent(v string) *SubmitSmarttagJobRequest {
	s.Content = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetContentAddr(v string) *SubmitSmarttagJobRequest {
	s.ContentAddr = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetContentType(v string) *SubmitSmarttagJobRequest {
	s.ContentType = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetInput(v *SubmitSmarttagJobRequestInput) *SubmitSmarttagJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSmarttagJobRequest) SetNotifyUrl(v string) *SubmitSmarttagJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetParams(v string) *SubmitSmarttagJobRequest {
	s.Params = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetScheduleConfig(v *SubmitSmarttagJobRequestScheduleConfig) *SubmitSmarttagJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSmarttagJobRequest) SetTemplateId(v string) *SubmitSmarttagJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetTitle(v string) *SubmitSmarttagJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetUserData(v string) *SubmitSmarttagJobRequest {
	s.UserData = &v
	return s
}

type SubmitSmarttagJobRequestInput struct {
	// example:
	//
	// c5c62d8f0361337cab312dce8e77dc6d
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSmarttagJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobRequestInput) SetMedia(v string) *SubmitSmarttagJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSmarttagJobRequestInput) SetType(v string) *SubmitSmarttagJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSmarttagJobRequestScheduleConfig struct {
	// example:
	//
	// acdbfe4323bcfdae
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 4
	Priority *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSmarttagJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSmarttagJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSmarttagJobRequestScheduleConfig) SetPriority(v string) *SubmitSmarttagJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSmarttagJobShrinkRequest struct {
	// example:
	//
	// example content ****
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// http://123.com/testVideo.mp4
	ContentAddr *string `json:"ContentAddr,omitempty" xml:"ContentAddr,omitempty"`
	// example:
	//
	// application/zip
	ContentType *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	// input
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// https://example.com/endpoint/aliyun/ai?id=76401125000***
	NotifyUrl *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	// example:
	//
	// {"needAsrData":true, "needOcrData":false}
	Params *string `json:"Params,omitempty" xml:"Params,omitempty"`
	// scheduleConfig
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// example:
	//
	// 39f8e0bc005e4f309379701645f4
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// example:
	//
	// example-title-****
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// {“a”:"test"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSmarttagJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobShrinkRequest) SetContent(v string) *SubmitSmarttagJobShrinkRequest {
	s.Content = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetContentAddr(v string) *SubmitSmarttagJobShrinkRequest {
	s.ContentAddr = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetContentType(v string) *SubmitSmarttagJobShrinkRequest {
	s.ContentType = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetInputShrink(v string) *SubmitSmarttagJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetNotifyUrl(v string) *SubmitSmarttagJobShrinkRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetParams(v string) *SubmitSmarttagJobShrinkRequest {
	s.Params = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSmarttagJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetTemplateId(v string) *SubmitSmarttagJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetTitle(v string) *SubmitSmarttagJobShrinkRequest {
	s.Title = &v
	return s
}

func (s *SubmitSmarttagJobShrinkRequest) SetUserData(v string) *SubmitSmarttagJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSmarttagJobResponseBody struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSmarttagJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobResponseBody) SetJobId(v string) *SubmitSmarttagJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSmarttagJobResponseBody) SetRequestId(v string) *SubmitSmarttagJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSmarttagJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSmarttagJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSmarttagJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobResponse) SetHeaders(v map[string]*string) *SubmitSmarttagJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSmarttagJobResponse) SetStatusCode(v int32) *SubmitSmarttagJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSmarttagJobResponse) SetBody(v *SubmitSmarttagJobResponseBody) *SubmitSmarttagJobResponse {
	s.Body = v
	return s
}

type SubmitSnapshotJobRequest struct {
	// This parameter is required.
	Input *SubmitSnapshotJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	Output         *SubmitSnapshotJobRequestOutput         `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ScheduleConfig *SubmitSnapshotJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// This parameter is required.
	TemplateConfig *SubmitSnapshotJobRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// example:
	//
	// {"test parameter": "test value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequest) SetInput(v *SubmitSnapshotJobRequestInput) *SubmitSnapshotJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetName(v string) *SubmitSnapshotJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetOutput(v *SubmitSnapshotJobRequestOutput) *SubmitSnapshotJobRequest {
	s.Output = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetScheduleConfig(v *SubmitSnapshotJobRequestScheduleConfig) *SubmitSnapshotJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetTemplateConfig(v *SubmitSnapshotJobRequestTemplateConfig) *SubmitSnapshotJobRequest {
	s.TemplateConfig = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetUserData(v string) *SubmitSnapshotJobRequest {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/object.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Media
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSnapshotJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestInput) SetMedia(v string) *SubmitSnapshotJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSnapshotJobRequestInput) SetType(v string) *SubmitSnapshotJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSnapshotJobRequestOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://test-bucket/output-{Count}.jpg
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSnapshotJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestOutput) SetMedia(v string) *SubmitSnapshotJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitSnapshotJobRequestOutput) SetType(v string) *SubmitSnapshotJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitSnapshotJobRequestScheduleConfig struct {
	// example:
	//
	// ****96e8864746a0b6f3****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s SubmitSnapshotJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSnapshotJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfig struct {
	OverwriteParams *SubmitSnapshotJobRequestTemplateConfigOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfig) SetOverwriteParams(v *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) *SubmitSnapshotJobRequestTemplateConfig {
	s.OverwriteParams = v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfig) SetTemplateId(v string) *SubmitSnapshotJobRequestTemplateConfig {
	s.TemplateId = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfigOverwriteParams struct {
	// example:
	//
	// 30
	BlackLevel *int32 `json:"BlackLevel,omitempty" xml:"BlackLevel,omitempty"`
	// example:
	//
	// 5
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// example:
	//
	// intra
	FrameType *string `json:"FrameType,omitempty" xml:"FrameType,omitempty"`
	// example:
	//
	// 480
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 10
	Interval *int64 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// example:
	//
	// true
	IsSptFrag *bool `json:"IsSptFrag,omitempty" xml:"IsSptFrag,omitempty"`
	// example:
	//
	// 70
	PixelBlackThreshold  *int32                                                                     `json:"PixelBlackThreshold,omitempty" xml:"PixelBlackThreshold,omitempty"`
	SpriteSnapshotConfig *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig `json:"SpriteSnapshotConfig,omitempty" xml:"SpriteSnapshotConfig,omitempty" type:"Struct"`
	// example:
	//
	// 1000
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// example:
	//
	// Sprite
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 720
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetBlackLevel(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.BlackLevel = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetCount(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Count = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetFrameType(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.FrameType = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetHeight(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetInterval(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Interval = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetIsSptFrag(v bool) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.IsSptFrag = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetPixelBlackThreshold(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.PixelBlackThreshold = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetSpriteSnapshotConfig(v *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.SpriteSnapshotConfig = v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetTime(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Time = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetType(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Type = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetWidth(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Width = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig struct {
	// example:
	//
	// 480
	CellHeight *int32 `json:"CellHeight,omitempty" xml:"CellHeight,omitempty"`
	// example:
	//
	// 720
	CellWidth *int32 `json:"CellWidth,omitempty" xml:"CellWidth,omitempty"`
	// example:
	//
	// #000000
	Color *string `json:"Color,omitempty" xml:"Color,omitempty"`
	// example:
	//
	// 20
	Columns *int32 `json:"Columns,omitempty" xml:"Columns,omitempty"`
	// example:
	//
	// 20
	Lines *int32 `json:"Lines,omitempty" xml:"Lines,omitempty"`
	// example:
	//
	// 20
	Margin *int32 `json:"Margin,omitempty" xml:"Margin,omitempty"`
	// example:
	//
	// 20
	Padding *int32 `json:"Padding,omitempty" xml:"Padding,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetCellHeight(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.CellHeight = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetCellWidth(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.CellWidth = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetColor(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Color = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetColumns(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Columns = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetLines(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Lines = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetMargin(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Margin = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetPadding(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Padding = &v
	return s
}

type SubmitSnapshotJobShrinkRequest struct {
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// SampleJob
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OutputShrink         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// This parameter is required.
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// example:
	//
	// {"test parameter": "test value"}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobShrinkRequest) SetInputShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetName(v string) *SubmitSnapshotJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetOutputShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetTemplateConfigShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetUserData(v string) *SubmitSnapshotJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBody) SetJobId(v string) *SubmitSnapshotJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBody) SetRequestId(v string) *SubmitSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSnapshotJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponse) SetHeaders(v map[string]*string) *SubmitSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSnapshotJobResponse) SetStatusCode(v int32) *SubmitSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSnapshotJobResponse) SetBody(v *SubmitSnapshotJobResponseBody) *SubmitSnapshotJobResponse {
	s.Body = v
	return s
}

type SubmitStandardCustomizedVoiceJobRequest struct {
	// example:
	//
	// ****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****,****571c704445f9a0ee011406c2****
	Audios *string `json:"Audios,omitempty" xml:"Audios,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Authentication *string `json:"Authentication,omitempty" xml:"Authentication,omitempty"`
	// example:
	//
	// https://your-bucket.oss-cn-shanghai.aliyuncs.com/demo.mp3
	DemoAudioMediaURL *string `json:"DemoAudioMediaURL,omitempty" xml:"DemoAudioMediaURL,omitempty"`
	// example:
	//
	// female
	Gender    *string `json:"Gender,omitempty" xml:"Gender,omitempty"`
	VoiceName *string `json:"VoiceName,omitempty" xml:"VoiceName,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetAudios(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.Audios = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetAuthentication(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.Authentication = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetDemoAudioMediaURL(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.DemoAudioMediaURL = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetGender(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.Gender = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobRequest) SetVoiceName(v string) *SubmitStandardCustomizedVoiceJobRequest {
	s.VoiceName = &v
	return s
}

type SubmitStandardCustomizedVoiceJobResponseBody struct {
	Data *SubmitStandardCustomizedVoiceJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ****63E8B7C7-4812-46AD-0FA56029AC86****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobResponseBody) SetData(v *SubmitStandardCustomizedVoiceJobResponseBodyData) *SubmitStandardCustomizedVoiceJobResponseBody {
	s.Data = v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponseBody) SetRequestId(v string) *SubmitStandardCustomizedVoiceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponseBody) SetSuccess(v bool) *SubmitStandardCustomizedVoiceJobResponseBody {
	s.Success = &v
	return s
}

type SubmitStandardCustomizedVoiceJobResponseBodyData struct {
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobResponseBodyData) SetJobId(v string) *SubmitStandardCustomizedVoiceJobResponseBodyData {
	s.JobId = &v
	return s
}

type SubmitStandardCustomizedVoiceJobResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitStandardCustomizedVoiceJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitStandardCustomizedVoiceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitStandardCustomizedVoiceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitStandardCustomizedVoiceJobResponse) SetHeaders(v map[string]*string) *SubmitStandardCustomizedVoiceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponse) SetStatusCode(v int32) *SubmitStandardCustomizedVoiceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitStandardCustomizedVoiceJobResponse) SetBody(v *SubmitStandardCustomizedVoiceJobResponseBody) *SubmitStandardCustomizedVoiceJobResponse {
	s.Body = v
	return s
}

type SubmitSyncMediaInfoJobRequest struct {
	// This parameter is required.
	Input *SubmitSyncMediaInfoJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// job-name
	Name           *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	ScheduleConfig *SubmitSyncMediaInfoJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequest) SetInput(v *SubmitSyncMediaInfoJobRequestInput) *SubmitSyncMediaInfoJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetName(v string) *SubmitSyncMediaInfoJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetScheduleConfig(v *SubmitSyncMediaInfoJobRequestScheduleConfig) *SubmitSyncMediaInfoJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetUserData(v string) *SubmitSyncMediaInfoJobRequest {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobRequestInput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequestInput) SetMedia(v string) *SubmitSyncMediaInfoJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequestInput) SetType(v string) *SubmitSyncMediaInfoJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSyncMediaInfoJobRequestScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSyncMediaInfoJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequestScheduleConfig) SetPriority(v int32) *SubmitSyncMediaInfoJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSyncMediaInfoJobShrinkRequest struct {
	// This parameter is required.
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// job-name
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetInputShrink(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetName(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetUserData(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) *SubmitSyncMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBody) SetRequestId(v string) *SubmitSyncMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJob struct {
	// example:
	//
	// true
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                              `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input      *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// example:
	//
	// ab4802364a2e49208c99efab82dfa8e8
	JobId             *string                                                          `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaInfoProperty *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 4879B9DE-E4B6-19DC-91F5-9D5F4DCE4168
	RequestId      *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	AudioStreamInfoList []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo       *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo         `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	VideoStreamInfoList []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// us
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 999e68259c924f52a6be603cbb3f91cc
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// zh
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSyncMediaInfoJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitSyncMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitSyncMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponse) SetStatusCode(v int32) *SubmitSyncMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponse) SetBody(v *SubmitSyncMediaInfoJobResponseBody) *SubmitSyncMediaInfoJobResponse {
	s.Body = v
	return s
}

type SubmitTextGenerateJobRequest struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GenerateConfig *string `json:"GenerateConfig,omitempty" xml:"GenerateConfig,omitempty"`
	Title          *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// MarketingCopy
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTextGenerateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTextGenerateJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTextGenerateJobRequest) SetDescription(v string) *SubmitTextGenerateJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetGenerateConfig(v string) *SubmitTextGenerateJobRequest {
	s.GenerateConfig = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetTitle(v string) *SubmitTextGenerateJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetType(v string) *SubmitTextGenerateJobRequest {
	s.Type = &v
	return s
}

func (s *SubmitTextGenerateJobRequest) SetUserData(v string) *SubmitTextGenerateJobRequest {
	s.UserData = &v
	return s
}

type SubmitTextGenerateJobResponseBody struct {
	// example:
	//
	// ****d80e4e4044975745c14b****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Id of the request
	//
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitTextGenerateJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTextGenerateJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTextGenerateJobResponseBody) SetJobId(v string) *SubmitTextGenerateJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitTextGenerateJobResponseBody) SetRequestId(v string) *SubmitTextGenerateJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitTextGenerateJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTextGenerateJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTextGenerateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTextGenerateJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTextGenerateJobResponse) SetHeaders(v map[string]*string) *SubmitTextGenerateJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTextGenerateJobResponse) SetStatusCode(v int32) *SubmitTextGenerateJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTextGenerateJobResponse) SetBody(v *SubmitTextGenerateJobResponseBody) *SubmitTextGenerateJobResponse {
	s.Body = v
	return s
}

type SubmitTranscodeJobRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// This parameter is required.
	InputGroup []*SubmitTranscodeJobRequestInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OutputGroup []*SubmitTranscodeJobRequestOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// job-name
	ScheduleConfig *SubmitTranscodeJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequest) SetClientToken(v string) *SubmitTranscodeJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitTranscodeJobRequest) SetInputGroup(v []*SubmitTranscodeJobRequestInputGroup) *SubmitTranscodeJobRequest {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetName(v string) *SubmitTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobRequest) SetOutputGroup(v []*SubmitTranscodeJobRequestOutputGroup) *SubmitTranscodeJobRequest {
	s.OutputGroup = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetScheduleConfig(v *SubmitTranscodeJobRequestScheduleConfig) *SubmitTranscodeJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetUserData(v string) *SubmitTranscodeJobRequest {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobRequestInputGroup struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestInputGroup) SetInputUrl(v string) *SubmitTranscodeJobRequestInputGroup {
	s.InputUrl = &v
	return s
}

func (s *SubmitTranscodeJobRequestInputGroup) SetMedia(v string) *SubmitTranscodeJobRequestInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestInputGroup) SetType(v string) *SubmitTranscodeJobRequestInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroup struct {
	// This parameter is required.
	Output *SubmitTranscodeJobRequestOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// This parameter is required.
	ProcessConfig *SubmitTranscodeJobRequestOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroup) SetOutput(v *SubmitTranscodeJobRequestOutputGroupOutput) *SubmitTranscodeJobRequestOutputGroup {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroup) SetProcessConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfig) *SubmitTranscodeJobRequestOutputGroup {
	s.ProcessConfig = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// oss://bucket/path/to/{MediaId}/{JobId}.mp4
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetOutputUrl(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.OutputUrl = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetType(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfig struct {
	CombineConfigs  []*SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs  `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	Encryption      *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption        `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	ImageWatermarks []*SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	Subtitles       []*SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles       `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	TextWatermarks  []*SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks  `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// This parameter is required.
	Transcode *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetCombineConfigs(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetEncryption(v *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetSubtitles(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetTranscode(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs struct {
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption struct {
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetCipherText(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetEncryptType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption) SetKeyServiceType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks struct {
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// example:
	//
	// 10
	Dy   *string                                                                              `json:"Dy,omitempty" xml:"Dy,omitempty"`
	File *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// TopLeft
	ReferPos *string                                                                                  `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Timeline *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles struct {
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// example:
	//
	// UTF-8
	CharEnc *string                                                                        `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	File    *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks struct {
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode struct {
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams struct {
	Audio       *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	MuxConfig   *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TransConfig *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetTransConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string                                                                               `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	Segment *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobRequestScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobRequestScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobShrinkRequest struct {
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// This parameter is required.
	InputGroupShrink *string `json:"InputGroup,omitempty" xml:"InputGroup,omitempty"`
	// example:
	//
	// job-name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OutputGroupShrink *string `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty"`
	// example:
	//
	// job-name
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobShrinkRequest) SetClientToken(v string) *SubmitTranscodeJobShrinkRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetInputGroupShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.InputGroupShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetName(v string) *SubmitTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetOutputGroupShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.OutputGroupShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetUserData(v string) *SubmitTranscodeJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBody struct {
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// TranscodeParentJobWithSubJobDTO
	TranscodeParentJob *SubmitTranscodeJobResponseBodyTranscodeParentJob `json:"TranscodeParentJob,omitempty" xml:"TranscodeParentJob,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBody) SetRequestId(v string) *SubmitTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBody) SetTranscodeParentJob(v *SubmitTranscodeJobResponseBodyTranscodeParentJob) *SubmitTranscodeJobResponseBody {
	s.TranscodeParentJob = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJob struct {
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                                       `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 1
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// example:
	//
	// transcode-job
	Name        *string                                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// example:
	//
	// 0
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId      *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Success
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime       *string                                                             `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	TranscodeJobList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList `json:"TranscodeJobList,omitempty" xml:"TranscodeJobList,omitempty" type:"Repeated"`
	// example:
	//
	// API
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJob) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetCreateTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.CreateTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetFinishTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetInputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetJobCount(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.JobCount = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetOutputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.OutputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetParentJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.ParentJobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetPercent(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Percent = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetRequestId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetScheduleConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Status = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetSubmitTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetTranscodeJobList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.TranscodeJobList = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetTriggerSource(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetUserData(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup struct {
	Output        *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput        `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ProcessConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetOutput(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetProcessConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.ProcessConfig = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig struct {
	CombineConfigs  []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs  `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	Encryption      *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption        `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	ImageWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	Subtitles       []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles       `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	TextWatermarks  []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks  `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	Transcode       *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode         `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetCombineConfigs(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetEncryption(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Encryption = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetSubtitles(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTranscode(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs struct {
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetAudioIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetDuration(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetStart(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs) SetVideoIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption struct {
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetCipherText(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetDecryptKeyUri(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetEncryptType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption) SetKeyServiceType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// example:
	//
	// 10
	Dy   *string                                                                                                     `json:"Dy,omitempty" xml:"Dy,omitempty"`
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// TopLeft
	ReferPos *string                                                                                                         `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Timeline *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// example:
	//
	// UTF-8
	CharEnc *string                                                                                               `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	File    *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams struct {
	Audio       *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	MuxConfig   *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TransConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetTransConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string                                                                                                      `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	Segment *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList struct {
	// example:
	//
	// 2022-01-12T08:49:41Z
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	FinishTime *string                                                                       `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	InputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// example:
	//
	// 7d6a7e0d4db2457a8d45ff5d43e1bf0a
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 0
	JobIndex *int32 `json:"JobIndex,omitempty" xml:"JobIndex,omitempty"`
	// example:
	//
	// transcode-job
	Name        *string                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	OutFileMeta *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta `json:"OutFileMeta,omitempty" xml:"OutFileMeta,omitempty" type:"Struct"`
	Output      *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput      `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// example:
	//
	// 8b2198504dd340b7b3c9842a74fc9baa
	ParentJobId   *string                                                                        `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	ProcessConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
	// example:
	//
	// 31E30781-9495-5E2D-A84D-759B0A01E262
	RequestId      *string                                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// example:
	//
	// Init
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// {}
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// example:
	//
	// 2022-01-12T08:49:41Z
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// example:
	//
	// user-data
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetCreateTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.CreateTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetFinishTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.FinishTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetInputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobIndex(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobIndex = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutFileMeta(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.OutFileMeta = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutput(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetParentJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ParentJobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetProcessConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ProcessConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetRequestId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetScheduleConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Status = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitResultJson(v map[string]interface{}) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetUserData(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetInputUrl(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.InputUrl = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta struct {
	AudioStreamInfoList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	FileBasicInfo       *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo         `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	VideoStreamInfoList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetAudioStreamInfoList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetFileBasicInfo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetVideoStreamInfoList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.VideoStreamInfoList = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList struct {
	// example:
	//
	// 0.f
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// stereo
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC (Advanced Audio Coding)
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// example:
	//
	// aac
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// example:
	//
	// 0x000f
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// example:
	//
	// [15][0][0][0]
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// example:
	//
	// 1/44100
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 1
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// fltp
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// example:
	//
	// 44100
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// example:
	//
	// 1/90000
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannelLayout(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecLongName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTag(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTagString(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetLang(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleRate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetStartTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetTimebase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo struct {
	// example:
	//
	// 888.563
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 403.039999
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// file.m3u8
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// example:
	//
	// 31737
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// example:
	//
	// Normal
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// example:
	//
	// source_file
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// example:
	//
	// http://bucket.oss-cn-shanghai.aliyuncs.com/path/to/file.m3u8
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// example:
	//
	// hls,applehttp
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 73e07de0f77171eca3fc7035d0b26402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// cn-shanghai
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileSize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileUrl(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFormatName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetMediaId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetRegion(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList struct {
	// example:
	//
	// 25.0
	AvgFps *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	// example:
	//
	// 888.563
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// example:
	//
	// H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// example:
	//
	// h264
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// example:
	//
	// 0x001b
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// example:
	//
	// [27][0][0][0]
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	// example:
	//
	// 1/50
	CodecTimeBase *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// example:
	//
	// 16:9
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// example:
	//
	// 403.039989
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 25.0
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 2
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// example:
	//
	// 478
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 0
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// example:
	//
	// cn
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// example:
	//
	// 31
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// example:
	//
	// 10040
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// High
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 0
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// example:
	//
	// 478:477
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// example:
	//
	// 1.473556
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	// example:
	//
	// 1/90000
	TimeBase *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// example:
	//
	// 848
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetAvgFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetBitRate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecLongName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTag(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTagString(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDar(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHasBFrames(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLang(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLevel(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetNumFrames(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetRotate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetSar(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetStartTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// oss://bucket/path/to/{MediaId}/{JobId}.mp4
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetOutputUrl(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.OutputUrl = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig struct {
	CombineConfigs  []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs  `json:"CombineConfigs,omitempty" xml:"CombineConfigs,omitempty" type:"Repeated"`
	Encryption      *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption        `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	ImageWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	Subtitles       []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles       `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	TextWatermarks  []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks  `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	Transcode       *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode         `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetCombineConfigs(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.CombineConfigs = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetEncryption(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Encryption = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetSubtitles(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTranscode(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs struct {
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	AudioIndex *string `json:"AudioIndex,omitempty" xml:"AudioIndex,omitempty"`
	// example:
	//
	// 20.0
	Duration *float64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 0.0
	Start *float64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 0 或 exclude
	VideoIndex *string `json:"VideoIndex,omitempty" xml:"VideoIndex,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetAudioIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.AudioIndex = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetDuration(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetStart(v float64) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.Start = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs) SetVideoIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigCombineConfigs {
	s.VideoIndex = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption struct {
	// example:
	//
	// MTYi00NDU0LTg5O****
	CipherText *string `json:"CipherText,omitempty" xml:"CipherText,omitempty"`
	// example:
	//
	// https://sample.com/path?CipherText=MTYi00NDU0LTg5O****
	DecryptKeyUri *string `json:"DecryptKeyUri,omitempty" xml:"DecryptKeyUri,omitempty"`
	// example:
	//
	// PrivateEncryption
	EncryptType *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	// example:
	//
	// KMS
	KeyServiceType *string `json:"KeyServiceType,omitempty" xml:"KeyServiceType,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetCipherText(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.CipherText = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetDecryptKeyUri(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.DecryptKeyUri = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetEncryptType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.EncryptType = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption) SetKeyServiceType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigEncryption {
	s.KeyServiceType = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams struct {
	// example:
	//
	// 10
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// example:
	//
	// 10
	Dy   *string                                                                                                          `json:"Dy,omitempty" xml:"Dy,omitempty"`
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// TopLeft
	ReferPos *string                                                                                                              `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Timeline *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// example:
	//
	// 32
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// example:
	//
	// ToEND
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 00:00:05
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams struct {
	// example:
	//
	// UTF-8
	CharEnc *string                                                                                                    `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	File    *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// example:
	//
	// vtt
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile struct {
	// example:
	//
	// oss://bucket/path/to/video.mp4
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// example:
	//
	// OSS
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams struct {
	// example:
	//
	// false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// example:
	//
	// #006400
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// example:
	//
	// 0
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// example:
	//
	// 测试水印
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// 1.0
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// example:
	//
	// #006400
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// example:
	//
	// SimSun
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// example:
	//
	// 16
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// example:
	//
	// 10
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// example:
	//
	// 10
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode struct {
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// example:
	//
	// 9547c6ad97cb4f2aaa29683ebd18d410
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams struct {
	Audio       *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Container   *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	MuxConfig   *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TransConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Video       *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetTransConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.TransConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio struct {
	// example:
	//
	// 128
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string                                                                                                           `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Volume     *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// example:
	//
	// -6
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// example:
	//
	// 8
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// example:
	//
	// auto
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// example:
	//
	// -1
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer struct {
	// example:
	//
	// mp4
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	Segment *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// example:
	//
	// 10
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// example:
	//
	// 2,3
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig struct {
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetAdjDarMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckReso(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckResoFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig) SetTransMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsTransConfig {
	s.TransMode = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo struct {
	// example:
	//
	// 6000
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// example:
	//
	// 3000
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 6000
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 23
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// example:
	//
	// 25
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 250
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 1080
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// false
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// example:
	//
	// 9000
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// example:
	//
	// 1280:800:0:140
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// example:
	//
	// yuv420p
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// example:
	//
	// medium
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// example:
	//
	// Main
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// false
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// example:
	//
	// progressive
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// example:
	//
	// 1920
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig struct {
	// example:
	//
	// e37ebee5d98b4781897f6086e89f9c56
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 5
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponse) SetHeaders(v map[string]*string) *SubmitTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTranscodeJobResponse) SetStatusCode(v int32) *SubmitTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTranscodeJobResponse) SetBody(v *SubmitTranscodeJobResponseBody) *SubmitTranscodeJobResponse {
	s.Body = v
	return s
}

type UpdateAvatarTrainingJobRequest struct {
	AvatarDescription *string `json:"AvatarDescription,omitempty" xml:"AvatarDescription,omitempty"`
	AvatarName        *string `json:"AvatarName,omitempty" xml:"AvatarName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Portrait *string `json:"Portrait,omitempty" xml:"Portrait,omitempty"`
	// example:
	//
	// https://your-bucket.oss-cn-hangzhou.aliyuncs.com/thumbnail.png
	Thumbnail *string `json:"Thumbnail,omitempty" xml:"Thumbnail,omitempty"`
	// example:
	//
	// True
	Transparent *bool `json:"Transparent,omitempty" xml:"Transparent,omitempty"`
	// example:
	//
	// ****571c704445f9a0ee011406c2****
	Video *string `json:"Video,omitempty" xml:"Video,omitempty"`
}

func (s UpdateAvatarTrainingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobRequest) SetAvatarDescription(v string) *UpdateAvatarTrainingJobRequest {
	s.AvatarDescription = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetAvatarName(v string) *UpdateAvatarTrainingJobRequest {
	s.AvatarName = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetJobId(v string) *UpdateAvatarTrainingJobRequest {
	s.JobId = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetPortrait(v string) *UpdateAvatarTrainingJobRequest {
	s.Portrait = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetThumbnail(v string) *UpdateAvatarTrainingJobRequest {
	s.Thumbnail = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetTransparent(v bool) *UpdateAvatarTrainingJobRequest {
	s.Transparent = &v
	return s
}

func (s *UpdateAvatarTrainingJobRequest) SetVideo(v string) *UpdateAvatarTrainingJobRequest {
	s.Video = &v
	return s
}

type UpdateAvatarTrainingJobResponseBody struct {
	Data *UpdateAvatarTrainingJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAvatarTrainingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobResponseBody) SetData(v *UpdateAvatarTrainingJobResponseBodyData) *UpdateAvatarTrainingJobResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAvatarTrainingJobResponseBody) SetRequestId(v string) *UpdateAvatarTrainingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAvatarTrainingJobResponseBody) SetSuccess(v bool) *UpdateAvatarTrainingJobResponseBody {
	s.Success = &v
	return s
}

type UpdateAvatarTrainingJobResponseBodyData struct {
	// example:
	//
	// ****d718e2ff4f018ccf419a7b71****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s UpdateAvatarTrainingJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobResponseBodyData) SetJobId(v string) *UpdateAvatarTrainingJobResponseBodyData {
	s.JobId = &v
	return s
}

type UpdateAvatarTrainingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAvatarTrainingJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAvatarTrainingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAvatarTrainingJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateAvatarTrainingJobResponse) SetHeaders(v map[string]*string) *UpdateAvatarTrainingJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateAvatarTrainingJobResponse) SetStatusCode(v int32) *UpdateAvatarTrainingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAvatarTrainingJobResponse) SetBody(v *UpdateAvatarTrainingJobResponseBody) *UpdateAvatarTrainingJobResponse {
	s.Body = v
	return s
}

type UpdateCategoryRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 43
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// This parameter is required.
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
}

func (s UpdateCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryRequest) GoString() string {
	return s.String()
}

func (s *UpdateCategoryRequest) SetCateId(v int64) *UpdateCategoryRequest {
	s.CateId = &v
	return s
}

func (s *UpdateCategoryRequest) SetCateName(v string) *UpdateCategoryRequest {
	s.CateName = &v
	return s
}

type UpdateCategoryResponseBody struct {
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCategoryResponseBody) SetRequestId(v string) *UpdateCategoryResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCategoryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryResponse) GoString() string {
	return s.String()
}

func (s *UpdateCategoryResponse) SetHeaders(v map[string]*string) *UpdateCategoryResponse {
	s.Headers = v
	return s
}

func (s *UpdateCategoryResponse) SetStatusCode(v int32) *UpdateCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCategoryResponse) SetBody(v *UpdateCategoryResponseBody) *UpdateCategoryResponse {
	s.Body = v
	return s
}

type UpdateCustomTemplateRequest struct {
	// example:
	//
	// test-template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// {"param": "sample"}
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateRequest) SetName(v string) *UpdateCustomTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateCustomTemplateRequest) SetTemplateConfig(v string) *UpdateCustomTemplateRequest {
	s.TemplateConfig = &v
	return s
}

func (s *UpdateCustomTemplateRequest) SetTemplateId(v string) *UpdateCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateCustomTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateResponseBody) SetRequestId(v string) *UpdateCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCustomTemplateResponseBody) SetSuccess(v bool) *UpdateCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type UpdateCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateResponse) SetHeaders(v map[string]*string) *UpdateCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateCustomTemplateResponse) SetStatusCode(v int32) *UpdateCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCustomTemplateResponse) SetBody(v *UpdateCustomTemplateResponseBody) *UpdateCustomTemplateResponse {
	s.Body = v
	return s
}

type UpdateCustomizedVoiceRequest struct {
	// example:
	//
	// ****4d5e829d498aaf966b119348****
	DemoAudioMediaId *string `json:"DemoAudioMediaId,omitempty" xml:"DemoAudioMediaId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// xiaozhuan
	VoiceId *string `json:"VoiceId,omitempty" xml:"VoiceId,omitempty"`
}

func (s UpdateCustomizedVoiceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomizedVoiceRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustomizedVoiceRequest) SetDemoAudioMediaId(v string) *UpdateCustomizedVoiceRequest {
	s.DemoAudioMediaId = &v
	return s
}

func (s *UpdateCustomizedVoiceRequest) SetVoiceId(v string) *UpdateCustomizedVoiceRequest {
	s.VoiceId = &v
	return s
}

type UpdateCustomizedVoiceResponseBody struct {
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateCustomizedVoiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomizedVoiceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCustomizedVoiceResponseBody) SetRequestId(v string) *UpdateCustomizedVoiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCustomizedVoiceResponseBody) SetSuccess(v bool) *UpdateCustomizedVoiceResponseBody {
	s.Success = &v
	return s
}

type UpdateCustomizedVoiceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateCustomizedVoiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateCustomizedVoiceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomizedVoiceResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustomizedVoiceResponse) SetHeaders(v map[string]*string) *UpdateCustomizedVoiceResponse {
	s.Headers = v
	return s
}

func (s *UpdateCustomizedVoiceResponse) SetStatusCode(v int32) *UpdateCustomizedVoiceResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCustomizedVoiceResponse) SetBody(v *UpdateCustomizedVoiceResponseBody) *UpdateCustomizedVoiceResponse {
	s.Body = v
	return s
}

type UpdateEditingProjectRequest struct {
	// example:
	//
	// Reserving
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	ClipsParam     *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// example:
	//
	// https://****.com/6AB4D0E1E1C7446888****.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// testtimeline001desciption
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****4ee4b97e27b525142a6b2****
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Timeline   *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// example:
	//
	// testtimeline
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectRequest) SetBusinessStatus(v string) *UpdateEditingProjectRequest {
	s.BusinessStatus = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetClipsParam(v string) *UpdateEditingProjectRequest {
	s.ClipsParam = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetCoverURL(v string) *UpdateEditingProjectRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetDescription(v string) *UpdateEditingProjectRequest {
	s.Description = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetProjectId(v string) *UpdateEditingProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTemplateId(v string) *UpdateEditingProjectRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTimeline(v string) *UpdateEditingProjectRequest {
	s.Timeline = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTitle(v string) *UpdateEditingProjectRequest {
	s.Title = &v
	return s
}

type UpdateEditingProjectResponseBody struct {
	// example:
	//
	// ****25818875-5F78-4AF6-D7393642CA58****
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectResponseBody) SetRequestId(v string) *UpdateEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectResponse) SetHeaders(v map[string]*string) *UpdateEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *UpdateEditingProjectResponse) SetStatusCode(v int32) *UpdateEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEditingProjectResponse) SetBody(v *UpdateEditingProjectResponseBody) *UpdateEditingProjectResponse {
	s.Body = v
	return s
}

type UpdateLiveRecordTemplateRequest struct {
	// 代表资源名称的资源属性字段
	//
	// This parameter is required.
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	//
	// This parameter is required.
	RecordFormat []*UpdateLiveRecordTemplateRequestRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
	// 代表资源一级ID的资源属性字段
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateRequest) SetName(v string) *UpdateLiveRecordTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequest) SetRecordFormat(v []*UpdateLiveRecordTemplateRequestRecordFormat) *UpdateLiveRecordTemplateRequest {
	s.RecordFormat = v
	return s
}

func (s *UpdateLiveRecordTemplateRequest) SetTemplateId(v string) *UpdateLiveRecordTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveRecordTemplateRequestRecordFormat struct {
	// example:
	//
	// 3600
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// 格式
	//
	// This parameter is required.
	//
	// example:
	//
	// m3u8
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
	// Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{Sequence}_{EscapedStartTime}_{EscapedEndTime}
	OssObjectPrefix *string `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// 切片时长
	//
	// example:
	//
	// 30
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// 切片Oss对象名，不包含后缀
	//
	// example:
	//
	// record/{JobId}/{UnixTimestamp}_{Sequence}
	SliceOssObjectPrefix *string `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s UpdateLiveRecordTemplateRequestRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateRequestRecordFormat) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetCycleDuration(v int32) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetFormat(v string) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.Format = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetOssObjectPrefix(v string) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.OssObjectPrefix = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetSliceDuration(v int32) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *UpdateLiveRecordTemplateRequestRecordFormat) SetSliceOssObjectPrefix(v string) *UpdateLiveRecordTemplateRequestRecordFormat {
	s.SliceOssObjectPrefix = &v
	return s
}

type UpdateLiveRecordTemplateShrinkRequest struct {
	// 代表资源名称的资源属性字段
	//
	// This parameter is required.
	//
	// example:
	//
	// test template
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	//
	// This parameter is required.
	RecordFormatShrink *string `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty"`
	// 代表资源一级ID的资源属性字段
	//
	// This parameter is required.
	//
	// example:
	//
	// 69e1f9fe-1e97-11ed-ba64-0c42a1b73d66
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveRecordTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateShrinkRequest) SetName(v string) *UpdateLiveRecordTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveRecordTemplateShrinkRequest) SetRecordFormatShrink(v string) *UpdateLiveRecordTemplateShrinkRequest {
	s.RecordFormatShrink = &v
	return s
}

func (s *UpdateLiveRecordTemplateShrinkRequest) SetTemplateId(v string) *UpdateLiveRecordTemplateShrinkRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveRecordTemplateResponseBody struct {
	// 代表资源一级ID的资源属性字段
	//
	// example:
	//
	// 0F3D5C03-4B6E-5F40-B7F6-B1956776E7D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateResponseBody) SetRequestId(v string) *UpdateLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveRecordTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *UpdateLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveRecordTemplateResponse) SetStatusCode(v int32) *UpdateLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveRecordTemplateResponse) SetBody(v *UpdateLiveRecordTemplateResponseBody) *UpdateLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type UpdateLiveSnapshotTemplateRequest struct {
	// example:
	//
	// snapshot/{JobId}.jpg
	OverwriteFormat *string `json:"OverwriteFormat,omitempty" xml:"OverwriteFormat,omitempty"`
	// example:
	//
	// snapshot/{JobId}/{UnixTimestamp}.jpg
	SequenceFormat *string `json:"SequenceFormat,omitempty" xml:"SequenceFormat,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****a046-263c-3560-978a-fb287782****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// This parameter is required.
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// 5
	TimeInterval *int32 `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
}

func (s UpdateLiveSnapshotTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotTemplateRequest) SetOverwriteFormat(v string) *UpdateLiveSnapshotTemplateRequest {
	s.OverwriteFormat = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetSequenceFormat(v string) *UpdateLiveSnapshotTemplateRequest {
	s.SequenceFormat = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetTemplateId(v string) *UpdateLiveSnapshotTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetTemplateName(v string) *UpdateLiveSnapshotTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateRequest) SetTimeInterval(v int32) *UpdateLiveSnapshotTemplateRequest {
	s.TimeInterval = &v
	return s
}

type UpdateLiveSnapshotTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveSnapshotTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotTemplateResponseBody) SetRequestId(v string) *UpdateLiveSnapshotTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveSnapshotTemplateResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveSnapshotTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveSnapshotTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveSnapshotTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveSnapshotTemplateResponse) SetHeaders(v map[string]*string) *UpdateLiveSnapshotTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveSnapshotTemplateResponse) SetStatusCode(v int32) *UpdateLiveSnapshotTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveSnapshotTemplateResponse) SetBody(v *UpdateLiveSnapshotTemplateResponseBody) *UpdateLiveSnapshotTemplateResponse {
	s.Body = v
	return s
}

type UpdateLiveTranscodeJobRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// mytest3
	Name            *string                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	StreamInput     *UpdateLiveTranscodeJobRequestStreamInput     `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	TimedConfig     *UpdateLiveTranscodeJobRequestTimedConfig     `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty" type:"Struct"`
	TranscodeOutput *UpdateLiveTranscodeJobRequestTranscodeOutput `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty" type:"Struct"`
}

func (s UpdateLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequest) SetJobId(v string) *UpdateLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetName(v string) *UpdateLiveTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetStreamInput(v *UpdateLiveTranscodeJobRequestStreamInput) *UpdateLiveTranscodeJobRequest {
	s.StreamInput = v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetTimedConfig(v *UpdateLiveTranscodeJobRequestTimedConfig) *UpdateLiveTranscodeJobRequest {
	s.TimedConfig = v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetTranscodeOutput(v *UpdateLiveTranscodeJobRequestTranscodeOutput) *UpdateLiveTranscodeJobRequest {
	s.TranscodeOutput = v
	return s
}

type UpdateLiveTranscodeJobRequestStreamInput struct {
	// This parameter is required.
	//
	// example:
	//
	// rtmp://mydomain/app/stream1
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// rtmp
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestStreamInput) SetInputUrl(v string) *UpdateLiveTranscodeJobRequestStreamInput {
	s.InputUrl = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestStreamInput) SetType(v string) *UpdateLiveTranscodeJobRequestStreamInput {
	s.Type = &v
	return s
}

type UpdateLiveTranscodeJobRequestTimedConfig struct {
	// example:
	//
	// 2022-08-05T06:08:31Z
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// example:
	//
	// 2022-06-19T02:16:41Z
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestTimedConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestTimedConfig) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestTimedConfig) SetEndTime(v string) *UpdateLiveTranscodeJobRequestTimedConfig {
	s.EndTime = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestTimedConfig) SetStartTime(v string) *UpdateLiveTranscodeJobRequestTimedConfig {
	s.StartTime = &v
	return s
}

type UpdateLiveTranscodeJobRequestTranscodeOutput struct {
	// This parameter is required.
	//
	// example:
	//
	// mydomain
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// LiveCenter
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestTranscodeOutput) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestTranscodeOutput) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestTranscodeOutput) SetDomainName(v string) *UpdateLiveTranscodeJobRequestTranscodeOutput {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestTranscodeOutput) SetType(v string) *UpdateLiveTranscodeJobRequestTranscodeOutput {
	s.Type = &v
	return s
}

type UpdateLiveTranscodeJobShrinkRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// mytest3
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	StreamInputShrink     *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	TimedConfigShrink     *string `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty"`
	TranscodeOutputShrink *string `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty"`
}

func (s UpdateLiveTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetJobId(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.JobId = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetName(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetStreamInputShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetTimedConfigShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.TimedConfigShrink = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetTranscodeOutputShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.TranscodeOutputShrink = &v
	return s
}

type UpdateLiveTranscodeJobResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobResponseBody) SetRequestId(v string) *UpdateLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *UpdateLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTranscodeJobResponse) SetStatusCode(v int32) *UpdateLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveTranscodeJobResponse) SetBody(v *UpdateLiveTranscodeJobResponseBody) *UpdateLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type UpdateLiveTranscodeTemplateRequest struct {
	Name           *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfig *UpdateLiveTranscodeTemplateRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequest) SetName(v string) *UpdateLiveTranscodeTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequest) SetTemplateConfig(v *UpdateLiveTranscodeTemplateRequestTemplateConfig) *UpdateLiveTranscodeTemplateRequest {
	s.TemplateConfig = v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequest) SetTemplateId(v string) *UpdateLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfig struct {
	AudioParams *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	VideoParams *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfig) SetAudioParams(v *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) *UpdateLiveTranscodeTemplateRequestTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfig) SetVideoParams(v *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) *UpdateLiveTranscodeTemplateRequestTemplateConfig {
	s.VideoParams = v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams struct {
	// example:
	//
	// 100
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// 2
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// example:
	//
	// AAC
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// aac_low
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 44100
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetBitrate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetChannels(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetCodec(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetProfile(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetSamplerate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams struct {
	// example:
	//
	// 2500
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// example:
	//
	// H.264
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// example:
	//
	// 30
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// example:
	//
	// 1000
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// example:
	//
	// 720
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// example:
	//
	// 2
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// example:
	//
	// 1280
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetBitrate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetCodec(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetFps(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetGop(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetHeight(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetProfile(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetWidth(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type UpdateLiveTranscodeTemplateShrinkRequest struct {
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****96e8864746a0b6f3****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetName(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetTemplateConfigShrink(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetTemplateId(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveTranscodeTemplateResponseBody struct {
	// example:
	//
	// ******3B-0E1A-586A-AC29-742247******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateResponseBody) SetRequestId(v string) *UpdateLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *UpdateLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTranscodeTemplateResponse) SetStatusCode(v int32) *UpdateLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateResponse) SetBody(v *UpdateLiveTranscodeTemplateResponseBody) *UpdateLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type UpdateMediaInfoRequest struct {
	// example:
	//
	// true
	AppendTags *bool `json:"AppendTags,omitempty" xml:"AppendTags,omitempty"`
	// example:
	//
	// video
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// example:
	//
	// 3048
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// example:
	//
	// defaultCategory
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.png
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// example:
	//
	// defaultDescription
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/example.mp4
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// updateTags1,updateTags2
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// example:
	//
	// 123-123
	ReferenceId *string `json:"ReferenceId,omitempty" xml:"ReferenceId,omitempty"`
	// example:
	//
	// defaultTitle
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// example:
	//
	// userData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UpdateMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoRequest) SetAppendTags(v bool) *UpdateMediaInfoRequest {
	s.AppendTags = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetBusinessType(v string) *UpdateMediaInfoRequest {
	s.BusinessType = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCateId(v int64) *UpdateMediaInfoRequest {
	s.CateId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCategory(v string) *UpdateMediaInfoRequest {
	s.Category = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCoverURL(v string) *UpdateMediaInfoRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetDescription(v string) *UpdateMediaInfoRequest {
	s.Description = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetInputURL(v string) *UpdateMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetMediaId(v string) *UpdateMediaInfoRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetMediaTags(v string) *UpdateMediaInfoRequest {
	s.MediaTags = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetReferenceId(v string) *UpdateMediaInfoRequest {
	s.ReferenceId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetTitle(v string) *UpdateMediaInfoRequest {
	s.Title = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetUserData(v string) *UpdateMediaInfoRequest {
	s.UserData = &v
	return s
}

type UpdateMediaInfoResponseBody struct {
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoResponseBody) SetMediaId(v string) *UpdateMediaInfoResponseBody {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaInfoResponseBody) SetRequestId(v string) *UpdateMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaInfoResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoResponse) SetHeaders(v map[string]*string) *UpdateMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaInfoResponse) SetStatusCode(v int32) *UpdateMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaInfoResponse) SetBody(v *UpdateMediaInfoResponseBody) *UpdateMediaInfoResponse {
	s.Body = v
	return s
}

type UpdateMediaMarksRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 53afdf003a******6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// This parameter is required.
	MediaMarks *string `json:"MediaMarks,omitempty" xml:"MediaMarks,omitempty"`
}

func (s UpdateMediaMarksRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaMarksRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaMarksRequest) SetMediaId(v string) *UpdateMediaMarksRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaMarksRequest) SetMediaMarks(v string) *UpdateMediaMarksRequest {
	s.MediaMarks = &v
	return s
}

type UpdateMediaMarksResponseBody struct {
	// example:
	//
	// 53afdf003a******6a16b5feac6402
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// mark-f82d*****4994b0915948ef7e16,mark-3d56d*****4c8fa9ae2a1f9e5d2d60
	MediaMarkIds *string `json:"MediaMarkIds,omitempty" xml:"MediaMarkIds,omitempty"`
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaMarksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaMarksResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaMarksResponseBody) SetMediaId(v string) *UpdateMediaMarksResponseBody {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaMarksResponseBody) SetMediaMarkIds(v string) *UpdateMediaMarksResponseBody {
	s.MediaMarkIds = &v
	return s
}

func (s *UpdateMediaMarksResponseBody) SetRequestId(v string) *UpdateMediaMarksResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaMarksResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaMarksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaMarksResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaMarksResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaMarksResponse) SetHeaders(v map[string]*string) *UpdateMediaMarksResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaMarksResponse) SetStatusCode(v int32) *UpdateMediaMarksResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaMarksResponse) SetBody(v *UpdateMediaMarksResponseBody) *UpdateMediaMarksResponse {
	s.Body = v
	return s
}

type UpdateMediaToSearchLibRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// ****019b82e24b37a1c2958dec38****
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// {}
	MsgBody *string `json:"MsgBody,omitempty" xml:"MsgBody,omitempty"`
	// example:
	//
	// test1
	SearchLibName *string `json:"SearchLibName,omitempty" xml:"SearchLibName,omitempty"`
}

func (s UpdateMediaToSearchLibRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaToSearchLibRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaToSearchLibRequest) SetMediaId(v string) *UpdateMediaToSearchLibRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaToSearchLibRequest) SetMsgBody(v string) *UpdateMediaToSearchLibRequest {
	s.MsgBody = &v
	return s
}

func (s *UpdateMediaToSearchLibRequest) SetSearchLibName(v string) *UpdateMediaToSearchLibRequest {
	s.SearchLibName = &v
	return s
}

type UpdateMediaToSearchLibResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// ******b48fb04483915d4f2cd8******
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// 4E84BE44-58A7-****-****-FBEBEA16EF94
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateMediaToSearchLibResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaToSearchLibResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaToSearchLibResponseBody) SetCode(v string) *UpdateMediaToSearchLibResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateMediaToSearchLibResponseBody) SetMediaId(v string) *UpdateMediaToSearchLibResponseBody {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaToSearchLibResponseBody) SetRequestId(v string) *UpdateMediaToSearchLibResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaToSearchLibResponseBody) SetSuccess(v string) *UpdateMediaToSearchLibResponseBody {
	s.Success = &v
	return s
}

type UpdateMediaToSearchLibResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMediaToSearchLibResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMediaToSearchLibResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaToSearchLibResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaToSearchLibResponse) SetHeaders(v map[string]*string) *UpdateMediaToSearchLibResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaToSearchLibResponse) SetStatusCode(v int32) *UpdateMediaToSearchLibResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaToSearchLibResponse) SetBody(v *UpdateMediaToSearchLibResponseBody) *UpdateMediaToSearchLibResponse {
	s.Body = v
	return s
}

type UpdatePipelineRequest struct {
	// example:
	//
	// test-pipeline
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// ****d80e4e4044975745c14b****
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// example:
	//
	// 6
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// example:
	//
	// Paused
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineRequest) SetName(v string) *UpdatePipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdatePipelineRequest) SetPipelineId(v string) *UpdatePipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdatePipelineRequest) SetPriority(v int32) *UpdatePipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdatePipelineRequest) SetStatus(v string) *UpdatePipelineRequest {
	s.Status = &v
	return s
}

type UpdatePipelineResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBody) SetRequestId(v string) *UpdatePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePipelineResponseBody) SetSuccess(v bool) *UpdatePipelineResponseBody {
	s.Success = &v
	return s
}

type UpdatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponse) SetHeaders(v map[string]*string) *UpdatePipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineResponse) SetStatusCode(v int32) *UpdatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePipelineResponse) SetBody(v *UpdatePipelineResponseBody) *UpdatePipelineResponse {
	s.Body = v
	return s
}

type UpdateTemplateRequest struct {
	// example:
	//
	// 参见模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// example:
	//
	// http://example-bucket.oss-cn-shanghai.aliyuncs.com/cover.jpg
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// example:
	//
	// 视频添加水印模板
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// example:
	//
	// {"video":["******c04f1d4a06996144cc1a******","******cb7db64841b159b4f2ea******"],"audio":["******c04f1d4a06996144cc1a******"],"image":["******c04f1d4a06996144cc1a******"]}
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// example:
	//
	// OpenAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// example:
	//
	// Available
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// example:
	//
	// ****20b48fb04483915d4f2cd8ac****
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateTemplateRequest) SetConfig(v string) *UpdateTemplateRequest {
	s.Config = &v
	return s
}

func (s *UpdateTemplateRequest) SetCoverUrl(v string) *UpdateTemplateRequest {
	s.CoverUrl = &v
	return s
}

func (s *UpdateTemplateRequest) SetName(v string) *UpdateTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateTemplateRequest) SetPreviewMedia(v string) *UpdateTemplateRequest {
	s.PreviewMedia = &v
	return s
}

func (s *UpdateTemplateRequest) SetRelatedMediaids(v string) *UpdateTemplateRequest {
	s.RelatedMediaids = &v
	return s
}

func (s *UpdateTemplateRequest) SetSource(v string) *UpdateTemplateRequest {
	s.Source = &v
	return s
}

func (s *UpdateTemplateRequest) SetStatus(v string) *UpdateTemplateRequest {
	s.Status = &v
	return s
}

func (s *UpdateTemplateRequest) SetTemplateId(v string) *UpdateTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateTemplateResponseBody struct {
	// example:
	//
	// ******11-DB8D-4A9A-875B-275798******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBody) SetRequestId(v string) *UpdateTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponse) SetHeaders(v map[string]*string) *UpdateTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateTemplateResponse) SetStatusCode(v int32) *UpdateTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTemplateResponse) SetBody(v *UpdateTemplateResponseBody) *UpdateTemplateResponse {
	s.Body = v
	return s
}

type UploadMediaByURLRequest struct {
	// example:
	//
	// app-1000000
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// example:
	//
	// d67281da3c8743b8823ad12976187***
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// example:
	//
	// [{"SourceURL":"https://example.aliyundoc.com/video01.mp4","Title":"urlUploadTest"}]
	MediaMetaData *string `json:"MediaMetaData,omitempty" xml:"MediaMetaData,omitempty"`
	// example:
	//
	// {"ProcessType": "Workflow","ProcessID":"b72a06c6beeb4dcdb898feef067b1***"}
	PostProcessConfig *string `json:"PostProcessConfig,omitempty" xml:"PostProcessConfig,omitempty"`
	// example:
	//
	// {"StorageType":"oss","StorageLocation":"outin-***.oss-cn-shanghai.aliyuncs.com"}
	UploadTargetConfig *string `json:"UploadTargetConfig,omitempty" xml:"UploadTargetConfig,omitempty"`
	// example:
	//
	// https://diffurl.mp4
	UploadURLs *string `json:"UploadURLs,omitempty" xml:"UploadURLs,omitempty"`
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://example.aliyundoc.com"},"Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UploadMediaByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLRequest) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLRequest) SetAppId(v string) *UploadMediaByURLRequest {
	s.AppId = &v
	return s
}

func (s *UploadMediaByURLRequest) SetEntityId(v string) *UploadMediaByURLRequest {
	s.EntityId = &v
	return s
}

func (s *UploadMediaByURLRequest) SetMediaMetaData(v string) *UploadMediaByURLRequest {
	s.MediaMetaData = &v
	return s
}

func (s *UploadMediaByURLRequest) SetPostProcessConfig(v string) *UploadMediaByURLRequest {
	s.PostProcessConfig = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUploadTargetConfig(v string) *UploadMediaByURLRequest {
	s.UploadTargetConfig = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUploadURLs(v string) *UploadMediaByURLRequest {
	s.UploadURLs = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUserData(v string) *UploadMediaByURLRequest {
	s.UserData = &v
	return s
}

type UploadMediaByURLResponseBody struct {
	// example:
	//
	// ****83B7-7F87-4792-BFE9-63CD2137****
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UploadJobs []*UploadMediaByURLResponseBodyUploadJobs `json:"UploadJobs,omitempty" xml:"UploadJobs,omitempty" type:"Repeated"`
}

func (s UploadMediaByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponseBody) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponseBody) SetRequestId(v string) *UploadMediaByURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadMediaByURLResponseBody) SetUploadJobs(v []*UploadMediaByURLResponseBodyUploadJobs) *UploadMediaByURLResponseBody {
	s.UploadJobs = v
	return s
}

type UploadMediaByURLResponseBodyUploadJobs struct {
	// example:
	//
	// 20ce1e05dba64576b96e9683879f0***
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// f476988629f54a7b8a4ba90d1a6c7***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// http://example****.mp4
	SourceURL *string `json:"SourceURL,omitempty" xml:"SourceURL,omitempty"`
}

func (s UploadMediaByURLResponseBodyUploadJobs) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponseBodyUploadJobs) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetJobId(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.JobId = &v
	return s
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetMediaId(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.MediaId = &v
	return s
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetSourceURL(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.SourceURL = &v
	return s
}

type UploadMediaByURLResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadMediaByURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadMediaByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponse) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponse) SetHeaders(v map[string]*string) *UploadMediaByURLResponse {
	s.Headers = v
	return s
}

func (s *UploadMediaByURLResponse) SetStatusCode(v int32) *UploadMediaByURLResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadMediaByURLResponse) SetBody(v *UploadMediaByURLResponseBody) *UploadMediaByURLResponse {
	s.Body = v
	return s
}

type UploadStreamByURLRequest struct {
	// example:
	//
	// HD
	Definition *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	// example:
	//
	// mp4
	FileExtension *string `json:"FileExtension,omitempty" xml:"FileExtension,omitempty"`
	// example:
	//
	// HDR10
	HDRType *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// https://example.com/sample-stream.mp4
	StreamURL *string `json:"StreamURL,omitempty" xml:"StreamURL,omitempty"`
	// example:
	//
	// {"MessageCallback":{"CallbackURL":"http://test.test.com"}, "Extend":{"localId":"xxx","test":"www"}}
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UploadStreamByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLRequest) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLRequest) SetDefinition(v string) *UploadStreamByURLRequest {
	s.Definition = &v
	return s
}

func (s *UploadStreamByURLRequest) SetFileExtension(v string) *UploadStreamByURLRequest {
	s.FileExtension = &v
	return s
}

func (s *UploadStreamByURLRequest) SetHDRType(v string) *UploadStreamByURLRequest {
	s.HDRType = &v
	return s
}

func (s *UploadStreamByURLRequest) SetMediaId(v string) *UploadStreamByURLRequest {
	s.MediaId = &v
	return s
}

func (s *UploadStreamByURLRequest) SetStreamURL(v string) *UploadStreamByURLRequest {
	s.StreamURL = &v
	return s
}

func (s *UploadStreamByURLRequest) SetUserData(v string) *UploadStreamByURLRequest {
	s.UserData = &v
	return s
}

type UploadStreamByURLResponseBody struct {
	// example:
	//
	// http://outin-***.oss-cn-shanghai.aliyuncs.com/stream/48555e8b-181dd5a8c07/48555e8b-181dd5a8c07.mp4
	FileURL *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	// example:
	//
	// ****cdb3e74639973036bc84****
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// example:
	//
	// 411bed50018971edb60b0764a0ec6***
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// example:
	//
	// ******89-C21D-4B78-AE24-3788B8******
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// https://example.com/sample-stream.mp4
	SourceURL *string `json:"SourceURL,omitempty" xml:"SourceURL,omitempty"`
}

func (s UploadStreamByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLResponseBody) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLResponseBody) SetFileURL(v string) *UploadStreamByURLResponseBody {
	s.FileURL = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetJobId(v string) *UploadStreamByURLResponseBody {
	s.JobId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetMediaId(v string) *UploadStreamByURLResponseBody {
	s.MediaId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetRequestId(v string) *UploadStreamByURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetSourceURL(v string) *UploadStreamByURLResponseBody {
	s.SourceURL = &v
	return s
}

type UploadStreamByURLResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UploadStreamByURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UploadStreamByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLResponse) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLResponse) SetHeaders(v map[string]*string) *UploadStreamByURLResponse {
	s.Headers = v
	return s
}

func (s *UploadStreamByURLResponse) SetStatusCode(v int32) *UploadStreamByURLResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadStreamByURLResponse) SetBody(v *UploadStreamByURLResponseBody) *UploadStreamByURLResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-1":              tea.String("ice.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("ice.aliyuncs.com"),
		"ap-south-1":                  tea.String("ice.aliyuncs.com"),
		"ap-southeast-1":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-2":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-3":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-5":              tea.String("ice.aliyuncs.com"),
		"cn-beijing":                  tea.String("ice.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("ice.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("ice.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("ice.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("ice.aliyuncs.com"),
		"cn-chengdu":                  tea.String("ice.aliyuncs.com"),
		"cn-edge-1":                   tea.String("ice.aliyuncs.com"),
		"cn-fujian":                   tea.String("ice.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("ice.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("ice.aliyuncs.com"),
		"cn-hongkong":                 tea.String("ice.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("ice.aliyuncs.com"),
		"cn-huhehaote":                tea.String("ice.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("ice.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("ice.aliyuncs.com"),
		"cn-qingdao":                  tea.String("ice.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("ice.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("ice.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("ice.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("ice.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("ice.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("ice.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("ice.aliyuncs.com"),
		"cn-wuhan":                    tea.String("ice.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("ice.aliyuncs.com"),
		"cn-yushanfang":               tea.String("ice.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("ice.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("ice.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("ice.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("ice.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("ice.aliyuncs.com"),
		"eu-central-1":                tea.String("ice.aliyuncs.com"),
		"eu-west-1":                   tea.String("ice.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("ice.aliyuncs.com"),
		"me-east-1":                   tea.String("ice.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("ice.aliyuncs.com"),
		"us-east-1":                   tea.String("ice.aliyuncs.com"),
		"us-west-1":                   tea.String("ice.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ice"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建媒资分类
//
// @param request - AddCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddCategoryResponse
func (client *Client) AddCategoryWithOptions(request *AddCategoryRequest, runtime *util.RuntimeOptions) (_result *AddCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建媒资分类
//
// @param request - AddCategoryRequest
//
// @return AddCategoryResponse
func (client *Client) AddCategory(request *AddCategoryRequest) (_result *AddCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCategoryResponse{}
	_body, _err := client.AddCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 剪辑工程增加素材
//
// @param request - AddEditingProjectMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddEditingProjectMaterialsResponse
func (client *Client) AddEditingProjectMaterialsWithOptions(request *AddEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *AddEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaterialMaps)) {
		query["MaterialMaps"] = request.MaterialMaps
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 剪辑工程增加素材
//
// @param request - AddEditingProjectMaterialsRequest
//
// @return AddEditingProjectMaterialsResponse
func (client *Client) AddEditingProjectMaterials(request *AddEditingProjectMaterialsRequest) (_result *AddEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddEditingProjectMaterialsResponse{}
	_body, _err := client.AddEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 收藏公共媒资
//
// @param request - AddFavoritePublicMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddFavoritePublicMediaResponse
func (client *Client) AddFavoritePublicMediaWithOptions(request *AddFavoritePublicMediaRequest, runtime *util.RuntimeOptions) (_result *AddFavoritePublicMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddFavoritePublicMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddFavoritePublicMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 收藏公共媒资
//
// @param request - AddFavoritePublicMediaRequest
//
// @return AddFavoritePublicMediaResponse
func (client *Client) AddFavoritePublicMedia(request *AddFavoritePublicMediaRequest) (_result *AddFavoritePublicMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddFavoritePublicMediaResponse{}
	_body, _err := client.AddFavoritePublicMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 为媒资增加标注信息
//
// @param request - AddMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddMediaMarksResponse
func (client *Client) AddMediaMarksWithOptions(request *AddMediaMarksRequest, runtime *util.RuntimeOptions) (_result *AddMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarks)) {
		query["MediaMarks"] = request.MediaMarks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 为媒资增加标注信息
//
// @param request - AddMediaMarksRequest
//
// @return AddMediaMarksResponse
func (client *Client) AddMediaMarks(request *AddMediaMarksRequest) (_result *AddMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaMarksResponse{}
	_body, _err := client.AddMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// AddTemplate
//
// @param request - AddTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddTemplateResponse
func (client *Client) AddTemplateWithOptions(request *AddTemplateRequest, runtime *util.RuntimeOptions) (_result *AddTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		query["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewMedia)) {
		query["PreviewMedia"] = request.PreviewMedia
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedMediaids)) {
		query["RelatedMediaids"] = request.RelatedMediaids
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		body["Config"] = request.Config
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// AddTemplate
//
// @param request - AddTemplateRequest
//
// @return AddTemplateResponse
func (client *Client) AddTemplate(request *AddTemplateRequest) (_result *AddTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTemplateResponse{}
	_body, _err := client.AddTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新搜索索引
//
// @param request - AlterSearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AlterSearchIndexResponse
func (client *Client) AlterSearchIndexWithOptions(request *AlterSearchIndexRequest, runtime *util.RuntimeOptions) (_result *AlterSearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexConfig)) {
		query["IndexConfig"] = request.IndexConfig
	}

	if !tea.BoolValue(util.IsUnset(request.IndexStatus)) {
		query["IndexStatus"] = request.IndexStatus
	}

	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AlterSearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AlterSearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新搜索索引
//
// @param request - AlterSearchIndexRequest
//
// @return AlterSearchIndexResponse
func (client *Client) AlterSearchIndex(request *AlterSearchIndexRequest) (_result *AlterSearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AlterSearchIndexResponse{}
	_body, _err := client.AlterSearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量获取媒资信息
//
// @param request - BatchGetMediaInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchGetMediaInfosResponse
func (client *Client) BatchGetMediaInfosWithOptions(request *BatchGetMediaInfosRequest, runtime *util.RuntimeOptions) (_result *BatchGetMediaInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdditionType)) {
		query["AdditionType"] = request.AdditionType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchGetMediaInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchGetMediaInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量获取媒资信息
//
// @param request - BatchGetMediaInfosRequest
//
// @return BatchGetMediaInfosResponse
func (client *Client) BatchGetMediaInfos(request *BatchGetMediaInfosRequest) (_result *BatchGetMediaInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetMediaInfosResponse{}
	_body, _err := client.BatchGetMediaInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消DNA作业
//
// @param request - CancelDNAJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelDNAJobResponse
func (client *Client) CancelDNAJobWithOptions(request *CancelDNAJobRequest, runtime *util.RuntimeOptions) (_result *CancelDNAJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelDNAJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelDNAJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消DNA作业
//
// @param request - CancelDNAJobRequest
//
// @return CancelDNAJobResponse
func (client *Client) CancelDNAJob(request *CancelDNAJobRequest) (_result *CancelDNAJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelDNAJobResponse{}
	_body, _err := client.CancelDNAJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 取消收藏公共媒资
//
// @param request - CancelFavoritePublicMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CancelFavoritePublicMediaResponse
func (client *Client) CancelFavoritePublicMediaWithOptions(request *CancelFavoritePublicMediaRequest, runtime *util.RuntimeOptions) (_result *CancelFavoritePublicMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelFavoritePublicMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelFavoritePublicMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 取消收藏公共媒资
//
// @param request - CancelFavoritePublicMediaRequest
//
// @return CancelFavoritePublicMediaResponse
func (client *Client) CancelFavoritePublicMedia(request *CancelFavoritePublicMediaRequest) (_result *CancelFavoritePublicMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelFavoritePublicMediaResponse{}
	_body, _err := client.CancelFavoritePublicMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交人工审核
//
// @param request - CreateAuditRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAuditResponse
func (client *Client) CreateAuditWithOptions(request *CreateAuditRequest, runtime *util.RuntimeOptions) (_result *CreateAuditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuditContent)) {
		query["AuditContent"] = request.AuditContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAudit"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAuditResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交人工审核
//
// @param request - CreateAuditRequest
//
// @return CreateAuditResponse
func (client *Client) CreateAudit(request *CreateAuditRequest) (_result *CreateAuditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAuditResponse{}
	_body, _err := client.CreateAuditWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建数字人训练任务
//
// @param request - CreateAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAvatarTrainingJobResponse
func (client *Client) CreateAvatarTrainingJobWithOptions(request *CreateAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *CreateAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarDescription)) {
		query["AvatarDescription"] = request.AvatarDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AvatarName)) {
		query["AvatarName"] = request.AvatarName
	}

	if !tea.BoolValue(util.IsUnset(request.AvatarType)) {
		query["AvatarType"] = request.AvatarType
	}

	if !tea.BoolValue(util.IsUnset(request.Portrait)) {
		query["Portrait"] = request.Portrait
	}

	if !tea.BoolValue(util.IsUnset(request.Thumbnail)) {
		query["Thumbnail"] = request.Thumbnail
	}

	if !tea.BoolValue(util.IsUnset(request.Transparent)) {
		query["Transparent"] = request.Transparent
	}

	if !tea.BoolValue(util.IsUnset(request.Video)) {
		query["Video"] = request.Video
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建数字人训练任务
//
// @param request - CreateAvatarTrainingJobRequest
//
// @return CreateAvatarTrainingJobResponse
func (client *Client) CreateAvatarTrainingJob(request *CreateAvatarTrainingJobRequest) (_result *CreateAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAvatarTrainingJobResponse{}
	_body, _err := client.CreateAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建媒体处理自定义模板
//
// @param request - CreateCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomTemplateResponse
func (client *Client) CreateCustomTemplateWithOptions(request *CreateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建媒体处理自定义模板
//
// @param request - CreateCustomTemplateRequest
//
// @return CreateCustomTemplateResponse
func (client *Client) CreateCustomTemplate(request *CreateCustomTemplateRequest) (_result *CreateCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CreateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建人声克隆任务
//
// @param request - CreateCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCustomizedVoiceJobResponse
func (client *Client) CreateCustomizedVoiceJobWithOptions(request *CreateCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *CreateCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		query["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.Scenario)) {
		query["Scenario"] = request.Scenario
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceDesc)) {
		query["VoiceDesc"] = request.VoiceDesc
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceName)) {
		query["VoiceName"] = request.VoiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建人声克隆任务
//
// @param request - CreateCustomizedVoiceJobRequest
//
// @return CreateCustomizedVoiceJobResponse
func (client *Client) CreateCustomizedVoiceJob(request *CreateCustomizedVoiceJobRequest) (_result *CreateCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomizedVoiceJobResponse{}
	_body, _err := client.CreateCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建指纹库
//
// @param request - CreateDNADBRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateDNADBResponse
func (client *Client) CreateDNADBWithOptions(request *CreateDNADBRequest, runtime *util.RuntimeOptions) (_result *CreateDNADBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Model)) {
		query["Model"] = request.Model
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDNADB"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDNADBResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建指纹库
//
// @param request - CreateDNADBRequest
//
// @return CreateDNADBResponse
func (client *Client) CreateDNADB(request *CreateDNADBRequest) (_result *CreateDNADBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDNADBResponse{}
	_body, _err := client.CreateDNADBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建云剪辑工程
//
// @param request - CreateEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEditingProjectResponse
func (client *Client) CreateEditingProjectWithOptions(request *CreateEditingProjectRequest, runtime *util.RuntimeOptions) (_result *CreateEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessConfig)) {
		query["BusinessConfig"] = request.BusinessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialMaps)) {
		query["MaterialMaps"] = request.MaterialMaps
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectType)) {
		query["ProjectType"] = request.ProjectType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		body["Timeline"] = request.Timeline
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建云剪辑工程
//
// @param request - CreateEditingProjectRequest
//
// @return CreateEditingProjectResponse
func (client *Client) CreateEditingProject(request *CreateEditingProjectRequest) (_result *CreateEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEditingProjectResponse{}
	_body, _err := client.CreateEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建直播录制模板
//
// @param tmpReq - CreateLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveRecordTemplateResponse
func (client *Client) CreateLiveRecordTemplateWithOptions(tmpReq *CreateLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveRecordTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RecordFormat)) {
		request.RecordFormatShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordFormat, tea.String("RecordFormat"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RecordFormatShrink)) {
		body["RecordFormat"] = request.RecordFormatShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建直播录制模板
//
// @param request - CreateLiveRecordTemplateRequest
//
// @return CreateLiveRecordTemplateResponse
func (client *Client) CreateLiveRecordTemplate(request *CreateLiveRecordTemplateRequest) (_result *CreateLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveRecordTemplateResponse{}
	_body, _err := client.CreateLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建直播截图模板
//
// @param request - CreateLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveSnapshotTemplateResponse
func (client *Client) CreateLiveSnapshotTemplateWithOptions(request *CreateLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OverwriteFormat)) {
		body["OverwriteFormat"] = request.OverwriteFormat
	}

	if !tea.BoolValue(util.IsUnset(request.SequenceFormat)) {
		body["SequenceFormat"] = request.SequenceFormat
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TimeInterval)) {
		body["TimeInterval"] = request.TimeInterval
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建直播截图模板
//
// @param request - CreateLiveSnapshotTemplateRequest
//
// @return CreateLiveSnapshotTemplateResponse
func (client *Client) CreateLiveSnapshotTemplate(request *CreateLiveSnapshotTemplateRequest) (_result *CreateLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveSnapshotTemplateResponse{}
	_body, _err := client.CreateLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建转码模版
//
// @param tmpReq - CreateLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateLiveTranscodeTemplateResponse
func (client *Client) CreateLiveTranscodeTemplateWithOptions(tmpReq *CreateLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveTranscodeTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建转码模版
//
// @param request - CreateLiveTranscodeTemplateRequest
//
// @return CreateLiveTranscodeTemplateResponse
func (client *Client) CreateLiveTranscodeTemplate(request *CreateLiveTranscodeTemplateRequest) (_result *CreateLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveTranscodeTemplateResponse{}
	_body, _err := client.CreateLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 添加用户管道配置
//
// @param request - CreatePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePipelineResponse
func (client *Client) CreatePipelineWithOptions(request *CreatePipelineRequest, runtime *util.RuntimeOptions) (_result *CreatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Speed)) {
		query["Speed"] = request.Speed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 添加用户管道配置
//
// @param request - CreatePipelineRequest
//
// @return CreatePipelineResponse
func (client *Client) CreatePipeline(request *CreatePipelineRequest) (_result *CreatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePipelineResponse{}
	_body, _err := client.CreatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建搜索索引
//
// @param request - CreateSearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSearchIndexResponse
func (client *Client) CreateSearchIndexWithOptions(request *CreateSearchIndexRequest, runtime *util.RuntimeOptions) (_result *CreateSearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexConfig)) {
		query["IndexConfig"] = request.IndexConfig
	}

	if !tea.BoolValue(util.IsUnset(request.IndexStatus)) {
		query["IndexStatus"] = request.IndexStatus
	}

	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建搜索索引
//
// @param request - CreateSearchIndexRequest
//
// @return CreateSearchIndexResponse
func (client *Client) CreateSearchIndex(request *CreateSearchIndexRequest) (_result *CreateSearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSearchIndexResponse{}
	_body, _err := client.CreateSearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建库
//
// @param request - CreateSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSearchLibResponse
func (client *Client) CreateSearchLibWithOptions(request *CreateSearchLibRequest, runtime *util.RuntimeOptions) (_result *CreateSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建库
//
// @param request - CreateSearchLibRequest
//
// @return CreateSearchLibResponse
func (client *Client) CreateSearchLib(request *CreateSearchLibRequest) (_result *CreateSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSearchLibResponse{}
	_body, _err := client.CreateSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 本地媒资上传
//
// @param request - CreateUploadMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUploadMediaResponse
func (client *Client) CreateUploadMediaWithOptions(request *CreateUploadMediaRequest, runtime *util.RuntimeOptions) (_result *CreateUploadMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.FileInfo)) {
		query["FileInfo"] = request.FileInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetaData)) {
		query["MediaMetaData"] = request.MediaMetaData
	}

	if !tea.BoolValue(util.IsUnset(request.PostProcessConfig)) {
		query["PostProcessConfig"] = request.PostProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadTargetConfig)) {
		query["UploadTargetConfig"] = request.UploadTargetConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUploadMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUploadMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 本地媒资上传
//
// @param request - CreateUploadMediaRequest
//
// @return CreateUploadMediaResponse
func (client *Client) CreateUploadMedia(request *CreateUploadMediaRequest) (_result *CreateUploadMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUploadMediaResponse{}
	_body, _err := client.CreateUploadMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 本地上传媒体流
//
// @param request - CreateUploadStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateUploadStreamResponse
func (client *Client) CreateUploadStreamWithOptions(request *CreateUploadStreamRequest, runtime *util.RuntimeOptions) (_result *CreateUploadStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.FileExtension)) {
		query["FileExtension"] = request.FileExtension
	}

	if !tea.BoolValue(util.IsUnset(request.HDRType)) {
		query["HDRType"] = request.HDRType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUploadStream"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUploadStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 本地上传媒体流
//
// @param request - CreateUploadStreamRequest
//
// @return CreateUploadStreamResponse
func (client *Client) CreateUploadStream(request *CreateUploadStreamRequest) (_result *CreateUploadStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUploadStreamResponse{}
	_body, _err := client.CreateUploadStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 解密KMS密钥DataKey
//
// @param request - DecryptKMSDataKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DecryptKMSDataKeyResponse
func (client *Client) DecryptKMSDataKeyWithOptions(request *DecryptKMSDataKeyRequest, runtime *util.RuntimeOptions) (_result *DecryptKMSDataKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CiphertextBlob)) {
		query["CiphertextBlob"] = request.CiphertextBlob
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DecryptKMSDataKey"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DecryptKMSDataKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 解密KMS密钥DataKey
//
// @param request - DecryptKMSDataKeyRequest
//
// @return DecryptKMSDataKeyResponse
func (client *Client) DecryptKMSDataKey(request *DecryptKMSDataKeyRequest) (_result *DecryptKMSDataKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DecryptKMSDataKeyResponse{}
	_body, _err := client.DecryptKMSDataKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新数字人训练任务信息
//
// @param request - DeleteAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAvatarTrainingJobResponse
func (client *Client) DeleteAvatarTrainingJobWithOptions(request *DeleteAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *DeleteAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新数字人训练任务信息
//
// @param request - DeleteAvatarTrainingJobRequest
//
// @return DeleteAvatarTrainingJobResponse
func (client *Client) DeleteAvatarTrainingJob(request *DeleteAvatarTrainingJobRequest) (_result *DeleteAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAvatarTrainingJobResponse{}
	_body, _err := client.DeleteAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除媒资分类
//
// @param request - DeleteCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCategoryResponse
func (client *Client) DeleteCategoryWithOptions(request *DeleteCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除媒资分类
//
// @param request - DeleteCategoryRequest
//
// @return DeleteCategoryResponse
func (client *Client) DeleteCategory(request *DeleteCategoryRequest) (_result *DeleteCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.DeleteCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除媒体处理自定义模板
//
// @param request - DeleteCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomTemplateResponse
func (client *Client) DeleteCustomTemplateWithOptions(request *DeleteCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除媒体处理自定义模板
//
// @param request - DeleteCustomTemplateRequest
//
// @return DeleteCustomTemplateResponse
func (client *Client) DeleteCustomTemplate(request *DeleteCustomTemplateRequest) (_result *DeleteCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.DeleteCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除用户的专属人声任务
//
// @param request - DeleteCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteCustomizedVoiceJobResponse
func (client *Client) DeleteCustomizedVoiceJobWithOptions(request *DeleteCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除用户的专属人声任务
//
// @param request - DeleteCustomizedVoiceJobRequest
//
// @return DeleteCustomizedVoiceJobResponse
func (client *Client) DeleteCustomizedVoiceJob(request *DeleteCustomizedVoiceJobRequest) (_result *DeleteCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomizedVoiceJobResponse{}
	_body, _err := client.DeleteCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除DNA库
//
// @param request - DeleteDNADBRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDNADBResponse
func (client *Client) DeleteDNADBWithOptions(request *DeleteDNADBRequest, runtime *util.RuntimeOptions) (_result *DeleteDNADBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDNADB"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDNADBResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除DNA库
//
// @param request - DeleteDNADBRequest
//
// @return DeleteDNADBResponse
func (client *Client) DeleteDNADB(request *DeleteDNADBRequest) (_result *DeleteDNADBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDNADBResponse{}
	_body, _err := client.DeleteDNADBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除DNA文件
//
// @param request - DeleteDNAFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteDNAFilesResponse
func (client *Client) DeleteDNAFilesWithOptions(request *DeleteDNAFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteDNAFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryKeys)) {
		query["PrimaryKeys"] = request.PrimaryKeys
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteDNAFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteDNAFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除DNA文件
//
// @param request - DeleteDNAFilesRequest
//
// @return DeleteDNAFilesResponse
func (client *Client) DeleteDNAFiles(request *DeleteDNAFilesRequest) (_result *DeleteDNAFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteDNAFilesResponse{}
	_body, _err := client.DeleteDNAFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除剪辑工程关联素材
//
// @param request - DeleteEditingProjectMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEditingProjectMaterialsResponse
func (client *Client) DeleteEditingProjectMaterialsWithOptions(request *DeleteEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *DeleteEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaterialIds)) {
		query["MaterialIds"] = request.MaterialIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialType)) {
		query["MaterialType"] = request.MaterialType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除剪辑工程关联素材
//
// @param request - DeleteEditingProjectMaterialsRequest
//
// @return DeleteEditingProjectMaterialsResponse
func (client *Client) DeleteEditingProjectMaterials(request *DeleteEditingProjectMaterialsRequest) (_result *DeleteEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEditingProjectMaterialsResponse{}
	_body, _err := client.DeleteEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除云剪辑工程
//
// @param request - DeleteEditingProjectsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteEditingProjectsResponse
func (client *Client) DeleteEditingProjectsWithOptions(request *DeleteEditingProjectsRequest, runtime *util.RuntimeOptions) (_result *DeleteEditingProjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectIds)) {
		query["ProjectIds"] = request.ProjectIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEditingProjects"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEditingProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除云剪辑工程
//
// @param request - DeleteEditingProjectsRequest
//
// @return DeleteEditingProjectsResponse
func (client *Client) DeleteEditingProjects(request *DeleteEditingProjectsRequest) (_result *DeleteEditingProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEditingProjectsResponse{}
	_body, _err := client.DeleteEditingProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 实时媒体服务-删除录制文件
//
// @param request - DeleteLiveRecordFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRecordFilesResponse
func (client *Client) DeleteLiveRecordFilesWithOptions(request *DeleteLiveRecordFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RecordIds)) {
		query["RecordIds"] = request.RecordIds
	}

	if !tea.BoolValue(util.IsUnset(request.RemoveFile)) {
		query["RemoveFile"] = request.RemoveFile
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRecordFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRecordFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 实时媒体服务-删除录制文件
//
// @param request - DeleteLiveRecordFilesRequest
//
// @return DeleteLiveRecordFilesResponse
func (client *Client) DeleteLiveRecordFiles(request *DeleteLiveRecordFilesRequest) (_result *DeleteLiveRecordFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordFilesResponse{}
	_body, _err := client.DeleteLiveRecordFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除直播录制模板
//
// @param request - DeleteLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveRecordTemplateResponse
func (client *Client) DeleteLiveRecordTemplateWithOptions(request *DeleteLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除直播录制模板
//
// @param request - DeleteLiveRecordTemplateRequest
//
// @return DeleteLiveRecordTemplateResponse
func (client *Client) DeleteLiveRecordTemplate(request *DeleteLiveRecordTemplateRequest) (_result *DeleteLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveRecordTemplateResponse{}
	_body, _err := client.DeleteLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 批量删除直播截图文件
//
// @param tmpReq - DeleteLiveSnapshotFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveSnapshotFilesResponse
func (client *Client) DeleteLiveSnapshotFilesWithOptions(tmpReq *DeleteLiveSnapshotFilesRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSnapshotFilesResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &DeleteLiveSnapshotFilesShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.CreateTimestampList)) {
		request.CreateTimestampListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.CreateTimestampList, tea.String("CreateTimestampList"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateTimestampListShrink)) {
		query["CreateTimestampList"] = request.CreateTimestampListShrink
	}

	if !tea.BoolValue(util.IsUnset(request.DeleteOriginalFile)) {
		query["DeleteOriginalFile"] = request.DeleteOriginalFile
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveSnapshotFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveSnapshotFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 批量删除直播截图文件
//
// @param request - DeleteLiveSnapshotFilesRequest
//
// @return DeleteLiveSnapshotFilesResponse
func (client *Client) DeleteLiveSnapshotFiles(request *DeleteLiveSnapshotFilesRequest) (_result *DeleteLiveSnapshotFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSnapshotFilesResponse{}
	_body, _err := client.DeleteLiveSnapshotFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除直播截图模板
//
// @param request - DeleteLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveSnapshotTemplateResponse
func (client *Client) DeleteLiveSnapshotTemplateWithOptions(request *DeleteLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除直播截图模板
//
// @param request - DeleteLiveSnapshotTemplateRequest
//
// @return DeleteLiveSnapshotTemplateResponse
func (client *Client) DeleteLiveSnapshotTemplate(request *DeleteLiveSnapshotTemplateRequest) (_result *DeleteLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveSnapshotTemplateResponse{}
	_body, _err := client.DeleteLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除指定转码任务
//
// @param request - DeleteLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveTranscodeJobResponse
func (client *Client) DeleteLiveTranscodeJobWithOptions(request *DeleteLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除指定转码任务
//
// @param request - DeleteLiveTranscodeJobRequest
//
// @return DeleteLiveTranscodeJobResponse
func (client *Client) DeleteLiveTranscodeJob(request *DeleteLiveTranscodeJobRequest) (_result *DeleteLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveTranscodeJobResponse{}
	_body, _err := client.DeleteLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除指定转码模版
//
// @param request - DeleteLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteLiveTranscodeTemplateResponse
func (client *Client) DeleteLiveTranscodeTemplateWithOptions(request *DeleteLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除指定转码模版
//
// @param request - DeleteLiveTranscodeTemplateRequest
//
// @return DeleteLiveTranscodeTemplateResponse
func (client *Client) DeleteLiveTranscodeTemplate(request *DeleteLiveTranscodeTemplateRequest) (_result *DeleteLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveTranscodeTemplateResponse{}
	_body, _err := client.DeleteLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除媒资从搜索
//
// @param request - DeleteMediaFromSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaFromSearchLibResponse
func (client *Client) DeleteMediaFromSearchLibWithOptions(request *DeleteMediaFromSearchLibRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaFromSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MsgBody)) {
		query["MsgBody"] = request.MsgBody
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaFromSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaFromSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除媒资从搜索
//
// @param request - DeleteMediaFromSearchLibRequest
//
// @return DeleteMediaFromSearchLibResponse
func (client *Client) DeleteMediaFromSearchLib(request *DeleteMediaFromSearchLibRequest) (_result *DeleteMediaFromSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaFromSearchLibResponse{}
	_body, _err := client.DeleteMediaFromSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除媒资信息
//
// @param request - DeleteMediaInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaInfosResponse
func (client *Client) DeleteMediaInfosWithOptions(request *DeleteMediaInfosRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeletePhysicalFiles)) {
		query["DeletePhysicalFiles"] = request.DeletePhysicalFiles
	}

	if !tea.BoolValue(util.IsUnset(request.InputURLs)) {
		query["InputURLs"] = request.InputURLs
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除媒资信息
//
// @param request - DeleteMediaInfosRequest
//
// @return DeleteMediaInfosResponse
func (client *Client) DeleteMediaInfos(request *DeleteMediaInfosRequest) (_result *DeleteMediaInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaInfosResponse{}
	_body, _err := client.DeleteMediaInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除媒资标注信息
//
// @param request - DeleteMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteMediaMarksResponse
func (client *Client) DeleteMediaMarksWithOptions(request *DeleteMediaMarksRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarkIds)) {
		query["MediaMarkIds"] = request.MediaMarkIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除媒资标注信息
//
// @param request - DeleteMediaMarksRequest
//
// @return DeleteMediaMarksResponse
func (client *Client) DeleteMediaMarks(request *DeleteMediaMarksRequest) (_result *DeleteMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaMarksResponse{}
	_body, _err := client.DeleteMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除管道配置
//
// @param request - DeletePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePipelineResponse
func (client *Client) DeletePipelineWithOptions(request *DeletePipelineRequest, runtime *util.RuntimeOptions) (_result *DeletePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除管道配置
//
// @param request - DeletePipelineRequest
//
// @return DeletePipelineResponse
func (client *Client) DeletePipeline(request *DeletePipelineRequest) (_result *DeletePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePipelineResponse{}
	_body, _err := client.DeletePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除播放信息
//
// @param request - DeletePlayInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeletePlayInfoResponse
func (client *Client) DeletePlayInfoWithOptions(request *DeletePlayInfoRequest, runtime *util.RuntimeOptions) (_result *DeletePlayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DeletePhysicalFiles)) {
		query["DeletePhysicalFiles"] = request.DeletePhysicalFiles
	}

	if !tea.BoolValue(util.IsUnset(request.FileURLs)) {
		query["FileURLs"] = request.FileURLs
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePlayInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePlayInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除播放信息
//
// @param request - DeletePlayInfoRequest
//
// @return DeletePlayInfoResponse
func (client *Client) DeletePlayInfo(request *DeletePlayInfoRequest) (_result *DeletePlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePlayInfoResponse{}
	_body, _err := client.DeletePlayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// DeleteSmartJob
//
// @param request - DeleteSmartJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteSmartJobResponse
func (client *Client) DeleteSmartJobWithOptions(request *DeleteSmartJobRequest, runtime *util.RuntimeOptions) (_result *DeleteSmartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSmartJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSmartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// DeleteSmartJob
//
// @param request - DeleteSmartJobRequest
//
// @return DeleteSmartJobResponse
func (client *Client) DeleteSmartJob(request *DeleteSmartJobRequest) (_result *DeleteSmartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmartJobResponse{}
	_body, _err := client.DeleteSmartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// DeleteTemplate
//
// @param request - DeleteTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplateWithOptions(request *DeleteTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// DeleteTemplate
//
// @param request - DeleteTemplateRequest
//
// @return DeleteTemplateResponse
func (client *Client) DeleteTemplate(request *DeleteTemplateRequest) (_result *DeleteTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.DeleteTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMeterImsEditUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsEditUsageResponse
func (client *Client) DescribeMeterImsEditUsageWithOptions(request *DescribeMeterImsEditUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsEditUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsEditUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsEditUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMeterImsEditUsageRequest
//
// @return DescribeMeterImsEditUsageResponse
func (client *Client) DescribeMeterImsEditUsage(request *DescribeMeterImsEditUsageRequest) (_result *DescribeMeterImsEditUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsEditUsageResponse{}
	_body, _err := client.DescribeMeterImsEditUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMeterImsMediaConvertUHDUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsMediaConvertUHDUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUHDUsageWithOptions(request *DescribeMeterImsMediaConvertUHDUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsMediaConvertUHDUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsMediaConvertUHDUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsMediaConvertUHDUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMeterImsMediaConvertUHDUsageRequest
//
// @return DescribeMeterImsMediaConvertUHDUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUHDUsage(request *DescribeMeterImsMediaConvertUHDUsageRequest) (_result *DescribeMeterImsMediaConvertUHDUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsMediaConvertUHDUsageResponse{}
	_body, _err := client.DescribeMeterImsMediaConvertUHDUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 智能媒体服务点播转码用量
//
// @param request - DescribeMeterImsMediaConvertUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsMediaConvertUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUsageWithOptions(request *DescribeMeterImsMediaConvertUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsMediaConvertUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsMediaConvertUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsMediaConvertUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 智能媒体服务点播转码用量
//
// @param request - DescribeMeterImsMediaConvertUsageRequest
//
// @return DescribeMeterImsMediaConvertUsageResponse
func (client *Client) DescribeMeterImsMediaConvertUsage(request *DescribeMeterImsMediaConvertUsageRequest) (_result *DescribeMeterImsMediaConvertUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsMediaConvertUsageResponse{}
	_body, _err := client.DescribeMeterImsMediaConvertUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMeterImsMpsAiUsageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsMpsAiUsageResponse
func (client *Client) DescribeMeterImsMpsAiUsageWithOptions(request *DescribeMeterImsMpsAiUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsMpsAiUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsMpsAiUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsMpsAiUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMeterImsMpsAiUsageRequest
//
// @return DescribeMeterImsMpsAiUsageResponse
func (client *Client) DescribeMeterImsMpsAiUsage(request *DescribeMeterImsMpsAiUsageRequest) (_result *DescribeMeterImsMpsAiUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsMpsAiUsageResponse{}
	_body, _err := client.DescribeMeterImsMpsAiUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMeterImsSummaryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMeterImsSummaryResponse
func (client *Client) DescribeMeterImsSummaryWithOptions(request *DescribeMeterImsSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterImsSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterImsSummary"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterImsSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMeterImsSummaryRequest
//
// @return DescribeMeterImsSummaryResponse
func (client *Client) DescribeMeterImsSummary(request *DescribeMeterImsSummaryRequest) (_result *DescribeMeterImsSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterImsSummaryResponse{}
	_body, _err := client.DescribeMeterImsSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePlayListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePlayListResponse
func (client *Client) DescribePlayListWithOptions(request *DescribePlayListRequest, runtime *util.RuntimeOptions) (_result *DescribePlayListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.OrderName)) {
		query["OrderName"] = request.OrderName
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PlayType)) {
		query["PlayType"] = request.PlayType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		query["TraceId"] = request.TraceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlayList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePlayListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePlayListRequest
//
// @return DescribePlayListResponse
func (client *Client) DescribePlayList(request *DescribePlayListRequest) (_result *DescribePlayListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePlayListResponse{}
	_body, _err := client.DescribePlayListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 本接口用来检测用户的朗读是否有明显的发音错误、嘈杂的环境等
//
// @param request - DetectAudioForCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DetectAudioForCustomizedVoiceJobResponse
func (client *Client) DetectAudioForCustomizedVoiceJobWithOptions(request *DetectAudioForCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *DetectAudioForCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AudioRecordId)) {
		query["AudioRecordId"] = request.AudioRecordId
	}

	if !tea.BoolValue(util.IsUnset(request.RecordUrl)) {
		query["RecordUrl"] = request.RecordUrl
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DetectAudioForCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DetectAudioForCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 本接口用来检测用户的朗读是否有明显的发音错误、嘈杂的环境等
//
// @param request - DetectAudioForCustomizedVoiceJobRequest
//
// @return DetectAudioForCustomizedVoiceJobResponse
func (client *Client) DetectAudioForCustomizedVoiceJob(request *DetectAudioForCustomizedVoiceJobRequest) (_result *DetectAudioForCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetectAudioForCustomizedVoiceJobResponse{}
	_body, _err := client.DetectAudioForCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除搜索索引
//
// @param request - DropSearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DropSearchIndexResponse
func (client *Client) DropSearchIndexWithOptions(request *DropSearchIndexRequest, runtime *util.RuntimeOptions) (_result *DropSearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DropSearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DropSearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除搜索索引
//
// @param request - DropSearchIndexRequest
//
// @return DropSearchIndexResponse
func (client *Client) DropSearchIndex(request *DropSearchIndexRequest) (_result *DropSearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DropSearchIndexResponse{}
	_body, _err := client.DropSearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 删除库
//
// @param request - DropSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DropSearchLibResponse
func (client *Client) DropSearchLibWithOptions(request *DropSearchLibRequest, runtime *util.RuntimeOptions) (_result *DropSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DropSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DropSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 删除库
//
// @param request - DropSearchLibRequest
//
// @return DropSearchLibResponse
func (client *Client) DropSearchLib(request *DropSearchLibRequest) (_result *DropSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DropSearchLibResponse{}
	_body, _err := client.DropSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 生成KMS密钥DataKey
//
// @param request - GenerateKMSDataKeyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GenerateKMSDataKeyResponse
func (client *Client) GenerateKMSDataKeyWithOptions(runtime *util.RuntimeOptions) (_result *GenerateKMSDataKeyResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GenerateKMSDataKey"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GenerateKMSDataKeyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 生成KMS密钥DataKey
//
// @return GenerateKMSDataKeyResponse
func (client *Client) GenerateKMSDataKey() (_result *GenerateKMSDataKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GenerateKMSDataKeyResponse{}
	_body, _err := client.GenerateKMSDataKeyWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个数字人
//
// @param request - GetAvatarRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAvatarResponse
func (client *Client) GetAvatarWithOptions(request *GetAvatarRequest, runtime *util.RuntimeOptions) (_result *GetAvatarResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarId)) {
		query["AvatarId"] = request.AvatarId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAvatar"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAvatarResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个数字人
//
// @param request - GetAvatarRequest
//
// @return GetAvatarResponse
func (client *Client) GetAvatar(request *GetAvatarRequest) (_result *GetAvatarResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAvatarResponse{}
	_body, _err := client.GetAvatarWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个数字人训练任务
//
// @param request - GetAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAvatarTrainingJobResponse
func (client *Client) GetAvatarTrainingJobWithOptions(request *GetAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *GetAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个数字人训练任务
//
// @param request - GetAvatarTrainingJobRequest
//
// @return GetAvatarTrainingJobResponse
func (client *Client) GetAvatarTrainingJob(request *GetAvatarTrainingJobRequest) (_result *GetAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAvatarTrainingJobResponse{}
	_body, _err := client.GetAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 一键成片-批量获取剪辑任务
//
// @param request - GetBatchMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBatchMediaProducingJobResponse
func (client *Client) GetBatchMediaProducingJobWithOptions(request *GetBatchMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *GetBatchMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["Signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureMehtod)) {
		query["SignatureMehtod"] = request.SignatureMehtod
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureNonce)) {
		query["SignatureNonce"] = request.SignatureNonce
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureType)) {
		query["SignatureType"] = request.SignatureType
	}

	if !tea.BoolValue(util.IsUnset(request.SignatureVersion)) {
		query["SignatureVersion"] = request.SignatureVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBatchMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBatchMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 一键成片-批量获取剪辑任务
//
// @param request - GetBatchMediaProducingJobRequest
//
// @return GetBatchMediaProducingJobResponse
func (client *Client) GetBatchMediaProducingJob(request *GetBatchMediaProducingJobRequest) (_result *GetBatchMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBatchMediaProducingJobResponse{}
	_body, _err := client.GetBatchMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询媒资分类
//
// @param request - GetCategoriesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCategoriesResponse
func (client *Client) GetCategoriesWithOptions(request *GetCategoriesRequest, runtime *util.RuntimeOptions) (_result *GetCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCategories"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCategoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询媒资分类
//
// @param request - GetCategoriesRequest
//
// @return GetCategoriesResponse
func (client *Client) GetCategories(request *GetCategoriesRequest) (_result *GetCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCategoriesResponse{}
	_body, _err := client.GetCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取内容分析搜索配置
//
// @param request - GetContentAnalyzeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetContentAnalyzeConfigResponse
func (client *Client) GetContentAnalyzeConfigWithOptions(runtime *util.RuntimeOptions) (_result *GetContentAnalyzeConfigResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetContentAnalyzeConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetContentAnalyzeConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取内容分析搜索配置
//
// @return GetContentAnalyzeConfigResponse
func (client *Client) GetContentAnalyzeConfig() (_result *GetContentAnalyzeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetContentAnalyzeConfigResponse{}
	_body, _err := client.GetContentAnalyzeConfigWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取单个媒体处理自定义模板
//
// @param request - GetCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomTemplateResponse
func (client *Client) GetCustomTemplateWithOptions(request *GetCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *GetCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取单个媒体处理自定义模板
//
// @param request - GetCustomTemplateRequest
//
// @return GetCustomTemplateResponse
func (client *Client) GetCustomTemplate(request *GetCustomTemplateRequest) (_result *GetCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.GetCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户的专属人声
//
// @param request - GetCustomizedVoiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomizedVoiceResponse
func (client *Client) GetCustomizedVoiceWithOptions(request *GetCustomizedVoiceRequest, runtime *util.RuntimeOptions) (_result *GetCustomizedVoiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomizedVoice"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomizedVoiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户的专属人声
//
// @param request - GetCustomizedVoiceRequest
//
// @return GetCustomizedVoiceResponse
func (client *Client) GetCustomizedVoice(request *GetCustomizedVoiceRequest) (_result *GetCustomizedVoiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomizedVoiceResponse{}
	_body, _err := client.GetCustomizedVoiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个人声克隆训练任务
//
// @param request - GetCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetCustomizedVoiceJobResponse
func (client *Client) GetCustomizedVoiceJobWithOptions(request *GetCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *GetCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个人声克隆训练任务
//
// @param request - GetCustomizedVoiceJobRequest
//
// @return GetCustomizedVoiceJobResponse
func (client *Client) GetCustomizedVoiceJob(request *GetCustomizedVoiceJobRequest) (_result *GetCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomizedVoiceJobResponse{}
	_body, _err := client.GetCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户默认存储地址
//
// @param request - GetDefaultStorageLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDefaultStorageLocationResponse
func (client *Client) GetDefaultStorageLocationWithOptions(runtime *util.RuntimeOptions) (_result *GetDefaultStorageLocationResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetDefaultStorageLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDefaultStorageLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户默认存储地址
//
// @return GetDefaultStorageLocationResponse
func (client *Client) GetDefaultStorageLocation() (_result *GetDefaultStorageLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDefaultStorageLocationResponse{}
	_body, _err := client.GetDefaultStorageLocationWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 通过本接口来获取需要给用户朗读的文本及示例音频
//
// @param request - GetDemonstrationForCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDemonstrationForCustomizedVoiceJobResponse
func (client *Client) GetDemonstrationForCustomizedVoiceJobWithOptions(request *GetDemonstrationForCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *GetDemonstrationForCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Scenario)) {
		query["Scenario"] = request.Scenario
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDemonstrationForCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDemonstrationForCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 通过本接口来获取需要给用户朗读的文本及示例音频
//
// @param request - GetDemonstrationForCustomizedVoiceJobRequest
//
// @return GetDemonstrationForCustomizedVoiceJobResponse
func (client *Client) GetDemonstrationForCustomizedVoiceJob(request *GetDemonstrationForCustomizedVoiceJobRequest) (_result *GetDemonstrationForCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDemonstrationForCustomizedVoiceJobResponse{}
	_body, _err := client.GetDemonstrationForCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询动图任务详情接口
//
// @param request - GetDynamicImageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetDynamicImageJobResponse
func (client *Client) GetDynamicImageJobWithOptions(request *GetDynamicImageJobRequest, runtime *util.RuntimeOptions) (_result *GetDynamicImageJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDynamicImageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDynamicImageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询动图任务详情接口
//
// @param request - GetDynamicImageJobRequest
//
// @return GetDynamicImageJobResponse
func (client *Client) GetDynamicImageJob(request *GetDynamicImageJobRequest) (_result *GetDynamicImageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDynamicImageJobResponse{}
	_body, _err := client.GetDynamicImageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取单个云剪辑工程
//
// @param request - GetEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEditingProjectResponse
func (client *Client) GetEditingProjectWithOptions(request *GetEditingProjectRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RequestSource)) {
		query["RequestSource"] = request.RequestSource
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取单个云剪辑工程
//
// @param request - GetEditingProjectRequest
//
// @return GetEditingProjectResponse
func (client *Client) GetEditingProject(request *GetEditingProjectRequest) (_result *GetEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEditingProjectResponse{}
	_body, _err := client.GetEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取剪辑工程关联素材
//
// @param request - GetEditingProjectMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEditingProjectMaterialsResponse
func (client *Client) GetEditingProjectMaterialsWithOptions(request *GetEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取剪辑工程关联素材
//
// @param request - GetEditingProjectMaterialsRequest
//
// @return GetEditingProjectMaterialsResponse
func (client *Client) GetEditingProjectMaterials(request *GetEditingProjectMaterialsRequest) (_result *GetEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEditingProjectMaterialsResponse{}
	_body, _err := client.GetEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取事件回调地址
//
// @param request - GetEventCallbackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetEventCallbackResponse
func (client *Client) GetEventCallbackWithOptions(runtime *util.RuntimeOptions) (_result *GetEventCallbackResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetEventCallback"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取事件回调地址
//
// @return GetEventCallbackResponse
func (client *Client) GetEventCallback() (_result *GetEventCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventCallbackResponse{}
	_body, _err := client.GetEventCallbackWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取直播剪辑m3u8索引文件
//
// @param request - GetLiveEditingIndexFileRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveEditingIndexFileResponse
func (client *Client) GetLiveEditingIndexFileWithOptions(request *GetLiveEditingIndexFileRequest, runtime *util.RuntimeOptions) (_result *GetLiveEditingIndexFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.DomainName)) {
		query["DomainName"] = request.DomainName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveEditingIndexFile"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveEditingIndexFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取直播剪辑m3u8索引文件
//
// @param request - GetLiveEditingIndexFileRequest
//
// @return GetLiveEditingIndexFileResponse
func (client *Client) GetLiveEditingIndexFile(request *GetLiveEditingIndexFileRequest) (_result *GetLiveEditingIndexFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveEditingIndexFileResponse{}
	_body, _err := client.GetLiveEditingIndexFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取直播剪辑任务
//
// @param request - GetLiveEditingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveEditingJobResponse
func (client *Client) GetLiveEditingJobWithOptions(request *GetLiveEditingJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveEditingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveEditingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveEditingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取直播剪辑任务
//
// @param request - GetLiveEditingJobRequest
//
// @return GetLiveEditingJobResponse
func (client *Client) GetLiveEditingJob(request *GetLiveEditingJobRequest) (_result *GetLiveEditingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveEditingJobResponse{}
	_body, _err := client.GetLiveEditingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询录制任务明细
//
// @param request - GetLiveRecordJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveRecordJobResponse
func (client *Client) GetLiveRecordJobWithOptions(request *GetLiveRecordJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveRecordJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveRecordJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveRecordJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询录制任务明细
//
// @param request - GetLiveRecordJobRequest
//
// @return GetLiveRecordJobResponse
func (client *Client) GetLiveRecordJob(request *GetLiveRecordJobRequest) (_result *GetLiveRecordJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveRecordJobResponse{}
	_body, _err := client.GetLiveRecordJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播录制模板详情
//
// @param request - GetLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveRecordTemplateResponse
func (client *Client) GetLiveRecordTemplateWithOptions(request *GetLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *GetLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播录制模板详情
//
// @param request - GetLiveRecordTemplateRequest
//
// @return GetLiveRecordTemplateResponse
func (client *Client) GetLiveRecordTemplate(request *GetLiveRecordTemplateRequest) (_result *GetLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveRecordTemplateResponse{}
	_body, _err := client.GetLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播截图任务
//
// @param request - GetLiveSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveSnapshotJobResponse
func (client *Client) GetLiveSnapshotJobWithOptions(request *GetLiveSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播截图任务
//
// @param request - GetLiveSnapshotJobRequest
//
// @return GetLiveSnapshotJobResponse
func (client *Client) GetLiveSnapshotJob(request *GetLiveSnapshotJobRequest) (_result *GetLiveSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveSnapshotJobResponse{}
	_body, _err := client.GetLiveSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播截图模板
//
// @param request - GetLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveSnapshotTemplateResponse
func (client *Client) GetLiveSnapshotTemplateWithOptions(request *GetLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *GetLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播截图模板
//
// @param request - GetLiveSnapshotTemplateRequest
//
// @return GetLiveSnapshotTemplateResponse
func (client *Client) GetLiveSnapshotTemplate(request *GetLiveSnapshotTemplateRequest) (_result *GetLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveSnapshotTemplateResponse{}
	_body, _err := client.GetLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询转码任务详情
//
// @param request - GetLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveTranscodeJobResponse
func (client *Client) GetLiveTranscodeJobWithOptions(request *GetLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询转码任务详情
//
// @param request - GetLiveTranscodeJobRequest
//
// @return GetLiveTranscodeJobResponse
func (client *Client) GetLiveTranscodeJob(request *GetLiveTranscodeJobRequest) (_result *GetLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveTranscodeJobResponse{}
	_body, _err := client.GetLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询转码模版详情
//
// @param request - GetLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetLiveTranscodeTemplateResponse
func (client *Client) GetLiveTranscodeTemplateWithOptions(request *GetLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *GetLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询转码模版详情
//
// @param request - GetLiveTranscodeTemplateRequest
//
// @return GetLiveTranscodeTemplateResponse
func (client *Client) GetLiveTranscodeTemplate(request *GetLiveTranscodeTemplateRequest) (_result *GetLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveTranscodeTemplateResponse{}
	_body, _err := client.GetLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取媒资内容信息
//
// @param request - GetMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaInfoResponse
func (client *Client) GetMediaInfoWithOptions(request *GetMediaInfoRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputType)) {
		query["OutputType"] = request.OutputType
	}

	if !tea.BoolValue(util.IsUnset(request.ReturnDetailedInfo)) {
		query["ReturnDetailedInfo"] = request.ReturnDetailedInfo
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取媒资内容信息
//
// @param request - GetMediaInfoRequest
//
// @return GetMediaInfoResponse
func (client *Client) GetMediaInfo(request *GetMediaInfoRequest) (_result *GetMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaInfoResponse{}
	_body, _err := client.GetMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetMediaInfoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaInfoJobResponse
func (client *Client) GetMediaInfoJobWithOptions(request *GetMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetMediaInfoJobRequest
//
// @return GetMediaInfoJobResponse
func (client *Client) GetMediaInfoJob(request *GetMediaInfoJobRequest) (_result *GetMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaInfoJobResponse{}
	_body, _err := client.GetMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取媒资标注信息
//
// @param request - GetMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaMarksResponse
func (client *Client) GetMediaMarksWithOptions(request *GetMediaMarksRequest, runtime *util.RuntimeOptions) (_result *GetMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarkIds)) {
		query["MediaMarkIds"] = request.MediaMarkIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取媒资标注信息
//
// @param request - GetMediaMarksRequest
//
// @return GetMediaMarksResponse
func (client *Client) GetMediaMarks(request *GetMediaMarksRequest) (_result *GetMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaMarksResponse{}
	_body, _err := client.GetMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// GetMediaProducingJob
//
// @param request - GetMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMediaProducingJobResponse
func (client *Client) GetMediaProducingJobWithOptions(request *GetMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *GetMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// GetMediaProducingJob
//
// @param request - GetMediaProducingJobRequest
//
// @return GetMediaProducingJobResponse
func (client *Client) GetMediaProducingJob(request *GetMediaProducingJobRequest) (_result *GetMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaProducingJobResponse{}
	_body, _err := client.GetMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取单个打包任务信息
//
// @param request - GetPackageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPackageJobResponse
func (client *Client) GetPackageJobWithOptions(request *GetPackageJobRequest, runtime *util.RuntimeOptions) (_result *GetPackageJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPackageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPackageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取单个打包任务信息
//
// @param request - GetPackageJobRequest
//
// @return GetPackageJobResponse
func (client *Client) GetPackageJob(request *GetPackageJobRequest) (_result *GetPackageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPackageJobResponse{}
	_body, _err := client.GetPackageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取单个管道配置
//
// @param request - GetPipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPipelineResponse
func (client *Client) GetPipelineWithOptions(request *GetPipelineRequest, runtime *util.RuntimeOptions) (_result *GetPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取单个管道配置
//
// @param request - GetPipelineRequest
//
// @return GetPipelineResponse
func (client *Client) GetPipeline(request *GetPipelineRequest) (_result *GetPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPipelineResponse{}
	_body, _err := client.GetPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取播放信息
//
// @param request - GetPlayInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPlayInfoResponse
func (client *Client) GetPlayInfoWithOptions(request *GetPlayInfoRequest, runtime *util.RuntimeOptions) (_result *GetPlayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPlayInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPlayInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取播放信息
//
// @param request - GetPlayInfoRequest
//
// @return GetPlayInfoResponse
func (client *Client) GetPlayInfo(request *GetPlayInfoRequest) (_result *GetPlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPlayInfoResponse{}
	_body, _err := client.GetPlayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取公共媒资内容信息
//
// @param request - GetPublicMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetPublicMediaInfoResponse
func (client *Client) GetPublicMediaInfoWithOptions(request *GetPublicMediaInfoRequest, runtime *util.RuntimeOptions) (_result *GetPublicMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPublicMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPublicMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取公共媒资内容信息
//
// @param request - GetPublicMediaInfoRequest
//
// @return GetPublicMediaInfoResponse
func (client *Client) GetPublicMediaInfo(request *GetPublicMediaInfoRequest) (_result *GetPublicMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPublicMediaInfoResponse{}
	_body, _err := client.GetPublicMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// GetSmartHandleJob
//
// @param request - GetSmartHandleJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSmartHandleJobResponse
func (client *Client) GetSmartHandleJobWithOptions(request *GetSmartHandleJobRequest, runtime *util.RuntimeOptions) (_result *GetSmartHandleJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSmartHandleJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSmartHandleJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// GetSmartHandleJob
//
// @param request - GetSmartHandleJobRequest
//
// @return GetSmartHandleJobResponse
func (client *Client) GetSmartHandleJob(request *GetSmartHandleJobRequest) (_result *GetSmartHandleJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSmartHandleJobResponse{}
	_body, _err := client.GetSmartHandleJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询单个截图任务
//
// @param request - GetSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSnapshotJobResponse
func (client *Client) GetSnapshotJobWithOptions(request *GetSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *GetSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询单个截图任务
//
// @param request - GetSnapshotJobRequest
//
// @return GetSnapshotJobResponse
func (client *Client) GetSnapshotJob(request *GetSnapshotJobRequest) (_result *GetSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSnapshotJobResponse{}
	_body, _err := client.GetSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取截图文件URL
//
// @param request - GetSnapshotUrlsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSnapshotUrlsResponse
func (client *Client) GetSnapshotUrlsWithOptions(request *GetSnapshotUrlsRequest, runtime *util.RuntimeOptions) (_result *GetSnapshotUrlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSnapshotUrls"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSnapshotUrlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取截图文件URL
//
// @param request - GetSnapshotUrlsRequest
//
// @return GetSnapshotUrlsResponse
func (client *Client) GetSnapshotUrls(request *GetSnapshotUrlsRequest) (_result *GetSnapshotUrlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSnapshotUrlsResponse{}
	_body, _err := client.GetSnapshotUrlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取单个媒体处理系统模板
//
// @param request - GetSystemTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetSystemTemplateResponse
func (client *Client) GetSystemTemplateWithOptions(request *GetSystemTemplateRequest, runtime *util.RuntimeOptions) (_result *GetSystemTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSystemTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSystemTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取单个媒体处理系统模板
//
// @param request - GetSystemTemplateRequest
//
// @return GetSystemTemplateResponse
func (client *Client) GetSystemTemplate(request *GetSystemTemplateRequest) (_result *GetSystemTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSystemTemplateResponse{}
	_body, _err := client.GetSystemTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// GetTemplate
//
// @param request - GetTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplateResponse
func (client *Client) GetTemplateWithOptions(request *GetTemplateRequest, runtime *util.RuntimeOptions) (_result *GetTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RelatedMediaidFlag)) {
		query["RelatedMediaidFlag"] = request.RelatedMediaidFlag
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// GetTemplate
//
// @param request - GetTemplateRequest
//
// @return GetTemplateResponse
func (client *Client) GetTemplate(request *GetTemplateRequest) (_result *GetTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateResponse{}
	_body, _err := client.GetTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取模板关联素材信息
//
// @param request - GetTemplateMaterialsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplateMaterialsResponse
func (client *Client) GetTemplateMaterialsWithOptions(request *GetTemplateMaterialsRequest, runtime *util.RuntimeOptions) (_result *GetTemplateMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileList)) {
		query["FileList"] = request.FileList
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplateMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取模板关联素材信息
//
// @param request - GetTemplateMaterialsRequest
//
// @return GetTemplateMaterialsResponse
func (client *Client) GetTemplateMaterials(request *GetTemplateMaterialsRequest) (_result *GetTemplateMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateMaterialsResponse{}
	_body, _err := client.GetTemplateMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取模板参数信息
//
// @param request - GetTemplateParamsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplateParamsResponse
func (client *Client) GetTemplateParamsWithOptions(request *GetTemplateParamsRequest, runtime *util.RuntimeOptions) (_result *GetTemplateParamsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplateParams"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateParamsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取模板参数信息
//
// @param request - GetTemplateParamsRequest
//
// @return GetTemplateParamsResponse
func (client *Client) GetTemplateParams(request *GetTemplateParamsRequest) (_result *GetTemplateParamsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateParamsResponse{}
	_body, _err := client.GetTemplateParamsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTranscodeJobResponse
func (client *Client) GetTranscodeJobWithOptions(request *GetTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *GetTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ParentJobId)) {
		query["ParentJobId"] = request.ParentJobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetTranscodeJobRequest
//
// @return GetTranscodeJobResponse
func (client *Client) GetTranscodeJob(request *GetTranscodeJobRequest) (_result *GetTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTranscodeJobResponse{}
	_body, _err := client.GetTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取URL上传信息
//
// @param request - GetUrlUploadInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetUrlUploadInfosResponse
func (client *Client) GetUrlUploadInfosWithOptions(request *GetUrlUploadInfosRequest, runtime *util.RuntimeOptions) (_result *GetUrlUploadInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.UploadURLs)) {
		query["UploadURLs"] = request.UploadURLs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUrlUploadInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUrlUploadInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取URL上传信息
//
// @param request - GetUrlUploadInfosRequest
//
// @return GetUrlUploadInfosResponse
func (client *Client) GetUrlUploadInfos(request *GetUrlUploadInfosRequest) (_result *GetUrlUploadInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUrlUploadInfosResponse{}
	_body, _err := client.GetUrlUploadInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取媒资新增列表
//
// @param request - GetVideoListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetVideoListResponse
func (client *Client) GetVideoListWithOptions(request *GetVideoListRequest, runtime *util.RuntimeOptions) (_result *GetVideoListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetVideoList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetVideoListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取媒资新增列表
//
// @param request - GetVideoListRequest
//
// @return GetVideoListResponse
func (client *Client) GetVideoList(request *GetVideoListRequest) (_result *GetVideoListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetVideoListResponse{}
	_body, _err := client.GetVideoListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取工作流任务
//
// @param request - GetWorkflowTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetWorkflowTaskResponse
func (client *Client) GetWorkflowTaskWithOptions(request *GetWorkflowTaskRequest, runtime *util.RuntimeOptions) (_result *GetWorkflowTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetWorkflowTask"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetWorkflowTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取工作流任务
//
// @param request - GetWorkflowTaskRequest
//
// @return GetWorkflowTaskResponse
func (client *Client) GetWorkflowTask(request *GetWorkflowTaskRequest) (_result *GetWorkflowTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetWorkflowTaskResponse{}
	_body, _err := client.GetWorkflowTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 插入媒资到搜索
//
// @param request - InsertMediaToSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InsertMediaToSearchLibResponse
func (client *Client) InsertMediaToSearchLibWithOptions(request *InsertMediaToSearchLibRequest, runtime *util.RuntimeOptions) (_result *InsertMediaToSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.MsgBody)) {
		query["MsgBody"] = request.MsgBody
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("InsertMediaToSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InsertMediaToSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 插入媒资到搜索
//
// @param request - InsertMediaToSearchLibRequest
//
// @return InsertMediaToSearchLibResponse
func (client *Client) InsertMediaToSearchLib(request *InsertMediaToSearchLibRequest) (_result *InsertMediaToSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InsertMediaToSearchLibResponse{}
	_body, _err := client.InsertMediaToSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出公共素材库所有标签
//
// @param request - ListAllPublicMediaTagsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAllPublicMediaTagsResponse
func (client *Client) ListAllPublicMediaTagsWithOptions(request *ListAllPublicMediaTagsRequest, runtime *util.RuntimeOptions) (_result *ListAllPublicMediaTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAllPublicMediaTags"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAllPublicMediaTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出公共素材库所有标签
//
// @param request - ListAllPublicMediaTagsRequest
//
// @return ListAllPublicMediaTagsResponse
func (client *Client) ListAllPublicMediaTags(request *ListAllPublicMediaTagsRequest) (_result *ListAllPublicMediaTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllPublicMediaTagsResponse{}
	_body, _err := client.ListAllPublicMediaTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询数字人训练任务列表，列出当前用户的所有数字人训练任务
//
// @param request - ListAvatarTrainingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAvatarTrainingJobsResponse
func (client *Client) ListAvatarTrainingJobsWithOptions(request *ListAvatarTrainingJobsRequest, runtime *util.RuntimeOptions) (_result *ListAvatarTrainingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAvatarTrainingJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAvatarTrainingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询数字人训练任务列表，列出当前用户的所有数字人训练任务
//
// @param request - ListAvatarTrainingJobsRequest
//
// @return ListAvatarTrainingJobsResponse
func (client *Client) ListAvatarTrainingJobs(request *ListAvatarTrainingJobsRequest) (_result *ListAvatarTrainingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAvatarTrainingJobsResponse{}
	_body, _err := client.ListAvatarTrainingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询数字人列表，列出当前用户的所有数字人
//
// @param request - ListAvatarsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListAvatarsResponse
func (client *Client) ListAvatarsWithOptions(request *ListAvatarsRequest, runtime *util.RuntimeOptions) (_result *ListAvatarsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarType)) {
		query["AvatarType"] = request.AvatarType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAvatars"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAvatarsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询数字人列表，列出当前用户的所有数字人
//
// @param request - ListAvatarsRequest
//
// @return ListAvatarsResponse
func (client *Client) ListAvatars(request *ListAvatarsRequest) (_result *ListAvatarsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAvatarsResponse{}
	_body, _err := client.ListAvatarsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取一键成片任务列表
//
// @param request - ListBatchMediaProducingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListBatchMediaProducingJobsResponse
func (client *Client) ListBatchMediaProducingJobsWithOptions(request *ListBatchMediaProducingJobsRequest, runtime *util.RuntimeOptions) (_result *ListBatchMediaProducingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListBatchMediaProducingJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListBatchMediaProducingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取一键成片任务列表
//
// @param request - ListBatchMediaProducingJobsRequest
//
// @return ListBatchMediaProducingJobsResponse
func (client *Client) ListBatchMediaProducingJobs(request *ListBatchMediaProducingJobsRequest) (_result *ListBatchMediaProducingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBatchMediaProducingJobsResponse{}
	_body, _err := client.ListBatchMediaProducingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取媒体处理自定义模板列表
//
// @param request - ListCustomTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomTemplatesResponse
func (client *Client) ListCustomTemplatesWithOptions(request *ListCustomTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListCustomTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取媒体处理自定义模板列表
//
// @param request - ListCustomTemplatesRequest
//
// @return ListCustomTemplatesResponse
func (client *Client) ListCustomTemplates(request *ListCustomTemplatesRequest) (_result *ListCustomTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomTemplatesResponse{}
	_body, _err := client.ListCustomTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询人声克隆训练任务列表，列出当前用户的所有人声克隆训练任务
//
// @param request - ListCustomizedVoiceJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomizedVoiceJobsResponse
func (client *Client) ListCustomizedVoiceJobsWithOptions(request *ListCustomizedVoiceJobsRequest, runtime *util.RuntimeOptions) (_result *ListCustomizedVoiceJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomizedVoiceJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomizedVoiceJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询人声克隆训练任务列表，列出当前用户的所有人声克隆训练任务
//
// @param request - ListCustomizedVoiceJobsRequest
//
// @return ListCustomizedVoiceJobsResponse
func (client *Client) ListCustomizedVoiceJobs(request *ListCustomizedVoiceJobsRequest) (_result *ListCustomizedVoiceJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomizedVoiceJobsResponse{}
	_body, _err := client.ListCustomizedVoiceJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取用户的专属人声列表
//
// @param request - ListCustomizedVoicesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListCustomizedVoicesResponse
func (client *Client) ListCustomizedVoicesWithOptions(request *ListCustomizedVoicesRequest, runtime *util.RuntimeOptions) (_result *ListCustomizedVoicesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomizedVoices"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomizedVoicesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取用户的专属人声列表
//
// @param request - ListCustomizedVoicesRequest
//
// @return ListCustomizedVoicesResponse
func (client *Client) ListCustomizedVoices(request *ListCustomizedVoicesRequest) (_result *ListCustomizedVoicesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomizedVoicesResponse{}
	_body, _err := client.ListCustomizedVoicesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询DNA库
//
// @param request - ListDNADBRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDNADBResponse
func (client *Client) ListDNADBWithOptions(request *ListDNADBRequest, runtime *util.RuntimeOptions) (_result *ListDNADBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBIds)) {
		query["DBIds"] = request.DBIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDNADB"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDNADBResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询DNA库
//
// @param request - ListDNADBRequest
//
// @return ListDNADBResponse
func (client *Client) ListDNADB(request *ListDNADBRequest) (_result *ListDNADBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDNADBResponse{}
	_body, _err := client.ListDNADBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询DNA文件
//
// @param request - ListDNAFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDNAFilesResponse
func (client *Client) ListDNAFilesWithOptions(request *ListDNAFilesRequest, runtime *util.RuntimeOptions) (_result *ListDNAFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDNAFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDNAFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询DNA文件
//
// @param request - ListDNAFilesRequest
//
// @return ListDNAFilesResponse
func (client *Client) ListDNAFiles(request *ListDNAFilesRequest) (_result *ListDNAFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDNAFilesResponse{}
	_body, _err := client.ListDNAFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询截图任务列表接口
//
// @param request - ListDynamicImageJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListDynamicImageJobsResponse
func (client *Client) ListDynamicImageJobsWithOptions(request *ListDynamicImageJobsRequest, runtime *util.RuntimeOptions) (_result *ListDynamicImageJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDynamicImageJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDynamicImageJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询截图任务列表接口
//
// @param request - ListDynamicImageJobsRequest
//
// @return ListDynamicImageJobsResponse
func (client *Client) ListDynamicImageJobs(request *ListDynamicImageJobsRequest) (_result *ListDynamicImageJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDynamicImageJobsResponse{}
	_body, _err := client.ListDynamicImageJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询录制文件
//
// @param request - ListLiveRecordFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRecordFilesResponse
func (client *Client) ListLiveRecordFilesWithOptions(request *ListLiveRecordFilesRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRecordFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRecordFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询录制文件
//
// @param request - ListLiveRecordFilesRequest
//
// @return ListLiveRecordFilesResponse
func (client *Client) ListLiveRecordFiles(request *ListLiveRecordFilesRequest) (_result *ListLiveRecordFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRecordFilesResponse{}
	_body, _err := client.ListLiveRecordFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询录制任务
//
// @param request - ListLiveRecordJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRecordJobsResponse
func (client *Client) ListLiveRecordJobsWithOptions(request *ListLiveRecordJobsRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRecordJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRecordJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询录制任务
//
// @param request - ListLiveRecordJobsRequest
//
// @return ListLiveRecordJobsResponse
func (client *Client) ListLiveRecordJobs(request *ListLiveRecordJobsRequest) (_result *ListLiveRecordJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRecordJobsResponse{}
	_body, _err := client.ListLiveRecordJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播录制模板
//
// @param request - ListLiveRecordTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveRecordTemplatesResponse
func (client *Client) ListLiveRecordTemplatesWithOptions(request *ListLiveRecordTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRecordTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRecordTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播录制模板
//
// @param request - ListLiveRecordTemplatesRequest
//
// @return ListLiveRecordTemplatesResponse
func (client *Client) ListLiveRecordTemplates(request *ListLiveRecordTemplatesRequest) (_result *ListLiveRecordTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRecordTemplatesResponse{}
	_body, _err := client.ListLiveRecordTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播截图文件列表
//
// @param request - ListLiveSnapshotFilesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveSnapshotFilesResponse
func (client *Client) ListLiveSnapshotFilesWithOptions(request *ListLiveSnapshotFilesRequest, runtime *util.RuntimeOptions) (_result *ListLiveSnapshotFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveSnapshotFiles"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveSnapshotFilesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播截图文件列表
//
// @param request - ListLiveSnapshotFilesRequest
//
// @return ListLiveSnapshotFilesResponse
func (client *Client) ListLiveSnapshotFiles(request *ListLiveSnapshotFilesRequest) (_result *ListLiveSnapshotFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveSnapshotFilesResponse{}
	_body, _err := client.ListLiveSnapshotFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播截图任务列表
//
// @param request - ListLiveSnapshotJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveSnapshotJobsResponse
func (client *Client) ListLiveSnapshotJobsWithOptions(request *ListLiveSnapshotJobsRequest, runtime *util.RuntimeOptions) (_result *ListLiveSnapshotJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveSnapshotJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveSnapshotJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播截图任务列表
//
// @param request - ListLiveSnapshotJobsRequest
//
// @return ListLiveSnapshotJobsResponse
func (client *Client) ListLiveSnapshotJobs(request *ListLiveSnapshotJobsRequest) (_result *ListLiveSnapshotJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveSnapshotJobsResponse{}
	_body, _err := client.ListLiveSnapshotJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询直播截图模板列表
//
// @param request - ListLiveSnapshotTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveSnapshotTemplatesResponse
func (client *Client) ListLiveSnapshotTemplatesWithOptions(request *ListLiveSnapshotTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveSnapshotTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveSnapshotTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveSnapshotTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询直播截图模板列表
//
// @param request - ListLiveSnapshotTemplatesRequest
//
// @return ListLiveSnapshotTemplatesResponse
func (client *Client) ListLiveSnapshotTemplates(request *ListLiveSnapshotTemplatesRequest) (_result *ListLiveSnapshotTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveSnapshotTemplatesResponse{}
	_body, _err := client.ListLiveSnapshotTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询转码任务列表
//
// @param request - ListLiveTranscodeJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveTranscodeJobsResponse
func (client *Client) ListLiveTranscodeJobsWithOptions(request *ListLiveTranscodeJobsRequest, runtime *util.RuntimeOptions) (_result *ListLiveTranscodeJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartMode)) {
		query["StartMode"] = request.StartMode
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveTranscodeJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveTranscodeJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询转码任务列表
//
// @param request - ListLiveTranscodeJobsRequest
//
// @return ListLiveTranscodeJobsResponse
func (client *Client) ListLiveTranscodeJobs(request *ListLiveTranscodeJobsRequest) (_result *ListLiveTranscodeJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveTranscodeJobsResponse{}
	_body, _err := client.ListLiveTranscodeJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询转码模版列表
//
// @param request - ListLiveTranscodeTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListLiveTranscodeTemplatesResponse
func (client *Client) ListLiveTranscodeTemplatesWithOptions(request *ListLiveTranscodeTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveTranscodeTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VideoCodec)) {
		query["VideoCodec"] = request.VideoCodec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveTranscodeTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveTranscodeTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询转码模版列表
//
// @param request - ListLiveTranscodeTemplatesRequest
//
// @return ListLiveTranscodeTemplatesResponse
func (client *Client) ListLiveTranscodeTemplates(request *ListLiveTranscodeTemplatesRequest) (_result *ListLiveTranscodeTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveTranscodeTemplatesResponse{}
	_body, _err := client.ListLiveTranscodeTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出符合条件的媒资基础信息
//
// @param request - ListMediaBasicInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaBasicInfosResponse
func (client *Client) ListMediaBasicInfosWithOptions(request *ListMediaBasicInfosRequest, runtime *util.RuntimeOptions) (_result *ListMediaBasicInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeFileBasicInfo)) {
		query["IncludeFileBasicInfo"] = request.IncludeFileBasicInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaBasicInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaBasicInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出符合条件的媒资基础信息
//
// @param request - ListMediaBasicInfosRequest
//
// @return ListMediaBasicInfosResponse
func (client *Client) ListMediaBasicInfos(request *ListMediaBasicInfosRequest) (_result *ListMediaBasicInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaBasicInfosResponse{}
	_body, _err := client.ListMediaBasicInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListMediaInfoJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaInfoJobsResponse
func (client *Client) ListMediaInfoJobsWithOptions(request *ListMediaInfoJobsRequest, runtime *util.RuntimeOptions) (_result *ListMediaInfoJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaInfoJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaInfoJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListMediaInfoJobsRequest
//
// @return ListMediaInfoJobsResponse
func (client *Client) ListMediaInfoJobs(request *ListMediaInfoJobsRequest) (_result *ListMediaInfoJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaInfoJobsResponse{}
	_body, _err := client.ListMediaInfoJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取媒资的标注信息
//
// @param request - ListMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaMarksResponse
func (client *Client) ListMediaMarksWithOptions(request *ListMediaMarksRequest, runtime *util.RuntimeOptions) (_result *ListMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarkIds)) {
		query["MediaMarkIds"] = request.MediaMarkIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取媒资的标注信息
//
// @param request - ListMediaMarksRequest
//
// @return ListMediaMarksResponse
func (client *Client) ListMediaMarks(request *ListMediaMarksRequest) (_result *ListMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaMarksResponse{}
	_body, _err := client.ListMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出合成任务列表
//
// @param request - ListMediaProducingJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListMediaProducingJobsResponse
func (client *Client) ListMediaProducingJobsWithOptions(request *ListMediaProducingJobsRequest, runtime *util.RuntimeOptions) (_result *ListMediaProducingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.MasterJobId)) {
		query["MasterJobId"] = request.MasterJobId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaProducingJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaProducingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出合成任务列表
//
// @param request - ListMediaProducingJobsRequest
//
// @return ListMediaProducingJobsResponse
func (client *Client) ListMediaProducingJobs(request *ListMediaProducingJobsRequest) (_result *ListMediaProducingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaProducingJobsResponse{}
	_body, _err := client.ListMediaProducingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取打包任务列表
//
// @param request - ListPackageJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPackageJobsResponse
func (client *Client) ListPackageJobsWithOptions(request *ListPackageJobsRequest, runtime *util.RuntimeOptions) (_result *ListPackageJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPackageJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPackageJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取打包任务列表
//
// @param request - ListPackageJobsRequest
//
// @return ListPackageJobsResponse
func (client *Client) ListPackageJobs(request *ListPackageJobsRequest) (_result *ListPackageJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPackageJobsResponse{}
	_body, _err := client.ListPackageJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取管道配置列表
//
// @param request - ListPipelinesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPipelinesResponse
func (client *Client) ListPipelinesWithOptions(request *ListPipelinesRequest, runtime *util.RuntimeOptions) (_result *ListPipelinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Speed)) {
		query["Speed"] = request.Speed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelines"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取管道配置列表
//
// @param request - ListPipelinesRequest
//
// @return ListPipelinesResponse
func (client *Client) ListPipelines(request *ListPipelinesRequest) (_result *ListPipelinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPipelinesResponse{}
	_body, _err := client.ListPipelinesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出公共素材库素材的基础信息
//
// @param request - ListPublicMediaBasicInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListPublicMediaBasicInfosResponse
func (client *Client) ListPublicMediaBasicInfosWithOptions(request *ListPublicMediaBasicInfosRequest, runtime *util.RuntimeOptions) (_result *ListPublicMediaBasicInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeFileBasicInfo)) {
		query["IncludeFileBasicInfo"] = request.IncludeFileBasicInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTagId)) {
		query["MediaTagId"] = request.MediaTagId
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPublicMediaBasicInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPublicMediaBasicInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出公共素材库素材的基础信息
//
// @param request - ListPublicMediaBasicInfosRequest
//
// @return ListPublicMediaBasicInfosResponse
func (client *Client) ListPublicMediaBasicInfos(request *ListPublicMediaBasicInfosRequest) (_result *ListPublicMediaBasicInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPublicMediaBasicInfosResponse{}
	_body, _err := client.ListPublicMediaBasicInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ListSmartJobs
//
// @param request - ListSmartJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSmartJobsResponse
func (client *Client) ListSmartJobsWithOptions(request *ListSmartJobsRequest, runtime *util.RuntimeOptions) (_result *ListSmartJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ListSmartJobs
//
// @param request - ListSmartJobsRequest
//
// @return ListSmartJobsResponse
func (client *Client) ListSmartJobs(request *ListSmartJobsRequest) (_result *ListSmartJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartJobsResponse{}
	_body, _err := client.ListSmartJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出虚拟人官方模特配置
//
// @param request - ListSmartSysAvatarModelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSmartSysAvatarModelsResponse
func (client *Client) ListSmartSysAvatarModelsWithOptions(request *ListSmartSysAvatarModelsRequest, runtime *util.RuntimeOptions) (_result *ListSmartSysAvatarModelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SdkVersion)) {
		query["SdkVersion"] = request.SdkVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartSysAvatarModels"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartSysAvatarModelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出虚拟人官方模特配置
//
// @param request - ListSmartSysAvatarModelsRequest
//
// @return ListSmartSysAvatarModelsResponse
func (client *Client) ListSmartSysAvatarModels(request *ListSmartSysAvatarModelsRequest) (_result *ListSmartSysAvatarModelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartSysAvatarModelsResponse{}
	_body, _err := client.ListSmartSysAvatarModelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 列出智能语音发音人信息
//
// @param request - ListSmartVoiceGroupsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSmartVoiceGroupsResponse
func (client *Client) ListSmartVoiceGroupsWithOptions(runtime *util.RuntimeOptions) (_result *ListSmartVoiceGroupsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("ListSmartVoiceGroups"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartVoiceGroupsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 列出智能语音发音人信息
//
// @return ListSmartVoiceGroupsResponse
func (client *Client) ListSmartVoiceGroups() (_result *ListSmartVoiceGroupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartVoiceGroupsResponse{}
	_body, _err := client.ListSmartVoiceGroupsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询截图任务列表接口
//
// @param request - ListSnapshotJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSnapshotJobsResponse
func (client *Client) ListSnapshotJobsWithOptions(request *ListSnapshotJobsRequest, runtime *util.RuntimeOptions) (_result *ListSnapshotJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSnapshotJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSnapshotJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询截图任务列表接口
//
// @param request - ListSnapshotJobsRequest
//
// @return ListSnapshotJobsResponse
func (client *Client) ListSnapshotJobs(request *ListSnapshotJobsRequest) (_result *ListSnapshotJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSnapshotJobsResponse{}
	_body, _err := client.ListSnapshotJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 获取媒体处理系统模板列表
//
// @param request - ListSystemTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListSystemTemplatesResponse
func (client *Client) ListSystemTemplatesWithOptions(request *ListSystemTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListSystemTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSystemTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSystemTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 获取媒体处理系统模板列表
//
// @param request - ListSystemTemplatesRequest
//
// @return ListSystemTemplatesResponse
func (client *Client) ListSystemTemplates(request *ListSystemTemplatesRequest) (_result *ListSystemTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSystemTemplatesResponse{}
	_body, _err := client.ListSystemTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// ListTemplates
//
// @param request - ListTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTemplatesResponse
func (client *Client) ListTemplatesWithOptions(request *ListTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateSource)) {
		query["CreateSource"] = request.CreateSource
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// ListTemplates
//
// @param request - ListTemplatesRequest
//
// @return ListTemplatesResponse
func (client *Client) ListTemplates(request *ListTemplatesRequest) (_result *ListTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTemplatesResponse{}
	_body, _err := client.ListTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListTranscodeJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTranscodeJobsResponse
func (client *Client) ListTranscodeJobsWithOptions(request *ListTranscodeJobsRequest, runtime *util.RuntimeOptions) (_result *ListTranscodeJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentJobId)) {
		query["ParentJobId"] = request.ParentJobId
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTranscodeJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTranscodeJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListTranscodeJobsRequest
//
// @return ListTranscodeJobsResponse
func (client *Client) ListTranscodeJobs(request *ListTranscodeJobsRequest) (_result *ListTranscodeJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTranscodeJobsResponse{}
	_body, _err := client.ListTranscodeJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询DNA作业
//
// @param request - QueryDNAJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryDNAJobListResponse
func (client *Client) QueryDNAJobListWithOptions(request *QueryDNAJobListRequest, runtime *util.RuntimeOptions) (_result *QueryDNAJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryDNAJobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryDNAJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询DNA作业
//
// @param request - QueryDNAJobListRequest
//
// @return QueryDNAJobListResponse
func (client *Client) QueryDNAJobList(request *QueryDNAJobListRequest) (_result *QueryDNAJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryDNAJobListResponse{}
	_body, _err := client.QueryDNAJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询智能生产作业
//
// @param request - QueryIProductionJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryIProductionJobResponse
func (client *Client) QueryIProductionJobWithOptions(request *QueryIProductionJobRequest, runtime *util.RuntimeOptions) (_result *QueryIProductionJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIProductionJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询智能生产作业
//
// @param request - QueryIProductionJobRequest
//
// @return QueryIProductionJobResponse
func (client *Client) QueryIProductionJob(request *QueryIProductionJobRequest) (_result *QueryIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.QueryIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMediaCensorJobDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaCensorJobDetailResponse
func (client *Client) QueryMediaCensorJobDetailWithOptions(request *QueryMediaCensorJobDetailRequest, runtime *util.RuntimeOptions) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaCensorJobDetail"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMediaCensorJobDetailRequest
//
// @return QueryMediaCensorJobDetailResponse
func (client *Client) QueryMediaCensorJobDetail(request *QueryMediaCensorJobDetailRequest) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.QueryMediaCensorJobDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMediaCensorJobListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaCensorJobListResponse
func (client *Client) QueryMediaCensorJobListWithOptions(request *QueryMediaCensorJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaCensorJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfJobCreatedTimeRange)) {
		query["EndOfJobCreatedTimeRange"] = request.EndOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfJobCreatedTimeRange)) {
		query["StartOfJobCreatedTimeRange"] = request.StartOfJobCreatedTimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		query["State"] = request.State
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaCensorJobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaCensorJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMediaCensorJobListRequest
//
// @return QueryMediaCensorJobListResponse
func (client *Client) QueryMediaCensorJobList(request *QueryMediaCensorJobListRequest) (_result *QueryMediaCensorJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaCensorJobListResponse{}
	_body, _err := client.QueryMediaCensorJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询索引任务
//
// @param request - QueryMediaIndexJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMediaIndexJobResponse
func (client *Client) QueryMediaIndexJobWithOptions(request *QueryMediaIndexJobRequest, runtime *util.RuntimeOptions) (_result *QueryMediaIndexJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaIndexJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaIndexJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询索引任务
//
// @param request - QueryMediaIndexJobRequest
//
// @return QueryMediaIndexJobResponse
func (client *Client) QueryMediaIndexJob(request *QueryMediaIndexJobRequest) (_result *QueryMediaIndexJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaIndexJobResponse{}
	_body, _err := client.QueryMediaIndexJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询搜索索引
//
// @param request - QuerySearchIndexRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySearchIndexResponse
func (client *Client) QuerySearchIndexWithOptions(request *QuerySearchIndexRequest, runtime *util.RuntimeOptions) (_result *QuerySearchIndexResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IndexType)) {
		query["IndexType"] = request.IndexType
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySearchIndex"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySearchIndexResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询搜索索引
//
// @param request - QuerySearchIndexRequest
//
// @return QuerySearchIndexResponse
func (client *Client) QuerySearchIndex(request *QuerySearchIndexRequest) (_result *QuerySearchIndexResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySearchIndexResponse{}
	_body, _err := client.QuerySearchIndexWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 查询库
//
// @param request - QuerySearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySearchLibResponse
func (client *Client) QuerySearchLibWithOptions(request *QuerySearchLibRequest, runtime *util.RuntimeOptions) (_result *QuerySearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 查询库
//
// @param request - QuerySearchLibRequest
//
// @return QuerySearchLibResponse
func (client *Client) QuerySearchLib(request *QuerySearchLibRequest) (_result *QuerySearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySearchLibResponse{}
	_body, _err := client.QuerySearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QuerySmarttagJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QuerySmarttagJobResponse
func (client *Client) QuerySmarttagJobWithOptions(request *QuerySmarttagJobRequest, runtime *util.RuntimeOptions) (_result *QuerySmarttagJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QuerySmarttagJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QuerySmarttagJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QuerySmarttagJobRequest
//
// @return QuerySmarttagJobResponse
func (client *Client) QuerySmarttagJob(request *QuerySmarttagJobRequest) (_result *QuerySmarttagJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmarttagJobResponse{}
	_body, _err := client.QuerySmarttagJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 刷新媒资上传凭证
//
// @param request - RefreshUploadMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RefreshUploadMediaResponse
func (client *Client) RefreshUploadMediaWithOptions(request *RefreshUploadMediaRequest, runtime *util.RuntimeOptions) (_result *RefreshUploadMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefreshUploadMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefreshUploadMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 刷新媒资上传凭证
//
// @param request - RefreshUploadMediaRequest
//
// @return RefreshUploadMediaResponse
func (client *Client) RefreshUploadMedia(request *RefreshUploadMediaRequest) (_result *RefreshUploadMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshUploadMediaResponse{}
	_body, _err := client.RefreshUploadMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 注册内容库资源
//
// @param request - RegisterMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RegisterMediaInfoResponse
func (client *Client) RegisterMediaInfoWithOptions(request *RegisterMediaInfoRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTags)) {
		query["MediaTags"] = request.MediaTags
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceId)) {
		query["ReferenceId"] = request.ReferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterConfig)) {
		query["RegisterConfig"] = request.RegisterConfig
	}

	if !tea.BoolValue(util.IsUnset(request.SmartTagTemplateId)) {
		query["SmartTagTemplateId"] = request.SmartTagTemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		query["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 注册内容库资源
//
// @param request - RegisterMediaInfoRequest
//
// @return RegisterMediaInfoResponse
func (client *Client) RegisterMediaInfo(request *RegisterMediaInfoRequest) (_result *RegisterMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaInfoResponse{}
	_body, _err := client.RegisterMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 注册媒体流
//
// @param request - RegisterMediaStreamRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RegisterMediaStreamResponse
func (client *Client) RegisterMediaStreamWithOptions(request *RegisterMediaStreamRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterMediaStream"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterMediaStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 注册媒体流
//
// @param request - RegisterMediaStreamRequest
//
// @return RegisterMediaStreamResponse
func (client *Client) RegisterMediaStream(request *RegisterMediaStreamRequest) (_result *RegisterMediaStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaStreamResponse{}
	_body, _err := client.RegisterMediaStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// SearchEditingProject
//
// @param request - SearchEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchEditingProjectResponse
func (client *Client) SearchEditingProjectWithOptions(request *SearchEditingProjectRequest, runtime *util.RuntimeOptions) (_result *SearchEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateSource)) {
		query["CreateSource"] = request.CreateSource
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectType)) {
		query["ProjectType"] = request.ProjectType
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// SearchEditingProject
//
// @param request - SearchEditingProjectRequest
//
// @return SearchEditingProjectResponse
func (client *Client) SearchEditingProject(request *SearchEditingProjectRequest) (_result *SearchEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchEditingProjectResponse{}
	_body, _err := client.SearchEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 媒资搜索
//
// @param request - SearchMediaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaResponse
func (client *Client) SearchMediaWithOptions(request *SearchMediaRequest, runtime *util.RuntimeOptions) (_result *SearchMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.Match)) {
		query["Match"] = request.Match
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ScrollToken)) {
		query["ScrollToken"] = request.ScrollToken
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 媒资搜索
//
// @param request - SearchMediaRequest
//
// @return SearchMediaResponse
func (client *Client) SearchMedia(request *SearchMediaRequest) (_result *SearchMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaResponse{}
	_body, _err := client.SearchMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 智能标签搜索
//
// @param request - SearchMediaByAILabelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByAILabelResponse
func (client *Client) SearchMediaByAILabelWithOptions(request *SearchMediaByAILabelRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByAILabelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.MultimodalSearchType)) {
		query["MultimodalSearchType"] = request.MultimodalSearchType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.SpecificSearch)) {
		query["SpecificSearch"] = request.SpecificSearch
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByAILabel"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByAILabelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 智能标签搜索
//
// @param request - SearchMediaByAILabelRequest
//
// @return SearchMediaByAILabelResponse
func (client *Client) SearchMediaByAILabel(request *SearchMediaByAILabelRequest) (_result *SearchMediaByAILabelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByAILabelResponse{}
	_body, _err := client.SearchMediaByAILabelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 人脸搜粗搜接口，输入一张人脸图片，搜索该人物所在媒资的相关信息
//
// @param request - SearchMediaByFaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByFaceResponse
func (client *Client) SearchMediaByFaceWithOptions(request *SearchMediaByFaceRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceSearchToken)) {
		query["FaceSearchToken"] = request.FaceSearchToken
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PersonImageUrl)) {
		query["PersonImageUrl"] = request.PersonImageUrl
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByFace"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByFaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 人脸搜粗搜接口，输入一张人脸图片，搜索该人物所在媒资的相关信息
//
// @param request - SearchMediaByFaceRequest
//
// @return SearchMediaByFaceResponse
func (client *Client) SearchMediaByFace(request *SearchMediaByFaceRequest) (_result *SearchMediaByFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByFaceResponse{}
	_body, _err := client.SearchMediaByFaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 混合搜索
//
// @param request - SearchMediaByHybridRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByHybridResponse
func (client *Client) SearchMediaByHybridWithOptions(request *SearchMediaByHybridRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByHybridResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByHybrid"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByHybridResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 混合搜索
//
// @param request - SearchMediaByHybridRequest
//
// @return SearchMediaByHybridResponse
func (client *Client) SearchMediaByHybrid(request *SearchMediaByHybridRequest) (_result *SearchMediaByHybridResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByHybridResponse{}
	_body, _err := client.SearchMediaByHybridWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 多模态搜索
//
// @param request - SearchMediaByMultimodalRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaByMultimodalResponse
func (client *Client) SearchMediaByMultimodalWithOptions(request *SearchMediaByMultimodalRequest, runtime *util.RuntimeOptions) (_result *SearchMediaByMultimodalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	if !tea.BoolValue(util.IsUnset(request.Text)) {
		query["Text"] = request.Text
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaByMultimodal"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaByMultimodalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 多模态搜索
//
// @param request - SearchMediaByMultimodalRequest
//
// @return SearchMediaByMultimodalResponse
func (client *Client) SearchMediaByMultimodal(request *SearchMediaByMultimodalRequest) (_result *SearchMediaByMultimodalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaByMultimodalResponse{}
	_body, _err := client.SearchMediaByMultimodalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 人脸搜精搜接口，基于粗搜结果返回该人物所在媒资的相关人物片段信息
//
// @param request - SearchMediaClipByFaceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchMediaClipByFaceResponse
func (client *Client) SearchMediaClipByFaceWithOptions(request *SearchMediaClipByFaceRequest, runtime *util.RuntimeOptions) (_result *SearchMediaClipByFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.FaceSearchToken)) {
		query["FaceSearchToken"] = request.FaceSearchToken
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMediaClipByFace"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaClipByFaceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 人脸搜精搜接口，基于粗搜结果返回该人物所在媒资的相关人物片段信息
//
// @param request - SearchMediaClipByFaceRequest
//
// @return SearchMediaClipByFaceResponse
func (client *Client) SearchMediaClipByFace(request *SearchMediaClipByFaceRequest) (_result *SearchMediaClipByFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaClipByFaceResponse{}
	_body, _err := client.SearchMediaClipByFaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 搜索公共媒资信息
//
// @param request - SearchPublicMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SearchPublicMediaInfoResponse
func (client *Client) SearchPublicMediaInfoWithOptions(request *SearchPublicMediaInfoRequest, runtime *util.RuntimeOptions) (_result *SearchPublicMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Authorized)) {
		query["Authorized"] = request.Authorized
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicMetaDataMatchFields)) {
		query["DynamicMetaDataMatchFields"] = request.DynamicMetaDataMatchFields
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.Favorite)) {
		query["Favorite"] = request.Favorite
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchPublicMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchPublicMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 搜索公共媒资信息
//
// @param request - SearchPublicMediaInfoRequest
//
// @return SearchPublicMediaInfoResponse
func (client *Client) SearchPublicMediaInfo(request *SearchPublicMediaInfoRequest) (_result *SearchPublicMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchPublicMediaInfoResponse{}
	_body, _err := client.SearchPublicMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 发送实时截图任务指令
//
// @param request - SendLiveSnapshotJobCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendLiveSnapshotJobCommandResponse
func (client *Client) SendLiveSnapshotJobCommandWithOptions(request *SendLiveSnapshotJobCommandRequest, runtime *util.RuntimeOptions) (_result *SendLiveSnapshotJobCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Command)) {
		body["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SendLiveSnapshotJobCommand"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendLiveSnapshotJobCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 发送实时截图任务指令
//
// @param request - SendLiveSnapshotJobCommandRequest
//
// @return SendLiveSnapshotJobCommandResponse
func (client *Client) SendLiveSnapshotJobCommand(request *SendLiveSnapshotJobCommandRequest) (_result *SendLiveSnapshotJobCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendLiveSnapshotJobCommandResponse{}
	_body, _err := client.SendLiveSnapshotJobCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 给指定转码任务发实时命令
//
// @param request - SendLiveTranscodeJobCommandRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SendLiveTranscodeJobCommandResponse
func (client *Client) SendLiveTranscodeJobCommandWithOptions(request *SendLiveTranscodeJobCommandRequest, runtime *util.RuntimeOptions) (_result *SendLiveTranscodeJobCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendLiveTranscodeJobCommand"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendLiveTranscodeJobCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 给指定转码任务发实时命令
//
// @param request - SendLiveTranscodeJobCommandRequest
//
// @return SendLiveTranscodeJobCommandResponse
func (client *Client) SendLiveTranscodeJobCommand(request *SendLiveTranscodeJobCommandRequest) (_result *SendLiveTranscodeJobCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendLiveTranscodeJobCommandResponse{}
	_body, _err := client.SendLiveTranscodeJobCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置内容分析搜索配置
//
// @param request - SetContentAnalyzeConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetContentAnalyzeConfigResponse
func (client *Client) SetContentAnalyzeConfigWithOptions(request *SetContentAnalyzeConfigRequest, runtime *util.RuntimeOptions) (_result *SetContentAnalyzeConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Auto)) {
		query["Auto"] = request.Auto
	}

	if !tea.BoolValue(util.IsUnset(request.SaveType)) {
		query["SaveType"] = request.SaveType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetContentAnalyzeConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetContentAnalyzeConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置内容分析搜索配置
//
// @param request - SetContentAnalyzeConfigRequest
//
// @return SetContentAnalyzeConfigResponse
func (client *Client) SetContentAnalyzeConfig(request *SetContentAnalyzeConfigRequest) (_result *SetContentAnalyzeConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetContentAnalyzeConfigResponse{}
	_body, _err := client.SetContentAnalyzeConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置默认媒体处理模板
//
// @param request - SetDefaultCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDefaultCustomTemplateResponse
func (client *Client) SetDefaultCustomTemplateWithOptions(request *SetDefaultCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *SetDefaultCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDefaultCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDefaultCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置默认媒体处理模板
//
// @param request - SetDefaultCustomTemplateRequest
//
// @return SetDefaultCustomTemplateResponse
func (client *Client) SetDefaultCustomTemplate(request *SetDefaultCustomTemplateRequest) (_result *SetDefaultCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDefaultCustomTemplateResponse{}
	_body, _err := client.SetDefaultCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 设置默认存储路径
//
// @param request - SetDefaultStorageLocationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetDefaultStorageLocationResponse
func (client *Client) SetDefaultStorageLocationWithOptions(request *SetDefaultStorageLocationRequest, runtime *util.RuntimeOptions) (_result *SetDefaultStorageLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bucket)) {
		query["Bucket"] = request.Bucket
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDefaultStorageLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDefaultStorageLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 设置默认存储路径
//
// @param request - SetDefaultStorageLocationRequest
//
// @return SetDefaultStorageLocationResponse
func (client *Client) SetDefaultStorageLocation(request *SetDefaultStorageLocationRequest) (_result *SetDefaultStorageLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDefaultStorageLocationResponse{}
	_body, _err := client.SetDefaultStorageLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 配置事件回调地址
//
// @param request - SetEventCallbackRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SetEventCallbackResponse
func (client *Client) SetEventCallbackWithOptions(request *SetEventCallbackRequest, runtime *util.RuntimeOptions) (_result *SetEventCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthKey)) {
		query["AuthKey"] = request.AuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.AuthSwitch)) {
		query["AuthSwitch"] = request.AuthSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackQueueName)) {
		query["CallbackQueueName"] = request.CallbackQueueName
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackType)) {
		query["CallbackType"] = request.CallbackType
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackURL)) {
		query["CallbackURL"] = request.CallbackURL
	}

	if !tea.BoolValue(util.IsUnset(request.EventTypeList)) {
		query["EventTypeList"] = request.EventTypeList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetEventCallback"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetEventCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 配置事件回调地址
//
// @param request - SetEventCallbackRequest
//
// @return SetEventCallbackResponse
func (client *Client) SetEventCallback(request *SetEventCallbackRequest) (_result *SetEventCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetEventCallbackResponse{}
	_body, _err := client.SetEventCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 启动工作流
//
// @param request - StartWorkflowRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartWorkflowResponse
func (client *Client) StartWorkflowWithOptions(request *StartWorkflowRequest, runtime *util.RuntimeOptions) (_result *StartWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskInput)) {
		query["TaskInput"] = request.TaskInput
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	if !tea.BoolValue(util.IsUnset(request.WorkflowId)) {
		query["WorkflowId"] = request.WorkflowId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartWorkflow"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartWorkflowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 启动工作流
//
// @param request - StartWorkflowRequest
//
// @return StartWorkflowResponse
func (client *Client) StartWorkflow(request *StartWorkflowRequest) (_result *StartWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartWorkflowResponse{}
	_body, _err := client.StartWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// SubmitASRJob
//
// @param request - SubmitASRJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitASRJobResponse
func (client *Client) SubmitASRJobWithOptions(request *SubmitASRJobRequest, runtime *util.RuntimeOptions) (_result *SubmitASRJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.InputFile)) {
		query["InputFile"] = request.InputFile
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitASRJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitASRJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// SubmitASRJob
//
// @param request - SubmitASRJobRequest
//
// @return SubmitASRJobResponse
func (client *Client) SubmitASRJob(request *SubmitASRJobRequest) (_result *SubmitASRJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitASRJobResponse{}
	_body, _err := client.SubmitASRJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// SubmitAudioProduceJob
//
// @param request - SubmitAudioProduceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAudioProduceJobResponse
func (client *Client) SubmitAudioProduceJobWithOptions(request *SubmitAudioProduceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAudioProduceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		query["InputConfig"] = request.InputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAudioProduceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAudioProduceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// SubmitAudioProduceJob
//
// @param request - SubmitAudioProduceJobRequest
//
// @return SubmitAudioProduceJobResponse
func (client *Client) SubmitAudioProduceJob(request *SubmitAudioProduceJobRequest) (_result *SubmitAudioProduceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAudioProduceJobResponse{}
	_body, _err := client.SubmitAudioProduceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交数字人训练任务
//
// @param request - SubmitAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAvatarTrainingJobResponse
func (client *Client) SubmitAvatarTrainingJobWithOptions(request *SubmitAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交数字人训练任务
//
// @param request - SubmitAvatarTrainingJobRequest
//
// @return SubmitAvatarTrainingJobResponse
func (client *Client) SubmitAvatarTrainingJob(request *SubmitAvatarTrainingJobRequest) (_result *SubmitAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAvatarTrainingJobResponse{}
	_body, _err := client.SubmitAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交虚拟人视频合成任务
//
// @param request - SubmitAvatarVideoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitAvatarVideoJobResponse
func (client *Client) SubmitAvatarVideoJobWithOptions(request *SubmitAvatarVideoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAvatarVideoJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		query["InputConfig"] = request.InputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAvatarVideoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAvatarVideoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交虚拟人视频合成任务
//
// @param request - SubmitAvatarVideoJobRequest
//
// @return SubmitAvatarVideoJobResponse
func (client *Client) SubmitAvatarVideoJob(request *SubmitAvatarVideoJobRequest) (_result *SubmitAvatarVideoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAvatarVideoJobResponse{}
	_body, _err := client.SubmitAvatarVideoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// SubmitBatchMediaProducingJob
//
// @param request - SubmitBatchMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitBatchMediaProducingJobResponse
func (client *Client) SubmitBatchMediaProducingJobWithOptions(request *SubmitBatchMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitBatchMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		body["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		body["InputConfig"] = request.InputConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitBatchMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitBatchMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// SubmitBatchMediaProducingJob
//
// @param request - SubmitBatchMediaProducingJobRequest
//
// @return SubmitBatchMediaProducingJobResponse
func (client *Client) SubmitBatchMediaProducingJob(request *SubmitBatchMediaProducingJobRequest) (_result *SubmitBatchMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitBatchMediaProducingJobResponse{}
	_body, _err := client.SubmitBatchMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交人声克隆训练任务
//
// @param request - SubmitCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitCustomizedVoiceJobResponse
func (client *Client) SubmitCustomizedVoiceJobWithOptions(request *SubmitCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemoAudioMediaURL)) {
		query["DemoAudioMediaURL"] = request.DemoAudioMediaURL
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交人声克隆训练任务
//
// @param request - SubmitCustomizedVoiceJobRequest
//
// @return SubmitCustomizedVoiceJobResponse
func (client *Client) SubmitCustomizedVoiceJob(request *SubmitCustomizedVoiceJobRequest) (_result *SubmitCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCustomizedVoiceJobResponse{}
	_body, _err := client.SubmitCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交DNA作业
//
// @param tmpReq - SubmitDNAJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitDNAJobResponse
func (client *Client) SubmitDNAJobWithOptions(tmpReq *SubmitDNAJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDNAJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitDNAJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.DBId)) {
		query["DBId"] = request.DBId
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.PrimaryKey)) {
		query["PrimaryKey"] = request.PrimaryKey
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDNAJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDNAJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交DNA作业
//
// @param request - SubmitDNAJobRequest
//
// @return SubmitDNAJobResponse
func (client *Client) SubmitDNAJob(request *SubmitDNAJobRequest) (_result *SubmitDNAJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDNAJobResponse{}
	_body, _err := client.SubmitDNAJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交动态图表任务
//
// @param request - SubmitDynamicChartJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitDynamicChartJobResponse
func (client *Client) SubmitDynamicChartJobWithOptions(request *SubmitDynamicChartJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDynamicChartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AxisParams)) {
		query["AxisParams"] = request.AxisParams
	}

	if !tea.BoolValue(util.IsUnset(request.Background)) {
		query["Background"] = request.Background
	}

	if !tea.BoolValue(util.IsUnset(request.ChartConfig)) {
		query["ChartConfig"] = request.ChartConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ChartTitle)) {
		query["ChartTitle"] = request.ChartTitle
	}

	if !tea.BoolValue(util.IsUnset(request.ChartType)) {
		query["ChartType"] = request.ChartType
	}

	if !tea.BoolValue(util.IsUnset(request.DataSource)) {
		query["DataSource"] = request.DataSource
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Subtitle)) {
		query["Subtitle"] = request.Subtitle
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Unit)) {
		query["Unit"] = request.Unit
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDynamicChartJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDynamicChartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交动态图表任务
//
// @param request - SubmitDynamicChartJobRequest
//
// @return SubmitDynamicChartJobResponse
func (client *Client) SubmitDynamicChartJob(request *SubmitDynamicChartJobRequest) (_result *SubmitDynamicChartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDynamicChartJobResponse{}
	_body, _err := client.SubmitDynamicChartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交异步动图任务接口
//
// @param tmpReq - SubmitDynamicImageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitDynamicImageJobResponse
func (client *Client) SubmitDynamicImageJobWithOptions(tmpReq *SubmitDynamicImageJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDynamicImageJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitDynamicImageJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDynamicImageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDynamicImageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交异步动图任务接口
//
// @param request - SubmitDynamicImageJobRequest
//
// @return SubmitDynamicImageJobResponse
func (client *Client) SubmitDynamicImageJob(request *SubmitDynamicImageJobRequest) (_result *SubmitDynamicImageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDynamicImageJobResponse{}
	_body, _err := client.SubmitDynamicImageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交智能生产作业
//
// @param tmpReq - SubmitIProductionJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitIProductionJobResponse
func (client *Client) SubmitIProductionJobWithOptions(tmpReq *SubmitIProductionJobRequest, runtime *util.RuntimeOptions) (_result *SubmitIProductionJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitIProductionJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		query["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.JobParams)) {
		query["JobParams"] = request.JobParams
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitIProductionJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交智能生产作业
//
// @param request - SubmitIProductionJobRequest
//
// @return SubmitIProductionJobResponse
func (client *Client) SubmitIProductionJob(request *SubmitIProductionJobRequest) (_result *SubmitIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.SubmitIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交直播剪辑任务
//
// @param request - SubmitLiveEditingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveEditingJobResponse
func (client *Client) SubmitLiveEditingJobWithOptions(request *SubmitLiveEditingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveEditingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Clips)) {
		query["Clips"] = request.Clips
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamConfig)) {
		query["LiveStreamConfig"] = request.LiveStreamConfig
	}

	if !tea.BoolValue(util.IsUnset(request.MediaProduceConfig)) {
		query["MediaProduceConfig"] = request.MediaProduceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaTarget)) {
		query["OutputMediaTarget"] = request.OutputMediaTarget
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveEditingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveEditingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交直播剪辑任务
//
// @param request - SubmitLiveEditingJobRequest
//
// @return SubmitLiveEditingJobResponse
func (client *Client) SubmitLiveEditingJob(request *SubmitLiveEditingJobRequest) (_result *SubmitLiveEditingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveEditingJobResponse{}
	_body, _err := client.SubmitLiveEditingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交录制任务
//
// @param tmpReq - SubmitLiveRecordJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveRecordJobResponse
func (client *Client) SubmitLiveRecordJobWithOptions(tmpReq *SubmitLiveRecordJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveRecordJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitLiveRecordJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RecordOutput)) {
		request.RecordOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordOutput, tea.String("RecordOutput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		body["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.RecordOutputShrink)) {
		body["RecordOutput"] = request.RecordOutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		body["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveRecordJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveRecordJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交录制任务
//
// @param request - SubmitLiveRecordJobRequest
//
// @return SubmitLiveRecordJobResponse
func (client *Client) SubmitLiveRecordJob(request *SubmitLiveRecordJobRequest) (_result *SubmitLiveRecordJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveRecordJobResponse{}
	_body, _err := client.SubmitLiveRecordJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 创建直播截图任务
//
// @param tmpReq - SubmitLiveSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveSnapshotJobResponse
func (client *Client) SubmitLiveSnapshotJobWithOptions(tmpReq *SubmitLiveSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitLiveSnapshotJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.SnapshotOutput)) {
		request.SnapshotOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.SnapshotOutput, tea.String("SnapshotOutput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CallbackUrl)) {
		body["CallbackUrl"] = request.CallbackUrl
	}

	if !tea.BoolValue(util.IsUnset(request.JobName)) {
		body["JobName"] = request.JobName
	}

	if !tea.BoolValue(util.IsUnset(request.SnapshotOutputShrink)) {
		body["SnapshotOutput"] = request.SnapshotOutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		body["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 创建直播截图任务
//
// @param request - SubmitLiveSnapshotJobRequest
//
// @return SubmitLiveSnapshotJobResponse
func (client *Client) SubmitLiveSnapshotJob(request *SubmitLiveSnapshotJobRequest) (_result *SubmitLiveSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveSnapshotJobResponse{}
	_body, _err := client.SubmitLiveSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交转码任务
//
// @param tmpReq - SubmitLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitLiveTranscodeJobResponse
func (client *Client) SubmitLiveTranscodeJobWithOptions(tmpReq *SubmitLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitLiveTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TimedConfig)) {
		request.TimedConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TimedConfig, tea.String("TimedConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TranscodeOutput)) {
		request.TranscodeOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TranscodeOutput, tea.String("TranscodeOutput"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.StartMode)) {
		query["StartMode"] = request.StartMode
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		query["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TimedConfigShrink)) {
		query["TimedConfig"] = request.TimedConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeOutputShrink)) {
		query["TranscodeOutput"] = request.TranscodeOutputShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交转码任务
//
// @param request - SubmitLiveTranscodeJobRequest
//
// @return SubmitLiveTranscodeJobResponse
func (client *Client) SubmitLiveTranscodeJob(request *SubmitLiveTranscodeJobRequest) (_result *SubmitLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveTranscodeJobResponse{}
	_body, _err := client.SubmitLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - SubmitMediaCensorJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaCensorJobResponse
func (client *Client) SubmitMediaCensorJobWithOptions(tmpReq *SubmitMediaCensorJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaCensorJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitMediaCensorJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Barrages)) {
		query["Barrages"] = request.Barrages
	}

	if !tea.BoolValue(util.IsUnset(request.CoverImages)) {
		query["CoverImages"] = request.CoverImages
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Output)) {
		query["Output"] = request.Output
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaCensorJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitMediaCensorJobRequest
//
// @return SubmitMediaCensorJobResponse
func (client *Client) SubmitMediaCensorJob(request *SubmitMediaCensorJobRequest) (_result *SubmitMediaCensorJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.SubmitMediaCensorJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - SubmitMediaInfoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaInfoJobResponse
func (client *Client) SubmitMediaInfoJobWithOptions(tmpReq *SubmitMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitMediaInfoJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitMediaInfoJobRequest
//
// @return SubmitMediaInfoJobResponse
func (client *Client) SubmitMediaInfoJob(request *SubmitMediaInfoJobRequest) (_result *SubmitMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.SubmitMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// SubmitMediaProducingJob
//
// @param request - SubmitMediaProducingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitMediaProducingJobResponse
func (client *Client) SubmitMediaProducingJobWithOptions(request *SubmitMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.EditingProduceConfig)) {
		query["EditingProduceConfig"] = request.EditingProduceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetadata)) {
		query["MediaMetadata"] = request.MediaMetadata
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaTarget)) {
		query["OutputMediaTarget"] = request.OutputMediaTarget
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectMetadata)) {
		query["ProjectMetadata"] = request.ProjectMetadata
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		body["Timeline"] = request.Timeline
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// SubmitMediaProducingJob
//
// @param request - SubmitMediaProducingJobRequest
//
// @return SubmitMediaProducingJobResponse
func (client *Client) SubmitMediaProducingJob(request *SubmitMediaProducingJobRequest) (_result *SubmitMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaProducingJobResponse{}
	_body, _err := client.SubmitMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交打包任务
//
// @param tmpReq - SubmitPackageJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitPackageJobResponse
func (client *Client) SubmitPackageJobWithOptions(tmpReq *SubmitPackageJobRequest, runtime *util.RuntimeOptions) (_result *SubmitPackageJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitPackageJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Inputs)) {
		request.InputsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Inputs, tea.String("Inputs"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputsShrink)) {
		query["Inputs"] = request.InputsShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitPackageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitPackageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交打包任务
//
// @param request - SubmitPackageJobRequest
//
// @return SubmitPackageJobResponse
func (client *Client) SubmitPackageJob(request *SubmitPackageJobRequest) (_result *SubmitPackageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitPackageJobResponse{}
	_body, _err := client.SubmitPackageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - SubmitSmarttagJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSmarttagJobResponse
func (client *Client) SubmitSmarttagJobWithOptions(tmpReq *SubmitSmarttagJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSmarttagJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSmarttagJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		query["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.ContentAddr)) {
		query["ContentAddr"] = request.ContentAddr
	}

	if !tea.BoolValue(util.IsUnset(request.ContentType)) {
		query["ContentType"] = request.ContentType
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		query["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSmarttagJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSmarttagJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitSmarttagJobRequest
//
// @return SubmitSmarttagJobResponse
func (client *Client) SubmitSmarttagJob(request *SubmitSmarttagJobRequest) (_result *SubmitSmarttagJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSmarttagJobResponse{}
	_body, _err := client.SubmitSmarttagJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交异步截图任务
//
// @param tmpReq - SubmitSnapshotJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSnapshotJobResponse
func (client *Client) SubmitSnapshotJobWithOptions(tmpReq *SubmitSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSnapshotJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.Output)) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Output, tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交异步截图任务
//
// @param request - SubmitSnapshotJobRequest
//
// @return SubmitSnapshotJobResponse
func (client *Client) SubmitSnapshotJob(request *SubmitSnapshotJobRequest) (_result *SubmitSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.SubmitSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交标准版人声克隆训练任务
//
// @param request - SubmitStandardCustomizedVoiceJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitStandardCustomizedVoiceJobResponse
func (client *Client) SubmitStandardCustomizedVoiceJobWithOptions(request *SubmitStandardCustomizedVoiceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitStandardCustomizedVoiceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Audios)) {
		query["Audios"] = request.Audios
	}

	if !tea.BoolValue(util.IsUnset(request.Authentication)) {
		query["Authentication"] = request.Authentication
	}

	if !tea.BoolValue(util.IsUnset(request.DemoAudioMediaURL)) {
		query["DemoAudioMediaURL"] = request.DemoAudioMediaURL
	}

	if !tea.BoolValue(util.IsUnset(request.Gender)) {
		query["Gender"] = request.Gender
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceName)) {
		query["VoiceName"] = request.VoiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitStandardCustomizedVoiceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitStandardCustomizedVoiceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交标准版人声克隆训练任务
//
// @param request - SubmitStandardCustomizedVoiceJobRequest
//
// @return SubmitStandardCustomizedVoiceJobResponse
func (client *Client) SubmitStandardCustomizedVoiceJob(request *SubmitStandardCustomizedVoiceJobRequest) (_result *SubmitStandardCustomizedVoiceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitStandardCustomizedVoiceJobResponse{}
	_body, _err := client.SubmitStandardCustomizedVoiceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - SubmitSyncMediaInfoJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitSyncMediaInfoJobResponse
func (client *Client) SubmitSyncMediaInfoJobWithOptions(tmpReq *SubmitSyncMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSyncMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSyncMediaInfoJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Input)) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Input, tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSyncMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSyncMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitSyncMediaInfoJobRequest
//
// @return SubmitSyncMediaInfoJobResponse
func (client *Client) SubmitSyncMediaInfoJob(request *SubmitSyncMediaInfoJobRequest) (_result *SubmitSyncMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSyncMediaInfoJobResponse{}
	_body, _err := client.SubmitSyncMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 提交文本生成任务
//
// @param request - SubmitTextGenerateJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTextGenerateJobResponse
func (client *Client) SubmitTextGenerateJobWithOptions(request *SubmitTextGenerateJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTextGenerateJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.GenerateConfig)) {
		query["GenerateConfig"] = request.GenerateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTextGenerateJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTextGenerateJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 提交文本生成任务
//
// @param request - SubmitTextGenerateJobRequest
//
// @return SubmitTextGenerateJobResponse
func (client *Client) SubmitTextGenerateJob(request *SubmitTextGenerateJobRequest) (_result *SubmitTextGenerateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTextGenerateJobResponse{}
	_body, _err := client.SubmitTextGenerateJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - SubmitTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitTranscodeJobResponse
func (client *Client) SubmitTranscodeJobWithOptions(tmpReq *SubmitTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InputGroup)) {
		request.InputGroupShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputGroup, tea.String("InputGroup"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OutputGroup)) {
		request.OutputGroupShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OutputGroup, tea.String("OutputGroup"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.ScheduleConfig)) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.ScheduleConfig, tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.InputGroupShrink)) {
		query["InputGroup"] = request.InputGroupShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputGroupShrink)) {
		query["OutputGroup"] = request.OutputGroupShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitTranscodeJobRequest
//
// @return SubmitTranscodeJobResponse
func (client *Client) SubmitTranscodeJob(request *SubmitTranscodeJobRequest) (_result *SubmitTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTranscodeJobResponse{}
	_body, _err := client.SubmitTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新数字人训练任务信息
//
// @param request - UpdateAvatarTrainingJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAvatarTrainingJobResponse
func (client *Client) UpdateAvatarTrainingJobWithOptions(request *UpdateAvatarTrainingJobRequest, runtime *util.RuntimeOptions) (_result *UpdateAvatarTrainingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AvatarDescription)) {
		query["AvatarDescription"] = request.AvatarDescription
	}

	if !tea.BoolValue(util.IsUnset(request.AvatarName)) {
		query["AvatarName"] = request.AvatarName
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Portrait)) {
		query["Portrait"] = request.Portrait
	}

	if !tea.BoolValue(util.IsUnset(request.Thumbnail)) {
		query["Thumbnail"] = request.Thumbnail
	}

	if !tea.BoolValue(util.IsUnset(request.Transparent)) {
		query["Transparent"] = request.Transparent
	}

	if !tea.BoolValue(util.IsUnset(request.Video)) {
		query["Video"] = request.Video
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAvatarTrainingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAvatarTrainingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新数字人训练任务信息
//
// @param request - UpdateAvatarTrainingJobRequest
//
// @return UpdateAvatarTrainingJobResponse
func (client *Client) UpdateAvatarTrainingJob(request *UpdateAvatarTrainingJobRequest) (_result *UpdateAvatarTrainingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAvatarTrainingJobResponse{}
	_body, _err := client.UpdateAvatarTrainingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新媒资分类
//
// @param request - UpdateCategoryRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCategoryResponse
func (client *Client) UpdateCategoryWithOptions(request *UpdateCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新媒资分类
//
// @param request - UpdateCategoryRequest
//
// @return UpdateCategoryResponse
func (client *Client) UpdateCategory(request *UpdateCategoryRequest) (_result *UpdateCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCategoryResponse{}
	_body, _err := client.UpdateCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新媒体处理自定义模板
//
// @param request - UpdateCustomTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCustomTemplateResponse
func (client *Client) UpdateCustomTemplateWithOptions(request *UpdateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新媒体处理自定义模板
//
// @param request - UpdateCustomTemplateRequest
//
// @return UpdateCustomTemplateResponse
func (client *Client) UpdateCustomTemplate(request *UpdateCustomTemplateRequest) (_result *UpdateCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCustomTemplateResponse{}
	_body, _err := client.UpdateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新用户的专属人声
//
// @param request - UpdateCustomizedVoiceRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateCustomizedVoiceResponse
func (client *Client) UpdateCustomizedVoiceWithOptions(request *UpdateCustomizedVoiceRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomizedVoiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DemoAudioMediaId)) {
		query["DemoAudioMediaId"] = request.DemoAudioMediaId
	}

	if !tea.BoolValue(util.IsUnset(request.VoiceId)) {
		query["VoiceId"] = request.VoiceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCustomizedVoice"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCustomizedVoiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新用户的专属人声
//
// @param request - UpdateCustomizedVoiceRequest
//
// @return UpdateCustomizedVoiceResponse
func (client *Client) UpdateCustomizedVoice(request *UpdateCustomizedVoiceRequest) (_result *UpdateCustomizedVoiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCustomizedVoiceResponse{}
	_body, _err := client.UpdateCustomizedVoiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改云剪辑工程
//
// @param request - UpdateEditingProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEditingProjectResponse
func (client *Client) UpdateEditingProjectWithOptions(request *UpdateEditingProjectRequest, runtime *util.RuntimeOptions) (_result *UpdateEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessStatus)) {
		query["BusinessStatus"] = request.BusinessStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		body["Timeline"] = request.Timeline
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改云剪辑工程
//
// @param request - UpdateEditingProjectRequest
//
// @return UpdateEditingProjectResponse
func (client *Client) UpdateEditingProject(request *UpdateEditingProjectRequest) (_result *UpdateEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEditingProjectResponse{}
	_body, _err := client.UpdateEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 修改直播录制模板
//
// @param tmpReq - UpdateLiveRecordTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveRecordTemplateResponse
func (client *Client) UpdateLiveRecordTemplateWithOptions(tmpReq *UpdateLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveRecordTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RecordFormat)) {
		request.RecordFormatShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordFormat, tea.String("RecordFormat"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RecordFormatShrink)) {
		body["RecordFormat"] = request.RecordFormatShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 修改直播录制模板
//
// @param request - UpdateLiveRecordTemplateRequest
//
// @return UpdateLiveRecordTemplateResponse
func (client *Client) UpdateLiveRecordTemplate(request *UpdateLiveRecordTemplateRequest) (_result *UpdateLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveRecordTemplateResponse{}
	_body, _err := client.UpdateLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新直播截图模板
//
// @param request - UpdateLiveSnapshotTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveSnapshotTemplateResponse
func (client *Client) UpdateLiveSnapshotTemplateWithOptions(request *UpdateLiveSnapshotTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveSnapshotTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OverwriteFormat)) {
		body["OverwriteFormat"] = request.OverwriteFormat
	}

	if !tea.BoolValue(util.IsUnset(request.SequenceFormat)) {
		body["SequenceFormat"] = request.SequenceFormat
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		body["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		body["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.TimeInterval)) {
		body["TimeInterval"] = request.TimeInterval
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveSnapshotTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveSnapshotTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新直播截图模板
//
// @param request - UpdateLiveSnapshotTemplateRequest
//
// @return UpdateLiveSnapshotTemplateResponse
func (client *Client) UpdateLiveSnapshotTemplate(request *UpdateLiveSnapshotTemplateRequest) (_result *UpdateLiveSnapshotTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveSnapshotTemplateResponse{}
	_body, _err := client.UpdateLiveSnapshotTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新转码任务配置
//
// @param tmpReq - UpdateLiveTranscodeJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveTranscodeJobResponse
func (client *Client) UpdateLiveTranscodeJobWithOptions(tmpReq *UpdateLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.StreamInput)) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.StreamInput, tea.String("StreamInput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TimedConfig)) {
		request.TimedConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TimedConfig, tea.String("TimedConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.TranscodeOutput)) {
		request.TranscodeOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TranscodeOutput, tea.String("TranscodeOutput"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		query["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TimedConfigShrink)) {
		query["TimedConfig"] = request.TimedConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeOutputShrink)) {
		query["TranscodeOutput"] = request.TranscodeOutputShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新转码任务配置
//
// @param request - UpdateLiveTranscodeJobRequest
//
// @return UpdateLiveTranscodeJobResponse
func (client *Client) UpdateLiveTranscodeJob(request *UpdateLiveTranscodeJobRequest) (_result *UpdateLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTranscodeJobResponse{}
	_body, _err := client.UpdateLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新转码模版
//
// @param tmpReq - UpdateLiveTranscodeTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateLiveTranscodeTemplateResponse
func (client *Client) UpdateLiveTranscodeTemplateWithOptions(tmpReq *UpdateLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveTranscodeTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.TemplateConfig)) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.TemplateConfig, tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新转码模版
//
// @param request - UpdateLiveTranscodeTemplateRequest
//
// @return UpdateLiveTranscodeTemplateResponse
func (client *Client) UpdateLiveTranscodeTemplate(request *UpdateLiveTranscodeTemplateRequest) (_result *UpdateLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTranscodeTemplateResponse{}
	_body, _err := client.UpdateLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// UpdateMediaInfo
//
// @param request - UpdateMediaInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaInfoResponse
func (client *Client) UpdateMediaInfoWithOptions(request *UpdateMediaInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppendTags)) {
		query["AppendTags"] = request.AppendTags
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTags)) {
		query["MediaTags"] = request.MediaTags
	}

	if !tea.BoolValue(util.IsUnset(request.ReferenceId)) {
		query["ReferenceId"] = request.ReferenceId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// UpdateMediaInfo
//
// @param request - UpdateMediaInfoRequest
//
// @return UpdateMediaInfoResponse
func (client *Client) UpdateMediaInfo(request *UpdateMediaInfoRequest) (_result *UpdateMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaInfoResponse{}
	_body, _err := client.UpdateMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 为媒资修改标注信息
//
// @param request - UpdateMediaMarksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaMarksResponse
func (client *Client) UpdateMediaMarksWithOptions(request *UpdateMediaMarksRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaMarksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMarks)) {
		query["MediaMarks"] = request.MediaMarks
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaMarks"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaMarksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 为媒资修改标注信息
//
// @param request - UpdateMediaMarksRequest
//
// @return UpdateMediaMarksResponse
func (client *Client) UpdateMediaMarks(request *UpdateMediaMarksRequest) (_result *UpdateMediaMarksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaMarksResponse{}
	_body, _err := client.UpdateMediaMarksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新媒资到搜索
//
// @param request - UpdateMediaToSearchLibRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMediaToSearchLibResponse
func (client *Client) UpdateMediaToSearchLibWithOptions(request *UpdateMediaToSearchLibRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaToSearchLibResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MsgBody)) {
		query["MsgBody"] = request.MsgBody
	}

	if !tea.BoolValue(util.IsUnset(request.SearchLibName)) {
		query["SearchLibName"] = request.SearchLibName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaToSearchLib"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaToSearchLibResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新媒资到搜索
//
// @param request - UpdateMediaToSearchLibRequest
//
// @return UpdateMediaToSearchLibResponse
func (client *Client) UpdateMediaToSearchLib(request *UpdateMediaToSearchLibRequest) (_result *UpdateMediaToSearchLibResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaToSearchLibResponse{}
	_body, _err := client.UpdateMediaToSearchLibWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// 更新管道配置
//
// @param request - UpdatePipelineRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipelineWithOptions(request *UpdatePipelineRequest, runtime *util.RuntimeOptions) (_result *UpdatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// 更新管道配置
//
// @param request - UpdatePipelineRequest
//
// @return UpdatePipelineResponse
func (client *Client) UpdatePipeline(request *UpdatePipelineRequest) (_result *UpdatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.UpdatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// UpdateTemplate
//
// @param request - UpdateTemplateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateTemplateResponse
func (client *Client) UpdateTemplateWithOptions(request *UpdateTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		query["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewMedia)) {
		query["PreviewMedia"] = request.PreviewMedia
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedMediaids)) {
		query["RelatedMediaids"] = request.RelatedMediaids
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		body["Config"] = request.Config
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// UpdateTemplate
//
// @param request - UpdateTemplateRequest
//
// @return UpdateTemplateResponse
func (client *Client) UpdateTemplate(request *UpdateTemplateRequest) (_result *UpdateTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.UpdateTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// URL拉取上传
//
// @param request - UploadMediaByURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadMediaByURLResponse
func (client *Client) UploadMediaByURLWithOptions(request *UploadMediaByURLRequest, runtime *util.RuntimeOptions) (_result *UploadMediaByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetaData)) {
		query["MediaMetaData"] = request.MediaMetaData
	}

	if !tea.BoolValue(util.IsUnset(request.PostProcessConfig)) {
		query["PostProcessConfig"] = request.PostProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadTargetConfig)) {
		query["UploadTargetConfig"] = request.UploadTargetConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadURLs)) {
		query["UploadURLs"] = request.UploadURLs
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadMediaByURL"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadMediaByURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// URL拉取上传
//
// @param request - UploadMediaByURLRequest
//
// @return UploadMediaByURLResponse
func (client *Client) UploadMediaByURL(request *UploadMediaByURLRequest) (_result *UploadMediaByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadMediaByURLResponse{}
	_body, _err := client.UploadMediaByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Summary:
//
// URL拉取上传媒体流
//
// @param request - UploadStreamByURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UploadStreamByURLResponse
func (client *Client) UploadStreamByURLWithOptions(request *UploadStreamByURLRequest, runtime *util.RuntimeOptions) (_result *UploadStreamByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.FileExtension)) {
		query["FileExtension"] = request.FileExtension
	}

	if !tea.BoolValue(util.IsUnset(request.HDRType)) {
		query["HDRType"] = request.HDRType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamURL)) {
		query["StreamURL"] = request.StreamURL
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadStreamByURL"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadStreamByURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Summary:
//
// URL拉取上传媒体流
//
// @param request - UploadStreamByURLRequest
//
// @return UploadStreamByURLResponse
func (client *Client) UploadStreamByURL(request *UploadStreamByURLRequest) (_result *UploadStreamByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadStreamByURLResponse{}
	_body, _err := client.UploadStreamByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
