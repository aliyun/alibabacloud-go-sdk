// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddCategoryRequest struct {
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	ParentId *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryRequest) GoString() string {
	return s.String()
}

func (s *AddCategoryRequest) SetCateName(v string) *AddCategoryRequest {
	s.CateName = &v
	return s
}

func (s *AddCategoryRequest) SetParentId(v int64) *AddCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *AddCategoryRequest) SetType(v string) *AddCategoryRequest {
	s.Type = &v
	return s
}

type AddCategoryResponseBody struct {
	Category  *AddCategoryResponseBodyCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBody) SetCategory(v *AddCategoryResponseBodyCategory) *AddCategoryResponseBody {
	s.Category = v
	return s
}

func (s *AddCategoryResponseBody) SetRequestId(v string) *AddCategoryResponseBody {
	s.RequestId = &v
	return s
}

type AddCategoryResponseBodyCategory struct {
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	Level    *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	ParentId *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddCategoryResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBodyCategory) SetCateId(v int64) *AddCategoryResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetCateName(v string) *AddCategoryResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetLevel(v int64) *AddCategoryResponseBodyCategory {
	s.Level = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetParentId(v int64) *AddCategoryResponseBodyCategory {
	s.ParentId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetType(v string) *AddCategoryResponseBodyCategory {
	s.Type = &v
	return s
}

type AddCategoryResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponse) GoString() string {
	return s.String()
}

func (s *AddCategoryResponse) SetHeaders(v map[string]*string) *AddCategoryResponse {
	s.Headers = v
	return s
}

func (s *AddCategoryResponse) SetStatusCode(v int32) *AddCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *AddCategoryResponse) SetBody(v *AddCategoryResponseBody) *AddCategoryResponse {
	s.Body = v
	return s
}

type AddEditingProjectMaterialsRequest struct {
	// 素材ID
	MaterialMaps *string `json:"MaterialMaps,omitempty" xml:"MaterialMaps,omitempty"`
	// 云剪辑工程ID
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s AddEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsRequest) SetMaterialMaps(v string) *AddEditingProjectMaterialsRequest {
	s.MaterialMaps = &v
	return s
}

func (s *AddEditingProjectMaterialsRequest) SetProjectId(v string) *AddEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type AddEditingProjectMaterialsResponseBody struct {
	LiveMaterials []*AddEditingProjectMaterialsResponseBodyLiveMaterials `json:"LiveMaterials,omitempty" xml:"LiveMaterials,omitempty" type:"Repeated"`
	// 符合要求的媒资集合
	MediaInfos       []*AddEditingProjectMaterialsResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	ProjectId        *string                                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectMaterials []*string                                           `json:"ProjectMaterials,omitempty" xml:"ProjectMaterials,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBody) SetLiveMaterials(v []*AddEditingProjectMaterialsResponseBodyLiveMaterials) *AddEditingProjectMaterialsResponseBody {
	s.LiveMaterials = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetMediaInfos(v []*AddEditingProjectMaterialsResponseBodyMediaInfos) *AddEditingProjectMaterialsResponseBody {
	s.MediaInfos = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetProjectId(v string) *AddEditingProjectMaterialsResponseBody {
	s.ProjectId = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetProjectMaterials(v []*string) *AddEditingProjectMaterialsResponseBody {
	s.ProjectMaterials = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBody) SetRequestId(v string) *AddEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyLiveMaterials struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LiveUrl    *string `json:"LiveUrl,omitempty" xml:"LiveUrl,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyLiveMaterials) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyLiveMaterials) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetAppName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.AppName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetDomainName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.DomainName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetLiveUrl(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.LiveUrl = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyLiveMaterials) SetStreamName(v string) *AddEditingProjectMaterialsResponseBodyLiveMaterials {
	s.StreamName = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetFileInfoList(v []*AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetMediaBasicInfo(v *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfos) SetMediaId(v string) *AddEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList struct {
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 待注册的媒资在相应系统中的地址
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 截图
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 转码状态
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *AddEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type AddEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s AddEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *AddEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *AddEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *AddEditingProjectMaterialsResponse) SetStatusCode(v int32) *AddEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *AddEditingProjectMaterialsResponse) SetBody(v *AddEditingProjectMaterialsResponseBody) *AddEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type AddFavoritePublicMediaRequest struct {
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s AddFavoritePublicMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaRequest) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaRequest) SetMediaIds(v string) *AddFavoritePublicMediaRequest {
	s.MediaIds = &v
	return s
}

type AddFavoritePublicMediaResponseBody struct {
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddFavoritePublicMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaResponseBody) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaResponseBody) SetIgnoredList(v []*string) *AddFavoritePublicMediaResponseBody {
	s.IgnoredList = v
	return s
}

func (s *AddFavoritePublicMediaResponseBody) SetRequestId(v string) *AddFavoritePublicMediaResponseBody {
	s.RequestId = &v
	return s
}

type AddFavoritePublicMediaResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddFavoritePublicMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddFavoritePublicMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFavoritePublicMediaResponse) GoString() string {
	return s.String()
}

func (s *AddFavoritePublicMediaResponse) SetHeaders(v map[string]*string) *AddFavoritePublicMediaResponse {
	s.Headers = v
	return s
}

func (s *AddFavoritePublicMediaResponse) SetStatusCode(v int32) *AddFavoritePublicMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *AddFavoritePublicMediaResponse) SetBody(v *AddFavoritePublicMediaResponseBody) *AddFavoritePublicMediaResponse {
	s.Body = v
	return s
}

type AddTemplateRequest struct {
	// 参见Timeline模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// 模板封面
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 预览视频媒资id
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// 模板创建来源，默认OpenAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板类型，取值范围：Timeline
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddTemplateRequest) SetConfig(v string) *AddTemplateRequest {
	s.Config = &v
	return s
}

func (s *AddTemplateRequest) SetCoverUrl(v string) *AddTemplateRequest {
	s.CoverUrl = &v
	return s
}

func (s *AddTemplateRequest) SetName(v string) *AddTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddTemplateRequest) SetPreviewMedia(v string) *AddTemplateRequest {
	s.PreviewMedia = &v
	return s
}

func (s *AddTemplateRequest) SetSource(v string) *AddTemplateRequest {
	s.Source = &v
	return s
}

func (s *AddTemplateRequest) SetStatus(v string) *AddTemplateRequest {
	s.Status = &v
	return s
}

func (s *AddTemplateRequest) SetType(v string) *AddTemplateRequest {
	s.Type = &v
	return s
}

type AddTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 模板信息
	Template *AddTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBody) SetRequestId(v string) *AddTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTemplateResponseBody) SetTemplate(v *AddTemplateResponseBodyTemplate) *AddTemplateResponseBody {
	s.Template = v
	return s
}

type AddTemplateResponseBodyTemplate struct {
	// 参见Timeline模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// 模板封面
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// 模板创建来源
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// 模板修改来源
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 预览视频媒资id
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplate) SetConfig(v string) *AddTemplateResponseBodyTemplate {
	s.Config = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetCoverUrl(v string) *AddTemplateResponseBodyTemplate {
	s.CoverUrl = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetCreateSource(v string) *AddTemplateResponseBodyTemplate {
	s.CreateSource = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetModifiedSource(v string) *AddTemplateResponseBodyTemplate {
	s.ModifiedSource = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetName(v string) *AddTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetPreviewMedia(v string) *AddTemplateResponseBodyTemplate {
	s.PreviewMedia = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetStatus(v string) *AddTemplateResponseBodyTemplate {
	s.Status = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetTemplateId(v string) *AddTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetType(v string) *AddTemplateResponseBodyTemplate {
	s.Type = &v
	return s
}

type AddTemplateResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddTemplateResponse) SetHeaders(v map[string]*string) *AddTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddTemplateResponse) SetStatusCode(v int32) *AddTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *AddTemplateResponse) SetBody(v *AddTemplateResponseBody) *AddTemplateResponse {
	s.Body = v
	return s
}

type BatchGetMediaInfosRequest struct {
	AdditionType *string `json:"AdditionType,omitempty" xml:"AdditionType,omitempty"`
	MediaIds     *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s BatchGetMediaInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosRequest) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosRequest) SetAdditionType(v string) *BatchGetMediaInfosRequest {
	s.AdditionType = &v
	return s
}

func (s *BatchGetMediaInfosRequest) SetMediaIds(v string) *BatchGetMediaInfosRequest {
	s.MediaIds = &v
	return s
}

type BatchGetMediaInfosResponseBody struct {
	// 符合要求的媒资集合
	MediaInfos []*BatchGetMediaInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BatchGetMediaInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBody) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBody) SetMediaInfos(v []*BatchGetMediaInfosResponseBodyMediaInfos) *BatchGetMediaInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *BatchGetMediaInfosResponseBody) SetRequestId(v string) *BatchGetMediaInfosResponseBody {
	s.RequestId = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*BatchGetMediaInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetFileInfoList(v []*BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfos) SetMediaId(v string) *BatchGetMediaInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosFileInfoList struct {
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *BatchGetMediaInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 待注册的媒资在相应系统中的地址
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 截图
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 转码状态
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *BatchGetMediaInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type BatchGetMediaInfosResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *BatchGetMediaInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BatchGetMediaInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchGetMediaInfosResponse) GoString() string {
	return s.String()
}

func (s *BatchGetMediaInfosResponse) SetHeaders(v map[string]*string) *BatchGetMediaInfosResponse {
	s.Headers = v
	return s
}

func (s *BatchGetMediaInfosResponse) SetStatusCode(v int32) *BatchGetMediaInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchGetMediaInfosResponse) SetBody(v *BatchGetMediaInfosResponseBody) *BatchGetMediaInfosResponse {
	s.Body = v
	return s
}

type CancelFavoritePublicMediaRequest struct {
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s CancelFavoritePublicMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaRequest) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaRequest) SetMediaIds(v string) *CancelFavoritePublicMediaRequest {
	s.MediaIds = &v
	return s
}

type CancelFavoritePublicMediaResponseBody struct {
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelFavoritePublicMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaResponseBody) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaResponseBody) SetIgnoredList(v []*string) *CancelFavoritePublicMediaResponseBody {
	s.IgnoredList = v
	return s
}

func (s *CancelFavoritePublicMediaResponseBody) SetRequestId(v string) *CancelFavoritePublicMediaResponseBody {
	s.RequestId = &v
	return s
}

type CancelFavoritePublicMediaResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelFavoritePublicMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelFavoritePublicMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelFavoritePublicMediaResponse) GoString() string {
	return s.String()
}

func (s *CancelFavoritePublicMediaResponse) SetHeaders(v map[string]*string) *CancelFavoritePublicMediaResponse {
	s.Headers = v
	return s
}

func (s *CancelFavoritePublicMediaResponse) SetStatusCode(v int32) *CancelFavoritePublicMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelFavoritePublicMediaResponse) SetBody(v *CancelFavoritePublicMediaResponseBody) *CancelFavoritePublicMediaResponse {
	s.Body = v
	return s
}

type CancelUrlUploadJobsRequest struct {
	JobIds     *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	UploadUrls *string `json:"UploadUrls,omitempty" xml:"UploadUrls,omitempty"`
}

func (s CancelUrlUploadJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelUrlUploadJobsRequest) GoString() string {
	return s.String()
}

func (s *CancelUrlUploadJobsRequest) SetJobIds(v string) *CancelUrlUploadJobsRequest {
	s.JobIds = &v
	return s
}

func (s *CancelUrlUploadJobsRequest) SetUploadUrls(v string) *CancelUrlUploadJobsRequest {
	s.UploadUrls = &v
	return s
}

type CancelUrlUploadJobsResponseBody struct {
	CanceledJobs []*string `json:"CanceledJobs,omitempty" xml:"CanceledJobs,omitempty" type:"Repeated"`
	NonExists    []*string `json:"NonExists,omitempty" xml:"NonExists,omitempty" type:"Repeated"`
	RequestId    *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CancelUrlUploadJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelUrlUploadJobsResponseBody) GoString() string {
	return s.String()
}

func (s *CancelUrlUploadJobsResponseBody) SetCanceledJobs(v []*string) *CancelUrlUploadJobsResponseBody {
	s.CanceledJobs = v
	return s
}

func (s *CancelUrlUploadJobsResponseBody) SetNonExists(v []*string) *CancelUrlUploadJobsResponseBody {
	s.NonExists = v
	return s
}

func (s *CancelUrlUploadJobsResponseBody) SetRequestId(v string) *CancelUrlUploadJobsResponseBody {
	s.RequestId = &v
	return s
}

type CancelUrlUploadJobsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CancelUrlUploadJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelUrlUploadJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelUrlUploadJobsResponse) GoString() string {
	return s.String()
}

func (s *CancelUrlUploadJobsResponse) SetHeaders(v map[string]*string) *CancelUrlUploadJobsResponse {
	s.Headers = v
	return s
}

func (s *CancelUrlUploadJobsResponse) SetStatusCode(v int32) *CancelUrlUploadJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *CancelUrlUploadJobsResponse) SetBody(v *CancelUrlUploadJobsResponseBody) *CancelUrlUploadJobsResponse {
	s.Body = v
	return s
}

type CreateAuditRequest struct {
	AppId        *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	AuditContent *string `json:"AuditContent,omitempty" xml:"AuditContent,omitempty"`
}

func (s CreateAuditRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditRequest) GoString() string {
	return s.String()
}

func (s *CreateAuditRequest) SetAppId(v string) *CreateAuditRequest {
	s.AppId = &v
	return s
}

func (s *CreateAuditRequest) SetAuditContent(v string) *CreateAuditRequest {
	s.AuditContent = &v
	return s
}

type CreateAuditResponseBody struct {
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateAuditResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAuditResponseBody) SetRequestId(v string) *CreateAuditResponseBody {
	s.RequestId = &v
	return s
}

type CreateAuditResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateAuditResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAuditResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAuditResponse) GoString() string {
	return s.String()
}

func (s *CreateAuditResponse) SetHeaders(v map[string]*string) *CreateAuditResponse {
	s.Headers = v
	return s
}

func (s *CreateAuditResponse) SetStatusCode(v int32) *CreateAuditResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAuditResponse) SetBody(v *CreateAuditResponseBody) *CreateAuditResponse {
	s.Body = v
	return s
}

type CreateCustomTemplateRequest struct {
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 模板子类型。
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板参数
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// 模板类型。
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateRequest) SetName(v string) *CreateCustomTemplateRequest {
	s.Name = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetSubtype(v int32) *CreateCustomTemplateRequest {
	s.Subtype = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetTemplateConfig(v string) *CreateCustomTemplateRequest {
	s.TemplateConfig = &v
	return s
}

func (s *CreateCustomTemplateRequest) SetType(v int32) *CreateCustomTemplateRequest {
	s.Type = &v
	return s
}

type CreateCustomTemplateResponseBody struct {
	// 模板信息
	CustomTemplate *CreateCustomTemplateResponseBodyCustomTemplate `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty" type:"Struct"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponseBody) SetCustomTemplate(v *CreateCustomTemplateResponseBodyCustomTemplate) *CreateCustomTemplateResponseBody {
	s.CustomTemplate = v
	return s
}

func (s *CreateCustomTemplateResponseBody) SetRequestId(v string) *CreateCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateCustomTemplateResponseBodyCustomTemplate struct {
	// 模板创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 是否默认模板
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// 模板修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板子类型名称
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板参数
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板名称
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// 模板类型ID
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// 模板类型名称
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s CreateCustomTemplateResponseBodyCustomTemplate) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponseBodyCustomTemplate) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetCreateTime(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.CreateTime = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetIsDefault(v bool) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.IsDefault = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetModifiedTime(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetStatus(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Status = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetSubtype(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Subtype = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateConfig(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateId(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateId = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTemplateName(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TemplateName = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetType(v int32) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.Type = &v
	return s
}

func (s *CreateCustomTemplateResponseBodyCustomTemplate) SetTypeName(v string) *CreateCustomTemplateResponseBodyCustomTemplate {
	s.TypeName = &v
	return s
}

type CreateCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateCustomTemplateResponse) SetHeaders(v map[string]*string) *CreateCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateCustomTemplateResponse) SetStatusCode(v int32) *CreateCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCustomTemplateResponse) SetBody(v *CreateCustomTemplateResponseBody) *CreateCustomTemplateResponse {
	s.Body = v
	return s
}

type CreateEditingProjectRequest struct {
	// 工程业务配置。如果是直播剪辑工程必填OutputMediaConfig.StorageLocation,   Path 不填默认合成的直播片段存储在根路径下 OutputMediaTarget 不填默认oss-object，可以填vod-media 表示存储到vod  OutputMediaTarget 为vod-media 时，Path不生效。
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// 模板素材参数
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// 云剪辑工程封面
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 云剪辑工程描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 工程关联素材，多个素材以逗号（,）分隔；每种类型最多支持10个素材ID
	MaterialMaps *string `json:"MaterialMaps,omitempty" xml:"MaterialMaps,omitempty"`
	// 剪辑工程类型，EditingProject: 普通剪辑工程；LiveEditingProject: 直播剪辑工程
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 云剪辑工程时间线，Json格式
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// 云剪辑工程标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectRequest) SetBusinessConfig(v string) *CreateEditingProjectRequest {
	s.BusinessConfig = &v
	return s
}

func (s *CreateEditingProjectRequest) SetClipsParam(v string) *CreateEditingProjectRequest {
	s.ClipsParam = &v
	return s
}

func (s *CreateEditingProjectRequest) SetCoverURL(v string) *CreateEditingProjectRequest {
	s.CoverURL = &v
	return s
}

func (s *CreateEditingProjectRequest) SetDescription(v string) *CreateEditingProjectRequest {
	s.Description = &v
	return s
}

func (s *CreateEditingProjectRequest) SetMaterialMaps(v string) *CreateEditingProjectRequest {
	s.MaterialMaps = &v
	return s
}

func (s *CreateEditingProjectRequest) SetProjectType(v string) *CreateEditingProjectRequest {
	s.ProjectType = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTemplateId(v string) *CreateEditingProjectRequest {
	s.TemplateId = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTimeline(v string) *CreateEditingProjectRequest {
	s.Timeline = &v
	return s
}

func (s *CreateEditingProjectRequest) SetTitle(v string) *CreateEditingProjectRequest {
	s.Title = &v
	return s
}

type CreateEditingProjectResponseBody struct {
	Project *CreateEditingProjectResponseBodyProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Struct"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponseBody) SetProject(v *CreateEditingProjectResponseBodyProject) *CreateEditingProjectResponseBody {
	s.Project = v
	return s
}

func (s *CreateEditingProjectResponseBody) SetRequestId(v string) *CreateEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type CreateEditingProjectResponseBodyProject struct {
	// 工程业务配置
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	// 业务状态，业务状态 /** 预约中 **/ RESERVING(0, "Reserving"), /** 预约取消 **/ RESERVATION_CANCELED(1, "ReservationCanceled"), /** 直播中 **/ BROADCASTING(3, "BroadCasting"), /** 加载失败 **/ LOADING_FAILED(4, "LoadingFailed"), /** 直播结束 **/ LIVE_FINISHED(5, "LiveFinished");
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// 模板素材参数
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// 云剪辑工程封面。
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 云剪辑工程创建方式  -OpenAPI  -AliyunConsole  -WebSDK -LiveEditingOpenAPI -LiveEditingConsole
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// 云剪辑工程创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 云剪辑工程描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 云剪辑工程时长
	Duration *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 云剪辑工程创建方式  -OpenAPI  -AliyunConsole  -WebSDK -LiveEditingOpenAPI -LiveEditingConsole
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// 云剪辑工程编辑时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 云剪辑工程ID
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// 剪辑工程类型，EditingProject: 普通剪辑工程；LiveEditingProject: 直播剪辑工程
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// 云剪辑工程状态。  所有云剪辑工程状态列表：  -1:Draft  -2:Editing  -3:Producing  -4:Produced  -5:ProduceFailed  -7:Deleted
	Status *int64 `json:"Status,omitempty" xml:"Status,omitempty"`
	// 云剪辑状态名称，对应状态列表中状态名称。
	StatusName *string `json:"StatusName,omitempty" xml:"StatusName,omitempty"`
	// 模板Id
	TemplateId   *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// 云剪辑工程时间线，Json格式
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// 云剪辑工程标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateEditingProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponseBodyProject) SetBusinessConfig(v string) *CreateEditingProjectResponseBodyProject {
	s.BusinessConfig = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetBusinessStatus(v string) *CreateEditingProjectResponseBodyProject {
	s.BusinessStatus = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetClipsParam(v string) *CreateEditingProjectResponseBodyProject {
	s.ClipsParam = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCoverURL(v string) *CreateEditingProjectResponseBodyProject {
	s.CoverURL = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCreateSource(v string) *CreateEditingProjectResponseBodyProject {
	s.CreateSource = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetCreateTime(v string) *CreateEditingProjectResponseBodyProject {
	s.CreateTime = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetDescription(v string) *CreateEditingProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetDuration(v float32) *CreateEditingProjectResponseBodyProject {
	s.Duration = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetModifiedSource(v string) *CreateEditingProjectResponseBodyProject {
	s.ModifiedSource = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetModifiedTime(v string) *CreateEditingProjectResponseBodyProject {
	s.ModifiedTime = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetProjectId(v string) *CreateEditingProjectResponseBodyProject {
	s.ProjectId = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetProjectType(v string) *CreateEditingProjectResponseBodyProject {
	s.ProjectType = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetStatus(v int64) *CreateEditingProjectResponseBodyProject {
	s.Status = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetStatusName(v string) *CreateEditingProjectResponseBodyProject {
	s.StatusName = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTemplateId(v string) *CreateEditingProjectResponseBodyProject {
	s.TemplateId = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTemplateType(v string) *CreateEditingProjectResponseBodyProject {
	s.TemplateType = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTimeline(v string) *CreateEditingProjectResponseBodyProject {
	s.Timeline = &v
	return s
}

func (s *CreateEditingProjectResponseBodyProject) SetTitle(v string) *CreateEditingProjectResponseBodyProject {
	s.Title = &v
	return s
}

type CreateEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateEditingProjectResponse) SetHeaders(v map[string]*string) *CreateEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateEditingProjectResponse) SetStatusCode(v int32) *CreateEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEditingProjectResponse) SetBody(v *CreateEditingProjectResponseBody) *CreateEditingProjectResponse {
	s.Body = v
	return s
}

type CreateLiveRecordTemplateRequest struct {
	// 资源名称
	Name []byte `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	RecordFormat []*CreateLiveRecordTemplateRequestRecordFormat `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty" type:"Repeated"`
}

func (s CreateLiveRecordTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateRequest) SetName(v []byte) *CreateLiveRecordTemplateRequest {
	s.Name = v
	return s
}

func (s *CreateLiveRecordTemplateRequest) SetRecordFormat(v []*CreateLiveRecordTemplateRequestRecordFormat) *CreateLiveRecordTemplateRequest {
	s.RecordFormat = v
	return s
}

type CreateLiveRecordTemplateRequestRecordFormat struct {
	CycleDuration *int32 `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// 格式
	Format []byte `json:"Format,omitempty" xml:"Format,omitempty"`
	// Oss对象名
	OssObjectPrefix []byte `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// 切片时长
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// 切片Oss对象名
	SliceOssObjectPrefix []byte `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s CreateLiveRecordTemplateRequestRecordFormat) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateRequestRecordFormat) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetCycleDuration(v int32) *CreateLiveRecordTemplateRequestRecordFormat {
	s.CycleDuration = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetFormat(v []byte) *CreateLiveRecordTemplateRequestRecordFormat {
	s.Format = v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetOssObjectPrefix(v []byte) *CreateLiveRecordTemplateRequestRecordFormat {
	s.OssObjectPrefix = v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetSliceDuration(v int32) *CreateLiveRecordTemplateRequestRecordFormat {
	s.SliceDuration = &v
	return s
}

func (s *CreateLiveRecordTemplateRequestRecordFormat) SetSliceOssObjectPrefix(v []byte) *CreateLiveRecordTemplateRequestRecordFormat {
	s.SliceOssObjectPrefix = v
	return s
}

type CreateLiveRecordTemplateShrinkRequest struct {
	// 资源名称
	Name []byte `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	RecordFormatShrink *string `json:"RecordFormat,omitempty" xml:"RecordFormat,omitempty"`
}

func (s CreateLiveRecordTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateShrinkRequest) SetName(v []byte) *CreateLiveRecordTemplateShrinkRequest {
	s.Name = v
	return s
}

func (s *CreateLiveRecordTemplateShrinkRequest) SetRecordFormatShrink(v string) *CreateLiveRecordTemplateShrinkRequest {
	s.RecordFormatShrink = &v
	return s
}

type CreateLiveRecordTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 资源一级ID
	TemplateId []byte `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateLiveRecordTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateResponseBody) SetRequestId(v string) *CreateLiveRecordTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLiveRecordTemplateResponseBody) SetTemplateId(v []byte) *CreateLiveRecordTemplateResponseBody {
	s.TemplateId = v
	return s
}

type CreateLiveRecordTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateLiveRecordTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLiveRecordTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLiveRecordTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateLiveRecordTemplateResponse) SetHeaders(v map[string]*string) *CreateLiveRecordTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateLiveRecordTemplateResponse) SetStatusCode(v int32) *CreateLiveRecordTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateLiveRecordTemplateResponse) SetBody(v *CreateLiveRecordTemplateResponseBody) *CreateLiveRecordTemplateResponse {
	s.Body = v
	return s
}

type CreatePipelineRequest struct {
	// 管道名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 优先级，1-10，默认6。数值越大，优先级越高
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// 管道类型。
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
}

func (s CreatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineRequest) GoString() string {
	return s.String()
}

func (s *CreatePipelineRequest) SetName(v string) *CreatePipelineRequest {
	s.Name = &v
	return s
}

func (s *CreatePipelineRequest) SetPriority(v int32) *CreatePipelineRequest {
	s.Priority = &v
	return s
}

func (s *CreatePipelineRequest) SetSpeed(v string) *CreatePipelineRequest {
	s.Speed = &v
	return s
}

type CreatePipelineResponseBody struct {
	// 管道信息
	Pipeline *CreatePipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponseBody) SetPipeline(v *CreatePipelineResponseBodyPipeline) *CreatePipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *CreatePipelineResponseBody) SetRequestId(v string) *CreatePipelineResponseBody {
	s.RequestId = &v
	return s
}

type CreatePipelineResponseBodyPipeline struct {
	// 模板创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 模板修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 管道名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 管道Id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 管道优先级
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// 管道类型
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// 管道状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s CreatePipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponseBodyPipeline) SetCreateTime(v string) *CreatePipelineResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetModifiedTime(v string) *CreatePipelineResponseBodyPipeline {
	s.ModifiedTime = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetName(v string) *CreatePipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetPipelineId(v string) *CreatePipelineResponseBodyPipeline {
	s.PipelineId = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetPriority(v int32) *CreatePipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetSpeed(v string) *CreatePipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *CreatePipelineResponseBodyPipeline) SetStatus(v string) *CreatePipelineResponseBodyPipeline {
	s.Status = &v
	return s
}

type CreatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePipelineResponse) GoString() string {
	return s.String()
}

func (s *CreatePipelineResponse) SetHeaders(v map[string]*string) *CreatePipelineResponse {
	s.Headers = v
	return s
}

func (s *CreatePipelineResponse) SetStatusCode(v int32) *CreatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePipelineResponse) SetBody(v *CreatePipelineResponseBody) *CreatePipelineResponse {
	s.Body = v
	return s
}

type CreateUploadMediaRequest struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EntityId           *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	FileInfo           *string `json:"FileInfo,omitempty" xml:"FileInfo,omitempty"`
	MediaMetaData      *string `json:"MediaMetaData,omitempty" xml:"MediaMetaData,omitempty"`
	PostProcessConfig  *string `json:"PostProcessConfig,omitempty" xml:"PostProcessConfig,omitempty"`
	UploadTargetConfig *string `json:"UploadTargetConfig,omitempty" xml:"UploadTargetConfig,omitempty"`
	UserData           *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s CreateUploadMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaRequest) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaRequest) SetAppId(v string) *CreateUploadMediaRequest {
	s.AppId = &v
	return s
}

func (s *CreateUploadMediaRequest) SetEntityId(v string) *CreateUploadMediaRequest {
	s.EntityId = &v
	return s
}

func (s *CreateUploadMediaRequest) SetFileInfo(v string) *CreateUploadMediaRequest {
	s.FileInfo = &v
	return s
}

func (s *CreateUploadMediaRequest) SetMediaMetaData(v string) *CreateUploadMediaRequest {
	s.MediaMetaData = &v
	return s
}

func (s *CreateUploadMediaRequest) SetPostProcessConfig(v string) *CreateUploadMediaRequest {
	s.PostProcessConfig = &v
	return s
}

func (s *CreateUploadMediaRequest) SetUploadTargetConfig(v string) *CreateUploadMediaRequest {
	s.UploadTargetConfig = &v
	return s
}

func (s *CreateUploadMediaRequest) SetUserData(v string) *CreateUploadMediaRequest {
	s.UserData = &v
	return s
}

type CreateUploadMediaResponseBody struct {
	FileURL  *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	MediaId  *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// RequestId
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	UploadAuth    *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s CreateUploadMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaResponseBody) SetFileURL(v string) *CreateUploadMediaResponseBody {
	s.FileURL = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetMediaId(v string) *CreateUploadMediaResponseBody {
	s.MediaId = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetMediaURL(v string) *CreateUploadMediaResponseBody {
	s.MediaURL = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetRequestId(v string) *CreateUploadMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetUploadAddress(v string) *CreateUploadMediaResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *CreateUploadMediaResponseBody) SetUploadAuth(v string) *CreateUploadMediaResponseBody {
	s.UploadAuth = &v
	return s
}

type CreateUploadMediaResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateUploadMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUploadMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadMediaResponse) GoString() string {
	return s.String()
}

func (s *CreateUploadMediaResponse) SetHeaders(v map[string]*string) *CreateUploadMediaResponse {
	s.Headers = v
	return s
}

func (s *CreateUploadMediaResponse) SetStatusCode(v int32) *CreateUploadMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUploadMediaResponse) SetBody(v *CreateUploadMediaResponseBody) *CreateUploadMediaResponse {
	s.Body = v
	return s
}

type CreateUploadStreamRequest struct {
	Definition    *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	FileExtension *string `json:"FileExtension,omitempty" xml:"FileExtension,omitempty"`
	HDRType       *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	MediaId       *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	UserData      *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s CreateUploadStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamRequest) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamRequest) SetDefinition(v string) *CreateUploadStreamRequest {
	s.Definition = &v
	return s
}

func (s *CreateUploadStreamRequest) SetFileExtension(v string) *CreateUploadStreamRequest {
	s.FileExtension = &v
	return s
}

func (s *CreateUploadStreamRequest) SetHDRType(v string) *CreateUploadStreamRequest {
	s.HDRType = &v
	return s
}

func (s *CreateUploadStreamRequest) SetMediaId(v string) *CreateUploadStreamRequest {
	s.MediaId = &v
	return s
}

func (s *CreateUploadStreamRequest) SetUserData(v string) *CreateUploadStreamRequest {
	s.UserData = &v
	return s
}

type CreateUploadStreamResponseBody struct {
	FileURL       *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	MediaId       *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	UploadAuth    *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s CreateUploadStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamResponseBody) SetFileURL(v string) *CreateUploadStreamResponseBody {
	s.FileURL = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetMediaId(v string) *CreateUploadStreamResponseBody {
	s.MediaId = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetRequestId(v string) *CreateUploadStreamResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetUploadAddress(v string) *CreateUploadStreamResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *CreateUploadStreamResponseBody) SetUploadAuth(v string) *CreateUploadStreamResponseBody {
	s.UploadAuth = &v
	return s
}

type CreateUploadStreamResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateUploadStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUploadStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUploadStreamResponse) GoString() string {
	return s.String()
}

func (s *CreateUploadStreamResponse) SetHeaders(v map[string]*string) *CreateUploadStreamResponse {
	s.Headers = v
	return s
}

func (s *CreateUploadStreamResponse) SetStatusCode(v int32) *CreateUploadStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateUploadStreamResponse) SetBody(v *CreateUploadStreamResponseBody) *CreateUploadStreamResponse {
	s.Body = v
	return s
}

type DeleteCategoryRequest struct {
	CateId *int64 `json:"CateId,omitempty" xml:"CateId,omitempty"`
}

func (s DeleteCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteCategoryRequest) SetCateId(v int64) *DeleteCategoryRequest {
	s.CateId = &v
	return s
}

type DeleteCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponseBody) SetRequestId(v string) *DeleteCategoryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCategoryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponse) SetHeaders(v map[string]*string) *DeleteCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteCategoryResponse) SetStatusCode(v int32) *DeleteCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCategoryResponse) SetBody(v *DeleteCategoryResponseBody) *DeleteCategoryResponse {
	s.Body = v
	return s
}

type DeleteCustomTemplateRequest struct {
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateRequest) SetTemplateId(v string) *DeleteCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteCustomTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 是否成功
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponseBody) SetRequestId(v string) *DeleteCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCustomTemplateResponseBody) SetSuccess(v bool) *DeleteCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type DeleteCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteCustomTemplateResponse) SetHeaders(v map[string]*string) *DeleteCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteCustomTemplateResponse) SetStatusCode(v int32) *DeleteCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCustomTemplateResponse) SetBody(v *DeleteCustomTemplateResponseBody) *DeleteCustomTemplateResponse {
	s.Body = v
	return s
}

type DeleteEditingProjectMaterialsRequest struct {
	// 素材ID
	MaterialIds *string `json:"MaterialIds,omitempty" xml:"MaterialIds,omitempty"`
	// 素材类型
	MaterialType *string `json:"MaterialType,omitempty" xml:"MaterialType,omitempty"`
	// 云剪辑工程ID
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsRequest) SetMaterialIds(v string) *DeleteEditingProjectMaterialsRequest {
	s.MaterialIds = &v
	return s
}

func (s *DeleteEditingProjectMaterialsRequest) SetMaterialType(v string) *DeleteEditingProjectMaterialsRequest {
	s.MaterialType = &v
	return s
}

func (s *DeleteEditingProjectMaterialsRequest) SetProjectId(v string) *DeleteEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type DeleteEditingProjectMaterialsResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsResponseBody) SetRequestId(v string) *DeleteEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *DeleteEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *DeleteEditingProjectMaterialsResponse) SetStatusCode(v int32) *DeleteEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEditingProjectMaterialsResponse) SetBody(v *DeleteEditingProjectMaterialsResponseBody) *DeleteEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type DeleteEditingProjectsRequest struct {
	// 云剪辑工程ID。支持多个云剪辑工程，以逗号分隔。
	ProjectIds *string `json:"ProjectIds,omitempty" xml:"ProjectIds,omitempty"`
}

func (s DeleteEditingProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsRequest) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsRequest) SetProjectIds(v string) *DeleteEditingProjectsRequest {
	s.ProjectIds = &v
	return s
}

type DeleteEditingProjectsResponseBody struct {
	IgnoredList *string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteEditingProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsResponseBody) SetIgnoredList(v string) *DeleteEditingProjectsResponseBody {
	s.IgnoredList = &v
	return s
}

func (s *DeleteEditingProjectsResponseBody) SetRequestId(v string) *DeleteEditingProjectsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteEditingProjectsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteEditingProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteEditingProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteEditingProjectsResponse) GoString() string {
	return s.String()
}

func (s *DeleteEditingProjectsResponse) SetHeaders(v map[string]*string) *DeleteEditingProjectsResponse {
	s.Headers = v
	return s
}

func (s *DeleteEditingProjectsResponse) SetStatusCode(v int32) *DeleteEditingProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteEditingProjectsResponse) SetBody(v *DeleteEditingProjectsResponseBody) *DeleteEditingProjectsResponse {
	s.Body = v
	return s
}

type DeleteLiveTranscodeJobRequest struct {
	// 模板Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobRequest) SetJobId(v string) *DeleteLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

type DeleteLiveTranscodeJobResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobResponseBody) SetRequestId(v string) *DeleteLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *DeleteLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveTranscodeJobResponse) SetStatusCode(v int32) *DeleteLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveTranscodeJobResponse) SetBody(v *DeleteLiveTranscodeJobResponseBody) *DeleteLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type DeleteLiveTranscodeTemplateRequest struct {
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateRequest) SetTemplateId(v string) *DeleteLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteLiveTranscodeTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateResponseBody) SetRequestId(v string) *DeleteLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *DeleteLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteLiveTranscodeTemplateResponse) SetStatusCode(v int32) *DeleteLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteLiveTranscodeTemplateResponse) SetBody(v *DeleteLiveTranscodeTemplateResponseBody) *DeleteLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type DeleteMediaInfosRequest struct {
	// 待注册的媒资在相应系统中的地址
	InputURLs *string `json:"InputURLs,omitempty" xml:"InputURLs,omitempty"`
	// ICE 媒资ID
	MediaIds *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
}

func (s DeleteMediaInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosRequest) SetInputURLs(v string) *DeleteMediaInfosRequest {
	s.InputURLs = &v
	return s
}

func (s *DeleteMediaInfosRequest) SetMediaIds(v string) *DeleteMediaInfosRequest {
	s.MediaIds = &v
	return s
}

type DeleteMediaInfosResponseBody struct {
	// 出现获取错误的ID或inputUr
	IgnoredList []*string `json:"IgnoredList,omitempty" xml:"IgnoredList,omitempty" type:"Repeated"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosResponseBody) SetIgnoredList(v []*string) *DeleteMediaInfosResponseBody {
	s.IgnoredList = v
	return s
}

func (s *DeleteMediaInfosResponseBody) SetRequestId(v string) *DeleteMediaInfosResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaInfosResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMediaInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMediaInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaInfosResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaInfosResponse) SetHeaders(v map[string]*string) *DeleteMediaInfosResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaInfosResponse) SetStatusCode(v int32) *DeleteMediaInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaInfosResponse) SetBody(v *DeleteMediaInfosResponseBody) *DeleteMediaInfosResponse {
	s.Body = v
	return s
}

type DeleteMediaProducingJobsRequest struct {
	JobIds *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
}

func (s DeleteMediaProducingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaProducingJobsRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaProducingJobsRequest) SetJobIds(v string) *DeleteMediaProducingJobsRequest {
	s.JobIds = &v
	return s
}

type DeleteMediaProducingJobsResponseBody struct {
	IgnoreList *string `json:"IgnoreList,omitempty" xml:"IgnoreList,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaProducingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaProducingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaProducingJobsResponseBody) SetIgnoreList(v string) *DeleteMediaProducingJobsResponseBody {
	s.IgnoreList = &v
	return s
}

func (s *DeleteMediaProducingJobsResponseBody) SetRequestId(v string) *DeleteMediaProducingJobsResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaProducingJobsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteMediaProducingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMediaProducingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaProducingJobsResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaProducingJobsResponse) SetHeaders(v map[string]*string) *DeleteMediaProducingJobsResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaProducingJobsResponse) SetStatusCode(v int32) *DeleteMediaProducingJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteMediaProducingJobsResponse) SetBody(v *DeleteMediaProducingJobsResponseBody) *DeleteMediaProducingJobsResponse {
	s.Body = v
	return s
}

type DeletePipelineRequest struct {
	// 管道ID
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s DeletePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRequest) GoString() string {
	return s.String()
}

func (s *DeletePipelineRequest) SetPipelineId(v string) *DeletePipelineRequest {
	s.PipelineId = &v
	return s
}

type DeletePipelineResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 是否成功
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeletePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponseBody) SetRequestId(v string) *DeletePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePipelineResponseBody) SetSuccess(v bool) *DeletePipelineResponseBody {
	s.Success = &v
	return s
}

type DeletePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeletePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponse) SetHeaders(v map[string]*string) *DeletePipelineResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineResponse) SetStatusCode(v int32) *DeletePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePipelineResponse) SetBody(v *DeletePipelineResponseBody) *DeletePipelineResponse {
	s.Body = v
	return s
}

type DeletePlayInfoRequest struct {
	FileURLs *string `json:"FileURLs,omitempty" xml:"FileURLs,omitempty"`
	MediaId  *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s DeletePlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoRequest) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoRequest) SetFileURLs(v string) *DeletePlayInfoRequest {
	s.FileURLs = &v
	return s
}

func (s *DeletePlayInfoRequest) SetMediaId(v string) *DeletePlayInfoRequest {
	s.MediaId = &v
	return s
}

type DeletePlayInfoResponseBody struct {
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeletePlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoResponseBody) SetRequestId(v string) *DeletePlayInfoResponseBody {
	s.RequestId = &v
	return s
}

type DeletePlayInfoResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeletePlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePlayInfoResponse) GoString() string {
	return s.String()
}

func (s *DeletePlayInfoResponse) SetHeaders(v map[string]*string) *DeletePlayInfoResponse {
	s.Headers = v
	return s
}

func (s *DeletePlayInfoResponse) SetStatusCode(v int32) *DeletePlayInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DeletePlayInfoResponse) SetBody(v *DeletePlayInfoResponseBody) *DeletePlayInfoResponse {
	s.Body = v
	return s
}

type DeleteSmartJobRequest struct {
	// 任务id，多个任务id用英文逗号分割
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DeleteSmartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobRequest) SetJobId(v string) *DeleteSmartJobRequest {
	s.JobId = &v
	return s
}

type DeleteSmartJobResponseBody struct {
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSmartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobResponseBody) SetRequestId(v string) *DeleteSmartJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSmartJobResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteSmartJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSmartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmartJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmartJobResponse) SetHeaders(v map[string]*string) *DeleteSmartJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmartJobResponse) SetStatusCode(v int32) *DeleteSmartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteSmartJobResponse) SetBody(v *DeleteSmartJobResponseBody) *DeleteSmartJobResponse {
	s.Body = v
	return s
}

type DeleteTemplateRequest struct {
	// 模板id，多个id用英文逗号隔开
	TemplateIds *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
}

func (s DeleteTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteTemplateRequest) SetTemplateIds(v string) *DeleteTemplateRequest {
	s.TemplateIds = &v
	return s
}

type DeleteTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponseBody) SetRequestId(v string) *DeleteTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponse) SetHeaders(v map[string]*string) *DeleteTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteTemplateResponse) SetStatusCode(v int32) *DeleteTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTemplateResponse) SetBody(v *DeleteTemplateResponseBody) *DeleteTemplateResponse {
	s.Body = v
	return s
}

type DescribeBizUserTypeRequest struct {
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s DescribeBizUserTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBizUserTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeBizUserTypeRequest) SetRegion(v string) *DescribeBizUserTypeRequest {
	s.Region = &v
	return s
}

type DescribeBizUserTypeResponseBody struct {
	Data []*DescribeBizUserTypeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeBizUserTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBizUserTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBizUserTypeResponseBody) SetData(v []*DescribeBizUserTypeResponseBodyData) *DescribeBizUserTypeResponseBody {
	s.Data = v
	return s
}

func (s *DescribeBizUserTypeResponseBody) SetRequestId(v string) *DescribeBizUserTypeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeBizUserTypeResponseBodyData struct {
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
}

func (s DescribeBizUserTypeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeBizUserTypeResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeBizUserTypeResponseBodyData) SetProfile(v string) *DescribeBizUserTypeResponseBodyData {
	s.Profile = &v
	return s
}

type DescribeBizUserTypeResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeBizUserTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeBizUserTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBizUserTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeBizUserTypeResponse) SetHeaders(v map[string]*string) *DescribeBizUserTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeBizUserTypeResponse) SetStatusCode(v int32) *DescribeBizUserTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBizUserTypeResponse) SetBody(v *DescribeBizUserTypeResponseBody) *DescribeBizUserTypeResponse {
	s.Body = v
	return s
}

type DescribeFilterConfigsRequest struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFilterConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFilterConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFilterConfigsRequest) SetType(v string) *DescribeFilterConfigsRequest {
	s.Type = &v
	return s
}

type DescribeFilterConfigsResponseBody struct {
	FilterConfigs []*DescribeFilterConfigsResponseBodyFilterConfigs `json:"FilterConfigs,omitempty" xml:"FilterConfigs,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFilterConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFilterConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFilterConfigsResponseBody) SetFilterConfigs(v []*DescribeFilterConfigsResponseBodyFilterConfigs) *DescribeFilterConfigsResponseBody {
	s.FilterConfigs = v
	return s
}

func (s *DescribeFilterConfigsResponseBody) SetRequestId(v string) *DescribeFilterConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFilterConfigsResponseBodyFilterConfigs struct {
	FilterName  *string `json:"FilterName,omitempty" xml:"FilterName,omitempty"`
	ItemConfigs *string `json:"ItemConfigs,omitempty" xml:"ItemConfigs,omitempty"`
	Type        *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFilterConfigsResponseBodyFilterConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeFilterConfigsResponseBodyFilterConfigs) GoString() string {
	return s.String()
}

func (s *DescribeFilterConfigsResponseBodyFilterConfigs) SetFilterName(v string) *DescribeFilterConfigsResponseBodyFilterConfigs {
	s.FilterName = &v
	return s
}

func (s *DescribeFilterConfigsResponseBodyFilterConfigs) SetItemConfigs(v string) *DescribeFilterConfigsResponseBodyFilterConfigs {
	s.ItemConfigs = &v
	return s
}

func (s *DescribeFilterConfigsResponseBodyFilterConfigs) SetType(v string) *DescribeFilterConfigsResponseBodyFilterConfigs {
	s.Type = &v
	return s
}

type DescribeFilterConfigsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeFilterConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFilterConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFilterConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFilterConfigsResponse) SetHeaders(v map[string]*string) *DescribeFilterConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFilterConfigsResponse) SetStatusCode(v int32) *DescribeFilterConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFilterConfigsResponse) SetBody(v *DescribeFilterConfigsResponseBody) *DescribeFilterConfigsResponse {
	s.Body = v
	return s
}

type DescribeLivePubExperienceMetricDataRequest struct {
	BeginTs      *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Domain       *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EndTs        *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	MetricType   *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Os           *string `json:"Os,omitempty" xml:"Os,omitempty"`
	PubProtocol  *string `json:"PubProtocol,omitempty" xml:"PubProtocol,omitempty"`
	TerminalType *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribeLivePubExperienceMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubExperienceMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLivePubExperienceMetricDataRequest) SetBeginTs(v string) *DescribeLivePubExperienceMetricDataRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataRequest) SetDomain(v string) *DescribeLivePubExperienceMetricDataRequest {
	s.Domain = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataRequest) SetEndTs(v string) *DescribeLivePubExperienceMetricDataRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataRequest) SetMetricType(v string) *DescribeLivePubExperienceMetricDataRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataRequest) SetOs(v string) *DescribeLivePubExperienceMetricDataRequest {
	s.Os = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataRequest) SetPubProtocol(v string) *DescribeLivePubExperienceMetricDataRequest {
	s.PubProtocol = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataRequest) SetTerminalType(v string) *DescribeLivePubExperienceMetricDataRequest {
	s.TerminalType = &v
	return s
}

type DescribeLivePubExperienceMetricDataResponseBody struct {
	MetricList []*DescribeLivePubExperienceMetricDataResponseBodyMetricList `json:"MetricList,omitempty" xml:"MetricList,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLivePubExperienceMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubExperienceMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLivePubExperienceMetricDataResponseBody) SetMetricList(v []*DescribeLivePubExperienceMetricDataResponseBodyMetricList) *DescribeLivePubExperienceMetricDataResponseBody {
	s.MetricList = v
	return s
}

func (s *DescribeLivePubExperienceMetricDataResponseBody) SetRequestId(v string) *DescribeLivePubExperienceMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLivePubExperienceMetricDataResponseBodyMetricList struct {
	AvgScore *float32 `json:"AvgScore,omitempty" xml:"AvgScore,omitempty"`
	MaxScore *float32 `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
	MinScore *float32 `json:"MinScore,omitempty" xml:"MinScore,omitempty"`
}

func (s DescribeLivePubExperienceMetricDataResponseBodyMetricList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubExperienceMetricDataResponseBodyMetricList) GoString() string {
	return s.String()
}

func (s *DescribeLivePubExperienceMetricDataResponseBodyMetricList) SetAvgScore(v float32) *DescribeLivePubExperienceMetricDataResponseBodyMetricList {
	s.AvgScore = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataResponseBodyMetricList) SetMaxScore(v float32) *DescribeLivePubExperienceMetricDataResponseBodyMetricList {
	s.MaxScore = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataResponseBodyMetricList) SetMinScore(v float32) *DescribeLivePubExperienceMetricDataResponseBodyMetricList {
	s.MinScore = &v
	return s
}

type DescribeLivePubExperienceMetricDataResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLivePubExperienceMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLivePubExperienceMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubExperienceMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLivePubExperienceMetricDataResponse) SetHeaders(v map[string]*string) *DescribeLivePubExperienceMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLivePubExperienceMetricDataResponse) SetStatusCode(v int32) *DescribeLivePubExperienceMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLivePubExperienceMetricDataResponse) SetBody(v *DescribeLivePubExperienceMetricDataResponseBody) *DescribeLivePubExperienceMetricDataResponse {
	s.Body = v
	return s
}

type DescribeLivePubListRequest struct {
	BeginTs      *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Domain       *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EndTs        *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	MetricType   *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Os           *string `json:"Os,omitempty" xml:"Os,omitempty"`
	PageNum      *int32  `json:"PageNum,omitempty" xml:"PageNum,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PubProtocol  *string `json:"PubProtocol,omitempty" xml:"PubProtocol,omitempty"`
	TerminalType *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribeLivePubListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLivePubListRequest) SetBeginTs(v string) *DescribeLivePubListRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribeLivePubListRequest) SetDomain(v string) *DescribeLivePubListRequest {
	s.Domain = &v
	return s
}

func (s *DescribeLivePubListRequest) SetEndTs(v string) *DescribeLivePubListRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeLivePubListRequest) SetMetricType(v string) *DescribeLivePubListRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeLivePubListRequest) SetOs(v string) *DescribeLivePubListRequest {
	s.Os = &v
	return s
}

func (s *DescribeLivePubListRequest) SetPageNum(v int32) *DescribeLivePubListRequest {
	s.PageNum = &v
	return s
}

func (s *DescribeLivePubListRequest) SetPageSize(v int32) *DescribeLivePubListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLivePubListRequest) SetPubProtocol(v string) *DescribeLivePubListRequest {
	s.PubProtocol = &v
	return s
}

func (s *DescribeLivePubListRequest) SetTerminalType(v string) *DescribeLivePubListRequest {
	s.TerminalType = &v
	return s
}

type DescribeLivePubListResponseBody struct {
	PageNo      *int64                                        `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize    *int64                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PubInfoList []*DescribeLivePubListResponseBodyPubInfoList `json:"PubInfoList,omitempty" xml:"PubInfoList,omitempty" type:"Repeated"`
	// Id
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLivePubListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLivePubListResponseBody) SetPageNo(v int64) *DescribeLivePubListResponseBody {
	s.PageNo = &v
	return s
}

func (s *DescribeLivePubListResponseBody) SetPageSize(v int64) *DescribeLivePubListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLivePubListResponseBody) SetPubInfoList(v []*DescribeLivePubListResponseBodyPubInfoList) *DescribeLivePubListResponseBody {
	s.PubInfoList = v
	return s
}

func (s *DescribeLivePubListResponseBody) SetRequestId(v string) *DescribeLivePubListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLivePubListResponseBody) SetTotalCount(v int64) *DescribeLivePubListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLivePubListResponseBodyPubInfoList struct {
	Area              *string `json:"Area,omitempty" xml:"Area,omitempty"`
	CpuUsageRate      *string `json:"CpuUsageRate,omitempty" xml:"CpuUsageRate,omitempty"`
	Domain            *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EndTs             *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	Fps               *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Kbps              *string `json:"Kbps,omitempty" xml:"Kbps,omitempty"`
	PubHeapUpDuration *string `json:"PubHeapUpDuration,omitempty" xml:"PubHeapUpDuration,omitempty"`
	PubMachineType    *string `json:"PubMachineType,omitempty" xml:"PubMachineType,omitempty"`
	SecondPlayRate    *string `json:"SecondPlayRate,omitempty" xml:"SecondPlayRate,omitempty"`
	StartTs           *string `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
	StreamName        *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s DescribeLivePubListResponseBodyPubInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubListResponseBodyPubInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetArea(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.Area = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetCpuUsageRate(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.CpuUsageRate = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetDomain(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.Domain = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetEndTs(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.EndTs = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetFps(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.Fps = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetKbps(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.Kbps = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetPubHeapUpDuration(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.PubHeapUpDuration = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetPubMachineType(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.PubMachineType = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetSecondPlayRate(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.SecondPlayRate = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetStartTs(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.StartTs = &v
	return s
}

func (s *DescribeLivePubListResponseBodyPubInfoList) SetStreamName(v string) *DescribeLivePubListResponseBodyPubInfoList {
	s.StreamName = &v
	return s
}

type DescribeLivePubListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLivePubListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLivePubListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLivePubListResponse) SetHeaders(v map[string]*string) *DescribeLivePubListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLivePubListResponse) SetStatusCode(v int32) *DescribeLivePubListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLivePubListResponse) SetBody(v *DescribeLivePubListResponseBody) *DescribeLivePubListResponse {
	s.Body = v
	return s
}

type DescribeLivePubMetricDataRequest struct {
	BeginTs         *int64  `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Domain          *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	EndTs           *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ExperienceLevel *string `json:"ExperienceLevel,omitempty" xml:"ExperienceLevel,omitempty"`
	MetricType      *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Os              *string `json:"Os,omitempty" xml:"Os,omitempty"`
	PubProtocol     *string `json:"PubProtocol,omitempty" xml:"PubProtocol,omitempty"`
	SdkVersion      *string `json:"SdkVersion,omitempty" xml:"SdkVersion,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	TerminalType    *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribeLivePubMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLivePubMetricDataRequest) SetBeginTs(v int64) *DescribeLivePubMetricDataRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetDomain(v string) *DescribeLivePubMetricDataRequest {
	s.Domain = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetEndTs(v int64) *DescribeLivePubMetricDataRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetExperienceLevel(v string) *DescribeLivePubMetricDataRequest {
	s.ExperienceLevel = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetMetricType(v string) *DescribeLivePubMetricDataRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetOs(v string) *DescribeLivePubMetricDataRequest {
	s.Os = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetPubProtocol(v string) *DescribeLivePubMetricDataRequest {
	s.PubProtocol = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetSdkVersion(v string) *DescribeLivePubMetricDataRequest {
	s.SdkVersion = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetStreamName(v string) *DescribeLivePubMetricDataRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLivePubMetricDataRequest) SetTerminalType(v string) *DescribeLivePubMetricDataRequest {
	s.TerminalType = &v
	return s
}

type DescribeLivePubMetricDataResponseBody struct {
	Nodes []*DescribeLivePubMetricDataResponseBodyNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLivePubMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLivePubMetricDataResponseBody) SetNodes(v []*DescribeLivePubMetricDataResponseBodyNodes) *DescribeLivePubMetricDataResponseBody {
	s.Nodes = v
	return s
}

func (s *DescribeLivePubMetricDataResponseBody) SetRequestId(v string) *DescribeLivePubMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLivePubMetricDataResponseBodyNodes struct {
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Time     *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeLivePubMetricDataResponseBodyNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubMetricDataResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *DescribeLivePubMetricDataResponseBodyNodes) SetDuration(v int64) *DescribeLivePubMetricDataResponseBodyNodes {
	s.Duration = &v
	return s
}

func (s *DescribeLivePubMetricDataResponseBodyNodes) SetTime(v int64) *DescribeLivePubMetricDataResponseBodyNodes {
	s.Time = &v
	return s
}

type DescribeLivePubMetricDataResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLivePubMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLivePubMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLivePubMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLivePubMetricDataResponse) SetHeaders(v map[string]*string) *DescribeLivePubMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLivePubMetricDataResponse) SetStatusCode(v int32) *DescribeLivePubMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLivePubMetricDataResponse) SetBody(v *DescribeLivePubMetricDataResponseBody) *DescribeLivePubMetricDataResponse {
	s.Body = v
	return s
}

type DescribeLiveSubExperienceMetricDataRequest struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTs         *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	EndTs           *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ExperienceLevel *string `json:"ExperienceLevel,omitempty" xml:"ExperienceLevel,omitempty"`
	MetricType      *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Os              *string `json:"Os,omitempty" xml:"Os,omitempty"`
	SubProtocol     *string `json:"SubProtocol,omitempty" xml:"SubProtocol,omitempty"`
	TerminalType    *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribeLiveSubExperienceMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubExperienceMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetAppName(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetBeginTs(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetEndTs(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetExperienceLevel(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.ExperienceLevel = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetMetricType(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetOs(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.Os = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetSubProtocol(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.SubProtocol = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataRequest) SetTerminalType(v string) *DescribeLiveSubExperienceMetricDataRequest {
	s.TerminalType = &v
	return s
}

type DescribeLiveSubExperienceMetricDataResponseBody struct {
	MetricList []*DescribeLiveSubExperienceMetricDataResponseBodyMetricList `json:"MetricList,omitempty" xml:"MetricList,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveSubExperienceMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubExperienceMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubExperienceMetricDataResponseBody) SetMetricList(v []*DescribeLiveSubExperienceMetricDataResponseBodyMetricList) *DescribeLiveSubExperienceMetricDataResponseBody {
	s.MetricList = v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataResponseBody) SetRequestId(v string) *DescribeLiveSubExperienceMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveSubExperienceMetricDataResponseBodyMetricList struct {
	AvgScore *float32 `json:"AvgScore,omitempty" xml:"AvgScore,omitempty"`
	MaxScore *float32 `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
	MinScore *float32 `json:"MinScore,omitempty" xml:"MinScore,omitempty"`
}

func (s DescribeLiveSubExperienceMetricDataResponseBodyMetricList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubExperienceMetricDataResponseBodyMetricList) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubExperienceMetricDataResponseBodyMetricList) SetAvgScore(v float32) *DescribeLiveSubExperienceMetricDataResponseBodyMetricList {
	s.AvgScore = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataResponseBodyMetricList) SetMaxScore(v float32) *DescribeLiveSubExperienceMetricDataResponseBodyMetricList {
	s.MaxScore = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataResponseBodyMetricList) SetMinScore(v float32) *DescribeLiveSubExperienceMetricDataResponseBodyMetricList {
	s.MinScore = &v
	return s
}

type DescribeLiveSubExperienceMetricDataResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveSubExperienceMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSubExperienceMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubExperienceMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubExperienceMetricDataResponse) SetHeaders(v map[string]*string) *DescribeLiveSubExperienceMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataResponse) SetStatusCode(v int32) *DescribeLiveSubExperienceMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveSubExperienceMetricDataResponse) SetBody(v *DescribeLiveSubExperienceMetricDataResponseBody) *DescribeLiveSubExperienceMetricDataResponse {
	s.Body = v
	return s
}

type DescribeLiveSubListRequest struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTs         *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Definition      *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	EndTs           *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ExperienceLevel *string `json:"ExperienceLevel,omitempty" xml:"ExperienceLevel,omitempty"`
	ItemConfigs     *string `json:"ItemConfigs,omitempty" xml:"ItemConfigs,omitempty"`
	MetricType      *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Network         *string `json:"Network,omitempty" xml:"Network,omitempty"`
	Os              *string `json:"Os,omitempty" xml:"Os,omitempty"`
	PageNo          *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	SubProtocol     *string `json:"SubProtocol,omitempty" xml:"SubProtocol,omitempty"`
	TerminalType    *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribeLiveSubListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubListRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubListRequest) SetAppName(v string) *DescribeLiveSubListRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetBeginTs(v string) *DescribeLiveSubListRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetDefinition(v string) *DescribeLiveSubListRequest {
	s.Definition = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetEndTs(v string) *DescribeLiveSubListRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetExperienceLevel(v string) *DescribeLiveSubListRequest {
	s.ExperienceLevel = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetItemConfigs(v string) *DescribeLiveSubListRequest {
	s.ItemConfigs = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetMetricType(v string) *DescribeLiveSubListRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetNetwork(v string) *DescribeLiveSubListRequest {
	s.Network = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetOs(v string) *DescribeLiveSubListRequest {
	s.Os = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetPageNo(v int32) *DescribeLiveSubListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetPageSize(v int32) *DescribeLiveSubListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetStreamName(v string) *DescribeLiveSubListRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetSubProtocol(v string) *DescribeLiveSubListRequest {
	s.SubProtocol = &v
	return s
}

func (s *DescribeLiveSubListRequest) SetTerminalType(v string) *DescribeLiveSubListRequest {
	s.TerminalType = &v
	return s
}

type DescribeLiveSubListResponseBody struct {
	PageNo   *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Id
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubInfoList []*DescribeLiveSubListResponseBodySubInfoList `json:"SubInfoList,omitempty" xml:"SubInfoList,omitempty" type:"Repeated"`
	TotalCount  *int64                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeLiveSubListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubListResponseBody) SetPageNo(v int64) *DescribeLiveSubListResponseBody {
	s.PageNo = &v
	return s
}

func (s *DescribeLiveSubListResponseBody) SetPageSize(v int64) *DescribeLiveSubListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribeLiveSubListResponseBody) SetRequestId(v string) *DescribeLiveSubListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLiveSubListResponseBody) SetSubInfoList(v []*DescribeLiveSubListResponseBodySubInfoList) *DescribeLiveSubListResponseBody {
	s.SubInfoList = v
	return s
}

func (s *DescribeLiveSubListResponseBody) SetTotalCount(v int64) *DescribeLiveSubListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribeLiveSubListResponseBodySubInfoList struct {
	CacheDuration      *string `json:"CacheDuration,omitempty" xml:"CacheDuration,omitempty"`
	CpuUsageRate       *string `json:"CpuUsageRate,omitempty" xml:"CpuUsageRate,omitempty"`
	FirstFrameDuration *string `json:"FirstFrameDuration,omitempty" xml:"FirstFrameDuration,omitempty"`
	PlayFps            *string `json:"PlayFps,omitempty" xml:"PlayFps,omitempty"`
	SecondPlayRate     *string `json:"SecondPlayRate,omitempty" xml:"SecondPlayRate,omitempty"`
	SubNetBitrate      *string `json:"SubNetBitrate,omitempty" xml:"SubNetBitrate,omitempty"`
	SubRate            *string `json:"SubRate,omitempty" xml:"SubRate,omitempty"`
	TraceId            *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	VideoStuck         *string `json:"VideoStuck,omitempty" xml:"VideoStuck,omitempty"`
}

func (s DescribeLiveSubListResponseBodySubInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubListResponseBodySubInfoList) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetCacheDuration(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.CacheDuration = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetCpuUsageRate(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.CpuUsageRate = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetFirstFrameDuration(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.FirstFrameDuration = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetPlayFps(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.PlayFps = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetSecondPlayRate(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.SecondPlayRate = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetSubNetBitrate(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.SubNetBitrate = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetSubRate(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.SubRate = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetTraceId(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.TraceId = &v
	return s
}

func (s *DescribeLiveSubListResponseBodySubInfoList) SetVideoStuck(v string) *DescribeLiveSubListResponseBodySubInfoList {
	s.VideoStuck = &v
	return s
}

type DescribeLiveSubListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveSubListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSubListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubListResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubListResponse) SetHeaders(v map[string]*string) *DescribeLiveSubListResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSubListResponse) SetStatusCode(v int32) *DescribeLiveSubListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveSubListResponse) SetBody(v *DescribeLiveSubListResponseBody) *DescribeLiveSubListResponse {
	s.Body = v
	return s
}

type DescribeLiveSubMetricDataRequest struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTs         *int64  `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Definition      *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	EndTs           *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ExperienceLevel *string `json:"ExperienceLevel,omitempty" xml:"ExperienceLevel,omitempty"`
	ItemConfigs     *string `json:"ItemConfigs,omitempty" xml:"ItemConfigs,omitempty"`
	MetricType      *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Network         *string `json:"Network,omitempty" xml:"Network,omitempty"`
	Os              *string `json:"Os,omitempty" xml:"Os,omitempty"`
	SdkVersion      *string `json:"SdkVersion,omitempty" xml:"SdkVersion,omitempty"`
	StreamName      *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
	SubProtocol     *string `json:"SubProtocol,omitempty" xml:"SubProtocol,omitempty"`
	TerminalType    *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribeLiveSubMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubMetricDataRequest) SetAppName(v string) *DescribeLiveSubMetricDataRequest {
	s.AppName = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetBeginTs(v int64) *DescribeLiveSubMetricDataRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetDefinition(v string) *DescribeLiveSubMetricDataRequest {
	s.Definition = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetEndTs(v int64) *DescribeLiveSubMetricDataRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetExperienceLevel(v string) *DescribeLiveSubMetricDataRequest {
	s.ExperienceLevel = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetItemConfigs(v string) *DescribeLiveSubMetricDataRequest {
	s.ItemConfigs = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetMetricType(v string) *DescribeLiveSubMetricDataRequest {
	s.MetricType = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetNetwork(v string) *DescribeLiveSubMetricDataRequest {
	s.Network = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetOs(v string) *DescribeLiveSubMetricDataRequest {
	s.Os = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetSdkVersion(v string) *DescribeLiveSubMetricDataRequest {
	s.SdkVersion = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetStreamName(v string) *DescribeLiveSubMetricDataRequest {
	s.StreamName = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetSubProtocol(v string) *DescribeLiveSubMetricDataRequest {
	s.SubProtocol = &v
	return s
}

func (s *DescribeLiveSubMetricDataRequest) SetTerminalType(v string) *DescribeLiveSubMetricDataRequest {
	s.TerminalType = &v
	return s
}

type DescribeLiveSubMetricDataResponseBody struct {
	Nodes []*DescribeLiveSubMetricDataResponseBodyNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeLiveSubMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubMetricDataResponseBody) SetNodes(v []*DescribeLiveSubMetricDataResponseBodyNodes) *DescribeLiveSubMetricDataResponseBody {
	s.Nodes = v
	return s
}

func (s *DescribeLiveSubMetricDataResponseBody) SetRequestId(v string) *DescribeLiveSubMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribeLiveSubMetricDataResponseBodyNodes struct {
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Time     *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeLiveSubMetricDataResponseBodyNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubMetricDataResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubMetricDataResponseBodyNodes) SetDuration(v int64) *DescribeLiveSubMetricDataResponseBodyNodes {
	s.Duration = &v
	return s
}

func (s *DescribeLiveSubMetricDataResponseBodyNodes) SetTime(v int64) *DescribeLiveSubMetricDataResponseBodyNodes {
	s.Time = &v
	return s
}

type DescribeLiveSubMetricDataResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeLiveSubMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLiveSubMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLiveSubMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribeLiveSubMetricDataResponse) SetHeaders(v map[string]*string) *DescribeLiveSubMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribeLiveSubMetricDataResponse) SetStatusCode(v int32) *DescribeLiveSubMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLiveSubMetricDataResponse) SetBody(v *DescribeLiveSubMetricDataResponseBody) *DescribeLiveSubMetricDataResponse {
	s.Body = v
	return s
}

type DescribeMeterIceEditUsageRequest struct {
	EndTs    *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	Interval *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	StartTs  *int64  `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterIceEditUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceEditUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceEditUsageRequest) SetEndTs(v int64) *DescribeMeterIceEditUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterIceEditUsageRequest) SetInterval(v int64) *DescribeMeterIceEditUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterIceEditUsageRequest) SetRegion(v string) *DescribeMeterIceEditUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterIceEditUsageRequest) SetStartTs(v int64) *DescribeMeterIceEditUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterIceEditUsageResponseBody struct {
	Data []*DescribeMeterIceEditUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterIceEditUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceEditUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceEditUsageResponseBody) SetData(v []*DescribeMeterIceEditUsageResponseBodyData) *DescribeMeterIceEditUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterIceEditUsageResponseBody) SetRequestId(v string) *DescribeMeterIceEditUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterIceEditUsageResponseBodyData struct {
	Duration *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Profile  *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Time     *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterIceEditUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceEditUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceEditUsageResponseBodyData) SetDuration(v int64) *DescribeMeterIceEditUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterIceEditUsageResponseBodyData) SetProfile(v string) *DescribeMeterIceEditUsageResponseBodyData {
	s.Profile = &v
	return s
}

func (s *DescribeMeterIceEditUsageResponseBodyData) SetTime(v int64) *DescribeMeterIceEditUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterIceEditUsageResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeterIceEditUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeterIceEditUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceEditUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceEditUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterIceEditUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterIceEditUsageResponse) SetStatusCode(v int32) *DescribeMeterIceEditUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterIceEditUsageResponse) SetBody(v *DescribeMeterIceEditUsageResponseBody) *DescribeMeterIceEditUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterIceLiveMediaConvertUsageRequest struct {
	EndTs    *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	Interval *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	StartTs  *int64  `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterIceLiveMediaConvertUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceLiveMediaConvertUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceLiveMediaConvertUsageRequest) SetEndTs(v int64) *DescribeMeterIceLiveMediaConvertUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageRequest) SetInterval(v int64) *DescribeMeterIceLiveMediaConvertUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageRequest) SetRegion(v string) *DescribeMeterIceLiveMediaConvertUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageRequest) SetStartTs(v int64) *DescribeMeterIceLiveMediaConvertUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterIceLiveMediaConvertUsageResponseBody struct {
	Data []*DescribeMeterIceLiveMediaConvertUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterIceLiveMediaConvertUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceLiveMediaConvertUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponseBody) SetData(v []*DescribeMeterIceLiveMediaConvertUsageResponseBodyData) *DescribeMeterIceLiveMediaConvertUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponseBody) SetRequestId(v string) *DescribeMeterIceLiveMediaConvertUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterIceLiveMediaConvertUsageResponseBodyData struct {
	Duration      *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	Time          *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterIceLiveMediaConvertUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceLiveMediaConvertUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponseBodyData) SetDuration(v int64) *DescribeMeterIceLiveMediaConvertUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponseBodyData) SetSpecification(v string) *DescribeMeterIceLiveMediaConvertUsageResponseBodyData {
	s.Specification = &v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponseBodyData) SetTime(v int64) *DescribeMeterIceLiveMediaConvertUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterIceLiveMediaConvertUsageResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeterIceLiveMediaConvertUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeterIceLiveMediaConvertUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceLiveMediaConvertUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterIceLiveMediaConvertUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponse) SetStatusCode(v int32) *DescribeMeterIceLiveMediaConvertUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterIceLiveMediaConvertUsageResponse) SetBody(v *DescribeMeterIceLiveMediaConvertUsageResponseBody) *DescribeMeterIceLiveMediaConvertUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterIceMediaConvertUHDUsageRequest struct {
	EndTs    *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	Interval *string `json:"Interval,omitempty" xml:"Interval,omitempty"`
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartTs  *int64  `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterIceMediaConvertUHDUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUHDUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUHDUsageRequest) SetEndTs(v int64) *DescribeMeterIceMediaConvertUHDUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageRequest) SetInterval(v string) *DescribeMeterIceMediaConvertUHDUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageRequest) SetRegionId(v string) *DescribeMeterIceMediaConvertUHDUsageRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageRequest) SetStartTs(v int64) *DescribeMeterIceMediaConvertUHDUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterIceMediaConvertUHDUsageResponseBody struct {
	Data []*DescribeMeterIceMediaConvertUHDUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterIceMediaConvertUHDUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUHDUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponseBody) SetData(v []*DescribeMeterIceMediaConvertUHDUsageResponseBodyData) *DescribeMeterIceMediaConvertUHDUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponseBody) SetRequestId(v string) *DescribeMeterIceMediaConvertUHDUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterIceMediaConvertUHDUsageResponseBodyData struct {
	Duration      *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	Time          *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterIceMediaConvertUHDUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUHDUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponseBodyData) SetDuration(v int64) *DescribeMeterIceMediaConvertUHDUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponseBodyData) SetSpecification(v string) *DescribeMeterIceMediaConvertUHDUsageResponseBodyData {
	s.Specification = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponseBodyData) SetTime(v int64) *DescribeMeterIceMediaConvertUHDUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterIceMediaConvertUHDUsageResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeterIceMediaConvertUHDUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeterIceMediaConvertUHDUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUHDUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterIceMediaConvertUHDUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponse) SetStatusCode(v int32) *DescribeMeterIceMediaConvertUHDUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUHDUsageResponse) SetBody(v *DescribeMeterIceMediaConvertUHDUsageResponseBody) *DescribeMeterIceMediaConvertUHDUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterIceMediaConvertUsageRequest struct {
	EndTs    *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	Interval *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	StartTs  *int64  `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterIceMediaConvertUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUsageRequest) SetEndTs(v int64) *DescribeMeterIceMediaConvertUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageRequest) SetInterval(v int64) *DescribeMeterIceMediaConvertUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageRequest) SetRegion(v string) *DescribeMeterIceMediaConvertUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageRequest) SetStartTs(v int64) *DescribeMeterIceMediaConvertUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterIceMediaConvertUsageResponseBody struct {
	Data []*DescribeMeterIceMediaConvertUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterIceMediaConvertUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUsageResponseBody) SetData(v []*DescribeMeterIceMediaConvertUsageResponseBodyData) *DescribeMeterIceMediaConvertUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageResponseBody) SetRequestId(v string) *DescribeMeterIceMediaConvertUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterIceMediaConvertUsageResponseBodyData struct {
	Duration      *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Specification *string `json:"Specification,omitempty" xml:"Specification,omitempty"`
	Time          *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribeMeterIceMediaConvertUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUsageResponseBodyData) SetDuration(v int64) *DescribeMeterIceMediaConvertUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageResponseBodyData) SetSpecification(v string) *DescribeMeterIceMediaConvertUsageResponseBodyData {
	s.Specification = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageResponseBodyData) SetTime(v int64) *DescribeMeterIceMediaConvertUsageResponseBodyData {
	s.Time = &v
	return s
}

type DescribeMeterIceMediaConvertUsageResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeterIceMediaConvertUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeterIceMediaConvertUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMediaConvertUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMediaConvertUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterIceMediaConvertUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageResponse) SetStatusCode(v int32) *DescribeMeterIceMediaConvertUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterIceMediaConvertUsageResponse) SetBody(v *DescribeMeterIceMediaConvertUsageResponseBody) *DescribeMeterIceMediaConvertUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterIceMpsAiUsageRequest struct {
	EndTs    *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	Interval *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	Region   *string `json:"Region,omitempty" xml:"Region,omitempty"`
	StartTs  *int64  `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterIceMpsAiUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMpsAiUsageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMpsAiUsageRequest) SetEndTs(v int64) *DescribeMeterIceMpsAiUsageRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterIceMpsAiUsageRequest) SetInterval(v int64) *DescribeMeterIceMpsAiUsageRequest {
	s.Interval = &v
	return s
}

func (s *DescribeMeterIceMpsAiUsageRequest) SetRegion(v string) *DescribeMeterIceMpsAiUsageRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterIceMpsAiUsageRequest) SetStartTs(v int64) *DescribeMeterIceMpsAiUsageRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterIceMpsAiUsageResponseBody struct {
	Data []*DescribeMeterIceMpsAiUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterIceMpsAiUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMpsAiUsageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMpsAiUsageResponseBody) SetData(v []*DescribeMeterIceMpsAiUsageResponseBodyData) *DescribeMeterIceMpsAiUsageResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterIceMpsAiUsageResponseBody) SetRequestId(v string) *DescribeMeterIceMpsAiUsageResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterIceMpsAiUsageResponseBodyData struct {
	Duration *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Time     *int64  `json:"Time,omitempty" xml:"Time,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeMeterIceMpsAiUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMpsAiUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMpsAiUsageResponseBodyData) SetDuration(v int64) *DescribeMeterIceMpsAiUsageResponseBodyData {
	s.Duration = &v
	return s
}

func (s *DescribeMeterIceMpsAiUsageResponseBodyData) SetTime(v int64) *DescribeMeterIceMpsAiUsageResponseBodyData {
	s.Time = &v
	return s
}

func (s *DescribeMeterIceMpsAiUsageResponseBodyData) SetType(v string) *DescribeMeterIceMpsAiUsageResponseBodyData {
	s.Type = &v
	return s
}

type DescribeMeterIceMpsAiUsageResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeterIceMpsAiUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeterIceMpsAiUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceMpsAiUsageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceMpsAiUsageResponse) SetHeaders(v map[string]*string) *DescribeMeterIceMpsAiUsageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterIceMpsAiUsageResponse) SetStatusCode(v int32) *DescribeMeterIceMpsAiUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterIceMpsAiUsageResponse) SetBody(v *DescribeMeterIceMpsAiUsageResponseBody) *DescribeMeterIceMpsAiUsageResponse {
	s.Body = v
	return s
}

type DescribeMeterIceSummaryRequest struct {
	EndTs   *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	Region  *string `json:"Region,omitempty" xml:"Region,omitempty"`
	StartTs *int64  `json:"StartTs,omitempty" xml:"StartTs,omitempty"`
}

func (s DescribeMeterIceSummaryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceSummaryRequest) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceSummaryRequest) SetEndTs(v int64) *DescribeMeterIceSummaryRequest {
	s.EndTs = &v
	return s
}

func (s *DescribeMeterIceSummaryRequest) SetRegion(v string) *DescribeMeterIceSummaryRequest {
	s.Region = &v
	return s
}

func (s *DescribeMeterIceSummaryRequest) SetStartTs(v int64) *DescribeMeterIceSummaryRequest {
	s.StartTs = &v
	return s
}

type DescribeMeterIceSummaryResponseBody struct {
	Data []*DescribeMeterIceSummaryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeMeterIceSummaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceSummaryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceSummaryResponseBody) SetData(v []*DescribeMeterIceSummaryResponseBodyData) *DescribeMeterIceSummaryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMeterIceSummaryResponseBody) SetRequestId(v string) *DescribeMeterIceSummaryResponseBody {
	s.RequestId = &v
	return s
}

type DescribeMeterIceSummaryResponseBodyData struct {
	EditingDuration         *string `json:"EditingDuration,omitempty" xml:"EditingDuration,omitempty"`
	LiveTranscodeDuration   *int64  `json:"LiveTranscodeDuration,omitempty" xml:"LiveTranscodeDuration,omitempty"`
	MpsAiDuration           *int64  `json:"MpsAiDuration,omitempty" xml:"MpsAiDuration,omitempty"`
	MpsTranscodeDuration    *int64  `json:"MpsTranscodeDuration,omitempty" xml:"MpsTranscodeDuration,omitempty"`
	MpsTranscodeUHDDuration *int64  `json:"MpsTranscodeUHDDuration,omitempty" xml:"MpsTranscodeUHDDuration,omitempty"`
}

func (s DescribeMeterIceSummaryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceSummaryResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceSummaryResponseBodyData) SetEditingDuration(v string) *DescribeMeterIceSummaryResponseBodyData {
	s.EditingDuration = &v
	return s
}

func (s *DescribeMeterIceSummaryResponseBodyData) SetLiveTranscodeDuration(v int64) *DescribeMeterIceSummaryResponseBodyData {
	s.LiveTranscodeDuration = &v
	return s
}

func (s *DescribeMeterIceSummaryResponseBodyData) SetMpsAiDuration(v int64) *DescribeMeterIceSummaryResponseBodyData {
	s.MpsAiDuration = &v
	return s
}

func (s *DescribeMeterIceSummaryResponseBodyData) SetMpsTranscodeDuration(v int64) *DescribeMeterIceSummaryResponseBodyData {
	s.MpsTranscodeDuration = &v
	return s
}

func (s *DescribeMeterIceSummaryResponseBodyData) SetMpsTranscodeUHDDuration(v int64) *DescribeMeterIceSummaryResponseBodyData {
	s.MpsTranscodeUHDDuration = &v
	return s
}

type DescribeMeterIceSummaryResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeMeterIceSummaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMeterIceSummaryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMeterIceSummaryResponse) GoString() string {
	return s.String()
}

func (s *DescribeMeterIceSummaryResponse) SetHeaders(v map[string]*string) *DescribeMeterIceSummaryResponse {
	s.Headers = v
	return s
}

func (s *DescribeMeterIceSummaryResponse) SetStatusCode(v int32) *DescribeMeterIceSummaryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMeterIceSummaryResponse) SetBody(v *DescribeMeterIceSummaryResponseBody) *DescribeMeterIceSummaryResponse {
	s.Body = v
	return s
}

type DescribePalyDetailRequest struct {
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribePalyDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribePalyDetailRequest) SetTraceId(v string) *DescribePalyDetailRequest {
	s.TraceId = &v
	return s
}

type DescribePalyDetailResponseBody struct {
	Data []*DescribePalyDetailResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePalyDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePalyDetailResponseBody) SetData(v []*DescribePalyDetailResponseBodyData) *DescribePalyDetailResponseBody {
	s.Data = v
	return s
}

func (s *DescribePalyDetailResponseBody) SetRequestId(v string) *DescribePalyDetailResponseBody {
	s.RequestId = &v
	return s
}

type DescribePalyDetailResponseBodyData struct {
	AppName               *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	Bps                   *string `json:"Bps,omitempty" xml:"Bps,omitempty"`
	BroadcastPace         *string `json:"BroadcastPace,omitempty" xml:"BroadcastPace,omitempty"`
	Codec                 *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	DecodeStuckTime       *string `json:"DecodeStuckTime,omitempty" xml:"DecodeStuckTime,omitempty"`
	Definition            *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	FirstFrameDuration    *string `json:"FirstFrameDuration,omitempty" xml:"FirstFrameDuration,omitempty"`
	Fps                   *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	IsHardDecode          *string `json:"IsHardDecode,omitempty" xml:"IsHardDecode,omitempty"`
	Mdat                  *string `json:"Mdat,omitempty" xml:"Mdat,omitempty"`
	Moov                  *string `json:"Moov,omitempty" xml:"Moov,omitempty"`
	NetWorkDuration       *string `json:"NetWorkDuration,omitempty" xml:"NetWorkDuration,omitempty"`
	Network               *string `json:"Network,omitempty" xml:"Network,omitempty"`
	NetworkStuckTime      *string `json:"NetworkStuckTime,omitempty" xml:"NetworkStuckTime,omitempty"`
	Os                    *string `json:"Os,omitempty" xml:"Os,omitempty"`
	PlayTs                *string `json:"PlayTs,omitempty" xml:"PlayTs,omitempty"`
	PlayerLoadDuration    *string `json:"PlayerLoadDuration,omitempty" xml:"PlayerLoadDuration,omitempty"`
	PlayerPreDealDuration *string `json:"PlayerPreDealDuration,omitempty" xml:"PlayerPreDealDuration,omitempty"`
	PlayerReadyDuration   *string `json:"PlayerReadyDuration,omitempty" xml:"PlayerReadyDuration,omitempty"`
	SdkVersion            *string `json:"SdkVersion,omitempty" xml:"SdkVersion,omitempty"`
	SessionId             *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TerminalType          *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribePalyDetailResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyDetailResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribePalyDetailResponseBodyData) SetAppName(v string) *DescribePalyDetailResponseBodyData {
	s.AppName = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetBps(v string) *DescribePalyDetailResponseBodyData {
	s.Bps = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetBroadcastPace(v string) *DescribePalyDetailResponseBodyData {
	s.BroadcastPace = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetCodec(v string) *DescribePalyDetailResponseBodyData {
	s.Codec = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetDecodeStuckTime(v string) *DescribePalyDetailResponseBodyData {
	s.DecodeStuckTime = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetDefinition(v string) *DescribePalyDetailResponseBodyData {
	s.Definition = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetFirstFrameDuration(v string) *DescribePalyDetailResponseBodyData {
	s.FirstFrameDuration = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetFps(v string) *DescribePalyDetailResponseBodyData {
	s.Fps = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetIsHardDecode(v string) *DescribePalyDetailResponseBodyData {
	s.IsHardDecode = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetMdat(v string) *DescribePalyDetailResponseBodyData {
	s.Mdat = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetMoov(v string) *DescribePalyDetailResponseBodyData {
	s.Moov = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetNetWorkDuration(v string) *DescribePalyDetailResponseBodyData {
	s.NetWorkDuration = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetNetwork(v string) *DescribePalyDetailResponseBodyData {
	s.Network = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetNetworkStuckTime(v string) *DescribePalyDetailResponseBodyData {
	s.NetworkStuckTime = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetOs(v string) *DescribePalyDetailResponseBodyData {
	s.Os = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetPlayTs(v string) *DescribePalyDetailResponseBodyData {
	s.PlayTs = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetPlayerLoadDuration(v string) *DescribePalyDetailResponseBodyData {
	s.PlayerLoadDuration = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetPlayerPreDealDuration(v string) *DescribePalyDetailResponseBodyData {
	s.PlayerPreDealDuration = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetPlayerReadyDuration(v string) *DescribePalyDetailResponseBodyData {
	s.PlayerReadyDuration = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetSdkVersion(v string) *DescribePalyDetailResponseBodyData {
	s.SdkVersion = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetSessionId(v string) *DescribePalyDetailResponseBodyData {
	s.SessionId = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetStatus(v string) *DescribePalyDetailResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribePalyDetailResponseBodyData) SetTerminalType(v string) *DescribePalyDetailResponseBodyData {
	s.TerminalType = &v
	return s
}

type DescribePalyDetailResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePalyDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePalyDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribePalyDetailResponse) SetHeaders(v map[string]*string) *DescribePalyDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribePalyDetailResponse) SetStatusCode(v int32) *DescribePalyDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePalyDetailResponse) SetBody(v *DescribePalyDetailResponseBody) *DescribePalyDetailResponse {
	s.Body = v
	return s
}

type DescribePalyEventListRequest struct {
	PageNo   *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TraceId  *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribePalyEventListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyEventListRequest) GoString() string {
	return s.String()
}

func (s *DescribePalyEventListRequest) SetPageNo(v int32) *DescribePalyEventListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribePalyEventListRequest) SetPageSize(v int32) *DescribePalyEventListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePalyEventListRequest) SetTraceId(v string) *DescribePalyEventListRequest {
	s.TraceId = &v
	return s
}

type DescribePalyEventListResponseBody struct {
	EventList []*DescribePalyEventListResponseBodyEventList `json:"EventList,omitempty" xml:"EventList,omitempty" type:"Repeated"`
	PageNo    *int64                                        `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int64                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCnt  *int64  `json:"TotalCnt,omitempty" xml:"TotalCnt,omitempty"`
}

func (s DescribePalyEventListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyEventListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePalyEventListResponseBody) SetEventList(v []*DescribePalyEventListResponseBodyEventList) *DescribePalyEventListResponseBody {
	s.EventList = v
	return s
}

func (s *DescribePalyEventListResponseBody) SetPageNo(v int64) *DescribePalyEventListResponseBody {
	s.PageNo = &v
	return s
}

func (s *DescribePalyEventListResponseBody) SetPageSize(v int64) *DescribePalyEventListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePalyEventListResponseBody) SetRequestId(v string) *DescribePalyEventListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePalyEventListResponseBody) SetTotalCnt(v int64) *DescribePalyEventListResponseBody {
	s.TotalCnt = &v
	return s
}

type DescribePalyEventListResponseBodyEventList struct {
	Description *string  `json:"Description,omitempty" xml:"Description,omitempty"`
	Duration    *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EventName   *string  `json:"EventName,omitempty" xml:"EventName,omitempty"`
	Time        *int64   `json:"Time,omitempty" xml:"Time,omitempty"`
	Topic       *string  `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s DescribePalyEventListResponseBodyEventList) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyEventListResponseBodyEventList) GoString() string {
	return s.String()
}

func (s *DescribePalyEventListResponseBodyEventList) SetDescription(v string) *DescribePalyEventListResponseBodyEventList {
	s.Description = &v
	return s
}

func (s *DescribePalyEventListResponseBodyEventList) SetDuration(v float32) *DescribePalyEventListResponseBodyEventList {
	s.Duration = &v
	return s
}

func (s *DescribePalyEventListResponseBodyEventList) SetEventName(v string) *DescribePalyEventListResponseBodyEventList {
	s.EventName = &v
	return s
}

func (s *DescribePalyEventListResponseBodyEventList) SetTime(v int64) *DescribePalyEventListResponseBodyEventList {
	s.Time = &v
	return s
}

func (s *DescribePalyEventListResponseBodyEventList) SetTopic(v string) *DescribePalyEventListResponseBodyEventList {
	s.Topic = &v
	return s
}

type DescribePalyEventListResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePalyEventListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePalyEventListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyEventListResponse) GoString() string {
	return s.String()
}

func (s *DescribePalyEventListResponse) SetHeaders(v map[string]*string) *DescribePalyEventListResponse {
	s.Headers = v
	return s
}

func (s *DescribePalyEventListResponse) SetStatusCode(v int32) *DescribePalyEventListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePalyEventListResponse) SetBody(v *DescribePalyEventListResponseBody) *DescribePalyEventListResponse {
	s.Body = v
	return s
}

type DescribePalyListRequest struct {
	BeginTs   *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	EndTs     *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	OrderName *string `json:"OrderName,omitempty" xml:"OrderName,omitempty"`
	OrderType *string `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	PageNo    *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PlayType  *string `json:"PlayType,omitempty" xml:"PlayType,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TraceId   *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribePalyListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyListRequest) GoString() string {
	return s.String()
}

func (s *DescribePalyListRequest) SetBeginTs(v string) *DescribePalyListRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePalyListRequest) SetEndTs(v string) *DescribePalyListRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePalyListRequest) SetOrderName(v string) *DescribePalyListRequest {
	s.OrderName = &v
	return s
}

func (s *DescribePalyListRequest) SetOrderType(v string) *DescribePalyListRequest {
	s.OrderType = &v
	return s
}

func (s *DescribePalyListRequest) SetPageNo(v int32) *DescribePalyListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribePalyListRequest) SetPageSize(v int32) *DescribePalyListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePalyListRequest) SetPlayType(v string) *DescribePalyListRequest {
	s.PlayType = &v
	return s
}

func (s *DescribePalyListRequest) SetStatus(v string) *DescribePalyListRequest {
	s.Status = &v
	return s
}

func (s *DescribePalyListRequest) SetTraceId(v string) *DescribePalyListRequest {
	s.TraceId = &v
	return s
}

type DescribePalyListResponseBody struct {
	PageNo   *int64                                  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PlayList []*DescribePalyListResponseBodyPlayList `json:"PlayList,omitempty" xml:"PlayList,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCnt  *int64  `json:"TotalCnt,omitempty" xml:"TotalCnt,omitempty"`
}

func (s DescribePalyListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePalyListResponseBody) SetPageNo(v int64) *DescribePalyListResponseBody {
	s.PageNo = &v
	return s
}

func (s *DescribePalyListResponseBody) SetPageSize(v int64) *DescribePalyListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePalyListResponseBody) SetPlayList(v []*DescribePalyListResponseBodyPlayList) *DescribePalyListResponseBody {
	s.PlayList = v
	return s
}

func (s *DescribePalyListResponseBody) SetRequestId(v string) *DescribePalyListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePalyListResponseBody) SetTotalCnt(v int64) *DescribePalyListResponseBody {
	s.TotalCnt = &v
	return s
}

type DescribePalyListResponseBodyPlayList struct {
	FirstFrameDuration *string `json:"FirstFrameDuration,omitempty" xml:"FirstFrameDuration,omitempty"`
	PlayDuration       *string `json:"PlayDuration,omitempty" xml:"PlayDuration,omitempty"`
	PlayType           *string `json:"PlayType,omitempty" xml:"PlayType,omitempty"`
	SessionId          *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StuckDuration      *string `json:"StuckDuration,omitempty" xml:"StuckDuration,omitempty"`
	TraceId            *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	VideoDuration      *string `json:"VideoDuration,omitempty" xml:"VideoDuration,omitempty"`
	VideoId            *string `json:"VideoId,omitempty" xml:"VideoId,omitempty"`
}

func (s DescribePalyListResponseBodyPlayList) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyListResponseBodyPlayList) GoString() string {
	return s.String()
}

func (s *DescribePalyListResponseBodyPlayList) SetFirstFrameDuration(v string) *DescribePalyListResponseBodyPlayList {
	s.FirstFrameDuration = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetPlayDuration(v string) *DescribePalyListResponseBodyPlayList {
	s.PlayDuration = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetPlayType(v string) *DescribePalyListResponseBodyPlayList {
	s.PlayType = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetSessionId(v string) *DescribePalyListResponseBodyPlayList {
	s.SessionId = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetStatus(v string) *DescribePalyListResponseBodyPlayList {
	s.Status = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetStuckDuration(v string) *DescribePalyListResponseBodyPlayList {
	s.StuckDuration = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetTraceId(v string) *DescribePalyListResponseBodyPlayList {
	s.TraceId = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetVideoDuration(v string) *DescribePalyListResponseBodyPlayList {
	s.VideoDuration = &v
	return s
}

func (s *DescribePalyListResponseBodyPlayList) SetVideoId(v string) *DescribePalyListResponseBodyPlayList {
	s.VideoId = &v
	return s
}

type DescribePalyListResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePalyListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePalyListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePalyListResponse) GoString() string {
	return s.String()
}

func (s *DescribePalyListResponse) SetHeaders(v map[string]*string) *DescribePalyListResponse {
	s.Headers = v
	return s
}

func (s *DescribePalyListResponse) SetStatusCode(v int32) *DescribePalyListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePalyListResponse) SetBody(v *DescribePalyListResponseBody) *DescribePalyListResponse {
	s.Body = v
	return s
}

type DescribePlayExperienceMetricDataRequest struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTs         *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	EndTs           *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ExperienceLevel *string `json:"ExperienceLevel,omitempty" xml:"ExperienceLevel,omitempty"`
	Os              *string `json:"Os,omitempty" xml:"Os,omitempty"`
	TerminalType    *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribePlayExperienceMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayExperienceMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribePlayExperienceMetricDataRequest) SetAppName(v string) *DescribePlayExperienceMetricDataRequest {
	s.AppName = &v
	return s
}

func (s *DescribePlayExperienceMetricDataRequest) SetBeginTs(v string) *DescribePlayExperienceMetricDataRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePlayExperienceMetricDataRequest) SetEndTs(v string) *DescribePlayExperienceMetricDataRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePlayExperienceMetricDataRequest) SetExperienceLevel(v string) *DescribePlayExperienceMetricDataRequest {
	s.ExperienceLevel = &v
	return s
}

func (s *DescribePlayExperienceMetricDataRequest) SetOs(v string) *DescribePlayExperienceMetricDataRequest {
	s.Os = &v
	return s
}

func (s *DescribePlayExperienceMetricDataRequest) SetTerminalType(v string) *DescribePlayExperienceMetricDataRequest {
	s.TerminalType = &v
	return s
}

type DescribePlayExperienceMetricDataResponseBody struct {
	Data []*DescribePlayExperienceMetricDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePlayExperienceMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayExperienceMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePlayExperienceMetricDataResponseBody) SetData(v []*DescribePlayExperienceMetricDataResponseBodyData) *DescribePlayExperienceMetricDataResponseBody {
	s.Data = v
	return s
}

func (s *DescribePlayExperienceMetricDataResponseBody) SetRequestId(v string) *DescribePlayExperienceMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribePlayExperienceMetricDataResponseBodyData struct {
	AvgScore *float32 `json:"AvgScore,omitempty" xml:"AvgScore,omitempty"`
	MaxScore *float32 `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
	MinScore *float32 `json:"MinScore,omitempty" xml:"MinScore,omitempty"`
}

func (s DescribePlayExperienceMetricDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayExperienceMetricDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribePlayExperienceMetricDataResponseBodyData) SetAvgScore(v float32) *DescribePlayExperienceMetricDataResponseBodyData {
	s.AvgScore = &v
	return s
}

func (s *DescribePlayExperienceMetricDataResponseBodyData) SetMaxScore(v float32) *DescribePlayExperienceMetricDataResponseBodyData {
	s.MaxScore = &v
	return s
}

func (s *DescribePlayExperienceMetricDataResponseBodyData) SetMinScore(v float32) *DescribePlayExperienceMetricDataResponseBodyData {
	s.MinScore = &v
	return s
}

type DescribePlayExperienceMetricDataResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePlayExperienceMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePlayExperienceMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayExperienceMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribePlayExperienceMetricDataResponse) SetHeaders(v map[string]*string) *DescribePlayExperienceMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribePlayExperienceMetricDataResponse) SetStatusCode(v int32) *DescribePlayExperienceMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePlayExperienceMetricDataResponse) SetBody(v *DescribePlayExperienceMetricDataResponseBody) *DescribePlayExperienceMetricDataResponse {
	s.Body = v
	return s
}

type DescribePlayFirstFrameDurationMetricDataRequest struct {
	BeginTs *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	EndTs   *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
}

func (s DescribePlayFirstFrameDurationMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayFirstFrameDurationMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribePlayFirstFrameDurationMetricDataRequest) SetBeginTs(v string) *DescribePlayFirstFrameDurationMetricDataRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePlayFirstFrameDurationMetricDataRequest) SetEndTs(v string) *DescribePlayFirstFrameDurationMetricDataRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePlayFirstFrameDurationMetricDataRequest) SetTraceId(v string) *DescribePlayFirstFrameDurationMetricDataRequest {
	s.TraceId = &v
	return s
}

type DescribePlayFirstFrameDurationMetricDataResponseBody struct {
	Nodes []*DescribePlayFirstFrameDurationMetricDataResponseBodyNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePlayFirstFrameDurationMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayFirstFrameDurationMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePlayFirstFrameDurationMetricDataResponseBody) SetNodes(v []*DescribePlayFirstFrameDurationMetricDataResponseBodyNodes) *DescribePlayFirstFrameDurationMetricDataResponseBody {
	s.Nodes = v
	return s
}

func (s *DescribePlayFirstFrameDurationMetricDataResponseBody) SetRequestId(v string) *DescribePlayFirstFrameDurationMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribePlayFirstFrameDurationMetricDataResponseBodyNodes struct {
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Time     *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s DescribePlayFirstFrameDurationMetricDataResponseBodyNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayFirstFrameDurationMetricDataResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *DescribePlayFirstFrameDurationMetricDataResponseBodyNodes) SetDuration(v int64) *DescribePlayFirstFrameDurationMetricDataResponseBodyNodes {
	s.Duration = &v
	return s
}

func (s *DescribePlayFirstFrameDurationMetricDataResponseBodyNodes) SetTime(v int64) *DescribePlayFirstFrameDurationMetricDataResponseBodyNodes {
	s.Time = &v
	return s
}

type DescribePlayFirstFrameDurationMetricDataResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePlayFirstFrameDurationMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePlayFirstFrameDurationMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayFirstFrameDurationMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribePlayFirstFrameDurationMetricDataResponse) SetHeaders(v map[string]*string) *DescribePlayFirstFrameDurationMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribePlayFirstFrameDurationMetricDataResponse) SetStatusCode(v int32) *DescribePlayFirstFrameDurationMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePlayFirstFrameDurationMetricDataResponse) SetBody(v *DescribePlayFirstFrameDurationMetricDataResponseBody) *DescribePlayFirstFrameDurationMetricDataResponse {
	s.Body = v
	return s
}

type DescribePlayMetricDataRequest struct {
	AppName         *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTs         *int64  `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Definition      *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	EndTs           *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ExperienceLevel *string `json:"ExperienceLevel,omitempty" xml:"ExperienceLevel,omitempty"`
	ItemConfigs     *string `json:"ItemConfigs,omitempty" xml:"ItemConfigs,omitempty"`
	MetricType      *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Network         *string `json:"Network,omitempty" xml:"Network,omitempty"`
	Os              *string `json:"Os,omitempty" xml:"Os,omitempty"`
	SdkVersion      *string `json:"SdkVersion,omitempty" xml:"SdkVersion,omitempty"`
	TerminalType    *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribePlayMetricDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayMetricDataRequest) GoString() string {
	return s.String()
}

func (s *DescribePlayMetricDataRequest) SetAppName(v string) *DescribePlayMetricDataRequest {
	s.AppName = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetBeginTs(v int64) *DescribePlayMetricDataRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetDefinition(v string) *DescribePlayMetricDataRequest {
	s.Definition = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetEndTs(v int64) *DescribePlayMetricDataRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetExperienceLevel(v string) *DescribePlayMetricDataRequest {
	s.ExperienceLevel = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetItemConfigs(v string) *DescribePlayMetricDataRequest {
	s.ItemConfigs = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetMetricType(v string) *DescribePlayMetricDataRequest {
	s.MetricType = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetNetwork(v string) *DescribePlayMetricDataRequest {
	s.Network = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetOs(v string) *DescribePlayMetricDataRequest {
	s.Os = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetSdkVersion(v string) *DescribePlayMetricDataRequest {
	s.SdkVersion = &v
	return s
}

func (s *DescribePlayMetricDataRequest) SetTerminalType(v string) *DescribePlayMetricDataRequest {
	s.TerminalType = &v
	return s
}

type DescribePlayMetricDataResponseBody struct {
	Nodes []*DescribePlayMetricDataResponseBodyNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribePlayMetricDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayMetricDataResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePlayMetricDataResponseBody) SetNodes(v []*DescribePlayMetricDataResponseBodyNodes) *DescribePlayMetricDataResponseBody {
	s.Nodes = v
	return s
}

func (s *DescribePlayMetricDataResponseBody) SetRequestId(v string) *DescribePlayMetricDataResponseBody {
	s.RequestId = &v
	return s
}

type DescribePlayMetricDataResponseBodyNodes struct {
	X *int64 `json:"X,omitempty" xml:"X,omitempty"`
	Y *int64 `json:"Y,omitempty" xml:"Y,omitempty"`
}

func (s DescribePlayMetricDataResponseBodyNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayMetricDataResponseBodyNodes) GoString() string {
	return s.String()
}

func (s *DescribePlayMetricDataResponseBodyNodes) SetX(v int64) *DescribePlayMetricDataResponseBodyNodes {
	s.X = &v
	return s
}

func (s *DescribePlayMetricDataResponseBodyNodes) SetY(v int64) *DescribePlayMetricDataResponseBodyNodes {
	s.Y = &v
	return s
}

type DescribePlayMetricDataResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePlayMetricDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePlayMetricDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayMetricDataResponse) GoString() string {
	return s.String()
}

func (s *DescribePlayMetricDataResponse) SetHeaders(v map[string]*string) *DescribePlayMetricDataResponse {
	s.Headers = v
	return s
}

func (s *DescribePlayMetricDataResponse) SetStatusCode(v int32) *DescribePlayMetricDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePlayMetricDataResponse) SetBody(v *DescribePlayMetricDataResponseBody) *DescribePlayMetricDataResponse {
	s.Body = v
	return s
}

type DescribePlayQoeListRequest struct {
	AppName      *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTs      *int64  `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Definition   *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	EndTs        *int64  `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ItemConfigs  *string `json:"ItemConfigs,omitempty" xml:"ItemConfigs,omitempty"`
	MetricType   *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Network      *string `json:"Network,omitempty" xml:"Network,omitempty"`
	Os           *string `json:"Os,omitempty" xml:"Os,omitempty"`
	PageNo       *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TerminalType *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribePlayQoeListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQoeListRequest) GoString() string {
	return s.String()
}

func (s *DescribePlayQoeListRequest) SetAppName(v string) *DescribePlayQoeListRequest {
	s.AppName = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetBeginTs(v int64) *DescribePlayQoeListRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetDefinition(v string) *DescribePlayQoeListRequest {
	s.Definition = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetEndTs(v int64) *DescribePlayQoeListRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetItemConfigs(v string) *DescribePlayQoeListRequest {
	s.ItemConfigs = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetMetricType(v string) *DescribePlayQoeListRequest {
	s.MetricType = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetNetwork(v string) *DescribePlayQoeListRequest {
	s.Network = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetOs(v string) *DescribePlayQoeListRequest {
	s.Os = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetPageNo(v int32) *DescribePlayQoeListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetPageSize(v int32) *DescribePlayQoeListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePlayQoeListRequest) SetTerminalType(v string) *DescribePlayQoeListRequest {
	s.TerminalType = &v
	return s
}

type DescribePlayQoeListResponseBody struct {
	PageNo      *int64                                        `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize    *int64                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QoeInfoList []*DescribePlayQoeListResponseBodyQoeInfoList `json:"QoeInfoList,omitempty" xml:"QoeInfoList,omitempty" type:"Repeated"`
	// Id
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePlayQoeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQoeListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePlayQoeListResponseBody) SetPageNo(v int64) *DescribePlayQoeListResponseBody {
	s.PageNo = &v
	return s
}

func (s *DescribePlayQoeListResponseBody) SetPageSize(v int64) *DescribePlayQoeListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePlayQoeListResponseBody) SetQoeInfoList(v []*DescribePlayQoeListResponseBodyQoeInfoList) *DescribePlayQoeListResponseBody {
	s.QoeInfoList = v
	return s
}

func (s *DescribePlayQoeListResponseBody) SetRequestId(v string) *DescribePlayQoeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePlayQoeListResponseBody) SetTotalCount(v int64) *DescribePlayQoeListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePlayQoeListResponseBodyQoeInfoList struct {
	QoeFinishedVV      *float32 `json:"QoeFinishedVV,omitempty" xml:"QoeFinishedVV,omitempty"`
	QoeFinishedVVRate  *float32 `json:"QoeFinishedVVRate,omitempty" xml:"QoeFinishedVVRate,omitempty"`
	QoeUFinishedVVTime *float32 `json:"QoeUFinishedVVTime,omitempty" xml:"QoeUFinishedVVTime,omitempty"`
	QoeUV              *float32 `json:"QoeUV,omitempty" xml:"QoeUV,omitempty"`
	QoeUVVDuration     *float32 `json:"QoeUVVDuration,omitempty" xml:"QoeUVVDuration,omitempty"`
	QoeUVVTime         *float32 `json:"QoeUVVTime,omitempty" xml:"QoeUVVTime,omitempty"`
	QoeVDuration       *float32 `json:"QoeVDuration,omitempty" xml:"QoeVDuration,omitempty"`
	QoeVVDuration      *float32 `json:"QoeVVDuration,omitempty" xml:"QoeVVDuration,omitempty"`
	Vpsid              *string  `json:"Vpsid,omitempty" xml:"Vpsid,omitempty"`
}

func (s DescribePlayQoeListResponseBodyQoeInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQoeListResponseBodyQoeInfoList) GoString() string {
	return s.String()
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeFinishedVV(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeFinishedVV = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeFinishedVVRate(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeFinishedVVRate = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeUFinishedVVTime(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeUFinishedVVTime = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeUV(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeUV = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeUVVDuration(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeUVVDuration = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeUVVTime(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeUVVTime = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeVDuration(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeVDuration = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetQoeVVDuration(v float32) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.QoeVVDuration = &v
	return s
}

func (s *DescribePlayQoeListResponseBodyQoeInfoList) SetVpsid(v string) *DescribePlayQoeListResponseBodyQoeInfoList {
	s.Vpsid = &v
	return s
}

type DescribePlayQoeListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePlayQoeListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePlayQoeListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQoeListResponse) GoString() string {
	return s.String()
}

func (s *DescribePlayQoeListResponse) SetHeaders(v map[string]*string) *DescribePlayQoeListResponse {
	s.Headers = v
	return s
}

func (s *DescribePlayQoeListResponse) SetStatusCode(v int32) *DescribePlayQoeListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePlayQoeListResponse) SetBody(v *DescribePlayQoeListResponseBody) *DescribePlayQoeListResponse {
	s.Body = v
	return s
}

type DescribePlayQosListRequest struct {
	AppName      *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	BeginTs      *string `json:"BeginTs,omitempty" xml:"BeginTs,omitempty"`
	Definition   *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	EndTs        *string `json:"EndTs,omitempty" xml:"EndTs,omitempty"`
	ItemConfigs  *string `json:"ItemConfigs,omitempty" xml:"ItemConfigs,omitempty"`
	MetricType   *string `json:"MetricType,omitempty" xml:"MetricType,omitempty"`
	Network      *string `json:"Network,omitempty" xml:"Network,omitempty"`
	Os           *string `json:"Os,omitempty" xml:"Os,omitempty"`
	PageNo       *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize     *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TerminalType *string `json:"TerminalType,omitempty" xml:"TerminalType,omitempty"`
}

func (s DescribePlayQosListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQosListRequest) GoString() string {
	return s.String()
}

func (s *DescribePlayQosListRequest) SetAppName(v string) *DescribePlayQosListRequest {
	s.AppName = &v
	return s
}

func (s *DescribePlayQosListRequest) SetBeginTs(v string) *DescribePlayQosListRequest {
	s.BeginTs = &v
	return s
}

func (s *DescribePlayQosListRequest) SetDefinition(v string) *DescribePlayQosListRequest {
	s.Definition = &v
	return s
}

func (s *DescribePlayQosListRequest) SetEndTs(v string) *DescribePlayQosListRequest {
	s.EndTs = &v
	return s
}

func (s *DescribePlayQosListRequest) SetItemConfigs(v string) *DescribePlayQosListRequest {
	s.ItemConfigs = &v
	return s
}

func (s *DescribePlayQosListRequest) SetMetricType(v string) *DescribePlayQosListRequest {
	s.MetricType = &v
	return s
}

func (s *DescribePlayQosListRequest) SetNetwork(v string) *DescribePlayQosListRequest {
	s.Network = &v
	return s
}

func (s *DescribePlayQosListRequest) SetOs(v string) *DescribePlayQosListRequest {
	s.Os = &v
	return s
}

func (s *DescribePlayQosListRequest) SetPageNo(v int32) *DescribePlayQosListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribePlayQosListRequest) SetPageSize(v int32) *DescribePlayQosListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribePlayQosListRequest) SetTerminalType(v string) *DescribePlayQosListRequest {
	s.TerminalType = &v
	return s
}

type DescribePlayQosListResponseBody struct {
	PageNo      *int64                                        `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize    *int64                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QosInfoList []*DescribePlayQosListResponseBodyQosInfoList `json:"QosInfoList,omitempty" xml:"QosInfoList,omitempty" type:"Repeated"`
	// Id
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribePlayQosListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQosListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePlayQosListResponseBody) SetPageNo(v int64) *DescribePlayQosListResponseBody {
	s.PageNo = &v
	return s
}

func (s *DescribePlayQosListResponseBody) SetPageSize(v int64) *DescribePlayQosListResponseBody {
	s.PageSize = &v
	return s
}

func (s *DescribePlayQosListResponseBody) SetQosInfoList(v []*DescribePlayQosListResponseBodyQosInfoList) *DescribePlayQosListResponseBody {
	s.QosInfoList = v
	return s
}

func (s *DescribePlayQosListResponseBody) SetRequestId(v string) *DescribePlayQosListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePlayQosListResponseBody) SetTotalCount(v int64) *DescribePlayQosListResponseBody {
	s.TotalCount = &v
	return s
}

type DescribePlayQosListResponseBodyQosInfoList struct {
	QosFirstFrame   *string `json:"QosFirstFrame,omitempty" xml:"QosFirstFrame,omitempty"`
	QosKbps         *string `json:"QosKbps,omitempty" xml:"QosKbps,omitempty"`
	QosPlay         *string `json:"QosPlay,omitempty" xml:"QosPlay,omitempty"`
	QosPlayFail     *string `json:"QosPlayFail,omitempty" xml:"QosPlayFail,omitempty"`
	QosRealPlay     *string `json:"QosRealPlay,omitempty" xml:"QosRealPlay,omitempty"`
	QosSeedFailRate *string `json:"QosSeedFailRate,omitempty" xml:"QosSeedFailRate,omitempty"`
	QosStuckRate    *string `json:"QosStuckRate,omitempty" xml:"QosStuckRate,omitempty"`
	Vpsid           *string `json:"Vpsid,omitempty" xml:"Vpsid,omitempty"`
}

func (s DescribePlayQosListResponseBodyQosInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQosListResponseBodyQosInfoList) GoString() string {
	return s.String()
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetQosFirstFrame(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.QosFirstFrame = &v
	return s
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetQosKbps(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.QosKbps = &v
	return s
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetQosPlay(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.QosPlay = &v
	return s
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetQosPlayFail(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.QosPlayFail = &v
	return s
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetQosRealPlay(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.QosRealPlay = &v
	return s
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetQosSeedFailRate(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.QosSeedFailRate = &v
	return s
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetQosStuckRate(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.QosStuckRate = &v
	return s
}

func (s *DescribePlayQosListResponseBodyQosInfoList) SetVpsid(v string) *DescribePlayQosListResponseBodyQosInfoList {
	s.Vpsid = &v
	return s
}

type DescribePlayQosListResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribePlayQosListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribePlayQosListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePlayQosListResponse) GoString() string {
	return s.String()
}

func (s *DescribePlayQosListResponse) SetHeaders(v map[string]*string) *DescribePlayQosListResponse {
	s.Headers = v
	return s
}

func (s *DescribePlayQosListResponse) SetStatusCode(v int32) *DescribePlayQosListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePlayQosListResponse) SetBody(v *DescribePlayQosListResponseBody) *DescribePlayQosListResponse {
	s.Body = v
	return s
}

type DescribeQueryConfigsRequest struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeQueryConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribeQueryConfigsRequest) SetType(v string) *DescribeQueryConfigsRequest {
	s.Type = &v
	return s
}

type DescribeQueryConfigsResponseBody struct {
	Configs []*DescribeQueryConfigsResponseBodyConfigs `json:"Configs,omitempty" xml:"Configs,omitempty" type:"Repeated"`
	// Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeQueryConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQueryConfigsResponseBody) SetConfigs(v []*DescribeQueryConfigsResponseBodyConfigs) *DescribeQueryConfigsResponseBody {
	s.Configs = v
	return s
}

func (s *DescribeQueryConfigsResponseBody) SetRequestId(v string) *DescribeQueryConfigsResponseBody {
	s.RequestId = &v
	return s
}

type DescribeQueryConfigsResponseBodyConfigs struct {
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeQueryConfigsResponseBodyConfigs) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryConfigsResponseBodyConfigs) GoString() string {
	return s.String()
}

func (s *DescribeQueryConfigsResponseBodyConfigs) SetValue(v string) *DescribeQueryConfigsResponseBodyConfigs {
	s.Value = &v
	return s
}

type DescribeQueryConfigsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeQueryConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeQueryConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQueryConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribeQueryConfigsResponse) SetHeaders(v map[string]*string) *DescribeQueryConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribeQueryConfigsResponse) SetStatusCode(v int32) *DescribeQueryConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQueryConfigsResponse) SetBody(v *DescribeQueryConfigsResponseBody) *DescribeQueryConfigsResponse {
	s.Body = v
	return s
}

type DownloadResourceByResourceIdsRequest struct {
	// 资源id号
	ResourceIds *string `json:"ResourceIds,omitempty" xml:"ResourceIds,omitempty"`
}

func (s DownloadResourceByResourceIdsRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadResourceByResourceIdsRequest) GoString() string {
	return s.String()
}

func (s *DownloadResourceByResourceIdsRequest) SetResourceIds(v string) *DownloadResourceByResourceIdsRequest {
	s.ResourceIds = &v
	return s
}

type DownloadResourceByResourceIdsResponseBody struct {
	// 过期时间
	ExpireTime *int64 `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// 请求Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 资源地址
	ResourcePackageUrl *string `json:"ResourcePackageUrl,omitempty" xml:"ResourcePackageUrl,omitempty"`
}

func (s DownloadResourceByResourceIdsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadResourceByResourceIdsResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadResourceByResourceIdsResponseBody) SetExpireTime(v int64) *DownloadResourceByResourceIdsResponseBody {
	s.ExpireTime = &v
	return s
}

func (s *DownloadResourceByResourceIdsResponseBody) SetRequestId(v string) *DownloadResourceByResourceIdsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadResourceByResourceIdsResponseBody) SetResourcePackageUrl(v string) *DownloadResourceByResourceIdsResponseBody {
	s.ResourcePackageUrl = &v
	return s
}

type DownloadResourceByResourceIdsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DownloadResourceByResourceIdsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DownloadResourceByResourceIdsResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadResourceByResourceIdsResponse) GoString() string {
	return s.String()
}

func (s *DownloadResourceByResourceIdsResponse) SetHeaders(v map[string]*string) *DownloadResourceByResourceIdsResponse {
	s.Headers = v
	return s
}

func (s *DownloadResourceByResourceIdsResponse) SetStatusCode(v int32) *DownloadResourceByResourceIdsResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadResourceByResourceIdsResponse) SetBody(v *DownloadResourceByResourceIdsResponseBody) *DownloadResourceByResourceIdsResponse {
	s.Body = v
	return s
}

type GetAuditConfigRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
}

func (s GetAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *GetAuditConfigRequest) SetAppId(v string) *GetAuditConfigRequest {
	s.AppId = &v
	return s
}

type GetAuditConfigResponseBody struct {
	Audit     *GetAuditConfigResponseBodyAudit `json:"Audit,omitempty" xml:"Audit,omitempty" type:"Struct"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetAuditConfigResponseBody) SetAudit(v *GetAuditConfigResponseBodyAudit) *GetAuditConfigResponseBody {
	s.Audit = v
	return s
}

func (s *GetAuditConfigResponseBody) SetRequestId(v string) *GetAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type GetAuditConfigResponseBodyAudit struct {
	Channel     *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LegalSwitch *string `json:"LegalSwitch,omitempty" xml:"LegalSwitch,omitempty"`
	UpdateTime  *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAuditConfigResponseBodyAudit) String() string {
	return tea.Prettify(s)
}

func (s GetAuditConfigResponseBodyAudit) GoString() string {
	return s.String()
}

func (s *GetAuditConfigResponseBodyAudit) SetChannel(v string) *GetAuditConfigResponseBodyAudit {
	s.Channel = &v
	return s
}

func (s *GetAuditConfigResponseBodyAudit) SetCreateTime(v string) *GetAuditConfigResponseBodyAudit {
	s.CreateTime = &v
	return s
}

func (s *GetAuditConfigResponseBodyAudit) SetLegalSwitch(v string) *GetAuditConfigResponseBodyAudit {
	s.LegalSwitch = &v
	return s
}

func (s *GetAuditConfigResponseBodyAudit) SetUpdateTime(v string) *GetAuditConfigResponseBodyAudit {
	s.UpdateTime = &v
	return s
}

func (s *GetAuditConfigResponseBodyAudit) SetUserId(v string) *GetAuditConfigResponseBodyAudit {
	s.UserId = &v
	return s
}

type GetAuditConfigResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *GetAuditConfigResponse) SetHeaders(v map[string]*string) *GetAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *GetAuditConfigResponse) SetStatusCode(v int32) *GetAuditConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAuditConfigResponse) SetBody(v *GetAuditConfigResponseBody) *GetAuditConfigResponse {
	s.Body = v
	return s
}

type GetCategoriesRequest struct {
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	PageNo   *int64  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortBy   *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesRequest) GoString() string {
	return s.String()
}

func (s *GetCategoriesRequest) SetCateId(v int64) *GetCategoriesRequest {
	s.CateId = &v
	return s
}

func (s *GetCategoriesRequest) SetPageNo(v int64) *GetCategoriesRequest {
	s.PageNo = &v
	return s
}

func (s *GetCategoriesRequest) SetPageSize(v int64) *GetCategoriesRequest {
	s.PageSize = &v
	return s
}

func (s *GetCategoriesRequest) SetSortBy(v string) *GetCategoriesRequest {
	s.SortBy = &v
	return s
}

func (s *GetCategoriesRequest) SetType(v string) *GetCategoriesRequest {
	s.Type = &v
	return s
}

type GetCategoriesResponseBody struct {
	Category      *GetCategoriesResponseBodyCategory      `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubCategories *GetCategoriesResponseBodySubCategories `json:"SubCategories,omitempty" xml:"SubCategories,omitempty" type:"Struct"`
	SubTotal      *int64                                  `json:"SubTotal,omitempty" xml:"SubTotal,omitempty"`
}

func (s GetCategoriesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBody) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBody) SetCategory(v *GetCategoriesResponseBodyCategory) *GetCategoriesResponseBody {
	s.Category = v
	return s
}

func (s *GetCategoriesResponseBody) SetRequestId(v string) *GetCategoriesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetCategoriesResponseBody) SetSubCategories(v *GetCategoriesResponseBodySubCategories) *GetCategoriesResponseBody {
	s.SubCategories = v
	return s
}

func (s *GetCategoriesResponseBody) SetSubTotal(v int64) *GetCategoriesResponseBody {
	s.SubTotal = &v
	return s
}

type GetCategoriesResponseBodyCategory struct {
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	Level    *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	ParentId *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodyCategory) SetCateId(v int64) *GetCategoriesResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetCateName(v string) *GetCategoriesResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetLevel(v int64) *GetCategoriesResponseBodyCategory {
	s.Level = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetParentId(v int64) *GetCategoriesResponseBodyCategory {
	s.ParentId = &v
	return s
}

func (s *GetCategoriesResponseBodyCategory) SetType(v string) *GetCategoriesResponseBodyCategory {
	s.Type = &v
	return s
}

type GetCategoriesResponseBodySubCategories struct {
	Category []*GetCategoriesResponseBodySubCategoriesCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s GetCategoriesResponseBodySubCategories) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodySubCategories) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodySubCategories) SetCategory(v []*GetCategoriesResponseBodySubCategoriesCategory) *GetCategoriesResponseBodySubCategories {
	s.Category = v
	return s
}

type GetCategoriesResponseBodySubCategoriesCategory struct {
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	Level    *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	ParentId *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	SubTotal *int64  `json:"SubTotal,omitempty" xml:"SubTotal,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCategoriesResponseBodySubCategoriesCategory) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponseBodySubCategoriesCategory) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetCateId(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.CateId = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetCateName(v string) *GetCategoriesResponseBodySubCategoriesCategory {
	s.CateName = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetLevel(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.Level = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetParentId(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.ParentId = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetSubTotal(v int64) *GetCategoriesResponseBodySubCategoriesCategory {
	s.SubTotal = &v
	return s
}

func (s *GetCategoriesResponseBodySubCategoriesCategory) SetType(v string) *GetCategoriesResponseBodySubCategoriesCategory {
	s.Type = &v
	return s
}

type GetCategoriesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCategoriesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCategoriesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCategoriesResponse) GoString() string {
	return s.String()
}

func (s *GetCategoriesResponse) SetHeaders(v map[string]*string) *GetCategoriesResponse {
	s.Headers = v
	return s
}

func (s *GetCategoriesResponse) SetStatusCode(v int32) *GetCategoriesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCategoriesResponse) SetBody(v *GetCategoriesResponseBody) *GetCategoriesResponse {
	s.Body = v
	return s
}

type GetClientConfigRequest struct {
	// 云端配置所对应的IOS BundleId
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// 云端配置所对应的包名。
	PkgName *string `json:"PkgName,omitempty" xml:"PkgName,omitempty"`
	// 云端配置所对应的包签名
	PkgSignature *string `json:"PkgSignature,omitempty" xml:"PkgSignature,omitempty"`
}

func (s GetClientConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s GetClientConfigRequest) GoString() string {
	return s.String()
}

func (s *GetClientConfigRequest) SetBundleId(v string) *GetClientConfigRequest {
	s.BundleId = &v
	return s
}

func (s *GetClientConfigRequest) SetPkgName(v string) *GetClientConfigRequest {
	s.PkgName = &v
	return s
}

func (s *GetClientConfigRequest) SetPkgSignature(v string) *GetClientConfigRequest {
	s.PkgSignature = &v
	return s
}

type GetClientConfigResponseBody struct {
	// oss bucket 名称
	ClientUploadBucket *string `json:"ClientUploadBucket,omitempty" xml:"ClientUploadBucket,omitempty"`
	// 路径
	ClientUploadPath *string `json:"ClientUploadPath,omitempty" xml:"ClientUploadPath,omitempty"`
	// 状态
	ClientUploadStorageStatus *string `json:"ClientUploadStorageStatus,omitempty" xml:"ClientUploadStorageStatus,omitempty"`
	// 存储类型
	ClientUploadStorageType *string `json:"ClientUploadStorageType,omitempty" xml:"ClientUploadStorageType,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetClientConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetClientConfigResponseBody) GoString() string {
	return s.String()
}

func (s *GetClientConfigResponseBody) SetClientUploadBucket(v string) *GetClientConfigResponseBody {
	s.ClientUploadBucket = &v
	return s
}

func (s *GetClientConfigResponseBody) SetClientUploadPath(v string) *GetClientConfigResponseBody {
	s.ClientUploadPath = &v
	return s
}

func (s *GetClientConfigResponseBody) SetClientUploadStorageStatus(v string) *GetClientConfigResponseBody {
	s.ClientUploadStorageStatus = &v
	return s
}

func (s *GetClientConfigResponseBody) SetClientUploadStorageType(v string) *GetClientConfigResponseBody {
	s.ClientUploadStorageType = &v
	return s
}

func (s *GetClientConfigResponseBody) SetRequestId(v string) *GetClientConfigResponseBody {
	s.RequestId = &v
	return s
}

type GetClientConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetClientConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetClientConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s GetClientConfigResponse) GoString() string {
	return s.String()
}

func (s *GetClientConfigResponse) SetHeaders(v map[string]*string) *GetClientConfigResponse {
	s.Headers = v
	return s
}

func (s *GetClientConfigResponse) SetStatusCode(v int32) *GetClientConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *GetClientConfigResponse) SetBody(v *GetClientConfigResponseBody) *GetClientConfigResponse {
	s.Body = v
	return s
}

type GetCustomTemplateRequest struct {
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Type       *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateRequest) SetSubtype(v int32) *GetCustomTemplateRequest {
	s.Subtype = &v
	return s
}

func (s *GetCustomTemplateRequest) SetTemplateId(v string) *GetCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *GetCustomTemplateRequest) SetType(v int32) *GetCustomTemplateRequest {
	s.Type = &v
	return s
}

type GetCustomTemplateResponseBody struct {
	// 模板信息
	CustomTemplate *GetCustomTemplateResponseBodyCustomTemplate `json:"CustomTemplate,omitempty" xml:"CustomTemplate,omitempty" type:"Struct"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBody) SetCustomTemplate(v *GetCustomTemplateResponseBodyCustomTemplate) *GetCustomTemplateResponseBody {
	s.CustomTemplate = v
	return s
}

func (s *GetCustomTemplateResponseBody) SetRequestId(v string) *GetCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

type GetCustomTemplateResponseBodyCustomTemplate struct {
	// 模板创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 是否默认模板
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// 模板修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板子类型ID
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板子类型名称
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// 模板参数
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板名称
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// 模板类型ID
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// 模板类型名称
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s GetCustomTemplateResponseBodyCustomTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponseBodyCustomTemplate) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetCreateTime(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.CreateTime = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetIsDefault(v bool) *GetCustomTemplateResponseBodyCustomTemplate {
	s.IsDefault = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetModifiedTime(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetStatus(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Status = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetSubtype(v int32) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Subtype = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetSubtypeName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.SubtypeName = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateConfig(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateId(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTemplateName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TemplateName = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetType(v int32) *GetCustomTemplateResponseBodyCustomTemplate {
	s.Type = &v
	return s
}

func (s *GetCustomTemplateResponseBodyCustomTemplate) SetTypeName(v string) *GetCustomTemplateResponseBodyCustomTemplate {
	s.TypeName = &v
	return s
}

type GetCustomTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetCustomTemplateResponse) SetHeaders(v map[string]*string) *GetCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetCustomTemplateResponse) SetStatusCode(v int32) *GetCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetCustomTemplateResponse) SetBody(v *GetCustomTemplateResponseBody) *GetCustomTemplateResponse {
	s.Body = v
	return s
}

type GetDefaultStorageLocationResponseBody struct {
	// oss bucket 名称
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// 路径
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 存储类型
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s GetDefaultStorageLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultStorageLocationResponseBody) GoString() string {
	return s.String()
}

func (s *GetDefaultStorageLocationResponseBody) SetBucket(v string) *GetDefaultStorageLocationResponseBody {
	s.Bucket = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetPath(v string) *GetDefaultStorageLocationResponseBody {
	s.Path = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetRequestId(v string) *GetDefaultStorageLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetStatus(v string) *GetDefaultStorageLocationResponseBody {
	s.Status = &v
	return s
}

func (s *GetDefaultStorageLocationResponseBody) SetStorageType(v string) *GetDefaultStorageLocationResponseBody {
	s.StorageType = &v
	return s
}

type GetDefaultStorageLocationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDefaultStorageLocationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDefaultStorageLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDefaultStorageLocationResponse) GoString() string {
	return s.String()
}

func (s *GetDefaultStorageLocationResponse) SetHeaders(v map[string]*string) *GetDefaultStorageLocationResponse {
	s.Headers = v
	return s
}

func (s *GetDefaultStorageLocationResponse) SetStatusCode(v int32) *GetDefaultStorageLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDefaultStorageLocationResponse) SetBody(v *GetDefaultStorageLocationResponseBody) *GetDefaultStorageLocationResponse {
	s.Body = v
	return s
}

type GetDynamicImageJobRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetDynamicImageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobRequest) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobRequest) SetJobId(v string) *GetDynamicImageJobRequest {
	s.JobId = &v
	return s
}

type GetDynamicImageJobResponseBody struct {
	// 截图任务信息
	DynamicImageJob *GetDynamicImageJobResponseBodyDynamicImageJob `json:"DynamicImageJob,omitempty" xml:"DynamicImageJob,omitempty" type:"Struct"`
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetDynamicImageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBody) SetDynamicImageJob(v *GetDynamicImageJobResponseBodyDynamicImageJob) *GetDynamicImageJobResponseBody {
	s.DynamicImageJob = v
	return s
}

func (s *GetDynamicImageJobResponseBody) SetRequestId(v string) *GetDynamicImageJobResponseBody {
	s.RequestId = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJob struct {
	Code           *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	CreateTime     *string                                              `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime     *string                                              `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input          *GetDynamicImageJobResponseBodyDynamicImageJobInput  `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId          *string                                              `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Message        *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	ModifiedTime   *string                                              `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Name           *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Output         *GetDynamicImageJobResponseBodyDynamicImageJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	OutputUrl      *string                                              `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	PipelineId     *string                                              `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Status         *string                                              `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitTime     *string                                              `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	TemplateConfig *string                                              `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	TemplateId     *string                                              `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TriggerSource  *string                                              `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	UserData       *string                                              `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJob) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJob) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetCode(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Code = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetCreateTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.CreateTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetFinishTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.FinishTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetInput(v *GetDynamicImageJobResponseBodyDynamicImageJobInput) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Input = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetJobId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.JobId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetMessage(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Message = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetModifiedTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetName(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Name = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetOutput(v *GetDynamicImageJobResponseBodyDynamicImageJobOutput) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Output = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetOutputUrl(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.OutputUrl = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetPipelineId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.PipelineId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetStatus(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.Status = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetSubmitTime(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.SubmitTime = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTemplateConfig(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TemplateConfig = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTemplateId(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TemplateId = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetTriggerSource(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.TriggerSource = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJob) SetUserData(v string) *GetDynamicImageJobResponseBodyDynamicImageJob {
	s.UserData = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 输入类型为媒资ID时的OSS地址
	OssFile *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	Type    *string                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInput) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetMedia(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.Media = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetOssFile(v *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.OssFile = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInput) SetType(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInput {
	s.Type = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetBucket(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetLocation(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Location = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile) SetObject(v string) *GetDynamicImageJobResponseBodyDynamicImageJobInputOssFile {
	s.Object = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 输出类型为媒资ID时的OSS地址
	OssFile *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	Type    *string                                                     `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutput) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetMedia(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.Media = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetOssFile(v *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.OssFile = v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutput) SetType(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutput {
	s.Type = &v
	return s
}

type GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetBucket(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetLocation(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Location = &v
	return s
}

func (s *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile) SetObject(v string) *GetDynamicImageJobResponseBodyDynamicImageJobOutputOssFile {
	s.Object = &v
	return s
}

type GetDynamicImageJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDynamicImageJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDynamicImageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDynamicImageJobResponse) GoString() string {
	return s.String()
}

func (s *GetDynamicImageJobResponse) SetHeaders(v map[string]*string) *GetDynamicImageJobResponse {
	s.Headers = v
	return s
}

func (s *GetDynamicImageJobResponse) SetStatusCode(v int32) *GetDynamicImageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDynamicImageJobResponse) SetBody(v *GetDynamicImageJobResponseBody) *GetDynamicImageJobResponse {
	s.Body = v
	return s
}

type GetEditingProjectRequest struct {
	// 云剪辑工程ID
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *GetEditingProjectRequest) SetProjectId(v string) *GetEditingProjectRequest {
	s.ProjectId = &v
	return s
}

type GetEditingProjectResponseBody struct {
	Project *GetEditingProjectResponseBodyProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponseBody) SetProject(v *GetEditingProjectResponseBodyProject) *GetEditingProjectResponseBody {
	s.Project = v
	return s
}

func (s *GetEditingProjectResponseBody) SetRequestId(v string) *GetEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type GetEditingProjectResponseBodyProject struct {
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// 模板素材参数
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// 云剪辑工程封面
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 云剪辑工程创建来源
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// 云剪辑工程创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 云剪辑工程描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 云剪辑工程总时长
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 云剪辑工程修改来源
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// 云剪辑工程最新修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 云剪辑工程ID
	ProjectId   *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// 云剪辑工程状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 云剪辑工程模板类型
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// 云剪辑工程时间线
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// 云剪辑工程标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetEditingProjectResponseBodyProject) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponseBodyProject) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponseBodyProject) SetBusinessConfig(v string) *GetEditingProjectResponseBodyProject {
	s.BusinessConfig = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetBusinessStatus(v string) *GetEditingProjectResponseBodyProject {
	s.BusinessStatus = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetClipsParam(v string) *GetEditingProjectResponseBodyProject {
	s.ClipsParam = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCoverURL(v string) *GetEditingProjectResponseBodyProject {
	s.CoverURL = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCreateSource(v string) *GetEditingProjectResponseBodyProject {
	s.CreateSource = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetCreateTime(v string) *GetEditingProjectResponseBodyProject {
	s.CreateTime = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetDescription(v string) *GetEditingProjectResponseBodyProject {
	s.Description = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetDuration(v int64) *GetEditingProjectResponseBodyProject {
	s.Duration = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetModifiedSource(v string) *GetEditingProjectResponseBodyProject {
	s.ModifiedSource = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetModifiedTime(v string) *GetEditingProjectResponseBodyProject {
	s.ModifiedTime = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetProjectId(v string) *GetEditingProjectResponseBodyProject {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetProjectType(v string) *GetEditingProjectResponseBodyProject {
	s.ProjectType = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetStatus(v string) *GetEditingProjectResponseBodyProject {
	s.Status = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTemplateId(v string) *GetEditingProjectResponseBodyProject {
	s.TemplateId = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTemplateType(v string) *GetEditingProjectResponseBodyProject {
	s.TemplateType = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTimeline(v string) *GetEditingProjectResponseBodyProject {
	s.Timeline = &v
	return s
}

func (s *GetEditingProjectResponseBodyProject) SetTitle(v string) *GetEditingProjectResponseBodyProject {
	s.Title = &v
	return s
}

type GetEditingProjectResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *GetEditingProjectResponse) SetHeaders(v map[string]*string) *GetEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *GetEditingProjectResponse) SetStatusCode(v int32) *GetEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEditingProjectResponse) SetBody(v *GetEditingProjectResponseBody) *GetEditingProjectResponse {
	s.Body = v
	return s
}

type GetEditingProjectMaterialsRequest struct {
	// 云剪辑工程ID
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s GetEditingProjectMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsRequest) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsRequest) SetProjectId(v string) *GetEditingProjectMaterialsRequest {
	s.ProjectId = &v
	return s
}

type GetEditingProjectMaterialsResponseBody struct {
	LiveMaterials []*GetEditingProjectMaterialsResponseBodyLiveMaterials `json:"LiveMaterials,omitempty" xml:"LiveMaterials,omitempty" type:"Repeated"`
	// 符合要求的媒资集合
	MediaInfos       []*GetEditingProjectMaterialsResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	ProjectId        *string                                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectMaterials []*string                                           `json:"ProjectMaterials,omitempty" xml:"ProjectMaterials,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBody) SetLiveMaterials(v []*GetEditingProjectMaterialsResponseBodyLiveMaterials) *GetEditingProjectMaterialsResponseBody {
	s.LiveMaterials = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetMediaInfos(v []*GetEditingProjectMaterialsResponseBodyMediaInfos) *GetEditingProjectMaterialsResponseBody {
	s.MediaInfos = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetProjectId(v string) *GetEditingProjectMaterialsResponseBody {
	s.ProjectId = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetProjectMaterials(v []*string) *GetEditingProjectMaterialsResponseBody {
	s.ProjectMaterials = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBody) SetRequestId(v string) *GetEditingProjectMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyLiveMaterials struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	LiveUrl    *string `json:"LiveUrl,omitempty" xml:"LiveUrl,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyLiveMaterials) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyLiveMaterials) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetAppName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.AppName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetDomainName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.DomainName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetLiveUrl(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.LiveUrl = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyLiveMaterials) SetStreamName(v string) *GetEditingProjectMaterialsResponseBodyLiveMaterials {
	s.StreamName = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetFileInfoList(v []*GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetMediaBasicInfo(v *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfos) SetMediaId(v string) *GetEditingProjectMaterialsResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList struct {
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 待注册的媒资在相应系统中的地址
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 截图
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 转码状态
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *GetEditingProjectMaterialsResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetEditingProjectMaterialsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEditingProjectMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEditingProjectMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEditingProjectMaterialsResponse) GoString() string {
	return s.String()
}

func (s *GetEditingProjectMaterialsResponse) SetHeaders(v map[string]*string) *GetEditingProjectMaterialsResponse {
	s.Headers = v
	return s
}

func (s *GetEditingProjectMaterialsResponse) SetStatusCode(v int32) *GetEditingProjectMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEditingProjectMaterialsResponse) SetBody(v *GetEditingProjectMaterialsResponseBody) *GetEditingProjectMaterialsResponse {
	s.Body = v
	return s
}

type GetEventCallbackResponseBody struct {
	AuthKey           *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	AuthSwitch        *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	CallbackQueueName *string `json:"CallbackQueueName,omitempty" xml:"CallbackQueueName,omitempty"`
	CallbackType      *string `json:"CallbackType,omitempty" xml:"CallbackType,omitempty"`
	CallbackURL       *string `json:"CallbackURL,omitempty" xml:"CallbackURL,omitempty"`
	EventTypeList     *string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetEventCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventCallbackResponseBody) SetAuthKey(v string) *GetEventCallbackResponseBody {
	s.AuthKey = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetAuthSwitch(v string) *GetEventCallbackResponseBody {
	s.AuthSwitch = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackQueueName(v string) *GetEventCallbackResponseBody {
	s.CallbackQueueName = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackType(v string) *GetEventCallbackResponseBody {
	s.CallbackType = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetCallbackURL(v string) *GetEventCallbackResponseBody {
	s.CallbackURL = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetEventTypeList(v string) *GetEventCallbackResponseBody {
	s.EventTypeList = &v
	return s
}

func (s *GetEventCallbackResponseBody) SetRequestId(v string) *GetEventCallbackResponseBody {
	s.RequestId = &v
	return s
}

type GetEventCallbackResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEventCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEventCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventCallbackResponse) GoString() string {
	return s.String()
}

func (s *GetEventCallbackResponse) SetHeaders(v map[string]*string) *GetEventCallbackResponse {
	s.Headers = v
	return s
}

func (s *GetEventCallbackResponse) SetStatusCode(v int32) *GetEventCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventCallbackResponse) SetBody(v *GetEventCallbackResponseBody) *GetEventCallbackResponse {
	s.Body = v
	return s
}

type GetLiveEditingIndexFileRequest struct {
	AppName    *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetLiveEditingIndexFileRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileRequest) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileRequest) SetAppName(v string) *GetLiveEditingIndexFileRequest {
	s.AppName = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetDomainName(v string) *GetLiveEditingIndexFileRequest {
	s.DomainName = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetProjectId(v string) *GetLiveEditingIndexFileRequest {
	s.ProjectId = &v
	return s
}

func (s *GetLiveEditingIndexFileRequest) SetStreamName(v string) *GetLiveEditingIndexFileRequest {
	s.StreamName = &v
	return s
}

type GetLiveEditingIndexFileResponseBody struct {
	IndexFile *string `json:"IndexFile,omitempty" xml:"IndexFile,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveEditingIndexFileResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileResponseBody) SetIndexFile(v string) *GetLiveEditingIndexFileResponseBody {
	s.IndexFile = &v
	return s
}

func (s *GetLiveEditingIndexFileResponseBody) SetRequestId(v string) *GetLiveEditingIndexFileResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveEditingIndexFileResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetLiveEditingIndexFileResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLiveEditingIndexFileResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingIndexFileResponse) GoString() string {
	return s.String()
}

func (s *GetLiveEditingIndexFileResponse) SetHeaders(v map[string]*string) *GetLiveEditingIndexFileResponse {
	s.Headers = v
	return s
}

func (s *GetLiveEditingIndexFileResponse) SetStatusCode(v int32) *GetLiveEditingIndexFileResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveEditingIndexFileResponse) SetBody(v *GetLiveEditingIndexFileResponseBody) *GetLiveEditingIndexFileResponse {
	s.Body = v
	return s
}

type GetLiveEditingJobRequest struct {
	// 直播剪辑JobId
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveEditingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobRequest) SetJobId(v string) *GetLiveEditingJobRequest {
	s.JobId = &v
	return s
}

type GetLiveEditingJobResponseBody struct {
	// 直播剪辑任务
	LiveEditingJob *GetLiveEditingJobResponseBodyLiveEditingJob `json:"LiveEditingJob,omitempty" xml:"LiveEditingJob,omitempty" type:"Struct"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveEditingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBody) SetLiveEditingJob(v *GetLiveEditingJobResponseBodyLiveEditingJob) *GetLiveEditingJobResponseBody {
	s.LiveEditingJob = v
	return s
}

func (s *GetLiveEditingJobResponseBody) SetRequestId(v string) *GetLiveEditingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJob struct {
	// 剪辑片段列表
	Clips *string `json:"Clips,omitempty" xml:"Clips,omitempty"`
	// 剪辑合成作业错误码  注：作业失败时关注该字段
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 直播剪辑作业完成时间，格式为utc时间。  格式为："2021-06-21T08:01:00Z"。
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	// 直播剪辑作业创建时间，格式为utc时间。  格式为："2021-06-21T08:01:00Z"。
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// 直播剪辑任务ID
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 直播剪辑配置
	LiveStreamConfig *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig `json:"LiveStreamConfig,omitempty" xml:"LiveStreamConfig,omitempty" type:"Struct"`
	// 输出成品的资源Id
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 直播剪辑合成配置
	MediaProduceConfig *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig `json:"MediaProduceConfig,omitempty" xml:"MediaProduceConfig,omitempty" type:"Struct"`
	// 输出成品的资源文件URL
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// 剪辑合成作业错误信息  注：作业失败时关注该字段
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// 直播剪辑作业修改时间，格式为utc时间。  格式为："2021-06-21T08:01:00Z"。
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 输出成片的存储配置
	OutputMediaConfig *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty" type:"Struct"`
	// 直播剪辑工程ID
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// 直播剪辑作业状态，取值可能为如下值：  -Init （初始状态）  -Queuing（排队中）  -Processing（处理中）  -Success（成功）  -Failed（失败）
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJob) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetClips(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Clips = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCode(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Code = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCompleteTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.CompleteTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetCreationTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.CreationTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetJobId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.JobId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetLiveStreamConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.LiveStreamConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaProduceConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaProduceConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMediaURL(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.MediaURL = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetMessage(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Message = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetModifiedTime(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetOutputMediaConfig(v *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.OutputMediaConfig = v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetProjectId(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.ProjectId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetStatus(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.Status = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJob) SetUserData(v string) *GetLiveEditingJobResponseBodyLiveEditingJob {
	s.UserData = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig struct {
	// 播流所属应用名称
	AppName *string `json:"AppName,omitempty" xml:"AppName,omitempty"`
	// 播流所属域名
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// 播流所属流名
	StreamName *string `json:"StreamName,omitempty" xml:"StreamName,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetAppName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.AppName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetDomainName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.DomainName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig) SetStreamName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobLiveStreamConfig {
	s.StreamName = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig struct {
	// 剪辑模式，默认Accurate
	Mode *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig) SetMode(v string) *GetLiveEditingJobResponseBodyLiveEditingJobMediaProduceConfig {
	s.Mode = &v
	return s
}

type GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig struct {
	// 输出成品的码率，单位为Kbps。可以不填，默认值是多个素材的最高码率
	Bitrate *int64 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 当 OutputMediaTarget 的目标为 vod-media 时，指定 fileName(包含文件后缀，不含路径）作为输出文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 输出成品的高。可以不填，默认值是多个素材的最大高
	Height *int32 `json:"Height,omitempty" xml:"Height,omitempty"`
	// 输出成片的文件地址
	MediaURL *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	// 当 OutputMediaTarget 的目标为 vod-media 时， 指定 storage location 来存储媒资到 VOD; storage location 是 VOD 中的文件存储位置， 不包含 http:// 的前缀， 如:  outin-xxxxxx.oss-cn-shanghai.aliyuncs.com
	StorageLocation *string `json:"StorageLocation,omitempty" xml:"StorageLocation,omitempty"`
	// 合成成片输出到vod，指定vod转码模板组。如不需要VOD转码，请填写 "VOD_NO_TRANSCODE".
	VodTemplateGroupId *string `json:"VodTemplateGroupId,omitempty" xml:"VodTemplateGroupId,omitempty"`
	// 输出成品的宽。可以不填，默认值是多个素材的最大宽
	Width *int32 `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetBitrate(v int64) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Bitrate = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetFileName(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.FileName = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetHeight(v int32) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Height = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetMediaURL(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.MediaURL = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetStorageLocation(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.StorageLocation = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetVodTemplateGroupId(v string) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.VodTemplateGroupId = &v
	return s
}

func (s *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig) SetWidth(v int32) *GetLiveEditingJobResponseBodyLiveEditingJobOutputMediaConfig {
	s.Width = &v
	return s
}

type GetLiveEditingJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetLiveEditingJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLiveEditingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveEditingJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveEditingJobResponse) SetHeaders(v map[string]*string) *GetLiveEditingJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveEditingJobResponse) SetStatusCode(v int32) *GetLiveEditingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveEditingJobResponse) SetBody(v *GetLiveEditingJobResponseBody) *GetLiveEditingJobResponse {
	s.Body = v
	return s
}

type GetLiveTranscodeJobRequest struct {
	// 模板Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobRequest) SetJobId(v string) *GetLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

type GetLiveTranscodeJobResponseBody struct {
	Job *GetLiveTranscodeJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBody) SetJob(v *GetLiveTranscodeJobResponseBodyJob) *GetLiveTranscodeJobResponseBody {
	s.Job = v
	return s
}

func (s *GetLiveTranscodeJobResponseBody) SetRequestId(v string) *GetLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJob struct {
	CreateTime   *string                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	JobId        *string                                         `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name         *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputStream *GetLiveTranscodeJobResponseBodyJobOutputStream `json:"OutputStream,omitempty" xml:"OutputStream,omitempty" type:"Struct"`
	StartMode    *int32                                          `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	Status       *int32                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInput  *GetLiveTranscodeJobResponseBodyJobStreamInput  `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	TemplateId   *string                                         `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string                                         `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateType *string                                         `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetCreateTime(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.CreateTime = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetJobId(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetName(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.Name = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetOutputStream(v *GetLiveTranscodeJobResponseBodyJobOutputStream) *GetLiveTranscodeJobResponseBodyJob {
	s.OutputStream = v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStartMode(v int32) *GetLiveTranscodeJobResponseBodyJob {
	s.StartMode = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStatus(v int32) *GetLiveTranscodeJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetStreamInput(v *GetLiveTranscodeJobResponseBodyJobStreamInput) *GetLiveTranscodeJobResponseBodyJob {
	s.StreamInput = v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateId(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateId = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateName(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateName = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJob) SetTemplateType(v string) *GetLiveTranscodeJobResponseBodyJob {
	s.TemplateType = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJobOutputStream struct {
	StreamInfos []*GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStream) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStream) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStream) SetStreamInfos(v []*GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) *GetLiveTranscodeJobResponseBodyJobOutputStream {
	s.StreamInfos = v
	return s
}

type GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos struct {
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) SetOutputUrl(v string) *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos {
	s.OutputUrl = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos) SetType(v string) *GetLiveTranscodeJobResponseBodyJobOutputStreamStreamInfos {
	s.Type = &v
	return s
}

type GetLiveTranscodeJobResponseBodyJobStreamInput struct {
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeJobResponseBodyJobStreamInput) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponseBodyJobStreamInput) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponseBodyJobStreamInput) SetInputUrl(v string) *GetLiveTranscodeJobResponseBodyJobStreamInput {
	s.InputUrl = &v
	return s
}

func (s *GetLiveTranscodeJobResponseBodyJobStreamInput) SetType(v string) *GetLiveTranscodeJobResponseBodyJobStreamInput {
	s.Type = &v
	return s
}

type GetLiveTranscodeJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *GetLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *GetLiveTranscodeJobResponse) SetStatusCode(v int32) *GetLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveTranscodeJobResponse) SetBody(v *GetLiveTranscodeJobResponseBody) *GetLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type GetLiveTranscodeTemplateRequest struct {
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateRequest) SetTemplateId(v string) *GetLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetLiveTranscodeTemplateResponseBody struct {
	// 请求ID
	RequestId       *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateContent *GetLiveTranscodeTemplateResponseBodyTemplateContent `json:"TemplateContent,omitempty" xml:"TemplateContent,omitempty" type:"Struct"`
}

func (s GetLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBody) SetRequestId(v string) *GetLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBody) SetTemplateContent(v *GetLiveTranscodeTemplateResponseBodyTemplateContent) *GetLiveTranscodeTemplateResponseBody {
	s.TemplateContent = v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContent struct {
	Category       *string                                                            `json:"Category,omitempty" xml:"Category,omitempty"`
	CreateTime     *string                                                            `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Name           *string                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfig *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	TemplateId     *string                                                            `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Type           *string                                                            `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContent) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContent) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetCategory(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Category = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetCreateTime(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.CreateTime = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetName(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Name = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetTemplateConfig(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.TemplateConfig = v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetTemplateId(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.TemplateId = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContent) SetType(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContent {
	s.Type = &v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig struct {
	AudioParams *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	VideoParams *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) SetAudioParams(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig) SetVideoParams(v *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfig {
	s.VideoParams = v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetBitrate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetChannels(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetCodec(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetProfile(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams) SetSamplerate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams struct {
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Codec   *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Fps     *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop     *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetBitrate(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetCodec(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetFps(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetGop(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetHeight(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetProfile(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams) SetWidth(v string) *GetLiveTranscodeTemplateResponseBodyTemplateContentTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type GetLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *GetLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetLiveTranscodeTemplateResponse) SetStatusCode(v int32) *GetLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetLiveTranscodeTemplateResponse) SetBody(v *GetLiveTranscodeTemplateResponseBody) *GetLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type GetMediaAuditResultRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetMediaAuditResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultRequest) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultRequest) SetAppId(v string) *GetMediaAuditResultRequest {
	s.AppId = &v
	return s
}

func (s *GetMediaAuditResultRequest) SetMediaId(v string) *GetMediaAuditResultRequest {
	s.MediaId = &v
	return s
}

type GetMediaAuditResultResponseBody struct {
	AudioResult      *GetMediaAuditResultResponseBodyAudioResult      `json:"AudioResult,omitempty" xml:"AudioResult,omitempty" type:"Struct"`
	CoverResult      *GetMediaAuditResultResponseBodyCoverResult      `json:"CoverResult,omitempty" xml:"CoverResult,omitempty" type:"Struct"`
	DescResult       *GetMediaAuditResultResponseBodyDescResult       `json:"DescResult,omitempty" xml:"DescResult,omitempty" type:"Struct"`
	MediaAuditResult *GetMediaAuditResultResponseBodyMediaAuditResult `json:"MediaAuditResult,omitempty" xml:"MediaAuditResult,omitempty" type:"Struct"`
	// RequestId
	RequestId   *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TitleResult *GetMediaAuditResultResponseBodyTitleResult `json:"TitleResult,omitempty" xml:"TitleResult,omitempty" type:"Struct"`
	VideoResult *GetMediaAuditResultResponseBodyVideoResult `json:"VideoResult,omitempty" xml:"VideoResult,omitempty" type:"Struct"`
}

func (s GetMediaAuditResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponseBody) SetAudioResult(v *GetMediaAuditResultResponseBodyAudioResult) *GetMediaAuditResultResponseBody {
	s.AudioResult = v
	return s
}

func (s *GetMediaAuditResultResponseBody) SetCoverResult(v *GetMediaAuditResultResponseBodyCoverResult) *GetMediaAuditResultResponseBody {
	s.CoverResult = v
	return s
}

func (s *GetMediaAuditResultResponseBody) SetDescResult(v *GetMediaAuditResultResponseBodyDescResult) *GetMediaAuditResultResponseBody {
	s.DescResult = v
	return s
}

func (s *GetMediaAuditResultResponseBody) SetMediaAuditResult(v *GetMediaAuditResultResponseBodyMediaAuditResult) *GetMediaAuditResultResponseBody {
	s.MediaAuditResult = v
	return s
}

func (s *GetMediaAuditResultResponseBody) SetRequestId(v string) *GetMediaAuditResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMediaAuditResultResponseBody) SetTitleResult(v *GetMediaAuditResultResponseBodyTitleResult) *GetMediaAuditResultResponseBody {
	s.TitleResult = v
	return s
}

func (s *GetMediaAuditResultResponseBody) SetVideoResult(v *GetMediaAuditResultResponseBodyVideoResult) *GetMediaAuditResultResponseBody {
	s.VideoResult = v
	return s
}

type GetMediaAuditResultResponseBodyAudioResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s GetMediaAuditResultResponseBodyAudioResult) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseBodyAudioResult) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponseBodyAudioResult) SetLabel(v string) *GetMediaAuditResultResponseBodyAudioResult {
	s.Label = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyAudioResult) SetScene(v string) *GetMediaAuditResultResponseBodyAudioResult {
	s.Scene = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyAudioResult) SetScore(v string) *GetMediaAuditResultResponseBodyAudioResult {
	s.Score = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyAudioResult) SetSuggestion(v string) *GetMediaAuditResultResponseBodyAudioResult {
	s.Suggestion = &v
	return s
}

type GetMediaAuditResultResponseBodyCoverResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s GetMediaAuditResultResponseBodyCoverResult) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseBodyCoverResult) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponseBodyCoverResult) SetLabel(v string) *GetMediaAuditResultResponseBodyCoverResult {
	s.Label = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyCoverResult) SetScene(v string) *GetMediaAuditResultResponseBodyCoverResult {
	s.Scene = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyCoverResult) SetScore(v string) *GetMediaAuditResultResponseBodyCoverResult {
	s.Score = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyCoverResult) SetSuggestion(v string) *GetMediaAuditResultResponseBodyCoverResult {
	s.Suggestion = &v
	return s
}

type GetMediaAuditResultResponseBodyDescResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s GetMediaAuditResultResponseBodyDescResult) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseBodyDescResult) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponseBodyDescResult) SetLabel(v string) *GetMediaAuditResultResponseBodyDescResult {
	s.Label = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyDescResult) SetScene(v string) *GetMediaAuditResultResponseBodyDescResult {
	s.Scene = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyDescResult) SetScore(v string) *GetMediaAuditResultResponseBodyDescResult {
	s.Score = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyDescResult) SetSuggestion(v string) *GetMediaAuditResultResponseBodyDescResult {
	s.Suggestion = &v
	return s
}

type GetMediaAuditResultResponseBodyMediaAuditResult struct {
	AbnormalModules *string `json:"AbnormalModules,omitempty" xml:"AbnormalModules,omitempty"`
	Label           *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Suggestion      *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s GetMediaAuditResultResponseBodyMediaAuditResult) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseBodyMediaAuditResult) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponseBodyMediaAuditResult) SetAbnormalModules(v string) *GetMediaAuditResultResponseBodyMediaAuditResult {
	s.AbnormalModules = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyMediaAuditResult) SetLabel(v string) *GetMediaAuditResultResponseBodyMediaAuditResult {
	s.Label = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyMediaAuditResult) SetSuggestion(v string) *GetMediaAuditResultResponseBodyMediaAuditResult {
	s.Suggestion = &v
	return s
}

type GetMediaAuditResultResponseBodyTitleResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s GetMediaAuditResultResponseBodyTitleResult) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseBodyTitleResult) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponseBodyTitleResult) SetLabel(v string) *GetMediaAuditResultResponseBodyTitleResult {
	s.Label = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyTitleResult) SetScene(v string) *GetMediaAuditResultResponseBodyTitleResult {
	s.Scene = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyTitleResult) SetScore(v string) *GetMediaAuditResultResponseBodyTitleResult {
	s.Score = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyTitleResult) SetSuggestion(v string) *GetMediaAuditResultResponseBodyTitleResult {
	s.Suggestion = &v
	return s
}

type GetMediaAuditResultResponseBodyVideoResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s GetMediaAuditResultResponseBodyVideoResult) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponseBodyVideoResult) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponseBodyVideoResult) SetLabel(v string) *GetMediaAuditResultResponseBodyVideoResult {
	s.Label = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyVideoResult) SetScene(v string) *GetMediaAuditResultResponseBodyVideoResult {
	s.Scene = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyVideoResult) SetScore(v string) *GetMediaAuditResultResponseBodyVideoResult {
	s.Score = &v
	return s
}

func (s *GetMediaAuditResultResponseBodyVideoResult) SetSuggestion(v string) *GetMediaAuditResultResponseBodyVideoResult {
	s.Suggestion = &v
	return s
}

type GetMediaAuditResultResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMediaAuditResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMediaAuditResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultResponse) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultResponse) SetHeaders(v map[string]*string) *GetMediaAuditResultResponse {
	s.Headers = v
	return s
}

func (s *GetMediaAuditResultResponse) SetStatusCode(v int32) *GetMediaAuditResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaAuditResultResponse) SetBody(v *GetMediaAuditResultResponseBody) *GetMediaAuditResultResponse {
	s.Body = v
	return s
}

type GetMediaAuditResultDetailRequest struct {
	AppId   *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetMediaAuditResultDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailRequest) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultDetailRequest) SetAppId(v string) *GetMediaAuditResultDetailRequest {
	s.AppId = &v
	return s
}

func (s *GetMediaAuditResultDetailRequest) SetMediaId(v string) *GetMediaAuditResultDetailRequest {
	s.MediaId = &v
	return s
}

type GetMediaAuditResultDetailResponseBody struct {
	AuditResultDetails []*GetMediaAuditResultDetailResponseBodyAuditResultDetails `json:"AuditResultDetails,omitempty" xml:"AuditResultDetails,omitempty" type:"Repeated"`
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total     *string `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetMediaAuditResultDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultDetailResponseBody) SetAuditResultDetails(v []*GetMediaAuditResultDetailResponseBodyAuditResultDetails) *GetMediaAuditResultDetailResponseBody {
	s.AuditResultDetails = v
	return s
}

func (s *GetMediaAuditResultDetailResponseBody) SetRequestId(v string) *GetMediaAuditResultDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBody) SetTotal(v string) *GetMediaAuditResultDetailResponseBody {
	s.Total = &v
	return s
}

type GetMediaAuditResultDetailResponseBodyAuditResultDetails struct {
	AdLabel        *string `json:"AdLabel,omitempty" xml:"AdLabel,omitempty"`
	AdScore        *string `json:"AdScore,omitempty" xml:"AdScore,omitempty"`
	LiveLabel      *string `json:"LiveLabel,omitempty" xml:"LiveLabel,omitempty"`
	LiveScore      *string `json:"LiveScore,omitempty" xml:"LiveScore,omitempty"`
	LogoLabel      *string `json:"LogoLabel,omitempty" xml:"LogoLabel,omitempty"`
	LogoScore      *string `json:"LogoScore,omitempty" xml:"LogoScore,omitempty"`
	PornLabel      *string `json:"PornLabel,omitempty" xml:"PornLabel,omitempty"`
	PornScore      *string `json:"PornScore,omitempty" xml:"PornScore,omitempty"`
	TerrorismLabel *string `json:"TerrorismLabel,omitempty" xml:"TerrorismLabel,omitempty"`
	TerrorismScore *string `json:"TerrorismScore,omitempty" xml:"TerrorismScore,omitempty"`
	Timestamp      *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s GetMediaAuditResultDetailResponseBodyAuditResultDetails) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailResponseBodyAuditResultDetails) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetAdLabel(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.AdLabel = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetAdScore(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.AdScore = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetLiveLabel(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.LiveLabel = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetLiveScore(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.LiveScore = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetLogoLabel(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.LogoLabel = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetLogoScore(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.LogoScore = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetPornLabel(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.PornLabel = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetPornScore(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.PornScore = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetTerrorismLabel(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.TerrorismLabel = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetTerrorismScore(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.TerrorismScore = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetTimestamp(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.Timestamp = &v
	return s
}

func (s *GetMediaAuditResultDetailResponseBodyAuditResultDetails) SetUrl(v string) *GetMediaAuditResultDetailResponseBodyAuditResultDetails {
	s.Url = &v
	return s
}

type GetMediaAuditResultDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMediaAuditResultDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMediaAuditResultDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaAuditResultDetailResponse) GoString() string {
	return s.String()
}

func (s *GetMediaAuditResultDetailResponse) SetHeaders(v map[string]*string) *GetMediaAuditResultDetailResponse {
	s.Headers = v
	return s
}

func (s *GetMediaAuditResultDetailResponse) SetStatusCode(v int32) *GetMediaAuditResultDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaAuditResultDetailResponse) SetBody(v *GetMediaAuditResultDetailResponseBody) *GetMediaAuditResultDetailResponse {
	s.Body = v
	return s
}

type GetMediaInfoRequest struct {
	InputURL   *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	MediaId    *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	OutputType *string `json:"OutputType,omitempty" xml:"OutputType,omitempty"`
}

func (s GetMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *GetMediaInfoRequest) SetInputURL(v string) *GetMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *GetMediaInfoRequest) SetMediaId(v string) *GetMediaInfoRequest {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoRequest) SetOutputType(v string) *GetMediaInfoRequest {
	s.OutputType = &v
	return s
}

type GetMediaInfoResponseBody struct {
	MediaInfo *GetMediaInfoResponseBodyMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBody) SetMediaInfo(v *GetMediaInfoResponseBodyMediaInfo) *GetMediaInfoResponseBody {
	s.MediaInfo = v
	return s
}

func (s *GetMediaInfoResponseBody) SetRequestId(v string) *GetMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfo struct {
	// FileInfos
	FileInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetFileInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoList) *GetMediaInfoResponseBodyMediaInfo {
	s.FileInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetMediaBasicInfo(v *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) *GetMediaInfoResponseBodyMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfo) SetMediaId(v string) *GetMediaInfoResponseBodyMediaInfo {
	s.MediaId = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoList struct {
	// 音频流信息，一个媒资可能有多条音频流
	AudioStreamInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 字幕流信息，一个媒资可能有多条字幕流
	SubtitleStreamInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList `json:"SubtitleStreamInfoList,omitempty" xml:"SubtitleStreamInfoList,omitempty" type:"Repeated"`
	// 视频流信息，一个媒资可能有多条视频流
	VideoStreamInfoList []*GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetAudioStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetFileBasicInfo(v *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.FileBasicInfo = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetSubtitleStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.SubtitleStreamInfoList = v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoList) SetVideoStreamInfoList(v []*GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) *GetMediaInfoResponseBodyMediaInfoFileInfoList {
	s.VideoStreamInfoList = v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道输出样式
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式长述名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式简述名
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码时基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 音频帧率
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 音频流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 编码预置
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 采样格式
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 起始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannelLayout(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannels(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetFps(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetNumFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetProfile(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleFmt(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleRate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height       *string `json:"Height,omitempty" xml:"Height,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetCreateTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileSize(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileStatus(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileType(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileUrl(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFormatName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetHeight(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetModifiedTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetRegion(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetWidth(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList struct {
	// 编码格式长述名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式简述名
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码时基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 音频流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 起始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList struct {
	// 平均帧率
	AvgFPS *string `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 编码格式长述名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式简述名
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码时基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 编码显示分辨率比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 视频帧率
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 是否有B帧
	HasBFrames *string `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 视频流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NbFrames *string `json:"Nb_frames,omitempty" xml:"Nb_frames,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 像素格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码预置
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 旋转
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 编码信号分辨率比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetAvgFPS(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.AvgFPS = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetBitrate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecLongName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecName(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTag(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTagString(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDar(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDuration(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetFps(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHasBFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHeight(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetIndex(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLang(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLevel(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNbFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NbFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNumFrames(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetPixFmt(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetProfile(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetRotate(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetSar(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetStartTime(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetTimebase(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Timebase = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetWidth(v string) *GetMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetMediaInfoResponseBodyMediaInfoMediaBasicInfo struct {
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	CateId       *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName     *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 待注册的媒资在相应系统中的地址
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title        *string `json:"Title,omitempty" xml:"Title,omitempty"`
	UploadSource *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBiz(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBusinessType(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCateId(v int64) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCateName(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CateName = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCategory(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCoverURL(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCreateTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDeletedTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDescription(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetInputURL(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaId(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaTags(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaType(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetModifiedTime(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSource(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSpriteImages(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetStatus(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetTitle(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUploadSource(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUserData(v string) *GetMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetMediaInfoResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *GetMediaInfoResponse) SetHeaders(v map[string]*string) *GetMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *GetMediaInfoResponse) SetStatusCode(v int32) *GetMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaInfoResponse) SetBody(v *GetMediaInfoResponseBody) *GetMediaInfoResponse {
	s.Body = v
	return s
}

type GetMediaInfoJobRequest struct {
	// 任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobRequest) SetJobId(v string) *GetMediaInfoJobRequest {
	s.JobId = &v
	return s
}

type GetMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *GetMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBody) SetMediaInfoJob(v *GetMediaInfoJobResponseBodyMediaInfoJob) *GetMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *GetMediaInfoJobResponseBody) SetRequestId(v string) *GetMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJob struct {
	// 是否异步处理
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// 任务完成时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入
	Input *GetMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// 任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 媒体信息详情
	MediaInfoProperty *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 调度信息
	ScheduleConfig *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 任务状态 - Init: 已提交, Success: 成功, Fail: 失败
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交信息
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 任务来源 - API, WorkFlow, Console
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *GetMediaInfoJobResponseBodyMediaInfoJobInput) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *GetMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *GetMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *GetMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	// 音频流信息
	AudioStreamInfoList []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 基础文件信息
	FileBasicInfo *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 视频流信息
	VideoStreamInfoList []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道布局
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码器标签
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码器标签名
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码器时间基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时间基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// 视频码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 视频时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件url
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 视频格式名称
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 文件所在区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	AvgFps  *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// 编码格式
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	CodecTimeBase  *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// 图像显示宽高比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 帧率
	Fps        *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 颜色存储格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码器预设
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 视频画面旋转角度
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 采集点数宽高比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	TimeBase  *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *GetMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *GetMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type GetMediaInfoJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *GetMediaInfoJobResponse) SetHeaders(v map[string]*string) *GetMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *GetMediaInfoJobResponse) SetStatusCode(v int32) *GetMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaInfoJobResponse) SetBody(v *GetMediaInfoJobResponseBody) *GetMediaInfoJobResponse {
	s.Body = v
	return s
}

type GetMediaProducingJobRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobRequest) SetJobId(v string) *GetMediaProducingJobRequest {
	s.JobId = &v
	return s
}

type GetMediaProducingJobResponseBody struct {
	MediaProducingJob *GetMediaProducingJobResponseBodyMediaProducingJob `json:"MediaProducingJob,omitempty" xml:"MediaProducingJob,omitempty" type:"Struct"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponseBody) SetMediaProducingJob(v *GetMediaProducingJobResponseBodyMediaProducingJob) *GetMediaProducingJobResponseBody {
	s.MediaProducingJob = v
	return s
}

func (s *GetMediaProducingJobResponseBody) SetRequestId(v string) *GetMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type GetMediaProducingJobResponseBodyMediaProducingJob struct {
	ClipsParam   *string  `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	Code         *string  `json:"Code,omitempty" xml:"Code,omitempty"`
	CompleteTime *string  `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	CreateTime   *string  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Duration     *float32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	JobId        *string  `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaId      *string  `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaURL     *string  `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	Message      *string  `json:"Message,omitempty" xml:"Message,omitempty"`
	ModifiedTime *string  `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	ProjectId    *string  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Status       *string  `json:"Status,omitempty" xml:"Status,omitempty"`
	TemplateId   *string  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Timeline     *string  `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	VodMediaId   *string  `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s GetMediaProducingJobResponseBodyMediaProducingJob) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponseBodyMediaProducingJob) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetClipsParam(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ClipsParam = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCode(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Code = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCompleteTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.CompleteTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetCreateTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.CreateTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetDuration(v float32) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Duration = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetJobId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.JobId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMediaId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.MediaId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMediaURL(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.MediaURL = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetMessage(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Message = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetModifiedTime(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetProjectId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.ProjectId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetStatus(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Status = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetTemplateId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.TemplateId = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetTimeline(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.Timeline = &v
	return s
}

func (s *GetMediaProducingJobResponseBodyMediaProducingJob) SetVodMediaId(v string) *GetMediaProducingJobResponseBodyMediaProducingJob {
	s.VodMediaId = &v
	return s
}

type GetMediaProducingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *GetMediaProducingJobResponse) SetHeaders(v map[string]*string) *GetMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *GetMediaProducingJobResponse) SetStatusCode(v int32) *GetMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMediaProducingJobResponse) SetBody(v *GetMediaProducingJobResponseBody) *GetMediaProducingJobResponse {
	s.Body = v
	return s
}

type GetPipelineRequest struct {
	// 管道ID
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s GetPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineRequest) GoString() string {
	return s.String()
}

func (s *GetPipelineRequest) SetPipelineId(v string) *GetPipelineRequest {
	s.PipelineId = &v
	return s
}

type GetPipelineResponseBody struct {
	// 管道信息
	Pipeline *GetPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBody) SetPipeline(v *GetPipelineResponseBodyPipeline) *GetPipelineResponseBody {
	s.Pipeline = v
	return s
}

func (s *GetPipelineResponseBody) SetRequestId(v string) *GetPipelineResponseBody {
	s.RequestId = &v
	return s
}

type GetPipelineResponseBodyPipeline struct {
	// 模板创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 模板修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 管道名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 管道Id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 管道优先级
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// 管道类型
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// 管道状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *GetPipelineResponseBodyPipeline) SetCreateTime(v string) *GetPipelineResponseBodyPipeline {
	s.CreateTime = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetModifiedTime(v string) *GetPipelineResponseBodyPipeline {
	s.ModifiedTime = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetName(v string) *GetPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetPipelineId(v string) *GetPipelineResponseBodyPipeline {
	s.PipelineId = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetPriority(v int32) *GetPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetSpeed(v string) *GetPipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *GetPipelineResponseBodyPipeline) SetStatus(v string) *GetPipelineResponseBodyPipeline {
	s.Status = &v
	return s
}

type GetPipelineResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPipelineResponse) GoString() string {
	return s.String()
}

func (s *GetPipelineResponse) SetHeaders(v map[string]*string) *GetPipelineResponse {
	s.Headers = v
	return s
}

func (s *GetPipelineResponse) SetStatusCode(v int32) *GetPipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPipelineResponse) SetBody(v *GetPipelineResponseBody) *GetPipelineResponse {
	s.Body = v
	return s
}

type GetPlayInfoRequest struct {
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoRequest) GoString() string {
	return s.String()
}

func (s *GetPlayInfoRequest) SetMediaId(v string) *GetPlayInfoRequest {
	s.MediaId = &v
	return s
}

type GetPlayInfoResponseBody struct {
	MediaBase    *GetPlayInfoResponseBodyMediaBase      `json:"MediaBase,omitempty" xml:"MediaBase,omitempty" type:"Struct"`
	PlayInfoList []*GetPlayInfoResponseBodyPlayInfoList `json:"PlayInfoList,omitempty" xml:"PlayInfoList,omitempty" type:"Repeated"`
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBody) SetMediaBase(v *GetPlayInfoResponseBodyMediaBase) *GetPlayInfoResponseBody {
	s.MediaBase = v
	return s
}

func (s *GetPlayInfoResponseBody) SetPlayInfoList(v []*GetPlayInfoResponseBodyPlayInfoList) *GetPlayInfoResponseBody {
	s.PlayInfoList = v
	return s
}

func (s *GetPlayInfoResponseBody) SetRequestId(v string) *GetPlayInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetPlayInfoResponseBodyMediaBase struct {
	CoverURL     *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaId      *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaType    *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Title        *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s GetPlayInfoResponseBodyMediaBase) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBodyMediaBase) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCoverURL(v string) *GetPlayInfoResponseBodyMediaBase {
	s.CoverURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetCreationTime(v string) *GetPlayInfoResponseBodyMediaBase {
	s.CreationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaId(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaId = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetMediaType(v string) *GetPlayInfoResponseBodyMediaBase {
	s.MediaType = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetStatus(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Status = &v
	return s
}

func (s *GetPlayInfoResponseBodyMediaBase) SetTitle(v string) *GetPlayInfoResponseBodyMediaBase {
	s.Title = &v
	return s
}

type GetPlayInfoResponseBodyPlayInfoList struct {
	// 颜色位深
	BitDepth     *int32  `json:"BitDepth,omitempty" xml:"BitDepth,omitempty"`
	Bitrate      *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Definition   *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	Duration     *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Encrypt      *int64  `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	EncryptType  *string `json:"EncryptType,omitempty" xml:"EncryptType,omitempty"`
	FileURL      *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	Format       *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps          *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 视频流HDR类型
	HDRType           *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	Height            *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	ModificationTime  *string `json:"ModificationTime,omitempty" xml:"ModificationTime,omitempty"`
	NarrowBandType    *string `json:"NarrowBandType,omitempty" xml:"NarrowBandType,omitempty"`
	PlayURL           *string `json:"PlayURL,omitempty" xml:"PlayURL,omitempty"`
	Size              *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamType        *string `json:"StreamType,omitempty" xml:"StreamType,omitempty"`
	TransTemplateType *string `json:"TransTemplateType,omitempty" xml:"TransTemplateType,omitempty"`
	WatermarkId       *string `json:"WatermarkId,omitempty" xml:"WatermarkId,omitempty"`
	Width             *int64  `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPlayInfoResponseBodyPlayInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponseBodyPlayInfoList) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetBitDepth(v int32) *GetPlayInfoResponseBodyPlayInfoList {
	s.BitDepth = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetBitrate(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetCreationTime(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.CreationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetDefinition(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Definition = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetDuration(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Duration = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetEncrypt(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Encrypt = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetEncryptType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.EncryptType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFileURL(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.FileURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFormat(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Format = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetFps(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Fps = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetHDRType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.HDRType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetHeight(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Height = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetModificationTime(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.ModificationTime = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetNarrowBandType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.NarrowBandType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetPlayURL(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.PlayURL = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetSize(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Size = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStatus(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.Status = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetStreamType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.StreamType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetTransTemplateType(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.TransTemplateType = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetWatermarkId(v string) *GetPlayInfoResponseBodyPlayInfoList {
	s.WatermarkId = &v
	return s
}

func (s *GetPlayInfoResponseBodyPlayInfoList) SetWidth(v int64) *GetPlayInfoResponseBodyPlayInfoList {
	s.Width = &v
	return s
}

type GetPlayInfoResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPlayInfoResponse) GoString() string {
	return s.String()
}

func (s *GetPlayInfoResponse) SetHeaders(v map[string]*string) *GetPlayInfoResponse {
	s.Headers = v
	return s
}

func (s *GetPlayInfoResponse) SetStatusCode(v int32) *GetPlayInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPlayInfoResponse) SetBody(v *GetPlayInfoResponseBody) *GetPlayInfoResponse {
	s.Body = v
	return s
}

type GetPublicMediaInfoRequest struct {
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPublicMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoRequest) SetMediaId(v string) *GetPublicMediaInfoRequest {
	s.MediaId = &v
	return s
}

type GetPublicMediaInfoResponseBody struct {
	MediaInfo *GetPublicMediaInfoResponseBodyMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPublicMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBody) SetMediaInfo(v *GetPublicMediaInfoResponseBodyMediaInfo) *GetPublicMediaInfoResponseBody {
	s.MediaInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBody) SetRequestId(v string) *GetPublicMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfo struct {
	// 公共媒资动态元数据
	DynamicMetaData *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData `json:"DynamicMetaData,omitempty" xml:"DynamicMetaData,omitempty" type:"Struct"`
	// FileInfos
	FileInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetDynamicMetaData(v *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.DynamicMetaData = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetFileInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.FileInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetMediaBasicInfo(v *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfo) SetMediaId(v string) *GetPublicMediaInfoResponseBodyMediaInfo {
	s.MediaId = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData struct {
	// 元数据json
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// 类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) SetData(v string) *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData {
	s.Data = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData) SetType(v string) *GetPublicMediaInfoResponseBodyMediaInfoDynamicMetaData {
	s.Type = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoList struct {
	// 音频流信息，一个媒资可能有多条音频流
	AudioStreamInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 字幕流信息，一个媒资可能有多条字幕流
	SubtitleStreamInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList `json:"SubtitleStreamInfoList,omitempty" xml:"SubtitleStreamInfoList,omitempty" type:"Repeated"`
	// 视频流信息，一个媒资可能有多条视频流
	VideoStreamInfoList []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetAudioStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetFileBasicInfo(v *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.FileBasicInfo = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetSubtitleStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.SubtitleStreamInfoList = v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList) SetVideoStreamInfoList(v []*GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoList {
	s.VideoStreamInfoList = v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道输出样式
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式长述名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式简述名
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码时基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 音频帧率
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 音频流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 编码预置
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 采样格式
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 起始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannelLayout(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetChannels(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetFps(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetNumFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetProfile(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleFmt(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetSampleRate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileSize(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileStatus(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileType(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFileUrl(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetFormatName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetHeight(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetRegion(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo) SetWidth(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList struct {
	// 编码格式长述名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式简述名
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码时基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 音频流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 起始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListSubtitleStreamInfoList {
	s.Timebase = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList struct {
	// 平均帧率
	AvgFPS *string `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 编码格式长述名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式简述名
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码时基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 编码显示分辨率比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 视频帧率
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 是否有B帧
	HasBFrames *string `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 视频流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NbFrames *string `json:"Nb_frames,omitempty" xml:"Nb_frames,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 像素格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码预置
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 旋转
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 编码信号分辨率比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetAvgFPS(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.AvgFPS = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetBitrate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecLongName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecName(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTag(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTagString(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetCodecTimeBase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDar(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetDuration(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetFps(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHasBFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetHeight(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetIndex(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLang(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetLevel(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNbFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NbFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetNumFrames(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetPixFmt(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetProfile(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetRotate(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetSar(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetStartTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetTimebase(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Timebase = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList) SetWidth(v string) *GetPublicMediaInfoResponseBodyMediaInfoFileInfoListVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetBusinessType(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCategory(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCoverURL(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetCreateTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDeletedTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetDescription(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaId(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaTags(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetMediaType(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetModifiedTime(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSource(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetSpriteImages(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetStatus(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetTitle(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo) SetUserData(v string) *GetPublicMediaInfoResponseBodyMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type GetPublicMediaInfoResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPublicMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPublicMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPublicMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *GetPublicMediaInfoResponse) SetHeaders(v map[string]*string) *GetPublicMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *GetPublicMediaInfoResponse) SetStatusCode(v int32) *GetPublicMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPublicMediaInfoResponse) SetBody(v *GetPublicMediaInfoResponseBody) *GetPublicMediaInfoResponse {
	s.Body = v
	return s
}

type GetSmartHandleJobRequest struct {
	// 任务Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetSmartHandleJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobRequest) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobRequest) SetJobId(v string) *GetSmartHandleJobRequest {
	s.JobId = &v
	return s
}

type GetSmartHandleJobResponseBody struct {
	// 任务Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 任务结果
	Output *string `json:"Output,omitempty" xml:"Output,omitempty"`
	// 请求Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 智能任务信息
	SmartJobInfo *GetSmartHandleJobResponseBodySmartJobInfo `json:"SmartJobInfo,omitempty" xml:"SmartJobInfo,omitempty" type:"Struct"`
	// 任务状态
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// 用户自定义信息
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetSmartHandleJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBody) SetJobId(v string) *GetSmartHandleJobResponseBody {
	s.JobId = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetOutput(v string) *GetSmartHandleJobResponseBody {
	s.Output = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetRequestId(v string) *GetSmartHandleJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetSmartJobInfo(v *GetSmartHandleJobResponseBodySmartJobInfo) *GetSmartHandleJobResponseBody {
	s.SmartJobInfo = v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetState(v string) *GetSmartHandleJobResponseBody {
	s.State = &v
	return s
}

func (s *GetSmartHandleJobResponseBody) SetUserData(v string) *GetSmartHandleJobResponseBody {
	s.UserData = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfo struct {
	// 创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 任务描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 输入参数
	InputConfig *GetSmartHandleJobResponseBodySmartJobInfoInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	// 任务类型
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// 修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 输出配置
	OutputConfig *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	// 任务标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// userid
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfo) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfo) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetCreateTime(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.CreateTime = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetDescription(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.Description = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetInputConfig(v *GetSmartHandleJobResponseBodySmartJobInfoInputConfig) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.InputConfig = v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetJobType(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.JobType = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetModifiedTime(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.ModifiedTime = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetOutputConfig(v *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.OutputConfig = v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetTitle(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.Title = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfo) SetUserId(v string) *GetSmartHandleJobResponseBodySmartJobInfo {
	s.UserId = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfoInputConfig struct {
	// OSS地址 或 内容库素材ID
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfoInputConfig) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfoInputConfig) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoInputConfig) SetInputFile(v string) *GetSmartHandleJobResponseBodySmartJobInfoInputConfig {
	s.InputFile = &v
	return s
}

type GetSmartHandleJobResponseBodySmartJobInfoOutputConfig struct {
	// OSS Bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) SetBucket(v string) *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig {
	s.Bucket = &v
	return s
}

func (s *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig) SetObject(v string) *GetSmartHandleJobResponseBodySmartJobInfoOutputConfig {
	s.Object = &v
	return s
}

type GetSmartHandleJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSmartHandleJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSmartHandleJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSmartHandleJobResponse) GoString() string {
	return s.String()
}

func (s *GetSmartHandleJobResponse) SetHeaders(v map[string]*string) *GetSmartHandleJobResponse {
	s.Headers = v
	return s
}

func (s *GetSmartHandleJobResponse) SetStatusCode(v int32) *GetSmartHandleJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSmartHandleJobResponse) SetBody(v *GetSmartHandleJobResponseBody) *GetSmartHandleJobResponse {
	s.Body = v
	return s
}

type GetSnapshotJobRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobRequest) SetJobId(v string) *GetSnapshotJobRequest {
	s.JobId = &v
	return s
}

type GetSnapshotJobResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 截图任务信息
	SnapshotJob *GetSnapshotJobResponseBodySnapshotJob `json:"SnapshotJob,omitempty" xml:"SnapshotJob,omitempty" type:"Struct"`
}

func (s GetSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBody) SetRequestId(v string) *GetSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSnapshotJobResponseBody) SetSnapshotJob(v *GetSnapshotJobResponseBodySnapshotJob) *GetSnapshotJobResponseBody {
	s.SnapshotJob = v
	return s
}

type GetSnapshotJobResponseBodySnapshotJob struct {
	Async          *bool                                        `json:"Async,omitempty" xml:"Async,omitempty"`
	Code           *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Count          *int32                                       `json:"Count,omitempty" xml:"Count,omitempty"`
	CreateTime     *string                                      `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime     *string                                      `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input          *GetSnapshotJobResponseBodySnapshotJobInput  `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId          *string                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Message        *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	ModifiedTime   *string                                      `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Name           *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Output         *GetSnapshotJobResponseBodySnapshotJobOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	PipelineId     *string                                      `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Status         *string                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitTime     *string                                      `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	TemplateConfig *string                                      `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	TemplateId     *string                                      `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TriggerSource  *string                                      `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	Type           *string                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	UserData       *string                                      `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJob) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJob) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetAsync(v bool) *GetSnapshotJobResponseBodySnapshotJob {
	s.Async = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCode(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Code = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCount(v int32) *GetSnapshotJobResponseBodySnapshotJob {
	s.Count = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetCreateTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.CreateTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetFinishTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.FinishTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetInput(v *GetSnapshotJobResponseBodySnapshotJobInput) *GetSnapshotJobResponseBodySnapshotJob {
	s.Input = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetJobId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.JobId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetMessage(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Message = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetModifiedTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetName(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Name = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetOutput(v *GetSnapshotJobResponseBodySnapshotJobOutput) *GetSnapshotJobResponseBodySnapshotJob {
	s.Output = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetPipelineId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.PipelineId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetStatus(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Status = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetSubmitTime(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.SubmitTime = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTemplateConfig(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TemplateConfig = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTemplateId(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TemplateId = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetTriggerSource(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.TriggerSource = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetType(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.Type = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJob) SetUserData(v string) *GetSnapshotJobResponseBodySnapshotJob {
	s.UserData = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 输入类型为媒资ID时的OSS地址
	OssFile *GetSnapshotJobResponseBodySnapshotJobInputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	Type    *string                                            `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobInput) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetMedia(v string) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.Media = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetOssFile(v *GetSnapshotJobResponseBodySnapshotJobInputOssFile) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.OssFile = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInput) SetType(v string) *GetSnapshotJobResponseBodySnapshotJobInput {
	s.Type = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobInputOssFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobInputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobInputOssFile) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetBucket(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetLocation(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Location = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobInputOssFile) SetObject(v string) *GetSnapshotJobResponseBodySnapshotJobInputOssFile {
	s.Object = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 输出类型为媒资ID时的OSS地址
	OssFile *GetSnapshotJobResponseBodySnapshotJobOutputOssFile `json:"OssFile,omitempty" xml:"OssFile,omitempty" type:"Struct"`
	Type    *string                                             `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobOutput) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetMedia(v string) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.Media = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetOssFile(v *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.OssFile = v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutput) SetType(v string) *GetSnapshotJobResponseBodySnapshotJobOutput {
	s.Type = &v
	return s
}

type GetSnapshotJobResponseBodySnapshotJobOutputOssFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s GetSnapshotJobResponseBodySnapshotJobOutputOssFile) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponseBodySnapshotJobOutputOssFile) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetBucket(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Bucket = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetLocation(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Location = &v
	return s
}

func (s *GetSnapshotJobResponseBodySnapshotJobOutputOssFile) SetObject(v string) *GetSnapshotJobResponseBodySnapshotJobOutputOssFile {
	s.Object = &v
	return s
}

type GetSnapshotJobResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *GetSnapshotJobResponse) SetHeaders(v map[string]*string) *GetSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *GetSnapshotJobResponse) SetStatusCode(v int32) *GetSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSnapshotJobResponse) SetBody(v *GetSnapshotJobResponseBody) *GetSnapshotJobResponse {
	s.Body = v
	return s
}

type GetSnapshotUrlsRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 排列顺序。取值：Asc，Desc
	OrderBy    *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 鉴权超时时间
	Timeout *int64 `json:"Timeout,omitempty" xml:"Timeout,omitempty"`
}

func (s GetSnapshotUrlsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsRequest) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsRequest) SetJobId(v string) *GetSnapshotUrlsRequest {
	s.JobId = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetOrderBy(v string) *GetSnapshotUrlsRequest {
	s.OrderBy = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetPageNumber(v int32) *GetSnapshotUrlsRequest {
	s.PageNumber = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetPageSize(v int32) *GetSnapshotUrlsRequest {
	s.PageSize = &v
	return s
}

func (s *GetSnapshotUrlsRequest) SetTimeout(v int64) *GetSnapshotUrlsRequest {
	s.Timeout = &v
	return s
}

type GetSnapshotUrlsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 截图URL
	SnapshotUrls []*string `json:"SnapshotUrls,omitempty" xml:"SnapshotUrls,omitempty" type:"Repeated"`
	// 截图总数量
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
	// WebVTT文件URL
	WebVTTUrl *string `json:"WebVTTUrl,omitempty" xml:"WebVTTUrl,omitempty"`
}

func (s GetSnapshotUrlsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsResponseBody) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsResponseBody) SetRequestId(v string) *GetSnapshotUrlsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetSnapshotUrls(v []*string) *GetSnapshotUrlsResponseBody {
	s.SnapshotUrls = v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetTotal(v int32) *GetSnapshotUrlsResponseBody {
	s.Total = &v
	return s
}

func (s *GetSnapshotUrlsResponseBody) SetWebVTTUrl(v string) *GetSnapshotUrlsResponseBody {
	s.WebVTTUrl = &v
	return s
}

type GetSnapshotUrlsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSnapshotUrlsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSnapshotUrlsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSnapshotUrlsResponse) GoString() string {
	return s.String()
}

func (s *GetSnapshotUrlsResponse) SetHeaders(v map[string]*string) *GetSnapshotUrlsResponse {
	s.Headers = v
	return s
}

func (s *GetSnapshotUrlsResponse) SetStatusCode(v int32) *GetSnapshotUrlsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSnapshotUrlsResponse) SetBody(v *GetSnapshotUrlsResponseBody) *GetSnapshotUrlsResponse {
	s.Body = v
	return s
}

type GetSystemTemplateRequest struct {
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetSystemTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateRequest) SetTemplateId(v string) *GetSystemTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetSystemTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 模板信息
	SystemTemplate *GetSystemTemplateResponseBodySystemTemplate `json:"SystemTemplate,omitempty" xml:"SystemTemplate,omitempty" type:"Struct"`
}

func (s GetSystemTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponseBody) SetRequestId(v string) *GetSystemTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSystemTemplateResponseBody) SetSystemTemplate(v *GetSystemTemplateResponseBodySystemTemplate) *GetSystemTemplateResponseBody {
	s.SystemTemplate = v
	return s
}

type GetSystemTemplateResponseBodySystemTemplate struct {
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板子类型ID
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板子类型名称
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// 模板参数
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板名称
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// 模板类型ID
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// 模板类型名称
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s GetSystemTemplateResponseBodySystemTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponseBodySystemTemplate) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetStatus(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.Status = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetSubtype(v int32) *GetSystemTemplateResponseBodySystemTemplate {
	s.Subtype = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetSubtypeName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.SubtypeName = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateConfig(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateConfig = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateId(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTemplateName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TemplateName = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetType(v int32) *GetSystemTemplateResponseBodySystemTemplate {
	s.Type = &v
	return s
}

func (s *GetSystemTemplateResponseBodySystemTemplate) SetTypeName(v string) *GetSystemTemplateResponseBodySystemTemplate {
	s.TypeName = &v
	return s
}

type GetSystemTemplateResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSystemTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSystemTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSystemTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetSystemTemplateResponse) SetHeaders(v map[string]*string) *GetSystemTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetSystemTemplateResponse) SetStatusCode(v int32) *GetSystemTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSystemTemplateResponse) SetBody(v *GetSystemTemplateResponseBody) *GetSystemTemplateResponse {
	s.Body = v
	return s
}

type GetTemplateRequest struct {
	// 是否返回模板关联素材，1返回，默认0，不返回
	RelatedMediaidFlag *string `json:"RelatedMediaidFlag,omitempty" xml:"RelatedMediaidFlag,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateRequest) SetRelatedMediaidFlag(v string) *GetTemplateRequest {
	s.RelatedMediaidFlag = &v
	return s
}

func (s *GetTemplateRequest) SetTemplateId(v string) *GetTemplateRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateResponseBody struct {
	// Id of the request
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *GetTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s GetTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateResponseBody) SetRequestId(v string) *GetTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTemplateResponseBody) SetTemplate(v *GetTemplateResponseBodyTemplate) *GetTemplateResponseBody {
	s.Template = v
	return s
}

type GetTemplateResponseBodyTemplate struct {
	// 提交合成任务的ClipsParam参数
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// 模板配置
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// 封面URL
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 创建来源
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// 创建时间
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// 修改来源
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// 修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 预览素材
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// 预览素材状态
	PreviewMediaStatus *string `json:"PreviewMediaStatus,omitempty" xml:"PreviewMediaStatus,omitempty"`
	// 模板关联素材
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *GetTemplateResponseBodyTemplate) SetClipsParam(v string) *GetTemplateResponseBodyTemplate {
	s.ClipsParam = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetConfig(v string) *GetTemplateResponseBodyTemplate {
	s.Config = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCoverURL(v string) *GetTemplateResponseBodyTemplate {
	s.CoverURL = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCreateSource(v string) *GetTemplateResponseBodyTemplate {
	s.CreateSource = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetCreationTime(v string) *GetTemplateResponseBodyTemplate {
	s.CreationTime = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetModifiedSource(v string) *GetTemplateResponseBodyTemplate {
	s.ModifiedSource = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetModifiedTime(v string) *GetTemplateResponseBodyTemplate {
	s.ModifiedTime = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetName(v string) *GetTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetPreviewMedia(v string) *GetTemplateResponseBodyTemplate {
	s.PreviewMedia = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetPreviewMediaStatus(v string) *GetTemplateResponseBodyTemplate {
	s.PreviewMediaStatus = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetRelatedMediaids(v string) *GetTemplateResponseBodyTemplate {
	s.RelatedMediaids = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetStatus(v string) *GetTemplateResponseBodyTemplate {
	s.Status = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetTemplateId(v string) *GetTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

func (s *GetTemplateResponseBodyTemplate) SetType(v string) *GetTemplateResponseBodyTemplate {
	s.Type = &v
	return s
}

type GetTemplateResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateResponse) SetHeaders(v map[string]*string) *GetTemplateResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateResponse) SetStatusCode(v int32) *GetTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateResponse) SetBody(v *GetTemplateResponseBody) *GetTemplateResponse {
	s.Body = v
	return s
}

type GetTemplateMaterialsRequest struct {
	// 所需文件列表
	FileList *string `json:"FileList,omitempty" xml:"FileList,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTemplateMaterialsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsRequest) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsRequest) SetFileList(v string) *GetTemplateMaterialsRequest {
	s.FileList = &v
	return s
}

func (s *GetTemplateMaterialsRequest) SetTemplateId(v string) *GetTemplateMaterialsRequest {
	s.TemplateId = &v
	return s
}

type GetTemplateMaterialsResponseBody struct {
	// 关联素材地址
	MaterialUrls *string `json:"MaterialUrls,omitempty" xml:"MaterialUrls,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetTemplateMaterialsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsResponseBody) SetMaterialUrls(v string) *GetTemplateMaterialsResponseBody {
	s.MaterialUrls = &v
	return s
}

func (s *GetTemplateMaterialsResponseBody) SetRequestId(v string) *GetTemplateMaterialsResponseBody {
	s.RequestId = &v
	return s
}

type GetTemplateMaterialsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetTemplateMaterialsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTemplateMaterialsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplateMaterialsResponse) GoString() string {
	return s.String()
}

func (s *GetTemplateMaterialsResponse) SetHeaders(v map[string]*string) *GetTemplateMaterialsResponse {
	s.Headers = v
	return s
}

func (s *GetTemplateMaterialsResponse) SetStatusCode(v int32) *GetTemplateMaterialsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplateMaterialsResponse) SetBody(v *GetTemplateMaterialsResponseBody) *GetTemplateMaterialsResponse {
	s.Body = v
	return s
}

type GetTranscodeJobRequest struct {
	// 任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s GetTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobRequest) SetJobId(v string) *GetTranscodeJobRequest {
	s.JobId = &v
	return s
}

type GetTranscodeJobResponseBody struct {
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// TranscodeParentJobWithSubJobDTO
	TranscodeParentJob *GetTranscodeJobResponseBodyTranscodeParentJob `json:"TranscodeParentJob,omitempty" xml:"TranscodeParentJob,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBody) SetRequestId(v string) *GetTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBody) SetTranscodeParentJob(v *GetTranscodeJobResponseBodyTranscodeParentJob) *GetTranscodeJobResponseBody {
	s.TranscodeParentJob = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJob struct {
	// 任务创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 任务结束时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入组 (目前只支持单个输入)
	InputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// 子任务数量
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// 任务名
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 任务输出组
	OutputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// 主任务 id
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// 任务完成百分比
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// 提交任务时请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务调度配置
	ScheduleConfig *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 任务状态 Success: 有子任务成功, Fail: 所有子任务失败
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 子任务列表
	TranscodeJobList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList `json:"TranscodeJobList,omitempty" xml:"TranscodeJobList,omitempty" type:"Repeated"`
	// 任务来源 - API, WorkFlow, Console
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJob) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJob) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetCreateTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.CreateTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetFinishTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.FinishTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetInputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.InputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetJobCount(v int32) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.JobCount = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetName(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Name = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetOutputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.OutputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetParentJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.ParentJobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetPercent(v int32) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Percent = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetRequestId(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetScheduleConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.ScheduleConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.Status = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetSubmitTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.SubmitTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetTranscodeJobList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.TranscodeJobList = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetTriggerSource(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.TriggerSource = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJob) SetUserData(v string) *GetTranscodeJobResponseBodyTranscodeParentJob {
	s.UserData = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobInputGroup struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup struct {
	// 输出媒体配置
	Output *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// 任务处理配置
	ProcessConfig *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetOutput(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.Output = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetProcessConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.ProcessConfig = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig struct {
	// 图片水印配置
	ImageWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// 字幕压制配置
	Subtitles []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// 文字水印配置
	TextWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// 转码配置
	Transcode *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetImageWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetSubtitles(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTextWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTranscode(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// 水印位置，x
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// 水印位置，y
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// 水印文件oss路径
	File *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// 显示时间设置
	Timeline *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// 显示时长，秒数 或者 "ToEND"
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 开始时间
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// 文件 encoding 格式
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// 字幕文件
	File *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 字幕文件格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// 根据输出视频大小调整字体 size。 true / false, default: false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// 边框颜色
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// 边框宽度
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// 水印文本，不需要 base64 encode，字符串需要 utf-8 编码
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 透明度
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// 颜色
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// 字体
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// 字体大小
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// 水印位置，距离左边距离
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// 水印位置，距离上边距离
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// audio 设置
	Audio *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// 封装格式设置
	Container *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// 封装设置
	MuxConfig *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// video 设置
	Video *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// 输出文件的音频码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道数。
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 音频编解码格式，AAC、MP3、VORBIS、FLAC。
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 音频编码预置。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否删除音频流。
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 采样率。
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// 音量控制
	Volume *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// 目标音量
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// 音量范围
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// 音量调整方式
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// 最大峰值
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// 容器格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// 切片设置
	Segment *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// 切片时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 强制切片时间点
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// 视频平均码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 缓冲区大小
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// 编码格式
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 码率-质量控制因子。
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// 视频画面裁切
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// 帧率。
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 关键帧间最大帧数。
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// 高。
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 是否开启横竖屏自适应（即：长短边模式）
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// 视频码率峰值
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// 视频贴黑边
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// 视频颜色格式。
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 只有H264支持该参数
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// 编码级别。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否去掉视频
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 扫描模式。
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// 宽。
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPipelineId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPriority(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.Priority = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList struct {
	// 任务创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 任务结束时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入组 (目前只支持单个输入)
	InputGroup []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// 子任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 子任务在整个任务中的索引号
	JobIndex *int32 `json:"JobIndex,omitempty" xml:"JobIndex,omitempty"`
	// 任务名
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 任务生成视频 media 信息
	OutFileMeta *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta `json:"OutFileMeta,omitempty" xml:"OutFileMeta,omitempty" type:"Struct"`
	// 输出媒体配置
	Output *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// 主任务 id
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// 转码处理配置
	ProcessConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务调度信息
	ScheduleConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 转码任务任务状态 - Init: 已提交, Processing: 转码中, Success: 转码成功, Fail: 转码失败, Deleted: 已删除
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交结果
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetCreateTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.CreateTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetFinishTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.FinishTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetInputGroup(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.InputGroup = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobIndex(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobIndex = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Name = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutFileMeta(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.OutFileMeta = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutput(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Output = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetParentJobId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ParentJobId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetProcessConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ProcessConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetRequestId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.RequestId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetScheduleConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ScheduleConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Status = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitResultJson(v map[string]interface{}) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitResultJson = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetUserData(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.UserData = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta struct {
	// 音频流信息
	AudioStreamInfoList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 基础文件信息
	FileBasicInfo *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 视频流信息
	VideoStreamInfoList []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetAudioStreamInfoList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.AudioStreamInfoList = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetFileBasicInfo(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.FileBasicInfo = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetVideoStreamInfoList(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.VideoStreamInfoList = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道布局
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码器标签
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码器标签名
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码器时间基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时间基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannelLayout(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecLongName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTag(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTagString(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetLang(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleRate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetStartTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetTimebase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo struct {
	// 视频码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 视频时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件url
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 视频格式名称
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 文件所在区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileSize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileStatus(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileUrl(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFormatName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetMediaId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetRegion(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Region = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList struct {
	AvgFps  *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// 编码格式
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	CodecTimeBase  *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// 图像显示宽高比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 帧率
	Fps        *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 颜色存储格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码器预设
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 视频画面旋转角度
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 采集点数宽高比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	TimeBase  *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetAvgFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetBitRate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecLongName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTag(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTagString(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDar(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHasBFrames(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetIndex(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLang(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLevel(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetNumFrames(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetRotate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetSar(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetStartTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetTimeBase(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig struct {
	// 图片水印配置
	ImageWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// 字幕压制配置
	Subtitles []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// 文字水印配置
	TextWatermarks []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// 转码配置
	Transcode *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetImageWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetSubtitles(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Subtitles = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTextWatermarks(v []*GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTranscode(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Transcode = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams struct {
	// 水印位置，x
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// 水印位置，y
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// 水印文件oss路径
	File *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// 显示时间设置
	Timeline *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// 显示时长，秒数 或者 "ToEND"
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 开始时间
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams struct {
	// 文件 encoding 格式
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// 字幕文件
	File *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 字幕文件格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFile(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams struct {
	// 根据输出视频大小调整字体 size。 true / false, default: false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// 边框颜色
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// 边框宽度
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// 水印文本，不需要 base64 encode，字符串需要 utf-8 编码
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 透明度
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// 颜色
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// 字体
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// 字体大小
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// 水印位置，距离左边距离
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// 水印位置，距离上边距离
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetOverwriteParams(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetTemplateId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams struct {
	// audio 设置
	Audio *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// 封装格式设置
	Container *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// 封装设置
	MuxConfig *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// video 设置
	Video *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetAudio(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetContainer(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetVideo(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio struct {
	// 输出文件的音频码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道数。
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 音频编解码格式，AAC、MP3、VORBIS、FLAC。
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 音频编码预置。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否删除音频流。
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 采样率。
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// 音量控制
	Volume *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// 目标音量
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// 音量范围
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// 音量调整方式
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// 最大峰值
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer struct {
	// 容器格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// 切片设置
	Segment *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// 切片时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 强制切片时间点
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo struct {
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// 视频平均码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 缓冲区大小
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// 编码格式
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 码率-质量控制因子。
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// 视频画面裁切
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// 帧率。
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 关键帧间最大帧数。
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// 高。
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 是否开启横竖屏自适应（即：长短边模式）
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// 视频码率峰值
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// 视频贴黑边
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// 视频颜色格式。
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 只有H264支持该参数
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// 编码级别。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否去掉视频
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 扫描模式。
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// 宽。
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPipelineId(v string) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPriority(v int32) *GetTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.Priority = &v
	return s
}

type GetTranscodeJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *GetTranscodeJobResponse) SetHeaders(v map[string]*string) *GetTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *GetTranscodeJobResponse) SetStatusCode(v int32) *GetTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTranscodeJobResponse) SetBody(v *GetTranscodeJobResponseBody) *GetTranscodeJobResponse {
	s.Body = v
	return s
}

type GetUrlUploadInfosRequest struct {
	JobIds     *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	UploadURLs *string `json:"UploadURLs,omitempty" xml:"UploadURLs,omitempty"`
}

func (s GetUrlUploadInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosRequest) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosRequest) SetJobIds(v string) *GetUrlUploadInfosRequest {
	s.JobIds = &v
	return s
}

func (s *GetUrlUploadInfosRequest) SetUploadURLs(v string) *GetUrlUploadInfosRequest {
	s.UploadURLs = &v
	return s
}

type GetUrlUploadInfosResponseBody struct {
	NonExists         []*string                                         `json:"NonExists,omitempty" xml:"NonExists,omitempty" type:"Repeated"`
	RequestId         *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	URLUploadInfoList []*GetUrlUploadInfosResponseBodyURLUploadInfoList `json:"URLUploadInfoList,omitempty" xml:"URLUploadInfoList,omitempty" type:"Repeated"`
}

func (s GetUrlUploadInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponseBody) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponseBody) SetNonExists(v []*string) *GetUrlUploadInfosResponseBody {
	s.NonExists = v
	return s
}

func (s *GetUrlUploadInfosResponseBody) SetRequestId(v string) *GetUrlUploadInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBody) SetURLUploadInfoList(v []*GetUrlUploadInfosResponseBodyURLUploadInfoList) *GetUrlUploadInfosResponseBody {
	s.URLUploadInfoList = v
	return s
}

type GetUrlUploadInfosResponseBodyURLUploadInfoList struct {
	CompleteTime *string `json:"CompleteTime,omitempty" xml:"CompleteTime,omitempty"`
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	FileSize     *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaId      *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UploadURL    *string `json:"UploadURL,omitempty" xml:"UploadURL,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s GetUrlUploadInfosResponseBodyURLUploadInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponseBodyURLUploadInfoList) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetCompleteTime(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.CompleteTime = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetCreationTime(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.CreationTime = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetErrorCode(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.ErrorCode = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetErrorMessage(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.ErrorMessage = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetFileSize(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.FileSize = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetJobId(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.JobId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetMediaId(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.MediaId = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetStatus(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.Status = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetUploadURL(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.UploadURL = &v
	return s
}

func (s *GetUrlUploadInfosResponseBodyURLUploadInfoList) SetUserData(v string) *GetUrlUploadInfosResponseBodyURLUploadInfoList {
	s.UserData = &v
	return s
}

type GetUrlUploadInfosResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetUrlUploadInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUrlUploadInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUrlUploadInfosResponse) GoString() string {
	return s.String()
}

func (s *GetUrlUploadInfosResponse) SetHeaders(v map[string]*string) *GetUrlUploadInfosResponse {
	s.Headers = v
	return s
}

func (s *GetUrlUploadInfosResponse) SetStatusCode(v int32) *GetUrlUploadInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *GetUrlUploadInfosResponse) SetBody(v *GetUrlUploadInfosResponseBody) *GetUrlUploadInfosResponse {
	s.Body = v
	return s
}

type ListAllPublicMediaTagsRequest struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	EntityId     *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
}

func (s ListAllPublicMediaTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsRequest) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsRequest) SetBusinessType(v string) *ListAllPublicMediaTagsRequest {
	s.BusinessType = &v
	return s
}

func (s *ListAllPublicMediaTagsRequest) SetEntityId(v string) *ListAllPublicMediaTagsRequest {
	s.EntityId = &v
	return s
}

type ListAllPublicMediaTagsResponseBody struct {
	// 公共素材库标签列表
	MediaTagList []*ListAllPublicMediaTagsResponseBodyMediaTagList `json:"MediaTagList,omitempty" xml:"MediaTagList,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAllPublicMediaTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBody) SetMediaTagList(v []*ListAllPublicMediaTagsResponseBodyMediaTagList) *ListAllPublicMediaTagsResponseBody {
	s.MediaTagList = v
	return s
}

func (s *ListAllPublicMediaTagsResponseBody) SetRequestId(v string) *ListAllPublicMediaTagsResponseBody {
	s.RequestId = &v
	return s
}

type ListAllPublicMediaTagsResponseBodyMediaTagList struct {
	// 素材标签id
	MediaTagId *string `json:"MediaTagId,omitempty" xml:"MediaTagId,omitempty"`
	// 素材标签中文名
	MediaTagNameChinese *string `json:"MediaTagNameChinese,omitempty" xml:"MediaTagNameChinese,omitempty"`
	// 素材标签英文名
	MediaTagNameEnglish *string                                                  `json:"MediaTagNameEnglish,omitempty" xml:"MediaTagNameEnglish,omitempty"`
	Options             []*ListAllPublicMediaTagsResponseBodyMediaTagListOptions `json:"Options,omitempty" xml:"Options,omitempty" type:"Repeated"`
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagList) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagList) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagId(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagId = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagNameChinese(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagNameChinese = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetMediaTagNameEnglish(v string) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.MediaTagNameEnglish = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagList) SetOptions(v []*ListAllPublicMediaTagsResponseBodyMediaTagListOptions) *ListAllPublicMediaTagsResponseBodyMediaTagList {
	s.Options = v
	return s
}

type ListAllPublicMediaTagsResponseBodyMediaTagListOptions struct {
	OptionChineseName *string `json:"OptionChineseName,omitempty" xml:"OptionChineseName,omitempty"`
	OptionEnglishName *string `json:"OptionEnglishName,omitempty" xml:"OptionEnglishName,omitempty"`
	OptionId          *string `json:"OptionId,omitempty" xml:"OptionId,omitempty"`
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagListOptions) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponseBodyMediaTagListOptions) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionChineseName(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionChineseName = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionEnglishName(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionEnglishName = &v
	return s
}

func (s *ListAllPublicMediaTagsResponseBodyMediaTagListOptions) SetOptionId(v string) *ListAllPublicMediaTagsResponseBodyMediaTagListOptions {
	s.OptionId = &v
	return s
}

type ListAllPublicMediaTagsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListAllPublicMediaTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAllPublicMediaTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllPublicMediaTagsResponse) GoString() string {
	return s.String()
}

func (s *ListAllPublicMediaTagsResponse) SetHeaders(v map[string]*string) *ListAllPublicMediaTagsResponse {
	s.Headers = v
	return s
}

func (s *ListAllPublicMediaTagsResponse) SetStatusCode(v int32) *ListAllPublicMediaTagsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListAllPublicMediaTagsResponse) SetBody(v *ListAllPublicMediaTagsResponseBody) *ListAllPublicMediaTagsResponse {
	s.Body = v
	return s
}

type ListCustomTemplatesRequest struct {
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 排序顺序：CreateTimeDesc 和 CreateTimeAsc
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// 分页数目
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 分页大小
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 模板子类型ID
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板类型。逗号分隔
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListCustomTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesRequest) SetName(v string) *ListCustomTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetOrderBy(v string) *ListCustomTemplatesRequest {
	s.OrderBy = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetPageNumber(v int32) *ListCustomTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetPageSize(v int32) *ListCustomTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetSubtype(v string) *ListCustomTemplatesRequest {
	s.Subtype = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetTemplateId(v string) *ListCustomTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *ListCustomTemplatesRequest) SetType(v string) *ListCustomTemplatesRequest {
	s.Type = &v
	return s
}

type ListCustomTemplatesResponseBody struct {
	// 模板信息列表
	CustomTemplateList []*ListCustomTemplatesResponseBodyCustomTemplateList `json:"CustomTemplateList,omitempty" xml:"CustomTemplateList,omitempty" type:"Repeated"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 模板总数
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListCustomTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBody) SetCustomTemplateList(v []*ListCustomTemplatesResponseBodyCustomTemplateList) *ListCustomTemplatesResponseBody {
	s.CustomTemplateList = v
	return s
}

func (s *ListCustomTemplatesResponseBody) SetRequestId(v string) *ListCustomTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomTemplatesResponseBody) SetTotal(v int32) *ListCustomTemplatesResponseBody {
	s.Total = &v
	return s
}

type ListCustomTemplatesResponseBodyCustomTemplateList struct {
	// 模板创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 是否默认模板
	IsDefault *bool `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	// 模板修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板子类型ID
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板子类型名称
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// 模板参数
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板名称
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// 模板类型ID
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// 模板类型名称
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s ListCustomTemplatesResponseBodyCustomTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponseBodyCustomTemplateList) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetCreateTime(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetIsDefault(v bool) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.IsDefault = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetModifiedTime(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.ModifiedTime = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetStatus(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Status = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetSubtype(v int32) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Subtype = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetSubtypeName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.SubtypeName = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateConfig(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateConfig = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateId(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTemplateName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetType(v int32) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.Type = &v
	return s
}

func (s *ListCustomTemplatesResponseBodyCustomTemplateList) SetTypeName(v string) *ListCustomTemplatesResponseBodyCustomTemplateList {
	s.TypeName = &v
	return s
}

type ListCustomTemplatesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListCustomTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCustomTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListCustomTemplatesResponse) SetHeaders(v map[string]*string) *ListCustomTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListCustomTemplatesResponse) SetStatusCode(v int32) *ListCustomTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListCustomTemplatesResponse) SetBody(v *ListCustomTemplatesResponseBody) *ListCustomTemplatesResponse {
	s.Body = v
	return s
}

type ListDynamicImageJobsRequest struct {
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// 任务ID
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 连续分页查询时下一页的标记
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// 排序顺序：CreateTimeDesc 和 CreateTimeAsc
	OrderBy           *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListDynamicImageJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsRequest) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsRequest) SetEndOfCreateTime(v string) *ListDynamicImageJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetJobId(v string) *ListDynamicImageJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetNextPageToken(v string) *ListDynamicImageJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetOrderBy(v string) *ListDynamicImageJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetPageSize(v int32) *ListDynamicImageJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetStartOfCreateTime(v string) *ListDynamicImageJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListDynamicImageJobsRequest) SetStatus(v string) *ListDynamicImageJobsRequest {
	s.Status = &v
	return s
}

type ListDynamicImageJobsResponseBody struct {
	Jobs          []*ListDynamicImageJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	NextPageToken *string                                 `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListDynamicImageJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBody) SetJobs(v []*ListDynamicImageJobsResponseBodyJobs) *ListDynamicImageJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListDynamicImageJobsResponseBody) SetNextPageToken(v string) *ListDynamicImageJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListDynamicImageJobsResponseBody) SetRequestId(v string) *ListDynamicImageJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobs struct {
	CreateTime    *string                                     `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime    *string                                     `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input         *ListDynamicImageJobsResponseBodyJobsInput  `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId         *string                                     `json:"JobId,omitempty" xml:"JobId,omitempty"`
	ModifiedTime  *string                                     `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Name          *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Output        *ListDynamicImageJobsResponseBodyJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	PipelineId    *string                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Status        *string                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitTime    *string                                     `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	TemplateId    *string                                     `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TriggerSource *string                                     `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetCreateTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetFinishTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetInput(v *ListDynamicImageJobsResponseBodyJobsInput) *ListDynamicImageJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetJobId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetModifiedTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetName(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetOutput(v *ListDynamicImageJobsResponseBodyJobsOutput) *ListDynamicImageJobsResponseBodyJobs {
	s.Output = v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetPipelineId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.PipelineId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetStatus(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetSubmitTime(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetTemplateId(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.TemplateId = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobs) SetTriggerSource(v string) *ListDynamicImageJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobsInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobsInput) SetMedia(v string) *ListDynamicImageJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobsInput) SetType(v string) *ListDynamicImageJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListDynamicImageJobsResponseBodyJobsOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListDynamicImageJobsResponseBodyJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponseBodyJobsOutput) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponseBodyJobsOutput) SetMedia(v string) *ListDynamicImageJobsResponseBodyJobsOutput {
	s.Media = &v
	return s
}

func (s *ListDynamicImageJobsResponseBodyJobsOutput) SetType(v string) *ListDynamicImageJobsResponseBodyJobsOutput {
	s.Type = &v
	return s
}

type ListDynamicImageJobsResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListDynamicImageJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDynamicImageJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDynamicImageJobsResponse) GoString() string {
	return s.String()
}

func (s *ListDynamicImageJobsResponse) SetHeaders(v map[string]*string) *ListDynamicImageJobsResponse {
	s.Headers = v
	return s
}

func (s *ListDynamicImageJobsResponse) SetStatusCode(v int32) *ListDynamicImageJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListDynamicImageJobsResponse) SetBody(v *ListDynamicImageJobsResponseBody) *ListDynamicImageJobsResponse {
	s.Body = v
	return s
}

type ListLiveRecordTemplatesRequest struct {
	Keyword     *string   `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	PageNo      *int64    `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize    *int64    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortBy      *string   `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	TemplateIds []*string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty" type:"Repeated"`
	Type        *string   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesRequest) SetKeyword(v string) *ListLiveRecordTemplatesRequest {
	s.Keyword = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetPageNo(v int64) *ListLiveRecordTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetPageSize(v int64) *ListLiveRecordTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetSortBy(v string) *ListLiveRecordTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetTemplateIds(v []*string) *ListLiveRecordTemplatesRequest {
	s.TemplateIds = v
	return s
}

func (s *ListLiveRecordTemplatesRequest) SetType(v string) *ListLiveRecordTemplatesRequest {
	s.Type = &v
	return s
}

type ListLiveRecordTemplatesResponseBody struct {
	PageNo   *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 数组，返回示例目录。
	RecordTemplateList []*ListLiveRecordTemplatesResponseBodyRecordTemplateList `json:"RecordTemplateList,omitempty" xml:"RecordTemplateList,omitempty" type:"Repeated"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SortBy    *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// 总记录数。
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBody) SetPageNo(v int64) *ListLiveRecordTemplatesResponseBody {
	s.PageNo = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetPageSize(v int64) *ListLiveRecordTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetRecordTemplateList(v []*ListLiveRecordTemplatesResponseBodyRecordTemplateList) *ListLiveRecordTemplatesResponseBody {
	s.RecordTemplateList = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetRequestId(v string) *ListLiveRecordTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetSortBy(v string) *ListLiveRecordTemplatesResponseBody {
	s.SortBy = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBody) SetTotalCount(v int64) *ListLiveRecordTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveRecordTemplatesResponseBodyRecordTemplateList struct {
	// 创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 最后修改时间
	LastModified *string `json:"LastModified,omitempty" xml:"LastModified,omitempty"`
	// 资源名称
	Name []byte `json:"Name,omitempty" xml:"Name,omitempty"`
	// 录制格式
	RecordFormatList []*ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList `json:"RecordFormatList,omitempty" xml:"RecordFormatList,omitempty" type:"Repeated"`
	// 资源一级ID
	TemplateId []byte `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 资源名称
	Type []byte `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateList) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetCreateTime(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetLastModified(v string) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.LastModified = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetName(v []byte) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.Name = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetRecordFormatList(v []*ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.RecordFormatList = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetTemplateId(v []byte) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.TemplateId = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateList) SetType(v []byte) *ListLiveRecordTemplatesResponseBodyRecordTemplateList {
	s.Type = v
	return s
}

type ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList struct {
	// 录制周期时长
	CycleDuration []byte `json:"CycleDuration,omitempty" xml:"CycleDuration,omitempty"`
	// 格式
	Format []byte `json:"Format,omitempty" xml:"Format,omitempty"`
	// Oss对象名
	OssObjectPrefix []byte `json:"OssObjectPrefix,omitempty" xml:"OssObjectPrefix,omitempty"`
	// 切片时长
	SliceDuration *int32 `json:"SliceDuration,omitempty" xml:"SliceDuration,omitempty"`
	// 切片Oss对象名
	SliceOssObjectPrefix []byte `json:"SliceOssObjectPrefix,omitempty" xml:"SliceOssObjectPrefix,omitempty"`
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetCycleDuration(v []byte) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.CycleDuration = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetFormat(v []byte) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.Format = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetOssObjectPrefix(v []byte) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.OssObjectPrefix = v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetSliceDuration(v int32) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.SliceDuration = &v
	return s
}

func (s *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList) SetSliceOssObjectPrefix(v []byte) *ListLiveRecordTemplatesResponseBodyRecordTemplateListRecordFormatList {
	s.SliceOssObjectPrefix = v
	return s
}

type ListLiveRecordTemplatesResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListLiveRecordTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveRecordTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveRecordTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveRecordTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveRecordTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveRecordTemplatesResponse) SetStatusCode(v int32) *ListLiveRecordTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveRecordTemplatesResponse) SetBody(v *ListLiveRecordTemplatesResponseBody) *ListLiveRecordTemplatesResponse {
	s.Body = v
	return s
}

type ListLiveTranscodeJobsRequest struct {
	KeyWord   *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	PageNo    *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize  *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortBy    *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	StartMode *int32  `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	Status    *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板Id
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsRequest) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsRequest) SetKeyWord(v string) *ListLiveTranscodeJobsRequest {
	s.KeyWord = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetPageNo(v int32) *ListLiveTranscodeJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetPageSize(v int32) *ListLiveTranscodeJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetSortBy(v string) *ListLiveTranscodeJobsRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetStartMode(v int32) *ListLiveTranscodeJobsRequest {
	s.StartMode = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetStatus(v int32) *ListLiveTranscodeJobsRequest {
	s.Status = &v
	return s
}

func (s *ListLiveTranscodeJobsRequest) SetType(v string) *ListLiveTranscodeJobsRequest {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponseBody struct {
	JobList []*ListLiveTranscodeJobsResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Repeated"`
	// 请求ID
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBody) SetJobList(v []*ListLiveTranscodeJobsResponseBodyJobList) *ListLiveTranscodeJobsResponseBody {
	s.JobList = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBody) SetRequestId(v string) *ListLiveTranscodeJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBody) SetTotalCount(v int32) *ListLiveTranscodeJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobList struct {
	CreateTime   *string                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	JobId        *string                                               `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name         *string                                               `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputStream *ListLiveTranscodeJobsResponseBodyJobListOutputStream `json:"OutputStream,omitempty" xml:"OutputStream,omitempty" type:"Struct"`
	StartMode    *int32                                                `json:"StartMode,omitempty" xml:"StartMode,omitempty"`
	Status       *int32                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	StreamInput  *ListLiveTranscodeJobsResponseBodyJobListStreamInput  `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	TemplateId   *string                                               `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName *string                                               `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateType *string                                               `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetCreateTime(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetJobId(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.JobId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetName(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.Name = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetOutputStream(v *ListLiveTranscodeJobsResponseBodyJobListOutputStream) *ListLiveTranscodeJobsResponseBodyJobList {
	s.OutputStream = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStartMode(v int32) *ListLiveTranscodeJobsResponseBodyJobList {
	s.StartMode = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStatus(v int32) *ListLiveTranscodeJobsResponseBodyJobList {
	s.Status = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetStreamInput(v *ListLiveTranscodeJobsResponseBodyJobListStreamInput) *ListLiveTranscodeJobsResponseBodyJobList {
	s.StreamInput = v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateId(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateName(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateName = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobList) SetTemplateType(v string) *ListLiveTranscodeJobsResponseBodyJobList {
	s.TemplateType = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListOutputStream struct {
	StreamInfos []*ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos `json:"StreamInfos,omitempty" xml:"StreamInfos,omitempty" type:"Repeated"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStream) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStream) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStream) SetStreamInfos(v []*ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) *ListLiveTranscodeJobsResponseBodyJobListOutputStream {
	s.StreamInfos = v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos struct {
	OutputUrl *string `json:"OutputUrl,omitempty" xml:"OutputUrl,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) SetOutputUrl(v string) *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos {
	s.OutputUrl = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos) SetType(v string) *ListLiveTranscodeJobsResponseBodyJobListOutputStreamStreamInfos {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponseBodyJobListStreamInput struct {
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeJobsResponseBodyJobListStreamInput) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponseBodyJobListStreamInput) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponseBodyJobListStreamInput) SetInputUrl(v string) *ListLiveTranscodeJobsResponseBodyJobListStreamInput {
	s.InputUrl = &v
	return s
}

func (s *ListLiveTranscodeJobsResponseBodyJobListStreamInput) SetType(v string) *ListLiveTranscodeJobsResponseBodyJobListStreamInput {
	s.Type = &v
	return s
}

type ListLiveTranscodeJobsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListLiveTranscodeJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveTranscodeJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeJobsResponse) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeJobsResponse) SetHeaders(v map[string]*string) *ListLiveTranscodeJobsResponse {
	s.Headers = v
	return s
}

func (s *ListLiveTranscodeJobsResponse) SetStatusCode(v int32) *ListLiveTranscodeJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveTranscodeJobsResponse) SetBody(v *ListLiveTranscodeJobsResponseBody) *ListLiveTranscodeJobsResponse {
	s.Body = v
	return s
}

type ListLiveTranscodeTemplatesRequest struct {
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	KeyWord  *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	PageNo   *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortBy   *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// 模板Id
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	VideoCodec *string `json:"VideoCodec,omitempty" xml:"VideoCodec,omitempty"`
}

func (s ListLiveTranscodeTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesRequest) SetCategory(v string) *ListLiveTranscodeTemplatesRequest {
	s.Category = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetKeyWord(v string) *ListLiveTranscodeTemplatesRequest {
	s.KeyWord = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetPageNo(v int32) *ListLiveTranscodeTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetPageSize(v int32) *ListLiveTranscodeTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetSortBy(v string) *ListLiveTranscodeTemplatesRequest {
	s.SortBy = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetType(v string) *ListLiveTranscodeTemplatesRequest {
	s.Type = &v
	return s
}

func (s *ListLiveTranscodeTemplatesRequest) SetVideoCodec(v string) *ListLiveTranscodeTemplatesRequest {
	s.VideoCodec = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBody struct {
	// 请求ID
	RequestId           *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateContentList []*ListLiveTranscodeTemplatesResponseBodyTemplateContentList `json:"TemplateContentList,omitempty" xml:"TemplateContentList,omitempty" type:"Repeated"`
	TotalCount          *int32                                                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetRequestId(v string) *ListLiveTranscodeTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetTemplateContentList(v []*ListLiveTranscodeTemplatesResponseBodyTemplateContentList) *ListLiveTranscodeTemplatesResponseBody {
	s.TemplateContentList = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBody) SetTotalCount(v int32) *ListLiveTranscodeTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentList struct {
	Category       *string                                                                  `json:"Category,omitempty" xml:"Category,omitempty"`
	CreateTime     *string                                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Name           *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfig *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	TemplateId     *string                                                                  `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Type           *string                                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentList) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentList) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetCategory(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Category = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetCreateTime(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.CreateTime = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetName(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Name = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetTemplateConfig(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.TemplateConfig = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetTemplateId(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.TemplateId = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentList) SetType(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentList {
	s.Type = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig struct {
	AudioParams *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	VideoParams *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) SetAudioParams(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig) SetVideoParams(v *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfig {
	s.VideoParams = v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetBitrate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetChannels(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetCodec(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetProfile(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams) SetSamplerate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams struct {
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Codec   *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Fps     *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop     *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetBitrate(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetCodec(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetFps(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetGop(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetHeight(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetProfile(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams) SetWidth(v string) *ListLiveTranscodeTemplatesResponseBodyTemplateContentListTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type ListLiveTranscodeTemplatesResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListLiveTranscodeTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLiveTranscodeTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLiveTranscodeTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListLiveTranscodeTemplatesResponse) SetHeaders(v map[string]*string) *ListLiveTranscodeTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListLiveTranscodeTemplatesResponse) SetStatusCode(v int32) *ListLiveTranscodeTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListLiveTranscodeTemplatesResponse) SetBody(v *ListLiveTranscodeTemplatesResponseBody) *ListLiveTranscodeTemplatesResponse {
	s.Body = v
	return s
}

type ListMediaBasicInfosRequest struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// 结束时间
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// 返回值中是否包含文件基础信息
	IncludeFileBasicInfo *bool `json:"IncludeFileBasicInfo,omitempty" xml:"IncludeFileBasicInfo,omitempty"`
	// 分页大小
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// 媒资ID，单个媒资ID支持前缀匹配
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 页号
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// 排序
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 创建时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaBasicInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosRequest) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosRequest) SetBusinessType(v string) *ListMediaBasicInfosRequest {
	s.BusinessType = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetEndTime(v string) *ListMediaBasicInfosRequest {
	s.EndTime = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetIncludeFileBasicInfo(v bool) *ListMediaBasicInfosRequest {
	s.IncludeFileBasicInfo = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMaxResults(v int32) *ListMediaBasicInfosRequest {
	s.MaxResults = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMediaId(v string) *ListMediaBasicInfosRequest {
	s.MediaId = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetMediaType(v string) *ListMediaBasicInfosRequest {
	s.MediaType = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetNextToken(v string) *ListMediaBasicInfosRequest {
	s.NextToken = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetSortBy(v string) *ListMediaBasicInfosRequest {
	s.SortBy = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetSource(v string) *ListMediaBasicInfosRequest {
	s.Source = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetStartTime(v string) *ListMediaBasicInfosRequest {
	s.StartTime = &v
	return s
}

func (s *ListMediaBasicInfosRequest) SetStatus(v string) *ListMediaBasicInfosRequest {
	s.Status = &v
	return s
}

type ListMediaBasicInfosResponseBody struct {
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// 符合要求的媒资集合
	MediaInfos []*ListMediaBasicInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	NextToken  *string                                      `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 符合要求的媒资总数
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListMediaBasicInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBody) SetMaxResults(v int32) *ListMediaBasicInfosResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetMediaInfos(v []*ListMediaBasicInfosResponseBodyMediaInfos) *ListMediaBasicInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetNextToken(v string) *ListMediaBasicInfosResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetRequestId(v string) *ListMediaBasicInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBody) SetTotalCount(v int64) *ListMediaBasicInfosResponseBody {
	s.TotalCount = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*ListMediaBasicInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetFileInfoList(v []*ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfos) SetMediaId(v string) *ListMediaBasicInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosFileInfoList struct {
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	FileType   *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height       *string `json:"Height,omitempty" xml:"Height,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetCreateTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetModifiedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *ListMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo struct {
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	CateId       *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 待注册的媒资在相应系统中的地址
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 截图
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 转码状态
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	UploadSource    *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBiz(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCateId(v int64) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSpriteImages(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUploadSource(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *ListMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type ListMediaBasicInfosResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMediaBasicInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMediaBasicInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaBasicInfosResponse) GoString() string {
	return s.String()
}

func (s *ListMediaBasicInfosResponse) SetHeaders(v map[string]*string) *ListMediaBasicInfosResponse {
	s.Headers = v
	return s
}

func (s *ListMediaBasicInfosResponse) SetStatusCode(v int32) *ListMediaBasicInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaBasicInfosResponse) SetBody(v *ListMediaBasicInfosResponseBody) *ListMediaBasicInfosResponse {
	s.Body = v
	return s
}

type ListMediaInfoJobsRequest struct {
	// 任务创建时间筛选条件的结束时间
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// 按 jobId 筛选
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 连续分页查询时下一页的标记 (第一页没有)
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// 排序顺序，目前只支持两种：CreateTimeDesc 和 CreateTimeAsc
	OrderBy  *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 任务创建时间筛选条件的起始时间
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// 任务状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListMediaInfoJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsRequest) SetEndOfCreateTime(v string) *ListMediaInfoJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetJobId(v string) *ListMediaInfoJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetNextPageToken(v string) *ListMediaInfoJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetOrderBy(v string) *ListMediaInfoJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetPageSize(v int32) *ListMediaInfoJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetStartOfCreateTime(v string) *ListMediaInfoJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListMediaInfoJobsRequest) SetStatus(v string) *ListMediaInfoJobsRequest {
	s.Status = &v
	return s
}

type ListMediaInfoJobsResponseBody struct {
	Jobs          []*ListMediaInfoJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	NextPageToken *string                              `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListMediaInfoJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBody) SetJobs(v []*ListMediaInfoJobsResponseBodyJobs) *ListMediaInfoJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListMediaInfoJobsResponseBody) SetNextPageToken(v string) *ListMediaInfoJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaInfoJobsResponseBody) SetRequestId(v string) *ListMediaInfoJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobs struct {
	// 是否异步处理
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// 任务完成时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入
	Input *ListMediaInfoJobsResponseBodyJobsInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// 任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 媒体信息详情
	MediaInfoProperty *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 调度信息
	ScheduleConfig *ListMediaInfoJobsResponseBodyJobsScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 任务状态 - Init: 已提交, Success: 成功, Fail: 失败
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交信息
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 任务来源 - API, WorkFlow, Console
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetAsync(v bool) *ListMediaInfoJobsResponseBodyJobs {
	s.Async = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetFinishTime(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetInput(v *ListMediaInfoJobsResponseBodyJobsInput) *ListMediaInfoJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetJobId(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetMediaInfoProperty(v *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) *ListMediaInfoJobsResponseBodyJobs {
	s.MediaInfoProperty = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetName(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetRequestId(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.RequestId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetScheduleConfig(v *ListMediaInfoJobsResponseBodyJobsScheduleConfig) *ListMediaInfoJobsResponseBodyJobs {
	s.ScheduleConfig = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetStatus(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetSubmitResultJson(v map[string]interface{}) *ListMediaInfoJobsResponseBodyJobs {
	s.SubmitResultJson = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetSubmitTime(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetTriggerSource(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobs) SetUserData(v string) *ListMediaInfoJobsResponseBodyJobs {
	s.UserData = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsInput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsInput) SetMedia(v string) *ListMediaInfoJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsInput) SetType(v string) *ListMediaInfoJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoProperty struct {
	// 音频流信息
	AudioStreamInfoList []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 基础文件信息
	FileBasicInfo *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 视频流信息
	VideoStreamInfoList []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetAudioStreamInfoList(v []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetFileBasicInfo(v *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty) SetVideoStreamInfoList(v []*ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) *ListMediaInfoJobsResponseBodyJobsMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道布局
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码器标签
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码器标签名
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码器时间基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时间基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo struct {
	// 视频码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 视频时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件url
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 视频格式名称
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 文件所在区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileType(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetHeight(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetRegion(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo) SetWidth(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList struct {
	AvgFps  *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// 编码格式
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	CodecTimeBase  *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// 图像显示宽高比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 帧率
	Fps        *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 颜色存储格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码器预设
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 视频画面旋转角度
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 采集点数宽高比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	TimeBase  *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *ListMediaInfoJobsResponseBodyJobsMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type ListMediaInfoJobsResponseBodyJobsScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s ListMediaInfoJobsResponseBodyJobsScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponseBodyJobsScheduleConfig) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponseBodyJobsScheduleConfig) SetPipelineId(v string) *ListMediaInfoJobsResponseBodyJobsScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *ListMediaInfoJobsResponseBodyJobsScheduleConfig) SetPriority(v int32) *ListMediaInfoJobsResponseBodyJobsScheduleConfig {
	s.Priority = &v
	return s
}

type ListMediaInfoJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListMediaInfoJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMediaInfoJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaInfoJobsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaInfoJobsResponse) SetHeaders(v map[string]*string) *ListMediaInfoJobsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaInfoJobsResponse) SetStatusCode(v int32) *ListMediaInfoJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListMediaInfoJobsResponse) SetBody(v *ListMediaInfoJobsResponseBody) *ListMediaInfoJobsResponse {
	s.Body = v
	return s
}

type ListPipelinesRequest struct {
	// 管道类型。
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
}

func (s ListPipelinesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesRequest) GoString() string {
	return s.String()
}

func (s *ListPipelinesRequest) SetSpeed(v string) *ListPipelinesRequest {
	s.Speed = &v
	return s
}

type ListPipelinesResponseBody struct {
	PipelineList []*ListPipelinesResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Repeated"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListPipelinesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBody) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBody) SetPipelineList(v []*ListPipelinesResponseBodyPipelineList) *ListPipelinesResponseBody {
	s.PipelineList = v
	return s
}

func (s *ListPipelinesResponseBody) SetRequestId(v string) *ListPipelinesResponseBody {
	s.RequestId = &v
	return s
}

type ListPipelinesResponseBodyPipelineList struct {
	// 模板创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 模板修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 管道名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 管道Id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 管道优先级
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// 管道类型
	Speed *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	// 管道状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListPipelinesResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponseBodyPipelineList) SetCreateTime(v string) *ListPipelinesResponseBodyPipelineList {
	s.CreateTime = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetModifiedTime(v string) *ListPipelinesResponseBodyPipelineList {
	s.ModifiedTime = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetName(v string) *ListPipelinesResponseBodyPipelineList {
	s.Name = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetPipelineId(v string) *ListPipelinesResponseBodyPipelineList {
	s.PipelineId = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetPriority(v int32) *ListPipelinesResponseBodyPipelineList {
	s.Priority = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetSpeed(v string) *ListPipelinesResponseBodyPipelineList {
	s.Speed = &v
	return s
}

func (s *ListPipelinesResponseBodyPipelineList) SetStatus(v string) *ListPipelinesResponseBodyPipelineList {
	s.Status = &v
	return s
}

type ListPipelinesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPipelinesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPipelinesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPipelinesResponse) GoString() string {
	return s.String()
}

func (s *ListPipelinesResponse) SetHeaders(v map[string]*string) *ListPipelinesResponse {
	s.Headers = v
	return s
}

func (s *ListPipelinesResponse) SetStatusCode(v int32) *ListPipelinesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPipelinesResponse) SetBody(v *ListPipelinesResponseBody) *ListPipelinesResponse {
	s.Body = v
	return s
}

type ListPublicMediaBasicInfosRequest struct {
	// 返回值中是否包含文件基础信息
	IncludeFileBasicInfo *bool `json:"IncludeFileBasicInfo,omitempty" xml:"IncludeFileBasicInfo,omitempty"`
	// 分页大小
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// 标签
	MediaTagId *string `json:"MediaTagId,omitempty" xml:"MediaTagId,omitempty"`
	// 下一次读取的位置
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
}

func (s ListPublicMediaBasicInfosRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosRequest) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosRequest) SetIncludeFileBasicInfo(v bool) *ListPublicMediaBasicInfosRequest {
	s.IncludeFileBasicInfo = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetMaxResults(v int32) *ListPublicMediaBasicInfosRequest {
	s.MaxResults = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetMediaTagId(v string) *ListPublicMediaBasicInfosRequest {
	s.MediaTagId = &v
	return s
}

func (s *ListPublicMediaBasicInfosRequest) SetNextToken(v string) *ListPublicMediaBasicInfosRequest {
	s.NextToken = &v
	return s
}

type ListPublicMediaBasicInfosResponseBody struct {
	MaxResults *int32 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// 符合要求的媒资集合
	MediaInfos []*ListPublicMediaBasicInfosResponseBodyMediaInfos `json:"MediaInfos,omitempty" xml:"MediaInfos,omitempty" type:"Repeated"`
	NextToken  *string                                            `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 符合要求的媒资总数
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBody) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBody) SetMaxResults(v int32) *ListPublicMediaBasicInfosResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetMediaInfos(v []*ListPublicMediaBasicInfosResponseBodyMediaInfos) *ListPublicMediaBasicInfosResponseBody {
	s.MediaInfos = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetNextToken(v string) *ListPublicMediaBasicInfosResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetRequestId(v string) *ListPublicMediaBasicInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBody) SetTotalCount(v int64) *ListPublicMediaBasicInfosResponseBody {
	s.TotalCount = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfos struct {
	// FileInfos
	FileInfoList []*ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfos) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetFileInfoList(v []*ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.FileInfoList = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetMediaBasicInfo(v *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.MediaBasicInfo = v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfos) SetMediaId(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfos {
	s.MediaId = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList struct {
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList) SetFileBasicInfo(v *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoList {
	s.FileBasicInfo = v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetBitrate(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetDuration(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileName(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileSize(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFileUrl(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetFormatName(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetHeight(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetRegion(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo) SetWidth(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 待注册的媒资在相应系统中的地址
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 截图
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 转码状态
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetBusinessType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCategory(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCoverURL(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetCreateTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDeletedTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetDescription(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetInputURL(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaId(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaTags(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetMediaType(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetModifiedTime(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSnapshots(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetSource(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTitle(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetTranscodeStatus(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo) SetUserData(v string) *ListPublicMediaBasicInfosResponseBodyMediaInfosMediaBasicInfo {
	s.UserData = &v
	return s
}

type ListPublicMediaBasicInfosResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListPublicMediaBasicInfosResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPublicMediaBasicInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPublicMediaBasicInfosResponse) GoString() string {
	return s.String()
}

func (s *ListPublicMediaBasicInfosResponse) SetHeaders(v map[string]*string) *ListPublicMediaBasicInfosResponse {
	s.Headers = v
	return s
}

func (s *ListPublicMediaBasicInfosResponse) SetStatusCode(v int32) *ListPublicMediaBasicInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *ListPublicMediaBasicInfosResponse) SetBody(v *ListPublicMediaBasicInfosResponseBody) *ListPublicMediaBasicInfosResponse {
	s.Body = v
	return s
}

type ListSmartJobsRequest struct {
	// 任务状态
	JobState *string `json:"JobState,omitempty" xml:"JobState,omitempty"`
	// 任务类型
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// 分页大小。最大不超过100。  默认值：10
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// 当前开始读取的位置
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// 当前页码。默认值为1。
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// 分页大小，每页显示条数。默认值为10，最大值为100。
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 排序参数，默认根据创建时间倒序
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s ListSmartJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsRequest) GoString() string {
	return s.String()
}

func (s *ListSmartJobsRequest) SetJobState(v string) *ListSmartJobsRequest {
	s.JobState = &v
	return s
}

func (s *ListSmartJobsRequest) SetJobType(v string) *ListSmartJobsRequest {
	s.JobType = &v
	return s
}

func (s *ListSmartJobsRequest) SetMaxResults(v int64) *ListSmartJobsRequest {
	s.MaxResults = &v
	return s
}

func (s *ListSmartJobsRequest) SetNextToken(v string) *ListSmartJobsRequest {
	s.NextToken = &v
	return s
}

func (s *ListSmartJobsRequest) SetPageNo(v int64) *ListSmartJobsRequest {
	s.PageNo = &v
	return s
}

func (s *ListSmartJobsRequest) SetPageSize(v int64) *ListSmartJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSmartJobsRequest) SetSortBy(v string) *ListSmartJobsRequest {
	s.SortBy = &v
	return s
}

type ListSmartJobsResponseBody struct {
	// 本次请求所返回的最大记录条数，最后一页前每页记录条数为MaxResults取值。  例如：  正例：10,10,5，反例：10,5,10
	MaxResults *string `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// 用来表示当前调用返回读取到的位置，空代表数据已经读取完毕。
	NextToken *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// 请求ID。
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SmartJobList []*ListSmartJobsResponseBodySmartJobList `json:"SmartJobList,omitempty" xml:"SmartJobList,omitempty" type:"Repeated"`
	// 本次请求条件下的数据总量，此参数为可选参数，默认可不返回。
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListSmartJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBody) SetMaxResults(v string) *ListSmartJobsResponseBody {
	s.MaxResults = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetNextToken(v string) *ListSmartJobsResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetRequestId(v string) *ListSmartJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSmartJobsResponseBody) SetSmartJobList(v []*ListSmartJobsResponseBodySmartJobList) *ListSmartJobsResponseBody {
	s.SmartJobList = v
	return s
}

func (s *ListSmartJobsResponseBody) SetTotalCount(v string) *ListSmartJobsResponseBody {
	s.TotalCount = &v
	return s
}

type ListSmartJobsResponseBodySmartJobList struct {
	// 创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 任务描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 输入配置
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// 任务输入配置
	InputConfig *ListSmartJobsResponseBodySmartJobListInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	// 任务Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 任务状态
	JobState *string `json:"JobState,omitempty" xml:"JobState,omitempty"`
	// 任务类型
	JobType *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	// 最后修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 任务输出配置
	OutputConfig *ListSmartJobsResponseBodySmartJobListOutputConfig `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	// 任务标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 用户自定义字段
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	// 用户Id
	UserId *int64 `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobList) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobList) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobList) SetCreateTime(v string) *ListSmartJobsResponseBodySmartJobList {
	s.CreateTime = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetDescription(v string) *ListSmartJobsResponseBodySmartJobList {
	s.Description = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetEditingConfig(v string) *ListSmartJobsResponseBodySmartJobList {
	s.EditingConfig = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetInputConfig(v *ListSmartJobsResponseBodySmartJobListInputConfig) *ListSmartJobsResponseBodySmartJobList {
	s.InputConfig = v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobId(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobId = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobState(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobState = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetJobType(v string) *ListSmartJobsResponseBodySmartJobList {
	s.JobType = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetModifiedTime(v string) *ListSmartJobsResponseBodySmartJobList {
	s.ModifiedTime = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetOutputConfig(v *ListSmartJobsResponseBodySmartJobListOutputConfig) *ListSmartJobsResponseBodySmartJobList {
	s.OutputConfig = v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetTitle(v string) *ListSmartJobsResponseBodySmartJobList {
	s.Title = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetUserData(v string) *ListSmartJobsResponseBodySmartJobList {
	s.UserData = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobList) SetUserId(v int64) *ListSmartJobsResponseBodySmartJobList {
	s.UserId = &v
	return s
}

type ListSmartJobsResponseBodySmartJobListInputConfig struct {
	// 文件信息
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
	// 关键词信息
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobListInputConfig) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobListInputConfig) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobListInputConfig) SetInputFile(v string) *ListSmartJobsResponseBodySmartJobListInputConfig {
	s.InputFile = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobListInputConfig) SetKeyword(v string) *ListSmartJobsResponseBodySmartJobListInputConfig {
	s.Keyword = &v
	return s
}

type ListSmartJobsResponseBodySmartJobListOutputConfig struct {
	// OSS Bucket
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	// OSS Object
	Object *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s ListSmartJobsResponseBodySmartJobListOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponseBodySmartJobListOutputConfig) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponseBodySmartJobListOutputConfig) SetBucket(v string) *ListSmartJobsResponseBodySmartJobListOutputConfig {
	s.Bucket = &v
	return s
}

func (s *ListSmartJobsResponseBodySmartJobListOutputConfig) SetObject(v string) *ListSmartJobsResponseBodySmartJobListOutputConfig {
	s.Object = &v
	return s
}

type ListSmartJobsResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSmartJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSmartJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSmartJobsResponse) GoString() string {
	return s.String()
}

func (s *ListSmartJobsResponse) SetHeaders(v map[string]*string) *ListSmartJobsResponse {
	s.Headers = v
	return s
}

func (s *ListSmartJobsResponse) SetStatusCode(v int32) *ListSmartJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSmartJobsResponse) SetBody(v *ListSmartJobsResponseBody) *ListSmartJobsResponse {
	s.Body = v
	return s
}

type ListSnapshotJobsRequest struct {
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	JobId           *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 连续分页查询时下一页的标记
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// 排序顺序：CreateTimeDesc 和 CreateTimeAsc
	OrderBy           *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListSnapshotJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsRequest) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsRequest) SetEndOfCreateTime(v string) *ListSnapshotJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetJobId(v string) *ListSnapshotJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetNextPageToken(v string) *ListSnapshotJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetOrderBy(v string) *ListSnapshotJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetPageSize(v int32) *ListSnapshotJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetStartOfCreateTime(v string) *ListSnapshotJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListSnapshotJobsRequest) SetStatus(v string) *ListSnapshotJobsRequest {
	s.Status = &v
	return s
}

type ListSnapshotJobsResponseBody struct {
	Jobs          []*ListSnapshotJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	NextPageToken *string                             `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSnapshotJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBody) SetJobs(v []*ListSnapshotJobsResponseBodyJobs) *ListSnapshotJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListSnapshotJobsResponseBody) SetNextPageToken(v string) *ListSnapshotJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListSnapshotJobsResponseBody) SetRequestId(v string) *ListSnapshotJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListSnapshotJobsResponseBodyJobs struct {
	Async         *bool                                   `json:"Async,omitempty" xml:"Async,omitempty"`
	Count         *int32                                  `json:"Count,omitempty" xml:"Count,omitempty"`
	CreateTime    *string                                 `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime    *string                                 `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input         *ListSnapshotJobsResponseBodyJobsInput  `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId         *string                                 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	ModifiedTime  *string                                 `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	Name          *string                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Output        *ListSnapshotJobsResponseBodyJobsOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	PipelineId    *string                                 `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Status        *string                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	SubmitTime    *string                                 `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	TemplateId    *string                                 `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TriggerSource *string                                 `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	Type          *string                                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobs) SetAsync(v bool) *ListSnapshotJobsResponseBodyJobs {
	s.Async = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetCount(v int32) *ListSnapshotJobsResponseBodyJobs {
	s.Count = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetCreateTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetFinishTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetInput(v *ListSnapshotJobsResponseBodyJobsInput) *ListSnapshotJobsResponseBodyJobs {
	s.Input = v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetJobId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetModifiedTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.ModifiedTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetName(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetOutput(v *ListSnapshotJobsResponseBodyJobsOutput) *ListSnapshotJobsResponseBodyJobs {
	s.Output = v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetPipelineId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.PipelineId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetStatus(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetSubmitTime(v string) *ListSnapshotJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetTemplateId(v string) *ListSnapshotJobsResponseBodyJobs {
	s.TemplateId = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetTriggerSource(v string) *ListSnapshotJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobs) SetType(v string) *ListSnapshotJobsResponseBodyJobs {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponseBodyJobsInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobsInput) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobsInput) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobsInput) SetMedia(v string) *ListSnapshotJobsResponseBodyJobsInput {
	s.Media = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobsInput) SetType(v string) *ListSnapshotJobsResponseBodyJobsInput {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponseBodyJobsOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSnapshotJobsResponseBodyJobsOutput) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponseBodyJobsOutput) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponseBodyJobsOutput) SetMedia(v string) *ListSnapshotJobsResponseBodyJobsOutput {
	s.Media = &v
	return s
}

func (s *ListSnapshotJobsResponseBodyJobsOutput) SetType(v string) *ListSnapshotJobsResponseBodyJobsOutput {
	s.Type = &v
	return s
}

type ListSnapshotJobsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSnapshotJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSnapshotJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSnapshotJobsResponse) GoString() string {
	return s.String()
}

func (s *ListSnapshotJobsResponse) SetHeaders(v map[string]*string) *ListSnapshotJobsResponse {
	s.Headers = v
	return s
}

func (s *ListSnapshotJobsResponse) SetStatusCode(v int32) *ListSnapshotJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSnapshotJobsResponse) SetBody(v *ListSnapshotJobsResponseBody) *ListSnapshotJobsResponse {
	s.Body = v
	return s
}

type ListSystemTemplatesRequest struct {
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 分页数目
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// 分页大小
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 模板状态：Normal正常，Invisible不可见，ALL全部
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板子类型ID
	Subtype *string `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板类型。逗号分隔
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListSystemTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesRequest) SetName(v string) *ListSystemTemplatesRequest {
	s.Name = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetPageNumber(v int32) *ListSystemTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetPageSize(v int32) *ListSystemTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetStatus(v string) *ListSystemTemplatesRequest {
	s.Status = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetSubtype(v string) *ListSystemTemplatesRequest {
	s.Subtype = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetTemplateId(v string) *ListSystemTemplatesRequest {
	s.TemplateId = &v
	return s
}

func (s *ListSystemTemplatesRequest) SetType(v string) *ListSystemTemplatesRequest {
	s.Type = &v
	return s
}

type ListSystemTemplatesResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 模板信息列表
	SystemTemplateList []*ListSystemTemplatesResponseBodySystemTemplateList `json:"SystemTemplateList,omitempty" xml:"SystemTemplateList,omitempty" type:"Repeated"`
	// 模板总数
	Total *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListSystemTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponseBody) SetRequestId(v string) *ListSystemTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListSystemTemplatesResponseBody) SetSystemTemplateList(v []*ListSystemTemplatesResponseBodySystemTemplateList) *ListSystemTemplatesResponseBody {
	s.SystemTemplateList = v
	return s
}

func (s *ListSystemTemplatesResponseBody) SetTotal(v int32) *ListSystemTemplatesResponseBody {
	s.Total = &v
	return s
}

type ListSystemTemplatesResponseBodySystemTemplateList struct {
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板子类型ID
	Subtype *int32 `json:"Subtype,omitempty" xml:"Subtype,omitempty"`
	// 模板子类型名称
	SubtypeName *string `json:"SubtypeName,omitempty" xml:"SubtypeName,omitempty"`
	// 模板参数
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板名称
	TemplateName *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	// 模板类型ID
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// 模板类型名称
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s ListSystemTemplatesResponseBodySystemTemplateList) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponseBodySystemTemplateList) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetStatus(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Status = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetSubtype(v int32) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Subtype = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetSubtypeName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.SubtypeName = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateConfig(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateConfig = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateId(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateId = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTemplateName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TemplateName = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetType(v int32) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.Type = &v
	return s
}

func (s *ListSystemTemplatesResponseBodySystemTemplateList) SetTypeName(v string) *ListSystemTemplatesResponseBodySystemTemplateList {
	s.TypeName = &v
	return s
}

type ListSystemTemplatesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListSystemTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSystemTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSystemTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListSystemTemplatesResponse) SetHeaders(v map[string]*string) *ListSystemTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListSystemTemplatesResponse) SetStatusCode(v int32) *ListSystemTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListSystemTemplatesResponse) SetBody(v *ListSystemTemplatesResponseBody) *ListSystemTemplatesResponse {
	s.Body = v
	return s
}

type ListTemplatesRequest struct {
	// 创建来源
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// 搜索关键词，可以根据模板id和title搜索
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// 当前页码。默认值为1。
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// 分页大小，每页显示条数。默认值为10，最大值为100。
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 排序参数，默认根据创建时间倒序
	SortType *string `json:"SortType,omitempty" xml:"SortType,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListTemplatesRequest) SetCreateSource(v string) *ListTemplatesRequest {
	s.CreateSource = &v
	return s
}

func (s *ListTemplatesRequest) SetKeyword(v string) *ListTemplatesRequest {
	s.Keyword = &v
	return s
}

func (s *ListTemplatesRequest) SetPageNo(v int64) *ListTemplatesRequest {
	s.PageNo = &v
	return s
}

func (s *ListTemplatesRequest) SetPageSize(v int64) *ListTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTemplatesRequest) SetSortType(v string) *ListTemplatesRequest {
	s.SortType = &v
	return s
}

func (s *ListTemplatesRequest) SetStatus(v string) *ListTemplatesRequest {
	s.Status = &v
	return s
}

func (s *ListTemplatesRequest) SetType(v string) *ListTemplatesRequest {
	s.Type = &v
	return s
}

type ListTemplatesResponseBody struct {
	// 请求ID
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Templates []*ListTemplatesResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Repeated"`
	// 本次请求条件下的数据总量。
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponseBody) SetRequestId(v string) *ListTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTemplatesResponseBody) SetTemplates(v []*ListTemplatesResponseBodyTemplates) *ListTemplatesResponseBody {
	s.Templates = v
	return s
}

func (s *ListTemplatesResponseBody) SetTotalCount(v int32) *ListTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListTemplatesResponseBodyTemplates struct {
	// ClipsParam
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// 模板配置
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// 封面URL
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 创建来源
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// 创建时间
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	// 修改来源
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// 修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 预览素材
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// 预览素材状态
	PreviewMediaStatus *string `json:"PreviewMediaStatus,omitempty" xml:"PreviewMediaStatus,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 模板类型
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTemplatesResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponseBodyTemplates) SetClipsParam(v string) *ListTemplatesResponseBodyTemplates {
	s.ClipsParam = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetConfig(v string) *ListTemplatesResponseBodyTemplates {
	s.Config = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCoverURL(v string) *ListTemplatesResponseBodyTemplates {
	s.CoverURL = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCreateSource(v string) *ListTemplatesResponseBodyTemplates {
	s.CreateSource = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetCreationTime(v string) *ListTemplatesResponseBodyTemplates {
	s.CreationTime = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetModifiedSource(v string) *ListTemplatesResponseBodyTemplates {
	s.ModifiedSource = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetModifiedTime(v string) *ListTemplatesResponseBodyTemplates {
	s.ModifiedTime = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetName(v string) *ListTemplatesResponseBodyTemplates {
	s.Name = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetPreviewMedia(v string) *ListTemplatesResponseBodyTemplates {
	s.PreviewMedia = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetPreviewMediaStatus(v string) *ListTemplatesResponseBodyTemplates {
	s.PreviewMediaStatus = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetStatus(v string) *ListTemplatesResponseBodyTemplates {
	s.Status = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetTemplateId(v string) *ListTemplatesResponseBodyTemplates {
	s.TemplateId = &v
	return s
}

func (s *ListTemplatesResponseBodyTemplates) SetType(v string) *ListTemplatesResponseBodyTemplates {
	s.Type = &v
	return s
}

type ListTemplatesResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListTemplatesResponse) SetHeaders(v map[string]*string) *ListTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListTemplatesResponse) SetStatusCode(v int32) *ListTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTemplatesResponse) SetBody(v *ListTemplatesResponseBody) *ListTemplatesResponse {
	s.Body = v
	return s
}

type ListTranscodeJobsRequest struct {
	// 任务创建时间筛选条件的结束时间
	EndOfCreateTime *string `json:"EndOfCreateTime,omitempty" xml:"EndOfCreateTime,omitempty"`
	// 按 jobId 筛选
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 连续分页查询时下一页的标记 (第一页没有)
	NextPageToken *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// 排序顺序，目前只支持两种：CreateTimeDesc 和 CreateTimeAsc
	OrderBy  *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 任务创建时间筛选条件的起始时间
	StartOfCreateTime *string `json:"StartOfCreateTime,omitempty" xml:"StartOfCreateTime,omitempty"`
	// 任务状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListTranscodeJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsRequest) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsRequest) SetEndOfCreateTime(v string) *ListTranscodeJobsRequest {
	s.EndOfCreateTime = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetJobId(v string) *ListTranscodeJobsRequest {
	s.JobId = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetNextPageToken(v string) *ListTranscodeJobsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetOrderBy(v string) *ListTranscodeJobsRequest {
	s.OrderBy = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetPageSize(v int32) *ListTranscodeJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetStartOfCreateTime(v string) *ListTranscodeJobsRequest {
	s.StartOfCreateTime = &v
	return s
}

func (s *ListTranscodeJobsRequest) SetStatus(v string) *ListTranscodeJobsRequest {
	s.Status = &v
	return s
}

type ListTranscodeJobsResponseBody struct {
	Jobs          []*ListTranscodeJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	NextPageToken *string                              `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListTranscodeJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBody) SetJobs(v []*ListTranscodeJobsResponseBodyJobs) *ListTranscodeJobsResponseBody {
	s.Jobs = v
	return s
}

func (s *ListTranscodeJobsResponseBody) SetNextPageToken(v string) *ListTranscodeJobsResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListTranscodeJobsResponseBody) SetRequestId(v string) *ListTranscodeJobsResponseBody {
	s.RequestId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobs struct {
	// 任务创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 任务结束时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入组 (目前只支持单个输入)
	InputGroup []*ListTranscodeJobsResponseBodyJobsInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// 子任务数量
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// 任务名
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 任务输出组
	OutputGroup []*ListTranscodeJobsResponseBodyJobsOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// 主任务 id
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// 任务完成百分比
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// 提交任务时请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务调度配置
	ScheduleConfig *ListTranscodeJobsResponseBodyJobsScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 任务状态 Success: 有子任务成功, Fail: 所有子任务失败
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 任务来源 - API, WorkFlow, Console
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobs) SetCreateTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.CreateTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetFinishTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.FinishTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetInputGroup(v []*ListTranscodeJobsResponseBodyJobsInputGroup) *ListTranscodeJobsResponseBodyJobs {
	s.InputGroup = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetJobCount(v int32) *ListTranscodeJobsResponseBodyJobs {
	s.JobCount = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetName(v string) *ListTranscodeJobsResponseBodyJobs {
	s.Name = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetOutputGroup(v []*ListTranscodeJobsResponseBodyJobsOutputGroup) *ListTranscodeJobsResponseBodyJobs {
	s.OutputGroup = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetParentJobId(v string) *ListTranscodeJobsResponseBodyJobs {
	s.ParentJobId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetPercent(v int32) *ListTranscodeJobsResponseBodyJobs {
	s.Percent = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetRequestId(v string) *ListTranscodeJobsResponseBodyJobs {
	s.RequestId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetScheduleConfig(v *ListTranscodeJobsResponseBodyJobsScheduleConfig) *ListTranscodeJobsResponseBodyJobs {
	s.ScheduleConfig = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetStatus(v string) *ListTranscodeJobsResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetSubmitTime(v string) *ListTranscodeJobsResponseBodyJobs {
	s.SubmitTime = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetTriggerSource(v string) *ListTranscodeJobsResponseBodyJobs {
	s.TriggerSource = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobs) SetUserData(v string) *ListTranscodeJobsResponseBodyJobs {
	s.UserData = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsInputGroup struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsInputGroup) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsInputGroup) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsInputGroup) SetType(v string) *ListTranscodeJobsResponseBodyJobsInputGroup {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroup struct {
	// 输出媒体配置
	Output *ListTranscodeJobsResponseBodyJobsOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// 任务处理配置
	ProcessConfig *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroup) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroup) SetOutput(v *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) *ListTranscodeJobsResponseBodyJobsOutputGroup {
	s.Output = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroup) SetProcessConfig(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) *ListTranscodeJobsResponseBodyJobsOutputGroup {
	s.ProcessConfig = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupOutput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupOutput) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupOutput {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig struct {
	// 图片水印配置
	ImageWatermarks []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// 字幕压制配置
	Subtitles []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// 文字水印配置
	TextWatermarks []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// 转码配置
	Transcode *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetImageWatermarks(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetSubtitles(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetTextWatermarks(v []*ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig) SetTranscode(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// 水印位置，x
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// 水印位置，y
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// 水印文件oss路径
	File *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// 显示时间设置
	Timeline *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// 显示时长，秒数 或者 "ToEND"
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 开始时间
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// 文件 encoding 格式
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// 字幕文件
	File *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 字幕文件格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// 根据输出视频大小调整字体 size。 true / false, default: false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// 边框颜色
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// 边框宽度
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// 水印文本，不需要 base64 encode，字符串需要 utf-8 编码
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 透明度
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// 颜色
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// 字体
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// 字体大小
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// 水印位置，距离左边距离
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// 水印位置，距离上边距离
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) SetOverwriteParams(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode) SetTemplateId(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// audio 设置
	Audio *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// 封装格式设置
	Container *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// 封装设置
	MuxConfig *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// video 设置
	Video *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// 输出文件的音频码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道数。
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 音频编解码格式，AAC、MP3、VORBIS、FLAC。
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 音频编码预置。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否删除音频流。
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 采样率。
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// 音量控制
	Volume *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// 目标音量
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// 音量范围
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// 音量调整方式
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// 最大峰值
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// 容器格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// 切片设置
	Segment *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// 切片时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 强制切片时间点
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// 视频平均码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 缓冲区大小
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// 编码格式
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 码率-质量控制因子。
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// 视频画面裁切
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// 帧率。
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 关键帧间最大帧数。
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// 高。
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 是否开启横竖屏自适应（即：长短边模式）
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// 视频码率峰值
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// 视频贴黑边
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// 视频颜色格式。
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 只有H264支持该参数
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// 编码级别。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否去掉视频
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 扫描模式。
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// 宽。
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *ListTranscodeJobsResponseBodyJobsOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type ListTranscodeJobsResponseBodyJobsScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s ListTranscodeJobsResponseBodyJobsScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponseBodyJobsScheduleConfig) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponseBodyJobsScheduleConfig) SetPipelineId(v string) *ListTranscodeJobsResponseBodyJobsScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *ListTranscodeJobsResponseBodyJobsScheduleConfig) SetPriority(v int32) *ListTranscodeJobsResponseBodyJobsScheduleConfig {
	s.Priority = &v
	return s
}

type ListTranscodeJobsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ListTranscodeJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTranscodeJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTranscodeJobsResponse) GoString() string {
	return s.String()
}

func (s *ListTranscodeJobsResponse) SetHeaders(v map[string]*string) *ListTranscodeJobsResponse {
	s.Headers = v
	return s
}

func (s *ListTranscodeJobsResponse) SetStatusCode(v int32) *ListTranscodeJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTranscodeJobsResponse) SetBody(v *ListTranscodeJobsResponseBody) *ListTranscodeJobsResponse {
	s.Body = v
	return s
}

type NotifyPreOssUploadCompleteRequest struct {
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
}

func (s NotifyPreOssUploadCompleteRequest) String() string {
	return tea.Prettify(s)
}

func (s NotifyPreOssUploadCompleteRequest) GoString() string {
	return s.String()
}

func (s *NotifyPreOssUploadCompleteRequest) SetFileName(v string) *NotifyPreOssUploadCompleteRequest {
	s.FileName = &v
	return s
}

type NotifyPreOssUploadCompleteResponseBody struct {
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s NotifyPreOssUploadCompleteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s NotifyPreOssUploadCompleteResponseBody) GoString() string {
	return s.String()
}

func (s *NotifyPreOssUploadCompleteResponseBody) SetRequestId(v string) *NotifyPreOssUploadCompleteResponseBody {
	s.RequestId = &v
	return s
}

type NotifyPreOssUploadCompleteResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *NotifyPreOssUploadCompleteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s NotifyPreOssUploadCompleteResponse) String() string {
	return tea.Prettify(s)
}

func (s NotifyPreOssUploadCompleteResponse) GoString() string {
	return s.String()
}

func (s *NotifyPreOssUploadCompleteResponse) SetHeaders(v map[string]*string) *NotifyPreOssUploadCompleteResponse {
	s.Headers = v
	return s
}

func (s *NotifyPreOssUploadCompleteResponse) SetStatusCode(v int32) *NotifyPreOssUploadCompleteResponse {
	s.StatusCode = &v
	return s
}

func (s *NotifyPreOssUploadCompleteResponse) SetBody(v *NotifyPreOssUploadCompleteResponseBody) *NotifyPreOssUploadCompleteResponse {
	s.Body = v
	return s
}

type QueryCensorJobListRequest struct {
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryCensorJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListRequest) SetJobIds(v string) *QueryCensorJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryCensorJobListRequest) SetOwnerAccount(v string) *QueryCensorJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryCensorJobListRequest) SetOwnerId(v int64) *QueryCensorJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCensorJobListRequest) SetResourceOwnerAccount(v string) *QueryCensorJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryCensorJobListRequest) SetResourceOwnerId(v int64) *QueryCensorJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryCensorJobListResponseBody struct {
	Jobs        *QueryCensorJobListResponseBodyJobs        `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Struct"`
	NonExistIds *QueryCensorJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
	RequestId   *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryCensorJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBody) SetJobs(v *QueryCensorJobListResponseBodyJobs) *QueryCensorJobListResponseBody {
	s.Jobs = v
	return s
}

func (s *QueryCensorJobListResponseBody) SetNonExistIds(v *QueryCensorJobListResponseBodyNonExistIds) *QueryCensorJobListResponseBody {
	s.NonExistIds = v
	return s
}

func (s *QueryCensorJobListResponseBody) SetRequestId(v string) *QueryCensorJobListResponseBody {
	s.RequestId = &v
	return s
}

type QueryCensorJobListResponseBodyJobs struct {
	CensorJob []*QueryCensorJobListResponseBodyJobsCensorJob `json:"CensorJob,omitempty" xml:"CensorJob,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobs) SetCensorJob(v []*QueryCensorJobListResponseBodyJobsCensorJob) *QueryCensorJobListResponseBodyJobs {
	s.CensorJob = v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJob struct {
	BarrageCensorResult   *string                                                           `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty"`
	CensorConfig          *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig          `json:"CensorConfig,omitempty" xml:"CensorConfig,omitempty" type:"Struct"`
	CensorPornResult      *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult      `json:"CensorPornResult,omitempty" xml:"CensorPornResult,omitempty" type:"Struct"`
	CensorTerrorismResult *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult `json:"CensorTerrorismResult,omitempty" xml:"CensorTerrorismResult,omitempty" type:"Struct"`
	Code                  *string                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	CreationTime          *string                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DescCensorResult      *string                                                           `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty"`
	Id                    *string                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	ImageCensorResults    *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResults    `json:"ImageCensorResults,omitempty" xml:"ImageCensorResults,omitempty" type:"Struct"`
	Input                 *QueryCensorJobListResponseBodyJobsCensorJobInput                 `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Message               *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId            *string                                                           `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	ResultSaveObject      *string                                                           `json:"ResultSaveObject,omitempty" xml:"ResultSaveObject,omitempty"`
	State                 *string                                                           `json:"State,omitempty" xml:"State,omitempty"`
	TitleCensorResult     *string                                                           `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty"`
	UserData              *string                                                           `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJob) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJob) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetBarrageCensorResult(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.BarrageCensorResult = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetCensorConfig(v *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.CensorConfig = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetCensorPornResult(v *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.CensorPornResult = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetCensorTerrorismResult(v *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.CensorTerrorismResult = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetCode(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.Code = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetCreationTime(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.CreationTime = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetDescCensorResult(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.DescCensorResult = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetId(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.Id = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetImageCensorResults(v *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResults) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.ImageCensorResults = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetInput(v *QueryCensorJobListResponseBodyJobsCensorJobInput) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.Input = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetMessage(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.Message = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetPipelineId(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.PipelineId = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetResultSaveObject(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.ResultSaveObject = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetState(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.State = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetTitleCensorResult(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.TitleCensorResult = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJob) SetUserData(v string) *QueryCensorJobListResponseBodyJobsCensorJob {
	s.UserData = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorConfig struct {
	BizType    *string                                                            `json:"BizType,omitempty" xml:"BizType,omitempty"`
	Interval   *string                                                            `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OutputFile *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	SaveType   *string                                                            `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	Scenes     *string                                                            `json:"Scenes,omitempty" xml:"Scenes,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) SetBizType(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig {
	s.BizType = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) SetInterval(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig {
	s.Interval = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) SetOutputFile(v *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) SetSaveType(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig {
	s.SaveType = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig) SetScenes(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfig {
	s.Scenes = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile) SetBucket(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile) SetLocation(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile) SetObject(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorConfigOutputFile {
	s.Object = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult struct {
	AverageScore    *string                                                                     `json:"AverageScore,omitempty" xml:"AverageScore,omitempty"`
	Label           *string                                                                     `json:"Label,omitempty" xml:"Label,omitempty"`
	MaxScore        *string                                                                     `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
	PornCounterList *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterList `json:"PornCounterList,omitempty" xml:"PornCounterList,omitempty" type:"Struct"`
	PornTopList     *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopList     `json:"PornTopList,omitempty" xml:"PornTopList,omitempty" type:"Struct"`
	Suggestion      *string                                                                     `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) SetAverageScore(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult {
	s.AverageScore = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) SetLabel(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) SetMaxScore(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult {
	s.MaxScore = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) SetPornCounterList(v *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterList) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult {
	s.PornCounterList = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) SetPornTopList(v *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopList) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult {
	s.PornTopList = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult) SetSuggestion(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResult {
	s.Suggestion = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterList struct {
	Counter []*QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter `json:"Counter,omitempty" xml:"Counter,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterList) SetCounter(v []*QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterList {
	s.Counter = v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter struct {
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter) SetCount(v int32) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter {
	s.Count = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter) SetLabel(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornCounterListCounter {
	s.Label = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopList struct {
	Top []*QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop `json:"Top,omitempty" xml:"Top,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopList) SetTop(v []*QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopList {
	s.Top = v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop struct {
	Index     *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Label     *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Object    *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Score     *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) SetIndex(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop {
	s.Index = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) SetLabel(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) SetObject(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop {
	s.Object = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) SetScore(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop {
	s.Score = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop) SetTimestamp(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorPornResultPornTopListTop {
	s.Timestamp = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult struct {
	AverageScore         *string                                                                               `json:"AverageScore,omitempty" xml:"AverageScore,omitempty"`
	Label                *string                                                                               `json:"Label,omitempty" xml:"Label,omitempty"`
	MaxScore             *string                                                                               `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
	Suggestion           *string                                                                               `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TerrorismCounterList *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterList `json:"TerrorismCounterList,omitempty" xml:"TerrorismCounterList,omitempty" type:"Struct"`
	TerrorismTopList     *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopList     `json:"TerrorismTopList,omitempty" xml:"TerrorismTopList,omitempty" type:"Struct"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) SetAverageScore(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult {
	s.AverageScore = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) SetLabel(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) SetMaxScore(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult {
	s.MaxScore = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) SetSuggestion(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult {
	s.Suggestion = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) SetTerrorismCounterList(v *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterList) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult {
	s.TerrorismCounterList = v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult) SetTerrorismTopList(v *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopList) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResult {
	s.TerrorismTopList = v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterList struct {
	Counter []*QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter `json:"Counter,omitempty" xml:"Counter,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterList) SetCounter(v []*QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterList {
	s.Counter = v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter struct {
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter) SetCount(v int32) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter {
	s.Count = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter) SetLabel(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismCounterListCounter {
	s.Label = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopList struct {
	Top []*QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop `json:"Top,omitempty" xml:"Top,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopList) SetTop(v []*QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopList {
	s.Top = v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop struct {
	Index     *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Label     *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Object    *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Score     *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) SetIndex(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Index = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) SetLabel(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) SetObject(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Object = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) SetScore(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Score = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop) SetTimestamp(v string) *QueryCensorJobListResponseBodyJobsCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Timestamp = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobImageCensorResults struct {
	ImageCensorResult []*QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult `json:"ImageCensorResult,omitempty" xml:"ImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResults) SetImageCensorResult(v []*QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult) *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResults {
	s.ImageCensorResult = v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult struct {
	ImageBucket   *string `json:"ImageBucket,omitempty" xml:"ImageBucket,omitempty"`
	ImageLocation *string `json:"ImageLocation,omitempty" xml:"ImageLocation,omitempty"`
	ImageObject   *string `json:"ImageObject,omitempty" xml:"ImageObject,omitempty"`
	Result        *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult) SetImageBucket(v string) *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult {
	s.ImageBucket = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult) SetImageLocation(v string) *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult {
	s.ImageLocation = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult) SetImageObject(v string) *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult {
	s.ImageObject = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult) SetResult(v string) *QueryCensorJobListResponseBodyJobsCensorJobImageCensorResultsImageCensorResult {
	s.Result = &v
	return s
}

type QueryCensorJobListResponseBodyJobsCensorJobInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryCensorJobListResponseBodyJobsCensorJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyJobsCensorJobInput) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobInput) SetBucket(v string) *QueryCensorJobListResponseBodyJobsCensorJobInput {
	s.Bucket = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobInput) SetLocation(v string) *QueryCensorJobListResponseBodyJobsCensorJobInput {
	s.Location = &v
	return s
}

func (s *QueryCensorJobListResponseBodyJobsCensorJobInput) SetObject(v string) *QueryCensorJobListResponseBodyJobsCensorJobInput {
	s.Object = &v
	return s
}

type QueryCensorJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryCensorJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryCensorJobListResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryCensorJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCensorJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponse) SetHeaders(v map[string]*string) *QueryCensorJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryCensorJobListResponse) SetStatusCode(v int32) *QueryCensorJobListResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryCensorJobListResponse) SetBody(v *QueryCensorJobListResponseBody) *QueryCensorJobListResponse {
	s.Body = v
	return s
}

type QueryIProductionJobRequest struct {
	// 幂等参数
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	JobId       *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobRequest) SetClientToken(v string) *QueryIProductionJobRequest {
	s.ClientToken = &v
	return s
}

func (s *QueryIProductionJobRequest) SetJobId(v string) *QueryIProductionJobRequest {
	s.JobId = &v
	return s
}

type QueryIProductionJobResponseBody struct {
	CreateTime   *string                                `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishTime   *string                                `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	FunctionName *string                                `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	Input        *QueryIProductionJobResponseBodyInput  `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId        *string                                `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobParams    *string                                `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	Name         *string                                `json:"Name,omitempty" xml:"Name,omitempty"`
	Output       *QueryIProductionJobResponseBodyOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	OutputFiles  []*string                              `json:"OutputFiles,omitempty" xml:"OutputFiles,omitempty" type:"Repeated"`
	OutputUrls   []*string                              `json:"OutputUrls,omitempty" xml:"OutputUrls,omitempty" type:"Repeated"`
	// Id of the request
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *string                                        `json:"Result,omitempty" xml:"Result,omitempty"`
	ScheduleConfig *QueryIProductionJobResponseBodyScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	Status         *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TemplateId     *string                                        `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	UserData       *string                                        `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s QueryIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBody) SetCreateTime(v string) *QueryIProductionJobResponseBody {
	s.CreateTime = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetFinishTime(v string) *QueryIProductionJobResponseBody {
	s.FinishTime = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetFunctionName(v string) *QueryIProductionJobResponseBody {
	s.FunctionName = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetInput(v *QueryIProductionJobResponseBodyInput) *QueryIProductionJobResponseBody {
	s.Input = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobId(v string) *QueryIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobParams(v string) *QueryIProductionJobResponseBody {
	s.JobParams = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetName(v string) *QueryIProductionJobResponseBody {
	s.Name = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutput(v *QueryIProductionJobResponseBodyOutput) *QueryIProductionJobResponseBody {
	s.Output = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutputFiles(v []*string) *QueryIProductionJobResponseBody {
	s.OutputFiles = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutputUrls(v []*string) *QueryIProductionJobResponseBody {
	s.OutputUrls = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetRequestId(v string) *QueryIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetResult(v string) *QueryIProductionJobResponseBody {
	s.Result = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetScheduleConfig(v *QueryIProductionJobResponseBodyScheduleConfig) *QueryIProductionJobResponseBody {
	s.ScheduleConfig = v
	return s
}

func (s *QueryIProductionJobResponseBody) SetStatus(v string) *QueryIProductionJobResponseBody {
	s.Status = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetTemplateId(v string) *QueryIProductionJobResponseBody {
	s.TemplateId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetUserData(v string) *QueryIProductionJobResponseBody {
	s.UserData = &v
	return s
}

type QueryIProductionJobResponseBodyInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryIProductionJobResponseBodyInput) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyInput) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyInput) SetMedia(v string) *QueryIProductionJobResponseBodyInput {
	s.Media = &v
	return s
}

func (s *QueryIProductionJobResponseBodyInput) SetType(v string) *QueryIProductionJobResponseBodyInput {
	s.Type = &v
	return s
}

type QueryIProductionJobResponseBodyOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryIProductionJobResponseBodyOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyOutput) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyOutput) SetMedia(v string) *QueryIProductionJobResponseBodyOutput {
	s.Media = &v
	return s
}

func (s *QueryIProductionJobResponseBodyOutput) SetType(v string) *QueryIProductionJobResponseBodyOutput {
	s.Type = &v
	return s
}

type QueryIProductionJobResponseBodyScheduleConfig struct {
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority   *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s QueryIProductionJobResponseBodyScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBodyScheduleConfig) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBodyScheduleConfig) SetPipelineId(v string) *QueryIProductionJobResponseBodyScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *QueryIProductionJobResponseBodyScheduleConfig) SetPriority(v int32) *QueryIProductionJobResponseBodyScheduleConfig {
	s.Priority = &v
	return s
}

type QueryIProductionJobResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponse) SetHeaders(v map[string]*string) *QueryIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *QueryIProductionJobResponse) SetStatusCode(v int32) *QueryIProductionJobResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryIProductionJobResponse) SetBody(v *QueryIProductionJobResponseBody) *QueryIProductionJobResponse {
	s.Body = v
	return s
}

type QueryMediaCensorJobDetailRequest struct {
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MaximumPageSize      *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s QueryMediaCensorJobDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailRequest) SetJobId(v string) *QueryMediaCensorJobDetailRequest {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetMaximumPageSize(v int64) *QueryMediaCensorJobDetailRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetNextPageToken(v string) *QueryMediaCensorJobDetailRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

type QueryMediaCensorJobDetailResponseBody struct {
	MediaCensorJobDetail *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail `json:"MediaCensorJobDetail,omitempty" xml:"MediaCensorJobDetail,omitempty" type:"Struct"`
	RequestId            *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBody) SetMediaCensorJobDetail(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) *QueryMediaCensorJobDetailResponseBody {
	s.MediaCensorJobDetail = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBody) SetRequestId(v string) *QueryMediaCensorJobDetailResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail struct {
	BarrageCensorResult     *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult     `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty" type:"Struct"`
	Code                    *string                                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	CoverImageCensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults `json:"CoverImageCensorResults,omitempty" xml:"CoverImageCensorResults,omitempty" type:"Struct"`
	CreationTime            *string                                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	DescCensorResult        *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult        `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty" type:"Struct"`
	FinishTime              *string                                                                           `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Input                   *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput                   `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobId                   *string                                                                           `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Message                 *string                                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId              *string                                                                           `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	State                   *string                                                                           `json:"State,omitempty" xml:"State,omitempty"`
	Suggestion              *string                                                                           `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	TitleCensorResult       *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult       `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty" type:"Struct"`
	UserData                *string                                                                           `json:"UserData,omitempty" xml:"UserData,omitempty"`
	VensorCensorResult      *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult      `json:"VensorCensorResult,omitempty" xml:"VensorCensorResult,omitempty" type:"Struct"`
	VideoCensorConfig       *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig       `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetBarrageCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.BarrageCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCode(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Code = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCoverImageCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CoverImageCensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCreationTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetDescCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.DescCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetFinishTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetInput(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Input = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetJobId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetMessage(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Message = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetPipelineId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetState(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetTitleCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.TitleCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetUserData(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.UserData = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVensorCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VensorCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVideoCensorConfig(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VideoCensorConfig = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults struct {
	CoverImageCensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult `json:"CoverImageCensorResult,omitempty" xml:"CoverImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) SetCoverImageCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults {
	s.CoverImageCensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult struct {
	Bucket   *string                                                                                                        `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string                                                                                                        `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string                                                                                                        `json:"Object,omitempty" xml:"Object,omitempty"`
	Results  *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Results = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults struct {
	Result []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) SetResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults {
	s.Result = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Object = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult struct {
	CensorResults  *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults  `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	NextPageToken  *string                                                                                    `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	VideoTimelines *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines `json:"VideoTimelines,omitempty" xml:"VideoTimelines,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetNextPageToken(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetVideoTimelines(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.VideoTimelines = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines struct {
	VideoTimeline []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline `json:"VideoTimeline,omitempty" xml:"VideoTimeline,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) SetVideoTimeline(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines {
	s.VideoTimeline = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline struct {
	CensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
	Object        *string                                                                                                              `json:"Object,omitempty" xml:"Object,omitempty"`
	Timestamp     *string                                                                                                              `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.CensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetTimestamp(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Timestamp = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult struct {
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Rate = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig struct {
	BizType     *string                                                                               `json:"BizType,omitempty" xml:"BizType,omitempty"`
	OutputFile  *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	VideoCensor *string                                                                               `json:"VideoCensor,omitempty" xml:"VideoCensor,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetBizType(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.BizType = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetOutputFile(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetVideoCensor(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.VideoCensor = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile struct {
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Object = &v
	return s
}

type QueryMediaCensorJobDetailResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *QueryMediaCensorJobDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaCensorJobDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponse) SetHeaders(v map[string]*string) *QueryMediaCensorJobDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaCensorJobDetailResponse) SetStatusCode(v int32) *QueryMediaCensorJobDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponse) SetBody(v *QueryMediaCensorJobDetailResponseBody) *QueryMediaCensorJobDetailResponse {
	s.Body = v
	return s
}

type RefreshUploadMediaRequest struct {
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s RefreshUploadMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaRequest) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaRequest) SetMediaId(v string) *RefreshUploadMediaRequest {
	s.MediaId = &v
	return s
}

type RefreshUploadMediaResponseBody struct {
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// RequestId
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UploadAddress *string `json:"UploadAddress,omitempty" xml:"UploadAddress,omitempty"`
	UploadAuth    *string `json:"UploadAuth,omitempty" xml:"UploadAuth,omitempty"`
}

func (s RefreshUploadMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaResponseBody) SetMediaId(v string) *RefreshUploadMediaResponseBody {
	s.MediaId = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetRequestId(v string) *RefreshUploadMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetUploadAddress(v string) *RefreshUploadMediaResponseBody {
	s.UploadAddress = &v
	return s
}

func (s *RefreshUploadMediaResponseBody) SetUploadAuth(v string) *RefreshUploadMediaResponseBody {
	s.UploadAuth = &v
	return s
}

type RefreshUploadMediaResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RefreshUploadMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefreshUploadMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshUploadMediaResponse) GoString() string {
	return s.String()
}

func (s *RefreshUploadMediaResponse) SetHeaders(v map[string]*string) *RefreshUploadMediaResponse {
	s.Headers = v
	return s
}

func (s *RefreshUploadMediaResponse) SetStatusCode(v int32) *RefreshUploadMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *RefreshUploadMediaResponse) SetBody(v *RefreshUploadMediaResponseBody) *RefreshUploadMediaResponse {
	s.Body = v
	return s
}

type RegisterMediaInfoRequest struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	CateId       *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// 客户端token
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// 封面图，仅视频媒资有效
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 媒资媒体url
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// 标签,如果有多个标签用逗号隔开
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 是否覆盖已有媒资
	Overwrite *bool `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// 注册媒资的配置
	RegisterConfig *string `json:"RegisterConfig,omitempty" xml:"RegisterConfig,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 用户数据，最大1024字节
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s RegisterMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoRequest) SetBusinessType(v string) *RegisterMediaInfoRequest {
	s.BusinessType = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetCateId(v int64) *RegisterMediaInfoRequest {
	s.CateId = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetClientToken(v string) *RegisterMediaInfoRequest {
	s.ClientToken = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetCoverURL(v string) *RegisterMediaInfoRequest {
	s.CoverURL = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetDescription(v string) *RegisterMediaInfoRequest {
	s.Description = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetInputURL(v string) *RegisterMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetMediaTags(v string) *RegisterMediaInfoRequest {
	s.MediaTags = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetMediaType(v string) *RegisterMediaInfoRequest {
	s.MediaType = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetOverwrite(v bool) *RegisterMediaInfoRequest {
	s.Overwrite = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetRegisterConfig(v string) *RegisterMediaInfoRequest {
	s.RegisterConfig = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetTitle(v string) *RegisterMediaInfoRequest {
	s.Title = &v
	return s
}

func (s *RegisterMediaInfoRequest) SetUserData(v string) *RegisterMediaInfoRequest {
	s.UserData = &v
	return s
}

type RegisterMediaInfoResponseBody struct {
	// ICE媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoResponseBody) SetMediaId(v string) *RegisterMediaInfoResponseBody {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaInfoResponseBody) SetRequestId(v string) *RegisterMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type RegisterMediaInfoResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RegisterMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RegisterMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaInfoResponse) SetHeaders(v map[string]*string) *RegisterMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaInfoResponse) SetStatusCode(v int32) *RegisterMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterMediaInfoResponse) SetBody(v *RegisterMediaInfoResponseBody) *RegisterMediaInfoResponse {
	s.Body = v
	return s
}

type RegisterMediaStreamRequest struct {
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	MediaId  *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s RegisterMediaStreamRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamRequest) SetInputURL(v string) *RegisterMediaStreamRequest {
	s.InputURL = &v
	return s
}

func (s *RegisterMediaStreamRequest) SetMediaId(v string) *RegisterMediaStreamRequest {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaStreamRequest) SetUserData(v string) *RegisterMediaStreamRequest {
	s.UserData = &v
	return s
}

type RegisterMediaStreamResponseBody struct {
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterMediaStreamResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamResponseBody) SetMediaId(v string) *RegisterMediaStreamResponseBody {
	s.MediaId = &v
	return s
}

func (s *RegisterMediaStreamResponseBody) SetRequestId(v string) *RegisterMediaStreamResponseBody {
	s.RequestId = &v
	return s
}

type RegisterMediaStreamResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RegisterMediaStreamResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RegisterMediaStreamResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaStreamResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaStreamResponse) SetHeaders(v map[string]*string) *RegisterMediaStreamResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaStreamResponse) SetStatusCode(v int32) *RegisterMediaStreamResponse {
	s.StatusCode = &v
	return s
}

func (s *RegisterMediaStreamResponse) SetBody(v *RegisterMediaStreamResponseBody) *RegisterMediaStreamResponse {
	s.Body = v
	return s
}

type SearchEditingProjectRequest struct {
	// 创建来源
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// CreationTime（创建时间）的结束时间
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// 分页参数
	MaxResults *int64 `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	// 分页参数
	NextToken   *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// 结果排序方式
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	// CreateTime（创建时间）的开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 云剪辑工程状态。多个用逗号分隔
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板类型
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
}

func (s SearchEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectRequest) SetCreateSource(v string) *SearchEditingProjectRequest {
	s.CreateSource = &v
	return s
}

func (s *SearchEditingProjectRequest) SetEndTime(v string) *SearchEditingProjectRequest {
	s.EndTime = &v
	return s
}

func (s *SearchEditingProjectRequest) SetMaxResults(v int64) *SearchEditingProjectRequest {
	s.MaxResults = &v
	return s
}

func (s *SearchEditingProjectRequest) SetNextToken(v string) *SearchEditingProjectRequest {
	s.NextToken = &v
	return s
}

func (s *SearchEditingProjectRequest) SetProjectType(v string) *SearchEditingProjectRequest {
	s.ProjectType = &v
	return s
}

func (s *SearchEditingProjectRequest) SetSortBy(v string) *SearchEditingProjectRequest {
	s.SortBy = &v
	return s
}

func (s *SearchEditingProjectRequest) SetStartTime(v string) *SearchEditingProjectRequest {
	s.StartTime = &v
	return s
}

func (s *SearchEditingProjectRequest) SetStatus(v string) *SearchEditingProjectRequest {
	s.Status = &v
	return s
}

func (s *SearchEditingProjectRequest) SetTemplateType(v string) *SearchEditingProjectRequest {
	s.TemplateType = &v
	return s
}

type SearchEditingProjectResponseBody struct {
	// 云剪辑工程总数
	MaxResults *int64  `json:"MaxResults,omitempty" xml:"MaxResults,omitempty"`
	NextToken  *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	// 云剪辑工程列表
	ProjectList []*SearchEditingProjectResponseBodyProjectList `json:"ProjectList,omitempty" xml:"ProjectList,omitempty" type:"Repeated"`
	// Id of the request
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponseBody) SetMaxResults(v int64) *SearchEditingProjectResponseBody {
	s.MaxResults = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetNextToken(v string) *SearchEditingProjectResponseBody {
	s.NextToken = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetProjectList(v []*SearchEditingProjectResponseBodyProjectList) *SearchEditingProjectResponseBody {
	s.ProjectList = v
	return s
}

func (s *SearchEditingProjectResponseBody) SetRequestId(v string) *SearchEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchEditingProjectResponseBody) SetTotalCount(v int64) *SearchEditingProjectResponseBody {
	s.TotalCount = &v
	return s
}

type SearchEditingProjectResponseBodyProjectList struct {
	BusinessConfig *string `json:"BusinessConfig,omitempty" xml:"BusinessConfig,omitempty"`
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// 云剪辑工程封面
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 创建来源
	CreateSource *string `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	// 云剪辑工程创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 云剪辑工程描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 云剪辑工程总时长
	Duration *int64 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 云剪辑工程合成失败的错误码
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// 云剪辑工程合成失败的消息
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// 最后一次修改来源
	ModifiedSource *string `json:"ModifiedSource,omitempty" xml:"ModifiedSource,omitempty"`
	// 云剪辑工程最新修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 云剪辑工程ID
	ProjectId   *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectType *string `json:"ProjectType,omitempty" xml:"ProjectType,omitempty"`
	// 云剪辑工程状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板类型
	TemplateType *string `json:"TemplateType,omitempty" xml:"TemplateType,omitempty"`
	// 云剪辑工程时间线
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// 云剪辑工程标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s SearchEditingProjectResponseBodyProjectList) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponseBodyProjectList) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponseBodyProjectList) SetBusinessConfig(v string) *SearchEditingProjectResponseBodyProjectList {
	s.BusinessConfig = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetBusinessStatus(v string) *SearchEditingProjectResponseBodyProjectList {
	s.BusinessStatus = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCoverURL(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CoverURL = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCreateSource(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CreateSource = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetCreateTime(v string) *SearchEditingProjectResponseBodyProjectList {
	s.CreateTime = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetDescription(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Description = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetDuration(v int64) *SearchEditingProjectResponseBodyProjectList {
	s.Duration = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetErrorCode(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ErrorCode = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetErrorMessage(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ErrorMessage = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetModifiedSource(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ModifiedSource = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetModifiedTime(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ModifiedTime = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetProjectId(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ProjectId = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetProjectType(v string) *SearchEditingProjectResponseBodyProjectList {
	s.ProjectType = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetStatus(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Status = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTemplateType(v string) *SearchEditingProjectResponseBodyProjectList {
	s.TemplateType = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTimeline(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Timeline = &v
	return s
}

func (s *SearchEditingProjectResponseBodyProjectList) SetTitle(v string) *SearchEditingProjectResponseBodyProjectList {
	s.Title = &v
	return s
}

type SearchEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SearchEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *SearchEditingProjectResponse) SetHeaders(v map[string]*string) *SearchEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *SearchEditingProjectResponse) SetStatusCode(v int32) *SearchEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchEditingProjectResponse) SetBody(v *SearchEditingProjectResponseBody) *SearchEditingProjectResponse {
	s.Body = v
	return s
}

type SearchMediaRequest struct {
	// 实体Id
	EntityId *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	// 过滤条件
	Match *string `json:"Match,omitempty" xml:"Match,omitempty"`
	// 当前页码。默认值为1
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// 每页返回的数据条数。默认值为10，最大值为100
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// 排序字段和排序顺序。多个使用英文逗号（,）分隔
	SortBy *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s SearchMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaRequest) SetEntityId(v string) *SearchMediaRequest {
	s.EntityId = &v
	return s
}

func (s *SearchMediaRequest) SetMatch(v string) *SearchMediaRequest {
	s.Match = &v
	return s
}

func (s *SearchMediaRequest) SetPageNo(v int32) *SearchMediaRequest {
	s.PageNo = &v
	return s
}

func (s *SearchMediaRequest) SetPageSize(v int32) *SearchMediaRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaRequest) SetSortBy(v string) *SearchMediaRequest {
	s.SortBy = &v
	return s
}

type SearchMediaResponseBody struct {
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// 符合要求的媒资集合
	MediaInfoList []*SearchMediaResponseBodyMediaInfoList `json:"MediaInfoList,omitempty" xml:"MediaInfoList,omitempty" type:"Repeated"`
	RequestId     *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success       *string                                 `json:"Success,omitempty" xml:"Success,omitempty"`
	Total         *int64                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s SearchMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBody) SetCode(v string) *SearchMediaResponseBody {
	s.Code = &v
	return s
}

func (s *SearchMediaResponseBody) SetMediaInfoList(v []*SearchMediaResponseBodyMediaInfoList) *SearchMediaResponseBody {
	s.MediaInfoList = v
	return s
}

func (s *SearchMediaResponseBody) SetRequestId(v string) *SearchMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaResponseBody) SetSuccess(v string) *SearchMediaResponseBody {
	s.Success = &v
	return s
}

func (s *SearchMediaResponseBody) SetTotal(v int64) *SearchMediaResponseBody {
	s.Total = &v
	return s
}

type SearchMediaResponseBodyMediaInfoList struct {
	// FileInfos
	FileInfoList []*SearchMediaResponseBodyMediaInfoListFileInfoList `json:"FileInfoList,omitempty" xml:"FileInfoList,omitempty" type:"Repeated"`
	// BasicInfo
	MediaBasicInfo *SearchMediaResponseBodyMediaInfoListMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoList) SetFileInfoList(v []*SearchMediaResponseBodyMediaInfoListFileInfoList) *SearchMediaResponseBodyMediaInfoList {
	s.FileInfoList = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetMediaBasicInfo(v *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) *SearchMediaResponseBodyMediaInfoList {
	s.MediaBasicInfo = v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoList) SetMediaId(v string) *SearchMediaResponseBodyMediaInfoList {
	s.MediaId = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListFileInfoList struct {
	// 文件基础信息，包含时长，大小等
	FileBasicInfo *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoList) SetFileBasicInfo(v *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) *SearchMediaResponseBodyMediaInfoListFileInfoList {
	s.FileBasicInfo = v
	return s
}

type SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo struct {
	// 码率
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小（字节）
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	FileType   *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件oss地址
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 封装格式
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height       *string `json:"Height,omitempty" xml:"Height,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 文件存储区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetBitrate(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetCreateTime(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetDuration(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileName(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileSize(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileStatus(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileType(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFileUrl(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetFormatName(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetHeight(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetModifiedTime(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetRegion(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo) SetWidth(v string) *SearchMediaResponseBodyMediaInfoListFileInfoListFileBasicInfo {
	s.Width = &v
	return s
}

type SearchMediaResponseBodyMediaInfoListMediaBasicInfo struct {
	Biz *string `json:"Biz,omitempty" xml:"Biz,omitempty"`
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	CateId       *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName     *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 待注册的媒资在相应系统中的地址
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 截图
	Snapshots *string `json:"Snapshots,omitempty" xml:"Snapshots,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 转码状态
	TranscodeStatus *string `json:"TranscodeStatus,omitempty" xml:"TranscodeStatus,omitempty"`
	UploadSource    *string `json:"UploadSource,omitempty" xml:"UploadSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SearchMediaResponseBodyMediaInfoListMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaInfoListMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetBiz(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Biz = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetBusinessType(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCateId(v int64) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CateId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCateName(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CateName = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCategory(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCoverURL(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetCreateTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetDeletedTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetDescription(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetInputURL(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.InputURL = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaId(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaTags(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetMediaType(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetModifiedTime(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSnapshots(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Snapshots = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSource(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetSpriteImages(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetStatus(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetTitle(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetTranscodeStatus(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.TranscodeStatus = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetUploadSource(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.UploadSource = &v
	return s
}

func (s *SearchMediaResponseBodyMediaInfoListMediaBasicInfo) SetUserData(v string) *SearchMediaResponseBodyMediaInfoListMediaBasicInfo {
	s.UserData = &v
	return s
}

type SearchMediaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SearchMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaResponse) SetHeaders(v map[string]*string) *SearchMediaResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaResponse) SetStatusCode(v int32) *SearchMediaResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchMediaResponse) SetBody(v *SearchMediaResponseBody) *SearchMediaResponse {
	s.Body = v
	return s
}

type SearchPublicMediaInfoRequest struct {
	Authorized                 *bool   `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	DynamicMetaDataMatchFields *string `json:"DynamicMetaDataMatchFields,omitempty" xml:"DynamicMetaDataMatchFields,omitempty"`
	EntityId                   *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Favorite                   *bool   `json:"Favorite,omitempty" xml:"Favorite,omitempty"`
	MediaIds                   *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	PageNo                     *int32  `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	PageSize                   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SortBy                     *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
}

func (s SearchPublicMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoRequest) SetAuthorized(v bool) *SearchPublicMediaInfoRequest {
	s.Authorized = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetDynamicMetaDataMatchFields(v string) *SearchPublicMediaInfoRequest {
	s.DynamicMetaDataMatchFields = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetEntityId(v string) *SearchPublicMediaInfoRequest {
	s.EntityId = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetFavorite(v bool) *SearchPublicMediaInfoRequest {
	s.Favorite = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetMediaIds(v string) *SearchPublicMediaInfoRequest {
	s.MediaIds = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetPageNo(v int32) *SearchPublicMediaInfoRequest {
	s.PageNo = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetPageSize(v int32) *SearchPublicMediaInfoRequest {
	s.PageSize = &v
	return s
}

func (s *SearchPublicMediaInfoRequest) SetSortBy(v string) *SearchPublicMediaInfoRequest {
	s.SortBy = &v
	return s
}

type SearchPublicMediaInfoResponseBody struct {
	PublicMediaInfos []*SearchPublicMediaInfoResponseBodyPublicMediaInfos `json:"PublicMediaInfos,omitempty" xml:"PublicMediaInfos,omitempty" type:"Repeated"`
	// Id of the request
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int64  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s SearchPublicMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBody) SetPublicMediaInfos(v []*SearchPublicMediaInfoResponseBodyPublicMediaInfos) *SearchPublicMediaInfoResponseBody {
	s.PublicMediaInfos = v
	return s
}

func (s *SearchPublicMediaInfoResponseBody) SetRequestId(v string) *SearchPublicMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBody) SetTotalCount(v int64) *SearchPublicMediaInfoResponseBody {
	s.TotalCount = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfos struct {
	Authorized        *bool                                                       `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	Favorite          *bool                                                       `json:"Favorite,omitempty" xml:"Favorite,omitempty"`
	MediaInfo         *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	RemainingAuthTime *string                                                     `json:"RemainingAuthTime,omitempty" xml:"RemainingAuthTime,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfos) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfos) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetAuthorized(v bool) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.Authorized = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetFavorite(v bool) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.Favorite = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetMediaInfo(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.MediaInfo = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfos) SetRemainingAuthTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfos {
	s.RemainingAuthTime = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo struct {
	DynamicMetaData *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData `json:"DynamicMetaData,omitempty" xml:"DynamicMetaData,omitempty" type:"Struct"`
	// BasicInfo
	MediaBasicInfo *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo `json:"MediaBasicInfo,omitempty" xml:"MediaBasicInfo,omitempty" type:"Struct"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetDynamicMetaData(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.DynamicMetaData = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetMediaBasicInfo(v *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.MediaBasicInfo = v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo) SetMediaId(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfo {
	s.MediaId = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData struct {
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) SetData(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData {
	s.Data = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData) SetType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoDynamicMetaData {
	s.Type = &v
	return s
}

type SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo struct {
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面地址
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 媒资创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 媒资删除时间
	DeletedTime *string `json:"DeletedTime,omitempty" xml:"DeletedTime,omitempty"`
	// 内容描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// MediaId
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 媒资媒体类型
	MediaType *string `json:"MediaType,omitempty" xml:"MediaType,omitempty"`
	// 媒资修改时间
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	// 来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 雪碧图
	SpriteImages *string `json:"SpriteImages,omitempty" xml:"SpriteImages,omitempty"`
	// 资源状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetBusinessType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.BusinessType = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCategory(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Category = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCoverURL(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.CoverURL = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetCreateTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.CreateTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetDeletedTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.DeletedTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetDescription(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Description = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaId(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaTags(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaTags = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetMediaType(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.MediaType = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetModifiedTime(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.ModifiedTime = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetSource(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Source = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetSpriteImages(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.SpriteImages = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetStatus(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Status = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetTitle(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.Title = &v
	return s
}

func (s *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo) SetUserData(v string) *SearchPublicMediaInfoResponseBodyPublicMediaInfosMediaInfoMediaBasicInfo {
	s.UserData = &v
	return s
}

type SearchPublicMediaInfoResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SearchPublicMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchPublicMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchPublicMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *SearchPublicMediaInfoResponse) SetHeaders(v map[string]*string) *SearchPublicMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *SearchPublicMediaInfoResponse) SetStatusCode(v int32) *SearchPublicMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *SearchPublicMediaInfoResponse) SetBody(v *SearchPublicMediaInfoResponseBody) *SearchPublicMediaInfoResponse {
	s.Body = v
	return s
}

type SendLiveTranscodeJobCommandRequest struct {
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// 模板Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SendLiveTranscodeJobCommandRequest) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandRequest) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandRequest) SetCommand(v string) *SendLiveTranscodeJobCommandRequest {
	s.Command = &v
	return s
}

func (s *SendLiveTranscodeJobCommandRequest) SetJobId(v string) *SendLiveTranscodeJobCommandRequest {
	s.JobId = &v
	return s
}

type SendLiveTranscodeJobCommandResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SendLiveTranscodeJobCommandResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandResponseBody) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandResponseBody) SetRequestId(v string) *SendLiveTranscodeJobCommandResponseBody {
	s.RequestId = &v
	return s
}

type SendLiveTranscodeJobCommandResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SendLiveTranscodeJobCommandResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SendLiveTranscodeJobCommandResponse) String() string {
	return tea.Prettify(s)
}

func (s SendLiveTranscodeJobCommandResponse) GoString() string {
	return s.String()
}

func (s *SendLiveTranscodeJobCommandResponse) SetHeaders(v map[string]*string) *SendLiveTranscodeJobCommandResponse {
	s.Headers = v
	return s
}

func (s *SendLiveTranscodeJobCommandResponse) SetStatusCode(v int32) *SendLiveTranscodeJobCommandResponse {
	s.StatusCode = &v
	return s
}

func (s *SendLiveTranscodeJobCommandResponse) SetBody(v *SendLiveTranscodeJobCommandResponseBody) *SendLiveTranscodeJobCommandResponse {
	s.Body = v
	return s
}

type SetAuditConfigRequest struct {
	AppId       *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	Channel     *string `json:"Channel,omitempty" xml:"Channel,omitempty"`
	LegalSwitch *string `json:"LegalSwitch,omitempty" xml:"LegalSwitch,omitempty"`
}

func (s SetAuditConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAuditConfigRequest) GoString() string {
	return s.String()
}

func (s *SetAuditConfigRequest) SetAppId(v string) *SetAuditConfigRequest {
	s.AppId = &v
	return s
}

func (s *SetAuditConfigRequest) SetChannel(v string) *SetAuditConfigRequest {
	s.Channel = &v
	return s
}

func (s *SetAuditConfigRequest) SetLegalSwitch(v string) *SetAuditConfigRequest {
	s.LegalSwitch = &v
	return s
}

type SetAuditConfigResponseBody struct {
	// RequestId
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAuditConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAuditConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetAuditConfigResponseBody) SetRequestId(v string) *SetAuditConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetAuditConfigResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetAuditConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetAuditConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAuditConfigResponse) GoString() string {
	return s.String()
}

func (s *SetAuditConfigResponse) SetHeaders(v map[string]*string) *SetAuditConfigResponse {
	s.Headers = v
	return s
}

func (s *SetAuditConfigResponse) SetStatusCode(v int32) *SetAuditConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetAuditConfigResponse) SetBody(v *SetAuditConfigResponseBody) *SetAuditConfigResponse {
	s.Body = v
	return s
}

type SetClientConfigRequest struct {
	// 云端配置所对应的IOS BundleId
	BundleId *string `json:"BundleId,omitempty" xml:"BundleId,omitempty"`
	// 端侧上传存储Bucket信息
	ClientUploadBucket *string `json:"ClientUploadBucket,omitempty" xml:"ClientUploadBucket,omitempty"`
	// 端侧上传存储bucket下路径信息
	ClientUploadPath *string `json:"ClientUploadPath,omitempty" xml:"ClientUploadPath,omitempty"`
	// 端侧上传存储类型，vod_oss_bucket: vod托管bucket，user_oss_bucket: 用户私有bucket
	ClientUploadStorageType *string `json:"ClientUploadStorageType,omitempty" xml:"ClientUploadStorageType,omitempty"`
	// 云端配置所对应的安卓包名。
	PkgName *string `json:"PkgName,omitempty" xml:"PkgName,omitempty"`
	// 云端配置所对应的安卓包签名，当包名不为空时，必填。
	PkgSignature *string `json:"PkgSignature,omitempty" xml:"PkgSignature,omitempty"`
}

func (s SetClientConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetClientConfigRequest) GoString() string {
	return s.String()
}

func (s *SetClientConfigRequest) SetBundleId(v string) *SetClientConfigRequest {
	s.BundleId = &v
	return s
}

func (s *SetClientConfigRequest) SetClientUploadBucket(v string) *SetClientConfigRequest {
	s.ClientUploadBucket = &v
	return s
}

func (s *SetClientConfigRequest) SetClientUploadPath(v string) *SetClientConfigRequest {
	s.ClientUploadPath = &v
	return s
}

func (s *SetClientConfigRequest) SetClientUploadStorageType(v string) *SetClientConfigRequest {
	s.ClientUploadStorageType = &v
	return s
}

func (s *SetClientConfigRequest) SetPkgName(v string) *SetClientConfigRequest {
	s.PkgName = &v
	return s
}

func (s *SetClientConfigRequest) SetPkgSignature(v string) *SetClientConfigRequest {
	s.PkgSignature = &v
	return s
}

type SetClientConfigResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 配置是否成功
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetClientConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetClientConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetClientConfigResponseBody) SetRequestId(v string) *SetClientConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetClientConfigResponseBody) SetSuccess(v bool) *SetClientConfigResponseBody {
	s.Success = &v
	return s
}

type SetClientConfigResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetClientConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetClientConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetClientConfigResponse) GoString() string {
	return s.String()
}

func (s *SetClientConfigResponse) SetHeaders(v map[string]*string) *SetClientConfigResponse {
	s.Headers = v
	return s
}

func (s *SetClientConfigResponse) SetStatusCode(v int32) *SetClientConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *SetClientConfigResponse) SetBody(v *SetClientConfigResponseBody) *SetClientConfigResponse {
	s.Body = v
	return s
}

type SetDefaultCustomTemplateRequest struct {
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SetDefaultCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateRequest) SetTemplateId(v string) *SetDefaultCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type SetDefaultCustomTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 是否成功
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetDefaultCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateResponseBody) SetRequestId(v string) *SetDefaultCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDefaultCustomTemplateResponseBody) SetSuccess(v bool) *SetDefaultCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type SetDefaultCustomTemplateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetDefaultCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDefaultCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *SetDefaultCustomTemplateResponse) SetHeaders(v map[string]*string) *SetDefaultCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *SetDefaultCustomTemplateResponse) SetStatusCode(v int32) *SetDefaultCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDefaultCustomTemplateResponse) SetBody(v *SetDefaultCustomTemplateResponseBody) *SetDefaultCustomTemplateResponse {
	s.Body = v
	return s
}

type SetDefaultStorageLocationRequest struct {
	Bucket      *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Path        *string `json:"Path,omitempty" xml:"Path,omitempty"`
	StorageType *string `json:"StorageType,omitempty" xml:"StorageType,omitempty"`
}

func (s SetDefaultStorageLocationRequest) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationRequest) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationRequest) SetBucket(v string) *SetDefaultStorageLocationRequest {
	s.Bucket = &v
	return s
}

func (s *SetDefaultStorageLocationRequest) SetPath(v string) *SetDefaultStorageLocationRequest {
	s.Path = &v
	return s
}

func (s *SetDefaultStorageLocationRequest) SetStorageType(v string) *SetDefaultStorageLocationRequest {
	s.StorageType = &v
	return s
}

type SetDefaultStorageLocationResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetDefaultStorageLocationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationResponseBody) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationResponseBody) SetRequestId(v string) *SetDefaultStorageLocationResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetDefaultStorageLocationResponseBody) SetSuccess(v bool) *SetDefaultStorageLocationResponseBody {
	s.Success = &v
	return s
}

type SetDefaultStorageLocationResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetDefaultStorageLocationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetDefaultStorageLocationResponse) String() string {
	return tea.Prettify(s)
}

func (s SetDefaultStorageLocationResponse) GoString() string {
	return s.String()
}

func (s *SetDefaultStorageLocationResponse) SetHeaders(v map[string]*string) *SetDefaultStorageLocationResponse {
	s.Headers = v
	return s
}

func (s *SetDefaultStorageLocationResponse) SetStatusCode(v int32) *SetDefaultStorageLocationResponse {
	s.StatusCode = &v
	return s
}

func (s *SetDefaultStorageLocationResponse) SetBody(v *SetDefaultStorageLocationResponseBody) *SetDefaultStorageLocationResponse {
	s.Body = v
	return s
}

type SetEventCallbackRequest struct {
	AuthKey           *string `json:"AuthKey,omitempty" xml:"AuthKey,omitempty"`
	AuthSwitch        *string `json:"AuthSwitch,omitempty" xml:"AuthSwitch,omitempty"`
	CallbackQueueName *string `json:"CallbackQueueName,omitempty" xml:"CallbackQueueName,omitempty"`
	CallbackType      *string `json:"CallbackType,omitempty" xml:"CallbackType,omitempty"`
	CallbackURL       *string `json:"CallbackURL,omitempty" xml:"CallbackURL,omitempty"`
	EventTypeList     *string `json:"EventTypeList,omitempty" xml:"EventTypeList,omitempty"`
}

func (s SetEventCallbackRequest) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackRequest) GoString() string {
	return s.String()
}

func (s *SetEventCallbackRequest) SetAuthKey(v string) *SetEventCallbackRequest {
	s.AuthKey = &v
	return s
}

func (s *SetEventCallbackRequest) SetAuthSwitch(v string) *SetEventCallbackRequest {
	s.AuthSwitch = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackQueueName(v string) *SetEventCallbackRequest {
	s.CallbackQueueName = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackType(v string) *SetEventCallbackRequest {
	s.CallbackType = &v
	return s
}

func (s *SetEventCallbackRequest) SetCallbackURL(v string) *SetEventCallbackRequest {
	s.CallbackURL = &v
	return s
}

func (s *SetEventCallbackRequest) SetEventTypeList(v string) *SetEventCallbackRequest {
	s.EventTypeList = &v
	return s
}

type SetEventCallbackResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 是否设置成功
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetEventCallbackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackResponseBody) GoString() string {
	return s.String()
}

func (s *SetEventCallbackResponseBody) SetRequestId(v string) *SetEventCallbackResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetEventCallbackResponseBody) SetSuccess(v bool) *SetEventCallbackResponseBody {
	s.Success = &v
	return s
}

type SetEventCallbackResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetEventCallbackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetEventCallbackResponse) String() string {
	return tea.Prettify(s)
}

func (s SetEventCallbackResponse) GoString() string {
	return s.String()
}

func (s *SetEventCallbackResponse) SetHeaders(v map[string]*string) *SetEventCallbackResponse {
	s.Headers = v
	return s
}

func (s *SetEventCallbackResponse) SetStatusCode(v int32) *SetEventCallbackResponse {
	s.StatusCode = &v
	return s
}

func (s *SetEventCallbackResponse) SetBody(v *SetEventCallbackResponseBody) *SetEventCallbackResponse {
	s.Body = v
	return s
}

type SubmitASRJobRequest struct {
	// 任务描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 持续时间
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 输入配置，支持OSS地址和内容库素材ID
	InputFile *string `json:"InputFile,omitempty" xml:"InputFile,omitempty"`
	// 开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 任务标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 自定义设置，为JSON字符串
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitASRJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitASRJobRequest) SetDescription(v string) *SubmitASRJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitASRJobRequest) SetDuration(v string) *SubmitASRJobRequest {
	s.Duration = &v
	return s
}

func (s *SubmitASRJobRequest) SetInputFile(v string) *SubmitASRJobRequest {
	s.InputFile = &v
	return s
}

func (s *SubmitASRJobRequest) SetStartTime(v string) *SubmitASRJobRequest {
	s.StartTime = &v
	return s
}

func (s *SubmitASRJobRequest) SetTitle(v string) *SubmitASRJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitASRJobRequest) SetUserData(v string) *SubmitASRJobRequest {
	s.UserData = &v
	return s
}

type SubmitASRJobResponseBody struct {
	// 智能任务Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 请求Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务状态
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitASRJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitASRJobResponseBody) SetJobId(v string) *SubmitASRJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitASRJobResponseBody) SetRequestId(v string) *SubmitASRJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitASRJobResponseBody) SetState(v string) *SubmitASRJobResponseBody {
	s.State = &v
	return s
}

type SubmitASRJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitASRJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitASRJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitASRJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitASRJobResponse) SetHeaders(v map[string]*string) *SubmitASRJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitASRJobResponse) SetStatusCode(v int32) *SubmitASRJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitASRJobResponse) SetBody(v *SubmitASRJobResponseBody) *SubmitASRJobResponse {
	s.Body = v
	return s
}

type SubmitAudioProduceJobRequest struct {
	// 任务描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 音频生产配置
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	// 文本内容。  最大支持300个汉字
	InputConfig *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	// 音频输出配置
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// 是否覆盖现有OSS文件
	Overwrite *bool `json:"Overwrite,omitempty" xml:"Overwrite,omitempty"`
	// 任务标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 自定义数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitAudioProduceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobRequest) SetDescription(v string) *SubmitAudioProduceJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetEditingConfig(v string) *SubmitAudioProduceJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetInputConfig(v string) *SubmitAudioProduceJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetOutputConfig(v string) *SubmitAudioProduceJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetOverwrite(v bool) *SubmitAudioProduceJobRequest {
	s.Overwrite = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetTitle(v string) *SubmitAudioProduceJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitAudioProduceJobRequest) SetUserData(v string) *SubmitAudioProduceJobRequest {
	s.UserData = &v
	return s
}

type SubmitAudioProduceJobResponseBody struct {
	// 任务ID
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 请求Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务状态
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s SubmitAudioProduceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobResponseBody) SetJobId(v string) *SubmitAudioProduceJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetRequestId(v string) *SubmitAudioProduceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAudioProduceJobResponseBody) SetState(v string) *SubmitAudioProduceJobResponseBody {
	s.State = &v
	return s
}

type SubmitAudioProduceJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitAudioProduceJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitAudioProduceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAudioProduceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAudioProduceJobResponse) SetHeaders(v map[string]*string) *SubmitAudioProduceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAudioProduceJobResponse) SetStatusCode(v int32) *SubmitAudioProduceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitAudioProduceJobResponse) SetBody(v *SubmitAudioProduceJobResponseBody) *SubmitAudioProduceJobResponse {
	s.Body = v
	return s
}

type SubmitBatchMediaProducingJobRequest struct {
	// 调用方保证请求幂等性Client Token
	ClientToken *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	// 批量混剪ClipsParam
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// 剪辑合成配置
	EditingProduceConfig *string `json:"EditingProduceConfig,omitempty" xml:"EditingProduceConfig,omitempty"`
	// 任务名称
	JobTitle *string `json:"JobTitle,omitempty" xml:"JobTitle,omitempty"`
	// 用户合成输出配置
	OutputMediaConfig *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	// 用户合成输出目标
	OutputMediaTarget *string `json:"OutputMediaTarget,omitempty" xml:"OutputMediaTarget,omitempty"`
	// 批量混剪下合成成片的个数
	OutputNum *int32 `json:"OutputNum,omitempty" xml:"OutputNum,omitempty"`
	// 剪辑任务工程信息
	ProjectMetadata *string `json:"ProjectMetadata,omitempty" xml:"ProjectMetadata,omitempty"`
	// 任务来源
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 提交任务类型
	SubmitBy *string `json:"SubmitBy,omitempty" xml:"SubmitBy,omitempty"`
	// 批量混剪模版id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 用户配置UserData
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitBatchMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobRequest) SetClientToken(v string) *SubmitBatchMediaProducingJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetClipsParam(v string) *SubmitBatchMediaProducingJobRequest {
	s.ClipsParam = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetEditingProduceConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.EditingProduceConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetJobTitle(v string) *SubmitBatchMediaProducingJobRequest {
	s.JobTitle = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetOutputMediaConfig(v string) *SubmitBatchMediaProducingJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetOutputMediaTarget(v string) *SubmitBatchMediaProducingJobRequest {
	s.OutputMediaTarget = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetOutputNum(v int32) *SubmitBatchMediaProducingJobRequest {
	s.OutputNum = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetProjectMetadata(v string) *SubmitBatchMediaProducingJobRequest {
	s.ProjectMetadata = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetSource(v string) *SubmitBatchMediaProducingJobRequest {
	s.Source = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetSubmitBy(v string) *SubmitBatchMediaProducingJobRequest {
	s.SubmitBy = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetTemplateId(v string) *SubmitBatchMediaProducingJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitBatchMediaProducingJobRequest) SetUserData(v string) *SubmitBatchMediaProducingJobRequest {
	s.UserData = &v
	return s
}

type SubmitBatchMediaProducingJobResponseBody struct {
	// 批量混剪任务jobId
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitBatchMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobResponseBody) SetJobId(v string) *SubmitBatchMediaProducingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitBatchMediaProducingJobResponseBody) SetRequestId(v string) *SubmitBatchMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitBatchMediaProducingJobResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitBatchMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitBatchMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitBatchMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitBatchMediaProducingJobResponse) SetHeaders(v map[string]*string) *SubmitBatchMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitBatchMediaProducingJobResponse) SetStatusCode(v int32) *SubmitBatchMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitBatchMediaProducingJobResponse) SetBody(v *SubmitBatchMediaProducingJobResponseBody) *SubmitBatchMediaProducingJobResponse {
	s.Body = v
	return s
}

type SubmitDynamicChartJobRequest struct {
	// 坐标样式。XAxisFontInterval不传或为0则算法自动计算间距
	AxisParams *string `json:"AxisParams,omitempty" xml:"AxisParams,omitempty"`
	// 图表背景
	Background *string `json:"Background,omitempty" xml:"Background,omitempty"`
	// 图表配置
	ChartConfig *string `json:"ChartConfig,omitempty" xml:"ChartConfig,omitempty"`
	// 主标题
	ChartTitle *string `json:"ChartTitle,omitempty" xml:"ChartTitle,omitempty"`
	// 图表类型
	ChartType *string `json:"ChartType,omitempty" xml:"ChartType,omitempty"`
	// 数据来源
	DataSource *string `json:"DataSource,omitempty" xml:"DataSource,omitempty"`
	// 任务描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 图表输入数据
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// 输出设置
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	// 副标题
	Subtitle *string `json:"Subtitle,omitempty" xml:"Subtitle,omitempty"`
	// 任务标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 单位
	Unit *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	// 自定义数据，JSON格式
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicChartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobRequest) SetAxisParams(v string) *SubmitDynamicChartJobRequest {
	s.AxisParams = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetBackground(v string) *SubmitDynamicChartJobRequest {
	s.Background = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartConfig(v string) *SubmitDynamicChartJobRequest {
	s.ChartConfig = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartTitle(v string) *SubmitDynamicChartJobRequest {
	s.ChartTitle = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetChartType(v string) *SubmitDynamicChartJobRequest {
	s.ChartType = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetDataSource(v string) *SubmitDynamicChartJobRequest {
	s.DataSource = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetDescription(v string) *SubmitDynamicChartJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetInput(v string) *SubmitDynamicChartJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetOutputConfig(v string) *SubmitDynamicChartJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetSubtitle(v string) *SubmitDynamicChartJobRequest {
	s.Subtitle = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetTitle(v string) *SubmitDynamicChartJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetUnit(v string) *SubmitDynamicChartJobRequest {
	s.Unit = &v
	return s
}

func (s *SubmitDynamicChartJobRequest) SetUserData(v string) *SubmitDynamicChartJobRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicChartJobResponseBody struct {
	// 任务Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 请求Id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDynamicChartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobResponseBody) SetJobId(v string) *SubmitDynamicChartJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDynamicChartJobResponseBody) SetRequestId(v string) *SubmitDynamicChartJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDynamicChartJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitDynamicChartJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitDynamicChartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicChartJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDynamicChartJobResponse) SetHeaders(v map[string]*string) *SubmitDynamicChartJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDynamicChartJobResponse) SetStatusCode(v int32) *SubmitDynamicChartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDynamicChartJobResponse) SetBody(v *SubmitDynamicChartJobResponseBody) *SubmitDynamicChartJobResponse {
	s.Body = v
	return s
}

type SubmitDynamicImageJobRequest struct {
	Input          *SubmitDynamicImageJobRequestInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Name           *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Output         *SubmitDynamicImageJobRequestOutput         `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ScheduleConfig *SubmitDynamicImageJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	TemplateConfig *SubmitDynamicImageJobRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	UserData       *string                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicImageJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequest) SetInput(v *SubmitDynamicImageJobRequestInput) *SubmitDynamicImageJobRequest {
	s.Input = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetName(v string) *SubmitDynamicImageJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetOutput(v *SubmitDynamicImageJobRequestOutput) *SubmitDynamicImageJobRequest {
	s.Output = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetScheduleConfig(v *SubmitDynamicImageJobRequestScheduleConfig) *SubmitDynamicImageJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetTemplateConfig(v *SubmitDynamicImageJobRequestTemplateConfig) *SubmitDynamicImageJobRequest {
	s.TemplateConfig = v
	return s
}

func (s *SubmitDynamicImageJobRequest) SetUserData(v string) *SubmitDynamicImageJobRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicImageJobRequestInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDynamicImageJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestInput) SetMedia(v string) *SubmitDynamicImageJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitDynamicImageJobRequestInput) SetType(v string) *SubmitDynamicImageJobRequestInput {
	s.Type = &v
	return s
}

type SubmitDynamicImageJobRequestOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitDynamicImageJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestOutput) SetMedia(v string) *SubmitDynamicImageJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitDynamicImageJobRequestOutput) SetType(v string) *SubmitDynamicImageJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitDynamicImageJobRequestScheduleConfig struct {
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority   *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitDynamicImageJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestScheduleConfig) SetPipelineId(v string) *SubmitDynamicImageJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitDynamicImageJobRequestScheduleConfig) SetPriority(v int32) *SubmitDynamicImageJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfig struct {
	OverwriteParams *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	TemplateId      *string                                                    `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfig) SetOverwriteParams(v *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) *SubmitDynamicImageJobRequestTemplateConfig {
	s.OverwriteParams = v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfig) SetTemplateId(v string) *SubmitDynamicImageJobRequestTemplateConfig {
	s.TemplateId = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfigOverwriteParams struct {
	Format        *string `json:"Format,omitempty" xml:"Format,omitempty"`
	Fps           *int32  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Height        *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	LongShortMode *bool   `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	ScanMode      *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// 时间线参数
	TimeSpan *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
	Width    *int32                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetFormat(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Format = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetFps(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Fps = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetHeight(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetLongShortMode(v bool) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.LongShortMode = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetScanMode(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.ScanMode = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetTimeSpan(v *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.TimeSpan = v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams) SetWidth(v int32) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParams {
	s.Width = &v
	return s
}

type SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	End      *string `json:"End,omitempty" xml:"End,omitempty"`
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetDuration(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.Duration = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetEnd(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.End = &v
	return s
}

func (s *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan) SetSeek(v string) *SubmitDynamicImageJobRequestTemplateConfigOverwriteParamsTimeSpan {
	s.Seek = &v
	return s
}

type SubmitDynamicImageJobShrinkRequest struct {
	InputShrink          *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputShrink         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitDynamicImageJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobShrinkRequest) SetInputShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetName(v string) *SubmitDynamicImageJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetOutputShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetTemplateConfigShrink(v string) *SubmitDynamicImageJobShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *SubmitDynamicImageJobShrinkRequest) SetUserData(v string) *SubmitDynamicImageJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitDynamicImageJobResponseBody struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitDynamicImageJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobResponseBody) SetJobId(v string) *SubmitDynamicImageJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitDynamicImageJobResponseBody) SetRequestId(v string) *SubmitDynamicImageJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitDynamicImageJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitDynamicImageJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitDynamicImageJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitDynamicImageJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitDynamicImageJobResponse) SetHeaders(v map[string]*string) *SubmitDynamicImageJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitDynamicImageJobResponse) SetStatusCode(v int32) *SubmitDynamicImageJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitDynamicImageJobResponse) SetBody(v *SubmitDynamicImageJobResponseBody) *SubmitDynamicImageJobResponse {
	s.Body = v
	return s
}

type SubmitIProductionJobRequest struct {
	FunctionName   *string                                    `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	Input          *SubmitIProductionJobRequestInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	JobParams      *string                                    `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	Name           *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Output         *SubmitIProductionJobRequestOutput         `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ScheduleConfig *SubmitIProductionJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	TemplateId     *string                                    `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	UserData       *string                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequest) SetFunctionName(v string) *SubmitIProductionJobRequest {
	s.FunctionName = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetInput(v *SubmitIProductionJobRequestInput) *SubmitIProductionJobRequest {
	s.Input = v
	return s
}

func (s *SubmitIProductionJobRequest) SetJobParams(v string) *SubmitIProductionJobRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetName(v string) *SubmitIProductionJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetOutput(v *SubmitIProductionJobRequestOutput) *SubmitIProductionJobRequest {
	s.Output = v
	return s
}

func (s *SubmitIProductionJobRequest) SetScheduleConfig(v *SubmitIProductionJobRequestScheduleConfig) *SubmitIProductionJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitIProductionJobRequest) SetTemplateId(v string) *SubmitIProductionJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetUserData(v string) *SubmitIProductionJobRequest {
	s.UserData = &v
	return s
}

type SubmitIProductionJobRequestInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitIProductionJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestInput) SetMedia(v string) *SubmitIProductionJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitIProductionJobRequestInput) SetType(v string) *SubmitIProductionJobRequestInput {
	s.Type = &v
	return s
}

type SubmitIProductionJobRequestOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitIProductionJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestOutput) SetMedia(v string) *SubmitIProductionJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitIProductionJobRequestOutput) SetType(v string) *SubmitIProductionJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitIProductionJobRequestScheduleConfig struct {
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority   *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitIProductionJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequestScheduleConfig) SetPipelineId(v string) *SubmitIProductionJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitIProductionJobRequestScheduleConfig) SetPriority(v int32) *SubmitIProductionJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitIProductionJobShrinkRequest struct {
	FunctionName         *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	InputShrink          *string `json:"Input,omitempty" xml:"Input,omitempty"`
	JobParams            *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputShrink         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitIProductionJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobShrinkRequest) SetFunctionName(v string) *SubmitIProductionJobShrinkRequest {
	s.FunctionName = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetInputShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetJobParams(v string) *SubmitIProductionJobShrinkRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetName(v string) *SubmitIProductionJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetOutputShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitIProductionJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetTemplateId(v string) *SubmitIProductionJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitIProductionJobShrinkRequest) SetUserData(v string) *SubmitIProductionJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitIProductionJobResponseBody struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponseBody) SetJobId(v string) *SubmitIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitIProductionJobResponseBody) SetRequestId(v string) *SubmitIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitIProductionJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponse) SetHeaders(v map[string]*string) *SubmitIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitIProductionJobResponse) SetStatusCode(v int32) *SubmitIProductionJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitIProductionJobResponse) SetBody(v *SubmitIProductionJobResponseBody) *SubmitIProductionJobResponse {
	s.Body = v
	return s
}

type SubmitLiveEditingJobRequest struct {
	Clips              *string `json:"Clips,omitempty" xml:"Clips,omitempty"`
	LiveStreamConfig   *string `json:"LiveStreamConfig,omitempty" xml:"LiveStreamConfig,omitempty"`
	MediaProduceConfig *string `json:"MediaProduceConfig,omitempty" xml:"MediaProduceConfig,omitempty"`
	OutputMediaConfig  *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	OutputMediaTarget  *string `json:"OutputMediaTarget,omitempty" xml:"OutputMediaTarget,omitempty"`
	ProjectId          *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	UserData           *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitLiveEditingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobRequest) SetClips(v string) *SubmitLiveEditingJobRequest {
	s.Clips = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetLiveStreamConfig(v string) *SubmitLiveEditingJobRequest {
	s.LiveStreamConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetMediaProduceConfig(v string) *SubmitLiveEditingJobRequest {
	s.MediaProduceConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetOutputMediaConfig(v string) *SubmitLiveEditingJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetOutputMediaTarget(v string) *SubmitLiveEditingJobRequest {
	s.OutputMediaTarget = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetProjectId(v string) *SubmitLiveEditingJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitLiveEditingJobRequest) SetUserData(v string) *SubmitLiveEditingJobRequest {
	s.UserData = &v
	return s
}

type SubmitLiveEditingJobResponseBody struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	MediaURL  *string `json:"MediaURL,omitempty" xml:"MediaURL,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitLiveEditingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobResponseBody) SetJobId(v string) *SubmitLiveEditingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetMediaId(v string) *SubmitLiveEditingJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetMediaURL(v string) *SubmitLiveEditingJobResponseBody {
	s.MediaURL = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetProjectId(v string) *SubmitLiveEditingJobResponseBody {
	s.ProjectId = &v
	return s
}

func (s *SubmitLiveEditingJobResponseBody) SetRequestId(v string) *SubmitLiveEditingJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitLiveEditingJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitLiveEditingJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitLiveEditingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitLiveEditingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitLiveEditingJobResponse) SetHeaders(v map[string]*string) *SubmitLiveEditingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitLiveEditingJobResponse) SetStatusCode(v int32) *SubmitLiveEditingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitLiveEditingJobResponse) SetBody(v *SubmitLiveEditingJobResponseBody) *SubmitLiveEditingJobResponse {
	s.Body = v
	return s
}

type SubmitMediaCensorJobRequest struct {
	Barrages       *string                                    `json:"Barrages,omitempty" xml:"Barrages,omitempty"`
	CoverImages    *string                                    `json:"CoverImages,omitempty" xml:"CoverImages,omitempty"`
	Description    *string                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	Input          *SubmitMediaCensorJobRequestInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	NotifyUrl      *string                                    `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	Output         *string                                    `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfig *SubmitMediaCensorJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	TemplateId     *string                                    `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Title          *string                                    `json:"Title,omitempty" xml:"Title,omitempty"`
	UserData       *string                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaCensorJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequest) SetBarrages(v string) *SubmitMediaCensorJobRequest {
	s.Barrages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetCoverImages(v string) *SubmitMediaCensorJobRequest {
	s.CoverImages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetDescription(v string) *SubmitMediaCensorJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetInput(v *SubmitMediaCensorJobRequestInput) *SubmitMediaCensorJobRequest {
	s.Input = v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetNotifyUrl(v string) *SubmitMediaCensorJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetOutput(v string) *SubmitMediaCensorJobRequest {
	s.Output = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetScheduleConfig(v *SubmitMediaCensorJobRequestScheduleConfig) *SubmitMediaCensorJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetTemplateId(v string) *SubmitMediaCensorJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetTitle(v string) *SubmitMediaCensorJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetUserData(v string) *SubmitMediaCensorJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaCensorJobRequestInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaCensorJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequestInput) SetMedia(v string) *SubmitMediaCensorJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaCensorJobRequestInput) SetType(v string) *SubmitMediaCensorJobRequestInput {
	s.Type = &v
	return s
}

type SubmitMediaCensorJobRequestScheduleConfig struct {
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority   *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaCensorJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequestScheduleConfig) SetPipelineId(v string) *SubmitMediaCensorJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaCensorJobRequestScheduleConfig) SetPriority(v int32) *SubmitMediaCensorJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaCensorJobShrinkRequest struct {
	Barrages             *string `json:"Barrages,omitempty" xml:"Barrages,omitempty"`
	CoverImages          *string `json:"CoverImages,omitempty" xml:"CoverImages,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	InputShrink          *string `json:"Input,omitempty" xml:"Input,omitempty"`
	NotifyUrl            *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	Output               *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Title                *string `json:"Title,omitempty" xml:"Title,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaCensorJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobShrinkRequest) SetBarrages(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Barrages = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetCoverImages(v string) *SubmitMediaCensorJobShrinkRequest {
	s.CoverImages = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetDescription(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Description = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetInputShrink(v string) *SubmitMediaCensorJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetNotifyUrl(v string) *SubmitMediaCensorJobShrinkRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetOutput(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Output = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitMediaCensorJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetTemplateId(v string) *SubmitMediaCensorJobShrinkRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetTitle(v string) *SubmitMediaCensorJobShrinkRequest {
	s.Title = &v
	return s
}

func (s *SubmitMediaCensorJobShrinkRequest) SetUserData(v string) *SubmitMediaCensorJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitMediaCensorJobResponseBody struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaCensorJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponseBody) SetJobId(v string) *SubmitMediaCensorJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitMediaCensorJobResponseBody) SetRequestId(v string) *SubmitMediaCensorJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaCensorJobResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitMediaCensorJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMediaCensorJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponse) SetHeaders(v map[string]*string) *SubmitMediaCensorJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaCensorJobResponse) SetStatusCode(v int32) *SubmitMediaCensorJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaCensorJobResponse) SetBody(v *SubmitMediaCensorJobResponseBody) *SubmitMediaCensorJobResponse {
	s.Body = v
	return s
}

type SubmitMediaInfoJobRequest struct {
	// 任务输入
	Input *SubmitMediaInfoJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 调度参数
	ScheduleConfig *SubmitMediaInfoJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequest) SetInput(v *SubmitMediaInfoJobRequestInput) *SubmitMediaInfoJobRequest {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetName(v string) *SubmitMediaInfoJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetScheduleConfig(v *SubmitMediaInfoJobRequestScheduleConfig) *SubmitMediaInfoJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetUserData(v string) *SubmitMediaInfoJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobRequestInput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaInfoJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequestInput) SetMedia(v string) *SubmitMediaInfoJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaInfoJobRequestInput) SetType(v string) *SubmitMediaInfoJobRequestInput {
	s.Type = &v
	return s
}

type SubmitMediaInfoJobRequestScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaInfoJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequestScheduleConfig) SetPipelineId(v string) *SubmitMediaInfoJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobRequestScheduleConfig) SetPriority(v int32) *SubmitMediaInfoJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaInfoJobShrinkRequest struct {
	// 任务输入
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 调度参数
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobShrinkRequest) SetInputShrink(v string) *SubmitMediaInfoJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetName(v string) *SubmitMediaInfoJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitMediaInfoJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitMediaInfoJobShrinkRequest) SetUserData(v string) *SubmitMediaInfoJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *SubmitMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitMediaInfoJobResponseBodyMediaInfoJob) *SubmitMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitMediaInfoJobResponseBody) SetRequestId(v string) *SubmitMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJob struct {
	// 是否异步处理
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// 任务完成时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入
	Input *SubmitMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// 任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 媒体信息详情
	MediaInfoProperty *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 调度信息
	ScheduleConfig *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 任务状态 - Init: 已提交, Success: 成功, Fail: 失败
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交信息
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 任务来源 - API, WorkFlow, Console
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	// 音频流信息
	AudioStreamInfoList []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 基础文件信息
	FileBasicInfo *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 视频流信息
	VideoStreamInfoList []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道布局
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码器标签
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码器标签名
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码器时间基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时间基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// 视频码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 视频时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件url
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 视频格式名称
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 文件所在区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	AvgFps  *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// 编码格式
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	CodecTimeBase  *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// 图像显示宽高比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 帧率
	Fps        *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 颜色存储格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码器预设
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 视频画面旋转角度
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 采集点数宽高比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	TimeBase  *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *SubmitMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitMediaInfoJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetStatusCode(v int32) *SubmitMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetBody(v *SubmitMediaInfoJobResponseBody) *SubmitMediaInfoJobResponse {
	s.Body = v
	return s
}

type SubmitMediaProducingJobRequest struct {
	ClientToken          *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ClipsParam           *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	EditingProduceConfig *string `json:"EditingProduceConfig,omitempty" xml:"EditingProduceConfig,omitempty"`
	OutputMediaConfig    *string `json:"OutputMediaConfig,omitempty" xml:"OutputMediaConfig,omitempty"`
	OutputMediaTarget    *string `json:"OutputMediaTarget,omitempty" xml:"OutputMediaTarget,omitempty"`
	ProjectId            *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectMetadata      *string `json:"ProjectMetadata,omitempty" xml:"ProjectMetadata,omitempty"`
	Source               *string `json:"Source,omitempty" xml:"Source,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Timeline             *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMediaProducingJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobRequest) SetClientToken(v string) *SubmitMediaProducingJobRequest {
	s.ClientToken = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetClipsParam(v string) *SubmitMediaProducingJobRequest {
	s.ClipsParam = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetEditingProduceConfig(v string) *SubmitMediaProducingJobRequest {
	s.EditingProduceConfig = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetOutputMediaConfig(v string) *SubmitMediaProducingJobRequest {
	s.OutputMediaConfig = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetOutputMediaTarget(v string) *SubmitMediaProducingJobRequest {
	s.OutputMediaTarget = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetProjectId(v string) *SubmitMediaProducingJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetProjectMetadata(v string) *SubmitMediaProducingJobRequest {
	s.ProjectMetadata = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetSource(v string) *SubmitMediaProducingJobRequest {
	s.Source = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetTemplateId(v string) *SubmitMediaProducingJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetTimeline(v string) *SubmitMediaProducingJobRequest {
	s.Timeline = &v
	return s
}

func (s *SubmitMediaProducingJobRequest) SetUserData(v string) *SubmitMediaProducingJobRequest {
	s.UserData = &v
	return s
}

type SubmitMediaProducingJobResponseBody struct {
	// 合成作业Id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 合成ICE媒资Id
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 剪辑工程Id
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// vod媒资id
	VodMediaId *string `json:"VodMediaId,omitempty" xml:"VodMediaId,omitempty"`
}

func (s SubmitMediaProducingJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobResponseBody) SetJobId(v string) *SubmitMediaProducingJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetMediaId(v string) *SubmitMediaProducingJobResponseBody {
	s.MediaId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetProjectId(v string) *SubmitMediaProducingJobResponseBody {
	s.ProjectId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetRequestId(v string) *SubmitMediaProducingJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaProducingJobResponseBody) SetVodMediaId(v string) *SubmitMediaProducingJobResponseBody {
	s.VodMediaId = &v
	return s
}

type SubmitMediaProducingJobResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitMediaProducingJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMediaProducingJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaProducingJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaProducingJobResponse) SetHeaders(v map[string]*string) *SubmitMediaProducingJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaProducingJobResponse) SetStatusCode(v int32) *SubmitMediaProducingJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitMediaProducingJobResponse) SetBody(v *SubmitMediaProducingJobResponseBody) *SubmitMediaProducingJobResponse {
	s.Body = v
	return s
}

type SubmitSnapshotJobRequest struct {
	Input          *SubmitSnapshotJobRequestInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Name           *string                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Output         *SubmitSnapshotJobRequestOutput         `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	ScheduleConfig *SubmitSnapshotJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	TemplateConfig *SubmitSnapshotJobRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	UserData       *string                                 `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequest) SetInput(v *SubmitSnapshotJobRequestInput) *SubmitSnapshotJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetName(v string) *SubmitSnapshotJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetOutput(v *SubmitSnapshotJobRequestOutput) *SubmitSnapshotJobRequest {
	s.Output = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetScheduleConfig(v *SubmitSnapshotJobRequestScheduleConfig) *SubmitSnapshotJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetTemplateConfig(v *SubmitSnapshotJobRequestTemplateConfig) *SubmitSnapshotJobRequest {
	s.TemplateConfig = v
	return s
}

func (s *SubmitSnapshotJobRequest) SetUserData(v string) *SubmitSnapshotJobRequest {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobRequestInput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSnapshotJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestInput) SetMedia(v string) *SubmitSnapshotJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSnapshotJobRequestInput) SetType(v string) *SubmitSnapshotJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSnapshotJobRequestOutput struct {
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	Type  *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSnapshotJobRequestOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestOutput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestOutput) SetMedia(v string) *SubmitSnapshotJobRequestOutput {
	s.Media = &v
	return s
}

func (s *SubmitSnapshotJobRequestOutput) SetType(v string) *SubmitSnapshotJobRequestOutput {
	s.Type = &v
	return s
}

type SubmitSnapshotJobRequestScheduleConfig struct {
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s SubmitSnapshotJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSnapshotJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfig struct {
	OverwriteParams *SubmitSnapshotJobRequestTemplateConfigOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	TemplateId      *string                                                `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfig) SetOverwriteParams(v *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) *SubmitSnapshotJobRequestTemplateConfig {
	s.OverwriteParams = v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfig) SetTemplateId(v string) *SubmitSnapshotJobRequestTemplateConfig {
	s.TemplateId = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfigOverwriteParams struct {
	BlackLevel *int32 `json:"BlackLevel,omitempty" xml:"BlackLevel,omitempty"`
	Count      *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// 截图公共参数
	FrameType *string `json:"FrameType,omitempty" xml:"FrameType,omitempty"`
	Height    *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	Interval  *int64  `json:"Interval,omitempty" xml:"Interval,omitempty"`
	// Webvtt截图配置:是否拼合输出
	IsSptFrag           *bool  `json:"IsSptFrag,omitempty" xml:"IsSptFrag,omitempty"`
	PixelBlackThreshold *int32 `json:"PixelBlackThreshold,omitempty" xml:"PixelBlackThreshold,omitempty"`
	// 雪碧图配置
	SpriteSnapshotConfig *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig `json:"SpriteSnapshotConfig,omitempty" xml:"SpriteSnapshotConfig,omitempty" type:"Struct"`
	Time                 *int64                                                                     `json:"Time,omitempty" xml:"Time,omitempty"`
	Type                 *string                                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	Width                *int32                                                                     `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetBlackLevel(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.BlackLevel = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetCount(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Count = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetFrameType(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.FrameType = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetHeight(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetInterval(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Interval = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetIsSptFrag(v bool) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.IsSptFrag = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetPixelBlackThreshold(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.PixelBlackThreshold = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetSpriteSnapshotConfig(v *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.SpriteSnapshotConfig = v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetTime(v int64) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Time = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetType(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Type = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParams) SetWidth(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParams {
	s.Width = &v
	return s
}

type SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig struct {
	CellHeight *int32  `json:"CellHeight,omitempty" xml:"CellHeight,omitempty"`
	CellWidth  *int32  `json:"CellWidth,omitempty" xml:"CellWidth,omitempty"`
	Color      *string `json:"Color,omitempty" xml:"Color,omitempty"`
	Columns    *int32  `json:"Columns,omitempty" xml:"Columns,omitempty"`
	Lines      *int32  `json:"Lines,omitempty" xml:"Lines,omitempty"`
	Margin     *int32  `json:"Margin,omitempty" xml:"Margin,omitempty"`
	Padding    *int32  `json:"Padding,omitempty" xml:"Padding,omitempty"`
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetCellHeight(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.CellHeight = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetCellWidth(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.CellWidth = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetColor(v string) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Color = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetColumns(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Columns = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetLines(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Lines = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetMargin(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Margin = &v
	return s
}

func (s *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig) SetPadding(v int32) *SubmitSnapshotJobRequestTemplateConfigOverwriteParamsSpriteSnapshotConfig {
	s.Padding = &v
	return s
}

type SubmitSnapshotJobShrinkRequest struct {
	InputShrink          *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OutputShrink         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSnapshotJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobShrinkRequest) SetInputShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetName(v string) *SubmitSnapshotJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetOutputShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.OutputShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetTemplateConfigShrink(v string) *SubmitSnapshotJobShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *SubmitSnapshotJobShrinkRequest) SetUserData(v string) *SubmitSnapshotJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSnapshotJobResponseBody struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBody) SetJobId(v string) *SubmitSnapshotJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBody) SetRequestId(v string) *SubmitSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSnapshotJobResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponse) SetHeaders(v map[string]*string) *SubmitSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSnapshotJobResponse) SetStatusCode(v int32) *SubmitSnapshotJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSnapshotJobResponse) SetBody(v *SubmitSnapshotJobResponseBody) *SubmitSnapshotJobResponse {
	s.Body = v
	return s
}

type SubmitSubtitleProduceJobRequest struct {
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EditingConfig *string `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty"`
	InputConfig   *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	IsAsync       *int64  `json:"IsAsync,omitempty" xml:"IsAsync,omitempty"`
	OutputConfig  *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	Title         *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UserData      *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSubtitleProduceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSubtitleProduceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSubtitleProduceJobRequest) SetDescription(v string) *SubmitSubtitleProduceJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitSubtitleProduceJobRequest) SetEditingConfig(v string) *SubmitSubtitleProduceJobRequest {
	s.EditingConfig = &v
	return s
}

func (s *SubmitSubtitleProduceJobRequest) SetInputConfig(v string) *SubmitSubtitleProduceJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitSubtitleProduceJobRequest) SetIsAsync(v int64) *SubmitSubtitleProduceJobRequest {
	s.IsAsync = &v
	return s
}

func (s *SubmitSubtitleProduceJobRequest) SetOutputConfig(v string) *SubmitSubtitleProduceJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitSubtitleProduceJobRequest) SetTitle(v string) *SubmitSubtitleProduceJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitSubtitleProduceJobRequest) SetType(v string) *SubmitSubtitleProduceJobRequest {
	s.Type = &v
	return s
}

func (s *SubmitSubtitleProduceJobRequest) SetUserData(v string) *SubmitSubtitleProduceJobRequest {
	s.UserData = &v
	return s
}

type SubmitSubtitleProduceJobResponseBody struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSubtitleProduceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSubtitleProduceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSubtitleProduceJobResponseBody) SetJobId(v string) *SubmitSubtitleProduceJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitSubtitleProduceJobResponseBody) SetRequestId(v string) *SubmitSubtitleProduceJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSubtitleProduceJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitSubtitleProduceJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitSubtitleProduceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSubtitleProduceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSubtitleProduceJobResponse) SetHeaders(v map[string]*string) *SubmitSubtitleProduceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSubtitleProduceJobResponse) SetStatusCode(v int32) *SubmitSubtitleProduceJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSubtitleProduceJobResponse) SetBody(v *SubmitSubtitleProduceJobResponseBody) *SubmitSubtitleProduceJobResponse {
	s.Body = v
	return s
}

type SubmitSyncMediaInfoJobRequest struct {
	// 任务输入
	Input *SubmitSyncMediaInfoJobRequestInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 调度参数
	ScheduleConfig *SubmitSyncMediaInfoJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequest) SetInput(v *SubmitSyncMediaInfoJobRequestInput) *SubmitSyncMediaInfoJobRequest {
	s.Input = v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetName(v string) *SubmitSyncMediaInfoJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetScheduleConfig(v *SubmitSyncMediaInfoJobRequestScheduleConfig) *SubmitSyncMediaInfoJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSyncMediaInfoJobRequest) SetUserData(v string) *SubmitSyncMediaInfoJobRequest {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobRequestInput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequestInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequestInput) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequestInput) SetMedia(v string) *SubmitSyncMediaInfoJobRequestInput {
	s.Media = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequestInput) SetType(v string) *SubmitSyncMediaInfoJobRequestInput {
	s.Type = &v
	return s
}

type SubmitSyncMediaInfoJobRequestScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSyncMediaInfoJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobRequestScheduleConfig) SetPipelineId(v string) *SubmitSyncMediaInfoJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobRequestScheduleConfig) SetPriority(v int32) *SubmitSyncMediaInfoJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSyncMediaInfoJobShrinkRequest struct {
	// 任务输入
	InputShrink *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 调度参数
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetInputShrink(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.InputShrink = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetName(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitSyncMediaInfoJobShrinkRequest) SetUserData(v string) *SubmitSyncMediaInfoJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBody struct {
	// MediaInfoJobDTO
	MediaInfoJob *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) *SubmitSyncMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBody) SetRequestId(v string) *SubmitSyncMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJob struct {
	// 是否异步处理
	Async *bool `json:"Async,omitempty" xml:"Async,omitempty"`
	// 任务完成时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入
	Input *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	// 任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 媒体信息详情
	MediaInfoProperty *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty `json:"MediaInfoProperty,omitempty" xml:"MediaInfoProperty,omitempty" type:"Struct"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 调度信息
	ScheduleConfig *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 任务状态 - Init: 已提交, Success: 成功, Fail: 失败
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交信息
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 任务来源 - API, WorkFlow, Console
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetFinishTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetMediaInfoProperty(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.MediaInfoProperty = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Name = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetRequestId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.RequestId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetScheduleConfig(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetStatus(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.Status = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetSubmitResultJson(v map[string]interface{}) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetSubmitTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetTriggerSource(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) SetMedia(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Media = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput) SetType(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Type = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty struct {
	// 音频流信息
	AudioStreamInfoList []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 基础文件信息
	FileBasicInfo *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 视频流信息
	VideoStreamInfoList []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetAudioStreamInfoList(v []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetFileBasicInfo(v *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty) SetVideoStreamInfoList(v []*SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoProperty {
	s.VideoStreamInfoList = v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道布局
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码器标签
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码器标签名
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码器时间基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时间基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetBitrate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannelLayout(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetChannels(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecLongName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTag(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTagString(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetIndex(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetLang(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleFmt(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetSampleRate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetStartTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList) SetTimebase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo struct {
	// 视频码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 视频时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件url
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 视频格式名称
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 文件所在区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetBitrate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileSize(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileStatus(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileType(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFileUrl(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetFormatName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetHeight(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetMediaId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetRegion(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo) SetWidth(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList struct {
	AvgFps  *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// 编码格式
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	CodecTimeBase  *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// 图像显示宽高比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 帧率
	Fps        *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 颜色存储格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码器预设
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 视频画面旋转角度
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 采集点数宽高比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	TimeBase  *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetAvgFps(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetBitRate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecLongName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecName(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTag(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTagString(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDar(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetDuration(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetFps(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHasBFrames(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetHeight(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetIndex(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLang(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetLevel(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetNumFrames(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetPixFmt(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetProfile(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetRotate(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetSar(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetStartTime(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetTimeBase(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList) SetWidth(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobMediaInfoPropertyVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPipelineId(v string) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig) SetPriority(v int32) *SubmitSyncMediaInfoJobResponseBodyMediaInfoJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitSyncMediaInfoJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitSyncMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitSyncMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSyncMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSyncMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitSyncMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSyncMediaInfoJobResponse) SetStatusCode(v int32) *SubmitSyncMediaInfoJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitSyncMediaInfoJobResponse) SetBody(v *SubmitSyncMediaInfoJobResponseBody) *SubmitSyncMediaInfoJobResponse {
	s.Body = v
	return s
}

type SubmitTranscodeJobRequest struct {
	// 任务输入组 (目前只支持一个)
	InputGroup []*SubmitTranscodeJobRequestInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 任务输出组
	OutputGroup []*SubmitTranscodeJobRequestOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// 任务调度信息
	ScheduleConfig *SubmitTranscodeJobRequestScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequest) SetInputGroup(v []*SubmitTranscodeJobRequestInputGroup) *SubmitTranscodeJobRequest {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetName(v string) *SubmitTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobRequest) SetOutputGroup(v []*SubmitTranscodeJobRequestOutputGroup) *SubmitTranscodeJobRequest {
	s.OutputGroup = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetScheduleConfig(v *SubmitTranscodeJobRequestScheduleConfig) *SubmitTranscodeJobRequest {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobRequest) SetUserData(v string) *SubmitTranscodeJobRequest {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobRequestInputGroup struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestInputGroup) SetMedia(v string) *SubmitTranscodeJobRequestInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestInputGroup) SetType(v string) *SubmitTranscodeJobRequestInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroup struct {
	// 输出媒体配置
	Output *SubmitTranscodeJobRequestOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// 任务处理配置
	ProcessConfig *SubmitTranscodeJobRequestOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroup) SetOutput(v *SubmitTranscodeJobRequestOutputGroupOutput) *SubmitTranscodeJobRequestOutputGroup {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroup) SetProcessConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfig) *SubmitTranscodeJobRequestOutputGroup {
	s.ProcessConfig = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupOutput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupOutput) SetType(v string) *SubmitTranscodeJobRequestOutputGroupOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfig struct {
	// 图片水印配置
	ImageWatermarks []*SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// 字幕压制配置
	Subtitles []*SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// 文字水印配置
	TextWatermarks []*SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// 转码配置
	Transcode *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetSubtitles(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfig) SetTranscode(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) *SubmitTranscodeJobRequestOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// 水印位置，x
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// 水印位置，y
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// 水印文件oss路径
	File *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// 显示时间设置
	Timeline *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// 显示时长，秒数 或者 "ToEND"
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 开始时间
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// 文件 encoding 格式
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// 字幕文件
	File *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 字幕文件格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// 根据输出视频大小调整字体 size。 true / false, default: false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// 边框颜色
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// 边框宽度
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// 水印文本，不需要 base64 encode，字符串需要 utf-8 编码
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 透明度
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// 颜色
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// 字体
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// 字体大小
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// 水印位置，距离左边距离
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// 水印位置，距离上边距离
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// audio 设置
	Audio *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// 封装格式设置
	Container *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// 封装设置
	MuxConfig *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// video 设置
	Video *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// 输出文件的音频码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道数。
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 音频编解码格式，AAC、MP3、VORBIS、FLAC。
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 音频编码预置。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否删除音频流。
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 采样率。
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// 音量控制
	Volume *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// 目标音量
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// 音量范围
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// 音量调整方式
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// 最大峰值
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// 容器格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// 切片设置
	Segment *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// 切片时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 强制切片时间点
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// 视频平均码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 缓冲区大小
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// 编码格式
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 码率-质量控制因子。
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// 视频画面裁切
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// 帧率。
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 关键帧间最大帧数。
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// 高。
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 是否开启横竖屏自适应（即：长短边模式）
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// 视频码率峰值
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// 视频贴黑边
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// 视频颜色格式。
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 只有H264支持该参数
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// 编码级别。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否去掉视频
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 扫描模式。
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// 宽。
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobRequestOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobRequestScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobRequestScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobRequestScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobRequestScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobRequestScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobRequestScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobRequestScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobShrinkRequest struct {
	// 任务输入组 (目前只支持一个)
	InputGroupShrink *string `json:"InputGroup,omitempty" xml:"InputGroup,omitempty"`
	// 任务名字
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 任务输出组
	OutputGroupShrink *string `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty"`
	// 任务调度信息
	ScheduleConfigShrink *string `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobShrinkRequest) SetInputGroupShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.InputGroupShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetName(v string) *SubmitTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetOutputGroupShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.OutputGroupShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetScheduleConfigShrink(v string) *SubmitTranscodeJobShrinkRequest {
	s.ScheduleConfigShrink = &v
	return s
}

func (s *SubmitTranscodeJobShrinkRequest) SetUserData(v string) *SubmitTranscodeJobShrinkRequest {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBody struct {
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// TranscodeParentJobWithSubJobDTO
	TranscodeParentJob *SubmitTranscodeJobResponseBodyTranscodeParentJob `json:"TranscodeParentJob,omitempty" xml:"TranscodeParentJob,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBody) SetRequestId(v string) *SubmitTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBody) SetTranscodeParentJob(v *SubmitTranscodeJobResponseBodyTranscodeParentJob) *SubmitTranscodeJobResponseBody {
	s.TranscodeParentJob = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJob struct {
	// 任务创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 任务结束时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入组 (目前只支持单个输入)
	InputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// 子任务数量
	JobCount *int32 `json:"JobCount,omitempty" xml:"JobCount,omitempty"`
	// 任务名
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 任务输出组
	OutputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup `json:"OutputGroup,omitempty" xml:"OutputGroup,omitempty" type:"Repeated"`
	// 主任务 id
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// 任务完成百分比
	Percent *int32 `json:"Percent,omitempty" xml:"Percent,omitempty"`
	// 提交任务时请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务调度配置
	ScheduleConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 任务状态 Success: 有子任务成功, Fail: 所有子任务失败
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 子任务列表
	TranscodeJobList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList `json:"TranscodeJobList,omitempty" xml:"TranscodeJobList,omitempty" type:"Repeated"`
	// 任务来源 - API, WorkFlow, Console
	TriggerSource *string `json:"TriggerSource,omitempty" xml:"TriggerSource,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJob) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetCreateTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.CreateTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetFinishTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetInputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetJobCount(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.JobCount = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetOutputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.OutputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetParentJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.ParentJobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetPercent(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Percent = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetRequestId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetScheduleConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.Status = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetSubmitTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.SubmitTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetTranscodeJobList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.TranscodeJobList = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetTriggerSource(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.TriggerSource = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJob) SetUserData(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJob {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup struct {
	// 输出媒体配置
	Output *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// 任务处理配置
	ProcessConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetOutput(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup) SetProcessConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroup {
	s.ProcessConfig = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig struct {
	// 图片水印配置
	ImageWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// 字幕压制配置
	Subtitles []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// 文字水印配置
	TextWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// 转码配置
	Transcode *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetSubtitles(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig) SetTranscode(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams struct {
	// 水印位置，x
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// 水印位置，y
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// 水印文件oss路径
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// 显示时间设置
	Timeline *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// 显示时长，秒数 或者 "ToEND"
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 开始时间
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams struct {
	// 文件 encoding 格式
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// 字幕文件
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 字幕文件格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams struct {
	// 根据输出视频大小调整字体 size。 true / false, default: false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// 边框颜色
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// 边框宽度
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// 水印文本，不需要 base64 encode，字符串需要 utf-8 编码
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 透明度
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// 颜色
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// 字体
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// 字体大小
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// 水印位置，距离左边距离
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// 水印位置，距离上边距离
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams struct {
	// audio 设置
	Audio *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// 封装格式设置
	Container *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// 封装设置
	MuxConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// video 设置
	Video *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio struct {
	// 输出文件的音频码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道数。
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 音频编解码格式，AAC、MP3、VORBIS、FLAC。
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 音频编码预置。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否删除音频流。
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 采样率。
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// 音量控制
	Volume *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// 目标音量
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// 音量范围
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// 音量调整方式
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// 最大峰值
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer struct {
	// 容器格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// 切片设置
	Segment *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// 切片时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 强制切片时间点
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo struct {
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// 视频平均码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 缓冲区大小
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// 编码格式
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 码率-质量控制因子。
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// 视频画面裁切
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// 帧率。
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 关键帧间最大帧数。
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// 高。
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 是否开启横竖屏自适应（即：长短边模式）
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// 视频码率峰值
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// 视频贴黑边
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// 视频颜色格式。
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 只有H264支持该参数
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// 编码级别。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否去掉视频
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 扫描模式。
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// 宽。
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobOutputGroupProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList struct {
	// 任务创建时间
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// 任务结束时间
	FinishTime *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	// 任务输入组 (目前只支持单个输入)
	InputGroup []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup `json:"InputGroup,omitempty" xml:"InputGroup,omitempty" type:"Repeated"`
	// 子任务 id
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// 子任务在整个任务中的索引号
	JobIndex *int32 `json:"JobIndex,omitempty" xml:"JobIndex,omitempty"`
	// 任务名
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 任务生成视频 media 信息
	OutFileMeta *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta `json:"OutFileMeta,omitempty" xml:"OutFileMeta,omitempty" type:"Struct"`
	// 输出媒体配置
	Output *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	// 主任务 id
	ParentJobId *string `json:"ParentJobId,omitempty" xml:"ParentJobId,omitempty"`
	// 转码处理配置
	ProcessConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig `json:"ProcessConfig,omitempty" xml:"ProcessConfig,omitempty" type:"Struct"`
	// 请求 id
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 任务调度信息
	ScheduleConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig `json:"ScheduleConfig,omitempty" xml:"ScheduleConfig,omitempty" type:"Struct"`
	// 转码任务任务状态 - Init: 已提交, Processing: 转码中, Success: 转码成功, Fail: 转码失败, Deleted: 已删除
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 任务提交结果
	SubmitResultJson map[string]interface{} `json:"SubmitResultJson,omitempty" xml:"SubmitResultJson,omitempty"`
	// 任务提交时间
	SubmitTime *string `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
	// 用户数据
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetCreateTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.CreateTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetFinishTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.FinishTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetInputGroup(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.InputGroup = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetJobIndex(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.JobIndex = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Name = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutFileMeta(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.OutFileMeta = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetOutput(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Output = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetParentJobId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ParentJobId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetProcessConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ProcessConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetRequestId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.RequestId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetScheduleConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.ScheduleConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.Status = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitResultJson(v map[string]interface{}) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitResultJson = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetSubmitTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.SubmitTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList) SetUserData(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobList {
	s.UserData = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListInputGroup {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta struct {
	// 音频流信息
	AudioStreamInfoList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList `json:"AudioStreamInfoList,omitempty" xml:"AudioStreamInfoList,omitempty" type:"Repeated"`
	// 基础文件信息
	FileBasicInfo *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo `json:"FileBasicInfo,omitempty" xml:"FileBasicInfo,omitempty" type:"Struct"`
	// 视频流信息
	VideoStreamInfoList []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList `json:"VideoStreamInfoList,omitempty" xml:"VideoStreamInfoList,omitempty" type:"Repeated"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetAudioStreamInfoList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.AudioStreamInfoList = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetFileBasicInfo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.FileBasicInfo = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta) SetVideoStreamInfoList(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMeta {
	s.VideoStreamInfoList = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList struct {
	// 码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道布局
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	// 声道数
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	// 编码格式
	CodecName *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	// 编码器标签
	CodecTag *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	// 编码器标签名
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	// 编码器时间基
	CodecTimeBase *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang      *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	SampleFmt *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	// 采样率
	SampleRate *string `json:"SampleRate,omitempty" xml:"SampleRate,omitempty"`
	// 开始时间
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// 时间基
	Timebase *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannelLayout(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecLongName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTag(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTagString(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetCodecTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetLang(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetSampleRate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.SampleRate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetStartTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList) SetTimebase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaAudioStreamInfoList {
	s.Timebase = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo struct {
	// 视频码率
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 视频时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 文件名
	FileName *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	// 文件大小
	FileSize *string `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
	// 文件状态
	FileStatus *string `json:"FileStatus,omitempty" xml:"FileStatus,omitempty"`
	// 文件类型
	FileType *string `json:"FileType,omitempty" xml:"FileType,omitempty"`
	// 文件url
	FileUrl *string `json:"FileUrl,omitempty" xml:"FileUrl,omitempty"`
	// 视频格式名称
	FormatName *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 文件所在区域
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileSize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileStatus(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileStatus = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileType = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFileUrl(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FileUrl = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetFormatName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.FormatName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetMediaId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.MediaId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetRegion(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Region = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaFileBasicInfo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList struct {
	AvgFps  *string `json:"Avg_fps,omitempty" xml:"Avg_fps,omitempty"`
	BitRate *string `json:"Bit_rate,omitempty" xml:"Bit_rate,omitempty"`
	// 编码格式名
	CodecLongName *string `json:"Codec_long_name,omitempty" xml:"Codec_long_name,omitempty"`
	// 编码格式
	CodecName *string `json:"Codec_name,omitempty" xml:"Codec_name,omitempty"`
	// 编码格式标记
	CodecTag *string `json:"Codec_tag,omitempty" xml:"Codec_tag,omitempty"`
	// 编码格式标记文本
	CodecTagString *string `json:"Codec_tag_string,omitempty" xml:"Codec_tag_string,omitempty"`
	CodecTimeBase  *string `json:"Codec_time_base,omitempty" xml:"Codec_time_base,omitempty"`
	// 图像显示宽高比
	Dar *string `json:"Dar,omitempty" xml:"Dar,omitempty"`
	// 时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 帧率
	Fps        *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	HasBFrames *string `json:"Has_b_frames,omitempty" xml:"Has_b_frames,omitempty"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 流序号
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	// 语言
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// 编码等级
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// 总帧数
	NumFrames *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	// 颜色存储格式
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 编码器预设
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 视频画面旋转角度
	Rotate *string `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	// 采集点数宽高比
	Sar *string `json:"Sar,omitempty" xml:"Sar,omitempty"`
	// 起始时间
	StartTime *string `json:"Start_time,omitempty" xml:"Start_time,omitempty"`
	TimeBase  *string `json:"Time_base,omitempty" xml:"Time_base,omitempty"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetAvgFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.AvgFps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetBitRate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.BitRate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecLongName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecLongName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTag(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTag = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTagString(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTagString = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetCodecTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDar(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Dar = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHasBFrames(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.HasBFrames = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetIndex(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Index = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLang(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Lang = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetLevel(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Level = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetNumFrames(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.NumFrames = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetRotate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Rotate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetSar(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Sar = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetStartTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.StartTime = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetTimeBase(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.TimeBase = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutFileMetaVideoStreamInfoList {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListOutput {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig struct {
	// 图片水印配置
	ImageWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks `json:"ImageWatermarks,omitempty" xml:"ImageWatermarks,omitempty" type:"Repeated"`
	// 字幕压制配置
	Subtitles []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles `json:"Subtitles,omitempty" xml:"Subtitles,omitempty" type:"Repeated"`
	// 文字水印配置
	TextWatermarks []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks `json:"TextWatermarks,omitempty" xml:"TextWatermarks,omitempty" type:"Repeated"`
	// 转码配置
	Transcode *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode `json:"Transcode,omitempty" xml:"Transcode,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetImageWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.ImageWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetSubtitles(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Subtitles = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTextWatermarks(v []*SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.TextWatermarks = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig) SetTranscode(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfig {
	s.Transcode = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams struct {
	// 水印位置，x
	Dx *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	// 水印位置，y
	Dy *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
	// 水印文件oss路径
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 高
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 参考位置: TopLeft, TopRight, BottomLeft, BottomRight  default: TopLeft
	ReferPos *string `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	// 显示时间设置
	Timeline *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	// 宽
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDx(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dx = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetDy(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Dy = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetReferPos(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.ReferPos = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetTimeline(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Timeline = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParams {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline struct {
	// 显示时长，秒数 或者 "ToEND"
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 开始时间
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline) SetStart(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigImageWatermarksOverwriteParamsTimeline {
	s.Start = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitles {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams struct {
	// 文件 encoding 格式
	CharEnc *string `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	// 字幕文件
	File *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	// 字幕文件格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetCharEnc(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.CharEnc = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFile(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.File = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParams {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile struct {
	// 媒体值：
	//       type 为 OSS 时，为 url, 支持 oss 协议和 http 协议；
	//       type 为 Media 时，为媒资 id。
	Media *string `json:"Media,omitempty" xml:"Media,omitempty"`
	// 媒体对象类型 - OSS: oss文件, Media: 媒资 ID
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetMedia(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Media = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile) SetType(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigSubtitlesOverwriteParamsFile {
	s.Type = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarks {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams struct {
	// 根据输出视频大小调整字体 size。 true / false, default: false
	Adaptive *string `json:"Adaptive,omitempty" xml:"Adaptive,omitempty"`
	// 边框颜色
	BorderColor *string `json:"BorderColor,omitempty" xml:"BorderColor,omitempty"`
	// 边框宽度
	BorderWidth *int32 `json:"BorderWidth,omitempty" xml:"BorderWidth,omitempty"`
	// 水印文本，不需要 base64 encode，字符串需要 utf-8 编码
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// 透明度
	FontAlpha *string `json:"FontAlpha,omitempty" xml:"FontAlpha,omitempty"`
	// 颜色
	FontColor *string `json:"FontColor,omitempty" xml:"FontColor,omitempty"`
	// 字体
	FontName *string `json:"FontName,omitempty" xml:"FontName,omitempty"`
	// 字体大小
	FontSize *int32 `json:"FontSize,omitempty" xml:"FontSize,omitempty"`
	// 水印位置，距离左边距离
	Left *string `json:"Left,omitempty" xml:"Left,omitempty"`
	// 水印位置，距离上边距离
	Top *string `json:"Top,omitempty" xml:"Top,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetAdaptive(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Adaptive = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetBorderWidth(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.BorderWidth = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetContent(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Content = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontAlpha(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontAlpha = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontColor(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontColor = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontName(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontName = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetFontSize(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.FontSize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetLeft(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Left = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams) SetTop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTextWatermarksOverwriteParams {
	s.Top = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode struct {
	// 覆盖参数, 若填写会覆盖模板对应参数
	OverwriteParams *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams `json:"OverwriteParams,omitempty" xml:"OverwriteParams,omitempty" type:"Struct"`
	// 模板 id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetOverwriteParams(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.OverwriteParams = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode) SetTemplateId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscode {
	s.TemplateId = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams struct {
	// audio 设置
	Audio *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	// 封装格式设置
	Container *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	// 封装设置
	MuxConfig *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	// video 设置
	Video *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetAudio(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Audio = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetContainer(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Container = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetMuxConfig(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.MuxConfig = v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams) SetVideo(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParams {
	s.Video = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio struct {
	// 输出文件的音频码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 声道数。
	Channels *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	// 音频编解码格式，AAC、MP3、VORBIS、FLAC。
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 音频编码预置。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否删除音频流。
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 采样率。
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	// 音量控制
	Volume *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetChannels(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Channels = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetSamplerate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio) SetVolume(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudio {
	s.Volume = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume struct {
	// 目标音量
	IntegratedLoudnessTarget *string `json:"IntegratedLoudnessTarget,omitempty" xml:"IntegratedLoudnessTarget,omitempty"`
	// 音量范围
	LoudnessRangeTarget *string `json:"LoudnessRangeTarget,omitempty" xml:"LoudnessRangeTarget,omitempty"`
	// 音量调整方式
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	// 最大峰值
	TruePeak *string `json:"TruePeak,omitempty" xml:"TruePeak,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetIntegratedLoudnessTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.IntegratedLoudnessTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetLoudnessRangeTarget(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.LoudnessRangeTarget = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetMethod(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume) SetTruePeak(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsAudioVolume {
	s.TruePeak = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer struct {
	// 容器格式
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer) SetFormat(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsContainer {
	s.Format = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig struct {
	// 切片设置
	Segment *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig) SetSegment(v *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfig {
	s.Segment = v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment struct {
	// 切片时长
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// 强制切片时间点
	ForceSegTime *string `json:"ForceSegTime,omitempty" xml:"ForceSegTime,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetDuration(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.Duration = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment) SetForceSegTime(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsMuxConfigSegment {
	s.ForceSegTime = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo struct {
	AbrMax *string `json:"AbrMax,omitempty" xml:"AbrMax,omitempty"`
	// 视频平均码率。
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	// 缓冲区大小
	Bufsize *string `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	// 编码格式
	Codec *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	// 码率-质量控制因子。
	Crf *string `json:"Crf,omitempty" xml:"Crf,omitempty"`
	// 视频画面裁切
	Crop *string `json:"Crop,omitempty" xml:"Crop,omitempty"`
	// 帧率。
	Fps *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	// 关键帧间最大帧数。
	Gop *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	// 高。
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	// 是否开启横竖屏自适应（即：长短边模式）
	LongShortMode *string `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	// 视频码率峰值
	Maxrate *string `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	// 视频贴黑边
	Pad *string `json:"Pad,omitempty" xml:"Pad,omitempty"`
	// 视频颜色格式。
	PixFmt *string `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	// 只有H264支持该参数
	Preset *string `json:"Preset,omitempty" xml:"Preset,omitempty"`
	// 编码级别。
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	// 是否去掉视频
	Remove *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	// 扫描模式。
	ScanMode *string `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	// 宽。
	Width *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetAbrMax(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.AbrMax = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBitrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetBufsize(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCodec(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Codec = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrf(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crf = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetCrop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Crop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetFps(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Fps = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetGop(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Gop = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetHeight(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Height = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetLongShortMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.LongShortMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetMaxrate(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPad(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Pad = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPixFmt(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetPreset(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Preset = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetProfile(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Profile = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetRemove(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Remove = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetScanMode(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo) SetWidth(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListProcessConfigTranscodeOverwriteParamsVideo {
	s.Width = &v
	return s
}

type SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig struct {
	// 管道 id
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 任务优先级，取值范围：1~10
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPipelineId(v string) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.PipelineId = &v
	return s
}

func (s *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig) SetPriority(v int32) *SubmitTranscodeJobResponseBodyTranscodeParentJobTranscodeJobListScheduleConfig {
	s.Priority = &v
	return s
}

type SubmitTranscodeJobResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SubmitTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTranscodeJobResponse) SetHeaders(v map[string]*string) *SubmitTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTranscodeJobResponse) SetStatusCode(v int32) *SubmitTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitTranscodeJobResponse) SetBody(v *SubmitTranscodeJobResponseBody) *SubmitTranscodeJobResponse {
	s.Body = v
	return s
}

type UpdateCategoryRequest struct {
	CateId   *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
}

func (s UpdateCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryRequest) GoString() string {
	return s.String()
}

func (s *UpdateCategoryRequest) SetCateId(v int64) *UpdateCategoryRequest {
	s.CateId = &v
	return s
}

func (s *UpdateCategoryRequest) SetCateName(v string) *UpdateCategoryRequest {
	s.CateName = &v
	return s
}

type UpdateCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCategoryResponseBody) SetRequestId(v string) *UpdateCategoryResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCategoryResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryResponse) GoString() string {
	return s.String()
}

func (s *UpdateCategoryResponse) SetHeaders(v map[string]*string) *UpdateCategoryResponse {
	s.Headers = v
	return s
}

func (s *UpdateCategoryResponse) SetStatusCode(v int32) *UpdateCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCategoryResponse) SetBody(v *UpdateCategoryResponseBody) *UpdateCategoryResponse {
	s.Body = v
	return s
}

type UpdateCustomTemplateRequest struct {
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 模板参数
	TemplateConfig *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateCustomTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateRequest) SetName(v string) *UpdateCustomTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateCustomTemplateRequest) SetTemplateConfig(v string) *UpdateCustomTemplateRequest {
	s.TemplateConfig = &v
	return s
}

func (s *UpdateCustomTemplateRequest) SetTemplateId(v string) *UpdateCustomTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateCustomTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 是否成功
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateCustomTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateResponseBody) SetRequestId(v string) *UpdateCustomTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCustomTemplateResponseBody) SetSuccess(v bool) *UpdateCustomTemplateResponseBody {
	s.Success = &v
	return s
}

type UpdateCustomTemplateResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateCustomTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCustomTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCustomTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateCustomTemplateResponse) SetHeaders(v map[string]*string) *UpdateCustomTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateCustomTemplateResponse) SetStatusCode(v int32) *UpdateCustomTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateCustomTemplateResponse) SetBody(v *UpdateCustomTemplateResponseBody) *UpdateCustomTemplateResponse {
	s.Body = v
	return s
}

type UpdateEditingProjectRequest struct {
	BusinessStatus *string `json:"BusinessStatus,omitempty" xml:"BusinessStatus,omitempty"`
	// 模板对应的素材参数
	ClipsParam *string `json:"ClipsParam,omitempty" xml:"ClipsParam,omitempty"`
	// 云剪辑工程封面
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 云剪辑工程描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 云剪辑工程ID
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// 模板Id
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	// 云剪辑工程时间线，Json格式
	Timeline *string `json:"Timeline,omitempty" xml:"Timeline,omitempty"`
	// 云剪辑工程标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s UpdateEditingProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectRequest) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectRequest) SetBusinessStatus(v string) *UpdateEditingProjectRequest {
	s.BusinessStatus = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetClipsParam(v string) *UpdateEditingProjectRequest {
	s.ClipsParam = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetCoverURL(v string) *UpdateEditingProjectRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetDescription(v string) *UpdateEditingProjectRequest {
	s.Description = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetProjectId(v string) *UpdateEditingProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTemplateId(v string) *UpdateEditingProjectRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTimeline(v string) *UpdateEditingProjectRequest {
	s.Timeline = &v
	return s
}

func (s *UpdateEditingProjectRequest) SetTitle(v string) *UpdateEditingProjectRequest {
	s.Title = &v
	return s
}

type UpdateEditingProjectResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateEditingProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectResponseBody) SetRequestId(v string) *UpdateEditingProjectResponseBody {
	s.RequestId = &v
	return s
}

type UpdateEditingProjectResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateEditingProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateEditingProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEditingProjectResponse) GoString() string {
	return s.String()
}

func (s *UpdateEditingProjectResponse) SetHeaders(v map[string]*string) *UpdateEditingProjectResponse {
	s.Headers = v
	return s
}

func (s *UpdateEditingProjectResponse) SetStatusCode(v int32) *UpdateEditingProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEditingProjectResponse) SetBody(v *UpdateEditingProjectResponseBody) *UpdateEditingProjectResponse {
	s.Body = v
	return s
}

type UpdateLiveTranscodeJobRequest struct {
	JobId           *string                                       `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name            *string                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	StreamInput     *UpdateLiveTranscodeJobRequestStreamInput     `json:"StreamInput,omitempty" xml:"StreamInput,omitempty" type:"Struct"`
	TimedConfig     *UpdateLiveTranscodeJobRequestTimedConfig     `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty" type:"Struct"`
	TranscodeOutput *UpdateLiveTranscodeJobRequestTranscodeOutput `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty" type:"Struct"`
}

func (s UpdateLiveTranscodeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequest) SetJobId(v string) *UpdateLiveTranscodeJobRequest {
	s.JobId = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetName(v string) *UpdateLiveTranscodeJobRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetStreamInput(v *UpdateLiveTranscodeJobRequestStreamInput) *UpdateLiveTranscodeJobRequest {
	s.StreamInput = v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetTimedConfig(v *UpdateLiveTranscodeJobRequestTimedConfig) *UpdateLiveTranscodeJobRequest {
	s.TimedConfig = v
	return s
}

func (s *UpdateLiveTranscodeJobRequest) SetTranscodeOutput(v *UpdateLiveTranscodeJobRequestTranscodeOutput) *UpdateLiveTranscodeJobRequest {
	s.TranscodeOutput = v
	return s
}

type UpdateLiveTranscodeJobRequestStreamInput struct {
	InputUrl *string `json:"InputUrl,omitempty" xml:"InputUrl,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestStreamInput) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestStreamInput) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestStreamInput) SetInputUrl(v string) *UpdateLiveTranscodeJobRequestStreamInput {
	s.InputUrl = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestStreamInput) SetType(v string) *UpdateLiveTranscodeJobRequestStreamInput {
	s.Type = &v
	return s
}

type UpdateLiveTranscodeJobRequestTimedConfig struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestTimedConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestTimedConfig) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestTimedConfig) SetEndTime(v string) *UpdateLiveTranscodeJobRequestTimedConfig {
	s.EndTime = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestTimedConfig) SetStartTime(v string) *UpdateLiveTranscodeJobRequestTimedConfig {
	s.StartTime = &v
	return s
}

type UpdateLiveTranscodeJobRequestTranscodeOutput struct {
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateLiveTranscodeJobRequestTranscodeOutput) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobRequestTranscodeOutput) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobRequestTranscodeOutput) SetDomainName(v string) *UpdateLiveTranscodeJobRequestTranscodeOutput {
	s.DomainName = &v
	return s
}

func (s *UpdateLiveTranscodeJobRequestTranscodeOutput) SetType(v string) *UpdateLiveTranscodeJobRequestTranscodeOutput {
	s.Type = &v
	return s
}

type UpdateLiveTranscodeJobShrinkRequest struct {
	JobId                 *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	StreamInputShrink     *string `json:"StreamInput,omitempty" xml:"StreamInput,omitempty"`
	TimedConfigShrink     *string `json:"TimedConfig,omitempty" xml:"TimedConfig,omitempty"`
	TranscodeOutputShrink *string `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty"`
}

func (s UpdateLiveTranscodeJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetJobId(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.JobId = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetName(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetStreamInputShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.StreamInputShrink = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetTimedConfigShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.TimedConfigShrink = &v
	return s
}

func (s *UpdateLiveTranscodeJobShrinkRequest) SetTranscodeOutputShrink(v string) *UpdateLiveTranscodeJobShrinkRequest {
	s.TranscodeOutputShrink = &v
	return s
}

type UpdateLiveTranscodeJobResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTranscodeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobResponseBody) SetRequestId(v string) *UpdateLiveTranscodeJobResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTranscodeJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveTranscodeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveTranscodeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeJobResponse) SetHeaders(v map[string]*string) *UpdateLiveTranscodeJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTranscodeJobResponse) SetStatusCode(v int32) *UpdateLiveTranscodeJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveTranscodeJobResponse) SetBody(v *UpdateLiveTranscodeJobResponseBody) *UpdateLiveTranscodeJobResponse {
	s.Body = v
	return s
}

type UpdateLiveTranscodeTemplateRequest struct {
	Name           *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfig *UpdateLiveTranscodeTemplateRequestTemplateConfig `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty" type:"Struct"`
	TemplateId     *string                                           `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequest) SetName(v string) *UpdateLiveTranscodeTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequest) SetTemplateConfig(v *UpdateLiveTranscodeTemplateRequestTemplateConfig) *UpdateLiveTranscodeTemplateRequest {
	s.TemplateConfig = v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequest) SetTemplateId(v string) *UpdateLiveTranscodeTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfig struct {
	AudioParams *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams `json:"AudioParams,omitempty" xml:"AudioParams,omitempty" type:"Struct"`
	VideoParams *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams `json:"VideoParams,omitempty" xml:"VideoParams,omitempty" type:"Struct"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfig) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfig) SetAudioParams(v *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) *UpdateLiveTranscodeTemplateRequestTemplateConfig {
	s.AudioParams = v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfig) SetVideoParams(v *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) *UpdateLiveTranscodeTemplateRequestTemplateConfig {
	s.VideoParams = v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams struct {
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetBitrate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Bitrate = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetChannels(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Channels = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetCodec(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Codec = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetProfile(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Profile = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams) SetSamplerate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigAudioParams {
	s.Samplerate = &v
	return s
}

type UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams struct {
	Bitrate *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Codec   *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Fps     *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Gop     *string `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Profile *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetBitrate(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Bitrate = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetCodec(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Codec = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetFps(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Fps = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetGop(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Gop = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetHeight(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Height = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetProfile(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Profile = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams) SetWidth(v string) *UpdateLiveTranscodeTemplateRequestTemplateConfigVideoParams {
	s.Width = &v
	return s
}

type UpdateLiveTranscodeTemplateShrinkRequest struct {
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateConfigShrink *string `json:"TemplateConfig,omitempty" xml:"TemplateConfig,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateShrinkRequest) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetName(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.Name = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetTemplateConfigShrink(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.TemplateConfigShrink = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateShrinkRequest) SetTemplateId(v string) *UpdateLiveTranscodeTemplateShrinkRequest {
	s.TemplateId = &v
	return s
}

type UpdateLiveTranscodeTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateLiveTranscodeTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateResponseBody) SetRequestId(v string) *UpdateLiveTranscodeTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateLiveTranscodeTemplateResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateLiveTranscodeTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLiveTranscodeTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLiveTranscodeTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateLiveTranscodeTemplateResponse) SetHeaders(v map[string]*string) *UpdateLiveTranscodeTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateLiveTranscodeTemplateResponse) SetStatusCode(v int32) *UpdateLiveTranscodeTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateLiveTranscodeTemplateResponse) SetBody(v *UpdateLiveTranscodeTemplateResponseBody) *UpdateLiveTranscodeTemplateResponse {
	s.Body = v
	return s
}

type UpdateMediaInfoRequest struct {
	// 是否以append的形式更新Tags字段
	AppendTags *bool `json:"AppendTags,omitempty" xml:"AppendTags,omitempty"`
	// 媒资业务类型
	BusinessType *string `json:"BusinessType,omitempty" xml:"BusinessType,omitempty"`
	CateId       *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	// 分类
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// 封面图，仅视频媒资有效
	CoverURL *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	// 描述
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// 媒资媒体类型
	InputURL *string `json:"InputURL,omitempty" xml:"InputURL,omitempty"`
	// 媒资Id
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 标签,如果有多个标签用逗号隔开
	MediaTags *string `json:"MediaTags,omitempty" xml:"MediaTags,omitempty"`
	// 标题
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
	// 用户数据，最大1024字节
	UserData *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UpdateMediaInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoRequest) SetAppendTags(v bool) *UpdateMediaInfoRequest {
	s.AppendTags = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetBusinessType(v string) *UpdateMediaInfoRequest {
	s.BusinessType = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCateId(v int64) *UpdateMediaInfoRequest {
	s.CateId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCategory(v string) *UpdateMediaInfoRequest {
	s.Category = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetCoverURL(v string) *UpdateMediaInfoRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetDescription(v string) *UpdateMediaInfoRequest {
	s.Description = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetInputURL(v string) *UpdateMediaInfoRequest {
	s.InputURL = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetMediaId(v string) *UpdateMediaInfoRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetMediaTags(v string) *UpdateMediaInfoRequest {
	s.MediaTags = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetTitle(v string) *UpdateMediaInfoRequest {
	s.Title = &v
	return s
}

func (s *UpdateMediaInfoRequest) SetUserData(v string) *UpdateMediaInfoRequest {
	s.UserData = &v
	return s
}

type UpdateMediaInfoResponseBody struct {
	// ICE媒资ID
	MediaId *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoResponseBody) SetMediaId(v string) *UpdateMediaInfoResponseBody {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaInfoResponseBody) SetRequestId(v string) *UpdateMediaInfoResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaInfoResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateMediaInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMediaInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaInfoResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaInfoResponse) SetHeaders(v map[string]*string) *UpdateMediaInfoResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaInfoResponse) SetStatusCode(v int32) *UpdateMediaInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMediaInfoResponse) SetBody(v *UpdateMediaInfoResponseBody) *UpdateMediaInfoResponse {
	s.Body = v
	return s
}

type UpdatePipelineRequest struct {
	// 管道名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 管道ID
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	// 优先级
	Priority *int32 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	// 管道状态。
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineRequest) SetName(v string) *UpdatePipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdatePipelineRequest) SetPipelineId(v string) *UpdatePipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdatePipelineRequest) SetPriority(v int32) *UpdatePipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdatePipelineRequest) SetStatus(v string) *UpdatePipelineRequest {
	s.Status = &v
	return s
}

type UpdatePipelineResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 是否成功
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBody) SetRequestId(v string) *UpdatePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePipelineResponseBody) SetSuccess(v bool) *UpdatePipelineResponseBody {
	s.Success = &v
	return s
}

type UpdatePipelineResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponse) SetHeaders(v map[string]*string) *UpdatePipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineResponse) SetStatusCode(v int32) *UpdatePipelineResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdatePipelineResponse) SetBody(v *UpdatePipelineResponseBody) *UpdatePipelineResponse {
	s.Body = v
	return s
}

type UpdateSmartJobRequest struct {
	FEExtend *string `json:"FEExtend,omitempty" xml:"FEExtend,omitempty"`
	JobId    *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s UpdateSmartJobRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartJobRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmartJobRequest) SetFEExtend(v string) *UpdateSmartJobRequest {
	s.FEExtend = &v
	return s
}

func (s *UpdateSmartJobRequest) SetJobId(v string) *UpdateSmartJobRequest {
	s.JobId = &v
	return s
}

type UpdateSmartJobResponseBody struct {
	FEExtend *string `json:"FEExtend,omitempty" xml:"FEExtend,omitempty"`
	JobId    *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSmartJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartJobResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmartJobResponseBody) SetFEExtend(v string) *UpdateSmartJobResponseBody {
	s.FEExtend = &v
	return s
}

func (s *UpdateSmartJobResponseBody) SetJobId(v string) *UpdateSmartJobResponseBody {
	s.JobId = &v
	return s
}

func (s *UpdateSmartJobResponseBody) SetRequestId(v string) *UpdateSmartJobResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSmartJobResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateSmartJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmartJobResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmartJobResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmartJobResponse) SetHeaders(v map[string]*string) *UpdateSmartJobResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmartJobResponse) SetStatusCode(v int32) *UpdateSmartJobResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSmartJobResponse) SetBody(v *UpdateSmartJobResponseBody) *UpdateSmartJobResponse {
	s.Body = v
	return s
}

type UpdateTemplateRequest struct {
	// 参见模板Config文档
	Config *string `json:"Config,omitempty" xml:"Config,omitempty"`
	// 模板封面
	CoverUrl *string `json:"CoverUrl,omitempty" xml:"CoverUrl,omitempty"`
	// 模板名称
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// 预览视频媒资id
	PreviewMedia *string `json:"PreviewMedia,omitempty" xml:"PreviewMedia,omitempty"`
	// 模板相关素材，模板编辑器使用
	RelatedMediaids *string `json:"RelatedMediaids,omitempty" xml:"RelatedMediaids,omitempty"`
	// 修改来源，默认OpenAPI
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// 模板状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 模板ID
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateTemplateRequest) SetConfig(v string) *UpdateTemplateRequest {
	s.Config = &v
	return s
}

func (s *UpdateTemplateRequest) SetCoverUrl(v string) *UpdateTemplateRequest {
	s.CoverUrl = &v
	return s
}

func (s *UpdateTemplateRequest) SetName(v string) *UpdateTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateTemplateRequest) SetPreviewMedia(v string) *UpdateTemplateRequest {
	s.PreviewMedia = &v
	return s
}

func (s *UpdateTemplateRequest) SetRelatedMediaids(v string) *UpdateTemplateRequest {
	s.RelatedMediaids = &v
	return s
}

func (s *UpdateTemplateRequest) SetSource(v string) *UpdateTemplateRequest {
	s.Source = &v
	return s
}

func (s *UpdateTemplateRequest) SetStatus(v string) *UpdateTemplateRequest {
	s.Status = &v
	return s
}

func (s *UpdateTemplateRequest) SetTemplateId(v string) *UpdateTemplateRequest {
	s.TemplateId = &v
	return s
}

type UpdateTemplateResponseBody struct {
	// 请求ID
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBody) SetRequestId(v string) *UpdateTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateTemplateResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponse) SetHeaders(v map[string]*string) *UpdateTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateTemplateResponse) SetStatusCode(v int32) *UpdateTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateTemplateResponse) SetBody(v *UpdateTemplateResponseBody) *UpdateTemplateResponse {
	s.Body = v
	return s
}

type UploadMediaByURLRequest struct {
	AppId              *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	EntityId           *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	MediaMetaData      *string `json:"MediaMetaData,omitempty" xml:"MediaMetaData,omitempty"`
	PostProcessConfig  *string `json:"PostProcessConfig,omitempty" xml:"PostProcessConfig,omitempty"`
	UploadTargetConfig *string `json:"UploadTargetConfig,omitempty" xml:"UploadTargetConfig,omitempty"`
	UploadURLs         *string `json:"UploadURLs,omitempty" xml:"UploadURLs,omitempty"`
	UserData           *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UploadMediaByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLRequest) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLRequest) SetAppId(v string) *UploadMediaByURLRequest {
	s.AppId = &v
	return s
}

func (s *UploadMediaByURLRequest) SetEntityId(v string) *UploadMediaByURLRequest {
	s.EntityId = &v
	return s
}

func (s *UploadMediaByURLRequest) SetMediaMetaData(v string) *UploadMediaByURLRequest {
	s.MediaMetaData = &v
	return s
}

func (s *UploadMediaByURLRequest) SetPostProcessConfig(v string) *UploadMediaByURLRequest {
	s.PostProcessConfig = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUploadTargetConfig(v string) *UploadMediaByURLRequest {
	s.UploadTargetConfig = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUploadURLs(v string) *UploadMediaByURLRequest {
	s.UploadURLs = &v
	return s
}

func (s *UploadMediaByURLRequest) SetUserData(v string) *UploadMediaByURLRequest {
	s.UserData = &v
	return s
}

type UploadMediaByURLResponseBody struct {
	// RequestId
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UploadJobs []*UploadMediaByURLResponseBodyUploadJobs `json:"UploadJobs,omitempty" xml:"UploadJobs,omitempty" type:"Repeated"`
}

func (s UploadMediaByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponseBody) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponseBody) SetRequestId(v string) *UploadMediaByURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadMediaByURLResponseBody) SetUploadJobs(v []*UploadMediaByURLResponseBodyUploadJobs) *UploadMediaByURLResponseBody {
	s.UploadJobs = v
	return s
}

type UploadMediaByURLResponseBodyUploadJobs struct {
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	SourceURL *string `json:"SourceURL,omitempty" xml:"SourceURL,omitempty"`
}

func (s UploadMediaByURLResponseBodyUploadJobs) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponseBodyUploadJobs) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetJobId(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.JobId = &v
	return s
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetMediaId(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.MediaId = &v
	return s
}

func (s *UploadMediaByURLResponseBodyUploadJobs) SetSourceURL(v string) *UploadMediaByURLResponseBodyUploadJobs {
	s.SourceURL = &v
	return s
}

type UploadMediaByURLResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadMediaByURLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadMediaByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadMediaByURLResponse) GoString() string {
	return s.String()
}

func (s *UploadMediaByURLResponse) SetHeaders(v map[string]*string) *UploadMediaByURLResponse {
	s.Headers = v
	return s
}

func (s *UploadMediaByURLResponse) SetStatusCode(v int32) *UploadMediaByURLResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadMediaByURLResponse) SetBody(v *UploadMediaByURLResponseBody) *UploadMediaByURLResponse {
	s.Body = v
	return s
}

type UploadStreamByURLRequest struct {
	Definition    *string `json:"Definition,omitempty" xml:"Definition,omitempty"`
	FileExtension *string `json:"FileExtension,omitempty" xml:"FileExtension,omitempty"`
	HDRType       *string `json:"HDRType,omitempty" xml:"HDRType,omitempty"`
	MediaId       *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	StreamURL     *string `json:"StreamURL,omitempty" xml:"StreamURL,omitempty"`
	UserData      *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s UploadStreamByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLRequest) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLRequest) SetDefinition(v string) *UploadStreamByURLRequest {
	s.Definition = &v
	return s
}

func (s *UploadStreamByURLRequest) SetFileExtension(v string) *UploadStreamByURLRequest {
	s.FileExtension = &v
	return s
}

func (s *UploadStreamByURLRequest) SetHDRType(v string) *UploadStreamByURLRequest {
	s.HDRType = &v
	return s
}

func (s *UploadStreamByURLRequest) SetMediaId(v string) *UploadStreamByURLRequest {
	s.MediaId = &v
	return s
}

func (s *UploadStreamByURLRequest) SetStreamURL(v string) *UploadStreamByURLRequest {
	s.StreamURL = &v
	return s
}

func (s *UploadStreamByURLRequest) SetUserData(v string) *UploadStreamByURLRequest {
	s.UserData = &v
	return s
}

type UploadStreamByURLResponseBody struct {
	FileURL   *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	MediaId   *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SourceURL *string `json:"SourceURL,omitempty" xml:"SourceURL,omitempty"`
}

func (s UploadStreamByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLResponseBody) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLResponseBody) SetFileURL(v string) *UploadStreamByURLResponseBody {
	s.FileURL = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetJobId(v string) *UploadStreamByURLResponseBody {
	s.JobId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetMediaId(v string) *UploadStreamByURLResponseBody {
	s.MediaId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetRequestId(v string) *UploadStreamByURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *UploadStreamByURLResponseBody) SetSourceURL(v string) *UploadStreamByURLResponseBody {
	s.SourceURL = &v
	return s
}

type UploadStreamByURLResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UploadStreamByURLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UploadStreamByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s UploadStreamByURLResponse) GoString() string {
	return s.String()
}

func (s *UploadStreamByURLResponse) SetHeaders(v map[string]*string) *UploadStreamByURLResponse {
	s.Headers = v
	return s
}

func (s *UploadStreamByURLResponse) SetStatusCode(v int32) *UploadStreamByURLResponse {
	s.StatusCode = &v
	return s
}

func (s *UploadStreamByURLResponse) SetBody(v *UploadStreamByURLResponseBody) *UploadStreamByURLResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-1":              tea.String("ice.aliyuncs.com"),
		"ap-northeast-2-pop":          tea.String("ice.aliyuncs.com"),
		"ap-south-1":                  tea.String("ice.aliyuncs.com"),
		"ap-southeast-1":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-2":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-3":              tea.String("ice.aliyuncs.com"),
		"ap-southeast-5":              tea.String("ice.aliyuncs.com"),
		"cn-beijing":                  tea.String("ice.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("ice.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("ice.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("ice.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("ice.aliyuncs.com"),
		"cn-chengdu":                  tea.String("ice.aliyuncs.com"),
		"cn-edge-1":                   tea.String("ice.aliyuncs.com"),
		"cn-fujian":                   tea.String("ice.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("ice.aliyuncs.com"),
		"cn-hangzhou":                 tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("ice.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("ice.aliyuncs.com"),
		"cn-hongkong":                 tea.String("ice.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("ice.aliyuncs.com"),
		"cn-huhehaote":                tea.String("ice.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("ice.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("ice.aliyuncs.com"),
		"cn-qingdao":                  tea.String("ice.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("ice.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("ice.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("ice.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("ice.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("ice.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("ice.aliyuncs.com"),
		"cn-shenzhen":                 tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("ice.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("ice.aliyuncs.com"),
		"cn-wuhan":                    tea.String("ice.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("ice.aliyuncs.com"),
		"cn-yushanfang":               tea.String("ice.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("ice.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("ice.aliyuncs.com"),
		"cn-zhangjiakou":              tea.String("ice.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("ice.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("ice.aliyuncs.com"),
		"eu-central-1":                tea.String("ice.aliyuncs.com"),
		"eu-west-1":                   tea.String("ice.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("ice.aliyuncs.com"),
		"me-east-1":                   tea.String("ice.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("ice.aliyuncs.com"),
		"us-east-1":                   tea.String("ice.aliyuncs.com"),
		"us-west-1":                   tea.String("ice.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("ice"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCategoryWithOptions(request *AddCategoryRequest, runtime *util.RuntimeOptions) (_result *AddCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCategory(request *AddCategoryRequest) (_result *AddCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCategoryResponse{}
	_body, _err := client.AddCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddEditingProjectMaterialsWithOptions(request *AddEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *AddEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaterialMaps)) {
		query["MaterialMaps"] = request.MaterialMaps
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddEditingProjectMaterials(request *AddEditingProjectMaterialsRequest) (_result *AddEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddEditingProjectMaterialsResponse{}
	_body, _err := client.AddEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddFavoritePublicMediaWithOptions(request *AddFavoritePublicMediaRequest, runtime *util.RuntimeOptions) (_result *AddFavoritePublicMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddFavoritePublicMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddFavoritePublicMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddFavoritePublicMedia(request *AddFavoritePublicMediaRequest) (_result *AddFavoritePublicMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddFavoritePublicMediaResponse{}
	_body, _err := client.AddFavoritePublicMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTemplateWithOptions(request *AddTemplateRequest, runtime *util.RuntimeOptions) (_result *AddTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		query["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewMedia)) {
		query["PreviewMedia"] = request.PreviewMedia
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTemplate(request *AddTemplateRequest) (_result *AddTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTemplateResponse{}
	_body, _err := client.AddTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BatchGetMediaInfosWithOptions(request *BatchGetMediaInfosRequest, runtime *util.RuntimeOptions) (_result *BatchGetMediaInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AdditionType)) {
		query["AdditionType"] = request.AdditionType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchGetMediaInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchGetMediaInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BatchGetMediaInfos(request *BatchGetMediaInfosRequest) (_result *BatchGetMediaInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchGetMediaInfosResponse{}
	_body, _err := client.BatchGetMediaInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelFavoritePublicMediaWithOptions(request *CancelFavoritePublicMediaRequest, runtime *util.RuntimeOptions) (_result *CancelFavoritePublicMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelFavoritePublicMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelFavoritePublicMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelFavoritePublicMedia(request *CancelFavoritePublicMediaRequest) (_result *CancelFavoritePublicMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelFavoritePublicMediaResponse{}
	_body, _err := client.CancelFavoritePublicMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelUrlUploadJobsWithOptions(request *CancelUrlUploadJobsRequest, runtime *util.RuntimeOptions) (_result *CancelUrlUploadJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.UploadUrls)) {
		query["UploadUrls"] = request.UploadUrls
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CancelUrlUploadJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CancelUrlUploadJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelUrlUploadJobs(request *CancelUrlUploadJobsRequest) (_result *CancelUrlUploadJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelUrlUploadJobsResponse{}
	_body, _err := client.CancelUrlUploadJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateAuditWithOptions(request *CreateAuditRequest, runtime *util.RuntimeOptions) (_result *CreateAuditResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.AuditContent)) {
		query["AuditContent"] = request.AuditContent
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAudit"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAuditResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateAudit(request *CreateAuditRequest) (_result *CreateAuditResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAuditResponse{}
	_body, _err := client.CreateAuditWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateCustomTemplateWithOptions(request *CreateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateCustomTemplate(request *CreateCustomTemplateRequest) (_result *CreateCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCustomTemplateResponse{}
	_body, _err := client.CreateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateEditingProjectWithOptions(request *CreateEditingProjectRequest, runtime *util.RuntimeOptions) (_result *CreateEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessConfig)) {
		query["BusinessConfig"] = request.BusinessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialMaps)) {
		query["MaterialMaps"] = request.MaterialMaps
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectType)) {
		query["ProjectType"] = request.ProjectType
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		query["Timeline"] = request.Timeline
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateEditingProject(request *CreateEditingProjectRequest) (_result *CreateEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEditingProjectResponse{}
	_body, _err := client.CreateEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLiveRecordTemplateWithOptions(tmpReq *CreateLiveRecordTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateLiveRecordTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &CreateLiveRecordTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.RecordFormat)) {
		request.RecordFormatShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.RecordFormat, tea.String("RecordFormat"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RecordFormatShrink)) {
		body["RecordFormat"] = request.RecordFormatShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateLiveRecordTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateLiveRecordTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLiveRecordTemplate(request *CreateLiveRecordTemplateRequest) (_result *CreateLiveRecordTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLiveRecordTemplateResponse{}
	_body, _err := client.CreateLiveRecordTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreatePipelineWithOptions(request *CreatePipelineRequest, runtime *util.RuntimeOptions) (_result *CreatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Speed)) {
		query["Speed"] = request.Speed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreatePipeline(request *CreatePipelineRequest) (_result *CreatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePipelineResponse{}
	_body, _err := client.CreatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUploadMediaWithOptions(request *CreateUploadMediaRequest, runtime *util.RuntimeOptions) (_result *CreateUploadMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.FileInfo)) {
		query["FileInfo"] = request.FileInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetaData)) {
		query["MediaMetaData"] = request.MediaMetaData
	}

	if !tea.BoolValue(util.IsUnset(request.PostProcessConfig)) {
		query["PostProcessConfig"] = request.PostProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadTargetConfig)) {
		query["UploadTargetConfig"] = request.UploadTargetConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUploadMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUploadMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUploadMedia(request *CreateUploadMediaRequest) (_result *CreateUploadMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUploadMediaResponse{}
	_body, _err := client.CreateUploadMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUploadStreamWithOptions(request *CreateUploadStreamRequest, runtime *util.RuntimeOptions) (_result *CreateUploadStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.FileExtension)) {
		query["FileExtension"] = request.FileExtension
	}

	if !tea.BoolValue(util.IsUnset(request.HDRType)) {
		query["HDRType"] = request.HDRType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateUploadStream"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateUploadStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUploadStream(request *CreateUploadStreamRequest) (_result *CreateUploadStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUploadStreamResponse{}
	_body, _err := client.CreateUploadStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCategoryWithOptions(request *DeleteCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCategory(request *DeleteCategoryRequest) (_result *DeleteCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.DeleteCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCustomTemplateWithOptions(request *DeleteCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCustomTemplate(request *DeleteCustomTemplateRequest) (_result *DeleteCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCustomTemplateResponse{}
	_body, _err := client.DeleteCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEditingProjectMaterialsWithOptions(request *DeleteEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *DeleteEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MaterialIds)) {
		query["MaterialIds"] = request.MaterialIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaterialType)) {
		query["MaterialType"] = request.MaterialType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEditingProjectMaterials(request *DeleteEditingProjectMaterialsRequest) (_result *DeleteEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEditingProjectMaterialsResponse{}
	_body, _err := client.DeleteEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteEditingProjectsWithOptions(request *DeleteEditingProjectsRequest, runtime *util.RuntimeOptions) (_result *DeleteEditingProjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectIds)) {
		query["ProjectIds"] = request.ProjectIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteEditingProjects"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteEditingProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteEditingProjects(request *DeleteEditingProjectsRequest) (_result *DeleteEditingProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteEditingProjectsResponse{}
	_body, _err := client.DeleteEditingProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveTranscodeJobWithOptions(request *DeleteLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveTranscodeJob(request *DeleteLiveTranscodeJobRequest) (_result *DeleteLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveTranscodeJobResponse{}
	_body, _err := client.DeleteLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLiveTranscodeTemplateWithOptions(request *DeleteLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLiveTranscodeTemplate(request *DeleteLiveTranscodeTemplateRequest) (_result *DeleteLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLiveTranscodeTemplateResponse{}
	_body, _err := client.DeleteLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMediaInfosWithOptions(request *DeleteMediaInfosRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputURLs)) {
		query["InputURLs"] = request.InputURLs
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMediaInfos(request *DeleteMediaInfosRequest) (_result *DeleteMediaInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaInfosResponse{}
	_body, _err := client.DeleteMediaInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMediaProducingJobsWithOptions(request *DeleteMediaProducingJobsRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaProducingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		body["JobIds"] = request.JobIds
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteMediaProducingJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteMediaProducingJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMediaProducingJobs(request *DeleteMediaProducingJobsRequest) (_result *DeleteMediaProducingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaProducingJobsResponse{}
	_body, _err := client.DeleteMediaProducingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePipelineWithOptions(request *DeletePipelineRequest, runtime *util.RuntimeOptions) (_result *DeletePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePipeline(request *DeletePipelineRequest) (_result *DeletePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePipelineResponse{}
	_body, _err := client.DeletePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePlayInfoWithOptions(request *DeletePlayInfoRequest, runtime *util.RuntimeOptions) (_result *DeletePlayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileURLs)) {
		query["FileURLs"] = request.FileURLs
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeletePlayInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeletePlayInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePlayInfo(request *DeletePlayInfoRequest) (_result *DeletePlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePlayInfoResponse{}
	_body, _err := client.DeletePlayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSmartJobWithOptions(request *DeleteSmartJobRequest, runtime *util.RuntimeOptions) (_result *DeleteSmartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteSmartJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteSmartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSmartJob(request *DeleteSmartJobRequest) (_result *DeleteSmartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmartJobResponse{}
	_body, _err := client.DeleteSmartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTemplateWithOptions(request *DeleteTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTemplate(request *DeleteTemplateRequest) (_result *DeleteTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.DeleteTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeBizUserTypeWithOptions(request *DescribeBizUserTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeBizUserTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBizUserType"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBizUserTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeBizUserType(request *DescribeBizUserTypeRequest) (_result *DescribeBizUserTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBizUserTypeResponse{}
	_body, _err := client.DescribeBizUserTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFilterConfigsWithOptions(request *DescribeFilterConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeFilterConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFilterConfigs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFilterConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFilterConfigs(request *DescribeFilterConfigsRequest) (_result *DescribeFilterConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFilterConfigsResponse{}
	_body, _err := client.DescribeFilterConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLivePubExperienceMetricDataWithOptions(request *DescribeLivePubExperienceMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLivePubExperienceMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PubProtocol)) {
		query["PubProtocol"] = request.PubProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLivePubExperienceMetricData"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLivePubExperienceMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLivePubExperienceMetricData(request *DescribeLivePubExperienceMetricDataRequest) (_result *DescribeLivePubExperienceMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLivePubExperienceMetricDataResponse{}
	_body, _err := client.DescribeLivePubExperienceMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLivePubListWithOptions(request *DescribeLivePubListRequest, runtime *util.RuntimeOptions) (_result *DescribeLivePubListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PageNum)) {
		query["PageNum"] = request.PageNum
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PubProtocol)) {
		query["PubProtocol"] = request.PubProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLivePubList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLivePubListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLivePubList(request *DescribeLivePubListRequest) (_result *DescribeLivePubListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLivePubListResponse{}
	_body, _err := client.DescribeLivePubListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLivePubMetricDataWithOptions(request *DescribeLivePubMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLivePubMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ExperienceLevel)) {
		query["ExperienceLevel"] = request.ExperienceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PubProtocol)) {
		query["PubProtocol"] = request.PubProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.SdkVersion)) {
		query["SdkVersion"] = request.SdkVersion
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLivePubMetricData"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLivePubMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLivePubMetricData(request *DescribeLivePubMetricDataRequest) (_result *DescribeLivePubMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLivePubMetricDataResponse{}
	_body, _err := client.DescribeLivePubMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSubExperienceMetricDataWithOptions(request *DescribeLiveSubExperienceMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSubExperienceMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ExperienceLevel)) {
		query["ExperienceLevel"] = request.ExperienceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.SubProtocol)) {
		query["SubProtocol"] = request.SubProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveSubExperienceMetricData"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveSubExperienceMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSubExperienceMetricData(request *DescribeLiveSubExperienceMetricDataRequest) (_result *DescribeLiveSubExperienceMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSubExperienceMetricDataResponse{}
	_body, _err := client.DescribeLiveSubExperienceMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSubListWithOptions(request *DescribeLiveSubListRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSubListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ExperienceLevel)) {
		query["ExperienceLevel"] = request.ExperienceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ItemConfigs)) {
		query["ItemConfigs"] = request.ItemConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Network)) {
		query["Network"] = request.Network
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.SubProtocol)) {
		query["SubProtocol"] = request.SubProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveSubList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveSubListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSubList(request *DescribeLiveSubListRequest) (_result *DescribeLiveSubListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSubListResponse{}
	_body, _err := client.DescribeLiveSubListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLiveSubMetricDataWithOptions(request *DescribeLiveSubMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribeLiveSubMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ExperienceLevel)) {
		query["ExperienceLevel"] = request.ExperienceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ItemConfigs)) {
		query["ItemConfigs"] = request.ItemConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Network)) {
		query["Network"] = request.Network
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.SdkVersion)) {
		query["SdkVersion"] = request.SdkVersion
	}

	if !tea.BoolValue(util.IsUnset(request.StreamName)) {
		query["StreamName"] = request.StreamName
	}

	if !tea.BoolValue(util.IsUnset(request.SubProtocol)) {
		query["SubProtocol"] = request.SubProtocol
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLiveSubMetricData"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLiveSubMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLiveSubMetricData(request *DescribeLiveSubMetricDataRequest) (_result *DescribeLiveSubMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLiveSubMetricDataResponse{}
	_body, _err := client.DescribeLiveSubMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeterIceEditUsageWithOptions(request *DescribeMeterIceEditUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterIceEditUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterIceEditUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterIceEditUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeterIceEditUsage(request *DescribeMeterIceEditUsageRequest) (_result *DescribeMeterIceEditUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterIceEditUsageResponse{}
	_body, _err := client.DescribeMeterIceEditUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeterIceLiveMediaConvertUsageWithOptions(request *DescribeMeterIceLiveMediaConvertUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterIceLiveMediaConvertUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterIceLiveMediaConvertUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterIceLiveMediaConvertUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeterIceLiveMediaConvertUsage(request *DescribeMeterIceLiveMediaConvertUsageRequest) (_result *DescribeMeterIceLiveMediaConvertUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterIceLiveMediaConvertUsageResponse{}
	_body, _err := client.DescribeMeterIceLiveMediaConvertUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeterIceMediaConvertUHDUsageWithOptions(request *DescribeMeterIceMediaConvertUHDUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterIceMediaConvertUHDUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterIceMediaConvertUHDUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterIceMediaConvertUHDUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeterIceMediaConvertUHDUsage(request *DescribeMeterIceMediaConvertUHDUsageRequest) (_result *DescribeMeterIceMediaConvertUHDUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterIceMediaConvertUHDUsageResponse{}
	_body, _err := client.DescribeMeterIceMediaConvertUHDUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeterIceMediaConvertUsageWithOptions(request *DescribeMeterIceMediaConvertUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterIceMediaConvertUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterIceMediaConvertUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterIceMediaConvertUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeterIceMediaConvertUsage(request *DescribeMeterIceMediaConvertUsageRequest) (_result *DescribeMeterIceMediaConvertUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterIceMediaConvertUsageResponse{}
	_body, _err := client.DescribeMeterIceMediaConvertUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeterIceMpsAiUsageWithOptions(request *DescribeMeterIceMpsAiUsageRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterIceMpsAiUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterIceMpsAiUsage"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterIceMpsAiUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeterIceMpsAiUsage(request *DescribeMeterIceMpsAiUsageRequest) (_result *DescribeMeterIceMpsAiUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterIceMpsAiUsageResponse{}
	_body, _err := client.DescribeMeterIceMpsAiUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMeterIceSummaryWithOptions(request *DescribeMeterIceSummaryRequest, runtime *util.RuntimeOptions) (_result *DescribeMeterIceSummaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartTs)) {
		query["StartTs"] = request.StartTs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMeterIceSummary"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMeterIceSummaryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMeterIceSummary(request *DescribeMeterIceSummaryRequest) (_result *DescribeMeterIceSummaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMeterIceSummaryResponse{}
	_body, _err := client.DescribeMeterIceSummaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePalyDetailWithOptions(request *DescribePalyDetailRequest, runtime *util.RuntimeOptions) (_result *DescribePalyDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		query["TraceId"] = request.TraceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePalyDetail"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePalyDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePalyDetail(request *DescribePalyDetailRequest) (_result *DescribePalyDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePalyDetailResponse{}
	_body, _err := client.DescribePalyDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePalyEventListWithOptions(request *DescribePalyEventListRequest, runtime *util.RuntimeOptions) (_result *DescribePalyEventListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		query["TraceId"] = request.TraceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePalyEventList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePalyEventListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePalyEventList(request *DescribePalyEventListRequest) (_result *DescribePalyEventListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePalyEventListResponse{}
	_body, _err := client.DescribePalyEventListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePalyListWithOptions(request *DescribePalyListRequest, runtime *util.RuntimeOptions) (_result *DescribePalyListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.OrderName)) {
		query["OrderName"] = request.OrderName
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PlayType)) {
		query["PlayType"] = request.PlayType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		query["TraceId"] = request.TraceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePalyList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePalyListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePalyList(request *DescribePalyListRequest) (_result *DescribePalyListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePalyListResponse{}
	_body, _err := client.DescribePalyListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePlayExperienceMetricDataWithOptions(request *DescribePlayExperienceMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribePlayExperienceMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ExperienceLevel)) {
		query["ExperienceLevel"] = request.ExperienceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlayExperienceMetricData"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePlayExperienceMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePlayExperienceMetricData(request *DescribePlayExperienceMetricDataRequest) (_result *DescribePlayExperienceMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePlayExperienceMetricDataResponse{}
	_body, _err := client.DescribePlayExperienceMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePlayFirstFrameDurationMetricDataWithOptions(request *DescribePlayFirstFrameDurationMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribePlayFirstFrameDurationMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		query["TraceId"] = request.TraceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlayFirstFrameDurationMetricData"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePlayFirstFrameDurationMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePlayFirstFrameDurationMetricData(request *DescribePlayFirstFrameDurationMetricDataRequest) (_result *DescribePlayFirstFrameDurationMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePlayFirstFrameDurationMetricDataResponse{}
	_body, _err := client.DescribePlayFirstFrameDurationMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePlayMetricDataWithOptions(request *DescribePlayMetricDataRequest, runtime *util.RuntimeOptions) (_result *DescribePlayMetricDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ExperienceLevel)) {
		query["ExperienceLevel"] = request.ExperienceLevel
	}

	if !tea.BoolValue(util.IsUnset(request.ItemConfigs)) {
		query["ItemConfigs"] = request.ItemConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Network)) {
		query["Network"] = request.Network
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.SdkVersion)) {
		query["SdkVersion"] = request.SdkVersion
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlayMetricData"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePlayMetricDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePlayMetricData(request *DescribePlayMetricDataRequest) (_result *DescribePlayMetricDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePlayMetricDataResponse{}
	_body, _err := client.DescribePlayMetricDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePlayQoeListWithOptions(request *DescribePlayQoeListRequest, runtime *util.RuntimeOptions) (_result *DescribePlayQoeListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ItemConfigs)) {
		query["ItemConfigs"] = request.ItemConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Network)) {
		query["Network"] = request.Network
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlayQoeList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePlayQoeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePlayQoeList(request *DescribePlayQoeListRequest) (_result *DescribePlayQoeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePlayQoeListResponse{}
	_body, _err := client.DescribePlayQoeListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribePlayQosListWithOptions(request *DescribePlayQosListRequest, runtime *util.RuntimeOptions) (_result *DescribePlayQosListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppName)) {
		query["AppName"] = request.AppName
	}

	if !tea.BoolValue(util.IsUnset(request.BeginTs)) {
		query["BeginTs"] = request.BeginTs
	}

	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.EndTs)) {
		query["EndTs"] = request.EndTs
	}

	if !tea.BoolValue(util.IsUnset(request.ItemConfigs)) {
		query["ItemConfigs"] = request.ItemConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.MetricType)) {
		query["MetricType"] = request.MetricType
	}

	if !tea.BoolValue(util.IsUnset(request.Network)) {
		query["Network"] = request.Network
	}

	if !tea.BoolValue(util.IsUnset(request.Os)) {
		query["Os"] = request.Os
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.TerminalType)) {
		query["TerminalType"] = request.TerminalType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePlayQosList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePlayQosListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribePlayQosList(request *DescribePlayQosListRequest) (_result *DescribePlayQosListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePlayQosListResponse{}
	_body, _err := client.DescribePlayQosListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeQueryConfigsWithOptions(request *DescribeQueryConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribeQueryConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQueryConfigs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQueryConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeQueryConfigs(request *DescribeQueryConfigsRequest) (_result *DescribeQueryConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQueryConfigsResponse{}
	_body, _err := client.DescribeQueryConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DownloadResourceByResourceIdsWithOptions(request *DownloadResourceByResourceIdsRequest, runtime *util.RuntimeOptions) (_result *DownloadResourceByResourceIdsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceIds)) {
		query["ResourceIds"] = request.ResourceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadResourceByResourceIds"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadResourceByResourceIdsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DownloadResourceByResourceIds(request *DownloadResourceByResourceIdsRequest) (_result *DownloadResourceByResourceIdsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadResourceByResourceIdsResponse{}
	_body, _err := client.DownloadResourceByResourceIdsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetAuditConfigWithOptions(request *GetAuditConfigRequest, runtime *util.RuntimeOptions) (_result *GetAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAuditConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetAuditConfig(request *GetAuditConfigRequest) (_result *GetAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAuditConfigResponse{}
	_body, _err := client.GetAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCategoriesWithOptions(request *GetCategoriesRequest, runtime *util.RuntimeOptions) (_result *GetCategoriesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCategories"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCategoriesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCategories(request *GetCategoriesRequest) (_result *GetCategoriesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCategoriesResponse{}
	_body, _err := client.GetCategoriesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetClientConfigWithOptions(request *GetClientConfigRequest, runtime *util.RuntimeOptions) (_result *GetClientConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.PkgName)) {
		query["PkgName"] = request.PkgName
	}

	if !tea.BoolValue(util.IsUnset(request.PkgSignature)) {
		query["PkgSignature"] = request.PkgSignature
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetClientConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetClientConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetClientConfig(request *GetClientConfigRequest) (_result *GetClientConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetClientConfigResponse{}
	_body, _err := client.GetClientConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetCustomTemplateWithOptions(request *GetCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *GetCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetCustomTemplate(request *GetCustomTemplateRequest) (_result *GetCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetCustomTemplateResponse{}
	_body, _err := client.GetCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDefaultStorageLocationWithOptions(runtime *util.RuntimeOptions) (_result *GetDefaultStorageLocationResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetDefaultStorageLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDefaultStorageLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDefaultStorageLocation() (_result *GetDefaultStorageLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDefaultStorageLocationResponse{}
	_body, _err := client.GetDefaultStorageLocationWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetDynamicImageJobWithOptions(request *GetDynamicImageJobRequest, runtime *util.RuntimeOptions) (_result *GetDynamicImageJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDynamicImageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDynamicImageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetDynamicImageJob(request *GetDynamicImageJobRequest) (_result *GetDynamicImageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDynamicImageJobResponse{}
	_body, _err := client.GetDynamicImageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEditingProjectWithOptions(request *GetEditingProjectRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEditingProject(request *GetEditingProjectRequest) (_result *GetEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEditingProjectResponse{}
	_body, _err := client.GetEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEditingProjectMaterialsWithOptions(request *GetEditingProjectMaterialsRequest, runtime *util.RuntimeOptions) (_result *GetEditingProjectMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEditingProjectMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEditingProjectMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEditingProjectMaterials(request *GetEditingProjectMaterialsRequest) (_result *GetEditingProjectMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEditingProjectMaterialsResponse{}
	_body, _err := client.GetEditingProjectMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEventCallbackWithOptions(runtime *util.RuntimeOptions) (_result *GetEventCallbackResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetEventCallback"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEventCallback() (_result *GetEventCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventCallbackResponse{}
	_body, _err := client.GetEventCallbackWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLiveEditingIndexFileWithOptions(request *GetLiveEditingIndexFileRequest, runtime *util.RuntimeOptions) (_result *GetLiveEditingIndexFileResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveEditingIndexFile"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveEditingIndexFileResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLiveEditingIndexFile(request *GetLiveEditingIndexFileRequest) (_result *GetLiveEditingIndexFileResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveEditingIndexFileResponse{}
	_body, _err := client.GetLiveEditingIndexFileWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLiveEditingJobWithOptions(request *GetLiveEditingJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveEditingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveEditingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveEditingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLiveEditingJob(request *GetLiveEditingJobRequest) (_result *GetLiveEditingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveEditingJobResponse{}
	_body, _err := client.GetLiveEditingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLiveTranscodeJobWithOptions(request *GetLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *GetLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLiveTranscodeJob(request *GetLiveTranscodeJobRequest) (_result *GetLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveTranscodeJobResponse{}
	_body, _err := client.GetLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLiveTranscodeTemplateWithOptions(request *GetLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *GetLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLiveTranscodeTemplate(request *GetLiveTranscodeTemplateRequest) (_result *GetLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLiveTranscodeTemplateResponse{}
	_body, _err := client.GetLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMediaAuditResultWithOptions(request *GetMediaAuditResultRequest, runtime *util.RuntimeOptions) (_result *GetMediaAuditResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaAuditResult"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaAuditResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMediaAuditResult(request *GetMediaAuditResultRequest) (_result *GetMediaAuditResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaAuditResultResponse{}
	_body, _err := client.GetMediaAuditResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMediaAuditResultDetailWithOptions(request *GetMediaAuditResultDetailRequest, runtime *util.RuntimeOptions) (_result *GetMediaAuditResultDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaAuditResultDetail"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaAuditResultDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMediaAuditResultDetail(request *GetMediaAuditResultDetailRequest) (_result *GetMediaAuditResultDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaAuditResultDetailResponse{}
	_body, _err := client.GetMediaAuditResultDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMediaInfoWithOptions(request *GetMediaInfoRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.OutputType)) {
		query["OutputType"] = request.OutputType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMediaInfo(request *GetMediaInfoRequest) (_result *GetMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaInfoResponse{}
	_body, _err := client.GetMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMediaInfoJobWithOptions(request *GetMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *GetMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMediaInfoJob(request *GetMediaInfoJobRequest) (_result *GetMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaInfoJobResponse{}
	_body, _err := client.GetMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetMediaProducingJobWithOptions(request *GetMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *GetMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetMediaProducingJob(request *GetMediaProducingJobRequest) (_result *GetMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMediaProducingJobResponse{}
	_body, _err := client.GetMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPipelineWithOptions(request *GetPipelineRequest, runtime *util.RuntimeOptions) (_result *GetPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPipeline(request *GetPipelineRequest) (_result *GetPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPipelineResponse{}
	_body, _err := client.GetPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPlayInfoWithOptions(request *GetPlayInfoRequest, runtime *util.RuntimeOptions) (_result *GetPlayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPlayInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPlayInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPlayInfo(request *GetPlayInfoRequest) (_result *GetPlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPlayInfoResponse{}
	_body, _err := client.GetPlayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPublicMediaInfoWithOptions(request *GetPublicMediaInfoRequest, runtime *util.RuntimeOptions) (_result *GetPublicMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPublicMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPublicMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPublicMediaInfo(request *GetPublicMediaInfoRequest) (_result *GetPublicMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPublicMediaInfoResponse{}
	_body, _err := client.GetPublicMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSmartHandleJobWithOptions(request *GetSmartHandleJobRequest, runtime *util.RuntimeOptions) (_result *GetSmartHandleJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSmartHandleJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSmartHandleJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSmartHandleJob(request *GetSmartHandleJobRequest) (_result *GetSmartHandleJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSmartHandleJobResponse{}
	_body, _err := client.GetSmartHandleJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSnapshotJobWithOptions(request *GetSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *GetSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSnapshotJob(request *GetSnapshotJobRequest) (_result *GetSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSnapshotJobResponse{}
	_body, _err := client.GetSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSnapshotUrlsWithOptions(request *GetSnapshotUrlsRequest, runtime *util.RuntimeOptions) (_result *GetSnapshotUrlsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Timeout)) {
		query["Timeout"] = request.Timeout
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSnapshotUrls"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSnapshotUrlsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSnapshotUrls(request *GetSnapshotUrlsRequest) (_result *GetSnapshotUrlsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSnapshotUrlsResponse{}
	_body, _err := client.GetSnapshotUrlsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetSystemTemplateWithOptions(request *GetSystemTemplateRequest, runtime *util.RuntimeOptions) (_result *GetSystemTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSystemTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSystemTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetSystemTemplate(request *GetSystemTemplateRequest) (_result *GetSystemTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSystemTemplateResponse{}
	_body, _err := client.GetSystemTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTemplateWithOptions(request *GetTemplateRequest, runtime *util.RuntimeOptions) (_result *GetTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTemplate(request *GetTemplateRequest) (_result *GetTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateResponse{}
	_body, _err := client.GetTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTemplateMaterialsWithOptions(request *GetTemplateMaterialsRequest, runtime *util.RuntimeOptions) (_result *GetTemplateMaterialsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTemplateMaterials"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplateMaterialsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTemplateMaterials(request *GetTemplateMaterialsRequest) (_result *GetTemplateMaterialsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplateMaterialsResponse{}
	_body, _err := client.GetTemplateMaterialsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetTranscodeJobWithOptions(request *GetTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *GetTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetTranscodeJob(request *GetTranscodeJobRequest) (_result *GetTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTranscodeJobResponse{}
	_body, _err := client.GetTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUrlUploadInfosWithOptions(request *GetUrlUploadInfosRequest, runtime *util.RuntimeOptions) (_result *GetUrlUploadInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.UploadURLs)) {
		query["UploadURLs"] = request.UploadURLs
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetUrlUploadInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetUrlUploadInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUrlUploadInfos(request *GetUrlUploadInfosRequest) (_result *GetUrlUploadInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUrlUploadInfosResponse{}
	_body, _err := client.GetUrlUploadInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAllPublicMediaTagsWithOptions(request *ListAllPublicMediaTagsRequest, runtime *util.RuntimeOptions) (_result *ListAllPublicMediaTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListAllPublicMediaTags"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListAllPublicMediaTagsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAllPublicMediaTags(request *ListAllPublicMediaTagsRequest) (_result *ListAllPublicMediaTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllPublicMediaTagsResponse{}
	_body, _err := client.ListAllPublicMediaTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCustomTemplatesWithOptions(request *ListCustomTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListCustomTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListCustomTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListCustomTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCustomTemplates(request *ListCustomTemplatesRequest) (_result *ListCustomTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomTemplatesResponse{}
	_body, _err := client.ListCustomTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDynamicImageJobsWithOptions(request *ListDynamicImageJobsRequest, runtime *util.RuntimeOptions) (_result *ListDynamicImageJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListDynamicImageJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListDynamicImageJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDynamicImageJobs(request *ListDynamicImageJobsRequest) (_result *ListDynamicImageJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDynamicImageJobsResponse{}
	_body, _err := client.ListDynamicImageJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveRecordTemplatesWithOptions(request *ListLiveRecordTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveRecordTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveRecordTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveRecordTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveRecordTemplates(request *ListLiveRecordTemplatesRequest) (_result *ListLiveRecordTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveRecordTemplatesResponse{}
	_body, _err := client.ListLiveRecordTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveTranscodeJobsWithOptions(request *ListLiveTranscodeJobsRequest, runtime *util.RuntimeOptions) (_result *ListLiveTranscodeJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartMode)) {
		query["StartMode"] = request.StartMode
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveTranscodeJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveTranscodeJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveTranscodeJobs(request *ListLiveTranscodeJobsRequest) (_result *ListLiveTranscodeJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveTranscodeJobsResponse{}
	_body, _err := client.ListLiveTranscodeJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLiveTranscodeTemplatesWithOptions(request *ListLiveTranscodeTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListLiveTranscodeTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.KeyWord)) {
		query["KeyWord"] = request.KeyWord
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.VideoCodec)) {
		query["VideoCodec"] = request.VideoCodec
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListLiveTranscodeTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListLiveTranscodeTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLiveTranscodeTemplates(request *ListLiveTranscodeTemplatesRequest) (_result *ListLiveTranscodeTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLiveTranscodeTemplatesResponse{}
	_body, _err := client.ListLiveTranscodeTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMediaBasicInfosWithOptions(request *ListMediaBasicInfosRequest, runtime *util.RuntimeOptions) (_result *ListMediaBasicInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.IncludeFileBasicInfo)) {
		query["IncludeFileBasicInfo"] = request.IncludeFileBasicInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaBasicInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaBasicInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMediaBasicInfos(request *ListMediaBasicInfosRequest) (_result *ListMediaBasicInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaBasicInfosResponse{}
	_body, _err := client.ListMediaBasicInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMediaInfoJobsWithOptions(request *ListMediaInfoJobsRequest, runtime *util.RuntimeOptions) (_result *ListMediaInfoJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListMediaInfoJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListMediaInfoJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMediaInfoJobs(request *ListMediaInfoJobsRequest) (_result *ListMediaInfoJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaInfoJobsResponse{}
	_body, _err := client.ListMediaInfoJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPipelinesWithOptions(request *ListPipelinesRequest, runtime *util.RuntimeOptions) (_result *ListPipelinesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Speed)) {
		query["Speed"] = request.Speed
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPipelines"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPipelinesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPipelines(request *ListPipelinesRequest) (_result *ListPipelinesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPipelinesResponse{}
	_body, _err := client.ListPipelinesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPublicMediaBasicInfosWithOptions(request *ListPublicMediaBasicInfosRequest, runtime *util.RuntimeOptions) (_result *ListPublicMediaBasicInfosResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IncludeFileBasicInfo)) {
		query["IncludeFileBasicInfo"] = request.IncludeFileBasicInfo
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTagId)) {
		query["MediaTagId"] = request.MediaTagId
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListPublicMediaBasicInfos"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListPublicMediaBasicInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPublicMediaBasicInfos(request *ListPublicMediaBasicInfosRequest) (_result *ListPublicMediaBasicInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPublicMediaBasicInfosResponse{}
	_body, _err := client.ListPublicMediaBasicInfosWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSmartJobsWithOptions(request *ListSmartJobsRequest, runtime *util.RuntimeOptions) (_result *ListSmartJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSmartJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSmartJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSmartJobs(request *ListSmartJobsRequest) (_result *ListSmartJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSmartJobsResponse{}
	_body, _err := client.ListSmartJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSnapshotJobsWithOptions(request *ListSnapshotJobsRequest, runtime *util.RuntimeOptions) (_result *ListSnapshotJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSnapshotJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSnapshotJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSnapshotJobs(request *ListSnapshotJobsRequest) (_result *ListSnapshotJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSnapshotJobsResponse{}
	_body, _err := client.ListSnapshotJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSystemTemplatesWithOptions(request *ListSystemTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListSystemTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Subtype)) {
		query["Subtype"] = request.Subtype
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListSystemTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListSystemTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSystemTemplates(request *ListSystemTemplatesRequest) (_result *ListSystemTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSystemTemplatesResponse{}
	_body, _err := client.ListSystemTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTemplatesWithOptions(request *ListTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateSource)) {
		query["CreateSource"] = request.CreateSource
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortType)) {
		query["SortType"] = request.SortType
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTemplates"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTemplates(request *ListTemplatesRequest) (_result *ListTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTemplatesResponse{}
	_body, _err := client.ListTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTranscodeJobsWithOptions(request *ListTranscodeJobsRequest, runtime *util.RuntimeOptions) (_result *ListTranscodeJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndOfCreateTime)) {
		query["EndOfCreateTime"] = request.EndOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartOfCreateTime)) {
		query["StartOfCreateTime"] = request.StartOfCreateTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTranscodeJobs"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTranscodeJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTranscodeJobs(request *ListTranscodeJobsRequest) (_result *ListTranscodeJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTranscodeJobsResponse{}
	_body, _err := client.ListTranscodeJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) NotifyPreOssUploadCompleteWithOptions(request *NotifyPreOssUploadCompleteRequest, runtime *util.RuntimeOptions) (_result *NotifyPreOssUploadCompleteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FileName)) {
		query["FileName"] = request.FileName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("NotifyPreOssUploadComplete"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &NotifyPreOssUploadCompleteResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) NotifyPreOssUploadComplete(request *NotifyPreOssUploadCompleteRequest) (_result *NotifyPreOssUploadCompleteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &NotifyPreOssUploadCompleteResponse{}
	_body, _err := client.NotifyPreOssUploadCompleteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCensorJobListWithOptions(request *QueryCensorJobListRequest, runtime *util.RuntimeOptions) (_result *QueryCensorJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobIds)) {
		query["JobIds"] = request.JobIds
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryCensorJobList"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryCensorJobListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCensorJobList(request *QueryCensorJobListRequest) (_result *QueryCensorJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCensorJobListResponse{}
	_body, _err := client.QueryCensorJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryIProductionJobWithOptions(request *QueryIProductionJobRequest, runtime *util.RuntimeOptions) (_result *QueryIProductionJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryIProductionJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryIProductionJob(request *QueryIProductionJobRequest) (_result *QueryIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.QueryIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaCensorJobDetailWithOptions(request *QueryMediaCensorJobDetailRequest, runtime *util.RuntimeOptions) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.MaximumPageSize)) {
		query["MaximumPageSize"] = request.MaximumPageSize
	}

	if !tea.BoolValue(util.IsUnset(request.NextPageToken)) {
		query["NextPageToken"] = request.NextPageToken
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerAccount)) {
		query["OwnerAccount"] = request.OwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.OwnerId)) {
		query["OwnerId"] = request.OwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerAccount)) {
		query["ResourceOwnerAccount"] = request.ResourceOwnerAccount
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMediaCensorJobDetail"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaCensorJobDetail(request *QueryMediaCensorJobDetailRequest) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.QueryMediaCensorJobDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefreshUploadMediaWithOptions(request *RefreshUploadMediaRequest, runtime *util.RuntimeOptions) (_result *RefreshUploadMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefreshUploadMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefreshUploadMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefreshUploadMedia(request *RefreshUploadMediaRequest) (_result *RefreshUploadMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshUploadMediaResponse{}
	_body, _err := client.RefreshUploadMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterMediaInfoWithOptions(request *RegisterMediaInfoRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTags)) {
		query["MediaTags"] = request.MediaTags
	}

	if !tea.BoolValue(util.IsUnset(request.MediaType)) {
		query["MediaType"] = request.MediaType
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.RegisterConfig)) {
		query["RegisterConfig"] = request.RegisterConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterMediaInfo(request *RegisterMediaInfoRequest) (_result *RegisterMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaInfoResponse{}
	_body, _err := client.RegisterMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterMediaStreamWithOptions(request *RegisterMediaStreamRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaStreamResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RegisterMediaStream"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RegisterMediaStreamResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterMediaStream(request *RegisterMediaStreamRequest) (_result *RegisterMediaStreamResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaStreamResponse{}
	_body, _err := client.RegisterMediaStreamWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchEditingProjectWithOptions(request *SearchEditingProjectRequest, runtime *util.RuntimeOptions) (_result *SearchEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CreateSource)) {
		query["CreateSource"] = request.CreateSource
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.MaxResults)) {
		query["MaxResults"] = request.MaxResults
	}

	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectType)) {
		query["ProjectType"] = request.ProjectType
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateType)) {
		query["TemplateType"] = request.TemplateType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchEditingProject(request *SearchEditingProjectRequest) (_result *SearchEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchEditingProjectResponse{}
	_body, _err := client.SearchEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchMediaWithOptions(request *SearchMediaRequest, runtime *util.RuntimeOptions) (_result *SearchMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.Match)) {
		query["Match"] = request.Match
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchMedia"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchMediaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchMedia(request *SearchMediaRequest) (_result *SearchMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaResponse{}
	_body, _err := client.SearchMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchPublicMediaInfoWithOptions(request *SearchPublicMediaInfoRequest, runtime *util.RuntimeOptions) (_result *SearchPublicMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Authorized)) {
		query["Authorized"] = request.Authorized
	}

	if !tea.BoolValue(util.IsUnset(request.DynamicMetaDataMatchFields)) {
		query["DynamicMetaDataMatchFields"] = request.DynamicMetaDataMatchFields
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.Favorite)) {
		query["Favorite"] = request.Favorite
	}

	if !tea.BoolValue(util.IsUnset(request.MediaIds)) {
		query["MediaIds"] = request.MediaIds
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SortBy)) {
		query["SortBy"] = request.SortBy
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SearchPublicMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SearchPublicMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchPublicMediaInfo(request *SearchPublicMediaInfoRequest) (_result *SearchPublicMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchPublicMediaInfoResponse{}
	_body, _err := client.SearchPublicMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SendLiveTranscodeJobCommandWithOptions(request *SendLiveTranscodeJobCommandRequest, runtime *util.RuntimeOptions) (_result *SendLiveTranscodeJobCommandResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Command)) {
		query["Command"] = request.Command
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SendLiveTranscodeJobCommand"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SendLiveTranscodeJobCommandResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SendLiveTranscodeJobCommand(request *SendLiveTranscodeJobCommandRequest) (_result *SendLiveTranscodeJobCommandResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SendLiveTranscodeJobCommandResponse{}
	_body, _err := client.SendLiveTranscodeJobCommandWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetAuditConfigWithOptions(request *SetAuditConfigRequest, runtime *util.RuntimeOptions) (_result *SetAuditConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.Channel)) {
		query["Channel"] = request.Channel
	}

	if !tea.BoolValue(util.IsUnset(request.LegalSwitch)) {
		query["LegalSwitch"] = request.LegalSwitch
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetAuditConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetAuditConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetAuditConfig(request *SetAuditConfigRequest) (_result *SetAuditConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAuditConfigResponse{}
	_body, _err := client.SetAuditConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetClientConfigWithOptions(request *SetClientConfigRequest, runtime *util.RuntimeOptions) (_result *SetClientConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BundleId)) {
		query["BundleId"] = request.BundleId
	}

	if !tea.BoolValue(util.IsUnset(request.ClientUploadBucket)) {
		query["ClientUploadBucket"] = request.ClientUploadBucket
	}

	if !tea.BoolValue(util.IsUnset(request.ClientUploadPath)) {
		query["ClientUploadPath"] = request.ClientUploadPath
	}

	if !tea.BoolValue(util.IsUnset(request.ClientUploadStorageType)) {
		query["ClientUploadStorageType"] = request.ClientUploadStorageType
	}

	if !tea.BoolValue(util.IsUnset(request.PkgName)) {
		query["PkgName"] = request.PkgName
	}

	if !tea.BoolValue(util.IsUnset(request.PkgSignature)) {
		query["PkgSignature"] = request.PkgSignature
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetClientConfig"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetClientConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetClientConfig(request *SetClientConfigRequest) (_result *SetClientConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetClientConfigResponse{}
	_body, _err := client.SetClientConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDefaultCustomTemplateWithOptions(request *SetDefaultCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *SetDefaultCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDefaultCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDefaultCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDefaultCustomTemplate(request *SetDefaultCustomTemplateRequest) (_result *SetDefaultCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDefaultCustomTemplateResponse{}
	_body, _err := client.SetDefaultCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetDefaultStorageLocationWithOptions(request *SetDefaultStorageLocationRequest, runtime *util.RuntimeOptions) (_result *SetDefaultStorageLocationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bucket)) {
		query["Bucket"] = request.Bucket
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		query["Path"] = request.Path
	}

	if !tea.BoolValue(util.IsUnset(request.StorageType)) {
		query["StorageType"] = request.StorageType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetDefaultStorageLocation"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetDefaultStorageLocationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetDefaultStorageLocation(request *SetDefaultStorageLocationRequest) (_result *SetDefaultStorageLocationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetDefaultStorageLocationResponse{}
	_body, _err := client.SetDefaultStorageLocationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetEventCallbackWithOptions(request *SetEventCallbackRequest, runtime *util.RuntimeOptions) (_result *SetEventCallbackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthKey)) {
		query["AuthKey"] = request.AuthKey
	}

	if !tea.BoolValue(util.IsUnset(request.AuthSwitch)) {
		query["AuthSwitch"] = request.AuthSwitch
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackQueueName)) {
		query["CallbackQueueName"] = request.CallbackQueueName
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackType)) {
		query["CallbackType"] = request.CallbackType
	}

	if !tea.BoolValue(util.IsUnset(request.CallbackURL)) {
		query["CallbackURL"] = request.CallbackURL
	}

	if !tea.BoolValue(util.IsUnset(request.EventTypeList)) {
		query["EventTypeList"] = request.EventTypeList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetEventCallback"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetEventCallbackResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetEventCallback(request *SetEventCallbackRequest) (_result *SetEventCallbackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetEventCallbackResponse{}
	_body, _err := client.SetEventCallbackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitASRJobWithOptions(request *SubmitASRJobRequest, runtime *util.RuntimeOptions) (_result *SubmitASRJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.InputFile)) {
		query["InputFile"] = request.InputFile
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitASRJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitASRJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitASRJob(request *SubmitASRJobRequest) (_result *SubmitASRJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitASRJobResponse{}
	_body, _err := client.SubmitASRJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitAudioProduceJobWithOptions(request *SubmitAudioProduceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAudioProduceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		query["InputConfig"] = request.InputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Overwrite)) {
		query["Overwrite"] = request.Overwrite
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitAudioProduceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitAudioProduceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitAudioProduceJob(request *SubmitAudioProduceJobRequest) (_result *SubmitAudioProduceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAudioProduceJobResponse{}
	_body, _err := client.SubmitAudioProduceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitBatchMediaProducingJobWithOptions(request *SubmitBatchMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitBatchMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.EditingProduceConfig)) {
		query["EditingProduceConfig"] = request.EditingProduceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.JobTitle)) {
		query["JobTitle"] = request.JobTitle
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaTarget)) {
		query["OutputMediaTarget"] = request.OutputMediaTarget
	}

	if !tea.BoolValue(util.IsUnset(request.OutputNum)) {
		query["OutputNum"] = request.OutputNum
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectMetadata)) {
		query["ProjectMetadata"] = request.ProjectMetadata
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SubmitBy)) {
		query["SubmitBy"] = request.SubmitBy
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitBatchMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitBatchMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitBatchMediaProducingJob(request *SubmitBatchMediaProducingJobRequest) (_result *SubmitBatchMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitBatchMediaProducingJobResponse{}
	_body, _err := client.SubmitBatchMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitDynamicChartJobWithOptions(request *SubmitDynamicChartJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDynamicChartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AxisParams)) {
		query["AxisParams"] = request.AxisParams
	}

	if !tea.BoolValue(util.IsUnset(request.Background)) {
		query["Background"] = request.Background
	}

	if !tea.BoolValue(util.IsUnset(request.ChartConfig)) {
		query["ChartConfig"] = request.ChartConfig
	}

	if !tea.BoolValue(util.IsUnset(request.ChartTitle)) {
		query["ChartTitle"] = request.ChartTitle
	}

	if !tea.BoolValue(util.IsUnset(request.ChartType)) {
		query["ChartType"] = request.ChartType
	}

	if !tea.BoolValue(util.IsUnset(request.DataSource)) {
		query["DataSource"] = request.DataSource
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Input)) {
		query["Input"] = request.Input
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Subtitle)) {
		query["Subtitle"] = request.Subtitle
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Unit)) {
		query["Unit"] = request.Unit
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDynamicChartJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDynamicChartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitDynamicChartJob(request *SubmitDynamicChartJobRequest) (_result *SubmitDynamicChartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDynamicChartJobResponse{}
	_body, _err := client.SubmitDynamicChartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitDynamicImageJobWithOptions(tmpReq *SubmitDynamicImageJobRequest, runtime *util.RuntimeOptions) (_result *SubmitDynamicImageJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitDynamicImageJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Input))) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Input), tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Output))) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Output), tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.ScheduleConfig))) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.ScheduleConfig), tea.String("ScheduleConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.TemplateConfig))) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.TemplateConfig), tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitDynamicImageJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitDynamicImageJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitDynamicImageJob(request *SubmitDynamicImageJobRequest) (_result *SubmitDynamicImageJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitDynamicImageJobResponse{}
	_body, _err := client.SubmitDynamicImageJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitIProductionJobWithOptions(tmpReq *SubmitIProductionJobRequest, runtime *util.RuntimeOptions) (_result *SubmitIProductionJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitIProductionJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Input))) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Input), tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Output))) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Output), tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.ScheduleConfig))) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.ScheduleConfig), tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FunctionName)) {
		query["FunctionName"] = request.FunctionName
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.JobParams)) {
		query["JobParams"] = request.JobParams
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitIProductionJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitIProductionJob(request *SubmitIProductionJobRequest) (_result *SubmitIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.SubmitIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitLiveEditingJobWithOptions(request *SubmitLiveEditingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitLiveEditingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Clips)) {
		query["Clips"] = request.Clips
	}

	if !tea.BoolValue(util.IsUnset(request.LiveStreamConfig)) {
		query["LiveStreamConfig"] = request.LiveStreamConfig
	}

	if !tea.BoolValue(util.IsUnset(request.MediaProduceConfig)) {
		query["MediaProduceConfig"] = request.MediaProduceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaTarget)) {
		query["OutputMediaTarget"] = request.OutputMediaTarget
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitLiveEditingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitLiveEditingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitLiveEditingJob(request *SubmitLiveEditingJobRequest) (_result *SubmitLiveEditingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitLiveEditingJobResponse{}
	_body, _err := client.SubmitLiveEditingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMediaCensorJobWithOptions(tmpReq *SubmitMediaCensorJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaCensorJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitMediaCensorJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Input))) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Input), tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.ScheduleConfig))) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.ScheduleConfig), tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Barrages)) {
		query["Barrages"] = request.Barrages
	}

	if !tea.BoolValue(util.IsUnset(request.CoverImages)) {
		query["CoverImages"] = request.CoverImages
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.NotifyUrl)) {
		query["NotifyUrl"] = request.NotifyUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Output)) {
		query["Output"] = request.Output
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaCensorJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMediaCensorJob(request *SubmitMediaCensorJobRequest) (_result *SubmitMediaCensorJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.SubmitMediaCensorJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMediaInfoJobWithOptions(tmpReq *SubmitMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitMediaInfoJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Input))) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Input), tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.ScheduleConfig))) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.ScheduleConfig), tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMediaInfoJob(request *SubmitMediaInfoJobRequest) (_result *SubmitMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.SubmitMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMediaProducingJobWithOptions(request *SubmitMediaProducingJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaProducingJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.EditingProduceConfig)) {
		query["EditingProduceConfig"] = request.EditingProduceConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaConfig)) {
		query["OutputMediaConfig"] = request.OutputMediaConfig
	}

	if !tea.BoolValue(util.IsUnset(request.OutputMediaTarget)) {
		query["OutputMediaTarget"] = request.OutputMediaTarget
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectMetadata)) {
		query["ProjectMetadata"] = request.ProjectMetadata
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		query["Timeline"] = request.Timeline
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitMediaProducingJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitMediaProducingJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMediaProducingJob(request *SubmitMediaProducingJobRequest) (_result *SubmitMediaProducingJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaProducingJobResponse{}
	_body, _err := client.SubmitMediaProducingJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitSnapshotJobWithOptions(tmpReq *SubmitSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSnapshotJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Input))) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Input), tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Output))) {
		request.OutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Output), tea.String("Output"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.ScheduleConfig))) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.ScheduleConfig), tea.String("ScheduleConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.TemplateConfig))) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.TemplateConfig), tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputShrink)) {
		query["Output"] = request.OutputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSnapshotJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitSnapshotJob(request *SubmitSnapshotJobRequest) (_result *SubmitSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.SubmitSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitSubtitleProduceJobWithOptions(request *SubmitSubtitleProduceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSubtitleProduceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EditingConfig)) {
		query["EditingConfig"] = request.EditingConfig
	}

	if !tea.BoolValue(util.IsUnset(request.InputConfig)) {
		query["InputConfig"] = request.InputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.IsAsync)) {
		query["IsAsync"] = request.IsAsync
	}

	if !tea.BoolValue(util.IsUnset(request.OutputConfig)) {
		query["OutputConfig"] = request.OutputConfig
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSubtitleProduceJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSubtitleProduceJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitSubtitleProduceJob(request *SubmitSubtitleProduceJobRequest) (_result *SubmitSubtitleProduceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSubtitleProduceJobResponse{}
	_body, _err := client.SubmitSubtitleProduceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitSyncMediaInfoJobWithOptions(tmpReq *SubmitSyncMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSyncMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitSyncMediaInfoJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.Input))) {
		request.InputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.Input), tea.String("Input"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.ScheduleConfig))) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.ScheduleConfig), tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputShrink)) {
		query["Input"] = request.InputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitSyncMediaInfoJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitSyncMediaInfoJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitSyncMediaInfoJob(request *SubmitSyncMediaInfoJobRequest) (_result *SubmitSyncMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSyncMediaInfoJobResponse{}
	_body, _err := client.SubmitSyncMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitTranscodeJobWithOptions(tmpReq *SubmitTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.InputGroup)) {
		request.InputGroupShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.InputGroup, tea.String("InputGroup"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tmpReq.OutputGroup)) {
		request.OutputGroupShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.OutputGroup, tea.String("OutputGroup"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.ScheduleConfig))) {
		request.ScheduleConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.ScheduleConfig), tea.String("ScheduleConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InputGroupShrink)) {
		query["InputGroup"] = request.InputGroupShrink
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OutputGroupShrink)) {
		query["OutputGroup"] = request.OutputGroupShrink
	}

	if !tea.BoolValue(util.IsUnset(request.ScheduleConfigShrink)) {
		query["ScheduleConfig"] = request.ScheduleConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitTranscodeJob(request *SubmitTranscodeJobRequest) (_result *SubmitTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTranscodeJobResponse{}
	_body, _err := client.SubmitTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCategoryWithOptions(request *UpdateCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.CateName)) {
		query["CateName"] = request.CateName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCategory"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCategory(request *UpdateCategoryRequest) (_result *UpdateCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCategoryResponse{}
	_body, _err := client.UpdateCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCustomTemplateWithOptions(request *UpdateCustomTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateCustomTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfig)) {
		query["TemplateConfig"] = request.TemplateConfig
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateCustomTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateCustomTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCustomTemplate(request *UpdateCustomTemplateRequest) (_result *UpdateCustomTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCustomTemplateResponse{}
	_body, _err := client.UpdateCustomTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateEditingProjectWithOptions(request *UpdateEditingProjectRequest, runtime *util.RuntimeOptions) (_result *UpdateEditingProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BusinessStatus)) {
		query["BusinessStatus"] = request.BusinessStatus
	}

	if !tea.BoolValue(util.IsUnset(request.ClipsParam)) {
		query["ClipsParam"] = request.ClipsParam
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	if !tea.BoolValue(util.IsUnset(request.Timeline)) {
		query["Timeline"] = request.Timeline
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEditingProject"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEditingProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateEditingProject(request *UpdateEditingProjectRequest) (_result *UpdateEditingProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEditingProjectResponse{}
	_body, _err := client.UpdateEditingProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveTranscodeJobWithOptions(tmpReq *UpdateLiveTranscodeJobRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTranscodeJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveTranscodeJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.StreamInput))) {
		request.StreamInputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.StreamInput), tea.String("StreamInput"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.TimedConfig))) {
		request.TimedConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.TimedConfig), tea.String("TimedConfig"), tea.String("json"))
	}

	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.TranscodeOutput))) {
		request.TranscodeOutputShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.TranscodeOutput), tea.String("TranscodeOutput"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.StreamInputShrink)) {
		query["StreamInput"] = request.StreamInputShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TimedConfigShrink)) {
		query["TimedConfig"] = request.TimedConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TranscodeOutputShrink)) {
		query["TranscodeOutput"] = request.TranscodeOutputShrink
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveTranscodeJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveTranscodeJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveTranscodeJob(request *UpdateLiveTranscodeJobRequest) (_result *UpdateLiveTranscodeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTranscodeJobResponse{}
	_body, _err := client.UpdateLiveTranscodeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLiveTranscodeTemplateWithOptions(tmpReq *UpdateLiveTranscodeTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateLiveTranscodeTemplateResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &UpdateLiveTranscodeTemplateShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.TemplateConfig))) {
		request.TemplateConfigShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.TemplateConfig), tea.String("TemplateConfig"), tea.String("json"))
	}

	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateConfigShrink)) {
		query["TemplateConfig"] = request.TemplateConfigShrink
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateLiveTranscodeTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateLiveTranscodeTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLiveTranscodeTemplate(request *UpdateLiveTranscodeTemplateRequest) (_result *UpdateLiveTranscodeTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLiveTranscodeTemplateResponse{}
	_body, _err := client.UpdateLiveTranscodeTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMediaInfoWithOptions(request *UpdateMediaInfoRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppendTags)) {
		query["AppendTags"] = request.AppendTags
	}

	if !tea.BoolValue(util.IsUnset(request.BusinessType)) {
		query["BusinessType"] = request.BusinessType
	}

	if !tea.BoolValue(util.IsUnset(request.CateId)) {
		query["CateId"] = request.CateId
	}

	if !tea.BoolValue(util.IsUnset(request.Category)) {
		query["Category"] = request.Category
	}

	if !tea.BoolValue(util.IsUnset(request.CoverURL)) {
		query["CoverURL"] = request.CoverURL
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.InputURL)) {
		query["InputURL"] = request.InputURL
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaTags)) {
		query["MediaTags"] = request.MediaTags
	}

	if !tea.BoolValue(util.IsUnset(request.Title)) {
		query["Title"] = request.Title
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMediaInfo"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMediaInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMediaInfo(request *UpdateMediaInfoRequest) (_result *UpdateMediaInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaInfoResponse{}
	_body, _err := client.UpdateMediaInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdatePipelineWithOptions(request *UpdatePipelineRequest, runtime *util.RuntimeOptions) (_result *UpdatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PipelineId)) {
		query["PipelineId"] = request.PipelineId
	}

	if !tea.BoolValue(util.IsUnset(request.Priority)) {
		query["Priority"] = request.Priority
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdatePipeline"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdatePipeline(request *UpdatePipelineRequest) (_result *UpdatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.UpdatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmartJobWithOptions(request *UpdateSmartJobRequest, runtime *util.RuntimeOptions) (_result *UpdateSmartJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FEExtend)) {
		query["FEExtend"] = request.FEExtend
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSmartJob"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSmartJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmartJob(request *UpdateSmartJobRequest) (_result *UpdateSmartJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmartJobResponse{}
	_body, _err := client.UpdateSmartJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTemplateWithOptions(request *UpdateTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.CoverUrl)) {
		query["CoverUrl"] = request.CoverUrl
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PreviewMedia)) {
		query["PreviewMedia"] = request.PreviewMedia
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedMediaids)) {
		query["RelatedMediaids"] = request.RelatedMediaids
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateId)) {
		query["TemplateId"] = request.TemplateId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateTemplate"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTemplate(request *UpdateTemplateRequest) (_result *UpdateTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.UpdateTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadMediaByURLWithOptions(request *UploadMediaByURLRequest, runtime *util.RuntimeOptions) (_result *UploadMediaByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.EntityId)) {
		query["EntityId"] = request.EntityId
	}

	if !tea.BoolValue(util.IsUnset(request.MediaMetaData)) {
		query["MediaMetaData"] = request.MediaMetaData
	}

	if !tea.BoolValue(util.IsUnset(request.PostProcessConfig)) {
		query["PostProcessConfig"] = request.PostProcessConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadTargetConfig)) {
		query["UploadTargetConfig"] = request.UploadTargetConfig
	}

	if !tea.BoolValue(util.IsUnset(request.UploadURLs)) {
		query["UploadURLs"] = request.UploadURLs
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadMediaByURL"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadMediaByURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadMediaByURL(request *UploadMediaByURLRequest) (_result *UploadMediaByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadMediaByURLResponse{}
	_body, _err := client.UploadMediaByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UploadStreamByURLWithOptions(request *UploadStreamByURLRequest, runtime *util.RuntimeOptions) (_result *UploadStreamByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Definition)) {
		query["Definition"] = request.Definition
	}

	if !tea.BoolValue(util.IsUnset(request.FileExtension)) {
		query["FileExtension"] = request.FileExtension
	}

	if !tea.BoolValue(util.IsUnset(request.HDRType)) {
		query["HDRType"] = request.HDRType
	}

	if !tea.BoolValue(util.IsUnset(request.MediaId)) {
		query["MediaId"] = request.MediaId
	}

	if !tea.BoolValue(util.IsUnset(request.StreamURL)) {
		query["StreamURL"] = request.StreamURL
	}

	if !tea.BoolValue(util.IsUnset(request.UserData)) {
		query["UserData"] = request.UserData
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UploadStreamByURL"),
		Version:     tea.String("2020-11-09"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UploadStreamByURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UploadStreamByURL(request *UploadStreamByURLRequest) (_result *UploadStreamByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UploadStreamByURLResponse{}
	_body, _err := client.UploadStreamByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
